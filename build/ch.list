
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000140:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8000142:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000144:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8000146:	460e      	mov	r6, r1
 8000148:	4bba      	ldr	r3, [pc, #744]	; (8000434 <__init_array_end+0x2f4>)
 800014a:	f04f 34ff 	mov.w	r4, #4294967295
 800014e:	691d      	ldr	r5, [r3, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8000150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000154:	611c      	str	r4, [r3, #16]
 8000156:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000158:	68dd      	ldr	r5, [r3, #12]
 800015a:	60dc      	str	r4, [r3, #12]
 800015c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800015e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000160:	4db5      	ldr	r5, [pc, #724]	; (8000438 <__init_array_end+0x2f8>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000162:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000166:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8000168:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800016a:	4fb4      	ldr	r7, [pc, #720]	; (800043c <__init_array_end+0x2fc>)
 800016c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8000170:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000172:	682b      	ldr	r3, [r5, #0]
 8000174:	f8df e338 	ldr.w	lr, [pc, #824]	; 80004b0 <__init_array_end+0x370>
 8000178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800017c:	4cb0      	ldr	r4, [pc, #704]	; (8000440 <__init_array_end+0x300>)
 800017e:	602b      	str	r3, [r5, #0]
 8000180:	b089      	sub	sp, #36	; 0x24
 8000182:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000184:	f85e 3002 	ldr.w	r3, [lr, r2]
 8000188:	2100      	movs	r1, #0
 800018a:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 800018c:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000190:	3001      	adds	r0, #1
 8000192:	2807      	cmp	r0, #7
 8000194:	f102 020c 	add.w	r2, r2, #12
 8000198:	d1f4      	bne.n	8000184 <main+0x44>
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800019a:	f241 0b0a 	movw	fp, #4106	; 0x100a
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800019e:	f241 0a18 	movw	sl, #4120	; 0x1018
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80001a2:	468c      	mov	ip, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001a4:	4ba7      	ldr	r3, [pc, #668]	; (8000444 <__init_array_end+0x304>)
 80001a6:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001aa:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8000434 <__init_array_end+0x2f4>
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	f8d9 8018 	ldr.w	r8, [r9, #24]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80001b4:	4ba4      	ldr	r3, [pc, #656]	; (8000448 <__init_array_end+0x308>)
 80001b6:	f048 087d 	orr.w	r8, r8, #125	; 0x7d
 80001ba:	f8c9 8018 	str.w	r8, [r9, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001be:	4ca3      	ldr	r4, [pc, #652]	; (800044c <__init_array_end+0x30c>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80001c0:	48a3      	ldr	r0, [pc, #652]	; (8000450 <__init_array_end+0x310>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80001c2:	4ea4      	ldr	r6, [pc, #656]	; (8000454 <__init_array_end+0x314>)
  GPIOA->CRL = config->PAData.crl;
 80001c4:	f8df e2ec 	ldr.w	lr, [pc, #748]	; 80004b4 <__init_array_end+0x374>
  GPIOB->ODR = config->PBData.odr;
 80001c8:	4fa3      	ldr	r7, [pc, #652]	; (8000458 <__init_array_end+0x318>)
  GPIOB->CRH = config->PBData.crh;
 80001ca:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 80004b8 <__init_array_end+0x378>
  GPIOB->CRL = config->PBData.crl;
 80001ce:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 80004bc <__init_array_end+0x37c>
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001d2:	60e2      	str	r2, [r4, #12]
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80001d4:	4da1      	ldr	r5, [pc, #644]	; (800045c <__init_array_end+0x31c>)
  spip->config = NULL;
 80001d6:	6059      	str	r1, [r3, #4]
  GPIOA->CRH = config->PAData.crh;
 80001d8:	6066      	str	r6, [r4, #4]
  GPIOA->CRL = config->PAData.crl;
 80001da:	f8c4 e000 	str.w	lr, [r4]
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80001de:	4ea0      	ldr	r6, [pc, #640]	; (8000460 <__init_array_end+0x320>)
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80001e0:	60c7      	str	r7, [r0, #12]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80001e2:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 80004c0 <__init_array_end+0x380>
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80001e6:	f8c0 9004 	str.w	r9, [r0, #4]
  GPIOB->CRL = config->PBData.crl;
 80001ea:	f8c0 8000 	str.w	r8, [r0]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80001ee:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80004c4 <__init_array_end+0x384>
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80001f2:	f04f 3088 	mov.w	r0, #2290649224	; 0x88888888
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001f6:	4f9b      	ldr	r7, [pc, #620]	; (8000464 <__init_array_end+0x324>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80001f8:	60f2      	str	r2, [r6, #12]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 80001fa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80004c8 <__init_array_end+0x388>
#if SPI_USE_WAIT
  spip->thread = NULL;
 80001fe:	6099      	str	r1, [r3, #8]
  GPIOC->CRH = config->PCData.crh;
 8000200:	6070      	str	r0, [r6, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000202:	6159      	str	r1, [r3, #20]
  GPIOC->CRL = config->PCData.crl;
 8000204:	6030      	str	r0, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
 8000206:	f8c4 2c0c 	str.w	r2, [r4, #3084]	; 0xc0c
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 800020a:	4e97      	ldr	r6, [pc, #604]	; (8000468 <__init_array_end+0x328>)

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800020c:	f8c3 801c 	str.w	r8, [r3, #28]
  GPIOD->CRH = config->PDData.crh;
 8000210:	f8c4 0c04 	str.w	r0, [r4, #3076]	; 0xc04
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8000214:	621d      	str	r5, [r3, #32]
  GPIOD->CRL = config->PDData.crl;
 8000216:	f8c4 ec00 	str.w	lr, [r4, #3072]	; 0xc00
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800021a:	350c      	adds	r5, #12
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 800021c:	4c93      	ldr	r4, [pc, #588]	; (800046c <__init_array_end+0x32c>)
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800021e:	60fa      	str	r2, [r7, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000220:	f103 0e0c 	add.w	lr, r3, #12
 8000224:	625d      	str	r5, [r3, #36]	; 0x24
 8000226:	f5a8 3894 	sub.w	r8, r8, #75776	; 0x12800
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800022a:	2501      	movs	r5, #1
  GPIOE->CRH = config->PEData.crh;
 800022c:	6078      	str	r0, [r7, #4]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800022e:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  GPIOE->CRL = config->PEData.crl;
 8000232:	6038      	str	r0, [r7, #0]
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8000234:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8000238:	f8a9 2000 	strh.w	r2, [r9]
 800023c:	f8c3 e010 	str.w	lr, [r3, #16]
 8000240:	f8c3 e00c 	str.w	lr, [r3, #12]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8000244:	701d      	strb	r5, [r3, #0]
 8000246:	7035      	strb	r5, [r6, #0]
  gptp->config = NULL;
 8000248:	6071      	str	r1, [r6, #4]
 800024a:	f8c6 800c 	str.w	r8, [r6, #12]
 800024e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8000252:	7025      	strb	r5, [r4, #0]
 8000254:	f104 0244 	add.w	r2, r4, #68	; 0x44
  usbp->config       = NULL;
 8000258:	6061      	str	r1, [r4, #4]
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800025a:	f843 cf04 	str.w	ip, [r3, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
 800025e:	4293      	cmp	r3, r2
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 8000260:	f8c3 c01c 	str.w	ip, [r3, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000264:	f04f 0700 	mov.w	r7, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
 8000268:	d1f7      	bne.n	800025a <main+0x11a>

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800026a:	f645 5cbf 	movw	ip, #23999	; 0x5dbf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800026e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000272:	f64f 01ff 	movw	r1, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000276:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8000434 <__init_array_end+0x2f4>
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800027a:	4a7d      	ldr	r2, [pc, #500]	; (8000470 <__init_array_end+0x330>)
 800027c:	f8de 601c 	ldr.w	r6, [lr, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000280:	4d7c      	ldr	r5, [pc, #496]	; (8000474 <__init_array_end+0x334>)
 8000282:	f046 0601 	orr.w	r6, r6, #1
 8000286:	f8ce 601c 	str.w	r6, [lr, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800028e:	f04f 0801 	mov.w	r8, #1
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000292:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000296:	f04f 0980 	mov.w	r9, #128	; 0x80

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800029a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800029e:	62d8      	str	r0, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80002a0:	619f      	str	r7, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80002a2:	635f      	str	r7, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80002a4:	60df      	str	r7, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80002a6:	605f      	str	r7, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80002a8:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80002ac:	f8c3 8000 	str.w	r8, [r3]
 80002b0:	f885 931c 	strb.w	r9, [r5, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80002b4:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80002b8:	602e      	str	r6, [r5, #0]
 80002ba:	6097      	str	r7, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	68d5      	ldr	r5, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80002be:	4b6e      	ldr	r3, [pc, #440]	; (8000478 <__init_array_end+0x338>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80002c0:	4029      	ands	r1, r5
  reg_value  =  (reg_value                                 |
 80002c2:	430b      	orrs	r3, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002c4:	4d6d      	ldr	r5, [pc, #436]	; (800047c <__init_array_end+0x33c>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002c6:	60d3      	str	r3, [r2, #12]
 80002c8:	68eb      	ldr	r3, [r5, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80002ca:	496d      	ldr	r1, [pc, #436]	; (8000480 <__init_array_end+0x340>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d0:	60eb      	str	r3, [r5, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80002d2:	680b      	ldr	r3, [r1, #0]
 80002d4:	4e6b      	ldr	r6, [pc, #428]	; (8000484 <__init_array_end+0x344>)
 80002d6:	ea43 0308 	orr.w	r3, r3, r8
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 80002da:	84b0      	strh	r0, [r6, #36]	; 0x24
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80002dc:	8127      	strh	r7, [r4, #8]
  usbp->receiving    = 0;
 80002de:	8167      	strh	r7, [r4, #10]
 80002e0:	6076      	str	r6, [r6, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80002e2:	60b7      	str	r7, [r6, #8]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80002e4:	6176      	str	r6, [r6, #20]
 80002e6:	6136      	str	r6, [r6, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 80002e8:	84f7      	strh	r7, [r6, #38]	; 0x26
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002ea:	f04f 0e10 	mov.w	lr, #16
 80002ee:	600b      	str	r3, [r1, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 80002f0:	f106 051c 	add.w	r5, r6, #28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80002f4:	f04f 33ff 	mov.w	r3, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80002f8:	a802      	add	r0, sp, #8

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80002fa:	f04f 0a00 	mov.w	sl, #0
 80002fe:	f04f 0b00 	mov.w	fp, #0
 8000302:	f04f 0920 	mov.w	r9, #32
 8000306:	f882 e01f 	strb.w	lr, [r2, #31]
 800030a:	6235      	str	r5, [r6, #32]
 800030c:	f882 9022 	strb.w	r9, [r2, #34]	; 0x22
 8000310:	61f5      	str	r5, [r6, #28]
 8000312:	6036      	str	r6, [r6, #0]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 8000314:	6737      	str	r7, [r6, #112]	; 0x70

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000316:	e9cd ab06 	strd	sl, fp, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800031a:	9302      	str	r3, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
 800031c:	9703      	str	r7, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 800031e:	9704      	str	r7, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8000320:	9705      	str	r7, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000322:	f008 fc8d 	bl	8008c40 <chTMStartMeasurementX.constprop.72>
  chTMStopMeasurementX(&tm);
 8000326:	a802      	add	r0, sp, #8
 8000328:	f006 fffa 	bl	8007320 <chTMStopMeasurementX>
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 800032c:	4b56      	ldr	r3, [pc, #344]	; (8000488 <__init_array_end+0x348>)
  ch.tm.offset = tm.last;
 800032e:	9904      	ldr	r1, [sp, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000330:	f8d6 e014 	ldr.w	lr, [r6, #20]
 8000334:	6731      	str	r1, [r6, #112]	; 0x70
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000336:	4855      	ldr	r0, [pc, #340]	; (800048c <__init_array_end+0x34c>)
 8000338:	f103 0110 	add.w	r1, r3, #16
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800033c:	4a54      	ldr	r2, [pc, #336]	; (8000490 <__init_array_end+0x350>)
 800033e:	f106 052c 	add.w	r5, r6, #44	; 0x2c
 8000342:	6159      	str	r1, [r3, #20]
 8000344:	6119      	str	r1, [r3, #16]
 8000346:	f8df b184 	ldr.w	fp, [pc, #388]	; 80004cc <__init_array_end+0x38c>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800034a:	2140      	movs	r1, #64	; 0x40
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800034c:	f8df a180 	ldr.w	sl, [pc, #384]	; 80004d0 <__init_array_end+0x390>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000350:	f8df c180 	ldr.w	ip, [pc, #384]	; 80004d4 <__init_array_end+0x394>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000354:	f8c6 e040 	str.w	lr, [r6, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000358:	6371      	str	r1, [r6, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 800035a:	66b1      	str	r1, [r6, #104]	; 0x68
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800035c:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000360:	f022 0207 	bic.w	r2, r2, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000364:	f886 7049 	strb.w	r7, [r6, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000368:	6677      	str	r7, [r6, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 800036a:	6637      	str	r7, [r6, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 800036c:	f886 804a 	strb.w	r8, [r6, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8000370:	6477      	str	r7, [r6, #68]	; 0x44
  REG_INSERT(tp);
 8000372:	63f6      	str	r6, [r6, #60]	; 0x3c
 8000374:	6175      	str	r5, [r6, #20]
 8000376:	619f      	str	r7, [r3, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000378:	f106 0150 	add.w	r1, r6, #80	; 0x50
 800037c:	f8ce 5010 	str.w	r5, [lr, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000380:	f106 0e54 	add.w	lr, r6, #84	; 0x54
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000384:	f8ca 0000 	str.w	r0, [sl]
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 8000388:	609f      	str	r7, [r3, #8]
  default_heap.h_free.h.size = 0;
 800038a:	60df      	str	r7, [r3, #12]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800038c:	61b5      	str	r5, [r6, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800038e:	f886 8048 	strb.w	r8, [r6, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000392:	6531      	str	r1, [r6, #80]	; 0x50
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 8000394:	f8c3 b000 	str.w	fp, [r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000398:	f8c6 e058 	str.w	lr, [r6, #88]	; 0x58
 800039c:	f8c6 e054 	str.w	lr, [r6, #84]	; 0x54
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80003a0:	f8cc 2000 	str.w	r2, [ip]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80003a4:	f04f 0a02 	mov.w	sl, #2

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003a8:	f387 8811 	msr	BASEPRI, r7
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80003ac:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80003ae:	4a39      	ldr	r2, [pc, #228]	; (8000494 <__init_array_end+0x354>)
 80003b0:	69b3      	ldr	r3, [r6, #24]
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80003b2:	4d39      	ldr	r5, [pc, #228]	; (8000498 <__init_array_end+0x358>)
 80003b4:	619a      	str	r2, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80003b6:	f106 0078 	add.w	r0, r6, #120	; 0x78
 80003ba:	4642      	mov	r2, r8
 80003bc:	9700      	str	r7, [sp, #0]
 80003be:	21d8      	movs	r1, #216	; 0xd8
 80003c0:	4b36      	ldr	r3, [pc, #216]	; (800049c <__init_array_end+0x35c>)
 80003c2:	f006 fd35 	bl	8006e30 <chThdCreateStatic>
 80003c6:	4629      	mov	r1, r5
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;/* Disable the JTAG but keep SWD in operation */
 80003c8:	4835      	ldr	r0, [pc, #212]	; (80004a0 <__init_array_end+0x360>)
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <__init_array_end+0x364>)
 80003cc:	6843      	ldr	r3, [r0, #4]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80003ce:	f8df e108 	ldr.w	lr, [pc, #264]	; 80004d8 <__init_array_end+0x398>

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80003d2:	4e35      	ldr	r6, [pc, #212]	; (80004a8 <__init_array_end+0x368>)
 80003d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d8:	6043      	str	r3, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80003da:	f44f 7c80 	mov.w	ip, #256	; 0x100
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80003de:	f505 73aa 	add.w	r3, r5, #340	; 0x154
 80003e2:	f841 2b04 	str.w	r2, [r1], #4
 80003e6:	f105 000c 	add.w	r0, r5, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80003ea:	f105 0254 	add.w	r2, r5, #84	; 0x54
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80003ee:	f505 7b15 	add.w	fp, r5, #596	; 0x254
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80003f2:	f885 8008 	strb.w	r8, [r5, #8]
 80003f6:	f105 0830 	add.w	r8, r5, #48	; 0x30
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80003fa:	616f      	str	r7, [r5, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 80003fc:	62ed      	str	r5, [r5, #44]	; 0x2c
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 80003fe:	652d      	str	r5, [r5, #80]	; 0x50

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8000400:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000404:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000408:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
  oqp->q_notify = onfy;
 800040c:	64ee      	str	r6, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 800040e:	6069      	str	r1, [r5, #4]
 8000410:	6128      	str	r0, [r5, #16]
 8000412:	60e8      	str	r0, [r5, #12]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000414:	622a      	str	r2, [r5, #32]
 8000416:	626a      	str	r2, [r5, #36]	; 0x24
 8000418:	61aa      	str	r2, [r5, #24]
  iqp->q_top = bp + size;
 800041a:	61eb      	str	r3, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 800041c:	646b      	str	r3, [r5, #68]	; 0x44
 800041e:	64ab      	str	r3, [r5, #72]	; 0x48
 8000420:	63eb      	str	r3, [r5, #60]	; 0x3c
 8000422:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
 8000426:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800042a:	f389 8811 	msr	BASEPRI, r9
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <__init_array_end+0x36c>)
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
 8000430:	62e5      	str	r5, [r4, #44]	; 0x2c
 8000432:	e053      	b.n	80004dc <__init_array_end+0x39c>
 8000434:	40021000 	.word	0x40021000
 8000438:	40007000 	.word	0x40007000
 800043c:	20001ff8 	.word	0x20001ff8
 8000440:	20001fac 	.word	0x20001fac
 8000444:	40020000 	.word	0x40020000
 8000448:	20001f3c 	.word	0x20001f3c
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00
 8000454:	288884b8 	.word	0x288884b8
 8000458:	ffffedef 	.word	0xffffedef
 800045c:	0800985c 	.word	0x0800985c
 8000460:	40011000 	.word	0x40011000
 8000464:	40011800 	.word	0x40011800
 8000468:	20001f6c 	.word	0x20001f6c
 800046c:	20000e48 	.word	0x20000e48
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	e000e100 	.word	0xe000e100
 8000478:	05fa0300 	.word	0x05fa0300
 800047c:	e000edf0 	.word	0xe000edf0
 8000480:	e0001000 	.word	0xe0001000
 8000484:	20001de0 	.word	0x20001de0
 8000488:	200013a8 	.word	0x200013a8
 800048c:	20002003 	.word	0x20002003
 8000490:	20005000 	.word	0x20005000
 8000494:	080094b0 	.word	0x080094b0
 8000498:	200014b4 	.word	0x200014b4
 800049c:	08006821 	.word	0x08006821
 80004a0:	40010000 	.word	0x40010000
 80004a4:	08009530 	.word	0x08009530
 80004a8:	08002001 	.word	0x08002001
 80004ac:	08009510 	.word	0x08009510
 80004b0:	08009850 	.word	0x08009850
 80004b4:	b8b34b88 	.word	0xb8b34b88
 80004b8:	88828838 	.word	0x88828838
 80004bc:	88228888 	.word	0x88228888
 80004c0:	88888844 	.word	0x88888844
 80004c4:	40013000 	.word	0x40013000
 80004c8:	20000ecc 	.word	0x20000ecc
 80004cc:	08005b81 	.word	0x08005b81
 80004d0:	20001398 	.word	0x20001398
 80004d4:	200013a0 	.word	0x200013a0
 80004d8:	080029f1 	.word	0x080029f1
  usbp->out_params[config->bulk_out - 1] = sdup;
 80004dc:	64a5      	str	r5, [r4, #72]	; 0x48
  usbp->in_params[config->int_in - 1]    = sdup;
 80004de:	6325      	str	r5, [r4, #48]	; 0x30
  sdup->config = config;
  sdup->state = SDU_READY;
 80004e0:	f885 a008 	strb.w	sl, [r5, #8]
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 80004e4:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
 80004e8:	f387 8811 	msr	BASEPRI, r7
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 80004ec:	4b4e      	ldr	r3, [pc, #312]	; (8000628 <__init_array_end+0x4e8>)
 80004ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004f2:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 80004f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004f8:	f006 fdaa 	bl	8007050 <chThdSleep>
 80004fc:	f389 8811 	msr	BASEPRI, r9
 8000500:	484a      	ldr	r0, [pc, #296]	; (800062c <__init_array_end+0x4ec>)
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8000502:	463b      	mov	r3, r7
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8000504:	4601      	mov	r1, r0
 8000506:	4a4a      	ldr	r2, [pc, #296]	; (8000630 <__init_array_end+0x4f0>)
 8000508:	eb00 0809 	add.w	r8, r0, r9
 800050c:	6062      	str	r2, [r4, #4]
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 800050e:	f841 3f04 	str.w	r3, [r1, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000512:	4541      	cmp	r1, r8
    usbp->epc[i] = NULL;
 8000514:	f04f 0200 	mov.w	r2, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000518:	d1f9      	bne.n	800050e <__init_array_end+0x3ce>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 800051a:	f894 c000 	ldrb.w	ip, [r4]
 800051e:	4b45      	ldr	r3, [pc, #276]	; (8000634 <__init_array_end+0x4f4>)
 8000520:	f1bc 0f01 	cmp.w	ip, #1
 8000524:	d046      	beq.n	80005b4 <__init_array_end+0x474>
    usbp->epc[i] = NULL;
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8000526:	2302      	movs	r3, #2
 8000528:	7023      	strb	r3, [r4, #0]
 800052a:	2400      	movs	r4, #0
 800052c:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8000530:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <__init_array_end+0x4e8>)
 8000532:	4e41      	ldr	r6, [pc, #260]	; (8000638 <__init_array_end+0x4f8>)
 8000534:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000538:	615a      	str	r2, [r3, #20]
 800053a:	4f40      	ldr	r7, [pc, #256]	; (800063c <__init_array_end+0x4fc>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800053c:	9400      	str	r4, [sp, #0]
 800053e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000542:	2240      	movs	r2, #64	; 0x40
 8000544:	4b3e      	ldr	r3, [pc, #248]	; (8000640 <__init_array_end+0x500>)
 8000546:	6036      	str	r6, [r6, #0]
 8000548:	483e      	ldr	r0, [pc, #248]	; (8000644 <__init_array_end+0x504>)
 800054a:	4e3f      	ldr	r6, [pc, #252]	; (8000648 <__init_array_end+0x508>)
 800054c:	f006 fc70 	bl	8006e30 <chThdCreateStatic>
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8000550:	f04f 0e01 	mov.w	lr, #1
	chBSemObjectInit(&Silabs_busy,FALSE);/*Init it as not taken*/
	chBSemObjectInit(&Silabs_callback,FALSE);/*Init it as not taken*/
	/*
	* Creates the thread. Thread has priority slightly above normal and takes no argument
	*/
	return chThdCreateStatic(waThreadSI, sizeof(waThreadSI), NORMALPRIO+1, SI_Thread, (void*)NULL);
 8000554:	9400      	str	r4, [sp, #0]
 8000556:	483d      	ldr	r0, [pc, #244]	; (800064c <__init_array_end+0x50c>)
 8000558:	f8c6 e008 	str.w	lr, [r6, #8]
 800055c:	6076      	str	r6, [r6, #4]
 800055e:	6036      	str	r6, [r6, #0]
 8000560:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000564:	2241      	movs	r2, #65	; 0x41
 8000566:	4b3a      	ldr	r3, [pc, #232]	; (8000650 <__init_array_end+0x510>)
 8000568:	607f      	str	r7, [r7, #4]
 800056a:	603f      	str	r7, [r7, #0]
 800056c:	f8c7 e008 	str.w	lr, [r7, #8]
 8000570:	f006 fc5e 	bl	8006e30 <chThdCreateStatic>
 8000574:	4e37      	ldr	r6, [pc, #220]	; (8000654 <__init_array_end+0x514>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000576:	b144      	cbz	r4, 800058a <__init_array_end+0x44a>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8000578:	7f23      	ldrb	r3, [r4, #28]
 800057a:	2b0f      	cmp	r3, #15
 800057c:	d015      	beq.n	80005aa <__init_array_end+0x46a>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 800057e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000582:	f006 fd65 	bl	8007050 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000586:	2c00      	cmp	r4, #0
 8000588:	d1f6      	bne.n	8000578 <__init_array_end+0x438>
 800058a:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d1f0      	bne.n	8000578 <__init_array_end+0x438>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8000596:	4620      	mov	r0, r4
 8000598:	9600      	str	r6, [sp, #0]
 800059a:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800059e:	2240      	movs	r2, #64	; 0x40
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <__init_array_end+0x518>)
 80005a2:	f006 fbfd 	bl	8006da0 <chThdCreateFromHeap>
 80005a6:	4604      	mov	r4, r0
 80005a8:	e7e9      	b.n	800057e <__init_array_end+0x43e>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 80005aa:	4620      	mov	r0, r4
 80005ac:	f006 fa60 	bl	8006a70 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80005b0:	2400      	movs	r4, #0
 80005b2:	e7e4      	b.n	800057e <__init_array_end+0x43e>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80005b4:	4692      	mov	sl, r2
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005b6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000664 <__init_array_end+0x524>
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80005ba:	4f28      	ldr	r7, [pc, #160]	; (800065c <__init_array_end+0x51c>)
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005bc:	f8d9 601c 	ldr.w	r6, [r9, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005c0:	4927      	ldr	r1, [pc, #156]	; (8000660 <__init_array_end+0x520>)
 80005c2:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 80005c6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  usbp->address       = 0;
 80005ca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 80005ce:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  usbp->transmitting  = 0;
 80005d2:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 80005d4:	815a      	strh	r2, [r3, #10]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005d6:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80005da:	f8c9 601c 	str.w	r6, [r9, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005de:	f04f 0bd0 	mov.w	fp, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80005e2:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005e6:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005ea:	f04f 09e0 	mov.w	r9, #224	; 0xe0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80005ee:	f04f 0c02 	mov.w	ip, #2
 80005f2:	f881 b313 	strb.w	fp, [r1, #787]	; 0x313
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005f6:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80005fa:	f8c1 e000 	str.w	lr, [r1]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005fe:	f881 9314 	strb.w	r9, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000602:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000606:	600e      	str	r6, [r1, #0]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8000608:	643a      	str	r2, [r7, #64]	; 0x40
 800060a:	f883 c000 	strb.w	ip, [r3]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 800060e:	f840 af04 	str.w	sl, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000612:	4540      	cmp	r0, r8
    usbp->epc[i] = NULL;
 8000614:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000618:	d1f9      	bne.n	800060e <__init_array_end+0x4ce>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <__init_array_end+0x4f4>)
  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800061c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8000620:	f007 ff76 	bl	8008510 <usb_lld_reset>
 8000624:	e77f      	b.n	8000526 <__init_array_end+0x3e6>
 8000626:	bf00      	nop
 8000628:	40010c00 	.word	0x40010c00
 800062c:	20000e50 	.word	0x20000e50
 8000630:	08009520 	.word	0x08009520
 8000634:	20000e48 	.word	0x20000e48
 8000638:	2000139c 	.word	0x2000139c
 800063c:	20001f88 	.word	0x20001f88
 8000640:	08001601 	.word	0x08001601
 8000644:	20000d00 	.word	0x20000d00
 8000648:	20001fe4 	.word	0x20001fe4
 800064c:	20000ed0 	.word	0x20000ed0
 8000650:	080089a1 	.word	0x080089a1
 8000654:	08009810 	.word	0x08009810
 8000658:	08001691 	.word	0x08001691
 800065c:	40005c00 	.word	0x40005c00
 8000660:	e000e100 	.word	0xe000e100
 8000664:	40021000 	.word	0x40021000
 8000668:	f3af 8000 	nop.w
 800066c:	f3af 8000 	nop.w

08000670 <_port_switch>:
 8000670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000674:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000678:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800067c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000680 <_port_thread_start>:
 8000680:	2300      	movs	r3, #0
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	4628      	mov	r0, r5
 8000688:	47a0      	blx	r4
 800068a:	f006 fe41 	bl	8007310 <chThdExit>

0800068e <_port_switch_from_isr>:
 800068e:	f006 fad7 	bl	8006c40 <chSchDoReschedule>

08000692 <_port_exit_from_isr>:
 8000692:	df00      	svc	0
 8000694:	e7fe      	b.n	8000694 <_port_exit_from_isr+0x2>
	...

080006a0 <__aeabi_drsub>:
 80006a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	e002      	b.n	80006ac <__adddf3>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dsub>:
 80006a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006ac <__adddf3>:
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006b6:	ea94 0f05 	teq	r4, r5
 80006ba:	bf08      	it	eq
 80006bc:	ea90 0f02 	teqeq	r0, r2
 80006c0:	bf1f      	itttt	ne
 80006c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d2:	f000 80e2 	beq.w	800089a <__adddf3+0x1ee>
 80006d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80006da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80006de:	bfb8      	it	lt
 80006e0:	426d      	neglt	r5, r5
 80006e2:	dd0c      	ble.n	80006fe <__adddf3+0x52>
 80006e4:	442c      	add	r4, r5
 80006e6:	ea80 0202 	eor.w	r2, r0, r2
 80006ea:	ea81 0303 	eor.w	r3, r1, r3
 80006ee:	ea82 0000 	eor.w	r0, r2, r0
 80006f2:	ea83 0101 	eor.w	r1, r3, r1
 80006f6:	ea80 0202 	eor.w	r2, r0, r2
 80006fa:	ea81 0303 	eor.w	r3, r1, r3
 80006fe:	2d36      	cmp	r5, #54	; 0x36
 8000700:	bf88      	it	hi
 8000702:	bd30      	pophi	{r4, r5, pc}
 8000704:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800070c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000710:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000714:	d002      	beq.n	800071c <__adddf3+0x70>
 8000716:	4240      	negs	r0, r0
 8000718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000724:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000728:	d002      	beq.n	8000730 <__adddf3+0x84>
 800072a:	4252      	negs	r2, r2
 800072c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000730:	ea94 0f05 	teq	r4, r5
 8000734:	f000 80a7 	beq.w	8000886 <__adddf3+0x1da>
 8000738:	f1a4 0401 	sub.w	r4, r4, #1
 800073c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000740:	db0d      	blt.n	800075e <__adddf3+0xb2>
 8000742:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000746:	fa22 f205 	lsr.w	r2, r2, r5
 800074a:	1880      	adds	r0, r0, r2
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	fa03 f20e 	lsl.w	r2, r3, lr
 8000754:	1880      	adds	r0, r0, r2
 8000756:	fa43 f305 	asr.w	r3, r3, r5
 800075a:	4159      	adcs	r1, r3
 800075c:	e00e      	b.n	800077c <__adddf3+0xd0>
 800075e:	f1a5 0520 	sub.w	r5, r5, #32
 8000762:	f10e 0e20 	add.w	lr, lr, #32
 8000766:	2a01      	cmp	r2, #1
 8000768:	fa03 fc0e 	lsl.w	ip, r3, lr
 800076c:	bf28      	it	cs
 800076e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000772:	fa43 f305 	asr.w	r3, r3, r5
 8000776:	18c0      	adds	r0, r0, r3
 8000778:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	d507      	bpl.n	8000792 <__adddf3+0xe6>
 8000782:	f04f 0e00 	mov.w	lr, #0
 8000786:	f1dc 0c00 	rsbs	ip, ip, #0
 800078a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800078e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000792:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000796:	d31b      	bcc.n	80007d0 <__adddf3+0x124>
 8000798:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800079c:	d30c      	bcc.n	80007b8 <__adddf3+0x10c>
 800079e:	0849      	lsrs	r1, r1, #1
 80007a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80007a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007a8:	f104 0401 	add.w	r4, r4, #1
 80007ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007b4:	f080 809a 	bcs.w	80008ec <__adddf3+0x240>
 80007b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	ea41 0105 	orr.w	r1, r1, r5
 80007ce:	bd30      	pop	{r4, r5, pc}
 80007d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80007d4:	4140      	adcs	r0, r0
 80007d6:	eb41 0101 	adc.w	r1, r1, r1
 80007da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007de:	f1a4 0401 	sub.w	r4, r4, #1
 80007e2:	d1e9      	bne.n	80007b8 <__adddf3+0x10c>
 80007e4:	f091 0f00 	teq	r1, #0
 80007e8:	bf04      	itt	eq
 80007ea:	4601      	moveq	r1, r0
 80007ec:	2000      	moveq	r0, #0
 80007ee:	fab1 f381 	clz	r3, r1
 80007f2:	bf08      	it	eq
 80007f4:	3320      	addeq	r3, #32
 80007f6:	f1a3 030b 	sub.w	r3, r3, #11
 80007fa:	f1b3 0220 	subs.w	r2, r3, #32
 80007fe:	da0c      	bge.n	800081a <__adddf3+0x16e>
 8000800:	320c      	adds	r2, #12
 8000802:	dd08      	ble.n	8000816 <__adddf3+0x16a>
 8000804:	f102 0c14 	add.w	ip, r2, #20
 8000808:	f1c2 020c 	rsb	r2, r2, #12
 800080c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000810:	fa21 f102 	lsr.w	r1, r1, r2
 8000814:	e00c      	b.n	8000830 <__adddf3+0x184>
 8000816:	f102 0214 	add.w	r2, r2, #20
 800081a:	bfd8      	it	le
 800081c:	f1c2 0c20 	rsble	ip, r2, #32
 8000820:	fa01 f102 	lsl.w	r1, r1, r2
 8000824:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000828:	bfdc      	itt	le
 800082a:	ea41 010c 	orrle.w	r1, r1, ip
 800082e:	4090      	lslle	r0, r2
 8000830:	1ae4      	subs	r4, r4, r3
 8000832:	bfa2      	ittt	ge
 8000834:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000838:	4329      	orrge	r1, r5
 800083a:	bd30      	popge	{r4, r5, pc}
 800083c:	ea6f 0404 	mvn.w	r4, r4
 8000840:	3c1f      	subs	r4, #31
 8000842:	da1c      	bge.n	800087e <__adddf3+0x1d2>
 8000844:	340c      	adds	r4, #12
 8000846:	dc0e      	bgt.n	8000866 <__adddf3+0x1ba>
 8000848:	f104 0414 	add.w	r4, r4, #20
 800084c:	f1c4 0220 	rsb	r2, r4, #32
 8000850:	fa20 f004 	lsr.w	r0, r0, r4
 8000854:	fa01 f302 	lsl.w	r3, r1, r2
 8000858:	ea40 0003 	orr.w	r0, r0, r3
 800085c:	fa21 f304 	lsr.w	r3, r1, r4
 8000860:	ea45 0103 	orr.w	r1, r5, r3
 8000864:	bd30      	pop	{r4, r5, pc}
 8000866:	f1c4 040c 	rsb	r4, r4, #12
 800086a:	f1c4 0220 	rsb	r2, r4, #32
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 f304 	lsl.w	r3, r1, r4
 8000876:	ea40 0003 	orr.w	r0, r0, r3
 800087a:	4629      	mov	r1, r5
 800087c:	bd30      	pop	{r4, r5, pc}
 800087e:	fa21 f004 	lsr.w	r0, r1, r4
 8000882:	4629      	mov	r1, r5
 8000884:	bd30      	pop	{r4, r5, pc}
 8000886:	f094 0f00 	teq	r4, #0
 800088a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800088e:	bf06      	itte	eq
 8000890:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000894:	3401      	addeq	r4, #1
 8000896:	3d01      	subne	r5, #1
 8000898:	e74e      	b.n	8000738 <__adddf3+0x8c>
 800089a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800089e:	bf18      	it	ne
 80008a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008a4:	d029      	beq.n	80008fa <__adddf3+0x24e>
 80008a6:	ea94 0f05 	teq	r4, r5
 80008aa:	bf08      	it	eq
 80008ac:	ea90 0f02 	teqeq	r0, r2
 80008b0:	d005      	beq.n	80008be <__adddf3+0x212>
 80008b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80008b6:	bf04      	itt	eq
 80008b8:	4619      	moveq	r1, r3
 80008ba:	4610      	moveq	r0, r2
 80008bc:	bd30      	pop	{r4, r5, pc}
 80008be:	ea91 0f03 	teq	r1, r3
 80008c2:	bf1e      	ittt	ne
 80008c4:	2100      	movne	r1, #0
 80008c6:	2000      	movne	r0, #0
 80008c8:	bd30      	popne	{r4, r5, pc}
 80008ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008ce:	d105      	bne.n	80008dc <__adddf3+0x230>
 80008d0:	0040      	lsls	r0, r0, #1
 80008d2:	4149      	adcs	r1, r1
 80008d4:	bf28      	it	cs
 80008d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80008da:	bd30      	pop	{r4, r5, pc}
 80008dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80008e0:	bf3c      	itt	cc
 80008e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80008e6:	bd30      	popcc	{r4, r5, pc}
 80008e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80008f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd30      	pop	{r4, r5, pc}
 80008fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008fe:	bf1a      	itte	ne
 8000900:	4619      	movne	r1, r3
 8000902:	4610      	movne	r0, r2
 8000904:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000908:	bf1c      	itt	ne
 800090a:	460b      	movne	r3, r1
 800090c:	4602      	movne	r2, r0
 800090e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000912:	bf06      	itte	eq
 8000914:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000918:	ea91 0f03 	teqeq	r1, r3
 800091c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000920:	bd30      	pop	{r4, r5, pc}
 8000922:	bf00      	nop

08000924 <__aeabi_ui2d>:
 8000924:	f090 0f00 	teq	r0, #0
 8000928:	bf04      	itt	eq
 800092a:	2100      	moveq	r1, #0
 800092c:	4770      	bxeq	lr
 800092e:	b530      	push	{r4, r5, lr}
 8000930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000938:	f04f 0500 	mov.w	r5, #0
 800093c:	f04f 0100 	mov.w	r1, #0
 8000940:	e750      	b.n	80007e4 <__adddf3+0x138>
 8000942:	bf00      	nop

08000944 <__aeabi_i2d>:
 8000944:	f090 0f00 	teq	r0, #0
 8000948:	bf04      	itt	eq
 800094a:	2100      	moveq	r1, #0
 800094c:	4770      	bxeq	lr
 800094e:	b530      	push	{r4, r5, lr}
 8000950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000958:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800095c:	bf48      	it	mi
 800095e:	4240      	negmi	r0, r0
 8000960:	f04f 0100 	mov.w	r1, #0
 8000964:	e73e      	b.n	80007e4 <__adddf3+0x138>
 8000966:	bf00      	nop

08000968 <__aeabi_f2d>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800096e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000972:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000976:	bf1f      	itttt	ne
 8000978:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800097c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000980:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000984:	4770      	bxne	lr
 8000986:	f092 0f00 	teq	r2, #0
 800098a:	bf14      	ite	ne
 800098c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000990:	4770      	bxeq	lr
 8000992:	b530      	push	{r4, r5, lr}
 8000994:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800099c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009a0:	e720      	b.n	80007e4 <__adddf3+0x138>
 80009a2:	bf00      	nop

080009a4 <__aeabi_ul2d>:
 80009a4:	ea50 0201 	orrs.w	r2, r0, r1
 80009a8:	bf08      	it	eq
 80009aa:	4770      	bxeq	lr
 80009ac:	b530      	push	{r4, r5, lr}
 80009ae:	f04f 0500 	mov.w	r5, #0
 80009b2:	e00a      	b.n	80009ca <__aeabi_l2d+0x16>

080009b4 <__aeabi_l2d>:
 80009b4:	ea50 0201 	orrs.w	r2, r0, r1
 80009b8:	bf08      	it	eq
 80009ba:	4770      	bxeq	lr
 80009bc:	b530      	push	{r4, r5, lr}
 80009be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009c2:	d502      	bpl.n	80009ca <__aeabi_l2d+0x16>
 80009c4:	4240      	negs	r0, r0
 80009c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80009d6:	f43f aedc 	beq.w	8000792 <__adddf3+0xe6>
 80009da:	f04f 0203 	mov.w	r2, #3
 80009de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009e2:	bf18      	it	ne
 80009e4:	3203      	addne	r2, #3
 80009e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009ea:	bf18      	it	ne
 80009ec:	3203      	addne	r2, #3
 80009ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a02:	ea40 000e 	orr.w	r0, r0, lr
 8000a06:	fa21 f102 	lsr.w	r1, r1, r2
 8000a0a:	4414      	add	r4, r2
 8000a0c:	e6c1      	b.n	8000792 <__adddf3+0xe6>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dmul>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a1e:	bf1d      	ittte	ne
 8000a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a24:	ea94 0f0c 	teqne	r4, ip
 8000a28:	ea95 0f0c 	teqne	r5, ip
 8000a2c:	f000 f8de 	bleq	8000bec <__aeabi_dmul+0x1dc>
 8000a30:	442c      	add	r4, r5
 8000a32:	ea81 0603 	eor.w	r6, r1, r3
 8000a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a42:	bf18      	it	ne
 8000a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a50:	d038      	beq.n	8000ac4 <__aeabi_dmul+0xb4>
 8000a52:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a56:	f04f 0500 	mov.w	r5, #0
 8000a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a66:	f04f 0600 	mov.w	r6, #0
 8000a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a6e:	f09c 0f00 	teq	ip, #0
 8000a72:	bf18      	it	ne
 8000a74:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000a80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000a84:	d204      	bcs.n	8000a90 <__aeabi_dmul+0x80>
 8000a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a8a:	416d      	adcs	r5, r5
 8000a8c:	eb46 0606 	adc.w	r6, r6, r6
 8000a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000aa8:	bf88      	it	hi
 8000aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aae:	d81e      	bhi.n	8000aee <__aeabi_dmul+0xde>
 8000ab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ac8:	ea46 0101 	orr.w	r1, r6, r1
 8000acc:	ea40 0002 	orr.w	r0, r0, r2
 8000ad0:	ea81 0103 	eor.w	r1, r1, r3
 8000ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ad8:	bfc2      	ittt	gt
 8000ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae8:	f04f 0e00 	mov.w	lr, #0
 8000aec:	3c01      	subs	r4, #1
 8000aee:	f300 80ab 	bgt.w	8000c48 <__aeabi_dmul+0x238>
 8000af2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000af6:	bfde      	ittt	le
 8000af8:	2000      	movle	r0, #0
 8000afa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000afe:	bd70      	pople	{r4, r5, r6, pc}
 8000b00:	f1c4 0400 	rsb	r4, r4, #0
 8000b04:	3c20      	subs	r4, #32
 8000b06:	da35      	bge.n	8000b74 <__aeabi_dmul+0x164>
 8000b08:	340c      	adds	r4, #12
 8000b0a:	dc1b      	bgt.n	8000b44 <__aeabi_dmul+0x134>
 8000b0c:	f104 0414 	add.w	r4, r4, #20
 8000b10:	f1c4 0520 	rsb	r5, r4, #32
 8000b14:	fa00 f305 	lsl.w	r3, r0, r5
 8000b18:	fa20 f004 	lsr.w	r0, r0, r4
 8000b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b20:	ea40 0002 	orr.w	r0, r0, r2
 8000b24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b30:	fa21 f604 	lsr.w	r6, r1, r4
 8000b34:	eb42 0106 	adc.w	r1, r2, r6
 8000b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b3c:	bf08      	it	eq
 8000b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	f1c4 040c 	rsb	r4, r4, #12
 8000b48:	f1c4 0520 	rsb	r5, r4, #32
 8000b4c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b50:	fa20 f005 	lsr.w	r0, r0, r5
 8000b54:	fa01 f204 	lsl.w	r2, r1, r4
 8000b58:	ea40 0002 	orr.w	r0, r0, r2
 8000b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b64:	f141 0100 	adc.w	r1, r1, #0
 8000b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b6c:	bf08      	it	eq
 8000b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f1c4 0520 	rsb	r5, r4, #32
 8000b78:	fa00 f205 	lsl.w	r2, r0, r5
 8000b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b80:	fa20 f304 	lsr.w	r3, r0, r4
 8000b84:	fa01 f205 	lsl.w	r2, r1, r5
 8000b88:	ea43 0302 	orr.w	r3, r3, r2
 8000b8c:	fa21 f004 	lsr.w	r0, r1, r4
 8000b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b94:	fa21 f204 	lsr.w	r2, r1, r4
 8000b98:	ea20 0002 	bic.w	r0, r0, r2
 8000b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ba4:	bf08      	it	eq
 8000ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f094 0f00 	teq	r4, #0
 8000bb0:	d10f      	bne.n	8000bd2 <__aeabi_dmul+0x1c2>
 8000bb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000bb6:	0040      	lsls	r0, r0, #1
 8000bb8:	eb41 0101 	adc.w	r1, r1, r1
 8000bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bc0:	bf08      	it	eq
 8000bc2:	3c01      	subeq	r4, #1
 8000bc4:	d0f7      	beq.n	8000bb6 <__aeabi_dmul+0x1a6>
 8000bc6:	ea41 0106 	orr.w	r1, r1, r6
 8000bca:	f095 0f00 	teq	r5, #0
 8000bce:	bf18      	it	ne
 8000bd0:	4770      	bxne	lr
 8000bd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	eb43 0303 	adc.w	r3, r3, r3
 8000bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000be0:	bf08      	it	eq
 8000be2:	3d01      	subeq	r5, #1
 8000be4:	d0f7      	beq.n	8000bd6 <__aeabi_dmul+0x1c6>
 8000be6:	ea43 0306 	orr.w	r3, r3, r6
 8000bea:	4770      	bx	lr
 8000bec:	ea94 0f0c 	teq	r4, ip
 8000bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bf4:	bf18      	it	ne
 8000bf6:	ea95 0f0c 	teqne	r5, ip
 8000bfa:	d00c      	beq.n	8000c16 <__aeabi_dmul+0x206>
 8000bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c00:	bf18      	it	ne
 8000c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c06:	d1d1      	bne.n	8000bac <__aeabi_dmul+0x19c>
 8000c08:	ea81 0103 	eor.w	r1, r1, r3
 8000c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c1a:	bf06      	itte	eq
 8000c1c:	4610      	moveq	r0, r2
 8000c1e:	4619      	moveq	r1, r3
 8000c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c24:	d019      	beq.n	8000c5a <__aeabi_dmul+0x24a>
 8000c26:	ea94 0f0c 	teq	r4, ip
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dmul+0x222>
 8000c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c30:	d113      	bne.n	8000c5a <__aeabi_dmul+0x24a>
 8000c32:	ea95 0f0c 	teq	r5, ip
 8000c36:	d105      	bne.n	8000c44 <__aeabi_dmul+0x234>
 8000c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c3c:	bf1c      	itt	ne
 8000c3e:	4610      	movne	r0, r2
 8000c40:	4619      	movne	r1, r3
 8000c42:	d10a      	bne.n	8000c5a <__aeabi_dmul+0x24a>
 8000c44:	ea81 0103 	eor.w	r1, r1, r3
 8000c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
 8000c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <__aeabi_ddiv>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c72:	bf1d      	ittte	ne
 8000c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c78:	ea94 0f0c 	teqne	r4, ip
 8000c7c:	ea95 0f0c 	teqne	r5, ip
 8000c80:	f000 f8a7 	bleq	8000dd2 <__aeabi_ddiv+0x16e>
 8000c84:	eba4 0405 	sub.w	r4, r4, r5
 8000c88:	ea81 0e03 	eor.w	lr, r1, r3
 8000c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c94:	f000 8088 	beq.w	8000da8 <__aeabi_ddiv+0x144>
 8000c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000cb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000cbc:	429d      	cmp	r5, r3
 8000cbe:	bf08      	it	eq
 8000cc0:	4296      	cmpeq	r6, r2
 8000cc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000cc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000cca:	d202      	bcs.n	8000cd2 <__aeabi_ddiv+0x6e>
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cd2:	1ab6      	subs	r6, r6, r2
 8000cd4:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000ce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cee:	bf22      	ittt	cs
 8000cf0:	1ab6      	subcs	r6, r6, r2
 8000cf2:	4675      	movcs	r5, lr
 8000cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d06:	bf22      	ittt	cs
 8000d08:	1ab6      	subcs	r6, r6, r2
 8000d0a:	4675      	movcs	r5, lr
 8000d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d10:	085b      	lsrs	r3, r3, #1
 8000d12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d1e:	bf22      	ittt	cs
 8000d20:	1ab6      	subcs	r6, r6, r2
 8000d22:	4675      	movcs	r5, lr
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d36:	bf22      	ittt	cs
 8000d38:	1ab6      	subcs	r6, r6, r2
 8000d3a:	4675      	movcs	r5, lr
 8000d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000d44:	d018      	beq.n	8000d78 <__aeabi_ddiv+0x114>
 8000d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000d62:	d1c0      	bne.n	8000ce6 <__aeabi_ddiv+0x82>
 8000d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d68:	d10b      	bne.n	8000d82 <__aeabi_ddiv+0x11e>
 8000d6a:	ea41 0100 	orr.w	r1, r1, r0
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000d76:	e7b6      	b.n	8000ce6 <__aeabi_ddiv+0x82>
 8000d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d7c:	bf04      	itt	eq
 8000d7e:	4301      	orreq	r1, r0
 8000d80:	2000      	moveq	r0, #0
 8000d82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d86:	bf88      	it	hi
 8000d88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d8c:	f63f aeaf 	bhi.w	8000aee <__aeabi_dmul+0xde>
 8000d90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d94:	bf04      	itt	eq
 8000d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d9e:	f150 0000 	adcs.w	r0, r0, #0
 8000da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000db4:	bfc2      	ittt	gt
 8000db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000dbe:	bd70      	popgt	{r4, r5, r6, pc}
 8000dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000dc4:	f04f 0e00 	mov.w	lr, #0
 8000dc8:	3c01      	subs	r4, #1
 8000dca:	e690      	b.n	8000aee <__aeabi_dmul+0xde>
 8000dcc:	ea45 0e06 	orr.w	lr, r5, r6
 8000dd0:	e68d      	b.n	8000aee <__aeabi_dmul+0xde>
 8000dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000dd6:	ea94 0f0c 	teq	r4, ip
 8000dda:	bf08      	it	eq
 8000ddc:	ea95 0f0c 	teqeq	r5, ip
 8000de0:	f43f af3b 	beq.w	8000c5a <__aeabi_dmul+0x24a>
 8000de4:	ea94 0f0c 	teq	r4, ip
 8000de8:	d10a      	bne.n	8000e00 <__aeabi_ddiv+0x19c>
 8000dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000dee:	f47f af34 	bne.w	8000c5a <__aeabi_dmul+0x24a>
 8000df2:	ea95 0f0c 	teq	r5, ip
 8000df6:	f47f af25 	bne.w	8000c44 <__aeabi_dmul+0x234>
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	e72c      	b.n	8000c5a <__aeabi_dmul+0x24a>
 8000e00:	ea95 0f0c 	teq	r5, ip
 8000e04:	d106      	bne.n	8000e14 <__aeabi_ddiv+0x1b0>
 8000e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e0a:	f43f aefd 	beq.w	8000c08 <__aeabi_dmul+0x1f8>
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	e722      	b.n	8000c5a <__aeabi_dmul+0x24a>
 8000e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e18:	bf18      	it	ne
 8000e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e1e:	f47f aec5 	bne.w	8000bac <__aeabi_dmul+0x19c>
 8000e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000e26:	f47f af0d 	bne.w	8000c44 <__aeabi_dmul+0x234>
 8000e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000e2e:	f47f aeeb 	bne.w	8000c08 <__aeabi_dmul+0x1f8>
 8000e32:	e712      	b.n	8000c5a <__aeabi_dmul+0x24a>
	...

08000e40 <__aeabi_d2iz>:
 8000e40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e48:	d215      	bcs.n	8000e76 <__aeabi_d2iz+0x36>
 8000e4a:	d511      	bpl.n	8000e70 <__aeabi_d2iz+0x30>
 8000e4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e54:	d912      	bls.n	8000e7c <__aeabi_d2iz+0x3c>
 8000e56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e66:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6a:	bf18      	it	ne
 8000e6c:	4240      	negne	r0, r0
 8000e6e:	4770      	bx	lr
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	4770      	bx	lr
 8000e76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e7a:	d105      	bne.n	8000e88 <__aeabi_d2iz+0x48>
 8000e7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e80:	bf08      	it	eq
 8000e82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e86:	4770      	bx	lr
 8000e88:	f04f 0000 	mov.w	r0, #0
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <__aeabi_d2uiz>:
 8000e90:	004a      	lsls	r2, r1, #1
 8000e92:	d211      	bcs.n	8000eb8 <__aeabi_d2uiz+0x28>
 8000e94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e98:	d211      	bcs.n	8000ebe <__aeabi_d2uiz+0x2e>
 8000e9a:	d50d      	bpl.n	8000eb8 <__aeabi_d2uiz+0x28>
 8000e9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ea0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ea4:	d40e      	bmi.n	8000ec4 <__aeabi_d2uiz+0x34>
 8000ea6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb6:	4770      	bx	lr
 8000eb8:	f04f 0000 	mov.w	r0, #0
 8000ebc:	4770      	bx	lr
 8000ebe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ec2:	d102      	bne.n	8000eca <__aeabi_d2uiz+0x3a>
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	4770      	bx	lr
 8000eca:	f04f 0000 	mov.w	r0, #0
 8000ece:	4770      	bx	lr

08000ed0 <__aeabi_d2f>:
 8000ed0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ed4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ed8:	bf24      	itt	cs
 8000eda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ede:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ee2:	d90d      	bls.n	8000f00 <__aeabi_d2f+0x30>
 8000ee4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000eec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ef0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ef4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ef8:	bf08      	it	eq
 8000efa:	f020 0001 	biceq.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f04:	d121      	bne.n	8000f4a <__aeabi_d2f+0x7a>
 8000f06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f0a:	bfbc      	itt	lt
 8000f0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f10:	4770      	bxlt	lr
 8000f12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f16:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f1a:	f1c2 0218 	rsb	r2, r2, #24
 8000f1e:	f1c2 0c20 	rsb	ip, r2, #32
 8000f22:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f26:	fa20 f002 	lsr.w	r0, r0, r2
 8000f2a:	bf18      	it	ne
 8000f2c:	f040 0001 	orrne.w	r0, r0, #1
 8000f30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f38:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f3c:	ea40 000c 	orr.w	r0, r0, ip
 8000f40:	fa23 f302 	lsr.w	r3, r3, r2
 8000f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f48:	e7cc      	b.n	8000ee4 <__aeabi_d2f+0x14>
 8000f4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f4e:	d107      	bne.n	8000f60 <__aeabi_d2f+0x90>
 8000f50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f54:	bf1e      	ittt	ne
 8000f56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f5e:	4770      	bxne	lr
 8000f60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__aeabi_frsub>:
 8000f70:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000f74:	e002      	b.n	8000f7c <__addsf3>
 8000f76:	bf00      	nop

08000f78 <__aeabi_fsub>:
 8000f78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000f7c <__addsf3>:
 8000f7c:	0042      	lsls	r2, r0, #1
 8000f7e:	bf1f      	itttt	ne
 8000f80:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000f84:	ea92 0f03 	teqne	r2, r3
 8000f88:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000f8c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f90:	d06a      	beq.n	8001068 <__addsf3+0xec>
 8000f92:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000f96:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000f9a:	bfc1      	itttt	gt
 8000f9c:	18d2      	addgt	r2, r2, r3
 8000f9e:	4041      	eorgt	r1, r0
 8000fa0:	4048      	eorgt	r0, r1
 8000fa2:	4041      	eorgt	r1, r0
 8000fa4:	bfb8      	it	lt
 8000fa6:	425b      	neglt	r3, r3
 8000fa8:	2b19      	cmp	r3, #25
 8000faa:	bf88      	it	hi
 8000fac:	4770      	bxhi	lr
 8000fae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000fba:	bf18      	it	ne
 8000fbc:	4240      	negne	r0, r0
 8000fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000fc2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000fc6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000fca:	bf18      	it	ne
 8000fcc:	4249      	negne	r1, r1
 8000fce:	ea92 0f03 	teq	r2, r3
 8000fd2:	d03f      	beq.n	8001054 <__addsf3+0xd8>
 8000fd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000fd8:	fa41 fc03 	asr.w	ip, r1, r3
 8000fdc:	eb10 000c 	adds.w	r0, r0, ip
 8000fe0:	f1c3 0320 	rsb	r3, r3, #32
 8000fe4:	fa01 f103 	lsl.w	r1, r1, r3
 8000fe8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000fec:	d502      	bpl.n	8000ff4 <__addsf3+0x78>
 8000fee:	4249      	negs	r1, r1
 8000ff0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ff4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ff8:	d313      	bcc.n	8001022 <__addsf3+0xa6>
 8000ffa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ffe:	d306      	bcc.n	800100e <__addsf3+0x92>
 8001000:	0840      	lsrs	r0, r0, #1
 8001002:	ea4f 0131 	mov.w	r1, r1, rrx
 8001006:	f102 0201 	add.w	r2, r2, #1
 800100a:	2afe      	cmp	r2, #254	; 0xfe
 800100c:	d251      	bcs.n	80010b2 <__addsf3+0x136>
 800100e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8001012:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001016:	bf08      	it	eq
 8001018:	f020 0001 	biceq.w	r0, r0, #1
 800101c:	ea40 0003 	orr.w	r0, r0, r3
 8001020:	4770      	bx	lr
 8001022:	0049      	lsls	r1, r1, #1
 8001024:	eb40 0000 	adc.w	r0, r0, r0
 8001028:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800102c:	f1a2 0201 	sub.w	r2, r2, #1
 8001030:	d1ed      	bne.n	800100e <__addsf3+0x92>
 8001032:	fab0 fc80 	clz	ip, r0
 8001036:	f1ac 0c08 	sub.w	ip, ip, #8
 800103a:	ebb2 020c 	subs.w	r2, r2, ip
 800103e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001042:	bfaa      	itet	ge
 8001044:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001048:	4252      	neglt	r2, r2
 800104a:	4318      	orrge	r0, r3
 800104c:	bfbc      	itt	lt
 800104e:	40d0      	lsrlt	r0, r2
 8001050:	4318      	orrlt	r0, r3
 8001052:	4770      	bx	lr
 8001054:	f092 0f00 	teq	r2, #0
 8001058:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800105c:	bf06      	itte	eq
 800105e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8001062:	3201      	addeq	r2, #1
 8001064:	3b01      	subne	r3, #1
 8001066:	e7b5      	b.n	8000fd4 <__addsf3+0x58>
 8001068:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	bf18      	it	ne
 8001072:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001076:	d021      	beq.n	80010bc <__addsf3+0x140>
 8001078:	ea92 0f03 	teq	r2, r3
 800107c:	d004      	beq.n	8001088 <__addsf3+0x10c>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	bf08      	it	eq
 8001084:	4608      	moveq	r0, r1
 8001086:	4770      	bx	lr
 8001088:	ea90 0f01 	teq	r0, r1
 800108c:	bf1c      	itt	ne
 800108e:	2000      	movne	r0, #0
 8001090:	4770      	bxne	lr
 8001092:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8001096:	d104      	bne.n	80010a2 <__addsf3+0x126>
 8001098:	0040      	lsls	r0, r0, #1
 800109a:	bf28      	it	cs
 800109c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80010a6:	bf3c      	itt	cc
 80010a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80010ac:	4770      	bxcc	lr
 80010ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80010b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80010b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ba:	4770      	bx	lr
 80010bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80010c0:	bf16      	itet	ne
 80010c2:	4608      	movne	r0, r1
 80010c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80010c8:	4601      	movne	r1, r0
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	bf06      	itte	eq
 80010ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80010d2:	ea90 0f01 	teqeq	r0, r1
 80010d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80010da:	4770      	bx	lr

080010dc <__aeabi_ui2f>:
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e004      	b.n	80010ec <__aeabi_i2f+0x8>
 80010e2:	bf00      	nop

080010e4 <__aeabi_i2f>:
 80010e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80010e8:	bf48      	it	mi
 80010ea:	4240      	negmi	r0, r0
 80010ec:	ea5f 0c00 	movs.w	ip, r0
 80010f0:	bf08      	it	eq
 80010f2:	4770      	bxeq	lr
 80010f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80010f8:	4601      	mov	r1, r0
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	e01c      	b.n	800113a <__aeabi_l2f+0x2a>

08001100 <__aeabi_ul2f>:
 8001100:	ea50 0201 	orrs.w	r2, r0, r1
 8001104:	bf08      	it	eq
 8001106:	4770      	bxeq	lr
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e00a      	b.n	8001124 <__aeabi_l2f+0x14>
 800110e:	bf00      	nop

08001110 <__aeabi_l2f>:
 8001110:	ea50 0201 	orrs.w	r2, r0, r1
 8001114:	bf08      	it	eq
 8001116:	4770      	bxeq	lr
 8001118:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800111c:	d502      	bpl.n	8001124 <__aeabi_l2f+0x14>
 800111e:	4240      	negs	r0, r0
 8001120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001124:	ea5f 0c01 	movs.w	ip, r1
 8001128:	bf02      	ittt	eq
 800112a:	4684      	moveq	ip, r0
 800112c:	4601      	moveq	r1, r0
 800112e:	2000      	moveq	r0, #0
 8001130:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001134:	bf08      	it	eq
 8001136:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800113a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800113e:	fabc f28c 	clz	r2, ip
 8001142:	3a08      	subs	r2, #8
 8001144:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001148:	db10      	blt.n	800116c <__aeabi_l2f+0x5c>
 800114a:	fa01 fc02 	lsl.w	ip, r1, r2
 800114e:	4463      	add	r3, ip
 8001150:	fa00 fc02 	lsl.w	ip, r0, r2
 8001154:	f1c2 0220 	rsb	r2, r2, #32
 8001158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800115c:	fa20 f202 	lsr.w	r2, r0, r2
 8001160:	eb43 0002 	adc.w	r0, r3, r2
 8001164:	bf08      	it	eq
 8001166:	f020 0001 	biceq.w	r0, r0, #1
 800116a:	4770      	bx	lr
 800116c:	f102 0220 	add.w	r2, r2, #32
 8001170:	fa01 fc02 	lsl.w	ip, r1, r2
 8001174:	f1c2 0220 	rsb	r2, r2, #32
 8001178:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800117c:	fa21 f202 	lsr.w	r2, r1, r2
 8001180:	eb43 0002 	adc.w	r0, r3, r2
 8001184:	bf08      	it	eq
 8001186:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800118a:	4770      	bx	lr
 800118c:	0000      	movs	r0, r0
	...

08001190 <__aeabi_fmul>:
 8001190:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001198:	bf1e      	ittt	ne
 800119a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800119e:	ea92 0f0c 	teqne	r2, ip
 80011a2:	ea93 0f0c 	teqne	r3, ip
 80011a6:	d06f      	beq.n	8001288 <__aeabi_fmul+0xf8>
 80011a8:	441a      	add	r2, r3
 80011aa:	ea80 0c01 	eor.w	ip, r0, r1
 80011ae:	0240      	lsls	r0, r0, #9
 80011b0:	bf18      	it	ne
 80011b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80011b6:	d01e      	beq.n	80011f6 <__aeabi_fmul+0x66>
 80011b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80011c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80011c4:	fba0 3101 	umull	r3, r1, r0, r1
 80011c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80011cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80011d0:	bf3e      	ittt	cc
 80011d2:	0049      	lslcc	r1, r1, #1
 80011d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80011d8:	005b      	lslcc	r3, r3, #1
 80011da:	ea40 0001 	orr.w	r0, r0, r1
 80011de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80011e2:	2afd      	cmp	r2, #253	; 0xfd
 80011e4:	d81d      	bhi.n	8001222 <__aeabi_fmul+0x92>
 80011e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011ee:	bf08      	it	eq
 80011f0:	f020 0001 	biceq.w	r0, r0, #1
 80011f4:	4770      	bx	lr
 80011f6:	f090 0f00 	teq	r0, #0
 80011fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80011fe:	bf08      	it	eq
 8001200:	0249      	lsleq	r1, r1, #9
 8001202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800120a:	3a7f      	subs	r2, #127	; 0x7f
 800120c:	bfc2      	ittt	gt
 800120e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001216:	4770      	bxgt	lr
 8001218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	3a01      	subs	r2, #1
 8001222:	dc5d      	bgt.n	80012e0 <__aeabi_fmul+0x150>
 8001224:	f112 0f19 	cmn.w	r2, #25
 8001228:	bfdc      	itt	le
 800122a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800122e:	4770      	bxle	lr
 8001230:	f1c2 0200 	rsb	r2, r2, #0
 8001234:	0041      	lsls	r1, r0, #1
 8001236:	fa21 f102 	lsr.w	r1, r1, r2
 800123a:	f1c2 0220 	rsb	r2, r2, #32
 800123e:	fa00 fc02 	lsl.w	ip, r0, r2
 8001242:	ea5f 0031 	movs.w	r0, r1, rrx
 8001246:	f140 0000 	adc.w	r0, r0, #0
 800124a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800124e:	bf08      	it	eq
 8001250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001254:	4770      	bx	lr
 8001256:	f092 0f00 	teq	r2, #0
 800125a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800125e:	bf02      	ittt	eq
 8001260:	0040      	lsleq	r0, r0, #1
 8001262:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001266:	3a01      	subeq	r2, #1
 8001268:	d0f9      	beq.n	800125e <__aeabi_fmul+0xce>
 800126a:	ea40 000c 	orr.w	r0, r0, ip
 800126e:	f093 0f00 	teq	r3, #0
 8001272:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001276:	bf02      	ittt	eq
 8001278:	0049      	lsleq	r1, r1, #1
 800127a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800127e:	3b01      	subeq	r3, #1
 8001280:	d0f9      	beq.n	8001276 <__aeabi_fmul+0xe6>
 8001282:	ea41 010c 	orr.w	r1, r1, ip
 8001286:	e78f      	b.n	80011a8 <__aeabi_fmul+0x18>
 8001288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800128c:	ea92 0f0c 	teq	r2, ip
 8001290:	bf18      	it	ne
 8001292:	ea93 0f0c 	teqne	r3, ip
 8001296:	d00a      	beq.n	80012ae <__aeabi_fmul+0x11e>
 8001298:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800129c:	bf18      	it	ne
 800129e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80012a2:	d1d8      	bne.n	8001256 <__aeabi_fmul+0xc6>
 80012a4:	ea80 0001 	eor.w	r0, r0, r1
 80012a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012ac:	4770      	bx	lr
 80012ae:	f090 0f00 	teq	r0, #0
 80012b2:	bf17      	itett	ne
 80012b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80012b8:	4608      	moveq	r0, r1
 80012ba:	f091 0f00 	teqne	r1, #0
 80012be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80012c2:	d014      	beq.n	80012ee <__aeabi_fmul+0x15e>
 80012c4:	ea92 0f0c 	teq	r2, ip
 80012c8:	d101      	bne.n	80012ce <__aeabi_fmul+0x13e>
 80012ca:	0242      	lsls	r2, r0, #9
 80012cc:	d10f      	bne.n	80012ee <__aeabi_fmul+0x15e>
 80012ce:	ea93 0f0c 	teq	r3, ip
 80012d2:	d103      	bne.n	80012dc <__aeabi_fmul+0x14c>
 80012d4:	024b      	lsls	r3, r1, #9
 80012d6:	bf18      	it	ne
 80012d8:	4608      	movne	r0, r1
 80012da:	d108      	bne.n	80012ee <__aeabi_fmul+0x15e>
 80012dc:	ea80 0001 	eor.w	r0, r0, r1
 80012e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80012e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80012ec:	4770      	bx	lr
 80012ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80012f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80012f6:	4770      	bx	lr

080012f8 <__aeabi_fdiv>:
 80012f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001300:	bf1e      	ittt	ne
 8001302:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001306:	ea92 0f0c 	teqne	r2, ip
 800130a:	ea93 0f0c 	teqne	r3, ip
 800130e:	d069      	beq.n	80013e4 <__aeabi_fdiv+0xec>
 8001310:	eba2 0203 	sub.w	r2, r2, r3
 8001314:	ea80 0c01 	eor.w	ip, r0, r1
 8001318:	0249      	lsls	r1, r1, #9
 800131a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800131e:	d037      	beq.n	8001390 <__aeabi_fdiv+0x98>
 8001320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001324:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001328:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800132c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001330:	428b      	cmp	r3, r1
 8001332:	bf38      	it	cc
 8001334:	005b      	lslcc	r3, r3, #1
 8001336:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800133a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800133e:	428b      	cmp	r3, r1
 8001340:	bf24      	itt	cs
 8001342:	1a5b      	subcs	r3, r3, r1
 8001344:	ea40 000c 	orrcs.w	r0, r0, ip
 8001348:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800134c:	bf24      	itt	cs
 800134e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001352:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001356:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800135a:	bf24      	itt	cs
 800135c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001360:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001364:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001368:	bf24      	itt	cs
 800136a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800136e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	bf18      	it	ne
 8001376:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800137a:	d1e0      	bne.n	800133e <__aeabi_fdiv+0x46>
 800137c:	2afd      	cmp	r2, #253	; 0xfd
 800137e:	f63f af50 	bhi.w	8001222 <__aeabi_fmul+0x92>
 8001382:	428b      	cmp	r3, r1
 8001384:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001388:	bf08      	it	eq
 800138a:	f020 0001 	biceq.w	r0, r0, #1
 800138e:	4770      	bx	lr
 8001390:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001394:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001398:	327f      	adds	r2, #127	; 0x7f
 800139a:	bfc2      	ittt	gt
 800139c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80013a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80013a4:	4770      	bxgt	lr
 80013a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	3a01      	subs	r2, #1
 80013b0:	e737      	b.n	8001222 <__aeabi_fmul+0x92>
 80013b2:	f092 0f00 	teq	r2, #0
 80013b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80013ba:	bf02      	ittt	eq
 80013bc:	0040      	lsleq	r0, r0, #1
 80013be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80013c2:	3a01      	subeq	r2, #1
 80013c4:	d0f9      	beq.n	80013ba <__aeabi_fdiv+0xc2>
 80013c6:	ea40 000c 	orr.w	r0, r0, ip
 80013ca:	f093 0f00 	teq	r3, #0
 80013ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80013d2:	bf02      	ittt	eq
 80013d4:	0049      	lsleq	r1, r1, #1
 80013d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80013da:	3b01      	subeq	r3, #1
 80013dc:	d0f9      	beq.n	80013d2 <__aeabi_fdiv+0xda>
 80013de:	ea41 010c 	orr.w	r1, r1, ip
 80013e2:	e795      	b.n	8001310 <__aeabi_fdiv+0x18>
 80013e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80013e8:	ea92 0f0c 	teq	r2, ip
 80013ec:	d108      	bne.n	8001400 <__aeabi_fdiv+0x108>
 80013ee:	0242      	lsls	r2, r0, #9
 80013f0:	f47f af7d 	bne.w	80012ee <__aeabi_fmul+0x15e>
 80013f4:	ea93 0f0c 	teq	r3, ip
 80013f8:	f47f af70 	bne.w	80012dc <__aeabi_fmul+0x14c>
 80013fc:	4608      	mov	r0, r1
 80013fe:	e776      	b.n	80012ee <__aeabi_fmul+0x15e>
 8001400:	ea93 0f0c 	teq	r3, ip
 8001404:	d104      	bne.n	8001410 <__aeabi_fdiv+0x118>
 8001406:	024b      	lsls	r3, r1, #9
 8001408:	f43f af4c 	beq.w	80012a4 <__aeabi_fmul+0x114>
 800140c:	4608      	mov	r0, r1
 800140e:	e76e      	b.n	80012ee <__aeabi_fmul+0x15e>
 8001410:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001414:	bf18      	it	ne
 8001416:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800141a:	d1ca      	bne.n	80013b2 <__aeabi_fdiv+0xba>
 800141c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001420:	f47f af5c 	bne.w	80012dc <__aeabi_fmul+0x14c>
 8001424:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001428:	f47f af3c 	bne.w	80012a4 <__aeabi_fmul+0x114>
 800142c:	e75f      	b.n	80012ee <__aeabi_fmul+0x15e>
 800142e:	bf00      	nop

08001430 <__gesf2>:
 8001430:	f04f 3cff 	mov.w	ip, #4294967295
 8001434:	e006      	b.n	8001444 <__cmpsf2+0x4>
 8001436:	bf00      	nop

08001438 <__lesf2>:
 8001438:	f04f 0c01 	mov.w	ip, #1
 800143c:	e002      	b.n	8001444 <__cmpsf2+0x4>
 800143e:	bf00      	nop

08001440 <__cmpsf2>:
 8001440:	f04f 0c01 	mov.w	ip, #1
 8001444:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001448:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800144c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001450:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001454:	bf18      	it	ne
 8001456:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800145a:	d011      	beq.n	8001480 <__cmpsf2+0x40>
 800145c:	b001      	add	sp, #4
 800145e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001462:	bf18      	it	ne
 8001464:	ea90 0f01 	teqne	r0, r1
 8001468:	bf58      	it	pl
 800146a:	ebb2 0003 	subspl.w	r0, r2, r3
 800146e:	bf88      	it	hi
 8001470:	17c8      	asrhi	r0, r1, #31
 8001472:	bf38      	it	cc
 8001474:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001478:	bf18      	it	ne
 800147a:	f040 0001 	orrne.w	r0, r0, #1
 800147e:	4770      	bx	lr
 8001480:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001484:	d102      	bne.n	800148c <__cmpsf2+0x4c>
 8001486:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800148a:	d105      	bne.n	8001498 <__cmpsf2+0x58>
 800148c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001490:	d1e4      	bne.n	800145c <__cmpsf2+0x1c>
 8001492:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001496:	d0e1      	beq.n	800145c <__cmpsf2+0x1c>
 8001498:	f85d 0b04 	ldr.w	r0, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <__aeabi_cfrcmple>:
 80014a0:	4684      	mov	ip, r0
 80014a2:	4608      	mov	r0, r1
 80014a4:	4661      	mov	r1, ip
 80014a6:	e7ff      	b.n	80014a8 <__aeabi_cfcmpeq>

080014a8 <__aeabi_cfcmpeq>:
 80014a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80014aa:	f7ff ffc9 	bl	8001440 <__cmpsf2>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	bf48      	it	mi
 80014b2:	f110 0f00 	cmnmi.w	r0, #0
 80014b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080014b8 <__aeabi_fcmpeq>:
 80014b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014bc:	f7ff fff4 	bl	80014a8 <__aeabi_cfcmpeq>
 80014c0:	bf0c      	ite	eq
 80014c2:	2001      	moveq	r0, #1
 80014c4:	2000      	movne	r0, #0
 80014c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014ca:	bf00      	nop

080014cc <__aeabi_fcmplt>:
 80014cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014d0:	f7ff ffea 	bl	80014a8 <__aeabi_cfcmpeq>
 80014d4:	bf34      	ite	cc
 80014d6:	2001      	movcc	r0, #1
 80014d8:	2000      	movcs	r0, #0
 80014da:	f85d fb08 	ldr.w	pc, [sp], #8
 80014de:	bf00      	nop

080014e0 <__aeabi_fcmple>:
 80014e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014e4:	f7ff ffe0 	bl	80014a8 <__aeabi_cfcmpeq>
 80014e8:	bf94      	ite	ls
 80014ea:	2001      	movls	r0, #1
 80014ec:	2000      	movhi	r0, #0
 80014ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80014f2:	bf00      	nop

080014f4 <__aeabi_fcmpge>:
 80014f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014f8:	f7ff ffd2 	bl	80014a0 <__aeabi_cfrcmple>
 80014fc:	bf94      	ite	ls
 80014fe:	2001      	movls	r0, #1
 8001500:	2000      	movhi	r0, #0
 8001502:	f85d fb08 	ldr.w	pc, [sp], #8
 8001506:	bf00      	nop

08001508 <__aeabi_fcmpgt>:
 8001508:	f84d ed08 	str.w	lr, [sp, #-8]!
 800150c:	f7ff ffc8 	bl	80014a0 <__aeabi_cfrcmple>
 8001510:	bf34      	ite	cc
 8001512:	2001      	movcc	r0, #1
 8001514:	2000      	movcs	r0, #0
 8001516:	f85d fb08 	ldr.w	pc, [sp], #8
 800151a:	bf00      	nop
 800151c:	0000      	movs	r0, r0
	...

08001520 <__aeabi_f2iz>:
 8001520:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001524:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001528:	d30f      	bcc.n	800154a <__aeabi_f2iz+0x2a>
 800152a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800152e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001532:	d90d      	bls.n	8001550 <__aeabi_f2iz+0x30>
 8001534:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800153c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001540:	fa23 f002 	lsr.w	r0, r3, r2
 8001544:	bf18      	it	ne
 8001546:	4240      	negne	r0, r0
 8001548:	4770      	bx	lr
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	4770      	bx	lr
 8001550:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001554:	d101      	bne.n	800155a <__aeabi_f2iz+0x3a>
 8001556:	0242      	lsls	r2, r0, #9
 8001558:	d105      	bne.n	8001566 <__aeabi_f2iz+0x46>
 800155a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800155e:	bf08      	it	eq
 8001560:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001564:	4770      	bx	lr
 8001566:	f04f 0000 	mov.w	r0, #0
 800156a:	4770      	bx	lr
 800156c:	0000      	movs	r0, r0
	...

08001570 <__aeabi_f2uiz>:
 8001570:	0042      	lsls	r2, r0, #1
 8001572:	d20e      	bcs.n	8001592 <__aeabi_f2uiz+0x22>
 8001574:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001578:	d30b      	bcc.n	8001592 <__aeabi_f2uiz+0x22>
 800157a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800157e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001582:	d409      	bmi.n	8001598 <__aeabi_f2uiz+0x28>
 8001584:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800158c:	fa23 f002 	lsr.w	r0, r3, r2
 8001590:	4770      	bx	lr
 8001592:	f04f 0000 	mov.w	r0, #0
 8001596:	4770      	bx	lr
 8001598:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800159c:	d101      	bne.n	80015a2 <__aeabi_f2uiz+0x32>
 800159e:	0242      	lsls	r2, r0, #9
 80015a0:	d102      	bne.n	80015a8 <__aeabi_f2uiz+0x38>
 80015a2:	f04f 30ff 	mov.w	r0, #4294967295
 80015a6:	4770      	bx	lr
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop

080015b0 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 80015b0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80015b2:	f100 070b 	add.w	r7, r0, #11
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf08      	it	eq
 80015ba:	460b      	moveq	r3, r1
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80015bc:	463d      	mov	r5, r7
  do {
    i = (int)(l % radix);
 80015be:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 80015c2:	fbb3 f3f2 	udiv	r3, r3, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 80015c6:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 80015ca:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 80015ce:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 80015d0:	bfc8      	it	gt
 80015d2:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 80015d6:	b2e4      	uxtb	r4, r4
 80015d8:	f805 4d01 	strb.w	r4, [r5, #-1]!
    l /= radix;
 80015dc:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ed      	bne.n	80015be <long_to_string_with_divisor+0xe>

  i = (int)(p + MAX_FILLER - q);
 80015e2:	1b7b      	subs	r3, r7, r5
 80015e4:	4403      	add	r3, r0
 80015e6:	e001      	b.n	80015ec <long_to_string_with_divisor+0x3c>
 80015e8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
  do
    *p++ = *q++;
 80015ec:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d1f9      	bne.n	80015e8 <long_to_string_with_divisor+0x38>

  return p;
}
 80015f4:	bcf0      	pop	{r4, r5, r6, r7}
 80015f6:	4770      	bx	lr
 80015f8:	f3af 8000 	nop.w
 80015fc:	f3af 8000 	nop.w

08001600 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 8001600:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001604:	46b0      	mov	r8, r6
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <Thread1+0x38>)
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <Thread1+0x3c>)
 800160a:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 800160c:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 800160e:	4d0c      	ldr	r5, [pc, #48]	; (8001640 <Thread1+0x40>)
 8001610:	4f0c      	ldr	r7, [pc, #48]	; (8001644 <Thread1+0x44>)
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8001612:	619a      	str	r2, [r3, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8001614:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOB, GPIOB_LED);
 8001616:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf0c      	ite	eq
 800161e:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 8001622:	f44f 747a 	movne.w	r4, #1000	; 0x3e8
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 8001626:	4620      	mov	r0, r4
 8001628:	f005 fd12 	bl	8007050 <chThdSleep>
    palSetPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 800162c:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOB, GPIOB_LED);
 800162e:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8001630:	f005 fd0e 	bl	8007050 <chThdSleep>
 8001634:	e7ee      	b.n	8001614 <Thread1+0x14>
 8001636:	bf00      	nop
 8001638:	20001de0 	.word	0x20001de0
 800163c:	080095a0 	.word	0x080095a0
 8001640:	40010c00 	.word	0x40010c00
 8001644:	20000e48 	.word	0x20000e48
 8001648:	f3af 8000 	nop.w
 800164c:	f3af 8000 	nop.w

08001650 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8001650:	2900      	cmp	r1, #0
 8001652:	dd03      	ble.n	800165c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001654:	4908      	ldr	r1, [pc, #32]	; (8001678 <cmd_systime+0x28>)
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <cmd_systime+0x2c>)
 8001658:	f006 be32 	b.w	80082c0 <chprintf.lto_priv.91>
 800165c:	2320      	movs	r3, #32
 800165e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	2300      	movs	r3, #0
 800166a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 800166e:	4904      	ldr	r1, [pc, #16]	; (8001680 <cmd_systime+0x30>)
 8001670:	b292      	uxth	r2, r2
 8001672:	f006 be25 	b.w	80082c0 <chprintf.lto_priv.91>
 8001676:	bf00      	nop
 8001678:	080095a8 	.word	0x080095a8
 800167c:	080095b4 	.word	0x080095b4
 8001680:	080095bc 	.word	0x080095bc
 8001684:	f3af 8000 	nop.w
 8001688:	f3af 8000 	nop.w
 800168c:	f3af 8000 	nop.w

08001690 <shell_thread>:
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8001690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8001694:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <shell_thread+0x1f0>)
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8001696:	6804      	ldr	r4, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a7a      	ldr	r2, [pc, #488]	; (8001884 <shell_thread+0x1f4>)
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 800169c:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800169e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 80016a2:	4979      	ldr	r1, [pc, #484]	; (8001888 <shell_thread+0x1f8>)
 80016a4:	4620      	mov	r0, r4
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 80016a6:	619a      	str	r2, [r3, #24]
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 80016a8:	f006 fe0a 	bl	80082c0 <chprintf.lto_priv.91>
 80016ac:	ae08      	add	r6, sp, #32
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 80016ae:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
 80016b2:	4620      	mov	r0, r4
 80016b4:	4975      	ldr	r1, [pc, #468]	; (800188c <shell_thread+0x1fc>)
 80016b6:	f006 fe03 	bl	80082c0 <chprintf.lto_priv.91>
 * @retval FALSE        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 80016ba:	4635      	mov	r5, r6

  while (TRUE) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	4620      	mov	r0, r4
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f10d 0107 	add.w	r1, sp, #7
 80016c6:	2201      	movs	r2, #1
 80016c8:	4798      	blx	r3
 80016ca:	b370      	cbz	r0, 800172a <shell_thread+0x9a>
      return TRUE;
    if (c == 4) {
 80016cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80016d0:	2904      	cmp	r1, #4
 80016d2:	d026      	beq.n	8001722 <shell_thread+0x92>
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
 80016d4:	2908      	cmp	r1, #8
 80016d6:	d011      	beq.n	80016fc <shell_thread+0x6c>
 80016d8:	297f      	cmp	r1, #127	; 0x7f
 80016da:	d00f      	beq.n	80016fc <shell_thread+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80016dc:	290d      	cmp	r1, #13
 80016de:	d036      	beq.n	800174e <shell_thread+0xbe>
      chprintf(chp, "\r\n");
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
 80016e0:	291f      	cmp	r1, #31
 80016e2:	d9eb      	bls.n	80016bc <shell_thread+0x2c>
      continue;
    if (p < line + size - 1) {
 80016e4:	42bd      	cmp	r5, r7
 80016e6:	d2e9      	bcs.n	80016bc <shell_thread+0x2c>
      chSequentialStreamPut(chp, c);
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	4620      	mov	r0, r4
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4798      	blx	r3
      *p++ = (char)c;
 80016f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016f4:	3501      	adds	r5, #1
 80016f6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80016fa:	e7df      	b.n	80016bc <shell_thread+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80016fc:	42b5      	cmp	r5, r6
 80016fe:	d0dd      	beq.n	80016bc <shell_thread+0x2c>
        chSequentialStreamPut(chp, c);
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	4620      	mov	r0, r4
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	4620      	mov	r0, r4
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2120      	movs	r1, #32
 8001710:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	4620      	mov	r0, r4
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 800171c:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800171e:	4798      	blx	r3
 8001720:	e7cc      	b.n	80016bc <shell_thread+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return TRUE;
    if (c == 4) {
      chprintf(chp, "^D");
 8001722:	4620      	mov	r0, r4
 8001724:	495a      	ldr	r1, [pc, #360]	; (8001890 <shell_thread+0x200>)
 8001726:	f006 fdcb 	bl	80082c0 <chprintf.lto_priv.91>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 800172a:	4620      	mov	r0, r4
 800172c:	4959      	ldr	r1, [pc, #356]	; (8001894 <shell_thread+0x204>)
 800172e:	f006 fdc7 	bl	80082c0 <chprintf.lto_priv.91>
 8001732:	2320      	movs	r3, #32
 8001734:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, 0);
 8001738:	2100      	movs	r1, #0
 800173a:	4857      	ldr	r0, [pc, #348]	; (8001898 <shell_thread+0x208>)
 800173c:	f005 f968 	bl	8006a10 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8001740:	2000      	movs	r0, #0
 8001742:	f005 fdc5 	bl	80072d0 <chThdExitS>
    }
  }
  shellExit(MSG_OK);
  /* Never executed, silencing a warning.*/
  return 0;
}
 8001746:	2000      	movs	r0, #0
 8001748:	b018      	add	sp, #96	; 0x60
 800174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800174e:	4953      	ldr	r1, [pc, #332]	; (800189c <shell_thread+0x20c>)
 8001750:	4620      	mov	r0, r4
 8001752:	f006 fdb5 	bl	80082c0 <chprintf.lto_priv.91>
      *p = 0;
 8001756:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001758:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 800175a:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800175c:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 800175e:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001760:	f007 fcde 	bl	8009120 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001764:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001766:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001768:	2000      	movs	r0, #0
 800176a:	f10d 090c 	add.w	r9, sp, #12
 800176e:	f007 fcd7 	bl	8009120 <_strtok.constprop.3>
 8001772:	b150      	cbz	r0, 800178a <shell_thread+0xfa>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8001774:	2d04      	cmp	r5, #4
 8001776:	d01d      	beq.n	80017b4 <shell_thread+0x124>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001778:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800177c:	a902      	add	r1, sp, #8
 800177e:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001780:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001782:	f007 fccd 	bl	8009120 <_strtok.constprop.3>
 8001786:	2800      	cmp	r0, #0
 8001788:	d1f4      	bne.n	8001774 <shell_thread+0xe4>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800178a:	ab18      	add	r3, sp, #96	; 0x60
 800178c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001790:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8001794:	f1ba 0f00 	cmp.w	sl, #0
 8001798:	d08b      	beq.n	80016b2 <shell_thread+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 800179a:	4650      	mov	r0, sl
 800179c:	4940      	ldr	r1, [pc, #256]	; (80018a0 <shell_thread+0x210>)
 800179e:	f007 fd2f 	bl	8009200 <strcasecmp>
 80017a2:	b970      	cbnz	r0, 80017c2 <shell_thread+0x132>
        if (n > 0) {
 80017a4:	2d00      	cmp	r5, #0
 80017a6:	d0c4      	beq.n	8001732 <shell_thread+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80017a8:	4620      	mov	r0, r4
 80017aa:	493e      	ldr	r1, [pc, #248]	; (80018a4 <shell_thread+0x214>)
 80017ac:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <shell_thread+0x210>)
 80017ae:	f006 fd87 	bl	80082c0 <chprintf.lto_priv.91>
 80017b2:	e77e      	b.n	80016b2 <shell_thread+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 80017b4:	4620      	mov	r0, r4
 80017b6:	493c      	ldr	r1, [pc, #240]	; (80018a8 <shell_thread+0x218>)
 80017b8:	f006 fd82 	bl	80082c0 <chprintf.lto_priv.91>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	9307      	str	r3, [sp, #28]
 80017c0:	e777      	b.n	80016b2 <shell_thread+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 80017c2:	4650      	mov	r0, sl
 80017c4:	4939      	ldr	r1, [pc, #228]	; (80018ac <shell_thread+0x21c>)
 80017c6:	f007 fd1b 	bl	8009200 <strcasecmp>
 80017ca:	b930      	cbnz	r0, 80017da <shell_thread+0x14a>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80017cc:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 80017ce:	b1c5      	cbz	r5, 8001802 <shell_thread+0x172>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80017d0:	4934      	ldr	r1, [pc, #208]	; (80018a4 <shell_thread+0x214>)
 80017d2:	4a36      	ldr	r2, [pc, #216]	; (80018ac <shell_thread+0x21c>)
 80017d4:	f006 fd74 	bl	80082c0 <chprintf.lto_priv.91>
 80017d8:	e76b      	b.n	80016b2 <shell_thread+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <shell_thread+0x220>)
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	4699      	mov	r9, r3
 80017e0:	b918      	cbnz	r0, 80017ea <shell_thread+0x15a>
 80017e2:	e031      	b.n	8001848 <shell_thread+0x1b8>
 80017e4:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80017e8:	b370      	cbz	r0, 8001848 <shell_thread+0x1b8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80017ea:	4651      	mov	r1, sl
 80017ec:	f007 fd08 	bl	8009200 <strcasecmp>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d1f7      	bne.n	80017e4 <shell_thread+0x154>
      scp->sc_function(chp, argc, argv);
 80017f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017f8:	4629      	mov	r1, r5
 80017fa:	aa03      	add	r2, sp, #12
 80017fc:	4620      	mov	r0, r4
 80017fe:	4798      	blx	r3
 8001800:	e757      	b.n	80016b2 <shell_thread+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8001802:	492c      	ldr	r1, [pc, #176]	; (80018b4 <shell_thread+0x224>)
 8001804:	f006 fd5c 	bl	80082c0 <chprintf.lto_priv.91>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <shell_thread+0x220>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	461d      	mov	r5, r3
 800180e:	b13a      	cbz	r2, 8001820 <shell_thread+0x190>
    chprintf(chp, "%s ", scp->sc_name);
 8001810:	4620      	mov	r0, r4
 8001812:	4929      	ldr	r1, [pc, #164]	; (80018b8 <shell_thread+0x228>)
 8001814:	f006 fd54 	bl	80082c0 <chprintf.lto_priv.91>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001818:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800181c:	2a00      	cmp	r2, #0
 800181e:	d1f7      	bne.n	8001810 <shell_thread+0x180>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8001820:	f1b8 0f00 	cmp.w	r8, #0
 8001824:	d00b      	beq.n	800183e <shell_thread+0x1ae>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001826:	f8d8 2000 	ldr.w	r2, [r8]
 800182a:	b142      	cbz	r2, 800183e <shell_thread+0x1ae>
 800182c:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 800182e:	4620      	mov	r0, r4
 8001830:	4921      	ldr	r1, [pc, #132]	; (80018b8 <shell_thread+0x228>)
 8001832:	f006 fd45 	bl	80082c0 <chprintf.lto_priv.91>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001836:	f855 2f08 	ldr.w	r2, [r5, #8]!
 800183a:	2a00      	cmp	r2, #0
 800183c:	d1f7      	bne.n	800182e <shell_thread+0x19e>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800183e:	4620      	mov	r0, r4
 8001840:	4916      	ldr	r1, [pc, #88]	; (800189c <shell_thread+0x20c>)
 8001842:	f006 fd3d 	bl	80082c0 <chprintf.lto_priv.91>
 8001846:	e734      	b.n	80016b2 <shell_thread+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8001848:	f1b8 0f00 	cmp.w	r8, #0
 800184c:	d00d      	beq.n	800186a <shell_thread+0x1da>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800184e:	f8d8 0000 	ldr.w	r0, [r8]
 8001852:	b150      	cbz	r0, 800186a <shell_thread+0x1da>
 8001854:	46c1      	mov	r9, r8
 8001856:	e002      	b.n	800185e <shell_thread+0x1ce>
 8001858:	f859 0f08 	ldr.w	r0, [r9, #8]!
 800185c:	b128      	cbz	r0, 800186a <shell_thread+0x1da>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800185e:	4651      	mov	r1, sl
 8001860:	f007 fcce 	bl	8009200 <strcasecmp>
 8001864:	2800      	cmp	r0, #0
 8001866:	d1f7      	bne.n	8001858 <shell_thread+0x1c8>
 8001868:	e7c4      	b.n	80017f4 <shell_thread+0x164>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 800186a:	4652      	mov	r2, sl
 800186c:	4620      	mov	r0, r4
 800186e:	4913      	ldr	r1, [pc, #76]	; (80018bc <shell_thread+0x22c>)
 8001870:	f006 fd26 	bl	80082c0 <chprintf.lto_priv.91>
        chprintf(chp, " ?\r\n");
 8001874:	4620      	mov	r0, r4
 8001876:	4912      	ldr	r1, [pc, #72]	; (80018c0 <shell_thread+0x230>)
 8001878:	f006 fd22 	bl	80082c0 <chprintf.lto_priv.91>
 800187c:	e719      	b.n	80016b2 <shell_thread+0x22>
 800187e:	bf00      	nop
 8001880:	20001de0 	.word	0x20001de0
 8001884:	080095c4 	.word	0x080095c4
 8001888:	080095cc 	.word	0x080095cc
 800188c:	080095e4 	.word	0x080095e4
 8001890:	080095ec 	.word	0x080095ec
 8001894:	08009640 	.word	0x08009640
 8001898:	2000139c 	.word	0x2000139c
 800189c:	0800a5c0 	.word	0x0800a5c0
 80018a0:	08009608 	.word	0x08009608
 80018a4:	080095a8 	.word	0x080095a8
 80018a8:	080095f0 	.word	0x080095f0
 80018ac:	08009610 	.word	0x08009610
 80018b0:	20000c04 	.word	0x20000c04
 80018b4:	08009618 	.word	0x08009618
 80018b8:	08009630 	.word	0x08009630
 80018bc:	08009634 	.word	0x08009634
 80018c0:	08009638 	.word	0x08009638
 80018c4:	f3af 8000 	nop.w
 80018c8:	f3af 8000 	nop.w
 80018cc:	f3af 8000 	nop.w

080018d0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80018d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d4:	4681      	mov	r9, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	4616      	mov	r6, r2
 80018da:	4682      	mov	sl, r0
 80018dc:	b08d      	sub	sp, #52	; 0x34
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	9301      	str	r3, [sp, #4]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80018e2:	7829      	ldrb	r1, [r5, #0]
 80018e4:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 80018e6:	b171      	cbz	r1, 8001906 <chvprintf+0x36>
      return n;
    if (c != '%') {
 80018e8:	2925      	cmp	r1, #37	; 0x25
 80018ea:	d010      	beq.n	800190e <chvprintf+0x3e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80018ec:	461d      	mov	r5, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 80018ee:	9c01      	ldr	r4, [sp, #4]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 80018f0:	f8da 2000 	ldr.w	r2, [sl]
 80018f4:	4650      	mov	r0, sl
 80018f6:	6892      	ldr	r2, [r2, #8]
      n++;
 80018f8:	3401      	adds	r4, #1
 80018fa:	9401      	str	r4, [sp, #4]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 80018fc:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80018fe:	7829      	ldrb	r1, [r5, #0]
 8001900:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8001902:	2900      	cmp	r1, #0
 8001904:	d1f0      	bne.n	80018e8 <chvprintf+0x18>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8001906:	9801      	ldr	r0, [sp, #4]
 8001908:	b00d      	add	sp, #52	; 0x34
 800190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 800190e:	786a      	ldrb	r2, [r5, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8001910:	2700      	movs	r7, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001912:	2a2d      	cmp	r2, #45	; 0x2d
 8001914:	bf03      	ittte	eq
 8001916:	78aa      	ldrbeq	r2, [r5, #2]
      fmt++;
 8001918:	1cab      	addeq	r3, r5, #2
      left_align = TRUE;
 800191a:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800191e:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8001922:	2a30      	cmp	r2, #48	; 0x30
 8001924:	bf03      	ittte	eq
 8001926:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8001928:	3301      	addeq	r3, #1
      filler = '0';
 800192a:	f04f 0830 	moveq.w	r8, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800192e:	f04f 0820 	movne.w	r8, #32
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	e005      	b.n	8001942 <chvprintf+0x72>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001936:	7833      	ldrb	r3, [r6, #0]
 8001938:	3604      	adds	r6, #4
 800193a:	782a      	ldrb	r2, [r5, #0]
      else
        break;
      width = width * 10 + c;
 800193c:	eb03 0740 	add.w	r7, r3, r0, lsl #1
 8001940:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001942:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800194a:	460d      	mov	r5, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800194c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001950:	d9f3      	bls.n	800193a <chvprintf+0x6a>
        c -= '0';
      else if (c == '*')
 8001952:	2a2a      	cmp	r2, #42	; 0x2a
 8001954:	d0ef      	beq.n	8001936 <chvprintf+0x66>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8001956:	2a2e      	cmp	r2, #46	; 0x2e
 8001958:	f04f 0b00 	mov.w	fp, #0
 800195c:	d043      	beq.n	80019e6 <chvprintf+0x116>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800195e:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001962:	2b4c      	cmp	r3, #76	; 0x4c
 8001964:	d04e      	beq.n	8001a04 <chvprintf+0x134>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001966:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 800196a:	2934      	cmp	r1, #52	; 0x34
 800196c:	f200 8174 	bhi.w	8001c58 <chvprintf+0x388>
 8001970:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001974:	01720158 	.word	0x01720158
 8001978:	01720172 	.word	0x01720172
 800197c:	01580172 	.word	0x01580172
 8001980:	01720172 	.word	0x01720172
 8001984:	01720172 	.word	0x01720172
 8001988:	012b0172 	.word	0x012b0172
 800198c:	01720172 	.word	0x01720172
 8001990:	01720172 	.word	0x01720172
 8001994:	015f0172 	.word	0x015f0172
 8001998:	01720172 	.word	0x01720172
 800199c:	0172016f 	.word	0x0172016f
 80019a0:	01720172 	.word	0x01720172
 80019a4:	01720172 	.word	0x01720172
 80019a8:	01720172 	.word	0x01720172
 80019ac:	01720172 	.word	0x01720172
 80019b0:	01610172 	.word	0x01610172
 80019b4:	01720158 	.word	0x01720158
 80019b8:	017200d5 	.word	0x017200d5
 80019bc:	01580172 	.word	0x01580172
 80019c0:	01720172 	.word	0x01720172
 80019c4:	01720172 	.word	0x01720172
 80019c8:	012b0172 	.word	0x012b0172
 80019cc:	01720172 	.word	0x01720172
 80019d0:	00890172 	.word	0x00890172
 80019d4:	015f0172 	.word	0x015f0172
 80019d8:	01720172 	.word	0x01720172
 80019dc:	016f      	.short	0x016f
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80019de:	7833      	ldrb	r3, [r6, #0]
 80019e0:	3604      	adds	r6, #4
        else
          break;
        precision *= 10;
        precision += c;
 80019e2:	eb03 0b41 	add.w	fp, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80019e6:	f815 2b01 	ldrb.w	r2, [r5], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 80019ea:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 80019ee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d9f4      	bls.n	80019e2 <chvprintf+0x112>
          c -= '0';
        else if (c == '*')
 80019f8:	2a2a      	cmp	r2, #42	; 0x2a
 80019fa:	d0f0      	beq.n	80019de <chvprintf+0x10e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80019fc:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001a00:	2b4c      	cmp	r3, #76	; 0x4c
 8001a02:	d1b0      	bne.n	8001966 <chvprintf+0x96>
      is_long = TRUE;
      if (*fmt)
 8001a04:	782b      	ldrb	r3, [r5, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8126 	beq.w	8001c58 <chvprintf+0x388>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001a0c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8001a10:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001a12:	2a34      	cmp	r2, #52	; 0x34
 8001a14:	f200 811f 	bhi.w	8001c56 <chvprintf+0x386>
 8001a18:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001a1c:	011d0104 	.word	0x011d0104
 8001a20:	011d011d 	.word	0x011d011d
 8001a24:	0104011d 	.word	0x0104011d
 8001a28:	011d011d 	.word	0x011d011d
 8001a2c:	011d011d 	.word	0x011d011d
 8001a30:	00d7011d 	.word	0x00d7011d
 8001a34:	011d011d 	.word	0x011d011d
 8001a38:	011d011d 	.word	0x011d011d
 8001a3c:	010b011d 	.word	0x010b011d
 8001a40:	011d011d 	.word	0x011d011d
 8001a44:	011d011b 	.word	0x011d011b
 8001a48:	011d011d 	.word	0x011d011d
 8001a4c:	011d011d 	.word	0x011d011d
 8001a50:	011d011d 	.word	0x011d011d
 8001a54:	011d011d 	.word	0x011d011d
 8001a58:	010d011d 	.word	0x010d011d
 8001a5c:	011d0104 	.word	0x011d0104
 8001a60:	011d0081 	.word	0x011d0081
 8001a64:	0104011d 	.word	0x0104011d
 8001a68:	011d011d 	.word	0x011d011d
 8001a6c:	011d011d 	.word	0x011d011d
 8001a70:	00d7011d 	.word	0x00d7011d
 8001a74:	011d011d 	.word	0x011d011d
 8001a78:	0035011d 	.word	0x0035011d
 8001a7c:	010b011d 	.word	0x010b011d
 8001a80:	011d011d 	.word	0x011d011d
 8001a84:	011b      	.short	0x011b
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001a86:	6834      	ldr	r4, [r6, #0]
        s = "(null)";
 8001a88:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <chvprintf+0x408>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8001a8a:	3604      	adds	r6, #4
        s = "(null)";
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	bf08      	it	eq
 8001a90:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001a92:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8001a94:	f1bb 0f00 	cmp.w	fp, #0
 8001a98:	f000 80fc 	beq.w	8001c94 <chvprintf+0x3c4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80fe 	beq.w	8001c9e <chvprintf+0x3ce>
 8001aa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	e002      	b.n	8001ab0 <chvprintf+0x1e0>
 8001aaa:	f1bb 0b01 	subs.w	fp, fp, #1
 8001aae:	d403      	bmi.n	8001ab8 <chvprintf+0x1e8>
 8001ab0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f8      	bne.n	8001aaa <chvprintf+0x1da>
 8001ab8:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001aba:	1a3f      	subs	r7, r7, r0
 8001abc:	f100 3bff 	add.w	fp, r0, #4294967295
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8001ac0:	f04f 0820 	mov.w	r8, #32
 8001ac4:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001ac8:	f1b9 0f00 	cmp.w	r9, #0
 8001acc:	f000 8090 	beq.w	8001bf0 <chvprintf+0x320>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001ad0:	f1bb 0f00 	cmp.w	fp, #0
 8001ad4:	db13      	blt.n	8001afe <chvprintf+0x22e>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001ad6:	46d9      	mov	r9, fp
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8001ad8:	f8da 3000 	ldr.w	r3, [sl]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001adc:	f109 39ff 	add.w	r9, r9, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4650      	mov	r0, sl
 8001ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae8:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001aea:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001aee:	d1f3      	bne.n	8001ad8 <chvprintf+0x208>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	3301      	adds	r3, #1
 8001af4:	f1bb 0f00 	cmp.w	fp, #0
 8001af8:	bfa8      	it	ge
 8001afa:	445b      	addge	r3, fp
 8001afc:	9301      	str	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001afe:	2f00      	cmp	r7, #0
 8001b00:	f43f aeef 	beq.w	80018e2 <chvprintf+0x12>
 8001b04:	463c      	mov	r4, r7
      chSequentialStreamPut(chp, (uint8_t)filler);
 8001b06:	f8da 3000 	ldr.w	r3, [sl]
 8001b0a:	4650      	mov	r0, sl
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4641      	mov	r1, r8
 8001b10:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8001b12:	3c01      	subs	r4, #1
 8001b14:	d1f7      	bne.n	8001b06 <chvprintf+0x236>
 8001b16:	9b01      	ldr	r3, [sp, #4]
 8001b18:	443b      	add	r3, r7
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	e6e1      	b.n	80018e2 <chvprintf+0x12>
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001b1e:	3607      	adds	r6, #7
 8001b20:	f026 0607 	bic.w	r6, r6, #7
 8001b24:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001b28:	f7ff f9d2 	bl	8000ed0 <__aeabi_d2f>
      if (f < 0) {
 8001b2c:	2100      	movs	r1, #0
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8001b2e:	3608      	adds	r6, #8
 8001b30:	4604      	mov	r4, r0
      if (f < 0) {
 8001b32:	f7ff fccb 	bl	80014cc <__aeabi_fcmplt>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	f040 80c2 	bne.w	8001cc0 <chvprintf+0x3f0>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8001b3c:	ab06      	add	r3, sp, #24
                                      10000000, 100000000, 1000000000};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8001b3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001b42:	f1bb 0f08 	cmp.w	fp, #8
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001b46:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <chvprintf+0x40c>)
 8001b48:	bf28      	it	cs
 8001b4a:	f04f 0b08 	movcs.w	fp, #8
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]

  l = (long)num;
 8001b54:	4620      	mov	r0, r4
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001b56:	9304      	str	r3, [sp, #16]

  l = (long)num;
 8001b58:	f7ff fce2 	bl	8001520 <__aeabi_f2iz>
 8001b5c:	4683      	mov	fp, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 8001b5e:	9b02      	ldr	r3, [sp, #8]
 8001b60:	220a      	movs	r2, #10
 8001b62:	4618      	mov	r0, r3
 8001b64:	4659      	mov	r1, fp
 8001b66:	2300      	movs	r3, #0
 8001b68:	f7ff fd22 	bl	80015b0 <long_to_string_with_divisor>
  *p++ = '.';
 8001b6c:	4684      	mov	ip, r0
 8001b6e:	232e      	movs	r3, #46	; 0x2e
 8001b70:	f80c 3b01 	strb.w	r3, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8001b74:	4620      	mov	r0, r4
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8001b76:	f8cd c014 	str.w	ip, [sp, #20]
 8001b7a:	f8cd c008 	str.w	ip, [sp, #8]
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8001b7e:	f7fe fef3 	bl	8000968 <__aeabi_f2d>
 8001b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8001b86:	4658      	mov	r0, fp
 8001b88:	f7fe fedc 	bl	8000944 <__aeabi_i2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001b94:	f7fe fd88 	bl	80006a8 <__aeabi_dsub>
 8001b98:	9c04      	ldr	r4, [sp, #16]
 8001b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7fe fec0 	bl	8000924 <__aeabi_ui2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001bac:	f7fe ff30 	bl	8000a10 <__aeabi_dmul>
 8001bb0:	f7ff f946 	bl	8000e40 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <chvprintf+0x410>)
 8001bb8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8001bbc:	fba3 2302 	umull	r2, r3, r3, r2
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8001bc0:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	4660      	mov	r0, ip
 8001bc6:	220a      	movs	r2, #10
 8001bc8:	e004      	b.n	8001bd4 <chvprintf+0x304>
 8001bca:	2208      	movs	r2, #8
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8001bcc:	6831      	ldr	r1, [r6, #0]
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001bce:	a806      	add	r0, sp, #24
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8001bd0:	3604      	adds	r6, #4
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f7ff fcec 	bl	80015b0 <long_to_string_with_divisor>
 8001bd8:	ab06      	add	r3, sp, #24
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001bda:	461c      	mov	r4, r3
 8001bdc:	1ac0      	subs	r0, r0, r3
 8001bde:	f100 3bff 	add.w	fp, r0, #4294967295
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001be2:	1a3f      	subs	r7, r7, r0
 8001be4:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      width = 0;
    if (left_align == FALSE)
 8001be8:	f1b9 0f00 	cmp.w	r9, #0
 8001bec:	f47f af70 	bne.w	8001ad0 <chvprintf+0x200>
      width = -width;
 8001bf0:	f1c7 0900 	rsb	r9, r7, #0
    if (width < 0) {
 8001bf4:	f1b9 0f00 	cmp.w	r9, #0
 8001bf8:	d037      	beq.n	8001c6a <chvprintf+0x39a>
      if (*s == '-' && filler == '0') {
 8001bfa:	7821      	ldrb	r1, [r4, #0]
 8001bfc:	292d      	cmp	r1, #45	; 0x2d
 8001bfe:	d03a      	beq.n	8001c76 <chvprintf+0x3a6>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8001c00:	464f      	mov	r7, r9
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8001c02:	f8da 3000 	ldr.w	r3, [sl]
 8001c06:	4650      	mov	r0, sl
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8001c0e:	3701      	adds	r7, #1
 8001c10:	d1f7      	bne.n	8001c02 <chvprintf+0x332>
 8001c12:	9b01      	ldr	r3, [sp, #4]
    }
    while (--i >= 0) {
 8001c14:	f1bb 0f00 	cmp.w	fp, #0
 8001c18:	ebc9 0303 	rsb	r3, r9, r3
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f6bf af5a 	bge.w	8001ad6 <chvprintf+0x206>
 8001c22:	e65e      	b.n	80018e2 <chvprintf+0x12>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8001c24:	6831      	ldr	r1, [r6, #0]
 8001c26:	3604      	adds	r6, #4
      if (l < 0) {
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	db42      	blt.n	8001cb2 <chvprintf+0x3e2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8001c2c:	a806      	add	r0, sp, #24
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001c2e:	220a      	movs	r2, #10
 8001c30:	e7cf      	b.n	8001bd2 <chvprintf+0x302>
 8001c32:	220a      	movs	r2, #10
 8001c34:	e7ca      	b.n	8001bcc <chvprintf+0x2fc>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8001c36:	6833      	ldr	r3, [r6, #0]
 8001c38:	aa06      	add	r2, sp, #24
 8001c3a:	f10d 0019 	add.w	r0, sp, #25
 8001c3e:	1a80      	subs	r0, r0, r2
 8001c40:	f100 3bff 	add.w	fp, r0, #4294967295
 8001c44:	f88d 3018 	strb.w	r3, [sp, #24]
 8001c48:	3604      	adds	r6, #4
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8001c4a:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001c4e:	4614      	mov	r4, r2
 8001c50:	e7c7      	b.n	8001be2 <chvprintf+0x312>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001c52:	2210      	movs	r2, #16
 8001c54:	e7ba      	b.n	8001bcc <chvprintf+0x2fc>
 8001c56:	461a      	mov	r2, r3
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001c58:	ac06      	add	r4, sp, #24
 8001c5a:	f10d 0019 	add.w	r0, sp, #25
 8001c5e:	1b00      	subs	r0, r0, r4
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8001c60:	f88d 2018 	strb.w	r2, [sp, #24]
 8001c64:	f100 3bff 	add.w	fp, r0, #4294967295
 8001c68:	e7bb      	b.n	8001be2 <chvprintf+0x312>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001c6a:	f1bb 0f00 	cmp.w	fp, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8001c6e:	464f      	mov	r7, r9
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8001c70:	f6bf af31 	bge.w	8001ad6 <chvprintf+0x206>
 8001c74:	e635      	b.n	80018e2 <chvprintf+0x12>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8001c76:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8001c7a:	d1c1      	bne.n	8001c00 <chvprintf+0x330>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8001c7c:	f8da 3000 	ldr.w	r3, [sl]
 8001c80:	4650      	mov	r0, sl
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4798      	blx	r3
        n++;
 8001c86:	9b01      	ldr	r3, [sp, #4]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8001c88:	3401      	adds	r4, #1
        n++;
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001c92:	e7b5      	b.n	8001c00 <chvprintf+0x330>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8001c94:	f647 7bfe 	movw	fp, #32766	; 0x7ffe
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f47f af04 	bne.w	8001aa6 <chvprintf+0x1d6>
 8001c9e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001ca2:	f1b9 0f00 	cmp.w	r9, #0
 8001ca6:	d113      	bne.n	8001cd0 <chvprintf+0x400>
 8001ca8:	f04f 3bff 	mov.w	fp, #4294967295
 8001cac:	f04f 0820 	mov.w	r8, #32
 8001cb0:	e79e      	b.n	8001bf0 <chvprintf+0x320>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8001cb2:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001cb4:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8001cb6:	f88d 3018 	strb.w	r3, [sp, #24]
 8001cba:	f10d 0019 	add.w	r0, sp, #25
 8001cbe:	e7b6      	b.n	8001c2e <chvprintf+0x35e>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8001cc0:	232d      	movs	r3, #45	; 0x2d
 8001cc2:	f88d 3018 	strb.w	r3, [sp, #24]
        f = -f;
 8001cc6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8001cca:	f10d 0319 	add.w	r3, sp, #25
 8001cce:	e736      	b.n	8001b3e <chvprintf+0x26e>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8001cd0:	f04f 0820 	mov.w	r8, #32
 8001cd4:	e713      	b.n	8001afe <chvprintf+0x22e>
 8001cd6:	bf00      	nop
 8001cd8:	0800964c 	.word	0x0800964c
 8001cdc:	08009820 	.word	0x08009820
 8001ce0:	cccccccd 	.word	0xcccccccd
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	f3af 8000 	nop.w
 8001cec:	f3af 8000 	nop.w

08001cf0 <chprintf.lto_priv.92>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001cf0:	b40e      	push	{r1, r2, r3}
 8001cf2:	b500      	push	{lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	ab03      	add	r3, sp, #12
 8001cf8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001cfc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001cfe:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8001d00:	f7ff fde6 	bl	80018d0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8001d04:	b002      	add	sp, #8
 8001d06:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d0a:	b003      	add	sp, #12
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <cmd_write>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 8001d10:	2900      	cmp	r1, #0
 8001d12:	dc17      	bgt.n	8001d44 <cmd_write+0x34>
    return;
  }
  chThdWait(tp);
}

static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4604      	mov	r4, r0
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 8001d18:	4d0c      	ldr	r5, [pc, #48]	; (8001d4c <cmd_write+0x3c>)
 8001d1a:	e002      	b.n	8001d22 <cmd_write+0x12>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4798      	blx	r3
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	2100      	movs	r1, #0
 8001d26:	4620      	mov	r0, r4
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4798      	blx	r3
 8001d2c:	3001      	adds	r0, #1
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <cmd_write+0x40>)
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <cmd_write+0x3c>)
 8001d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8001d36:	d0f1      	beq.n	8001d1c <cmd_write+0xc>
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8001d38:	4620      	mov	r0, r4
}
 8001d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8001d3e:	4905      	ldr	r1, [pc, #20]	; (8001d54 <cmd_write+0x44>)
 8001d40:	f7ff bfd6 	b.w	8001cf0 <chprintf.lto_priv.92>
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <cmd_write+0x48>)
 8001d46:	f7ff bfd3 	b.w	8001cf0 <chprintf.lto_priv.92>
 8001d4a:	bf00      	nop
 8001d4c:	200014b4 	.word	0x200014b4
 8001d50:	20000800 	.word	0x20000800
 8001d54:	08009654 	.word	0x08009654
 8001d58:	08009664 	.word	0x08009664
 8001d5c:	f3af 8000 	nop.w

08001d60 <cmd_test>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8001d60:	2900      	cmp	r1, #0
 8001d62:	dd02      	ble.n	8001d6a <cmd_test+0xa>
    chprintf(chp, "Usage: test\r\n");
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <cmd_test+0x40>)
 8001d66:	f7ff bfc3 	b.w	8001cf0 <chprintf.lto_priv.92>
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001d6a:	b510      	push	{r4, lr}
 8001d6c:	4604      	mov	r4, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <cmd_test+0x44>)
 8001d70:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001d72:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8001d74:	2000      	movs	r0, #0
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <cmd_test+0x48>)
 8001d7e:	9400      	str	r4, [sp, #0]
 8001d80:	f005 f80e 	bl	8006da0 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 8001d84:	b120      	cbz	r0, 8001d90 <cmd_test+0x30>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 8001d86:	b002      	add	sp, #8
 8001d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8001d8c:	f005 b8d0 	b.w	8006f30 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8001d90:	4620      	mov	r0, r4
 8001d92:	4906      	ldr	r1, [pc, #24]	; (8001dac <cmd_test+0x4c>)
    return;
  }
  chThdWait(tp);
}
 8001d94:	b002      	add	sp, #8
 8001d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8001d9a:	f7ff bfa9 	b.w	8001cf0 <chprintf.lto_priv.92>
 8001d9e:	bf00      	nop
 8001da0:	08009674 	.word	0x08009674
 8001da4:	20001de0 	.word	0x20001de0
 8001da8:	08006021 	.word	0x08006021
 8001dac:	08009684 	.word	0x08009684

08001db0 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8001db0:	2900      	cmp	r1, #0
 8001db2:	dd02      	ble.n	8001dba <cmd_threads+0xa>
    chprintf(chp, "Usage: threads\r\n");
 8001db4:	4915      	ldr	r1, [pc, #84]	; (8001e0c <cmd_threads+0x5c>)
 8001db6:	f7ff bf9b 	b.w	8001cf0 <chprintf.lto_priv.92>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001dba:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8001dbc:	4914      	ldr	r1, [pc, #80]	; (8001e10 <cmd_threads+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8001dc2:	f7ff ff95 	bl	8001cf0 <chprintf.lto_priv.92>
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <cmd_threads+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8001dd2:	7fa3      	ldrb	r3, [r4, #30]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	77a3      	strb	r3, [r4, #30]
 8001dd8:	f382 8811 	msr	BASEPRI, r2
 8001ddc:	4e0e      	ldr	r6, [pc, #56]	; (8001e18 <cmd_threads+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8001dde:	68a2      	ldr	r2, [r4, #8]
 8001de0:	68e3      	ldr	r3, [r4, #12]
 8001de2:	9200      	str	r2, [sp, #0]
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8001de4:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <cmd_threads+0x6c>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8001de8:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8001dea:	9201      	str	r2, [sp, #4]
 8001dec:	7f22      	ldrb	r2, [r4, #28]
 8001dee:	4628      	mov	r0, r5
 8001df0:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8001df4:	9202      	str	r2, [sp, #8]
 8001df6:	4622      	mov	r2, r4
 8001df8:	f7ff ff7a 	bl	8001cf0 <chprintf.lto_priv.92>
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f004 fe67 	bl	8006ad0 <chRegNextThread>
  } while (tp != NULL);
 8001e02:	4604      	mov	r4, r0
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1ea      	bne.n	8001dde <cmd_threads+0x2e>
}
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	08009694 	.word	0x08009694
 8001e10:	080096a8 	.word	0x080096a8
 8001e14:	20001de0 	.word	0x20001de0
 8001e18:	080094d0 	.word	0x080094d0
 8001e1c:	080096d0 	.word	0x080096d0

08001e20 <cmd_mem>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001e20:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8001e22:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8001e24:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8001e26:	dd04      	ble.n	8001e32 <cmd_mem+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8001e28:	490f      	ldr	r1, [pc, #60]	; (8001e68 <cmd_mem+0x48>)
 8001e2a:	f7ff ff61 	bl	8001cf0 <chprintf.lto_priv.92>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 8001e2e:	b003      	add	sp, #12
 8001e30:	bd30      	pop	{r4, r5, pc}
 8001e32:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8001e34:	a901      	add	r1, sp, #4
 8001e36:	2000      	movs	r0, #0
 8001e38:	f004 faa2 	bl	8006380 <chHeapStatus>
 8001e3c:	4605      	mov	r5, r0
 *
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  return (size_t)(endmem - nextmem);
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <cmd_mem+0x4c>)
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <cmd_mem+0x50>)
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8001e46:	4620      	mov	r0, r4
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <cmd_mem+0x54>)
 8001e4c:	f7ff ff50 	bl	8001cf0 <chprintf.lto_priv.92>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8001e50:	462a      	mov	r2, r5
 8001e52:	4620      	mov	r0, r4
 8001e54:	4908      	ldr	r1, [pc, #32]	; (8001e78 <cmd_mem+0x58>)
 8001e56:	f7ff ff4b 	bl	8001cf0 <chprintf.lto_priv.92>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <cmd_mem+0x5c>)
 8001e5e:	9a01      	ldr	r2, [sp, #4]
 8001e60:	f7ff ff46 	bl	8001cf0 <chprintf.lto_priv.92>
}
 8001e64:	b003      	add	sp, #12
 8001e66:	bd30      	pop	{r4, r5, pc}
 8001e68:	080096ec 	.word	0x080096ec
 8001e6c:	200013a0 	.word	0x200013a0
 8001e70:	20001398 	.word	0x20001398
 8001e74:	080096fc 	.word	0x080096fc
 8001e78:	0800971c 	.word	0x0800971c
 8001e7c:	08009734 	.word	0x08009734

08001e80 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8001e80:	8902      	ldrh	r2, [r0, #8]
 8001e82:	fa42 f301 	asr.w	r3, r2, r1
 8001e86:	f013 0301 	ands.w	r3, r3, #1
 8001e8a:	d002      	beq.n	8001e92 <usbStartTransmitI+0x12>
    return TRUE;
 8001e8c:	2301      	movs	r3, #1

  usbp->transmitting |= (1 << ep);
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4770      	bx	lr
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8001e92:	b470      	push	{r4, r5, r6}
 8001e94:	008d      	lsls	r5, r1, #2
 8001e96:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001e9a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8001e9e:	682c      	ldr	r4, [r5, #0]
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
    return TRUE;

  usbp->transmitting |= (1 << ep);
 8001ea0:	2601      	movs	r6, #1
 8001ea2:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 8001ea6:	fa06 f101 	lsl.w	r1, r6, r1
 8001eaa:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8001eae:	f084 0430 	eor.w	r4, r4, #48	; 0x30
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	8102      	strh	r2, [r0, #8]
 8001eb6:	602c      	str	r4, [r5, #0]
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bc70      	pop	{r4, r5, r6}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8001ec0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001ec4:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8001ec6:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8001ed2:	b510      	push	{r4, lr}
 8001ed4:	4604      	mov	r4, r0
 8001ed6:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8001ed8:	b10a      	cbz	r2, 8001ede <set_address+0x1e>
 8001eda:	2101      	movs	r1, #1
 8001edc:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	7023      	strb	r3, [r4, #0]
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	40005c00 	.word	0x40005c00
 8001ee8:	f3af 8000 	nop.w
 8001eec:	f3af 8000 	nop.w

08001ef0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	f3af 8000 	nop.w
 8001efc:	f3af 8000 	nop.w

08001f00 <sduRequestsHook>:
 * @retval TRUE         Message handled internally.
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8001f00:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8001f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d001      	beq.n	8001f10 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return TRUE;
    default:
      return FALSE;
 8001f0c:	2000      	movs	r0, #0
    }
  }
  return FALSE;
}
 8001f0e:	4770      	bx	lr
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8001f10:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 8001f14:	2b21      	cmp	r3, #33	; 0x21
 8001f16:	d003      	beq.n	8001f20 <sduRequestsHook+0x20>
 8001f18:	2b22      	cmp	r3, #34	; 0x22
 8001f1a:	d009      	beq.n	8001f30 <sduRequestsHook+0x30>
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d1f5      	bne.n	8001f0c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return TRUE;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <sduRequestsHook+0x3c>)
 8001f22:	2207      	movs	r2, #7
 8001f24:	2300      	movs	r3, #0
 8001f26:	6681      	str	r1, [r0, #104]	; 0x68
 8001f28:	66c2      	str	r2, [r0, #108]	; 0x6c
 8001f2a:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8001f30:	2300      	movs	r3, #0
 8001f32:	6683      	str	r3, [r0, #104]	; 0x68
 8001f34:	66c3      	str	r3, [r0, #108]	; 0x6c
 8001f36:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 8001f38:	2001      	movs	r0, #1
 8001f3a:	4770      	bx	lr
 8001f3c:	20000c1c 	.word	0x20000c1c

08001f40 <bmk12_setup.lto_priv.182>:
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <bmk12_setup.lto_priv.182+0xc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605b      	str	r3, [r3, #4]
 8001f46:	601b      	str	r3, [r3, #0]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	4770      	bx	lr
 8001f4c:	20001420 	.word	0x20001420

08001f50 <bmk11_setup.lto_priv.180>:
 8001f50:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <bmk11_setup.lto_priv.180+0xc>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	605b      	str	r3, [r3, #4]
 8001f56:	601b      	str	r3, [r3, #0]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	4770      	bx	lr
 8001f5c:	20001414 	.word	0x20001414

08001f60 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	f3af 8000 	nop.w
 8001f6c:	f3af 8000 	nop.w

08001f70 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001f70:	b538      	push	{r3, r4, r5, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8001f72:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001f76:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d033      	beq.n	8001fe4 <_usb_ep0out+0x74>
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d01a      	beq.n	8001fb6 <_usb_ep0out+0x46>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <_usb_ep0out+0x8c>)
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001f82:	6861      	ldr	r1, [r4, #4]
 8001f84:	6813      	ldr	r3, [r2, #0]
 8001f86:	680d      	ldr	r5, [r1, #0]
 8001f88:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f90:	f083 0310 	eor.w	r3, r3, #16
 8001f94:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8001f96:	6813      	ldr	r3, [r2, #0]
 8001f98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	b115      	cbz	r5, 8001fae <_usb_ep0out+0x3e>
 8001fa8:	4620      	mov	r0, r4
 8001faa:	2105      	movs	r1, #5
 8001fac:	47a8      	blx	r5
  usbp->ep0state = USB_EP0_ERROR;
 8001fae:	2306      	movs	r3, #6
 8001fb0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001fb4:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001fb6:	68c3      	ldr	r3, [r0, #12]

  isp->txqueued           = FALSE;
 8001fb8:	2500      	movs	r5, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8001fba:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8001fc2:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8001fc4:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8001fc6:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8001fc8:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8001fca:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8001fcc:	f006 f9e8 	bl	80083a0 <usb_lld_prepare_transmit>
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0);
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f7ff ff51 	bl	8001e80 <usbStartTransmitI>
 8001fde:	f385 8811 	msr	BASEPRI, r5
 8001fe2:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0)
 8001fe4:	68c3      	ldr	r3, [r0, #12]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1c8      	bne.n	8001f80 <_usb_ep0out+0x10>
      break;
#endif
    if (usbp->ep0endcb != NULL)
 8001fee:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001ff0:	b103      	cbz	r3, 8001ff4 <_usb_ep0out+0x84>
      usbp->ep0endcb(usbp);
 8001ff2:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	40005c00 	.word	0x40005c00

08002000 <onotify.lto_priv.87>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8002002:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002004:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	7811      	ldrb	r1, [r2, #0]
 800200c:	2904      	cmp	r1, #4
 800200e:	d000      	beq.n	8002012 <onotify.lto_priv.87+0x12>
 8002010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002012:	7a21      	ldrb	r1, [r4, #8]
 8002014:	2902      	cmp	r1, #2
 8002016:	d1fb      	bne.n	8002010 <onotify.lto_priv.87+0x10>
      (sdup->state != SDU_READY))
    return;

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in) &&
 8002018:	8912      	ldrh	r2, [r2, #8]
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	fa42 f303 	asr.w	r3, r2, r3
 8002020:	f013 0301 	ands.w	r3, r3, #1
 8002024:	d1f4      	bne.n	8002010 <onotify.lto_priv.87+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8002026:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002028:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800202a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800202c:	1a8a      	subs	r2, r1, r2
 800202e:	1a12      	subs	r2, r2, r0
 8002030:	d0ee      	beq.n	8002010 <onotify.lto_priv.87+0x10>
 8002032:	f383 8811 	msr	BASEPRI, r3
      ((n = oqGetFullI(&sdup->oqueue)) > 0)) {
    osalSysUnlock();

    usbPrepareQueuedTransmit(sdup->config->usbp,
 8002036:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 800203a:	2701      	movs	r7, #1
 800203c:	6808      	ldr	r0, [r1, #0]
 800203e:	7909      	ldrb	r1, [r1, #4]
 8002040:	f104 0630 	add.w	r6, r4, #48	; 0x30
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002044:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8002048:	68ed      	ldr	r5, [r5, #12]
 800204a:	696d      	ldr	r5, [r5, #20]

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 800204c:	60ab      	str	r3, [r5, #8]
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 800204e:	606a      	str	r2, [r5, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8002050:	702f      	strb	r7, [r5, #0]
  isp->mode.queue.txqueue = oqp;
 8002052:	60ee      	str	r6, [r5, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002054:	f006 f9a4 	bl	80083a0 <usb_lld_prepare_transmit>
 8002058:	2320      	movs	r3, #32
 800205a:	f383 8811 	msr	BASEPRI, r3
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800205e:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	7919      	ldrb	r1, [r3, #4]
  }
}
 8002066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedTransmit(sdup->config->usbp,
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 800206a:	f7ff bf09 	b.w	8001e80 <usbStartTransmitI>
 800206e:	bf00      	nop

08002070 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002074:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];
 8002078:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28

  if (sdup == NULL)
 800207c:	b1b4      	cbz	r4, 80020ac <sduDataTransmitted+0x3c>
 800207e:	460d      	mov	r5, r1
 8002080:	4606      	mov	r6, r0
 8002082:	2720      	movs	r7, #32
 8002084:	f387 8811 	msr	BASEPRI, r7
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002088:	2108      	movs	r1, #8
 800208a:	1d20      	adds	r0, r4, #4
 800208c:	f004 fcc0 	bl	8006a10 <chEvtBroadcastFlagsI>
 8002090:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002092:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002094:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002096:	1ad3      	subs	r3, r2, r3
    return;

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
 8002098:	1a5b      	subs	r3, r3, r1
 800209a:	d119      	bne.n	80020d0 <sduDataTransmitted+0x60>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 800209c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	6852      	ldr	r2, [r2, #4]
 80020a4:	b922      	cbnz	r2, 80020b0 <sduDataTransmitted+0x40>
 80020a6:	2300      	movs	r3, #0
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           !(usbp->epc[ep]->in_state->txsize &
             (usbp->epc[ep]->in_maxsize - 1))) {
 80020b0:	8a1b      	ldrh	r3, [r3, #16]
 80020b2:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 80020b4:	4013      	ands	r3, r2
 80020b6:	d1f6      	bne.n	80020a6 <sduDataTransmitted+0x36>
 80020b8:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80020bc:	f8d8 200c 	ldr.w	r2, [r8, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 80020c0:	3430      	adds	r4, #48	; 0x30
 80020c2:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = TRUE;
 80020c4:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 80020c6:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80020c8:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
 80020ca:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 80020cc:	7011      	strb	r1, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <sduDataTransmitted+0x78>
 80020d0:	2100      	movs	r1, #0
 80020d2:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80020d6:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 80020da:	3430      	adds	r4, #48	; 0x30
 80020dc:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = TRUE;
 80020de:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 80020e0:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80020e2:	6091      	str	r1, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
 80020e4:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 80020e6:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80020e8:	4630      	mov	r0, r6
 80020ea:	4629      	mov	r1, r5
 80020ec:	f006 f958 	bl	80083a0 <usb_lld_prepare_transmit>
 80020f0:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
 80020f4:	4630      	mov	r0, r6
 80020f6:	4629      	mov	r1, r5
 80020f8:	f7ff fec2 	bl	8001e80 <usbStartTransmitI>
 80020fc:	e7d3      	b.n	80020a6 <sduDataTransmitted+0x36>
 80020fe:	bf00      	nop

08002100 <readt.lto_priv.102>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, time);
 8002100:	300c      	adds	r0, #12
 8002102:	f004 ba65 	b.w	80065d0 <chIQReadTimeout>
 8002106:	bf00      	nop
 8002108:	f3af 8000 	nop.w
 800210c:	f3af 8000 	nop.w

08002110 <read.lto_priv.96>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8002110:	300c      	adds	r0, #12
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002116:	f004 ba5b 	b.w	80065d0 <chIQReadTimeout>
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w

08002120 <writet.lto_priv.101>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
 8002120:	3030      	adds	r0, #48	; 0x30
 8002122:	f004 b9e5 	b.w	80064f0 <chOQWriteTimeout>
 8002126:	bf00      	nop
 8002128:	f3af 8000 	nop.w
 800212c:	f3af 8000 	nop.w

08002130 <write.lto_priv.95>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8002130:	3030      	adds	r0, #48	; 0x30
 8002132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002136:	f004 b9db 	b.w	80064f0 <chOQWriteTimeout>
 800213a:	bf00      	nop
 800213c:	f3af 8000 	nop.w

08002140 <gett.lto_priv.100>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8002140:	300c      	adds	r0, #12
 8002142:	f004 ba85 	b.w	8006650 <chIQGetTimeout>
 8002146:	bf00      	nop
 8002148:	f3af 8000 	nop.w
 800214c:	f3af 8000 	nop.w

08002150 <get.lto_priv.98>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8002150:	300c      	adds	r0, #12
 8002152:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002156:	f004 ba7b 	b.w	8006650 <chIQGetTimeout>
 800215a:	bf00      	nop
 800215c:	f3af 8000 	nop.w

08002160 <putt.lto_priv.99>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8002160:	3030      	adds	r0, #48	; 0x30
 8002162:	f004 ba0d 	b.w	8006580 <chOQPutTimeout>
 8002166:	bf00      	nop
 8002168:	f3af 8000 	nop.w
 800216c:	f3af 8000 	nop.w

08002170 <put.lto_priv.97>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002170:	3030      	adds	r0, #48	; 0x30
 8002172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002176:	f004 ba03 	b.w	8006580 <chOQPutTimeout>
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w

08002180 <bmk13_execute.lto_priv.184>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8002180:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8002182:	482f      	ldr	r0, [pc, #188]	; (8002240 <bmk13_execute.lto_priv.184+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8002184:	4c2f      	ldr	r4, [pc, #188]	; (8002244 <bmk13_execute.lto_priv.184+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8002186:	f003 ff0b 	bl	8005fa0 <test_print>
  test_printn(sizeof(ch_system_t));
 800218a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800218e:	f003 ff17 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 8002192:	4620      	mov	r0, r4
 8002194:	f003 fee4 	bl	8005f60 <test_println>
  test_print("--- Thread: ");
 8002198:	482b      	ldr	r0, [pc, #172]	; (8002248 <bmk13_execute.lto_priv.184+0xc8>)
 800219a:	f003 ff01 	bl	8005fa0 <test_print>
  test_printn(sizeof(thread_t));
 800219e:	2044      	movs	r0, #68	; 0x44
 80021a0:	f003 ff0e 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 80021a4:	4620      	mov	r0, r4
 80021a6:	f003 fedb 	bl	8005f60 <test_println>
  test_print("--- Timer : ");
 80021aa:	4828      	ldr	r0, [pc, #160]	; (800224c <bmk13_execute.lto_priv.184+0xcc>)
 80021ac:	f003 fef8 	bl	8005fa0 <test_print>
  test_printn(sizeof(virtual_timer_t));
 80021b0:	2014      	movs	r0, #20
 80021b2:	f003 ff05 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 80021b6:	4620      	mov	r0, r4
 80021b8:	f003 fed2 	bl	8005f60 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 80021bc:	4824      	ldr	r0, [pc, #144]	; (8002250 <bmk13_execute.lto_priv.184+0xd0>)
 80021be:	f003 feef 	bl	8005fa0 <test_print>
  test_printn(sizeof(semaphore_t));
 80021c2:	200c      	movs	r0, #12
 80021c4:	f003 fefc 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 80021c8:	4620      	mov	r0, r4
 80021ca:	f003 fec9 	bl	8005f60 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 80021ce:	4821      	ldr	r0, [pc, #132]	; (8002254 <bmk13_execute.lto_priv.184+0xd4>)
 80021d0:	f003 fee6 	bl	8005fa0 <test_print>
  test_printn(sizeof(event_source_t));
 80021d4:	2004      	movs	r0, #4
 80021d6:	f003 fef3 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 80021da:	4620      	mov	r0, r4
 80021dc:	f003 fec0 	bl	8005f60 <test_println>
  test_print("--- EventL: ");
 80021e0:	481d      	ldr	r0, [pc, #116]	; (8002258 <bmk13_execute.lto_priv.184+0xd8>)
 80021e2:	f003 fedd 	bl	8005fa0 <test_print>
  test_printn(sizeof(event_listener_t));
 80021e6:	2014      	movs	r0, #20
 80021e8:	f003 feea 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 80021ec:	4620      	mov	r0, r4
 80021ee:	f003 feb7 	bl	8005f60 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 80021f2:	481a      	ldr	r0, [pc, #104]	; (800225c <bmk13_execute.lto_priv.184+0xdc>)
 80021f4:	f003 fed4 	bl	8005fa0 <test_print>
  test_printn(sizeof(mutex_t));
 80021f8:	2010      	movs	r0, #16
 80021fa:	f003 fee1 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 80021fe:	4620      	mov	r0, r4
 8002200:	f003 feae 	bl	8005f60 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8002204:	4816      	ldr	r0, [pc, #88]	; (8002260 <bmk13_execute.lto_priv.184+0xe0>)
 8002206:	f003 fecb 	bl	8005fa0 <test_print>
  test_printn(sizeof(condition_variable_t));
 800220a:	2008      	movs	r0, #8
 800220c:	f003 fed8 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 8002210:	4620      	mov	r0, r4
 8002212:	f003 fea5 	bl	8005f60 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8002216:	4813      	ldr	r0, [pc, #76]	; (8002264 <bmk13_execute.lto_priv.184+0xe4>)
 8002218:	f003 fec2 	bl	8005fa0 <test_print>
  test_printn(sizeof(io_queue_t));
 800221c:	2024      	movs	r0, #36	; 0x24
 800221e:	f003 fecf 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 8002222:	4620      	mov	r0, r4
 8002224:	f003 fe9c 	bl	8005f60 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <bmk13_execute.lto_priv.184+0xe8>)
 800222a:	f003 feb9 	bl	8005fa0 <test_print>
  test_printn(sizeof(mailbox_t));
 800222e:	2028      	movs	r0, #40	; 0x28
 8002230:	f003 fec6 	bl	8005fc0 <test_printn>
  test_println(" bytes");
 8002234:	4620      	mov	r0, r4
#endif
}
 8002236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 800223a:	f003 be91 	b.w	8005f60 <test_println>
 800223e:	bf00      	nop
 8002240:	080098e0 	.word	0x080098e0
 8002244:	080098f0 	.word	0x080098f0
 8002248:	080098f8 	.word	0x080098f8
 800224c:	08009908 	.word	0x08009908
 8002250:	08009918 	.word	0x08009918
 8002254:	08009928 	.word	0x08009928
 8002258:	08009938 	.word	0x08009938
 800225c:	08009948 	.word	0x08009948
 8002260:	08009958 	.word	0x08009958
 8002264:	08009968 	.word	0x08009968
 8002268:	08009978 	.word	0x08009978
 800226c:	f3af 8000 	nop.w

08002270 <bmk12_execute.lto_priv.183>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8002270:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002272:	f003 fca5 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 8002276:	f006 fef3 	bl	8009060 <test_start_timer.constprop.19>
 800227a:	4d14      	ldr	r5, [pc, #80]	; (80022cc <bmk12_execute.lto_priv.183+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800227c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800227e:	4814      	ldr	r0, [pc, #80]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 8002280:	f004 ffce 	bl	8007220 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002284:	4812      	ldr	r0, [pc, #72]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 8002286:	f004 fd3b 	bl	8006d00 <chMtxUnlock>
    chMtxLock(&mtx1);
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 800228c:	f004 ffc8 	bl	8007220 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002290:	480f      	ldr	r0, [pc, #60]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 8002292:	f004 fd35 	bl	8006d00 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002296:	480e      	ldr	r0, [pc, #56]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 8002298:	f004 ffc2 	bl	8007220 <chMtxLock>
    chMtxUnlock(&mtx1);
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 800229e:	f004 fd2f 	bl	8006d00 <chMtxUnlock>
    chMtxLock(&mtx1);
 80022a2:	480b      	ldr	r0, [pc, #44]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 80022a4:	f004 ffbc 	bl	8007220 <chMtxLock>
    chMtxUnlock(&mtx1);
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <bmk12_execute.lto_priv.183+0x60>)
 80022aa:	f004 fd29 	bl	8006d00 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80022ae:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 80022b0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0e3      	beq.n	800227e <bmk12_execute.lto_priv.183+0xe>
  test_print("--- Score : ");
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <bmk12_execute.lto_priv.183+0x64>)
 80022b8:	f003 fe72 	bl	8005fa0 <test_print>
  test_printn(n * 4);
 80022bc:	00a0      	lsls	r0, r4, #2
 80022be:	f003 fe7f 	bl	8005fc0 <test_printn>
  test_println(" lock+unlock/S");
}
 80022c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 80022c6:	4804      	ldr	r0, [pc, #16]	; (80022d8 <bmk12_execute.lto_priv.183+0x68>)
 80022c8:	f003 be4a 	b.w	8005f60 <test_println>
 80022cc:	20001760 	.word	0x20001760
 80022d0:	20001420 	.word	0x20001420
 80022d4:	08009988 	.word	0x08009988
 80022d8:	08009998 	.word	0x08009998
 80022dc:	f3af 8000 	nop.w

080022e0 <bmk11_execute.lto_priv.181>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 80022e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80022e2:	f003 fc6d 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 80022e6:	f006 febb 	bl	8009060 <test_start_timer.constprop.19>
 80022ea:	4d14      	ldr	r5, [pc, #80]	; (800233c <bmk11_execute.lto_priv.181+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 80022ec:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 80022ee:	4814      	ldr	r0, [pc, #80]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 80022f0:	f004 fdf6 	bl	8006ee0 <chSemWait>
    chSemSignal(&sem1);
 80022f4:	4812      	ldr	r0, [pc, #72]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 80022f6:	f004 fd33 	bl	8006d60 <chSemSignal>
    chSemWait(&sem1);
 80022fa:	4811      	ldr	r0, [pc, #68]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 80022fc:	f004 fdf0 	bl	8006ee0 <chSemWait>
    chSemSignal(&sem1);
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 8002302:	f004 fd2d 	bl	8006d60 <chSemSignal>
    chSemWait(&sem1);
 8002306:	480e      	ldr	r0, [pc, #56]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 8002308:	f004 fdea 	bl	8006ee0 <chSemWait>
    chSemSignal(&sem1);
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 800230e:	f004 fd27 	bl	8006d60 <chSemSignal>
    chSemWait(&sem1);
 8002312:	480b      	ldr	r0, [pc, #44]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 8002314:	f004 fde4 	bl	8006ee0 <chSemWait>
    chSemSignal(&sem1);
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <bmk11_execute.lto_priv.181+0x60>)
 800231a:	f004 fd21 	bl	8006d60 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800231e:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8002320:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0e3      	beq.n	80022ee <bmk11_execute.lto_priv.181+0xe>
  test_print("--- Score : ");
 8002326:	4807      	ldr	r0, [pc, #28]	; (8002344 <bmk11_execute.lto_priv.181+0x64>)
 8002328:	f003 fe3a 	bl	8005fa0 <test_print>
  test_printn(n * 4);
 800232c:	00a0      	lsls	r0, r4, #2
 800232e:	f003 fe47 	bl	8005fc0 <test_printn>
  test_println(" wait+signal/S");
}
 8002332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <bmk11_execute.lto_priv.181+0x68>)
 8002338:	f003 be12 	b.w	8005f60 <test_println>
 800233c:	20001760 	.word	0x20001760
 8002340:	20001414 	.word	0x20001414
 8002344:	08009988 	.word	0x08009988
 8002348:	080099a8 	.word	0x080099a8
 800234c:	f3af 8000 	nop.w

08002350 <bmk10_execute.lto_priv.179>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8002350:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8002352:	f003 fc35 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 8002356:	f006 fe83 	bl	8009060 <test_start_timer.constprop.19>
 800235a:	4d15      	ldr	r5, [pc, #84]	; (80023b0 <bmk10_execute.lto_priv.179+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800235c:	2400      	movs	r4, #0
 800235e:	2320      	movs	r3, #32
 8002360:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8002364:	4813      	ldr	r0, [pc, #76]	; (80023b4 <bmk10_execute.lto_priv.179+0x64>)
 8002366:	2101      	movs	r1, #1
 8002368:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <bmk10_execute.lto_priv.179+0x68>)
 800236a:	2300      	movs	r3, #0
 800236c:	f004 fc28 	bl	8006bc0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002370:	f242 7110 	movw	r1, #10000	; 0x2710
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <bmk10_execute.lto_priv.179+0x68>)
 8002376:	2300      	movs	r3, #0
 8002378:	4810      	ldr	r0, [pc, #64]	; (80023bc <bmk10_execute.lto_priv.179+0x6c>)
 800237a:	f004 fc21 	bl	8006bc0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 800237e:	480d      	ldr	r0, [pc, #52]	; (80023b4 <bmk10_execute.lto_priv.179+0x64>)
 8002380:	f004 fbee 	bl	8006b60 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8002384:	480d      	ldr	r0, [pc, #52]	; (80023bc <bmk10_execute.lto_priv.179+0x6c>)
 8002386:	f004 fbeb 	bl	8006b60 <chVTDoResetI>
 800238a:	2300      	movs	r3, #0
 800238c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002390:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8002392:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0e2      	beq.n	800235e <bmk10_execute.lto_priv.179+0xe>
  test_print("--- Score : ");
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <bmk10_execute.lto_priv.179+0x70>)
 800239a:	f003 fe01 	bl	8005fa0 <test_print>
  test_printn(n * 2);
 800239e:	0060      	lsls	r0, r4, #1
 80023a0:	f003 fe0e 	bl	8005fc0 <test_printn>
  test_println(" timers/S");
}
 80023a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <bmk10_execute.lto_priv.179+0x74>)
 80023aa:	f003 bdd9 	b.w	8005f60 <test_println>
 80023ae:	bf00      	nop
 80023b0:	20001760 	.word	0x20001760
 80023b4:	200013c8 	.word	0x200013c8
 80023b8:	08001f61 	.word	0x08001f61
 80023bc:	20001400 	.word	0x20001400
 80023c0:	08009988 	.word	0x08009988
 80023c4:	080099b8 	.word	0x080099b8
 80023c8:	f3af 8000 	nop.w
 80023cc:	f3af 8000 	nop.w

080023d0 <bmk9_execute.lto_priv.178>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80023d2:	4926      	ldr	r1, [pc, #152]	; (800246c <bmk9_execute.lto_priv.178+0x9c>)
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80023d6:	2200      	movs	r2, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80023d8:	f101 0010 	add.w	r0, r1, #16
 80023dc:	605b      	str	r3, [r3, #4]
 80023de:	601b      	str	r3, [r3, #0]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 80023e0:	4614      	mov	r4, r2
 80023e2:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80023e4:	6159      	str	r1, [r3, #20]
 80023e6:	6199      	str	r1, [r3, #24]
 80023e8:	60d9      	str	r1, [r3, #12]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80023ea:	609a      	str	r2, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80023ec:	61da      	str	r2, [r3, #28]
  iqp->q_link = link;
 80023ee:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 80023f0:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 80023f2:	f003 fbe5 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 80023f6:	f006 fe33 	bl	8009060 <test_start_timer.constprop.19>
 80023fa:	4e1e      	ldr	r6, [pc, #120]	; (8002474 <bmk9_execute.lto_priv.178+0xa4>)
 80023fc:	2520      	movs	r5, #32
 80023fe:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8002402:	2100      	movs	r1, #0
 8002404:	481a      	ldr	r0, [pc, #104]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 8002406:	f004 f94b 	bl	80066a0 <chIQPutI>
    chIQPutI(&iq, 1);
 800240a:	2101      	movs	r1, #1
 800240c:	4818      	ldr	r0, [pc, #96]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 800240e:	f004 f947 	bl	80066a0 <chIQPutI>
    chIQPutI(&iq, 2);
 8002412:	2102      	movs	r1, #2
 8002414:	4816      	ldr	r0, [pc, #88]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 8002416:	f004 f943 	bl	80066a0 <chIQPutI>
    chIQPutI(&iq, 3);
 800241a:	2103      	movs	r1, #3
 800241c:	4814      	ldr	r0, [pc, #80]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 800241e:	f004 f93f 	bl	80066a0 <chIQPutI>
 8002422:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8002426:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800242a:	4811      	ldr	r0, [pc, #68]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 800242c:	f004 f910 	bl	8006650 <chIQGetTimeout>
 8002430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 8002436:	f004 f90b 	bl	8006650 <chIQGetTimeout>
 800243a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800243e:	480c      	ldr	r0, [pc, #48]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 8002440:	f004 f906 	bl	8006650 <chIQGetTimeout>
 8002444:	480a      	ldr	r0, [pc, #40]	; (8002470 <bmk9_execute.lto_priv.178+0xa0>)
 8002446:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800244a:	f004 f901 	bl	8006650 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800244e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8002450:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0d3      	beq.n	80023fe <bmk9_execute.lto_priv.178+0x2e>
  test_print("--- Score : ");
 8002456:	4808      	ldr	r0, [pc, #32]	; (8002478 <bmk9_execute.lto_priv.178+0xa8>)
 8002458:	f003 fda2 	bl	8005fa0 <test_print>
  test_printn(n * 4);
 800245c:	00a0      	lsls	r0, r4, #2
 800245e:	f003 fdaf 	bl	8005fc0 <test_printn>
  test_println(" bytes/S");
}
 8002462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <bmk9_execute.lto_priv.178+0xac>)
 8002468:	f003 bd7a 	b.w	8005f60 <test_println>
 800246c:	20001430 	.word	0x20001430
 8002470:	200013dc 	.word	0x200013dc
 8002474:	20001760 	.word	0x20001760
 8002478:	08009988 	.word	0x08009988
 800247c:	080099c4 	.word	0x080099c4

08002480 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8002480:	8942      	ldrh	r2, [r0, #10]
 8002482:	fa42 f301 	asr.w	r3, r2, r1
 8002486:	f013 0301 	ands.w	r3, r3, #1
 800248a:	d002      	beq.n	8002492 <usbStartReceiveI+0x12>
    return TRUE;
 800248c:	2301      	movs	r3, #1

  usbp->receiving |= (1 << ep);
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 800248e:	4618      	mov	r0, r3
 8002490:	4770      	bx	lr
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8002492:	b470      	push	{r4, r5, r6}
 8002494:	008d      	lsls	r5, r1, #2
 8002496:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800249a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800249e:	682c      	ldr	r4, [r5, #0]
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
    return TRUE;

  usbp->receiving |= (1 << ep);
 80024a0:	2601      	movs	r6, #1
 80024a2:	f424 4490 	bic.w	r4, r4, #18432	; 0x4800
 80024a6:	fa06 f101 	lsl.w	r1, r6, r1
 80024aa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80024ae:	f484 5440 	eor.w	r4, r4, #12288	; 0x3000
 80024b2:	430a      	orrs	r2, r1
 80024b4:	8142      	strh	r2, [r0, #10]
 80024b6:	602c      	str	r4, [r5, #0]
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bc70      	pop	{r4, r5, r6}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop

080024c0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80024c0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80024c2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80024c6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d04b      	beq.n	8002564 <_usb_ep0in+0xa4>
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d042      	beq.n	8002556 <_usb_ep0in+0x96>
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d019      	beq.n	8002508 <_usb_ep0in+0x48>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80024d4:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <_usb_ep0in+0xd4>)
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80024d6:	6841      	ldr	r1, [r0, #4]
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	680d      	ldr	r5, [r1, #0]
 80024dc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80024e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e4:	f083 0310 	eor.w	r3, r3, #16
 80024e8:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	b10d      	cbz	r5, 8002500 <_usb_ep0in+0x40>
 80024fc:	2105      	movs	r1, #5
 80024fe:	47a8      	blx	r5
  usbp->ep0state = USB_EP0_ERROR;
 8002500:	2306      	movs	r3, #6
 8002502:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002506:	bd38      	pop	{r3, r4, r5, pc}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8002508:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 800250c:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8002510:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8002512:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8002516:	428b      	cmp	r3, r1
 8002518:	68c3      	ldr	r3, [r0, #12]
 800251a:	d905      	bls.n	8002528 <_usb_ep0in+0x68>
 800251c:	8a1d      	ldrh	r5, [r3, #16]
 800251e:	fbb1 f2f5 	udiv	r2, r1, r5
 8002522:	fb05 1512 	mls	r5, r5, r2, r1
 8002526:	b1fd      	cbz	r5, 8002568 <_usb_ep0in+0xa8>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002528:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = FALSE;
 800252a:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800252c:	2203      	movs	r2, #3
 800252e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002532:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8002534:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8002536:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8002538:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800253a:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800253c:	4620      	mov	r0, r4
 800253e:	f005 ff6f 	bl	8008420 <usb_lld_prepare_receive>
 8002542:	2320      	movs	r3, #32
 8002544:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0);
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7ff ff98 	bl	8002480 <usbStartReceiveI>
 8002550:	f385 8811 	msr	BASEPRI, r5
 8002554:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL)
 8002556:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002558:	b103      	cbz	r3, 800255c <_usb_ep0in+0x9c>
      usbp->ep0endcb(usbp);
 800255a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800255c:	2300      	movs	r3, #0
 800255e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002562:	bd38      	pop	{r3, r4, r5, pc}
 8002564:	68c3      	ldr	r3, [r0, #12]
 8002566:	e7df      	b.n	8002528 <_usb_ep0in+0x68>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002568:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800256a:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 800256c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800256e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8002570:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8002572:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002574:	f005 ff14 	bl	80083a0 <usb_lld_prepare_transmit>
 8002578:	2320      	movs	r3, #32
 800257a:	f383 8811 	msr	BASEPRI, r3
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7ff fc7d 	bl	8001e80 <usbStartTransmitI>
 8002586:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800258a:	2302      	movs	r3, #2
 800258c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002590:	bd38      	pop	{r3, r4, r5, pc}
 8002592:	bf00      	nop
 8002594:	40005c00 	.word	0x40005c00
 8002598:	f3af 8000 	nop.w
 800259c:	f3af 8000 	nop.w

080025a0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 80025a4:	4bc1      	ldr	r3, [pc, #772]	; (80028ac <_usb_ep0setup+0x30c>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80025a6:	2200      	movs	r2, #0
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 80025ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80025b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80025b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80025ba:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80025bc:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 80025be:	f100 0274 	add.w	r2, r0, #116	; 0x74
 80025c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80025c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	f100 057c 	add.w	r5, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80025d0:	f853 1b04 	ldr.w	r1, [r3], #4
 80025d4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 80025d8:	42aa      	cmp	r2, r5
 80025da:	d1f9      	bne.n	80025d0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	b36b      	cbz	r3, 800263e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 80025e2:	4620      	mov	r0, r4
 80025e4:	4798      	blx	r3
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 80025e6:	b350      	cbz	r0, 800263e <_usb_ep0setup+0x9e>
 80025e8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80025ea:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
 80025ee:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 80025f2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 80025f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
 80025fa:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80025fc:	bf3c      	itt	cc
 80025fe:	4615      	movcc	r5, r2
 8002600:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002602:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002606:	68e3      	ldr	r3, [r4, #12]
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002608:	f040 80a8 	bne.w	800275c <_usb_ep0setup+0x1bc>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
 800260c:	2d00      	cmp	r5, #0
 800260e:	f040 808d 	bne.w	800272c <_usb_ep0setup+0x18c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002612:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8002614:	2205      	movs	r2, #5
 8002616:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800261a:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 800261c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800261e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8002620:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8002622:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002624:	4629      	mov	r1, r5
 8002626:	f005 febb 	bl	80083a0 <usb_lld_prepare_transmit>
 800262a:	2320      	movs	r3, #32
 800262c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7ff fc24 	bl	8001e80 <usbStartTransmitI>
 8002638:	f385 8811 	msr	BASEPRI, r5
 800263c:	bd70      	pop	{r4, r5, r6, pc}
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
      !(usbp->config->requests_hook_cb(usbp))) {
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800263e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8002642:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8002646:	d01a      	beq.n	800267e <_usb_ep0setup+0xde>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8002648:	4a98      	ldr	r2, [pc, #608]	; (80028ac <_usb_ep0setup+0x30c>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800264a:	6861      	ldr	r1, [r4, #4]
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	680d      	ldr	r5, [r1, #0]
 8002650:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002658:	f083 0310 	eor.w	r3, r3, #16
 800265c:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	b115      	cbz	r5, 8002676 <_usb_ep0setup+0xd6>
 8002670:	4620      	mov	r0, r4
 8002672:	2105      	movs	r1, #5
 8002674:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8002676:	2306      	movs	r3, #6
 8002678:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800267c:	bd70      	pop	{r4, r5, r6, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
 800267e:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                              USB_RTYPE_TYPE_MASK)) |
 8002686:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800268a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800268e:	f000 8113 	beq.w	80028b8 <_usb_ep0setup+0x318>
 8002692:	dd18      	ble.n	80026c6 <_usb_ep0setup+0x126>
 8002694:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8002698:	f000 80ee 	beq.w	8002878 <_usb_ep0setup+0x2d8>
 800269c:	f340 808d 	ble.w	80027ba <_usb_ep0setup+0x21a>
 80026a0:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 80026a4:	f000 8097 	beq.w	80027d6 <_usb_ep0setup+0x236>
 80026a8:	f640 4102 	movw	r1, #3074	; 0xc02
 80026ac:	428a      	cmp	r2, r1
 80026ae:	f000 80dc 	beq.w	800286a <_usb_ep0setup+0x2ca>
 80026b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80026b6:	d1c7      	bne.n	8002648 <_usb_ep0setup+0xa8>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80026b8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80026bc:	2501      	movs	r5, #1
 80026be:	6726      	str	r6, [r4, #112]	; 0x70
 80026c0:	66a2      	str	r2, [r4, #104]	; 0x68
 80026c2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80026c4:	e793      	b.n	80025ee <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80026c6:	2a02      	cmp	r2, #2
 80026c8:	f000 8106 	beq.w	80028d8 <_usb_ep0setup+0x338>
 80026cc:	f340 80c3 	ble.w	8002856 <_usb_ep0setup+0x2b6>
 80026d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80026d4:	f000 8092 	beq.w	80027fc <_usb_ep0setup+0x25c>
 80026d8:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80026dc:	d1b4      	bne.n	8002648 <_usb_ep0setup+0xa8>
        return FALSE;
      }
    }
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 80026de:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d1b0      	bne.n	8002648 <_usb_ep0setup+0xa8>
      return FALSE;
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 80026e6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80026ea:	f011 020f 	ands.w	r2, r1, #15
 80026ee:	d018      	beq.n	8002722 <_usb_ep0setup+0x182>
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80026f6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if (usbp->setup[4] & 0x80)
 80026fa:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80026fe:	6811      	ldr	r1, [r2, #0]
 8002700:	f040 811a 	bne.w	8002938 <_usb_ep0setup+0x398>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8002704:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8002708:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800270c:	d009      	beq.n	8002722 <_usb_ep0setup+0x182>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002718:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      if (usbp->setup[4] & 0x80)
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0F);
      else
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0F);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002722:	2500      	movs	r5, #0
 8002724:	66a5      	str	r5, [r4, #104]	; 0x68
 8002726:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002728:	6725      	str	r5, [r4, #112]	; 0x70
 800272a:	e760      	b.n	80025ee <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800272c:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800272e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8002730:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8002732:	2104      	movs	r1, #4
 8002734:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002738:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
 800273a:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 800273c:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800273e:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8002740:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8002742:	4631      	mov	r1, r6
 8002744:	f005 fe6c 	bl	8008420 <usb_lld_prepare_receive>
 8002748:	2320      	movs	r3, #32
 800274a:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 800274e:	4620      	mov	r0, r4
 8002750:	4631      	mov	r1, r6
 8002752:	f7ff fe95 	bl	8002480 <usbStartReceiveI>
 8002756:	f386 8811 	msr	BASEPRI, r6
 800275a:	bd70      	pop	{r4, r5, r6, pc}
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
 800275c:	b1bd      	cbz	r5, 800278e <_usb_ep0setup+0x1ee>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800275e:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002760:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8002762:	2600      	movs	r6, #0
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8002764:	2101      	movs	r1, #1
 8002766:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800276a:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
 800276c:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800276e:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8002770:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8002772:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002774:	4631      	mov	r1, r6
 8002776:	f005 fe13 	bl	80083a0 <usb_lld_prepare_transmit>
 800277a:	2320      	movs	r3, #32
 800277c:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8002780:	4620      	mov	r0, r4
 8002782:	4631      	mov	r1, r6
 8002784:	f7ff fb7c 	bl	8001e80 <usbStartTransmitI>
 8002788:	f386 8811 	msr	BASEPRI, r6
 800278c:	bd70      	pop	{r4, r5, r6, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800278e:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8002790:	2203      	movs	r2, #3
 8002792:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002796:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8002798:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800279a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800279c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800279e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80027a0:	4629      	mov	r1, r5
 80027a2:	f005 fe3d 	bl	8008420 <usb_lld_prepare_receive>
 80027a6:	2320      	movs	r3, #32
 80027a8:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 80027ac:	4620      	mov	r0, r4
 80027ae:	4629      	mov	r1, r5
 80027b0:	f7ff fe66 	bl	8002480 <usbStartReceiveI>
 80027b4:	f385 8811 	msr	BASEPRI, r5
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80027ba:	f240 3102 	movw	r1, #770	; 0x302
 80027be:	428a      	cmp	r2, r1
 80027c0:	d02c      	beq.n	800281c <_usb_ep0setup+0x27c>
 80027c2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80027c6:	f47f af3f 	bne.w	8002648 <_usb_ep0setup+0xa8>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
        (usbp->setup[1] == USB_REQ_SET_ADDRESS))
      set_address(usbp);
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80027ca:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <_usb_ep0setup+0x310>)
 80027cc:	66a6      	str	r6, [r4, #104]	; 0x68
 80027ce:	66e6      	str	r6, [r4, #108]	; 0x6c
 80027d0:	4635      	mov	r5, r6
 80027d2:	6722      	str	r2, [r4, #112]	; 0x70
 80027d4:	e70b      	b.n	80025ee <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 80027d6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80027da:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0)
 80027de:	2a00      	cmp	r2, #0
 80027e0:	f040 8091 	bne.w	8002906 <_usb_ep0setup+0x366>
      usbp->state = USB_SELECTED;
 80027e4:	2203      	movs	r2, #3
 80027e6:	7022      	strb	r2, [r4, #0]
    else
      usbp->state = USB_ACTIVE;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80027e8:	6862      	ldr	r2, [r4, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d098      	beq.n	8002722 <_usb_ep0setup+0x182>
 80027f0:	4620      	mov	r0, r4
 80027f2:	2102      	movs	r1, #2
 80027f4:	4790      	blx	r2
 80027f6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80027fa:	e792      	b.n	8002722 <_usb_ep0setup+0x182>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80027fc:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8002800:	2a01      	cmp	r2, #1
 8002802:	f47f af21 	bne.w	8002648 <_usb_ep0setup+0xa8>
      usbp->status &= ~2;
 8002806:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800280a:	66a6      	str	r6, [r4, #104]	; 0x68
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 800280c:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002810:	66e6      	str	r6, [r4, #108]	; 0x6c
 8002812:	6726      	str	r6, [r4, #112]	; 0x70
 8002814:	4635      	mov	r5, r6
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 8002816:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 800281a:	e6e8      	b.n	80025ee <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 800281c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8002820:	2a00      	cmp	r2, #0
 8002822:	f47f af11 	bne.w	8002648 <_usb_ep0setup+0xa8>
      return FALSE;
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8002826:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800282a:	f011 020f 	ands.w	r2, r1, #15
 800282e:	f43f af78 	beq.w	8002722 <_usb_ep0setup+0x182>
 8002832:	0093      	lsls	r3, r2, #2
 8002834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002838:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if (usbp->setup[4] & 0x80)
 800283c:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	d470      	bmi.n	8002924 <_usb_ep0setup+0x384>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800284a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8002854:	e765      	b.n	8002722 <_usb_ep0setup+0x182>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002856:	b92a      	cbnz	r2, 8002864 <_usb_ep0setup+0x2c4>
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8002858:	2102      	movs	r1, #2
 800285a:	66a5      	str	r5, [r4, #104]	; 0x68
 800285c:	6722      	str	r2, [r4, #112]	; 0x70
 800285e:	66e1      	str	r1, [r4, #108]	; 0x6c
 8002860:	460d      	mov	r5, r1
 8002862:	e6c4      	b.n	80025ee <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002864:	2a01      	cmp	r2, #1
 8002866:	f47f aeef 	bne.w	8002648 <_usb_ep0setup+0xa8>
    return TRUE;
  case USB_RTYPE_RECIPIENT_INTERFACE | (USB_REQ_GET_STATUS << 8):
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800286a:	4912      	ldr	r1, [pc, #72]	; (80028b4 <_usb_ep0setup+0x314>)
 800286c:	2502      	movs	r5, #2
 800286e:	2200      	movs	r2, #0
 8002870:	66a1      	str	r1, [r4, #104]	; 0x68
 8002872:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002874:	6722      	str	r2, [r4, #112]	; 0x70
 8002876:	e6ba      	b.n	80025ee <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 8002878:	6861      	ldr	r1, [r4, #4]
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
 800287a:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 800287e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8002882:	684d      	ldr	r5, [r1, #4]
 8002884:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002888:	4620      	mov	r0, r4
 800288a:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800288e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8002892:	47a8      	blx	r5
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
    if (dp == NULL)
 8002894:	2800      	cmp	r0, #0
 8002896:	f43f aed7 	beq.w	8002648 <_usb_ep0setup+0xa8>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800289a:	6843      	ldr	r3, [r0, #4]
 800289c:	6805      	ldr	r5, [r0, #0]
 800289e:	66a3      	str	r3, [r4, #104]	; 0x68
 80028a0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80028a2:	6726      	str	r6, [r4, #112]	; 0x70
 80028a4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80028a8:	e6a1      	b.n	80025ee <_usb_ep0setup+0x4e>
 80028aa:	bf00      	nop
 80028ac:	40005c00 	.word	0x40005c00
 80028b0:	08001ec1 	.word	0x08001ec1
 80028b4:	080098c0 	.word	0x080098c0
    }
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80028b8:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80028bc:	2a01      	cmp	r2, #1
 80028be:	f47f aec3 	bne.w	8002648 <_usb_ep0setup+0xa8>
      usbp->status |= 2;
 80028c2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80028c6:	66a6      	str	r6, [r4, #104]	; 0x68
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 80028c8:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80028cc:	66e6      	str	r6, [r4, #108]	; 0x6c
 80028ce:	6726      	str	r6, [r4, #112]	; 0x70
 80028d0:	4635      	mov	r5, r6
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 80028d2:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 80028d6:	e68a      	b.n	80025ee <_usb_ep0setup+0x4e>
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
 80028d8:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80028dc:	481e      	ldr	r0, [pc, #120]	; (8002958 <_usb_ep0setup+0x3b8>)
 80028de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80028e2:	f001 010f 	and.w	r1, r1, #15
 80028e6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80028ea:	d10f      	bne.n	800290c <_usb_ep0setup+0x36c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 80028ec:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 80028f0:	f43f aeaa 	beq.w	8002648 <_usb_ep0setup+0xa8>
 80028f4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80028f8:	d10e      	bne.n	8002918 <_usb_ep0setup+0x378>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80028fa:	4918      	ldr	r1, [pc, #96]	; (800295c <_usb_ep0setup+0x3bc>)
 80028fc:	66e2      	str	r2, [r4, #108]	; 0x6c
 80028fe:	6726      	str	r6, [r4, #112]	; 0x70
 8002900:	4615      	mov	r5, r2
 8002902:	66a1      	str	r1, [r4, #104]	; 0x68
 8002904:	e673      	b.n	80025ee <_usb_ep0setup+0x4e>
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0)
      usbp->state = USB_SELECTED;
    else
      usbp->state = USB_ACTIVE;
 8002906:	2204      	movs	r2, #4
 8002908:	7022      	strb	r2, [r4, #0]
 800290a:	e76d      	b.n	80027e8 <_usb_ep0setup+0x248>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 800290c:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 8002910:	f43f ae9a 	beq.w	8002648 <_usb_ep0setup+0xa8>
 8002914:	2910      	cmp	r1, #16
 8002916:	d0f0      	beq.n	80028fa <_usb_ep0setup+0x35a>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8002918:	4911      	ldr	r1, [pc, #68]	; (8002960 <_usb_ep0setup+0x3c0>)
 800291a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800291c:	6726      	str	r6, [r4, #112]	; 0x70
 800291e:	4615      	mov	r5, r2
 8002920:	66a1      	str	r1, [r4, #104]	; 0x68
 8002922:	e664      	b.n	80025ee <_usb_ep0setup+0x4e>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8002924:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8002928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292c:	f082 0210 	eor.w	r2, r2, #16
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8002936:	e6f4      	b.n	8002722 <_usb_ep0setup+0x182>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8002938:	f001 0130 	and.w	r1, r1, #48	; 0x30
 800293c:	2930      	cmp	r1, #48	; 0x30
 800293e:	f43f aef0 	beq.w	8002722 <_usb_ep0setup+0x182>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294c:	f083 0320 	eor.w	r3, r3, #32
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8002956:	e6e4      	b.n	8002722 <_usb_ep0setup+0x182>
 8002958:	40005c00 	.word	0x40005c00
 800295c:	080098b0 	.word	0x080098b0
 8002960:	080098d0 	.word	0x080098d0
 8002964:	f3af 8000 	nop.w
 8002968:	f3af 8000 	nop.w
 800296c:	f3af 8000 	nop.w

08002970 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8002970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002974:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];
 8002978:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44

  if (sdup == NULL)
 800297c:	b1ac      	cbz	r4, 80029aa <sduDataReceived+0x3a>
 800297e:	460d      	mov	r5, r1
 8002980:	4606      	mov	r6, r0
 8002982:	2720      	movs	r7, #32
 8002984:	f387 8811 	msr	BASEPRI, r7
 8002988:	2104      	movs	r1, #4
 800298a:	1860      	adds	r0, r4, r1
 800298c:	f004 f840 	bl	8006a10 <chEvtBroadcastFlagsI>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 8002990:	69a3      	ldr	r3, [r4, #24]
 8002992:	69e2      	ldr	r2, [r4, #28]
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8002994:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8002998:	6961      	ldr	r1, [r4, #20]
 800299a:	1ad2      	subs	r2, r2, r3
 800299c:	8a40      	ldrh	r0, [r0, #18]
 800299e:	1a53      	subs	r3, r2, r1
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 80029a0:	4298      	cmp	r0, r3
 80029a2:	d904      	bls.n	80029ae <sduDataReceived+0x3e>
 80029a4:	2300      	movs	r3, #0
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ae:	2100      	movs	r1, #0
 80029b0:	f381 8811 	msr	BASEPRI, r1
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 80029b4:	fbb3 f3f0 	udiv	r3, r3, r0
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80029b8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80029bc:	fb00 f303 	mul.w	r3, r0, r3
 80029c0:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 80029c2:	340c      	adds	r4, #12

  osp->rxqueued           = TRUE;
 80029c4:	2001      	movs	r0, #1
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80029c6:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80029c8:	7010      	strb	r0, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80029ca:	6053      	str	r3, [r2, #4]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
 80029cc:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80029ce:	4630      	mov	r0, r6
 80029d0:	4629      	mov	r1, r5
 80029d2:	f005 fd25 	bl	8008420 <usb_lld_prepare_receive>
 80029d6:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    usbStartReceiveI(usbp, ep);
 80029da:	4630      	mov	r0, r6
 80029dc:	4629      	mov	r1, r5
 80029de:	f7ff fd4f 	bl	8002480 <usbStartReceiveI>
 80029e2:	e7df      	b.n	80029a4 <sduDataReceived+0x34>
 80029e4:	f3af 8000 	nop.w
 80029e8:	f3af 8000 	nop.w
 80029ec:	f3af 8000 	nop.w

080029f0 <inotify.lto_priv.86>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 80029f2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80029f4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	7819      	ldrb	r1, [r3, #0]
 80029fc:	2904      	cmp	r1, #4
 80029fe:	d000      	beq.n	8002a02 <inotify.lto_priv.86+0x12>
 8002a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a02:	7a21      	ldrb	r1, [r4, #8]
 8002a04:	2902      	cmp	r1, #2
 8002a06:	d1fb      	bne.n	8002a00 <inotify.lto_priv.86+0x10>
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002a08:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8002a0a:	895a      	ldrh	r2, [r3, #10]
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002a0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002a10:	68d8      	ldr	r0, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8002a12:	fa42 f301 	asr.w	r3, r2, r1
 8002a16:	f013 0301 	ands.w	r3, r3, #1
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8002a1a:	8a40      	ldrh	r0, [r0, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8002a1c:	d1f0      	bne.n	8002a00 <inotify.lto_priv.86+0x10>
 8002a1e:	69a2      	ldr	r2, [r4, #24]
 8002a20:	69e1      	ldr	r1, [r4, #28]
 8002a22:	6965      	ldr	r5, [r4, #20]
 8002a24:	1a89      	subs	r1, r1, r2
 8002a26:	1b4a      	subs	r2, r1, r5
 8002a28:	4290      	cmp	r0, r2
 8002a2a:	d8e9      	bhi.n	8002a00 <inotify.lto_priv.86+0x10>
 8002a2c:	f383 8811 	msr	BASEPRI, r3
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8002a30:	fbb2 f2f0 	udiv	r2, r2, r0
    usbPrepareQueuedReceive(sdup->config->usbp,
 8002a34:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8002a38:	fb00 f202 	mul.w	r2, r0, r2
    usbPrepareQueuedReceive(sdup->config->usbp,
 8002a3c:	6808      	ldr	r0, [r1, #0]
 8002a3e:	7949      	ldrb	r1, [r1, #5]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8002a40:	2701      	movs	r7, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002a42:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8002a46:	68ed      	ldr	r5, [r5, #12]
 8002a48:	f104 060c 	add.w	r6, r4, #12
 8002a4c:	69ad      	ldr	r5, [r5, #24]

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8002a4e:	60ab      	str	r3, [r5, #8]
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8002a50:	606a      	str	r2, [r5, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8002a52:	702f      	strb	r7, [r5, #0]
  osp->mode.queue.rxqueue = iqp;
 8002a54:	60ee      	str	r6, [r5, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002a56:	f005 fce3 	bl	8008420 <usb_lld_prepare_receive>
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f383 8811 	msr	BASEPRI, r3
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8002a60:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	7959      	ldrb	r1, [r3, #5]
  }
}
 8002a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedReceive(sdup->config->usbp,
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8002a6c:	f7ff bd08 	b.w	8002480 <usbStartReceiveI>

08002a70 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8002a70:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8002a72:	b570      	push	{r4, r5, r6, lr}
 8002a74:	4614      	mov	r4, r2
 8002a76:	4606      	mov	r6, r0
 8002a78:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8002a7a:	b123      	cbz	r3, 8002a86 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2210      	movs	r2, #16
 8002a82:	f006 fb6d 	bl	8009160 <memset>
  if (epcp->out_state != NULL)
 8002a86:	69a0      	ldr	r0, [r4, #24]
 8002a88:	b118      	cbz	r0, 8002a92 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2214      	movs	r2, #20
 8002a8e:	f006 fb67 	bl	8009160 <memset>

  usbp->epc[ep] = epcp;
 8002a92:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8002a96:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8002a98:	4630      	mov	r0, r6
 8002a9a:	4629      	mov	r1, r5
}
 8002a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8002aa0:	f005 bcce 	b.w	8008440 <usb_lld_init_endpoint>
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	f3af 8000 	nop.w
 8002aac:	f3af 8000 	nop.w

08002ab0 <dyn2_setup.lto_priv.161>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <dyn2_setup.lto_priv.161+0x10>)
 8002ab2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8002ab4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002ab8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8002aba:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	4770      	bx	lr
 8002ac0:	20001f7c 	.word	0x20001f7c
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	f3af 8000 	nop.w
 8002acc:	f3af 8000 	nop.w

08002ad0 <dyn1_setup.lto_priv.159>:
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8002ad0:	4909      	ldr	r1, [pc, #36]	; (8002af8 <dyn1_setup.lto_priv.159+0x28>)
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8002ad2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002ad4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8002ad6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <dyn1_setup.lto_priv.159+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8002adc:	e881 0014 	stmia.w	r1, {r2, r4}
 8002ae0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 8002ae4:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8002ae6:	6099      	str	r1, [r3, #8]
 8002ae8:	6158      	str	r0, [r3, #20]
 8002aea:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8002af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20001768 	.word	0x20001768
 8002afc:	20001460 	.word	0x20001460

08002b00 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8002b00:	2000      	movs	r0, #0
 8002b02:	4770      	bx	lr
 8002b04:	f3af 8000 	nop.w
 8002b08:	f3af 8000 	nop.w
 8002b0c:	f3af 8000 	nop.w

08002b10 <pools1_setup.lto_priv.157>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <pools1_setup.lto_priv.157+0x10>)
 8002b12:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8002b14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b18:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8002b1a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	4770      	bx	lr
 8002b20:	20000c28 	.word	0x20000c28
 8002b24:	f3af 8000 	nop.w
 8002b28:	f3af 8000 	nop.w
 8002b2c:	f3af 8000 	nop.w

08002b30 <heap1_setup.lto_priv.155>:
  heapp->h_free.h.u.next = hp = buf;
 8002b30:	4909      	ldr	r1, [pc, #36]	; (8002b58 <heap1_setup.lto_priv.155+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8002b32:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002b34:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8002b36:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <heap1_setup.lto_priv.155+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8002b3c:	e881 0014 	stmia.w	r1, {r2, r4}
 8002b40:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 8002b44:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8002b46:	6099      	str	r1, [r3, #8]
 8002b48:	6158      	str	r0, [r3, #20]
 8002b4a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8002b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20001768 	.word	0x20001768
 8002b5c:	20001440 	.word	0x20001440

08002b60 <pools1_execute.lto_priv.158>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <pools1_execute.lto_priv.158+0xc0>)
 8002b64:	4c2f      	ldr	r4, [pc, #188]	; (8002c24 <pools1_execute.lto_priv.158+0xc4>)
 8002b66:	2205      	movs	r2, #5
 8002b68:	2520      	movs	r5, #32
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002b70:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8002b72:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002b74:	6019      	str	r1, [r3, #0]
 8002b76:	f380 8811 	msr	BASEPRI, r0

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8002b7a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 8002b7c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8002b7e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 8002b80:	d1f4      	bne.n	8002b6c <pools1_execute.lto_priv.158+0xc>
 8002b82:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8002b84:	4827      	ldr	r0, [pc, #156]	; (8002c24 <pools1_execute.lto_priv.158+0xc4>)
 8002b86:	f003 fbe3 	bl	8006350 <chPoolAlloc>
 8002b8a:	1c01      	adds	r1, r0, #0
 8002b8c:	bf18      	it	ne
 8002b8e:	2101      	movne	r1, #1
 8002b90:	2001      	movs	r0, #1
 8002b92:	f003 f9ad 	bl	8005ef0 <_test_assert>
 8002b96:	bb90      	cbnz	r0, 8002bfe <pools1_execute.lto_priv.158+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8002b98:	3d01      	subs	r5, #1
 8002b9a:	d1f3      	bne.n	8002b84 <pools1_execute.lto_priv.158+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8002b9c:	4821      	ldr	r0, [pc, #132]	; (8002c24 <pools1_execute.lto_priv.158+0xc4>)
 8002b9e:	f003 fbd7 	bl	8006350 <chPoolAlloc>
 8002ba2:	fab0 f180 	clz	r1, r0
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	0949      	lsrs	r1, r1, #5
 8002baa:	f003 f9a1 	bl	8005ef0 <_test_assert>
 8002bae:	bb30      	cbnz	r0, 8002bfe <pools1_execute.lto_priv.158+0x9e>
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <pools1_execute.lto_priv.158+0xc8>)
 8002bb2:	2620      	movs	r6, #32
 8002bb4:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8002bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bbc:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002bc0:	6821      	ldr	r1, [r4, #0]
 8002bc2:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8002bc4:	6022      	str	r2, [r4, #0]
 8002bc6:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8002bca:	4283      	cmp	r3, r0
 8002bcc:	d1f4      	bne.n	8002bb8 <pools1_execute.lto_priv.158+0x58>
 8002bce:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8002bd0:	4d14      	ldr	r5, [pc, #80]	; (8002c24 <pools1_execute.lto_priv.158+0xc4>)
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f003 fbbc 	bl	8006350 <chPoolAlloc>
 8002bd8:	1c01      	adds	r1, r0, #0
 8002bda:	bf18      	it	ne
 8002bdc:	2101      	movne	r1, #1
 8002bde:	2003      	movs	r0, #3
 8002be0:	f003 f986 	bl	8005ef0 <_test_assert>
 8002be4:	b958      	cbnz	r0, 8002bfe <pools1_execute.lto_priv.158+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8002be6:	3c01      	subs	r4, #1
 8002be8:	d1f2      	bne.n	8002bd0 <pools1_execute.lto_priv.158+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8002bea:	4628      	mov	r0, r5
 8002bec:	f003 fbb0 	bl	8006350 <chPoolAlloc>
 8002bf0:	fab0 f180 	clz	r1, r0
 8002bf4:	2004      	movs	r0, #4
 8002bf6:	0949      	lsrs	r1, r1, #5
 8002bf8:	f003 f97a 	bl	8005ef0 <_test_assert>
 8002bfc:	b100      	cbz	r0, 8002c00 <pools1_execute.lto_priv.158+0xa0>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <pools1_execute.lto_priv.158+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8002c02:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8002c04:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8002c06:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8002c08:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8002c0a:	606b      	str	r3, [r5, #4]
 8002c0c:	f003 fba0 	bl	8006350 <chPoolAlloc>
}
 8002c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8002c14:	fab0 f180 	clz	r1, r0
 8002c18:	2005      	movs	r0, #5
 8002c1a:	0949      	lsrs	r1, r1, #5
 8002c1c:	f003 b968 	b.w	8005ef0 <_test_assert>
 8002c20:	20001768 	.word	0x20001768
 8002c24:	20000c28 	.word	0x20000c28
 8002c28:	080099f0 	.word	0x080099f0
 8002c2c:	08002b01 	.word	0x08002b01

08002c30 <dyn2_execute.lto_priv.162>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <dyn2_execute.lto_priv.162+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8002c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002c34:	6992      	ldr	r2, [r2, #24]
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <dyn2_execute.lto_priv.162+0xc4>)
 8002c38:	492f      	ldr	r1, [pc, #188]	; (8002cf8 <dyn2_execute.lto_priv.162+0xc8>)
 8002c3a:	6895      	ldr	r5, [r2, #8]
 8002c3c:	f103 0710 	add.w	r7, r3, #16
 8002c40:	2620      	movs	r6, #32
 8002c42:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8002c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c48:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002c4c:	6808      	ldr	r0, [r1, #0]
 8002c4e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8002c50:	600a      	str	r2, [r1, #0]
 8002c52:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8002c56:	42bb      	cmp	r3, r7
 8002c58:	d1f4      	bne.n	8002c44 <dyn2_execute.lto_priv.162+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8002c5a:	4928      	ldr	r1, [pc, #160]	; (8002cfc <dyn2_execute.lto_priv.162+0xcc>)
 8002c5c:	1e68      	subs	r0, r5, #1
 8002c5e:	f005 fff7 	bl	8008c50 <chThdCreateFromMemoryPool.constprop.64>
 8002c62:	4c27      	ldr	r4, [pc, #156]	; (8002d00 <dyn2_execute.lto_priv.162+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8002c64:	4927      	ldr	r1, [pc, #156]	; (8002d04 <dyn2_execute.lto_priv.162+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8002c66:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8002c68:	1ea8      	subs	r0, r5, #2
 8002c6a:	f005 fff1 	bl	8008c50 <chThdCreateFromMemoryPool.constprop.64>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8002c6e:	4926      	ldr	r1, [pc, #152]	; (8002d08 <dyn2_execute.lto_priv.162+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8002c70:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8002c72:	1ee8      	subs	r0, r5, #3
 8002c74:	f005 ffec 	bl	8008c50 <chThdCreateFromMemoryPool.constprop.64>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8002c78:	4924      	ldr	r1, [pc, #144]	; (8002d0c <dyn2_execute.lto_priv.162+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8002c7a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8002c7c:	1f28      	subs	r0, r5, #4
 8002c7e:	f005 ffe7 	bl	8008c50 <chThdCreateFromMemoryPool.constprop.64>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8002c82:	4923      	ldr	r1, [pc, #140]	; (8002d10 <dyn2_execute.lto_priv.162+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8002c84:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8002c86:	1f68      	subs	r0, r5, #5
 8002c88:	f005 ffe2 	bl	8008c50 <chThdCreateFromMemoryPool.constprop.64>

  test_assert(1, (threads[0] != NULL) &&
 8002c8c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8002c8e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8002c90:	b141      	cbz	r1, 8002ca4 <dyn2_execute.lto_priv.162+0x74>
 8002c92:	6861      	ldr	r1, [r4, #4]
 8002c94:	b131      	cbz	r1, 8002ca4 <dyn2_execute.lto_priv.162+0x74>
 8002c96:	68a1      	ldr	r1, [r4, #8]
 8002c98:	b121      	cbz	r1, 8002ca4 <dyn2_execute.lto_priv.162+0x74>
 8002c9a:	68e1      	ldr	r1, [r4, #12]
 8002c9c:	b111      	cbz	r1, 8002ca4 <dyn2_execute.lto_priv.162+0x74>
 8002c9e:	fab0 f180 	clz	r1, r0
 8002ca2:	0949      	lsrs	r1, r1, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f003 f923 	bl	8005ef0 <_test_assert>
 8002caa:	b100      	cbz	r0, 8002cae <dyn2_execute.lto_priv.162+0x7e>
 8002cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8002cae:	f002 ff97 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	4917      	ldr	r1, [pc, #92]	; (8002d14 <dyn2_execute.lto_priv.162+0xe4>)
 8002cb6:	f002 ffe3 	bl	8005c80 <_test_assert_sequence>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d1f6      	bne.n	8002cac <dyn2_execute.lto_priv.162+0x7c>
 8002cbe:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <dyn2_execute.lto_priv.162+0xc8>)
 8002cc2:	f003 fb45 	bl	8006350 <chPoolAlloc>
 8002cc6:	1c01      	adds	r1, r0, #0
 8002cc8:	bf18      	it	ne
 8002cca:	2101      	movne	r1, #1
 8002ccc:	2003      	movs	r0, #3
 8002cce:	f003 f90f 	bl	8005ef0 <_test_assert>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d1ea      	bne.n	8002cac <dyn2_execute.lto_priv.162+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8002cd6:	3c01      	subs	r4, #1
 8002cd8:	d1f2      	bne.n	8002cc0 <dyn2_execute.lto_priv.162+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8002cda:	4807      	ldr	r0, [pc, #28]	; (8002cf8 <dyn2_execute.lto_priv.162+0xc8>)
 8002cdc:	f003 fb38 	bl	8006350 <chPoolAlloc>
}
 8002ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8002ce4:	fab0 f180 	clz	r1, r0
 8002ce8:	2004      	movs	r0, #4
 8002cea:	0949      	lsrs	r1, r1, #5
 8002cec:	f003 b900 	b.w	8005ef0 <_test_assert>
 8002cf0:	20001de0 	.word	0x20001de0
 8002cf4:	080099f0 	.word	0x080099f0
 8002cf8:	20001f7c 	.word	0x20001f7c
 8002cfc:	080099d0 	.word	0x080099d0
 8002d00:	20001480 	.word	0x20001480
 8002d04:	080099d4 	.word	0x080099d4
 8002d08:	080099d8 	.word	0x080099d8
 8002d0c:	0800979c 	.word	0x0800979c
 8002d10:	08009a54 	.word	0x08009a54
 8002d14:	080099dc 	.word	0x080099dc
 8002d18:	f3af 8000 	nop.w
 8002d1c:	f3af 8000 	nop.w

08002d20 <thread.lto_priv.78>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 8002d20:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8002d22:	7800      	ldrb	r0, [r0, #0]
 8002d24:	f003 f8fc 	bl	8005f20 <test_emit_token>
  return 0;
}
 8002d28:	2000      	movs	r0, #0
 8002d2a:	bd08      	pop	{r3, pc}
 8002d2c:	f3af 8000 	nop.w

08002d30 <dyn1_execute.lto_priv.160>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8002d30:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <dyn1_execute.lto_priv.160+0xd4>)
 8002d34:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002d36:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8002d38:	a903      	add	r1, sp, #12
 8002d3a:	4833      	ldr	r0, [pc, #204]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002d3c:	689d      	ldr	r5, [r3, #8]
 8002d3e:	f003 fb1f 	bl	8006380 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <dyn1_execute.lto_priv.160+0xdc>)
 8002d44:	1e6a      	subs	r2, r5, #1
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <dyn1_execute.lto_priv.160+0xe0>)
 8002d4e:	482e      	ldr	r0, [pc, #184]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002d50:	f004 f826 	bl	8006da0 <chThdCreateFromHeap>
 8002d54:	4c2f      	ldr	r4, [pc, #188]	; (8002e14 <dyn1_execute.lto_priv.160+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <dyn1_execute.lto_priv.160+0xe8>)
 8002d58:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8002d5a:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <dyn1_execute.lto_priv.160+0xe0>)
 8002d64:	4828      	ldr	r0, [pc, #160]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002d66:	f004 f81b 	bl	8006da0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8002d6a:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002d6c:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8002d6e:	4826      	ldr	r0, [pc, #152]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002d70:	f003 fb06 	bl	8006380 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8002d74:	9902      	ldr	r1, [sp, #8]
 8002d76:	4824      	ldr	r0, [pc, #144]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002d78:	f003 fb72 	bl	8006460 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <dyn1_execute.lto_priv.160+0xec>)
 8002d7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8002d82:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8002d84:	1eea      	subs	r2, r5, #3
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	481f      	ldr	r0, [pc, #124]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002d8a:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <dyn1_execute.lto_priv.160+0xe0>)
 8002d8c:	f004 f808 	bl	8006da0 <chThdCreateFromHeap>
 8002d90:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8002d92:	4630      	mov	r0, r6
 8002d94:	f003 fb1c 	bl	80063d0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8002d98:	6821      	ldr	r1, [r4, #0]
 8002d9a:	b121      	cbz	r1, 8002da6 <dyn1_execute.lto_priv.160+0x76>
 8002d9c:	6861      	ldr	r1, [r4, #4]
 8002d9e:	b111      	cbz	r1, 8002da6 <dyn1_execute.lto_priv.160+0x76>
 8002da0:	68a1      	ldr	r1, [r4, #8]
 8002da2:	b331      	cbz	r1, 8002df2 <dyn1_execute.lto_priv.160+0xc2>
 8002da4:	2100      	movs	r1, #0
 8002da6:	2001      	movs	r0, #1
 8002da8:	f003 f8a2 	bl	8005ef0 <_test_assert>
 8002dac:	b108      	cbz	r0, 8002db2 <dyn1_execute.lto_priv.160+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8002dae:	b004      	add	sp, #16
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8002db2:	f002 ff15 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8002db6:	2002      	movs	r0, #2
 8002db8:	4919      	ldr	r1, [pc, #100]	; (8002e20 <dyn1_execute.lto_priv.160+0xf0>)
 8002dba:	f002 ff61 	bl	8005c80 <_test_assert_sequence>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1f5      	bne.n	8002dae <dyn1_execute.lto_priv.160+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8002dc2:	a902      	add	r1, sp, #8
 8002dc4:	4810      	ldr	r0, [pc, #64]	; (8002e08 <dyn1_execute.lto_priv.160+0xd8>)
 8002dc6:	f003 fadb 	bl	8006380 <chHeapStatus>
 8002dca:	f1a0 0101 	sub.w	r1, r0, #1
 8002dce:	fab1 f181 	clz	r1, r1
 8002dd2:	2003      	movs	r0, #3
 8002dd4:	0949      	lsrs	r1, r1, #5
 8002dd6:	f003 f88b 	bl	8005ef0 <_test_assert>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d1e7      	bne.n	8002dae <dyn1_execute.lto_priv.160+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8002dde:	9902      	ldr	r1, [sp, #8]
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	2004      	movs	r0, #4
 8002de4:	1ac9      	subs	r1, r1, r3
 8002de6:	fab1 f181 	clz	r1, r1
 8002dea:	0949      	lsrs	r1, r1, #5
 8002dec:	f003 f880 	bl	8005ef0 <_test_assert>
 8002df0:	e7dd      	b.n	8002dae <dyn1_execute.lto_priv.160+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1d6      	bne.n	8002da6 <dyn1_execute.lto_priv.160+0x76>
 8002df8:	6921      	ldr	r1, [r4, #16]
 8002dfa:	fab1 f181 	clz	r1, r1
 8002dfe:	0949      	lsrs	r1, r1, #5
 8002e00:	e7d1      	b.n	8002da6 <dyn1_execute.lto_priv.160+0x76>
 8002e02:	bf00      	nop
 8002e04:	20001de0 	.word	0x20001de0
 8002e08:	20001460 	.word	0x20001460
 8002e0c:	080099d0 	.word	0x080099d0
 8002e10:	08002d21 	.word	0x08002d21
 8002e14:	20001480 	.word	0x20001480
 8002e18:	080099d4 	.word	0x080099d4
 8002e1c:	080099d8 	.word	0x080099d8
 8002e20:	080099e4 	.word	0x080099e4
 8002e24:	f3af 8000 	nop.w
 8002e28:	f3af 8000 	nop.w
 8002e2c:	f3af 8000 	nop.w

08002e30 <heap1_execute.lto_priv.156>:

static void heap1_execute(void) {
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8002e34:	a901      	add	r1, sp, #4
 8002e36:	2000      	movs	r0, #0
 8002e38:	f003 faa2 	bl	8006380 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f003 fb0e 	bl	8006460 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8002e44:	1c01      	adds	r1, r0, #0
 8002e46:	4605      	mov	r5, r0
 8002e48:	bf18      	it	ne
 8002e4a:	2101      	movne	r1, #1
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f003 f84f 	bl	8005ef0 <_test_assert>
 8002e52:	4604      	mov	r4, r0
 8002e54:	b108      	cbz	r0, 8002e5a <heap1_execute.lto_priv.156+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8002e56:	b002      	add	sp, #8
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f003 fab8 	bl	80063d0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8002e60:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8002e64:	4620      	mov	r0, r4
 8002e66:	f003 fafb 	bl	8006460 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 8002e6a:	fab0 f180 	clz	r1, r0
 8002e6e:	2002      	movs	r0, #2
 8002e70:	0949      	lsrs	r1, r1, #5
 8002e72:	f003 f83d 	bl	8005ef0 <_test_assert>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d1ed      	bne.n	8002e56 <heap1_execute.lto_priv.156+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 8002e7a:	a901      	add	r1, sp, #4
 8002e7c:	487b      	ldr	r0, [pc, #492]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002e7e:	f003 fa7f 	bl	8006380 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002e82:	2110      	movs	r1, #16
 8002e84:	4879      	ldr	r0, [pc, #484]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002e86:	f003 faeb 	bl	8006460 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002e8a:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002e8c:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002e8e:	4877      	ldr	r0, [pc, #476]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002e90:	f003 fae6 	bl	8006460 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002e94:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002e96:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002e98:	4874      	ldr	r0, [pc, #464]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002e9a:	f003 fae1 	bl	8006460 <chHeapAlloc>
 8002e9e:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f003 fa95 	bl	80063d0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f003 fa92 	bl	80063d0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 8002eac:	4620      	mov	r0, r4
 8002eae:	f003 fa8f 	bl	80063d0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002eb2:	4669      	mov	r1, sp
 8002eb4:	486d      	ldr	r0, [pc, #436]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002eb6:	f003 fa63 	bl	8006380 <chHeapStatus>
 8002eba:	f1a0 0101 	sub.w	r1, r0, #1
 8002ebe:	fab1 f181 	clz	r1, r1
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	0949      	lsrs	r1, r1, #5
 8002ec6:	f003 f813 	bl	8005ef0 <_test_assert>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d1c3      	bne.n	8002e56 <heap1_execute.lto_priv.156+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002ece:	2110      	movs	r1, #16
 8002ed0:	4866      	ldr	r0, [pc, #408]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002ed2:	f003 fac5 	bl	8006460 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002ed6:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002ed8:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002eda:	4864      	ldr	r0, [pc, #400]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002edc:	f003 fac0 	bl	8006460 <chHeapAlloc>
 8002ee0:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	4861      	ldr	r0, [pc, #388]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002ee6:	f003 fabb 	bl	8006460 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8002eea:	f003 fa71 	bl	80063d0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f003 fa6e 	bl	80063d0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f003 fa6b 	bl	80063d0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002efa:	4669      	mov	r1, sp
 8002efc:	485b      	ldr	r0, [pc, #364]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002efe:	f003 fa3f 	bl	8006380 <chHeapStatus>
 8002f02:	f1a0 0101 	sub.w	r1, r0, #1
 8002f06:	fab1 f181 	clz	r1, r1
 8002f0a:	2004      	movs	r0, #4
 8002f0c:	0949      	lsrs	r1, r1, #5
 8002f0e:	f002 ffef 	bl	8005ef0 <_test_assert>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d19f      	bne.n	8002e56 <heap1_execute.lto_priv.156+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8002f16:	2111      	movs	r1, #17
 8002f18:	4854      	ldr	r0, [pc, #336]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f1a:	f003 faa1 	bl	8006460 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002f1e:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8002f20:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002f22:	4852      	ldr	r0, [pc, #328]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f24:	f003 fa9c 	bl	8006460 <chHeapAlloc>
 8002f28:	4605      	mov	r5, r0
  chHeapFree(p1);
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f003 fa50 	bl	80063d0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8002f30:	4669      	mov	r1, sp
 8002f32:	484e      	ldr	r0, [pc, #312]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f34:	f003 fa24 	bl	8006380 <chHeapStatus>
 8002f38:	f1a0 0102 	sub.w	r1, r0, #2
 8002f3c:	fab1 f181 	clz	r1, r1
 8002f40:	2005      	movs	r0, #5
 8002f42:	0949      	lsrs	r1, r1, #5
 8002f44:	f002 ffd4 	bl	8005ef0 <_test_assert>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d184      	bne.n	8002e56 <heap1_execute.lto_priv.156+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	4847      	ldr	r0, [pc, #284]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f50:	f003 fa86 	bl	8006460 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8002f54:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002f56:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8002f58:	4844      	ldr	r0, [pc, #272]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f5a:	f003 fa11 	bl	8006380 <chHeapStatus>
 8002f5e:	2801      	cmp	r0, #1
 8002f60:	f000 8081 	beq.w	8003066 <heap1_execute.lto_priv.156+0x236>
 8002f64:	4669      	mov	r1, sp
 8002f66:	4841      	ldr	r0, [pc, #260]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f68:	f003 fa0a 	bl	8006380 <chHeapStatus>
 8002f6c:	f1a0 0102 	sub.w	r1, r0, #2
 8002f70:	fab1 f181 	clz	r1, r1
 8002f74:	0949      	lsrs	r1, r1, #5
 8002f76:	2006      	movs	r0, #6
 8002f78:	f002 ffba 	bl	8005ef0 <_test_assert>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	f47f af6a 	bne.w	8002e56 <heap1_execute.lto_priv.156+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8002f82:	4628      	mov	r0, r5
 8002f84:	f003 fa24 	bl	80063d0 <chHeapFree>
  chHeapFree(p1);
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f003 fa21 	bl	80063d0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002f8e:	4669      	mov	r1, sp
 8002f90:	4836      	ldr	r0, [pc, #216]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002f92:	f003 f9f5 	bl	8006380 <chHeapStatus>
 8002f96:	1e46      	subs	r6, r0, #1
 8002f98:	4271      	negs	r1, r6
 8002f9a:	4171      	adcs	r1, r6
 8002f9c:	2007      	movs	r0, #7
 8002f9e:	f002 ffa7 	bl	8005ef0 <_test_assert>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	f47f af57 	bne.w	8002e56 <heap1_execute.lto_priv.156+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002fa8:	2110      	movs	r1, #16
 8002faa:	4830      	ldr	r0, [pc, #192]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002fac:	f003 fa58 	bl	8006460 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002fb0:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002fb2:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002fb4:	482d      	ldr	r0, [pc, #180]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002fb6:	f003 fa53 	bl	8006460 <chHeapAlloc>
 8002fba:	4604      	mov	r4, r0
  chHeapFree(p1);
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f003 fa07 	bl	80063d0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8002fc2:	4669      	mov	r1, sp
 8002fc4:	4829      	ldr	r0, [pc, #164]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002fc6:	f003 f9db 	bl	8006380 <chHeapStatus>
 8002fca:	1e85      	subs	r5, r0, #2
 8002fcc:	4269      	negs	r1, r5
 8002fce:	4169      	adcs	r1, r5
 8002fd0:	2008      	movs	r0, #8
 8002fd2:	f002 ff8d 	bl	8005ef0 <_test_assert>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f47f af3d 	bne.w	8002e56 <heap1_execute.lto_priv.156+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8002fdc:	2120      	movs	r1, #32
 8002fde:	4823      	ldr	r0, [pc, #140]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002fe0:	f003 fa3e 	bl	8006460 <chHeapAlloc>
  chHeapFree(p1);
 8002fe4:	f003 f9f4 	bl	80063d0 <chHeapFree>
  chHeapFree(p2);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f003 f9f1 	bl	80063d0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002fee:	4669      	mov	r1, sp
 8002ff0:	481e      	ldr	r0, [pc, #120]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8002ff2:	f003 f9c5 	bl	8006380 <chHeapStatus>
 8002ff6:	3801      	subs	r0, #1
 8002ff8:	4241      	negs	r1, r0
 8002ffa:	4141      	adcs	r1, r0
 8002ffc:	2009      	movs	r0, #9
 8002ffe:	f002 ff77 	bl	8005ef0 <_test_assert>
 8003002:	2800      	cmp	r0, #0
 8003004:	f47f af27 	bne.w	8002e56 <heap1_execute.lto_priv.156+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8003008:	4669      	mov	r1, sp
 800300a:	4818      	ldr	r0, [pc, #96]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 800300c:	f003 f9b8 	bl	8006380 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8003010:	9900      	ldr	r1, [sp, #0]
 8003012:	4816      	ldr	r0, [pc, #88]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 8003014:	f003 fa24 	bl	8006460 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8003018:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 800301a:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 800301c:	4813      	ldr	r0, [pc, #76]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 800301e:	f003 f9af 	bl	8006380 <chHeapStatus>
 8003022:	fab0 f180 	clz	r1, r0
 8003026:	200a      	movs	r0, #10
 8003028:	0949      	lsrs	r1, r1, #5
 800302a:	f002 ff61 	bl	8005ef0 <_test_assert>
 800302e:	2800      	cmp	r0, #0
 8003030:	f47f af11 	bne.w	8002e56 <heap1_execute.lto_priv.156+0x26>
  chHeapFree(p1);
 8003034:	4620      	mov	r0, r4
 8003036:	f003 f9cb 	bl	80063d0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800303a:	4669      	mov	r1, sp
 800303c:	480b      	ldr	r0, [pc, #44]	; (800306c <heap1_execute.lto_priv.156+0x23c>)
 800303e:	f003 f99f 	bl	8006380 <chHeapStatus>
 8003042:	1e42      	subs	r2, r0, #1
 8003044:	4251      	negs	r1, r2
 8003046:	4151      	adcs	r1, r2
 8003048:	200b      	movs	r0, #11
 800304a:	f002 ff51 	bl	8005ef0 <_test_assert>
 800304e:	2800      	cmp	r0, #0
 8003050:	f47f af01 	bne.w	8002e56 <heap1_execute.lto_priv.156+0x26>
  test_assert(12, n == sz, "size changed");
 8003054:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8003058:	1acb      	subs	r3, r1, r3
 800305a:	4259      	negs	r1, r3
 800305c:	4159      	adcs	r1, r3
 800305e:	200c      	movs	r0, #12
 8003060:	f002 ff46 	bl	8005ef0 <_test_assert>
 8003064:	e6f7      	b.n	8002e56 <heap1_execute.lto_priv.156+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8003066:	4601      	mov	r1, r0
 8003068:	e785      	b.n	8002f76 <heap1_execute.lto_priv.156+0x146>
 800306a:	bf00      	nop
 800306c:	20001440 	.word	0x20001440

08003070 <evt3_execute.lto_priv.154>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8003070:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003072:	4c55      	ldr	r4, [pc, #340]	; (80031c8 <evt3_execute.lto_priv.154+0x158>)
 8003074:	2320      	movs	r3, #32
 8003076:	69a2      	ldr	r2, [r4, #24]
 8003078:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 800307c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800307e:	b93b      	cbnz	r3, 8003090 <evt3_execute.lto_priv.154+0x20>
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8003086:	2001      	movs	r0, #1
 8003088:	f002 ff32 	bl	8005ef0 <_test_assert>
 800308c:	b180      	cbz	r0, 80030b0 <evt3_execute.lto_priv.154+0x40>
 800308e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 8003090:	4259      	negs	r1, r3
 8003092:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8003094:	ea23 0301 	bic.w	r3, r3, r1
 8003098:	6353      	str	r3, [r2, #52]	; 0x34
 800309a:	2300      	movs	r3, #0
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	fab1 f181 	clz	r1, r1
 80030a4:	2001      	movs	r0, #1
 80030a6:	0949      	lsrs	r1, r1, #5
 80030a8:	f002 ff22 	bl	8005ef0 <_test_assert>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d1ee      	bne.n	800308e <evt3_execute.lto_priv.154+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80030b0:	69a3      	ldr	r3, [r4, #24]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80030b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d06f      	beq.n	800319e <evt3_execute.lto_priv.154+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 80030be:	6358      	str	r0, [r3, #52]	; 0x34
 80030c0:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 80030c4:	4601      	mov	r1, r0
 80030c6:	2002      	movs	r0, #2
 80030c8:	f002 ff12 	bl	8005ef0 <_test_assert>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d1de      	bne.n	800308e <evt3_execute.lto_priv.154+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80030d0:	69a3      	ldr	r3, [r4, #24]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 80030d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030da:	3201      	adds	r2, #1
 80030dc:	d063      	beq.n	80031a6 <evt3_execute.lto_priv.154+0x136>
 80030de:	f380 8811 	msr	BASEPRI, r0
 80030e2:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 80030e4:	4601      	mov	r1, r0
 80030e6:	2003      	movs	r0, #3
 80030e8:	f002 ff02 	bl	8005ef0 <_test_assert>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d1ce      	bne.n	800308e <evt3_execute.lto_priv.154+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80030f0:	69a6      	ldr	r6, [r4, #24]
 80030f2:	2320      	movs	r3, #32
 80030f4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80030f8:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80030fa:	b94d      	cbnz	r5, 8003110 <evt3_execute.lto_priv.154+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8003100:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8003102:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8003104:	4601      	mov	r1, r0
 8003106:	f003 ff33 	bl	8006f70 <chSchGoSleepTimeoutS>
 800310a:	2800      	cmp	r0, #0
 800310c:	db4f      	blt.n	80031ae <evt3_execute.lto_priv.154+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800310e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8003110:	4269      	negs	r1, r5
 8003112:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8003114:	ea25 0501 	bic.w	r5, r5, r1
 8003118:	6375      	str	r5, [r6, #52]	; 0x34
 800311a:	2300      	movs	r3, #0
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	fab1 f181 	clz	r1, r1
 8003124:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8003126:	2004      	movs	r0, #4
 8003128:	f002 fee2 	bl	8005ef0 <_test_assert>
 800312c:	2800      	cmp	r0, #0
 800312e:	d1ae      	bne.n	800308e <evt3_execute.lto_priv.154+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8003130:	69a6      	ldr	r6, [r4, #24]
 8003132:	2320      	movs	r3, #32
 8003134:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8003138:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800313a:	b94d      	cbnz	r5, 8003150 <evt3_execute.lto_priv.154+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8003140:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8003142:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8003144:	4601      	mov	r1, r0
 8003146:	f003 ff13 	bl	8006f70 <chSchGoSleepTimeoutS>
 800314a:	2800      	cmp	r0, #0
 800314c:	db33      	blt.n	80031b6 <evt3_execute.lto_priv.154+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800314e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8003150:	2300      	movs	r3, #0
 8003152:	6373      	str	r3, [r6, #52]	; 0x34
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	fab5 f185 	clz	r1, r5
 800315c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 800315e:	2005      	movs	r0, #5
 8003160:	f002 fec6 	bl	8005ef0 <_test_assert>
 8003164:	4605      	mov	r5, r0
 8003166:	2800      	cmp	r0, #0
 8003168:	d191      	bne.n	800308e <evt3_execute.lto_priv.154+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800316a:	69a4      	ldr	r4, [r4, #24]
 800316c:	2320      	movs	r3, #32
 800316e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8003172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003174:	3301      	adds	r3, #1
 8003176:	d008      	beq.n	800318a <evt3_execute.lto_priv.154+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 800317e:	200b      	movs	r0, #11
 8003180:	210a      	movs	r1, #10
 8003182:	f003 fef5 	bl	8006f70 <chSchGoSleepTimeoutS>
 8003186:	2800      	cmp	r0, #0
 8003188:	db19      	blt.n	80031be <evt3_execute.lto_priv.154+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800318a:	2300      	movs	r3, #0
 800318c:	6363      	str	r3, [r4, #52]	; 0x34
 800318e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8003192:	4629      	mov	r1, r5
}
 8003194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8003198:	2006      	movs	r0, #6
 800319a:	f002 bea9 	b.w	8005ef0 <_test_assert>
 800319e:	f380 8811 	msr	BASEPRI, r0
 80031a2:	2001      	movs	r0, #1
 80031a4:	e78e      	b.n	80030c4 <evt3_execute.lto_priv.154+0x54>
 80031a6:	6358      	str	r0, [r3, #52]	; 0x34
 80031a8:	f380 8811 	msr	BASEPRI, r0
 80031ac:	e79a      	b.n	80030e4 <evt3_execute.lto_priv.154+0x74>
 80031ae:	f385 8811 	msr	BASEPRI, r5
 80031b2:	2101      	movs	r1, #1
 80031b4:	e7b7      	b.n	8003126 <evt3_execute.lto_priv.154+0xb6>
 80031b6:	f385 8811 	msr	BASEPRI, r5
 80031ba:	2101      	movs	r1, #1
 80031bc:	e7cf      	b.n	800315e <evt3_execute.lto_priv.154+0xee>
 80031be:	f385 8811 	msr	BASEPRI, r5
 80031c2:	2501      	movs	r5, #1
 80031c4:	e7e5      	b.n	8003192 <evt3_execute.lto_priv.154+0x122>
 80031c6:	bf00      	nop
 80031c8:	20001de0 	.word	0x20001de0
 80031cc:	f3af 8000 	nop.w

080031d0 <evt3_setup.lto_priv.153>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80031d0:	f005 bdf6 	b.w	8008dc0 <chEvtGetAndClearEvents.constprop.48>
 80031d4:	f3af 8000 	nop.w
 80031d8:	f3af 8000 	nop.w
 80031dc:	f3af 8000 	nop.w

080031e0 <evt2_setup.lto_priv.151>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80031e0:	f005 bdee 	b.w	8008dc0 <chEvtGetAndClearEvents.constprop.48>
 80031e4:	f3af 8000 	nop.w
 80031e8:	f3af 8000 	nop.w
 80031ec:	f3af 8000 	nop.w

080031f0 <evt2_execute.lto_priv.152>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	2520      	movs	r5, #32
 80031f6:	b08d      	sub	sp, #52	; 0x34
 80031f8:	f385 8811 	msr	BASEPRI, r5
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();

  events = (currp->p_epending |= events);
 80031fc:	4cad      	ldr	r4, [pc, #692]	; (80034b4 <evt2_execute.lto_priv.152+0x2c4>)
 80031fe:	2100      	movs	r1, #0
 8003200:	69a2      	ldr	r2, [r4, #24]
 8003202:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003204:	f043 0307 	orr.w	r3, r3, #7
 8003208:	6353      	str	r3, [r2, #52]	; 0x34
 800320a:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 800320e:	f005 fde7 	bl	8008de0 <chEvtWaitOne.constprop.44>
  test_assert(1, m == 1, "single event error");
 8003212:	f1a0 0101 	sub.w	r1, r0, #1
 8003216:	fab1 f181 	clz	r1, r1
 800321a:	2001      	movs	r0, #1
 800321c:	0949      	lsrs	r1, r1, #5
 800321e:	f002 fe67 	bl	8005ef0 <_test_assert>
 8003222:	b110      	cbz	r0, 800322a <evt2_execute.lto_priv.152+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8003224:	b00d      	add	sp, #52	; 0x34
 8003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800322a:	f005 fdd9 	bl	8008de0 <chEvtWaitOne.constprop.44>
  test_assert(2, m == 2, "single event error");
 800322e:	f1a0 0102 	sub.w	r1, r0, #2
 8003232:	fab1 f181 	clz	r1, r1
 8003236:	2002      	movs	r0, #2
 8003238:	0949      	lsrs	r1, r1, #5
 800323a:	f002 fe59 	bl	8005ef0 <_test_assert>
 800323e:	2800      	cmp	r0, #0
 8003240:	d1f0      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8003242:	f005 fdcd 	bl	8008de0 <chEvtWaitOne.constprop.44>
  test_assert(3, m == 4, "single event error");
 8003246:	f1a0 0104 	sub.w	r1, r0, #4
 800324a:	fab1 f181 	clz	r1, r1
 800324e:	2003      	movs	r0, #3
 8003250:	0949      	lsrs	r1, r1, #5
 8003252:	f002 fe4d 	bl	8005ef0 <_test_assert>
 8003256:	2800      	cmp	r0, #0
 8003258:	d1e4      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800325a:	f005 fdb1 	bl	8008dc0 <chEvtGetAndClearEvents.constprop.48>
  test_assert(4, m == 0, "stuck event");
 800325e:	fab0 f180 	clz	r1, r0
 8003262:	2004      	movs	r0, #4
 8003264:	0949      	lsrs	r1, r1, #5
 8003266:	f002 fe43 	bl	8005ef0 <_test_assert>
 800326a:	4606      	mov	r6, r0
 800326c:	2800      	cmp	r0, #0
 800326e:	d1d9      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8003270:	f002 fca6 	bl	8005bc0 <test_wait_tick>
 8003274:	f385 8811 	msr	BASEPRI, r5
 8003278:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800327c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8003280:	b2bf      	uxth	r7, r7
 8003282:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003286:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003288:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	488a      	ldr	r0, [pc, #552]	; (80034b8 <evt2_execute.lto_priv.152+0x2c8>)
 8003290:	3a01      	subs	r2, #1
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	4b89      	ldr	r3, [pc, #548]	; (80034bc <evt2_execute.lto_priv.152+0x2cc>)
 8003296:	f003 fdcb 	bl	8006e30 <chThdCreateStatic>
 800329a:	4e89      	ldr	r6, [pc, #548]	; (80034c0 <evt2_execute.lto_priv.152+0x2d0>)
 800329c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800329e:	f005 fd9f 	bl	8008de0 <chEvtWaitOne.constprop.44>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80032a2:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 80032a6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 80032aa:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 80032ac:	b289      	uxth	r1, r1
 80032ae:	b292      	uxth	r2, r2
 80032b0:	2005      	movs	r0, #5
 80032b2:	f002 fcc5 	bl	8005c40 <_test_assert_time_window>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d1b4      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>
  test_assert(6, m == 1, "single event error");
 80032ba:	f1a9 0101 	sub.w	r1, r9, #1
 80032be:	fab1 f181 	clz	r1, r1
 80032c2:	2006      	movs	r0, #6
 80032c4:	0949      	lsrs	r1, r1, #5
 80032c6:	f002 fe13 	bl	8005ef0 <_test_assert>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d1aa      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80032ce:	f005 fd77 	bl	8008dc0 <chEvtGetAndClearEvents.constprop.48>
  test_assert(7, m == 0, "stuck event");
 80032d2:	fab0 f180 	clz	r1, r0
 80032d6:	2007      	movs	r0, #7
 80032d8:	0949      	lsrs	r1, r1, #5
 80032da:	f002 fe09 	bl	8005ef0 <_test_assert>
 80032de:	4607      	mov	r7, r0
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d19f      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>
  test_wait_threads();
 80032e4:	f002 fc7c 	bl	8005be0 <test_wait_threads>
 80032e8:	f385 8811 	msr	BASEPRI, r5
 80032ec:	69a2      	ldr	r2, [r4, #24]
 80032ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80032f0:	f043 0305 	orr.w	r3, r3, #5
 80032f4:	6353      	str	r3, [r2, #52]	; 0x34
 80032f6:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 80032fa:	f005 fd91 	bl	8008e20 <chEvtWaitAny.constprop.43>
  test_assert(8, m == 5, "unexpected pending bit");
 80032fe:	1f47      	subs	r7, r0, #5
 8003300:	4279      	negs	r1, r7
 8003302:	4179      	adcs	r1, r7
 8003304:	2008      	movs	r0, #8
 8003306:	f002 fdf3 	bl	8005ef0 <_test_assert>
 800330a:	2800      	cmp	r0, #0
 800330c:	d18a      	bne.n	8003224 <evt2_execute.lto_priv.152+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800330e:	f005 fd57 	bl	8008dc0 <chEvtGetAndClearEvents.constprop.48>
  test_assert(9, m == 0, "stuck event");
 8003312:	fab0 f180 	clz	r1, r0
 8003316:	2009      	movs	r0, #9
 8003318:	0949      	lsrs	r1, r1, #5
 800331a:	f002 fde9 	bl	8005ef0 <_test_assert>
 800331e:	4607      	mov	r7, r0
 8003320:	2800      	cmp	r0, #0
 8003322:	f47f af7f 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8003326:	f002 fc4b 	bl	8005bc0 <test_wait_tick>
 800332a:	f385 8811 	msr	BASEPRI, r5
 800332e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8003332:	b2ad      	uxth	r5, r5
 8003334:	f387 8811 	msr	BASEPRI, r7
 8003338:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800333a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	485d      	ldr	r0, [pc, #372]	; (80034b8 <evt2_execute.lto_priv.152+0x2c8>)
 8003342:	3a01      	subs	r2, #1
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <evt2_execute.lto_priv.152+0x2cc>)
 8003348:	f003 fd72 	bl	8006e30 <chThdCreateStatic>
 800334c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800334e:	f005 fd67 	bl	8008e20 <chEvtWaitAny.constprop.43>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8003352:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8003356:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800335a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800335c:	b289      	uxth	r1, r1
 800335e:	b292      	uxth	r2, r2
 8003360:	200a      	movs	r0, #10
 8003362:	f002 fc6d 	bl	8005c40 <_test_assert_time_window>
 8003366:	2800      	cmp	r0, #0
 8003368:	f47f af5c 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>
  test_assert(11, m == 1, "single event error");
 800336c:	1e78      	subs	r0, r7, #1
 800336e:	4241      	negs	r1, r0
 8003370:	4141      	adcs	r1, r0
 8003372:	200b      	movs	r0, #11
 8003374:	f002 fdbc 	bl	8005ef0 <_test_assert>
 8003378:	2800      	cmp	r0, #0
 800337a:	f47f af53 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800337e:	f005 fd1f 	bl	8008dc0 <chEvtGetAndClearEvents.constprop.48>
  test_assert(12, m == 0, "stuck event");
 8003382:	fab0 f180 	clz	r1, r0
 8003386:	200c      	movs	r0, #12
 8003388:	0949      	lsrs	r1, r1, #5
 800338a:	f002 fdb1 	bl	8005ef0 <_test_assert>
 800338e:	4680      	mov	r8, r0
 8003390:	2800      	cmp	r0, #0
 8003392:	f47f af47 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>
  test_wait_threads();
 8003396:	f002 fc23 	bl	8005be0 <test_wait_threads>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 800339a:	4d4a      	ldr	r5, [pc, #296]	; (80034c4 <evt2_execute.lto_priv.152+0x2d4>)
 800339c:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <evt2_execute.lto_priv.152+0x2d8>)
 800339e:	602d      	str	r5, [r5, #0]
 80033a0:	601b      	str	r3, [r3, #0]
 80033a2:	f04f 0b20 	mov.w	fp, #32
 80033a6:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80033aa:	6829      	ldr	r1, [r5, #0]
 80033ac:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80033b0:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 80033b2:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80033b4:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 80033bc:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80033c0:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 80033c2:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80033c4:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80033c8:	9006      	str	r0, [sp, #24]
 80033ca:	f388 8811 	msr	BASEPRI, r8
 80033ce:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80033d8:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 80033da:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80033dc:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 80033e0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 80033e4:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80033e6:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 80033e8:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80033ea:	f8c3 9000 	str.w	r9, [r3]
 80033ee:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 80033f2:	f002 fbe5 	bl	8005bc0 <test_wait_tick>
 80033f6:	f38b 8811 	msr	BASEPRI, fp
 80033fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033fe:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8003400:	b2bf      	uxth	r7, r7
 8003402:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003406:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003408:	4b30      	ldr	r3, [pc, #192]	; (80034cc <evt2_execute.lto_priv.152+0x2dc>)
 800340a:	6892      	ldr	r2, [r2, #8]
 800340c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	3a01      	subs	r2, #1
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <evt2_execute.lto_priv.152+0x2e0>)
 8003416:	4828      	ldr	r0, [pc, #160]	; (80034b8 <evt2_execute.lto_priv.152+0x2c8>)
 8003418:	f003 fd0a 	bl	8006e30 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 800341c:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8003420:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8003424:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003426:	6030      	str	r0, [r6, #0]
 8003428:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 800342c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800342e:	f003 0205 	and.w	r2, r3, #5
 8003432:	2a05      	cmp	r2, #5
 8003434:	d005      	beq.n	8003442 <evt2_execute.lto_priv.152+0x252>
    ctp->p_u.ewmask = events;
 8003436:	2305      	movs	r3, #5
 8003438:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800343a:	200b      	movs	r0, #11
 800343c:	f003 fd38 	bl	8006eb0 <chSchGoSleepS>
 8003440:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8003442:	f023 0305 	bic.w	r3, r3, #5
 8003446:	6363      	str	r3, [r4, #52]	; 0x34
 8003448:	2300      	movs	r3, #0
 800344a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 800344e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8003452:	b292      	uxth	r2, r2
 8003454:	4641      	mov	r1, r8
 8003456:	200d      	movs	r0, #13
 8003458:	f002 fbf2 	bl	8005c40 <_test_assert_time_window>
 800345c:	2800      	cmp	r0, #0
 800345e:	f47f aee1 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8003462:	f005 fcad 	bl	8008dc0 <chEvtGetAndClearEvents.constprop.48>
  test_assert(14, m == 0, "stuck event");
 8003466:	fab0 f180 	clz	r1, r0
 800346a:	200e      	movs	r0, #14
 800346c:	0949      	lsrs	r1, r1, #5
 800346e:	f002 fd3f 	bl	8005ef0 <_test_assert>
 8003472:	2800      	cmp	r0, #0
 8003474:	f47f aed6 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8003478:	4c13      	ldr	r4, [pc, #76]	; (80034c8 <evt2_execute.lto_priv.152+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 800347a:	f002 fbb1 	bl	8005be0 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 800347e:	4651      	mov	r1, sl
 8003480:	4810      	ldr	r0, [pc, #64]	; (80034c4 <evt2_execute.lto_priv.152+0x2d4>)
 8003482:	f003 fadd 	bl	8006a40 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8003486:	4649      	mov	r1, r9
 8003488:	4620      	mov	r0, r4
 800348a:	f003 fad9 	bl	8006a40 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800348e:	6829      	ldr	r1, [r5, #0]
 8003490:	200f      	movs	r0, #15
 8003492:	1b4a      	subs	r2, r1, r5
 8003494:	4251      	negs	r1, r2
 8003496:	4151      	adcs	r1, r2
 8003498:	f002 fd2a 	bl	8005ef0 <_test_assert>
 800349c:	2800      	cmp	r0, #0
 800349e:	f47f aec1 	bne.w	8003224 <evt2_execute.lto_priv.152+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 80034a2:	6821      	ldr	r1, [r4, #0]
 80034a4:	2010      	movs	r0, #16
 80034a6:	1b0b      	subs	r3, r1, r4
 80034a8:	4259      	negs	r1, r3
 80034aa:	4159      	adcs	r1, r3
 80034ac:	f002 fd20 	bl	8005ef0 <_test_assert>
 80034b0:	e6b8      	b.n	8003224 <evt2_execute.lto_priv.152+0x34>
 80034b2:	bf00      	nop
 80034b4:	20001de0 	.word	0x20001de0
 80034b8:	20001768 	.word	0x20001768
 80034bc:	08003521 	.word	0x08003521
 80034c0:	20001480 	.word	0x20001480
 80034c4:	20000c24 	.word	0x20000c24
 80034c8:	20000c34 	.word	0x20000c34
 80034cc:	080099d0 	.word	0x080099d0
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	f3af 8000 	nop.w
 80034d8:	f3af 8000 	nop.w
 80034dc:	f3af 8000 	nop.w

080034e0 <thread2>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	2520      	movs	r5, #32
 80034e4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80034e8:	480b      	ldr	r0, [pc, #44]	; (8003518 <thread2+0x38>)
 80034ea:	2100      	movs	r1, #0
 80034ec:	f003 fa90 	bl	8006a10 <chEvtBroadcastFlagsI>
 80034f0:	2400      	movs	r4, #0
  chSchRescheduleS();
 80034f2:	f003 fbad 	bl	8006c50 <chSchRescheduleS>
 80034f6:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 80034fa:	2064      	movs	r0, #100	; 0x64
 80034fc:	f003 fda8 	bl	8007050 <chThdSleep>
 8003500:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <thread2+0x3c>)
 8003506:	4621      	mov	r1, r4
 8003508:	f003 fa82 	bl	8006a10 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800350c:	f003 fba0 	bl	8006c50 <chSchRescheduleS>
 8003510:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 8003514:	4620      	mov	r0, r4
 8003516:	bd38      	pop	{r3, r4, r5, pc}
 8003518:	20000c24 	.word	0x20000c24
 800351c:	20000c34 	.word	0x20000c34

08003520 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8003520:	b510      	push	{r4, lr}
 8003522:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8003524:	2064      	movs	r0, #100	; 0x64
 8003526:	f003 fd93 	bl	8007050 <chThdSleep>
 800352a:	2320      	movs	r3, #32
 800352c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8003530:	2101      	movs	r1, #1
 8003532:	4620      	mov	r0, r4
 8003534:	f003 f924 	bl	8006780 <chEvtSignalI>
  chSchRescheduleS();
 8003538:	f003 fb8a 	bl	8006c50 <chSchRescheduleS>
 800353c:	2000      	movs	r0, #0
 800353e:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8003542:	bd10      	pop	{r4, pc}
 8003544:	f3af 8000 	nop.w
 8003548:	f3af 8000 	nop.w
 800354c:	f3af 8000 	nop.w

08003550 <bmk7_setup.lto_priv.175>:
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <bmk7_setup.lto_priv.175+0xc>)
 8003552:	2200      	movs	r2, #0
 8003554:	605b      	str	r3, [r3, #4]
 8003556:	601b      	str	r3, [r3, #0]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	4770      	bx	lr
 800355c:	20001414 	.word	0x20001414

08003560 <thread1.lto_priv.106>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	f3af 8000 	nop.w
 8003568:	f3af 8000 	nop.w
 800356c:	f3af 8000 	nop.w

08003570 <notify.lto_priv.82>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	f3af 8000 	nop.w
 8003578:	f3af 8000 	nop.w
 800357c:	f3af 8000 	nop.w

08003580 <queues2_setup.lto_priv.167>:
 * This test case tests sysnchronos and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 8003580:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8003582:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <queues2_setup.lto_priv.167+0x24>)
 8003584:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <queues2_setup.lto_priv.167+0x28>)
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 8003586:	4809      	ldr	r0, [pc, #36]	; (80035ac <queues2_setup.lto_priv.167+0x2c>)
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8003588:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800358a:	2404      	movs	r4, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 800358c:	2100      	movs	r1, #0
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 800358e:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8003590:	609c      	str	r4, [r3, #8]
 8003592:	605b      	str	r3, [r3, #4]
 8003594:	601b      	str	r3, [r3, #0]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	619a      	str	r2, [r3, #24]
 800359a:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 800359c:	61d8      	str	r0, [r3, #28]
  oqp->q_link = link;
 800359e:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80035a0:	bc30      	pop	{r4, r5}
 80035a2:	4770      	bx	lr
 80035a4:	20001768 	.word	0x20001768
 80035a8:	20000cd0 	.word	0x20000cd0
 80035ac:	08003571 	.word	0x08003571

080035b0 <queues1_setup.lto_priv.165>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80035b0:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <queues1_setup.lto_priv.165+0x24>)
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <queues1_setup.lto_priv.165+0x28>)
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80035b4:	4809      	ldr	r0, [pc, #36]	; (80035dc <queues1_setup.lto_priv.165+0x2c>)
 * This test case tests sysnchronos and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 80035b6:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80035b8:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80035ba:	1d14      	adds	r4, r2, #4
 80035bc:	611c      	str	r4, [r3, #16]
 80035be:	605b      	str	r3, [r3, #4]
 80035c0:	601b      	str	r3, [r3, #0]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80035c2:	615a      	str	r2, [r3, #20]
 80035c4:	619a      	str	r2, [r3, #24]
 80035c6:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80035c8:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80035ca:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 80035cc:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80035ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	20001768 	.word	0x20001768
 80035d8:	20000c38 	.word	0x20000c38
 80035dc:	08003571 	.word	0x08003571

080035e0 <dyn3_setup.lto_priv.163>:
  heapp->h_free.h.u.next = hp = buf;
 80035e0:	4909      	ldr	r1, [pc, #36]	; (8003608 <dyn3_setup.lto_priv.163+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 80035e2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80035e4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80035e6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <dyn3_setup.lto_priv.163+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80035ec:	e881 0014 	stmia.w	r1, {r2, r4}
 80035f0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 80035f4:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 80035f6:	6099      	str	r1, [r3, #8]
 80035f8:	6158      	str	r0, [r3, #20]
 80035fa:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8003600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20001768 	.word	0x20001768
 800360c:	20001460 	.word	0x20001460

08003610 <bmk8_execute.lto_priv.177>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 8003610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036e8 <bmk8_execute.lto_priv.177+0xd8>
 8003618:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 800361a:	ac04      	add	r4, sp, #16
 800361c:	2300      	movs	r3, #0
 800361e:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8003622:	f002 facd 	bl	8005bc0 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003626:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800362a:	4f2a      	ldr	r7, [pc, #168]	; (80036d4 <bmk8_execute.lto_priv.177+0xc4>)
 800362c:	4e2a      	ldr	r6, [pc, #168]	; (80036d8 <bmk8_execute.lto_priv.177+0xc8>)
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	4638      	mov	r0, r7
 8003632:	4633      	mov	r3, r6
 8003634:	3a01      	subs	r2, #1
 8003636:	9400      	str	r4, [sp, #0]
 8003638:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800363c:	f003 fbf8 	bl	8006e30 <chThdCreateStatic>
 8003640:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003644:	4d25      	ldr	r5, [pc, #148]	; (80036dc <bmk8_execute.lto_priv.177+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800364c:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800364e:	4633      	mov	r3, r6
 8003650:	3a01      	subs	r2, #1
 8003652:	9400      	str	r4, [sp, #0]
 8003654:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8003658:	f003 fbea 	bl	8006e30 <chThdCreateStatic>
 800365c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003660:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8003668:	4633      	mov	r3, r6
 800366a:	3a01      	subs	r2, #1
 800366c:	9400      	str	r4, [sp, #0]
 800366e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003672:	f003 fbdd 	bl	8006e30 <chThdCreateStatic>
 8003676:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800367a:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8003682:	4633      	mov	r3, r6
 8003684:	3a01      	subs	r2, #1
 8003686:	9400      	str	r4, [sp, #0]
 8003688:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800368c:	f003 fbd0 	bl	8006e30 <chThdCreateStatic>
 8003690:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003694:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003698:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800369a:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800369c:	3a01      	subs	r2, #1
 800369e:	4633      	mov	r3, r6
 80036a0:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80036a4:	9400      	str	r4, [sp, #0]
 80036a6:	f003 fbc3 	bl	8006e30 <chThdCreateStatic>
 80036aa:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 80036ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036b0:	f003 fcce 	bl	8007050 <chThdSleep>
  test_terminate_threads();
 80036b4:	f002 faac 	bl	8005c10 <test_terminate_threads>
  test_wait_threads();
 80036b8:	f002 fa92 	bl	8005be0 <test_wait_threads>

  test_print("--- Score : ");
 80036bc:	4808      	ldr	r0, [pc, #32]	; (80036e0 <bmk8_execute.lto_priv.177+0xd0>)
 80036be:	f002 fc6f 	bl	8005fa0 <test_print>
  test_printn(n);
 80036c2:	9803      	ldr	r0, [sp, #12]
 80036c4:	f002 fc7c 	bl	8005fc0 <test_printn>
  test_println(" ctxswc/S");
 80036c8:	4806      	ldr	r0, [pc, #24]	; (80036e4 <bmk8_execute.lto_priv.177+0xd4>)
 80036ca:	f002 fc49 	bl	8005f60 <test_println>
}
 80036ce:	b004      	add	sp, #16
 80036d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d4:	20001768 	.word	0x20001768
 80036d8:	080036f1 	.word	0x080036f1
 80036dc:	20001480 	.word	0x20001480
 80036e0:	08009988 	.word	0x08009988
 80036e4:	08009a10 	.word	0x08009a10
 80036e8:	20001de0 	.word	0x20001de0
 80036ec:	f3af 8000 	nop.w

080036f0 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4604      	mov	r4, r0
 80036f4:	4d08      	ldr	r5, [pc, #32]	; (8003718 <thread8+0x28>)

  do {
    chThdYield();
 80036f6:	f003 fa03 	bl	8006b00 <chThdYield>
    chThdYield();
 80036fa:	f003 fa01 	bl	8006b00 <chThdYield>
    chThdYield();
 80036fe:	f003 f9ff 	bl	8006b00 <chThdYield>
    chThdYield();
 8003702:	f003 f9fd 	bl	8006b00 <chThdYield>
    (*(uint32_t *)p) += 4;
 8003706:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8003708:	69aa      	ldr	r2, [r5, #24]
 800370a:	3304      	adds	r3, #4
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8003710:	075b      	lsls	r3, r3, #29
 8003712:	d5f0      	bpl.n	80036f6 <thread8+0x6>
  return 0;
}
 8003714:	2000      	movs	r0, #0
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20001de0 	.word	0x20001de0
 800371c:	f3af 8000 	nop.w

08003720 <bmk6_execute.lto_priv.174>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <bmk6_execute.lto_priv.174+0x4c>)
 8003724:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003726:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8003728:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800372a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800372c:	4627      	mov	r7, r4
 800372e:	4e10      	ldr	r6, [pc, #64]	; (8003770 <bmk6_execute.lto_priv.174+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8003730:	3501      	adds	r5, #1
  test_wait_tick();
 8003732:	f002 fa45 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 8003736:	f005 fc93 	bl	8009060 <test_start_timer.constprop.19>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <bmk6_execute.lto_priv.174+0x54>)
 800373c:	9700      	str	r7, [sp, #0]
 800373e:	480e      	ldr	r0, [pc, #56]	; (8003778 <bmk6_execute.lto_priv.174+0x58>)
 8003740:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003744:	462a      	mov	r2, r5
 8003746:	f003 fb73 	bl	8006e30 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800374a:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800374c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f3      	beq.n	800373a <bmk6_execute.lto_priv.174+0x1a>
  test_print("--- Score : ");
 8003752:	480a      	ldr	r0, [pc, #40]	; (800377c <bmk6_execute.lto_priv.174+0x5c>)
 8003754:	f002 fc24 	bl	8005fa0 <test_print>
  test_printn(n);
 8003758:	4620      	mov	r0, r4
 800375a:	f002 fc31 	bl	8005fc0 <test_printn>
  test_println(" threads/S");
 800375e:	4808      	ldr	r0, [pc, #32]	; (8003780 <bmk6_execute.lto_priv.174+0x60>)
}
 8003760:	b003      	add	sp, #12
 8003762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8003766:	f002 bbfb 	b.w	8005f60 <test_println>
 800376a:	bf00      	nop
 800376c:	20001de0 	.word	0x20001de0
 8003770:	20001760 	.word	0x20001760
 8003774:	08003561 	.word	0x08003561
 8003778:	20001768 	.word	0x20001768
 800377c:	08009988 	.word	0x08009988
 8003780:	08009a1c 	.word	0x08009a1c
 8003784:	f3af 8000 	nop.w
 8003788:	f3af 8000 	nop.w
 800378c:	f3af 8000 	nop.w

08003790 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 8003790:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003792:	4c07      	ldr	r4, [pc, #28]	; (80037b0 <thread3+0x20>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8003794:	69a3      	ldr	r3, [r4, #24]
 8003796:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8003798:	075a      	lsls	r2, r3, #29
 800379a:	d406      	bmi.n	80037aa <thread3+0x1a>
    chSemWait(&sem1);
 800379c:	4805      	ldr	r0, [pc, #20]	; (80037b4 <thread3+0x24>)
 800379e:	f003 fb9f 	bl	8006ee0 <chSemWait>
 80037a2:	69a3      	ldr	r3, [r4, #24]
 80037a4:	7f5b      	ldrb	r3, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 80037a6:	075b      	lsls	r3, r3, #29
 80037a8:	d5f8      	bpl.n	800379c <thread3+0xc>
    chSemWait(&sem1);
  return 0;
}
 80037aa:	2000      	movs	r0, #0
 80037ac:	bd10      	pop	{r4, pc}
 80037ae:	bf00      	nop
 80037b0:	20001de0 	.word	0x20001de0
 80037b4:	20001414 	.word	0x20001414
 80037b8:	f3af 8000 	nop.w
 80037bc:	f3af 8000 	nop.w

080037c0 <bmk7_execute.lto_priv.176>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 80037c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80037c4:	4e3a      	ldr	r6, [pc, #232]	; (80038b0 <bmk7_execute.lto_priv.176+0xf0>)
 80037c6:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80037c8:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80037ca:	2400      	movs	r4, #0
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80037d2:	3205      	adds	r2, #5
 80037d4:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <bmk7_execute.lto_priv.176+0xf4>)
 80037d6:	4838      	ldr	r0, [pc, #224]	; (80038b8 <bmk7_execute.lto_priv.176+0xf8>)
 80037d8:	9400      	str	r4, [sp, #0]
 80037da:	f003 fb29 	bl	8006e30 <chThdCreateStatic>
 80037de:	69b3      	ldr	r3, [r6, #24]
 80037e0:	4d36      	ldr	r5, [pc, #216]	; (80038bc <bmk7_execute.lto_priv.176+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80037e8:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80037ea:	3204      	adds	r2, #4
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <bmk7_execute.lto_priv.176+0xf4>)
 80037ee:	9400      	str	r4, [sp, #0]
 80037f0:	4833      	ldr	r0, [pc, #204]	; (80038c0 <bmk7_execute.lto_priv.176+0x100>)
 80037f2:	f003 fb1d 	bl	8006e30 <chThdCreateStatic>
 80037f6:	69b3      	ldr	r3, [r6, #24]
 80037f8:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003800:	3203      	adds	r2, #3
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <bmk7_execute.lto_priv.176+0xf4>)
 8003804:	482f      	ldr	r0, [pc, #188]	; (80038c4 <bmk7_execute.lto_priv.176+0x104>)
 8003806:	9400      	str	r4, [sp, #0]
 8003808:	f003 fb12 	bl	8006e30 <chThdCreateStatic>
 800380c:	69b3      	ldr	r3, [r6, #24]
 800380e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003816:	3202      	adds	r2, #2
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <bmk7_execute.lto_priv.176+0xf4>)
 800381a:	482b      	ldr	r0, [pc, #172]	; (80038c8 <bmk7_execute.lto_priv.176+0x108>)
 800381c:	9400      	str	r4, [sp, #0]
 800381e:	f003 fb07 	bl	8006e30 <chThdCreateStatic>
 8003822:	69b3      	ldr	r3, [r6, #24]
 8003824:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800382c:	3201      	adds	r2, #1
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <bmk7_execute.lto_priv.176+0xf4>)
 8003830:	4826      	ldr	r0, [pc, #152]	; (80038cc <bmk7_execute.lto_priv.176+0x10c>)
 8003832:	9400      	str	r4, [sp, #0]
 8003834:	f003 fafc 	bl	8006e30 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8003838:	46a1      	mov	r9, r4
 800383a:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 800383c:	f002 f9c0 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 8003840:	f005 fc0e 	bl	8009060 <test_start_timer.constprop.19>
 8003844:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80038e0 <bmk7_execute.lto_priv.176+0x120>
 8003848:	2720      	movs	r7, #32
 800384a:	2620      	movs	r6, #32
 800384c:	f387 8811 	msr	BASEPRI, r7
 8003850:	481f      	ldr	r0, [pc, #124]	; (80038d0 <bmk7_execute.lto_priv.176+0x110>)
 8003852:	2100      	movs	r1, #0
 8003854:	f003 fd0c 	bl	8007270 <chSemResetI>
 8003858:	2500      	movs	r5, #0
  chSchRescheduleS();
 800385a:	f003 f9f9 	bl	8006c50 <chSchRescheduleS>
 800385e:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003862:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8003866:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ee      	beq.n	800384a <bmk7_execute.lto_priv.176+0x8a>
  test_terminate_threads();
 800386c:	f002 f9d0 	bl	8005c10 <test_terminate_threads>
 8003870:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8003874:	4816      	ldr	r0, [pc, #88]	; (80038d0 <bmk7_execute.lto_priv.176+0x110>)
 8003876:	4629      	mov	r1, r5
 8003878:	f003 fcfa 	bl	8007270 <chSemResetI>
  chSchRescheduleS();
 800387c:	f003 f9e8 	bl	8006c50 <chSchRescheduleS>
 8003880:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8003884:	f002 f9ac 	bl	8005be0 <test_wait_threads>

  test_print("--- Score : ");
 8003888:	4812      	ldr	r0, [pc, #72]	; (80038d4 <bmk7_execute.lto_priv.176+0x114>)
 800388a:	f002 fb89 	bl	8005fa0 <test_print>
  test_printn(n);
 800388e:	4620      	mov	r0, r4
 8003890:	f002 fb96 	bl	8005fc0 <test_printn>
  test_print(" reschedules/S, ");
 8003894:	4810      	ldr	r0, [pc, #64]	; (80038d8 <bmk7_execute.lto_priv.176+0x118>)
 8003896:	f002 fb83 	bl	8005fa0 <test_print>
  test_printn(n * 6);
 800389a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800389e:	0040      	lsls	r0, r0, #1
 80038a0:	f002 fb8e 	bl	8005fc0 <test_printn>
  test_println(" ctxswc/S");
 80038a4:	480d      	ldr	r0, [pc, #52]	; (80038dc <bmk7_execute.lto_priv.176+0x11c>)
}
 80038a6:	b003      	add	sp, #12
 80038a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 80038ac:	f002 bb58 	b.w	8005f60 <test_println>
 80038b0:	20001de0 	.word	0x20001de0
 80038b4:	08003791 	.word	0x08003791
 80038b8:	20001768 	.word	0x20001768
 80038bc:	20001480 	.word	0x20001480
 80038c0:	200018b0 	.word	0x200018b0
 80038c4:	200019f8 	.word	0x200019f8
 80038c8:	20001b40 	.word	0x20001b40
 80038cc:	20001c88 	.word	0x20001c88
 80038d0:	20001414 	.word	0x20001414
 80038d4:	08009988 	.word	0x08009988
 80038d8:	08009a28 	.word	0x08009a28
 80038dc:	08009a10 	.word	0x08009a10
 80038e0:	20001760 	.word	0x20001760
 80038e4:	f3af 8000 	nop.w
 80038e8:	f3af 8000 	nop.w
 80038ec:	f3af 8000 	nop.w

080038f0 <bmk5_execute.lto_priv.173>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <bmk5_execute.lto_priv.173+0x50>)
 80038f4:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80038f6:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 80038f8:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80038fa:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 80038fc:	4627      	mov	r7, r4
 80038fe:	4e11      	ldr	r6, [pc, #68]	; (8003944 <bmk5_execute.lto_priv.173+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8003900:	3d01      	subs	r5, #1
  test_wait_tick();
 8003902:	f002 f95d 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 8003906:	f005 fbab 	bl	8009060 <test_start_timer.constprop.19>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <bmk5_execute.lto_priv.173+0x58>)
 800390c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003910:	462a      	mov	r2, r5
 8003912:	9700      	str	r7, [sp, #0]
 8003914:	480d      	ldr	r0, [pc, #52]	; (800394c <bmk5_execute.lto_priv.173+0x5c>)
 8003916:	f003 fa8b 	bl	8006e30 <chThdCreateStatic>
 800391a:	f003 fb09 	bl	8006f30 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800391e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8003920:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f1      	beq.n	800390a <bmk5_execute.lto_priv.173+0x1a>
  test_print("--- Score : ");
 8003926:	480a      	ldr	r0, [pc, #40]	; (8003950 <bmk5_execute.lto_priv.173+0x60>)
 8003928:	f002 fb3a 	bl	8005fa0 <test_print>
  test_printn(n);
 800392c:	4620      	mov	r0, r4
 800392e:	f002 fb47 	bl	8005fc0 <test_printn>
  test_println(" threads/S");
 8003932:	4808      	ldr	r0, [pc, #32]	; (8003954 <bmk5_execute.lto_priv.173+0x64>)
}
 8003934:	b003      	add	sp, #12
 8003936:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 800393a:	f002 bb11 	b.w	8005f60 <test_println>
 800393e:	bf00      	nop
 8003940:	20001de0 	.word	0x20001de0
 8003944:	20001760 	.word	0x20001760
 8003948:	08003561 	.word	0x08003561
 800394c:	20001768 	.word	0x20001768
 8003950:	08009988 	.word	0x08009988
 8003954:	08009a1c 	.word	0x08009a1c
 8003958:	f3af 8000 	nop.w
 800395c:	f3af 8000 	nop.w

08003960 <bmk4_execute.lto_priv.172>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 8003960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003964:	4b25      	ldr	r3, [pc, #148]	; (80039fc <bmk4_execute.lto_priv.172+0x9c>)
 8003966:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003968:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800396a:	2500      	movs	r5, #0
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003972:	3201      	adds	r2, #1
 8003974:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <bmk4_execute.lto_priv.172+0xa0>)
 8003976:	4823      	ldr	r0, [pc, #140]	; (8003a04 <bmk4_execute.lto_priv.172+0xa4>)
 8003978:	9500      	str	r5, [sp, #0]
 800397a:	f003 fa59 	bl	8006e30 <chThdCreateStatic>
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <bmk4_execute.lto_priv.172+0xa8>)
 8003980:	4604      	mov	r4, r0
 8003982:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8003984:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8003986:	f002 f91b 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 800398a:	f005 fb69 	bl	8009060 <test_start_timer.constprop.19>
 800398e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003a14 <bmk4_execute.lto_priv.172+0xb4>
 8003992:	f04f 0820 	mov.w	r8, #32
 8003996:	2720      	movs	r7, #32
 8003998:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 800399c:	2100      	movs	r1, #0
 800399e:	4620      	mov	r0, r4
 80039a0:	f003 f97e 	bl	8006ca0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80039a4:	4620      	mov	r0, r4
 80039a6:	2100      	movs	r1, #0
 80039a8:	f003 f97a 	bl	8006ca0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80039ac:	4620      	mov	r0, r4
 80039ae:	2100      	movs	r1, #0
 80039b0:	f003 f976 	bl	8006ca0 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 80039b4:	4620      	mov	r0, r4
 80039b6:	2100      	movs	r1, #0
 80039b8:	f003 f972 	bl	8006ca0 <chSchWakeupS>
 80039bc:	2600      	movs	r6, #0
 80039be:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80039c2:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 80039c6:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0e4      	beq.n	8003996 <bmk4_execute.lto_priv.172+0x36>
 80039cc:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 80039d0:	f04f 31ff 	mov.w	r1, #4294967295
 80039d4:	4620      	mov	r0, r4
 80039d6:	f003 f963 	bl	8006ca0 <chSchWakeupS>
 80039da:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 80039de:	f002 f8ff 	bl	8005be0 <test_wait_threads>
  test_print("--- Score : ");
 80039e2:	480a      	ldr	r0, [pc, #40]	; (8003a0c <bmk4_execute.lto_priv.172+0xac>)
 80039e4:	f002 fadc 	bl	8005fa0 <test_print>
  test_printn(n * 2);
 80039e8:	0068      	lsls	r0, r5, #1
 80039ea:	f002 fae9 	bl	8005fc0 <test_printn>
  test_println(" ctxswc/S");
 80039ee:	4808      	ldr	r0, [pc, #32]	; (8003a10 <bmk4_execute.lto_priv.172+0xb0>)
}
 80039f0:	b002      	add	sp, #8
 80039f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 80039f6:	f002 bab3 	b.w	8005f60 <test_println>
 80039fa:	bf00      	nop
 80039fc:	20001de0 	.word	0x20001de0
 8003a00:	08003a21 	.word	0x08003a21
 8003a04:	20001768 	.word	0x20001768
 8003a08:	20001480 	.word	0x20001480
 8003a0c:	08009988 	.word	0x08009988
 8003a10:	08009a10 	.word	0x08009a10
 8003a14:	20001760 	.word	0x20001760
 8003a18:	f3af 8000 	nop.w
 8003a1c:	f3af 8000 	nop.w

08003a20 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003a20:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 8003a22:	b510      	push	{r4, lr}
 8003a24:	2320      	movs	r3, #32
 8003a26:	6994      	ldr	r4, [r2, #24]
 8003a28:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f003 fa3f 	bl	8006eb0 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8003a32:	6a23      	ldr	r3, [r4, #32]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f9      	beq.n	8003a2c <thread4+0xc>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8003a3e:	bd10      	pop	{r4, pc}
 8003a40:	20001de0 	.word	0x20001de0
 8003a44:	f3af 8000 	nop.w
 8003a48:	f3af 8000 	nop.w
 8003a4c:	f3af 8000 	nop.w

08003a50 <thread2.lto_priv.108>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	2620      	movs	r6, #32
 8003a54:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8003a56:	f002 fe53 	bl	8006700 <chMsgWait>
 8003a5a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003a5c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003a60:	4621      	mov	r1, r4
 8003a62:	f003 f91d 	bl	8006ca0 <chSchWakeupS>
 8003a66:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 8003a6a:	2c00      	cmp	r4, #0
 8003a6c:	d1f3      	bne.n	8003a56 <thread2.lto_priv.108+0x6>
  return 0;
}
 8003a6e:	4620      	mov	r0, r4
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
 8003a72:	bf00      	nop
 8003a74:	f3af 8000 	nop.w
 8003a78:	f3af 8000 	nop.w
 8003a7c:	f3af 8000 	nop.w

08003a80 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8003a84:	f002 f89c 	bl	8005bc0 <test_wait_tick>
  test_start_timer(1000);
 8003a88:	f005 faea 	bl	8009060 <test_start_timer.constprop.19>
 8003a8c:	4e07      	ldr	r6, [pc, #28]	; (8003aac <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8003a8e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8003a90:	4628      	mov	r0, r5
 8003a92:	2101      	movs	r1, #1
 8003a94:	f002 fe54 	bl	8006740 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003a98:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 8003a9a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f7      	beq.n	8003a90 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f002 fe4c 	bl	8006740 <chMsgSend>
  return n;
}
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	20001760 	.word	0x20001760

08003ab0 <bmk3_execute.lto_priv.171>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8003ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab4:	4f2c      	ldr	r7, [pc, #176]	; (8003b68 <bmk3_execute.lto_priv.171+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003ab6:	4e2d      	ldr	r6, [pc, #180]	; (8003b6c <bmk3_execute.lto_priv.171+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8003aba:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	2500      	movs	r5, #0
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	3201      	adds	r2, #1
 8003ac4:	9500      	str	r5, [sp, #0]
 8003ac6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <bmk3_execute.lto_priv.171+0xc0>)
 8003acc:	f003 f9b0 	bl	8006e30 <chThdCreateStatic>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	4c28      	ldr	r4, [pc, #160]	; (8003b74 <bmk3_execute.lto_priv.171+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003b84 <bmk3_execute.lto_priv.171+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003ada:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8003adc:	4643      	mov	r3, r8
 8003ade:	3a02      	subs	r2, #2
 8003ae0:	9500      	str	r5, [sp, #0]
 8003ae2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8003ae6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003aea:	f003 f9a1 	bl	8006e30 <chThdCreateStatic>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8003af8:	4643      	mov	r3, r8
 8003afa:	3a03      	subs	r2, #3
 8003afc:	9500      	str	r5, [sp, #0]
 8003afe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003b02:	f003 f995 	bl	8006e30 <chThdCreateStatic>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8003b10:	4643      	mov	r3, r8
 8003b12:	3a04      	subs	r2, #4
 8003b14:	9500      	str	r5, [sp, #0]
 8003b16:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003b1a:	f003 f989 	bl	8006e30 <chThdCreateStatic>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8003b20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003b24:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8003b26:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8003b28:	3a05      	subs	r2, #5
 8003b2a:	4643      	mov	r3, r8
 8003b2c:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003b30:	9500      	str	r5, [sp, #0]
 8003b32:	f003 f97d 	bl	8006e30 <chThdCreateStatic>
 8003b36:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	f7ff ffa1 	bl	8003a80 <msg_loop_test>
 8003b3e:	4604      	mov	r4, r0
  test_wait_threads();
 8003b40:	f002 f84e 	bl	8005be0 <test_wait_threads>
  test_print("--- Score : ");
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <bmk3_execute.lto_priv.171+0xc8>)
 8003b46:	f002 fa2b 	bl	8005fa0 <test_print>
  test_printn(n);
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f002 fa38 	bl	8005fc0 <test_printn>
  test_print(" msgs/S, ");
 8003b50:	480a      	ldr	r0, [pc, #40]	; (8003b7c <bmk3_execute.lto_priv.171+0xcc>)
 8003b52:	f002 fa25 	bl	8005fa0 <test_print>
  test_printn(n << 1);
 8003b56:	0060      	lsls	r0, r4, #1
 8003b58:	f002 fa32 	bl	8005fc0 <test_printn>
  test_println(" ctxswc/S");
 8003b5c:	4808      	ldr	r0, [pc, #32]	; (8003b80 <bmk3_execute.lto_priv.171+0xd0>)
}
 8003b5e:	b002      	add	sp, #8
 8003b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8003b64:	f002 b9fc 	b.w	8005f60 <test_println>
 8003b68:	20001de0 	.word	0x20001de0
 8003b6c:	20001768 	.word	0x20001768
 8003b70:	08003a51 	.word	0x08003a51
 8003b74:	20001480 	.word	0x20001480
 8003b78:	08009988 	.word	0x08009988
 8003b7c:	08009a3c 	.word	0x08009a3c
 8003b80:	08009a10 	.word	0x08009a10
 8003b84:	08003561 	.word	0x08003561
 8003b88:	f3af 8000 	nop.w
 8003b8c:	f3af 8000 	nop.w

08003b90 <bmk2_execute.lto_priv.170>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8003b90:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003b92:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <bmk2_execute.lto_priv.170+0x50>)
 8003b94:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003b96:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6892      	ldr	r2, [r2, #8]
 8003b9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003ba0:	3201      	adds	r2, #1
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	480f      	ldr	r0, [pc, #60]	; (8003be4 <bmk2_execute.lto_priv.170+0x54>)
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <bmk2_execute.lto_priv.170+0x58>)
 8003ba8:	f003 f942 	bl	8006e30 <chThdCreateStatic>
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <bmk2_execute.lto_priv.170+0x5c>)
 8003bae:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8003bb0:	f7ff ff66 	bl	8003a80 <msg_loop_test>
 8003bb4:	4604      	mov	r4, r0
  test_wait_threads();
 8003bb6:	f002 f813 	bl	8005be0 <test_wait_threads>
  test_print("--- Score : ");
 8003bba:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <bmk2_execute.lto_priv.170+0x60>)
 8003bbc:	f002 f9f0 	bl	8005fa0 <test_print>
  test_printn(n);
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f002 f9fd 	bl	8005fc0 <test_printn>
  test_print(" msgs/S, ");
 8003bc6:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <bmk2_execute.lto_priv.170+0x64>)
 8003bc8:	f002 f9ea 	bl	8005fa0 <test_print>
  test_printn(n << 1);
 8003bcc:	0060      	lsls	r0, r4, #1
 8003bce:	f002 f9f7 	bl	8005fc0 <test_printn>
  test_println(" ctxswc/S");
 8003bd2:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <bmk2_execute.lto_priv.170+0x68>)
}
 8003bd4:	b002      	add	sp, #8
 8003bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8003bda:	f002 b9c1 	b.w	8005f60 <test_println>
 8003bde:	bf00      	nop
 8003be0:	20001de0 	.word	0x20001de0
 8003be4:	20001768 	.word	0x20001768
 8003be8:	08003a51 	.word	0x08003a51
 8003bec:	20001480 	.word	0x20001480
 8003bf0:	08009988 	.word	0x08009988
 8003bf4:	08009a3c 	.word	0x08009a3c
 8003bf8:	08009a10 	.word	0x08009a10
 8003bfc:	f3af 8000 	nop.w

08003c00 <bmk1_execute.lto_priv.169>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8003c00:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003c02:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <bmk1_execute.lto_priv.169+0x50>)
 8003c04:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003c06:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6892      	ldr	r2, [r2, #8]
 8003c0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003c10:	3a01      	subs	r2, #1
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	480f      	ldr	r0, [pc, #60]	; (8003c54 <bmk1_execute.lto_priv.169+0x54>)
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <bmk1_execute.lto_priv.169+0x58>)
 8003c18:	f003 f90a 	bl	8006e30 <chThdCreateStatic>
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <bmk1_execute.lto_priv.169+0x5c>)
 8003c1e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8003c20:	f7ff ff2e 	bl	8003a80 <msg_loop_test>
 8003c24:	4604      	mov	r4, r0
  test_wait_threads();
 8003c26:	f001 ffdb 	bl	8005be0 <test_wait_threads>
  test_print("--- Score : ");
 8003c2a:	480d      	ldr	r0, [pc, #52]	; (8003c60 <bmk1_execute.lto_priv.169+0x60>)
 8003c2c:	f002 f9b8 	bl	8005fa0 <test_print>
  test_printn(n);
 8003c30:	4620      	mov	r0, r4
 8003c32:	f002 f9c5 	bl	8005fc0 <test_printn>
  test_print(" msgs/S, ");
 8003c36:	480b      	ldr	r0, [pc, #44]	; (8003c64 <bmk1_execute.lto_priv.169+0x64>)
 8003c38:	f002 f9b2 	bl	8005fa0 <test_print>
  test_printn(n << 1);
 8003c3c:	0060      	lsls	r0, r4, #1
 8003c3e:	f002 f9bf 	bl	8005fc0 <test_printn>
  test_println(" ctxswc/S");
 8003c42:	4809      	ldr	r0, [pc, #36]	; (8003c68 <bmk1_execute.lto_priv.169+0x68>)
}
 8003c44:	b002      	add	sp, #8
 8003c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8003c4a:	f002 b989 	b.w	8005f60 <test_println>
 8003c4e:	bf00      	nop
 8003c50:	20001de0 	.word	0x20001de0
 8003c54:	20001768 	.word	0x20001768
 8003c58:	08003a51 	.word	0x08003a51
 8003c5c:	20001480 	.word	0x20001480
 8003c60:	08009988 	.word	0x08009988
 8003c64:	08009a3c 	.word	0x08009a3c
 8003c68:	08009a10 	.word	0x08009a10
 8003c6c:	f3af 8000 	nop.w

08003c70 <thread2.lto_priv.107>:
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 8003c70:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8003c72:	2100      	movs	r1, #0
 8003c74:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <thread2.lto_priv.107+0x14>)
 8003c7a:	f002 fc81 	bl	8006580 <chOQPutTimeout>
  return 0;
}
 8003c7e:	2000      	movs	r0, #0
 8003c80:	bd08      	pop	{r3, pc}
 8003c82:	bf00      	nop
 8003c84:	20000cd0 	.word	0x20000cd0
 8003c88:	f3af 8000 	nop.w
 8003c8c:	f3af 8000 	nop.w

08003c90 <queues2_execute.lto_priv.168>:

static void queues2_execute(void) {
 8003c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c94:	2320      	movs	r3, #32
 8003c96:	b083      	sub	sp, #12
 8003c98:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8003c9c:	4e86      	ldr	r6, [pc, #536]	; (8003eb8 <queues2_execute.lto_priv.168+0x228>)
 8003c9e:	6972      	ldr	r2, [r6, #20]
 8003ca0:	69b3      	ldr	r3, [r6, #24]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d05b      	beq.n	8003d5e <queues2_execute.lto_priv.168+0xce>
 8003ca6:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f002 f921 	bl	8005ef0 <_test_assert>
 8003cae:	bbb8      	cbnz	r0, 8003d20 <queues2_execute.lto_priv.168+0x90>
 8003cb0:	f380 8811 	msr	BASEPRI, r0
 8003cb4:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8003cb6:	4d80      	ldr	r5, [pc, #512]	; (8003eb8 <queues2_execute.lto_priv.168+0x228>)
 8003cb8:	4621      	mov	r1, r4
 8003cba:	3401      	adds	r4, #1
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc2:	b2e4      	uxtb	r4, r4
 8003cc4:	f002 fc5c 	bl	8006580 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003cc8:	2c45      	cmp	r4, #69	; 0x45
 8003cca:	d1f4      	bne.n	8003cb6 <queues2_execute.lto_priv.168+0x26>
 8003ccc:	2420      	movs	r4, #32
 8003cce:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003cd2:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	fab1 f181 	clz	r1, r1
 8003cda:	0949      	lsrs	r1, r1, #5
 8003cdc:	f002 f908 	bl	8005ef0 <_test_assert>
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	b9e8      	cbnz	r0, 8003d20 <queues2_execute.lto_priv.168+0x90>
 8003ce4:	f380 8811 	msr	BASEPRI, r0
 8003ce8:	4681      	mov	r9, r0
 8003cea:	4625      	mov	r5, r4
 8003cec:	2404      	movs	r4, #4
 8003cee:	f04f 0820 	mov.w	r8, #32
 8003cf2:	f385 8811 	msr	BASEPRI, r5
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8003cf6:	f005 f98b 	bl	8009010 <chOQGetI.constprop.23>
 8003cfa:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 8003cfe:	b2c0      	uxtb	r0, r0
 8003d00:	f002 f90e 	bl	8005f20 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8003d04:	3c01      	subs	r4, #1
 8003d06:	d1f2      	bne.n	8003cee <queues2_execute.lto_priv.168+0x5e>
 8003d08:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8003d0c:	6972      	ldr	r2, [r6, #20]
 8003d0e:	69b3      	ldr	r3, [r6, #24]
 8003d10:	4969      	ldr	r1, [pc, #420]	; (8003eb8 <queues2_execute.lto_priv.168+0x228>)
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d028      	beq.n	8003d68 <queues2_execute.lto_priv.168+0xd8>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8003d16:	4639      	mov	r1, r7
 8003d18:	2003      	movs	r0, #3
 8003d1a:	f002 f8e9 	bl	8005ef0 <_test_assert>
 8003d1e:	b128      	cbz	r0, 8003d2c <queues2_execute.lto_priv.168+0x9c>
 8003d20:	2300      	movs	r3, #0
 8003d22:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8003d26:	b003      	add	sp, #12
 8003d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d2c:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8003d30:	2004      	movs	r0, #4
 8003d32:	4962      	ldr	r1, [pc, #392]	; (8003ebc <queues2_execute.lto_priv.168+0x22c>)
 8003d34:	f001 ffa4 	bl	8005c80 <_test_assert_sequence>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1f3      	bne.n	8003d26 <queues2_execute.lto_priv.168+0x96>
 8003d3e:	2520      	movs	r5, #32
 8003d40:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8003d44:	f005 f964 	bl	8009010 <chOQGetI.constprop.23>
 8003d48:	3003      	adds	r0, #3
 8003d4a:	bf14      	ite	ne
 8003d4c:	2100      	movne	r1, #0
 8003d4e:	2101      	moveq	r1, #1
 8003d50:	2005      	movs	r0, #5
 8003d52:	f002 f8cd 	bl	8005ef0 <_test_assert>
 8003d56:	b160      	cbz	r0, 8003d72 <queues2_execute.lto_priv.168+0xe2>
 8003d58:	f384 8811 	msr	BASEPRI, r4
 8003d5c:	e7e3      	b.n	8003d26 <queues2_execute.lto_priv.168+0x96>
 8003d5e:	68b1      	ldr	r1, [r6, #8]
 8003d60:	3100      	adds	r1, #0
 8003d62:	bf18      	it	ne
 8003d64:	2101      	movne	r1, #1
 8003d66:	e79f      	b.n	8003ca8 <queues2_execute.lto_priv.168+0x18>
 8003d68:	688f      	ldr	r7, [r1, #8]
 8003d6a:	3700      	adds	r7, #0
 8003d6c:	bf18      	it	ne
 8003d6e:	2701      	movne	r7, #1
 8003d70:	e7d1      	b.n	8003d16 <queues2_execute.lto_priv.168+0x86>
 8003d72:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8003d76:	4c50      	ldr	r4, [pc, #320]	; (8003eb8 <queues2_execute.lto_priv.168+0x228>)
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4951      	ldr	r1, [pc, #324]	; (8003ec0 <queues2_execute.lto_priv.168+0x230>)
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f002 fbb6 	bl	80064f0 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8003d84:	f1a0 0104 	sub.w	r1, r0, #4
 8003d88:	fab1 f181 	clz	r1, r1
 8003d8c:	2006      	movs	r0, #6
 8003d8e:	0949      	lsrs	r1, r1, #5
 8003d90:	f002 f8ae 	bl	8005ef0 <_test_assert>
 8003d94:	4606      	mov	r6, r0
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d1c5      	bne.n	8003d26 <queues2_execute.lto_priv.168+0x96>
 8003d9a:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003d9e:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8003da0:	2007      	movs	r0, #7
 8003da2:	fab1 f181 	clz	r1, r1
 8003da6:	0949      	lsrs	r1, r1, #5
 8003da8:	f002 f8a2 	bl	8005ef0 <_test_assert>
 8003dac:	4607      	mov	r7, r0
 8003dae:	b110      	cbz	r0, 8003db6 <queues2_execute.lto_priv.168+0x126>
 8003db0:	f386 8811 	msr	BASEPRI, r6
 8003db4:	e7b7      	b.n	8003d26 <queues2_execute.lto_priv.168+0x96>
 8003db6:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003dba:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <queues2_execute.lto_priv.168+0x234>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003dbc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	4841      	ldr	r0, [pc, #260]	; (8003ec8 <queues2_execute.lto_priv.168+0x238>)
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	4b41      	ldr	r3, [pc, #260]	; (8003ecc <queues2_execute.lto_priv.168+0x23c>)
 8003dc8:	3201      	adds	r2, #1
 8003dca:	9700      	str	r7, [sp, #0]
 8003dcc:	f003 f830 	bl	8006e30 <chThdCreateStatic>
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <queues2_execute.lto_priv.168+0x240>)
 8003dd2:	6018      	str	r0, [r3, #0]
 8003dd4:	f385 8811 	msr	BASEPRI, r5
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8003dd8:	68e1      	ldr	r1, [r4, #12]
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	68a2      	ldr	r2, [r4, #8]
 8003dde:	1a5b      	subs	r3, r3, r1
 8003de0:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8003de2:	f1a1 0104 	sub.w	r1, r1, #4
 8003de6:	fab1 f181 	clz	r1, r1
 8003dea:	2008      	movs	r0, #8
 8003dec:	0949      	lsrs	r1, r1, #5
 8003dee:	f002 f87f 	bl	8005ef0 <_test_assert>
 8003df2:	4606      	mov	r6, r0
 8003df4:	b110      	cbz	r0, 8003dfc <queues2_execute.lto_priv.168+0x16c>
 8003df6:	f387 8811 	msr	BASEPRI, r7
 8003dfa:	e794      	b.n	8003d26 <queues2_execute.lto_priv.168+0x96>
 8003dfc:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8003e00:	f001 feee 	bl	8005be0 <test_wait_threads>
 8003e04:	f385 8811 	msr	BASEPRI, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8003e08:	68e2      	ldr	r2, [r4, #12]
  oqp->q_counter = chQSizeI(oqp);
 8003e0a:	6923      	ldr	r3, [r4, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003e0c:	4620      	mov	r0, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 8003e0e:	1a9b      	subs	r3, r3, r2
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003e10:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8003e14:	6162      	str	r2, [r4, #20]
 8003e16:	61a2      	str	r2, [r4, #24]
  oqp->q_counter = chQSizeI(oqp);
 8003e18:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003e1a:	f003 fa41 	bl	80072a0 <chThdDequeueAllI>
 8003e1e:	f386 8811 	msr	BASEPRI, r6
 8003e22:	f385 8811 	msr	BASEPRI, r5

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8003e26:	f104 0108 	add.w	r1, r4, #8
 8003e2a:	c90e      	ldmia	r1, {r1, r2, r3}
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	1a59      	subs	r1, r3, r1
 8003e30:	fab1 f181 	clz	r1, r1
 8003e34:	2009      	movs	r0, #9
 8003e36:	0949      	lsrs	r1, r1, #5
 8003e38:	f002 f85a 	bl	8005ef0 <_test_assert>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d1b6      	bne.n	8003db0 <queues2_execute.lto_priv.168+0x120>
 8003e42:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003e46:	491e      	ldr	r1, [pc, #120]	; (8003ec0 <queues2_execute.lto_priv.168+0x230>)
 8003e48:	2202      	movs	r2, #2
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f002 fb50 	bl	80064f0 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8003e50:	3802      	subs	r0, #2
 8003e52:	4241      	negs	r1, r0
 8003e54:	4141      	adcs	r1, r0
 8003e56:	200a      	movs	r0, #10
 8003e58:	f002 f84a 	bl	8005ef0 <_test_assert>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	f47f af61 	bne.w	8003d26 <queues2_execute.lto_priv.168+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003e64:	4916      	ldr	r1, [pc, #88]	; (8003ec0 <queues2_execute.lto_priv.168+0x230>)
 8003e66:	2202      	movs	r2, #2
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f002 fb41 	bl	80064f0 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8003e6e:	1e82      	subs	r2, r0, #2
 8003e70:	4251      	negs	r1, r2
 8003e72:	4151      	adcs	r1, r2
 8003e74:	200b      	movs	r0, #11
 8003e76:	f002 f83b 	bl	8005ef0 <_test_assert>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	f47f af53 	bne.w	8003d26 <queues2_execute.lto_priv.168+0x96>
 8003e80:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003e84:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8003e86:	200c      	movs	r0, #12
 8003e88:	fab1 f181 	clz	r1, r1
 8003e8c:	0949      	lsrs	r1, r1, #5
 8003e8e:	f002 f82f 	bl	8005ef0 <_test_assert>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	f47f af44 	bne.w	8003d20 <queues2_execute.lto_priv.168+0x90>
 8003e98:	2100      	movs	r1, #0
 8003e9a:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8003e9e:	220a      	movs	r2, #10
 8003ea0:	4805      	ldr	r0, [pc, #20]	; (8003eb8 <queues2_execute.lto_priv.168+0x228>)
 8003ea2:	f002 fb6d 	bl	8006580 <chOQPutTimeout>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	4259      	negs	r1, r3
 8003eaa:	4159      	adcs	r1, r3
 8003eac:	200d      	movs	r0, #13
}
 8003eae:	b003      	add	sp, #12
 8003eb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8003eb4:	f002 b81c 	b.w	8005ef0 <_test_assert>
 8003eb8:	20000cd0 	.word	0x20000cd0
 8003ebc:	080099dc 	.word	0x080099dc
 8003ec0:	200018b0 	.word	0x200018b0
 8003ec4:	20001de0 	.word	0x20001de0
 8003ec8:	20001768 	.word	0x20001768
 8003ecc:	08003c71 	.word	0x08003c71
 8003ed0:	20001480 	.word	0x20001480
 8003ed4:	f3af 8000 	nop.w
 8003ed8:	f3af 8000 	nop.w
 8003edc:	f3af 8000 	nop.w

08003ee0 <thread1.lto_priv.105>:
static void queues1_setup(void) {

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread1(void *p) {
 8003ee0:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8003ee2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003ee6:	4802      	ldr	r0, [pc, #8]	; (8003ef0 <thread1.lto_priv.105+0x10>)
 8003ee8:	f002 fbb2 	bl	8006650 <chIQGetTimeout>
  return 0;
}
 8003eec:	2000      	movs	r0, #0
 8003eee:	bd08      	pop	{r3, pc}
 8003ef0:	20000c38 	.word	0x20000c38
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	f3af 8000 	nop.w
 8003efc:	f3af 8000 	nop.w

08003f00 <queues1_execute.lto_priv.166>:

static void queues1_execute(void) {
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	2420      	movs	r4, #32
 8003f04:	b083      	sub	sp, #12
 8003f06:	f384 8811 	msr	BASEPRI, r4
 8003f0a:	4b90      	ldr	r3, [pc, #576]	; (800414c <queues1_execute.lto_priv.166+0x24c>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8003f0c:	2001      	movs	r0, #1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	fab1 f181 	clz	r1, r1
 8003f14:	0949      	lsrs	r1, r1, #5
 8003f16:	f001 ffeb 	bl	8005ef0 <_test_assert>
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	b9e8      	cbnz	r0, 8003f5a <queues1_execute.lto_priv.166+0x5a>
 8003f1e:	f380 8811 	msr	BASEPRI, r0
 8003f22:	f384 8811 	msr	BASEPRI, r4
 8003f26:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8003f28:	4d88      	ldr	r5, [pc, #544]	; (800414c <queues1_execute.lto_priv.166+0x24c>)
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	3401      	adds	r4, #1
 8003f2e:	4628      	mov	r0, r5
 8003f30:	b2e4      	uxtb	r4, r4
 8003f32:	f002 fbb5 	bl	80066a0 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003f36:	2c45      	cmp	r4, #69	; 0x45
 8003f38:	d1f6      	bne.n	8003f28 <queues1_execute.lto_priv.166+0x28>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	2320      	movs	r3, #32
 8003f42:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003f46:	69aa      	ldr	r2, [r5, #24]
 8003f48:	696b      	ldr	r3, [r5, #20]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d038      	beq.n	8003fc0 <queues1_execute.lto_priv.166+0xc0>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8003f4e:	4631      	mov	r1, r6
 8003f50:	2002      	movs	r0, #2
 8003f52:	f001 ffcd 	bl	8005ef0 <_test_assert>
 8003f56:	4604      	mov	r4, r0
 8003f58:	b120      	cbz	r0, 8003f64 <queues1_execute.lto_priv.166+0x64>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8003f60:	b003      	add	sp, #12
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f64:	f380 8811 	msr	BASEPRI, r0
 8003f68:	2320      	movs	r3, #32
 8003f6a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8003f6e:	4877      	ldr	r0, [pc, #476]	; (800414c <queues1_execute.lto_priv.166+0x24c>)
 8003f70:	4621      	mov	r1, r4
 8003f72:	f002 fb95 	bl	80066a0 <chIQPutI>
 8003f76:	3004      	adds	r0, #4
 8003f78:	bf14      	ite	ne
 8003f7a:	2100      	movne	r1, #0
 8003f7c:	2101      	moveq	r1, #1
 8003f7e:	2003      	movs	r0, #3
 8003f80:	f001 ffb6 	bl	8005ef0 <_test_assert>
 8003f84:	b9c0      	cbnz	r0, 8003fb8 <queues1_execute.lto_priv.166+0xb8>
 8003f86:	f380 8811 	msr	BASEPRI, r0
 8003f8a:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8003f8c:	4d6f      	ldr	r5, [pc, #444]	; (800414c <queues1_execute.lto_priv.166+0x24c>)
 8003f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f92:	4628      	mov	r0, r5
 8003f94:	f002 fb5c 	bl	8006650 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8003f98:	b2c0      	uxtb	r0, r0
 8003f9a:	f001 ffc1 	bl	8005f20 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003f9e:	3c01      	subs	r4, #1
 8003fa0:	d1f4      	bne.n	8003f8c <queues1_execute.lto_priv.166+0x8c>
 8003fa2:	2620      	movs	r6, #32
 8003fa4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8003fa8:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8003faa:	2004      	movs	r0, #4
 8003fac:	fab1 f181 	clz	r1, r1
 8003fb0:	0949      	lsrs	r1, r1, #5
 8003fb2:	f001 ff9d 	bl	8005ef0 <_test_assert>
 8003fb6:	b140      	cbz	r0, 8003fca <queues1_execute.lto_priv.166+0xca>
 8003fb8:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8003fbc:	b003      	add	sp, #12
 8003fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003fc0:	68ae      	ldr	r6, [r5, #8]
 8003fc2:	3600      	adds	r6, #0
 8003fc4:	bf18      	it	ne
 8003fc6:	2601      	movne	r6, #1
 8003fc8:	e7c1      	b.n	8003f4e <queues1_execute.lto_priv.166+0x4e>
 8003fca:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 8003fce:	2005      	movs	r0, #5
 8003fd0:	495f      	ldr	r1, [pc, #380]	; (8004150 <queues1_execute.lto_priv.166+0x250>)
 8003fd2:	f001 fe55 	bl	8005c80 <_test_assert_sequence>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d1c2      	bne.n	8003f60 <queues1_execute.lto_priv.166+0x60>
 8003fda:	f386 8811 	msr	BASEPRI, r6
 8003fde:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8003fe0:	4d5a      	ldr	r5, [pc, #360]	; (800414c <queues1_execute.lto_priv.166+0x24c>)
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	b2e4      	uxtb	r4, r4
 8003fea:	f002 fb59 	bl	80066a0 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003fee:	2c45      	cmp	r4, #69	; 0x45
 8003ff0:	d1f6      	bne.n	8003fe0 <queues1_execute.lto_priv.166+0xe0>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8003ff8:	4956      	ldr	r1, [pc, #344]	; (8004154 <queues1_execute.lto_priv.166+0x254>)
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f002 fae7 	bl	80065d0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8004002:	f1a0 0104 	sub.w	r1, r0, #4
 8004006:	fab1 f181 	clz	r1, r1
 800400a:	2006      	movs	r0, #6
 800400c:	0949      	lsrs	r1, r1, #5
 800400e:	f001 ff6f 	bl	8005ef0 <_test_assert>
 8004012:	4604      	mov	r4, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	d1a3      	bne.n	8003f60 <queues1_execute.lto_priv.166+0x60>
 8004018:	2620      	movs	r6, #32
 800401a:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 800401e:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8004020:	2007      	movs	r0, #7
 8004022:	fab1 f181 	clz	r1, r1
 8004026:	0949      	lsrs	r1, r1, #5
 8004028:	f001 ff62 	bl	8005ef0 <_test_assert>
 800402c:	2800      	cmp	r0, #0
 800402e:	d1c3      	bne.n	8003fb8 <queues1_execute.lto_priv.166+0xb8>
 8004030:	f380 8811 	msr	BASEPRI, r0
 8004034:	f386 8811 	msr	BASEPRI, r6
 8004038:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 800403a:	4d44      	ldr	r5, [pc, #272]	; (800414c <queues1_execute.lto_priv.166+0x24c>)
 800403c:	4621      	mov	r1, r4
 800403e:	3401      	adds	r4, #1
 8004040:	4628      	mov	r0, r5
 8004042:	b2e4      	uxtb	r4, r4
 8004044:	f002 fb2c 	bl	80066a0 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8004048:	2c45      	cmp	r4, #69	; 0x45
 800404a:	d1f6      	bne.n	800403a <queues1_execute.lto_priv.166+0x13a>
 800404c:	2300      	movs	r3, #0
 800404e:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004052:	4940      	ldr	r1, [pc, #256]	; (8004154 <queues1_execute.lto_priv.166+0x254>)
 8004054:	4628      	mov	r0, r5
 8004056:	2202      	movs	r2, #2
 8004058:	f002 faba 	bl	80065d0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800405c:	f1a0 0102 	sub.w	r1, r0, #2
 8004060:	fab1 f181 	clz	r1, r1
 8004064:	2008      	movs	r0, #8
 8004066:	0949      	lsrs	r1, r1, #5
 8004068:	f001 ff42 	bl	8005ef0 <_test_assert>
 800406c:	2800      	cmp	r0, #0
 800406e:	f47f af77 	bne.w	8003f60 <queues1_execute.lto_priv.166+0x60>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004072:	4603      	mov	r3, r0
 8004074:	4937      	ldr	r1, [pc, #220]	; (8004154 <queues1_execute.lto_priv.166+0x254>)
 8004076:	2202      	movs	r2, #2
 8004078:	4628      	mov	r0, r5
 800407a:	f002 faa9 	bl	80065d0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800407e:	f1a0 0102 	sub.w	r1, r0, #2
 8004082:	fab1 f181 	clz	r1, r1
 8004086:	2009      	movs	r0, #9
 8004088:	0949      	lsrs	r1, r1, #5
 800408a:	f001 ff31 	bl	8005ef0 <_test_assert>
 800408e:	4606      	mov	r6, r0
 8004090:	2800      	cmp	r0, #0
 8004092:	f47f af65 	bne.w	8003f60 <queues1_execute.lto_priv.166+0x60>
 8004096:	2720      	movs	r7, #32
 8004098:	f387 8811 	msr	BASEPRI, r7
 800409c:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800409e:	200a      	movs	r0, #10
 80040a0:	fab1 f181 	clz	r1, r1
 80040a4:	0949      	lsrs	r1, r1, #5
 80040a6:	f001 ff23 	bl	8005ef0 <_test_assert>
 80040aa:	4604      	mov	r4, r0
 80040ac:	b110      	cbz	r0, 80040b4 <queues1_execute.lto_priv.166+0x1b4>
 80040ae:	f386 8811 	msr	BASEPRI, r6
 80040b2:	e755      	b.n	8003f60 <queues1_execute.lto_priv.166+0x60>
 80040b4:	f380 8811 	msr	BASEPRI, r0
 80040b8:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 80040bc:	4621      	mov	r1, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	f002 faee 	bl	80066a0 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 80040c4:	68eb      	ldr	r3, [r5, #12]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80040c6:	4628      	mov	r0, r5
 80040c8:	f06f 0101 	mvn.w	r1, #1
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80040cc:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 80040ce:	616b      	str	r3, [r5, #20]
 80040d0:	61ab      	str	r3, [r5, #24]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80040d2:	f003 f8e5 	bl	80072a0 <chThdDequeueAllI>
 80040d6:	f384 8811 	msr	BASEPRI, r4
 80040da:	f387 8811 	msr	BASEPRI, r7
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 80040de:	68a9      	ldr	r1, [r5, #8]
 80040e0:	200b      	movs	r0, #11
 80040e2:	fab1 f181 	clz	r1, r1
 80040e6:	0949      	lsrs	r1, r1, #5
 80040e8:	f001 ff02 	bl	8005ef0 <_test_assert>
 80040ec:	4606      	mov	r6, r0
 80040ee:	2800      	cmp	r0, #0
 80040f0:	f47f af62 	bne.w	8003fb8 <queues1_execute.lto_priv.166+0xb8>
 80040f4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <queues1_execute.lto_priv.166+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 80040fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4816      	ldr	r0, [pc, #88]	; (800415c <queues1_execute.lto_priv.166+0x25c>)
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <queues1_execute.lto_priv.166+0x260>)
 8004106:	3201      	adds	r2, #1
 8004108:	9600      	str	r6, [sp, #0]
 800410a:	f002 fe91 	bl	8006e30 <chThdCreateStatic>
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <queues1_execute.lto_priv.166+0x264>)
 8004110:	6018      	str	r0, [r3, #0]
 8004112:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8004116:	68a9      	ldr	r1, [r5, #8]
 8004118:	200c      	movs	r0, #12
 800411a:	fab1 f181 	clz	r1, r1
 800411e:	0949      	lsrs	r1, r1, #5
 8004120:	f001 fee6 	bl	8005ef0 <_test_assert>
 8004124:	2800      	cmp	r0, #0
 8004126:	d1c2      	bne.n	80040ae <queues1_execute.lto_priv.166+0x1ae>
 8004128:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 800412c:	f001 fd58 	bl	8005be0 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8004130:	4628      	mov	r0, r5
 8004132:	210a      	movs	r1, #10
 8004134:	f002 fa8c 	bl	8006650 <chIQGetTimeout>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	4259      	negs	r1, r3
 800413c:	4159      	adcs	r1, r3
 800413e:	200d      	movs	r0, #13
}
 8004140:	b003      	add	sp, #12
 8004142:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8004146:	f001 bed3 	b.w	8005ef0 <_test_assert>
 800414a:	bf00      	nop
 800414c:	20000c38 	.word	0x20000c38
 8004150:	080099dc 	.word	0x080099dc
 8004154:	200018b0 	.word	0x200018b0
 8004158:	20001de0 	.word	0x20001de0
 800415c:	20001768 	.word	0x20001768
 8004160:	08003ee1 	.word	0x08003ee1
 8004164:	20001480 	.word	0x20001480
 8004168:	f3af 8000 	nop.w
 800416c:	f3af 8000 	nop.w

08004170 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4605      	mov	r5, r0
 8004174:	2320      	movs	r3, #32
 8004176:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <regfind+0x34>)
 800417c:	2400      	movs	r4, #0
 800417e:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8004180:	7f9a      	ldrb	r2, [r3, #30]
 8004182:	3201      	adds	r2, #1
 8004184:	779a      	strb	r2, [r3, #30]
 8004186:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 800418a:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 800418c:	42ab      	cmp	r3, r5
 800418e:	bf08      	it	eq
 8004190:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 8004194:	f002 fc9c 	bl	8006ad0 <chRegNextThread>
  } while (ftp != NULL);
 8004198:	4603      	mov	r3, r0
 800419a:	2800      	cmp	r0, #0
 800419c:	d1f5      	bne.n	800418a <regfind+0x1a>
  return found;
}
 800419e:	4620      	mov	r0, r4
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	bf00      	nop
 80041a4:	20001de0 	.word	0x20001de0
 80041a8:	f3af 8000 	nop.w
 80041ac:	f3af 8000 	nop.w

080041b0 <dyn3_execute.lto_priv.164>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80041b0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80041b2:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <dyn3_execute.lto_priv.164+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80041b4:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <dyn3_execute.lto_priv.164+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80041b6:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 80041b8:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80041ba:	6892      	ldr	r2, [r2, #8]
 80041bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	4848      	ldr	r0, [pc, #288]	; (80042e4 <dyn3_execute.lto_priv.164+0x134>)
 80041c4:	3a01      	subs	r2, #1
 80041c6:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <dyn3_execute.lto_priv.164+0x138>)
 80041c8:	f002 fdea 	bl	8006da0 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80041cc:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 80041ce:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 80041d0:	2001      	movs	r0, #1
 80041d2:	1a09      	subs	r1, r1, r0
 80041d4:	fab1 f181 	clz	r1, r1
 80041d8:	0949      	lsrs	r1, r1, #5
 80041da:	f001 fe89 	bl	8005ef0 <_test_assert>
 80041de:	b108      	cbz	r0, 80041e4 <dyn3_execute.lto_priv.164+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 80041e0:	b002      	add	sp, #8
 80041e2:	bd10      	pop	{r4, pc}
 80041e4:	2320      	movs	r3, #32
 80041e6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 80041ea:	7fa3      	ldrb	r3, [r4, #30]
 80041ec:	3301      	adds	r3, #1
 80041ee:	77a3      	strb	r3, [r4, #30]
 80041f0:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 80041f4:	7fa1      	ldrb	r1, [r4, #30]
 80041f6:	2002      	movs	r0, #2
 80041f8:	1a09      	subs	r1, r1, r0
 80041fa:	fab1 f181 	clz	r1, r1
 80041fe:	0949      	lsrs	r1, r1, #5
 8004200:	f001 fe76 	bl	8005ef0 <_test_assert>
 8004204:	2800      	cmp	r0, #0
 8004206:	d1eb      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  chThdRelease(tp);
 8004208:	4620      	mov	r0, r4
 800420a:	f002 fc31 	bl	8006a70 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 800420e:	7fa1      	ldrb	r1, [r4, #30]
 8004210:	2003      	movs	r0, #3
 8004212:	f1a1 0101 	sub.w	r1, r1, #1
 8004216:	fab1 f181 	clz	r1, r1
 800421a:	0949      	lsrs	r1, r1, #5
 800421c:	f001 fe68 	bl	8005ef0 <_test_assert>
 8004220:	2800      	cmp	r0, #0
 8004222:	d1dd      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff ffa3 	bl	8004170 <regfind>
 800422a:	4601      	mov	r1, r0
 800422c:	2004      	movs	r0, #4
 800422e:	f001 fe5f 	bl	8005ef0 <_test_assert>
 8004232:	2800      	cmp	r0, #0
 8004234:	d1d4      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff ff9a 	bl	8004170 <regfind>
 800423c:	4601      	mov	r1, r0
 800423e:	2005      	movs	r0, #5
 8004240:	f001 fe56 	bl	8005ef0 <_test_assert>
 8004244:	2800      	cmp	r0, #0
 8004246:	d1cb      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8004248:	4620      	mov	r0, r4
 800424a:	f002 fc11 	bl	8006a70 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 800424e:	7fa1      	ldrb	r1, [r4, #30]
 8004250:	2006      	movs	r0, #6
 8004252:	fab1 f181 	clz	r1, r1
 8004256:	0949      	lsrs	r1, r1, #5
 8004258:	f001 fe4a 	bl	8005ef0 <_test_assert>
 800425c:	2800      	cmp	r0, #0
 800425e:	d1bf      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8004260:	7f21      	ldrb	r1, [r4, #28]
 8004262:	2007      	movs	r0, #7
 8004264:	fab1 f181 	clz	r1, r1
 8004268:	0949      	lsrs	r1, r1, #5
 800426a:	f001 fe41 	bl	8005ef0 <_test_assert>
 800426e:	2800      	cmp	r0, #0
 8004270:	d1b6      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff ff7c 	bl	8004170 <regfind>
 8004278:	4601      	mov	r1, r0
 800427a:	2008      	movs	r0, #8
 800427c:	f001 fe38 	bl	8005ef0 <_test_assert>
 8004280:	2800      	cmp	r0, #0
 8004282:	d1ad      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8004284:	4620      	mov	r0, r4
 8004286:	f7ff ff73 	bl	8004170 <regfind>
 800428a:	4601      	mov	r1, r0
 800428c:	2009      	movs	r0, #9
 800428e:	f001 fe2f 	bl	8005ef0 <_test_assert>
 8004292:	2800      	cmp	r0, #0
 8004294:	d1a4      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8004296:	2064      	movs	r0, #100	; 0x64
 8004298:	f002 feda 	bl	8007050 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 800429c:	7f21      	ldrb	r1, [r4, #28]
 800429e:	200a      	movs	r0, #10
 80042a0:	f1a1 030f 	sub.w	r3, r1, #15
 80042a4:	4259      	negs	r1, r3
 80042a6:	4159      	adcs	r1, r3
 80042a8:	f001 fe22 	bl	8005ef0 <_test_assert>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d197      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80042b0:	4620      	mov	r0, r4
 80042b2:	f7ff ff5d 	bl	8004170 <regfind>
 80042b6:	4601      	mov	r1, r0
 80042b8:	200b      	movs	r0, #11
 80042ba:	f001 fe19 	bl	8005ef0 <_test_assert>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d18e      	bne.n	80041e0 <dyn3_execute.lto_priv.164+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff ff54 	bl	8004170 <regfind>
 80042c8:	f080 0101 	eor.w	r1, r0, #1
 80042cc:	b2c9      	uxtb	r1, r1
 80042ce:	200c      	movs	r0, #12
}
 80042d0:	b002      	add	sp, #8
 80042d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 80042d6:	f001 be0b 	b.w	8005ef0 <_test_assert>
 80042da:	bf00      	nop
 80042dc:	20001de0 	.word	0x20001de0
 80042e0:	080099d0 	.word	0x080099d0
 80042e4:	20001460 	.word	0x20001460
 80042e8:	08002d21 	.word	0x08002d21
 80042ec:	f3af 8000 	nop.w

080042f0 <mtx6_setup.lto_priv.140>:
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <mtx6_setup.lto_priv.140+0x14>)
 80042f2:	4a05      	ldr	r2, [pc, #20]	; (8004308 <mtx6_setup.lto_priv.140+0x18>)
 80042f4:	2100      	movs	r1, #0
 80042f6:	6052      	str	r2, [r2, #4]
 80042f8:	6012      	str	r2, [r2, #0]
 80042fa:	605b      	str	r3, [r3, #4]
 80042fc:	601b      	str	r3, [r3, #0]
 80042fe:	6099      	str	r1, [r3, #8]
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000c5c 	.word	0x20000c5c
 8004308:	20000c84 	.word	0x20000c84
 800430c:	f3af 8000 	nop.w

08004310 <mtx5_setup.lto_priv.138>:
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <mtx5_setup.lto_priv.138+0xc>)
 8004312:	2200      	movs	r2, #0
 8004314:	605b      	str	r3, [r3, #4]
 8004316:	601b      	str	r3, [r3, #0]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	4770      	bx	lr
 800431c:	20000c5c 	.word	0x20000c5c

08004320 <mtx4_setup.lto_priv.136>:
 8004320:	4a04      	ldr	r2, [pc, #16]	; (8004334 <mtx4_setup.lto_priv.136+0x14>)
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <mtx4_setup.lto_priv.136+0x18>)
 8004324:	2100      	movs	r1, #0
 8004326:	6052      	str	r2, [r2, #4]
 8004328:	6012      	str	r2, [r2, #0]
 800432a:	6091      	str	r1, [r2, #8]
 800432c:	6099      	str	r1, [r3, #8]
 800432e:	605b      	str	r3, [r3, #4]
 8004330:	601b      	str	r3, [r3, #0]
 8004332:	4770      	bx	lr
 8004334:	20000c5c 	.word	0x20000c5c
 8004338:	20000c6c 	.word	0x20000c6c
 800433c:	f3af 8000 	nop.w

08004340 <mtx1_setup.lto_priv.134>:
 8004340:	4b02      	ldr	r3, [pc, #8]	; (800434c <mtx1_setup.lto_priv.134+0xc>)
 8004342:	2200      	movs	r2, #0
 8004344:	605b      	str	r3, [r3, #4]
 8004346:	601b      	str	r3, [r3, #0]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	4770      	bx	lr
 800434c:	20000c5c 	.word	0x20000c5c

08004350 <sem3_setup.lto_priv.131>:
 8004350:	4b02      	ldr	r3, [pc, #8]	; (800435c <sem3_setup.lto_priv.131+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8004352:	2200      	movs	r2, #0
 8004354:	605b      	str	r3, [r3, #4]
 8004356:	601b      	str	r3, [r3, #0]
 8004358:	609a      	str	r2, [r3, #8]
 800435a:	4770      	bx	lr
 800435c:	20000cc4 	.word	0x20000cc4

08004360 <sem2_setup.lto_priv.129>:
 8004360:	4b02      	ldr	r3, [pc, #8]	; (800436c <sem2_setup.lto_priv.129+0xc>)
 8004362:	2200      	movs	r2, #0
 8004364:	605b      	str	r3, [r3, #4]
 8004366:	601b      	str	r3, [r3, #0]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	4770      	bx	lr
 800436c:	20000cc4 	.word	0x20000cc4

08004370 <sem1_setup.lto_priv.127>:
 8004370:	4b02      	ldr	r3, [pc, #8]	; (800437c <sem1_setup.lto_priv.127+0xc>)
 8004372:	2200      	movs	r2, #0
 8004374:	605b      	str	r3, [r3, #4]
 8004376:	601b      	str	r3, [r3, #0]
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	4770      	bx	lr
 800437c:	20000cc4 	.word	0x20000cc4

08004380 <mtx5_execute.lto_priv.139>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004384:	4d3b      	ldr	r5, [pc, #236]	; (8004474 <mtx5_execute.lto_priv.139+0xf4>)
 8004386:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004388:	69aa      	ldr	r2, [r5, #24]
 800438a:	6896      	ldr	r6, [r2, #8]
 800438c:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8004390:	4c39      	ldr	r4, [pc, #228]	; (8004478 <mtx5_execute.lto_priv.139+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8004392:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d05e      	beq.n	8004458 <mtx5_execute.lto_priv.139+0xd8>
 800439a:	2300      	movs	r3, #0
 800439c:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 80043a0:	2001      	movs	r0, #1
 80043a2:	f001 fda5 	bl	8005ef0 <_test_assert>
 80043a6:	4601      	mov	r1, r0
 80043a8:	b108      	cbz	r0, 80043ae <mtx5_execute.lto_priv.139+0x2e>
 80043aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ae:	2320      	movs	r3, #32
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	68a3      	ldr	r3, [r4, #8]
 80043b6:	4a30      	ldr	r2, [pc, #192]	; (8004478 <mtx5_execute.lto_priv.139+0xf8>)
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d054      	beq.n	8004466 <mtx5_execute.lto_priv.139+0xe6>
 80043bc:	2101      	movs	r1, #1
 80043be:	2300      	movs	r3, #0
 80043c0:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 80043c4:	2002      	movs	r0, #2
 80043c6:	f001 fd93 	bl	8005ef0 <_test_assert>
 80043ca:	4607      	mov	r7, r0
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1ec      	bne.n	80043aa <mtx5_execute.lto_priv.139+0x2a>
 80043d0:	2320      	movs	r3, #32
 80043d2:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 80043d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004478 <mtx5_execute.lto_priv.139+0xf8>
 80043da:	4640      	mov	r0, r8
 80043dc:	f002 fe90 	bl	8007100 <chMtxUnlockS>
 80043e0:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 80043e4:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 80043e6:	2003      	movs	r0, #3
 80043e8:	1b09      	subs	r1, r1, r4
 80043ea:	fab1 f181 	clz	r1, r1
 80043ee:	0949      	lsrs	r1, r1, #5
 80043f0:	f001 fd7e 	bl	8005ef0 <_test_assert>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d1d8      	bne.n	80043aa <mtx5_execute.lto_priv.139+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 80043f8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80043fc:	2004      	movs	r0, #4
 80043fe:	fab1 f181 	clz	r1, r1
 8004402:	0949      	lsrs	r1, r1, #5
 8004404:	f001 fd74 	bl	8005ef0 <_test_assert>
 8004408:	2800      	cmp	r0, #0
 800440a:	d1ce      	bne.n	80043aa <mtx5_execute.lto_priv.139+0x2a>
 800440c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 800440e:	2005      	movs	r0, #5
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	1a71      	subs	r1, r6, r1
 8004414:	fab1 f181 	clz	r1, r1
 8004418:	0949      	lsrs	r1, r1, #5
 800441a:	f001 fd69 	bl	8005ef0 <_test_assert>
 800441e:	2800      	cmp	r0, #0
 8004420:	d1c3      	bne.n	80043aa <mtx5_execute.lto_priv.139+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8004422:	4640      	mov	r0, r8
 8004424:	f002 fefc 	bl	8007220 <chMtxLock>
  chMtxUnlockAll();
 8004428:	f002 fe3a 	bl	80070a0 <chMtxUnlockAll>
 800442c:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8004430:	2006      	movs	r0, #6
 8004432:	ebc8 0101 	rsb	r1, r8, r1
 8004436:	fab1 f181 	clz	r1, r1
 800443a:	0949      	lsrs	r1, r1, #5
 800443c:	f001 fd58 	bl	8005ef0 <_test_assert>
 8004440:	2800      	cmp	r0, #0
 8004442:	d1b2      	bne.n	80043aa <mtx5_execute.lto_priv.139+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004444:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8004448:	2007      	movs	r0, #7
 800444a:	fab1 f181 	clz	r1, r1
}
 800444e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8004452:	0949      	lsrs	r1, r1, #5
 8004454:	f001 bd4c 	b.w	8005ef0 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004458:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 800445a:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 800445c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800445e:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8004460:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8004462:	639c      	str	r4, [r3, #56]	; 0x38
 8004464:	e799      	b.n	800439a <mtx5_execute.lto_priv.139+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8004466:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8004468:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800446a:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 800446c:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 800446e:	639a      	str	r2, [r3, #56]	; 0x38
 8004470:	e7a5      	b.n	80043be <mtx5_execute.lto_priv.139+0x3e>
 8004472:	bf00      	nop
 8004474:	20001de0 	.word	0x20001de0
 8004478:	20000c5c 	.word	0x20000c5c
 800447c:	f3af 8000 	nop.w

08004480 <mtx4_execute.lto_priv.137>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8004480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004484:	4d84      	ldr	r5, [pc, #528]	; (8004698 <mtx4_execute.lto_priv.137+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8004486:	4b85      	ldr	r3, [pc, #532]	; (800469c <mtx4_execute.lto_priv.137+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004488:	69aa      	ldr	r2, [r5, #24]
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 800448a:	b082      	sub	sp, #8
 800448c:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 800448e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8004492:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8004494:	463a      	mov	r2, r7
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4881      	ldr	r0, [pc, #516]	; (80046a0 <mtx4_execute.lto_priv.137+0x220>)
 800449a:	4b82      	ldr	r3, [pc, #520]	; (80046a4 <mtx4_execute.lto_priv.137+0x224>)
 800449c:	f002 fcc8 	bl	8006e30 <chThdCreateStatic>
 80044a0:	4e81      	ldr	r6, [pc, #516]	; (80046a8 <mtx4_execute.lto_priv.137+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80044a2:	4b82      	ldr	r3, [pc, #520]	; (80046ac <mtx4_execute.lto_priv.137+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80044a4:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80044a8:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80044aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80044ae:	4642      	mov	r2, r8
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	487f      	ldr	r0, [pc, #508]	; (80046b0 <mtx4_execute.lto_priv.137+0x230>)
 80044b4:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <mtx4_execute.lto_priv.137+0x234>)
 80044b6:	f002 fcbb 	bl	8006e30 <chThdCreateStatic>
 80044ba:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80044bc:	487e      	ldr	r0, [pc, #504]	; (80046b8 <mtx4_execute.lto_priv.137+0x238>)
 80044be:	f002 feaf 	bl	8007220 <chMtxLock>
 80044c2:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 80044c4:	2001      	movs	r0, #1
 80044c6:	6899      	ldr	r1, [r3, #8]
 80044c8:	1a61      	subs	r1, r4, r1
 80044ca:	fab1 f181 	clz	r1, r1
 80044ce:	0949      	lsrs	r1, r1, #5
 80044d0:	f001 fd0e 	bl	8005ef0 <_test_assert>
 80044d4:	b110      	cbz	r0, 80044dc <mtx4_execute.lto_priv.137+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 80044d6:	b002      	add	sp, #8
 80044d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 80044dc:	20c8      	movs	r0, #200	; 0xc8
 80044de:	f002 fdb7 	bl	8007050 <chThdSleep>
 80044e2:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 80044e4:	2002      	movs	r0, #2
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	1a79      	subs	r1, r7, r1
 80044ea:	fab1 f181 	clz	r1, r1
 80044ee:	0949      	lsrs	r1, r1, #5
 80044f0:	f001 fcfe 	bl	8005ef0 <_test_assert>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1ee      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chMtxLock(&m1);
 80044f8:	4870      	ldr	r0, [pc, #448]	; (80046bc <mtx4_execute.lto_priv.137+0x23c>)
 80044fa:	f002 fe91 	bl	8007220 <chMtxLock>
 80044fe:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8004500:	2003      	movs	r0, #3
 8004502:	6899      	ldr	r1, [r3, #8]
 8004504:	1a79      	subs	r1, r7, r1
 8004506:	fab1 f181 	clz	r1, r1
 800450a:	0949      	lsrs	r1, r1, #5
 800450c:	f001 fcf0 	bl	8005ef0 <_test_assert>
 8004510:	2800      	cmp	r0, #0
 8004512:	d1e0      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chThdSleepMilliseconds(100);
 8004514:	20c8      	movs	r0, #200	; 0xc8
 8004516:	f002 fd9b 	bl	8007050 <chThdSleep>
 800451a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800451c:	2004      	movs	r0, #4
 800451e:	6899      	ldr	r1, [r3, #8]
 8004520:	ebc1 0108 	rsb	r1, r1, r8
 8004524:	fab1 f181 	clz	r1, r1
 8004528:	0949      	lsrs	r1, r1, #5
 800452a:	f001 fce1 	bl	8005ef0 <_test_assert>
 800452e:	2800      	cmp	r0, #0
 8004530:	d1d1      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chMtxUnlock(&m1);
 8004532:	4862      	ldr	r0, [pc, #392]	; (80046bc <mtx4_execute.lto_priv.137+0x23c>)
 8004534:	f002 fbe4 	bl	8006d00 <chMtxUnlock>
 8004538:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 800453a:	2005      	movs	r0, #5
 800453c:	6899      	ldr	r1, [r3, #8]
 800453e:	1a79      	subs	r1, r7, r1
 8004540:	fab1 f181 	clz	r1, r1
 8004544:	0949      	lsrs	r1, r1, #5
 8004546:	f001 fcd3 	bl	8005ef0 <_test_assert>
 800454a:	2800      	cmp	r0, #0
 800454c:	d1c3      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chThdSleepMilliseconds(100);
 800454e:	20c8      	movs	r0, #200	; 0xc8
 8004550:	f002 fd7e 	bl	8007050 <chThdSleep>
 8004554:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8004556:	2006      	movs	r0, #6
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	1a79      	subs	r1, r7, r1
 800455c:	fab1 f181 	clz	r1, r1
 8004560:	0949      	lsrs	r1, r1, #5
 8004562:	f001 fcc5 	bl	8005ef0 <_test_assert>
 8004566:	2800      	cmp	r0, #0
 8004568:	d1b5      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chMtxUnlockAll();
 800456a:	f002 fd99 	bl	80070a0 <chMtxUnlockAll>
 800456e:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8004570:	2007      	movs	r0, #7
 8004572:	6899      	ldr	r1, [r3, #8]
 8004574:	1a61      	subs	r1, r4, r1
 8004576:	fab1 f181 	clz	r1, r1
 800457a:	0949      	lsrs	r1, r1, #5
 800457c:	f001 fcb8 	bl	8005ef0 <_test_assert>
 8004580:	2800      	cmp	r0, #0
 8004582:	d1a8      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  test_wait_threads();
 8004584:	f001 fb2c 	bl	8005be0 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <mtx4_execute.lto_priv.137+0x240>)
 800458a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	463a      	mov	r2, r7
 8004592:	4b44      	ldr	r3, [pc, #272]	; (80046a4 <mtx4_execute.lto_priv.137+0x224>)
 8004594:	4842      	ldr	r0, [pc, #264]	; (80046a0 <mtx4_execute.lto_priv.137+0x220>)
 8004596:	f002 fc4b 	bl	8006e30 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800459a:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <mtx4_execute.lto_priv.137+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 800459c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800459e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4642      	mov	r2, r8
 80045a6:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <mtx4_execute.lto_priv.137+0x234>)
 80045a8:	4841      	ldr	r0, [pc, #260]	; (80046b0 <mtx4_execute.lto_priv.137+0x230>)
 80045aa:	f002 fc41 	bl	8006e30 <chThdCreateStatic>
 80045ae:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80045b0:	4841      	ldr	r0, [pc, #260]	; (80046b8 <mtx4_execute.lto_priv.137+0x238>)
 80045b2:	f002 fe35 	bl	8007220 <chMtxLock>
 80045b6:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 80045b8:	2008      	movs	r0, #8
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	1a61      	subs	r1, r4, r1
 80045be:	fab1 f181 	clz	r1, r1
 80045c2:	0949      	lsrs	r1, r1, #5
 80045c4:	f001 fc94 	bl	8005ef0 <_test_assert>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d184      	bne.n	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chThdSleepMilliseconds(100);
 80045cc:	20c8      	movs	r0, #200	; 0xc8
 80045ce:	f002 fd3f 	bl	8007050 <chThdSleep>
 80045d2:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 80045d4:	2009      	movs	r0, #9
 80045d6:	6899      	ldr	r1, [r3, #8]
 80045d8:	1a7b      	subs	r3, r7, r1
 80045da:	4259      	negs	r1, r3
 80045dc:	4159      	adcs	r1, r3
 80045de:	f001 fc87 	bl	8005ef0 <_test_assert>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f47f af77 	bne.w	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chMtxLock(&m1);
 80045e8:	4834      	ldr	r0, [pc, #208]	; (80046bc <mtx4_execute.lto_priv.137+0x23c>)
 80045ea:	f002 fe19 	bl	8007220 <chMtxLock>
 80045ee:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 80045f0:	200a      	movs	r0, #10
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	ebc1 0c07 	rsb	ip, r1, r7
 80045f8:	f1dc 0100 	rsbs	r1, ip, #0
 80045fc:	eb41 010c 	adc.w	r1, r1, ip
 8004600:	f001 fc76 	bl	8005ef0 <_test_assert>
 8004604:	2800      	cmp	r0, #0
 8004606:	f47f af66 	bne.w	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chThdSleepMilliseconds(100);
 800460a:	20c8      	movs	r0, #200	; 0xc8
 800460c:	f002 fd20 	bl	8007050 <chThdSleep>
 8004610:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8004612:	200b      	movs	r0, #11
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	ebc1 0e08 	rsb	lr, r1, r8
 800461a:	f1de 0100 	rsbs	r1, lr, #0
 800461e:	eb41 010e 	adc.w	r1, r1, lr
 8004622:	f001 fc65 	bl	8005ef0 <_test_assert>
 8004626:	4606      	mov	r6, r0
 8004628:	2800      	cmp	r0, #0
 800462a:	f47f af54 	bne.w	80044d6 <mtx4_execute.lto_priv.137+0x56>
 800462e:	2320      	movs	r3, #32
 8004630:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8004634:	4821      	ldr	r0, [pc, #132]	; (80046bc <mtx4_execute.lto_priv.137+0x23c>)
 8004636:	f002 fd63 	bl	8007100 <chMtxUnlockS>
  chSchRescheduleS();
 800463a:	f002 fb09 	bl	8006c50 <chSchRescheduleS>
 800463e:	f386 8811 	msr	BASEPRI, r6
 8004642:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8004644:	200c      	movs	r0, #12
 8004646:	6899      	ldr	r1, [r3, #8]
 8004648:	1a7e      	subs	r6, r7, r1
 800464a:	4271      	negs	r1, r6
 800464c:	4171      	adcs	r1, r6
 800464e:	f001 fc4f 	bl	8005ef0 <_test_assert>
 8004652:	2800      	cmp	r0, #0
 8004654:	f47f af3f 	bne.w	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chThdSleepMilliseconds(100);
 8004658:	20c8      	movs	r0, #200	; 0xc8
 800465a:	f002 fcf9 	bl	8007050 <chThdSleep>
 800465e:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8004660:	200d      	movs	r0, #13
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	1a7a      	subs	r2, r7, r1
 8004666:	4251      	negs	r1, r2
 8004668:	4151      	adcs	r1, r2
 800466a:	f001 fc41 	bl	8005ef0 <_test_assert>
 800466e:	2800      	cmp	r0, #0
 8004670:	f47f af31 	bne.w	80044d6 <mtx4_execute.lto_priv.137+0x56>
  chMtxUnlockAll();
 8004674:	f002 fd14 	bl	80070a0 <chMtxUnlockAll>
 8004678:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 800467a:	200e      	movs	r0, #14
 800467c:	6899      	ldr	r1, [r3, #8]
 800467e:	1a63      	subs	r3, r4, r1
 8004680:	4259      	negs	r1, r3
 8004682:	4159      	adcs	r1, r3
 8004684:	f001 fc34 	bl	8005ef0 <_test_assert>
 8004688:	2800      	cmp	r0, #0
 800468a:	f47f af24 	bne.w	80044d6 <mtx4_execute.lto_priv.137+0x56>
  test_wait_threads();
}
 800468e:	b002      	add	sp, #8
 8004690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8004694:	f001 baa4 	b.w	8005be0 <test_wait_threads>
 8004698:	20001de0 	.word	0x20001de0
 800469c:	080099d4 	.word	0x080099d4
 80046a0:	20001768 	.word	0x20001768
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	20001480 	.word	0x20001480
 80046ac:	080099d0 	.word	0x080099d0
 80046b0:	200018b0 	.word	0x200018b0
 80046b4:	080046f1 	.word	0x080046f1
 80046b8:	20000c6c 	.word	0x20000c6c
 80046bc:	20000c5c 	.word	0x20000c5c
 80046c0:	0800979c 	.word	0x0800979c
 80046c4:	080099d8 	.word	0x080099d8
 80046c8:	f3af 8000 	nop.w
 80046cc:	f3af 8000 	nop.w

080046d0 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 80046d0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 80046d2:	4c06      	ldr	r4, [pc, #24]	; (80046ec <thread4a+0x1c>)
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80046d4:	2064      	movs	r0, #100	; 0x64
 80046d6:	f002 fcbb 	bl	8007050 <chThdSleep>
  chMtxLock(&m2);
 80046da:	4620      	mov	r0, r4
 80046dc:	f002 fda0 	bl	8007220 <chMtxLock>
  chMtxUnlock(&m2);
 80046e0:	4620      	mov	r0, r4
 80046e2:	f002 fb0d 	bl	8006d00 <chMtxUnlock>
  return 0;
}
 80046e6:	2000      	movs	r0, #0
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	bf00      	nop
 80046ec:	20000c6c 	.word	0x20000c6c

080046f0 <thread4b>:

static msg_t thread4b(void *p) {
 80046f0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 80046f2:	4c06      	ldr	r4, [pc, #24]	; (800470c <thread4b+0x1c>)
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 80046f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80046f8:	f002 fcaa 	bl	8007050 <chThdSleep>
  chMtxLock(&m1);
 80046fc:	4620      	mov	r0, r4
 80046fe:	f002 fd8f 	bl	8007220 <chMtxLock>
  chMtxUnlock(&m1);
 8004702:	4620      	mov	r0, r4
 8004704:	f002 fafc 	bl	8006d00 <chMtxUnlock>
  return 0;
}
 8004708:	2000      	movs	r0, #0
 800470a:	bd10      	pop	{r4, pc}
 800470c:	20000c5c 	.word	0x20000c5c

08004710 <mtx1_execute.lto_priv.135>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 8004710:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004712:	4e29      	ldr	r6, [pc, #164]	; (80047b8 <mtx1_execute.lto_priv.135+0xa8>)
 8004714:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004716:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8004718:	4828      	ldr	r0, [pc, #160]	; (80047bc <mtx1_execute.lto_priv.135+0xac>)
 800471a:	689c      	ldr	r4, [r3, #8]
 800471c:	f002 fd80 	bl	8007220 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <mtx1_execute.lto_priv.135+0xb0>)
 8004722:	1c62      	adds	r2, r4, #1
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800472a:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <mtx1_execute.lto_priv.135+0xb4>)
 800472c:	4826      	ldr	r0, [pc, #152]	; (80047c8 <mtx1_execute.lto_priv.135+0xb8>)
 800472e:	f002 fb7f 	bl	8006e30 <chThdCreateStatic>
 8004732:	4d26      	ldr	r5, [pc, #152]	; (80047cc <mtx1_execute.lto_priv.135+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8004734:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <mtx1_execute.lto_priv.135+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8004736:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8004738:	1ca2      	adds	r2, r4, #2
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004740:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <mtx1_execute.lto_priv.135+0xb4>)
 8004742:	4824      	ldr	r0, [pc, #144]	; (80047d4 <mtx1_execute.lto_priv.135+0xc4>)
 8004744:	f002 fb74 	bl	8006e30 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8004748:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <mtx1_execute.lto_priv.135+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800474a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800474c:	1ce2      	adds	r2, r4, #3
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <mtx1_execute.lto_priv.135+0xb4>)
 8004756:	4821      	ldr	r0, [pc, #132]	; (80047dc <mtx1_execute.lto_priv.135+0xcc>)
 8004758:	f002 fb6a 	bl	8006e30 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800475c:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <mtx1_execute.lto_priv.135+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800475e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8004760:	1d22      	adds	r2, r4, #4
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <mtx1_execute.lto_priv.135+0xb4>)
 800476a:	481e      	ldr	r0, [pc, #120]	; (80047e4 <mtx1_execute.lto_priv.135+0xd4>)
 800476c:	f002 fb60 	bl	8006e30 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <mtx1_execute.lto_priv.135+0xd8>)
 8004772:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004776:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8004778:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	481b      	ldr	r0, [pc, #108]	; (80047ec <mtx1_execute.lto_priv.135+0xdc>)
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <mtx1_execute.lto_priv.135+0xb4>)
 8004780:	f002 fb56 	bl	8006e30 <chThdCreateStatic>
 8004784:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8004786:	480d      	ldr	r0, [pc, #52]	; (80047bc <mtx1_execute.lto_priv.135+0xac>)
 8004788:	f002 faba 	bl	8006d00 <chMtxUnlock>
  test_wait_threads();
 800478c:	f001 fa28 	bl	8005be0 <test_wait_threads>
 8004790:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8004792:	2001      	movs	r0, #1
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	1a61      	subs	r1, r4, r1
 8004798:	fab1 f181 	clz	r1, r1
 800479c:	0949      	lsrs	r1, r1, #5
 800479e:	f001 fba7 	bl	8005ef0 <_test_assert>
 80047a2:	b108      	cbz	r0, 80047a8 <mtx1_execute.lto_priv.135+0x98>
  test_assert_sequence(2, "ABCDE");
}
 80047a4:	b002      	add	sp, #8
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80047a8:	4911      	ldr	r1, [pc, #68]	; (80047f0 <mtx1_execute.lto_priv.135+0xe0>)
 80047aa:	2002      	movs	r0, #2
}
 80047ac:	b002      	add	sp, #8
 80047ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80047b2:	f001 ba65 	b.w	8005c80 <_test_assert_sequence>
 80047b6:	bf00      	nop
 80047b8:	20001de0 	.word	0x20001de0
 80047bc:	20000c5c 	.word	0x20000c5c
 80047c0:	08009a54 	.word	0x08009a54
 80047c4:	08004801 	.word	0x08004801
 80047c8:	20001768 	.word	0x20001768
 80047cc:	20001480 	.word	0x20001480
 80047d0:	0800979c 	.word	0x0800979c
 80047d4:	200018b0 	.word	0x200018b0
 80047d8:	080099d8 	.word	0x080099d8
 80047dc:	200019f8 	.word	0x200019f8
 80047e0:	080099d4 	.word	0x080099d4
 80047e4:	20001b40 	.word	0x20001b40
 80047e8:	080099d0 	.word	0x080099d0
 80047ec:	20001c88 	.word	0x20001c88
 80047f0:	08009a50 	.word	0x08009a50
 80047f4:	f3af 8000 	nop.w
 80047f8:	f3af 8000 	nop.w
 80047fc:	f3af 8000 	nop.w

08004800 <thread1.lto_priv.122>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8004804:	4c05      	ldr	r4, [pc, #20]	; (800481c <thread1.lto_priv.122+0x1c>)
 8004806:	4620      	mov	r0, r4
 8004808:	f002 fd0a 	bl	8007220 <chMtxLock>
  test_emit_token(*(char *)p);
 800480c:	7828      	ldrb	r0, [r5, #0]
 800480e:	f001 fb87 	bl	8005f20 <test_emit_token>
  chMtxUnlock(&m1);
 8004812:	4620      	mov	r0, r4
 8004814:	f002 fa74 	bl	8006d00 <chMtxUnlock>
  return 0;
}
 8004818:	2000      	movs	r0, #0
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20000c5c 	.word	0x20000c5c

08004820 <thread1.lto_priv.121>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 8004820:	b510      	push	{r4, lr}
 8004822:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8004824:	4803      	ldr	r0, [pc, #12]	; (8004834 <thread1.lto_priv.121+0x14>)
 8004826:	f002 fb5b 	bl	8006ee0 <chSemWait>
  test_emit_token(*(char *)p);
 800482a:	7820      	ldrb	r0, [r4, #0]
 800482c:	f001 fb78 	bl	8005f20 <test_emit_token>
  return 0;
}
 8004830:	2000      	movs	r0, #0
 8004832:	bd10      	pop	{r4, pc}
 8004834:	20000cc4 	.word	0x20000cc4
 8004838:	f3af 8000 	nop.w
 800483c:	f3af 8000 	nop.w

08004840 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 8004840:	b508      	push	{r3, lr}
 8004842:	2220      	movs	r2, #32
 8004844:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8004848:	6883      	ldr	r3, [r0, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	dd05      	ble.n	800485a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800484e:	f002 f9ff 	bl	8006c50 <chSchRescheduleS>
 8004852:	2000      	movs	r0, #0
 8004854:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 8004858:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800485a:	f002 fcf1 	bl	8007240 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800485e:	f002 f9f7 	bl	8006c50 <chSchRescheduleS>
 8004862:	2000      	movs	r0, #0
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	bd08      	pop	{r3, pc}
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w

08004870 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 8004870:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8004872:	2064      	movs	r0, #100	; 0x64
 8004874:	f002 fbec 	bl	8007050 <chThdSleep>
 8004878:	2320      	movs	r3, #32
 800487a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 800487e:	4804      	ldr	r0, [pc, #16]	; (8004890 <thread2+0x20>)
 8004880:	f002 fcde 	bl	8007240 <chSemSignalI>
  chSchRescheduleS();
 8004884:	f002 f9e4 	bl	8006c50 <chSchRescheduleS>
 8004888:	2000      	movs	r0, #0
 800488a:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 800488e:	bd08      	pop	{r3, pc}
 8004890:	20000cc4 	.word	0x20000cc4
 8004894:	f3af 8000 	nop.w
 8004898:	f3af 8000 	nop.w
 800489c:	f3af 8000 	nop.w

080048a0 <sem4_execute.lto_priv.133>:

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}

static void sem4_execute(void) {
 80048a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a2:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80048a4:	ad03      	add	r5, sp, #12
 80048a6:	2400      	movs	r4, #0
 80048a8:	9504      	str	r5, [sp, #16]
 80048aa:	9503      	str	r5, [sp, #12]
 80048ac:	9405      	str	r4, [sp, #20]
 80048ae:	2620      	movs	r6, #32
 80048b0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80048b4:	4628      	mov	r0, r5
 80048b6:	4621      	mov	r1, r4
 80048b8:	f002 fcda 	bl	8007270 <chSemResetI>
  chSchRescheduleS();
 80048bc:	f002 f9c8 	bl	8006c50 <chSchRescheduleS>
 80048c0:	f384 8811 	msr	BASEPRI, r4
 80048c4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 80048c8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80048ca:	2001      	movs	r0, #1
 80048cc:	42a1      	cmp	r1, r4
 80048ce:	bfcc      	ite	gt
 80048d0:	2100      	movgt	r1, #0
 80048d2:	2101      	movle	r1, #1
 80048d4:	f001 fb0c 	bl	8005ef0 <_test_assert>
 80048d8:	4607      	mov	r7, r0
 80048da:	b118      	cbz	r0, 80048e4 <sem4_execute.lto_priv.133+0x44>
 80048dc:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 80048e0:	b007      	add	sp, #28
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80048e8:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <sem4_execute.lto_priv.133+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80048ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	483e      	ldr	r0, [pc, #248]	; (80049ec <sem4_execute.lto_priv.133+0x14c>)
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <sem4_execute.lto_priv.133+0x150>)
 80048f6:	3a01      	subs	r2, #1
 80048f8:	9500      	str	r5, [sp, #0]
 80048fa:	f002 fa99 	bl	8006e30 <chThdCreateStatic>
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <sem4_execute.lto_priv.133+0x154>)
 8004900:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8004902:	4628      	mov	r0, r5
 8004904:	f002 faec 	bl	8006ee0 <chSemWait>
 8004908:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 800490c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800490e:	2002      	movs	r0, #2
 8004910:	2900      	cmp	r1, #0
 8004912:	bfcc      	ite	gt
 8004914:	2100      	movgt	r1, #0
 8004916:	2101      	movle	r1, #1
 8004918:	f001 faea 	bl	8005ef0 <_test_assert>
 800491c:	b118      	cbz	r0, 8004926 <sem4_execute.lto_priv.133+0x86>
 800491e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8004922:	b007      	add	sp, #28
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004926:	f380 8811 	msr	BASEPRI, r0
 800492a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800492e:	9b05      	ldr	r3, [sp, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	dd23      	ble.n	800497c <sem4_execute.lto_priv.133+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004934:	f002 f98c 	bl	8006c50 <chSchRescheduleS>
 8004938:	2400      	movs	r4, #0
 800493a:	f384 8811 	msr	BASEPRI, r4
 800493e:	2720      	movs	r7, #32
 8004940:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8004944:	9905      	ldr	r1, [sp, #20]
 8004946:	2003      	movs	r0, #3
 8004948:	42a1      	cmp	r1, r4
 800494a:	bfd4      	ite	le
 800494c:	2100      	movle	r1, #0
 800494e:	2101      	movgt	r1, #1
 8004950:	f001 face 	bl	8005ef0 <_test_assert>
 8004954:	4606      	mov	r6, r0
 8004956:	2800      	cmp	r0, #0
 8004958:	d1c0      	bne.n	80048dc <sem4_execute.lto_priv.133+0x3c>
 800495a:	f380 8811 	msr	BASEPRI, r0
 800495e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8004962:	9905      	ldr	r1, [sp, #20]
 8004964:	2004      	movs	r0, #4
 8004966:	f1a1 0101 	sub.w	r1, r1, #1
 800496a:	fab1 f181 	clz	r1, r1
 800496e:	0949      	lsrs	r1, r1, #5
 8004970:	f001 fabe 	bl	8005ef0 <_test_assert>
 8004974:	b130      	cbz	r0, 8004984 <sem4_execute.lto_priv.133+0xe4>
 8004976:	f386 8811 	msr	BASEPRI, r6
 800497a:	e7b1      	b.n	80048e0 <sem4_execute.lto_priv.133+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800497c:	4628      	mov	r0, r5
 800497e:	f002 fc5f 	bl	8007240 <chSemSignalI>
 8004982:	e7d7      	b.n	8004934 <sem4_execute.lto_priv.133+0x94>
 8004984:	f380 8811 	msr	BASEPRI, r0
 8004988:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800498c:	9b05      	ldr	r3, [sp, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dd23      	ble.n	80049da <sem4_execute.lto_priv.133+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004992:	f002 f95d 	bl	8006c50 <chSchRescheduleS>
 8004996:	2400      	movs	r4, #0
 8004998:	f384 8811 	msr	BASEPRI, r4
 800499c:	2620      	movs	r6, #32
 800499e:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80049a2:	9905      	ldr	r1, [sp, #20]
 80049a4:	2003      	movs	r0, #3
 80049a6:	42a1      	cmp	r1, r4
 80049a8:	bfd4      	ite	le
 80049aa:	2100      	movle	r1, #0
 80049ac:	2101      	movgt	r1, #1
 80049ae:	f001 fa9f 	bl	8005ef0 <_test_assert>
 80049b2:	4605      	mov	r5, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d191      	bne.n	80048dc <sem4_execute.lto_priv.133+0x3c>
 80049b8:	f380 8811 	msr	BASEPRI, r0
 80049bc:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80049c0:	9905      	ldr	r1, [sp, #20]
 80049c2:	2005      	movs	r0, #5
 80049c4:	f1a1 0101 	sub.w	r1, r1, #1
 80049c8:	fab1 f181 	clz	r1, r1
 80049cc:	0949      	lsrs	r1, r1, #5
 80049ce:	f001 fa8f 	bl	8005ef0 <_test_assert>
 80049d2:	b130      	cbz	r0, 80049e2 <sem4_execute.lto_priv.133+0x142>
 80049d4:	f385 8811 	msr	BASEPRI, r5
 80049d8:	e782      	b.n	80048e0 <sem4_execute.lto_priv.133+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80049da:	4628      	mov	r0, r5
 80049dc:	f002 fc30 	bl	8007240 <chSemSignalI>
 80049e0:	e7d7      	b.n	8004992 <sem4_execute.lto_priv.133+0xf2>
 80049e2:	f380 8811 	msr	BASEPRI, r0
 80049e6:	e77b      	b.n	80048e0 <sem4_execute.lto_priv.133+0x40>
 80049e8:	20001de0 	.word	0x20001de0
 80049ec:	20001768 	.word	0x20001768
 80049f0:	08004841 	.word	0x08004841
 80049f4:	20001480 	.word	0x20001480
 80049f8:	f3af 8000 	nop.w
 80049fc:	f3af 8000 	nop.w

08004a00 <sem3_execute.lto_priv.132>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8004a00:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004a02:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <sem3_execute.lto_priv.132+0x7c>)
 8004a04:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004a06:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a10:	3201      	adds	r2, #1
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	481a      	ldr	r0, [pc, #104]	; (8004a80 <sem3_execute.lto_priv.132+0x80>)
 8004a16:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <sem3_execute.lto_priv.132+0x84>)
 8004a18:	f002 fa0a 	bl	8006e30 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8004a1c:	4c1a      	ldr	r4, [pc, #104]	; (8004a88 <sem3_execute.lto_priv.132+0x88>)
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <sem3_execute.lto_priv.132+0x8c>)
 8004a20:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8004a22:	f004 f965 	bl	8008cf0 <chSemSignalWait.constprop.61>
 8004a26:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8004a28:	2001      	movs	r0, #1
 8004a2a:	1b09      	subs	r1, r1, r4
 8004a2c:	fab1 f181 	clz	r1, r1
 8004a30:	0949      	lsrs	r1, r1, #5
 8004a32:	f001 fa5d 	bl	8005ef0 <_test_assert>
 8004a36:	b108      	cbz	r0, 8004a3c <sem3_execute.lto_priv.132+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8004a3c:	68a1      	ldr	r1, [r4, #8]
 8004a3e:	2002      	movs	r0, #2
 8004a40:	fab1 f181 	clz	r1, r1
 8004a44:	0949      	lsrs	r1, r1, #5
 8004a46:	f001 fa53 	bl	8005ef0 <_test_assert>
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1f4      	bne.n	8004a38 <sem3_execute.lto_priv.132+0x38>

  chSemSignalWait(&sem1, &sem1);
 8004a4e:	f004 f94f 	bl	8008cf0 <chSemSignalWait.constprop.61>
 8004a52:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8004a54:	2003      	movs	r0, #3
 8004a56:	1b09      	subs	r1, r1, r4
 8004a58:	fab1 f181 	clz	r1, r1
 8004a5c:	0949      	lsrs	r1, r1, #5
 8004a5e:	f001 fa47 	bl	8005ef0 <_test_assert>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d1e8      	bne.n	8004a38 <sem3_execute.lto_priv.132+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8004a66:	68a1      	ldr	r1, [r4, #8]
 8004a68:	2004      	movs	r0, #4
 8004a6a:	fab1 f181 	clz	r1, r1
 8004a6e:	0949      	lsrs	r1, r1, #5
}
 8004a70:	b002      	add	sp, #8
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8004a76:	f001 ba3b 	b.w	8005ef0 <_test_assert>
 8004a7a:	bf00      	nop
 8004a7c:	20001de0 	.word	0x20001de0
 8004a80:	20001768 	.word	0x20001768
 8004a84:	08004a91 	.word	0x08004a91
 8004a88:	20000cc4 	.word	0x20000cc4
 8004a8c:	20001480 	.word	0x20001480

08004a90 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 8004a90:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8004a92:	4c04      	ldr	r4, [pc, #16]	; (8004aa4 <thread3+0x14>)
 8004a94:	4620      	mov	r0, r4
 8004a96:	f002 fa23 	bl	8006ee0 <chSemWait>
  chSemSignal(&sem1);
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f002 f960 	bl	8006d60 <chSemSignal>
  return 0;
}
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	bd10      	pop	{r4, pc}
 8004aa4:	20000cc4 	.word	0x20000cc4
 8004aa8:	f3af 8000 	nop.w
 8004aac:	f3af 8000 	nop.w

08004ab0 <sem2_execute.lto_priv.130>:
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 8004ab0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8004ab2:	4c4e      	ldr	r4, [pc, #312]	; (8004bec <sem2_execute.lto_priv.130+0x13c>)
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 8004ab4:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f002 faa1 	bl	8007000 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8004abe:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004ac2:	fab1 f181 	clz	r1, r1
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	0949      	lsrs	r1, r1, #5
 8004aca:	f001 fa11 	bl	8005ef0 <_test_assert>
 8004ace:	b108      	cbz	r0, 8004ad4 <sem2_execute.lto_priv.130+0x24>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8004ad6:	2002      	movs	r0, #2
 8004ad8:	1b09      	subs	r1, r1, r4
 8004ada:	fab1 f181 	clz	r1, r1
 8004ade:	0949      	lsrs	r1, r1, #5
 8004ae0:	f001 fa06 	bl	8005ef0 <_test_assert>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d1f3      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8004ae8:	68a1      	ldr	r1, [r4, #8]
 8004aea:	2003      	movs	r0, #3
 8004aec:	fab1 f181 	clz	r1, r1
 8004af0:	0949      	lsrs	r1, r1, #5
 8004af2:	f001 f9fd 	bl	8005ef0 <_test_assert>
 8004af6:	4605      	mov	r5, r0
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d1e9      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004afc:	4b3c      	ldr	r3, [pc, #240]	; (8004bf0 <sem2_execute.lto_priv.130+0x140>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004afe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	483b      	ldr	r0, [pc, #236]	; (8004bf4 <sem2_execute.lto_priv.130+0x144>)
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <sem2_execute.lto_priv.130+0x148>)
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	9500      	str	r5, [sp, #0]
 8004b0e:	f002 f98f 	bl	8006e30 <chThdCreateStatic>
 8004b12:	4b3a      	ldr	r3, [pc, #232]	; (8004bfc <sem2_execute.lto_priv.130+0x14c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8004b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8004b18:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f002 fa70 	bl	8007000 <chSemWaitTimeout>
 8004b20:	4605      	mov	r5, r0
  test_wait_threads();
 8004b22:	f001 f85d 	bl	8005be0 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8004b26:	fab5 f185 	clz	r1, r5
 8004b2a:	2004      	movs	r0, #4
 8004b2c:	0949      	lsrs	r1, r1, #5
 8004b2e:	f001 f9df 	bl	8005ef0 <_test_assert>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d1cc      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
 8004b36:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8004b38:	2005      	movs	r0, #5
 8004b3a:	1b09      	subs	r1, r1, r4
 8004b3c:	fab1 f181 	clz	r1, r1
 8004b40:	0949      	lsrs	r1, r1, #5
 8004b42:	f001 f9d5 	bl	8005ef0 <_test_assert>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d1c2      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8004b4a:	68a1      	ldr	r1, [r4, #8]
 8004b4c:	2006      	movs	r0, #6
 8004b4e:	fab1 f181 	clz	r1, r1
 8004b52:	0949      	lsrs	r1, r1, #5
 8004b54:	f001 f9cc 	bl	8005ef0 <_test_assert>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d1b8      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8004b5e:	f001 f82f 	bl	8005bc0 <test_wait_tick>
 8004b62:	2320      	movs	r3, #32
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b6c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8004b6e:	f385 8811 	msr	BASEPRI, r5
 8004b72:	2541      	movs	r5, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8004b74:	4628      	mov	r0, r5
 8004b76:	f001 f9d3 	bl	8005f20 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	481b      	ldr	r0, [pc, #108]	; (8004bec <sem2_execute.lto_priv.130+0x13c>)
 8004b7e:	f002 fa3f 	bl	8007000 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8004b82:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004b86:	fab1 f181 	clz	r1, r1
 8004b8a:	2007      	movs	r0, #7
 8004b8c:	0949      	lsrs	r1, r1, #5
 8004b8e:	f001 f9af 	bl	8005ef0 <_test_assert>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d19c      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
 8004b96:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8004b98:	2008      	movs	r0, #8
 8004b9a:	1b09      	subs	r1, r1, r4
 8004b9c:	fab1 f181 	clz	r1, r1
 8004ba0:	0949      	lsrs	r1, r1, #5
 8004ba2:	f001 f9a5 	bl	8005ef0 <_test_assert>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d192      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8004baa:	68a1      	ldr	r1, [r4, #8]
 8004bac:	2009      	movs	r0, #9
 8004bae:	fab1 f181 	clz	r1, r1
 8004bb2:	0949      	lsrs	r1, r1, #5
 8004bb4:	f001 f99c 	bl	8005ef0 <_test_assert>
 8004bb8:	3501      	adds	r5, #1
 8004bba:	b2ed      	uxtb	r5, r5
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d187      	bne.n	8004ad0 <sem2_execute.lto_priv.130+0x20>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 8004bc0:	2d46      	cmp	r5, #70	; 0x46
 8004bc2:	d1d7      	bne.n	8004b74 <sem2_execute.lto_priv.130+0xc4>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 8004bc4:	200a      	movs	r0, #10
 8004bc6:	490e      	ldr	r1, [pc, #56]	; (8004c00 <sem2_execute.lto_priv.130+0x150>)
 8004bc8:	f001 f85a 	bl	8005c80 <_test_assert_sequence>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	f47f af7f 	bne.w	8004ad0 <sem2_execute.lto_priv.130+0x20>
 8004bd2:	b2b6      	uxth	r6, r6

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8004bd4:	f506 71fa 	add.w	r1, r6, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8004bd8:	f506 72fc 	add.w	r2, r6, #504	; 0x1f8
 8004bdc:	b289      	uxth	r1, r1
 8004bde:	b292      	uxth	r2, r2
 8004be0:	200b      	movs	r0, #11
}
 8004be2:	b002      	add	sp, #8
 8004be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8004be8:	f001 b82a 	b.w	8005c40 <_test_assert_time_window>
 8004bec:	20000cc4 	.word	0x20000cc4
 8004bf0:	20001de0 	.word	0x20001de0
 8004bf4:	20001768 	.word	0x20001768
 8004bf8:	08004871 	.word	0x08004871
 8004bfc:	20001480 	.word	0x20001480
 8004c00:	08009a50 	.word	0x08009a50
 8004c04:	f3af 8000 	nop.w
 8004c08:	f3af 8000 	nop.w
 8004c0c:	f3af 8000 	nop.w

08004c10 <sem1_execute.lto_priv.128>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004c12:	4d4b      	ldr	r5, [pc, #300]	; (8004d40 <sem1_execute.lto_priv.128+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004c14:	4f4b      	ldr	r7, [pc, #300]	; (8004d44 <sem1_execute.lto_priv.128+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004c16:	69ab      	ldr	r3, [r5, #24]
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8004c18:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c20:	3205      	adds	r2, #5
 8004c22:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <sem1_execute.lto_priv.128+0x138>)
 8004c24:	4849      	ldr	r0, [pc, #292]	; (8004d4c <sem1_execute.lto_priv.128+0x13c>)
 8004c26:	9700      	str	r7, [sp, #0]
 8004c28:	f002 f902 	bl	8006e30 <chThdCreateStatic>
 8004c2c:	69ab      	ldr	r3, [r5, #24]
 8004c2e:	4c48      	ldr	r4, [pc, #288]	; (8004d50 <sem1_execute.lto_priv.128+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	4b48      	ldr	r3, [pc, #288]	; (8004d54 <sem1_execute.lto_priv.128+0x144>)
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004c34:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004c36:	3201      	adds	r2, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c3e:	4b42      	ldr	r3, [pc, #264]	; (8004d48 <sem1_execute.lto_priv.128+0x138>)
 8004c40:	4845      	ldr	r0, [pc, #276]	; (8004d58 <sem1_execute.lto_priv.128+0x148>)
 8004c42:	f002 f8f5 	bl	8006e30 <chThdCreateStatic>
 8004c46:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8004c48:	4b44      	ldr	r3, [pc, #272]	; (8004d5c <sem1_execute.lto_priv.128+0x14c>)
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8004c50:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8004c52:	3203      	adds	r2, #3
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4842      	ldr	r0, [pc, #264]	; (8004d60 <sem1_execute.lto_priv.128+0x150>)
 8004c58:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <sem1_execute.lto_priv.128+0x138>)
 8004c5a:	f002 f8e9 	bl	8006e30 <chThdCreateStatic>
 8004c5e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004c60:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <sem1_execute.lto_priv.128+0x154>)
 8004c62:	6892      	ldr	r2, [r2, #8]
 8004c64:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8004c68:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004c6a:	3204      	adds	r2, #4
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	483e      	ldr	r0, [pc, #248]	; (8004d68 <sem1_execute.lto_priv.128+0x158>)
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <sem1_execute.lto_priv.128+0x138>)
 8004c72:	f002 f8dd 	bl	8006e30 <chThdCreateStatic>
 8004c76:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004c78:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <sem1_execute.lto_priv.128+0x15c>)
 8004c7a:	6892      	ldr	r2, [r2, #8]
 8004c7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c80:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8004c82:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	483a      	ldr	r0, [pc, #232]	; (8004d70 <sem1_execute.lto_priv.128+0x160>)
 8004c88:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <sem1_execute.lto_priv.128+0x138>)
 8004c8a:	f002 f8d1 	bl	8006e30 <chThdCreateStatic>
 8004c8e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 8004c90:	4838      	ldr	r0, [pc, #224]	; (8004d74 <sem1_execute.lto_priv.128+0x164>)
 8004c92:	f002 f865 	bl	8006d60 <chSemSignal>
  chSemSignal(&sem1);
 8004c96:	4837      	ldr	r0, [pc, #220]	; (8004d74 <sem1_execute.lto_priv.128+0x164>)
 8004c98:	f002 f862 	bl	8006d60 <chSemSignal>
  chSemSignal(&sem1);
 8004c9c:	4835      	ldr	r0, [pc, #212]	; (8004d74 <sem1_execute.lto_priv.128+0x164>)
 8004c9e:	f002 f85f 	bl	8006d60 <chSemSignal>
  chSemSignal(&sem1);
 8004ca2:	4834      	ldr	r0, [pc, #208]	; (8004d74 <sem1_execute.lto_priv.128+0x164>)
 8004ca4:	f002 f85c 	bl	8006d60 <chSemSignal>
  chSemSignal(&sem1);
 8004ca8:	4832      	ldr	r0, [pc, #200]	; (8004d74 <sem1_execute.lto_priv.128+0x164>)
 8004caa:	f002 f859 	bl	8006d60 <chSemSignal>
  test_wait_threads();
 8004cae:	f000 ff97 	bl	8005be0 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	4930      	ldr	r1, [pc, #192]	; (8004d78 <sem1_execute.lto_priv.128+0x168>)
 8004cb6:	f000 ffe3 	bl	8005c80 <_test_assert_sequence>
 8004cba:	4606      	mov	r6, r0
 8004cbc:	b108      	cbz	r0, 8004cc2 <sem1_execute.lto_priv.128+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8004cbe:	b003      	add	sp, #12
 8004cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc2:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8004cc4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4820      	ldr	r0, [pc, #128]	; (8004d4c <sem1_execute.lto_priv.128+0x13c>)
 8004ccc:	3205      	adds	r2, #5
 8004cce:	9700      	str	r7, [sp, #0]
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <sem1_execute.lto_priv.128+0x138>)
 8004cd2:	f002 f8ad 	bl	8006e30 <chThdCreateStatic>
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	6020      	str	r0, [r4, #0]
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	4c25      	ldr	r4, [pc, #148]	; (8004d74 <sem1_execute.lto_priv.128+0x164>)
 8004ce0:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0)
 8004ce2:	4627      	mov	r7, r4
 8004ce4:	e002      	b.n	8004cec <sem1_execute.lto_priv.128+0xdc>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8004ce6:	2d01      	cmp	r5, #1
 8004ce8:	d00e      	beq.n	8004d08 <sem1_execute.lto_priv.128+0xf8>
 8004cea:	2501      	movs	r5, #1
    if (++sp->s_cnt <= 0)
 8004cec:	68a3      	ldr	r3, [r4, #8]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	dcf7      	bgt.n	8004ce6 <sem1_execute.lto_priv.128+0xd6>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8004cf6:	6838      	ldr	r0, [r7, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8004cf8:	6803      	ldr	r3, [r0, #0]
 8004cfa:	605f      	str	r7, [r3, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8004cfe:	f002 f9b7 	bl	8007070 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8004d02:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= 0)
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8004d04:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8004d06:	d1f0      	bne.n	8004cea <sem1_execute.lto_priv.128+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8004d08:	f001 ffa2 	bl	8006c50 <chSchRescheduleS>
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8004d12:	f000 ff65 	bl	8005be0 <test_wait_threads>
 8004d16:	2320      	movs	r3, #32
 8004d18:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8004d1c:	68a1      	ldr	r1, [r4, #8]
 8004d1e:	2002      	movs	r0, #2
 8004d20:	f1a1 0101 	sub.w	r1, r1, #1
 8004d24:	fab1 f181 	clz	r1, r1
 8004d28:	0949      	lsrs	r1, r1, #5
 8004d2a:	f001 f8e1 	bl	8005ef0 <_test_assert>
 8004d2e:	b918      	cbnz	r0, 8004d38 <sem1_execute.lto_priv.128+0x128>
 8004d30:	f380 8811 	msr	BASEPRI, r0
}
 8004d34:	b003      	add	sp, #12
 8004d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d38:	f385 8811 	msr	BASEPRI, r5
 8004d3c:	b003      	add	sp, #12
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d40:	20001de0 	.word	0x20001de0
 8004d44:	080099d0 	.word	0x080099d0
 8004d48:	08004821 	.word	0x08004821
 8004d4c:	20001768 	.word	0x20001768
 8004d50:	20001480 	.word	0x20001480
 8004d54:	080099d4 	.word	0x080099d4
 8004d58:	200018b0 	.word	0x200018b0
 8004d5c:	080099d8 	.word	0x080099d8
 8004d60:	200019f8 	.word	0x200019f8
 8004d64:	0800979c 	.word	0x0800979c
 8004d68:	20001b40 	.word	0x20001b40
 8004d6c:	08009a54 	.word	0x08009a54
 8004d70:	20001c88 	.word	0x20001c88
 8004d74:	20000cc4 	.word	0x20000cc4
 8004d78:	08009a50 	.word	0x08009a50
 8004d7c:	f3af 8000 	nop.w

08004d80 <thd4_execute.lto_priv.126>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8004d82:	f000 ff1d 	bl	8005bc0 <test_wait_tick>
 8004d86:	2620      	movs	r6, #32
 8004d88:	f386 8811 	msr	BASEPRI, r6
 8004d8c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8004d90:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004d92:	2300      	movs	r3, #0
 8004d94:	b2a4      	uxth	r4, r4
 8004d96:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8004d9a:	20c8      	movs	r0, #200	; 0xc8
 8004d9c:	f002 f958 	bl	8007050 <chThdSleep>
  test_assert_time_window(1,
 8004da0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8004da4:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8004da8:	b289      	uxth	r1, r1
 8004daa:	b292      	uxth	r2, r2
 8004dac:	2001      	movs	r0, #1
 8004dae:	f000 ff47 	bl	8005c40 <_test_assert_time_window>
 8004db2:	b100      	cbz	r0, 8004db6 <thd4_execute.lto_priv.126+0x36>
 8004db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db6:	f386 8811 	msr	BASEPRI, r6
 8004dba:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004dbc:	b2a4      	uxth	r4, r4
 8004dbe:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8004dc2:	20c8      	movs	r0, #200	; 0xc8
 8004dc4:	f002 f944 	bl	8007050 <chThdSleep>
  test_assert_time_window(2,
 8004dc8:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8004dcc:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8004dd0:	b289      	uxth	r1, r1
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	f000 ff33 	bl	8005c40 <_test_assert_time_window>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d1ea      	bne.n	8004db4 <thd4_execute.lto_priv.126+0x34>
 8004dde:	f386 8811 	msr	BASEPRI, r6
 8004de2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004de4:	b2a4      	uxth	r4, r4
 8004de6:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8004dea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004dee:	f002 f92f 	bl	8007050 <chThdSleep>
  test_assert_time_window(3,
 8004df2:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8004df6:	f204 72d2 	addw	r2, r4, #2002	; 0x7d2
 8004dfa:	b289      	uxth	r1, r1
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	2003      	movs	r0, #3
 8004e00:	f000 ff1e 	bl	8005c40 <_test_assert_time_window>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1d5      	bne.n	8004db4 <thd4_execute.lto_priv.126+0x34>
 8004e08:	f386 8811 	msr	BASEPRI, r6
 8004e0c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8004e0e:	b2a4      	uxth	r4, r4
 8004e10:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8004e14:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
 8004e18:	b2bf      	uxth	r7, r7
 8004e1a:	f386 8811 	msr	BASEPRI, r6
 8004e1e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0)
 8004e20:	1a79      	subs	r1, r7, r1
 8004e22:	b289      	uxth	r1, r1
 8004e24:	b111      	cbz	r1, 8004e2c <thd4_execute.lto_priv.126+0xac>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8004e26:	2008      	movs	r0, #8
 8004e28:	f002 f8a2 	bl	8006f70 <chSchGoSleepTimeoutS>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8004e32:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8004e36:	4639      	mov	r1, r7
                          time,
                          time + CH_CFG_ST_TIMEDELTA);
}
 8004e38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	2004      	movs	r0, #4
 8004e40:	f000 befe 	b.w	8005c40 <_test_assert_time_window>
 8004e44:	f3af 8000 	nop.w
 8004e48:	f3af 8000 	nop.w
 8004e4c:	f3af 8000 	nop.w

08004e50 <thd3_execute.lto_priv.125>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004e52:	4e49      	ldr	r6, [pc, #292]	; (8004f78 <thd3_execute.lto_priv.125+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004e54:	69b3      	ldr	r3, [r6, #24]
 8004e56:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8004e58:	1c65      	adds	r5, r4, #1
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f001 ff08 	bl	8006c70 <chThdSetPriority>
 8004e60:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8004e62:	1b39      	subs	r1, r7, r4
 8004e64:	fab1 f181 	clz	r1, r1
 8004e68:	2001      	movs	r0, #1
 8004e6a:	0949      	lsrs	r1, r1, #5
 8004e6c:	f001 f840 	bl	8005ef0 <_test_assert>
 8004e70:	b100      	cbz	r0, 8004e74 <thd3_execute.lto_priv.125+0x24>
 8004e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e74:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8004e76:	2002      	movs	r0, #2
 8004e78:	6899      	ldr	r1, [r3, #8]
 8004e7a:	1a69      	subs	r1, r5, r1
 8004e7c:	fab1 f181 	clz	r1, r1
 8004e80:	0949      	lsrs	r1, r1, #5
 8004e82:	f001 f835 	bl	8005ef0 <_test_assert>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d1f3      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f001 fef0 	bl	8006c70 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8004e90:	1a29      	subs	r1, r5, r0
 8004e92:	fab1 f181 	clz	r1, r1
 8004e96:	2003      	movs	r0, #3
 8004e98:	0949      	lsrs	r1, r1, #5
 8004e9a:	f001 f829 	bl	8005ef0 <_test_assert>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d1e7      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
 8004ea2:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8004ea4:	2004      	movs	r0, #4
 8004ea6:	6899      	ldr	r1, [r3, #8]
 8004ea8:	1a61      	subs	r1, r4, r1
 8004eaa:	fab1 f181 	clz	r1, r1
 8004eae:	0949      	lsrs	r1, r1, #5
 8004eb0:	f001 f81e 	bl	8005ef0 <_test_assert>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1dc      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
 8004eb8:	2320      	movs	r3, #32
 8004eba:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004ebe:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8004ec0:	6893      	ldr	r3, [r2, #8]
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	6093      	str	r3, [r2, #8]
 8004ec6:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004eca:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8004ecc:	1ca7      	adds	r7, r4, #2
 8004ece:	6899      	ldr	r1, [r3, #8]
 8004ed0:	2005      	movs	r0, #5
 8004ed2:	1a79      	subs	r1, r7, r1
 8004ed4:	fab1 f181 	clz	r1, r1
 8004ed8:	0949      	lsrs	r1, r1, #5
 8004eda:	f001 f809 	bl	8005ef0 <_test_assert>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d1c7      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f001 fec4 	bl	8006c70 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8004ee8:	1b01      	subs	r1, r0, r4
 8004eea:	fab1 f181 	clz	r1, r1
 8004eee:	2006      	movs	r0, #6
 8004ef0:	0949      	lsrs	r1, r1, #5
 8004ef2:	f000 fffd 	bl	8005ef0 <_test_assert>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d1bb      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8004efa:	69b3      	ldr	r3, [r6, #24]
 8004efc:	2007      	movs	r0, #7
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	1a79      	subs	r1, r7, r1
 8004f02:	fab1 f181 	clz	r1, r1
 8004f06:	0949      	lsrs	r1, r1, #5
 8004f08:	f000 fff2 	bl	8005ef0 <_test_assert>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d1b0      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8004f10:	69b3      	ldr	r3, [r6, #24]
 8004f12:	2008      	movs	r0, #8
 8004f14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004f16:	1a69      	subs	r1, r5, r1
 8004f18:	fab1 f181 	clz	r1, r1
 8004f1c:	0949      	lsrs	r1, r1, #5
 8004f1e:	f000 ffe7 	bl	8005ef0 <_test_assert>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d1a5      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8004f26:	1ce7      	adds	r7, r4, #3
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f001 fea1 	bl	8006c70 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8004f2e:	1a28      	subs	r0, r5, r0
 8004f30:	4241      	negs	r1, r0
 8004f32:	4141      	adcs	r1, r0
 8004f34:	2009      	movs	r0, #9
 8004f36:	f000 ffdb 	bl	8005ef0 <_test_assert>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d199      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8004f3e:	69b3      	ldr	r3, [r6, #24]
 8004f40:	200a      	movs	r0, #10
 8004f42:	6899      	ldr	r1, [r3, #8]
 8004f44:	1a7a      	subs	r2, r7, r1
 8004f46:	4251      	negs	r1, r2
 8004f48:	4151      	adcs	r1, r2
 8004f4a:	f000 ffd1 	bl	8005ef0 <_test_assert>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d18f      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8004f52:	69b3      	ldr	r3, [r6, #24]
 8004f54:	200b      	movs	r0, #11
 8004f56:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004f58:	1a7b      	subs	r3, r7, r1
 8004f5a:	4259      	negs	r1, r3
 8004f5c:	4159      	adcs	r1, r3
 8004f5e:	f000 ffc7 	bl	8005ef0 <_test_assert>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d185      	bne.n	8004e72 <thd3_execute.lto_priv.125+0x22>
 8004f66:	2320      	movs	r3, #32
 8004f68:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004f6c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8004f6e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8004f70:	63dc      	str	r4, [r3, #60]	; 0x3c
 8004f72:	f380 8811 	msr	BASEPRI, r0
 8004f76:	e77c      	b.n	8004e72 <thd3_execute.lto_priv.125+0x22>
 8004f78:	20001de0 	.word	0x20001de0
 8004f7c:	f3af 8000 	nop.w

08004f80 <mbox1_setup.lto_priv.147>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8004f80:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <mbox1_setup.lto_priv.147+0x30>)
 8004f84:	4a0b      	ldr	r2, [pc, #44]	; (8004fb4 <mbox1_setup.lto_priv.147+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8004f86:	2505      	movs	r5, #5
  mbp->mb_top = &buf[n];
 8004f88:	f102 0614 	add.w	r6, r2, #20
 8004f8c:	2400      	movs	r4, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8004f8e:	f103 001c 	add.w	r0, r3, #28
 8004f92:	f103 0110 	add.w	r1, r3, #16
 8004f96:	e883 0044 	stmia.w	r3, {r2, r6}
 8004f9a:	625d      	str	r5, [r3, #36]	; 0x24
 8004f9c:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	609a      	str	r2, [r3, #8]
 8004fa2:	6218      	str	r0, [r3, #32]
 8004fa4:	61d8      	str	r0, [r3, #28]
 8004fa6:	6159      	str	r1, [r3, #20]
 8004fa8:	6119      	str	r1, [r3, #16]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 8004faa:	bc70      	pop	{r4, r5, r6}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000c8c 	.word	0x20000c8c
 8004fb4:	20001768 	.word	0x20001768
 8004fb8:	f3af 8000 	nop.w
 8004fbc:	f3af 8000 	nop.w

08004fc0 <mtx8_setup.lto_priv.144>:
 8004fc0:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <mtx8_setup.lto_priv.144+0x1c>)
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <mtx8_setup.lto_priv.144+0x20>)
 8004fc4:	4907      	ldr	r1, [pc, #28]	; (8004fe4 <mtx8_setup.lto_priv.144+0x24>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	6049      	str	r1, [r1, #4]
 8004fca:	6009      	str	r1, [r1, #0]
 8004fcc:	6052      	str	r2, [r2, #4]
 8004fce:	6012      	str	r2, [r2, #0]
 8004fd0:	6090      	str	r0, [r2, #8]
 8004fd2:	6098      	str	r0, [r3, #8]
 8004fd4:	605b      	str	r3, [r3, #4]
 8004fd6:	601b      	str	r3, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000c5c 	.word	0x20000c5c
 8004fe0:	20000c6c 	.word	0x20000c6c
 8004fe4:	20000c84 	.word	0x20000c84
 8004fe8:	f3af 8000 	nop.w
 8004fec:	f3af 8000 	nop.w

08004ff0 <mtx7_setup.lto_priv.142>:
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <mtx7_setup.lto_priv.142+0x14>)
 8004ff2:	4a05      	ldr	r2, [pc, #20]	; (8005008 <mtx7_setup.lto_priv.142+0x18>)
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6052      	str	r2, [r2, #4]
 8004ff8:	6012      	str	r2, [r2, #0]
 8004ffa:	605b      	str	r3, [r3, #4]
 8004ffc:	601b      	str	r3, [r3, #0]
 8004ffe:	6099      	str	r1, [r3, #8]
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000c5c 	.word	0x20000c5c
 8005008:	20000c84 	.word	0x20000c84
 800500c:	f3af 8000 	nop.w

08005010 <evt1_execute.lto_priv.150>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8005010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005014:	4c31      	ldr	r4, [pc, #196]	; (80050dc <evt1_execute.lto_priv.150+0xcc>)
 8005016:	b08a      	sub	sp, #40	; 0x28
 8005018:	2020      	movs	r0, #32
 800501a:	6024      	str	r4, [r4, #0]
 800501c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005020:	492f      	ldr	r1, [pc, #188]	; (80050e0 <evt1_execute.lto_priv.150+0xd0>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005026:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005028:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800502c:	2701      	movs	r7, #1
  elp->el_flags    = 0;
 800502e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005034:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8005036:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8005038:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 800503a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800503c:	9204      	str	r2, [sp, #16]
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 800504a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800504c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8005050:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8005054:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = 0;
 8005056:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8005058:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800505a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 800505c:	f8cd 801c 	str.w	r8, [sp, #28]
 8005060:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 8005064:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8005066:	4638      	mov	r0, r7
 8005068:	1b09      	subs	r1, r1, r4
 800506a:	bf18      	it	ne
 800506c:	2101      	movne	r1, #1
 800506e:	f000 ff3f 	bl	8005ef0 <_test_assert>
 8005072:	b110      	cbz	r0, 800507a <evt1_execute.lto_priv.150+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8005074:	b00a      	add	sp, #40	; 0x28
 8005076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 800507a:	4629      	mov	r1, r5
 800507c:	4620      	mov	r0, r4
 800507e:	f001 fcdf 	bl	8006a40 <chEvtUnregister>
 8005082:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8005084:	4640      	mov	r0, r8
 8005086:	1b09      	subs	r1, r1, r4
 8005088:	bf18      	it	ne
 800508a:	2101      	movne	r1, #1
 800508c:	f000 ff30 	bl	8005ef0 <_test_assert>
 8005090:	2800      	cmp	r0, #0
 8005092:	d1ef      	bne.n	8005074 <evt1_execute.lto_priv.150+0x64>
  chEvtUnregister(&es1, &el2);
 8005094:	4631      	mov	r1, r6
 8005096:	4620      	mov	r0, r4
 8005098:	f001 fcd2 	bl	8006a40 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 800509c:	6821      	ldr	r1, [r4, #0]
 800509e:	2003      	movs	r0, #3
 80050a0:	1b09      	subs	r1, r1, r4
 80050a2:	fab1 f181 	clz	r1, r1
 80050a6:	0949      	lsrs	r1, r1, #5
 80050a8:	f000 ff22 	bl	8005ef0 <_test_assert>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d1e1      	bne.n	8005074 <evt1_execute.lto_priv.150+0x64>
 80050b0:	4604      	mov	r4, r0
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80050b2:	4e0c      	ldr	r6, [pc, #48]	; (80050e4 <evt1_execute.lto_priv.150+0xd4>)
 80050b4:	2507      	movs	r5, #7
 80050b6:	e001      	b.n	80050bc <evt1_execute.lto_priv.150+0xac>
    }
    eid++;
 80050b8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 80050ba:	b155      	cbz	r5, 80050d2 <evt1_execute.lto_priv.150+0xc2>
    if (events & EVENT_MASK(eid)) {
 80050bc:	fa07 f304 	lsl.w	r3, r7, r4
 80050c0:	422b      	tst	r3, r5
 80050c2:	d0f9      	beq.n	80050b8 <evt1_execute.lto_priv.150+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80050c4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80050c8:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80050ca:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 80050ce:	4790      	blx	r2
 80050d0:	e7f2      	b.n	80050b8 <evt1_execute.lto_priv.150+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 80050d2:	4905      	ldr	r1, [pc, #20]	; (80050e8 <evt1_execute.lto_priv.150+0xd8>)
 80050d4:	2004      	movs	r0, #4
 80050d6:	f000 fdd3 	bl	8005c80 <_test_assert_sequence>
 80050da:	e7cb      	b.n	8005074 <evt1_execute.lto_priv.150+0x64>
 80050dc:	20000c24 	.word	0x20000c24
 80050e0:	20001de0 	.word	0x20001de0
 80050e4:	08009a70 	.word	0x08009a70
 80050e8:	08009a60 	.word	0x08009a60
 80050ec:	f3af 8000 	nop.w

080050f0 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80050f0:	2043      	movs	r0, #67	; 0x43
 80050f2:	f000 bf15 	b.w	8005f20 <test_emit_token>
 80050f6:	bf00      	nop
 80050f8:	f3af 8000 	nop.w
 80050fc:	f3af 8000 	nop.w

08005100 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8005100:	2042      	movs	r0, #66	; 0x42
 8005102:	f000 bf0d 	b.w	8005f20 <test_emit_token>
 8005106:	bf00      	nop
 8005108:	f3af 8000 	nop.w
 800510c:	f3af 8000 	nop.w

08005110 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8005110:	2041      	movs	r0, #65	; 0x41
 8005112:	f000 bf05 	b.w	8005f20 <test_emit_token>
 8005116:	bf00      	nop
 8005118:	f3af 8000 	nop.w
 800511c:	f3af 8000 	nop.w

08005120 <evt1_setup.lto_priv.149>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8005120:	f003 be4e 	b.w	8008dc0 <chEvtGetAndClearEvents.constprop.48>
 8005124:	f3af 8000 	nop.w
 8005128:	f3af 8000 	nop.w
 800512c:	f3af 8000 	nop.w

08005130 <mbox1_execute.lto_priv.148>:

static void mbox1_execute(void) {
 8005130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005134:	2320      	movs	r3, #32
 8005136:	b082      	sub	sp, #8
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	4d95      	ldr	r5, [pc, #596]	; (8005394 <mbox1_execute.lto_priv.148+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800513e:	2001      	movs	r0, #1
 8005140:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005142:	f1a1 0105 	sub.w	r1, r1, #5
 8005146:	fab1 f181 	clz	r1, r1
 800514a:	0949      	lsrs	r1, r1, #5
 800514c:	f000 fed0 	bl	8005ef0 <_test_assert>
 8005150:	2800      	cmp	r0, #0
 8005152:	f040 8089 	bne.w	8005268 <mbox1_execute.lto_priv.148+0x138>
 8005156:	f380 8811 	msr	BASEPRI, r0
 800515a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800515c:	4620      	mov	r0, r4
 800515e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005162:	f003 fe7d 	bl	8008e60 <chMBPost.constprop.29>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8005166:	fab0 f180 	clz	r1, r0
 800516a:	2002      	movs	r0, #2
 800516c:	0949      	lsrs	r1, r1, #5
 800516e:	f000 febf 	bl	8005ef0 <_test_assert>
 8005172:	3401      	adds	r4, #1
 8005174:	b970      	cbnz	r0, 8005194 <mbox1_execute.lto_priv.148+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8005176:	2c46      	cmp	r4, #70	; 0x46
 8005178:	d1f0      	bne.n	800515c <mbox1_execute.lto_priv.148+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 800517a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800517e:	2041      	movs	r0, #65	; 0x41
 8005180:	f003 feb6 	bl	8008ef0 <chMBPostAhead.constprop.27>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8005184:	fab0 f180 	clz	r1, r0
 8005188:	2003      	movs	r0, #3
 800518a:	0949      	lsrs	r1, r1, #5
 800518c:	f000 feb0 	bl	8005ef0 <_test_assert>
 8005190:	2800      	cmp	r0, #0
 8005192:	d06f      	beq.n	8005274 <mbox1_execute.lto_priv.148+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8005194:	b002      	add	sp, #8
 8005196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519a:	f386 8811 	msr	BASEPRI, r6
 800519e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 80051a2:	69a1      	ldr	r1, [r4, #24]
 80051a4:	202a      	movs	r0, #42	; 0x2a
 80051a6:	fab1 f181 	clz	r1, r1
 80051aa:	0949      	lsrs	r1, r1, #5
 80051ac:	f000 fea0 	bl	8005ef0 <_test_assert>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f040 8299 	bne.w	80056e8 <mbox1_execute.lto_priv.148+0x5b8>
 80051b6:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80051ba:	68e1      	ldr	r1, [r4, #12]
 80051bc:	68a3      	ldr	r3, [r4, #8]
 80051be:	202b      	movs	r0, #43	; 0x2b
 80051c0:	ebc3 0e01 	rsb	lr, r3, r1
 80051c4:	f1de 0100 	rsbs	r1, lr, #0
 80051c8:	eb41 010e 	adc.w	r1, r1, lr
 80051cc:	f000 fe90 	bl	8005ef0 <_test_assert>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1df      	bne.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 80051d4:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 80051d8:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 80051da:	6862      	ldr	r2, [r4, #4]
 80051dc:	f104 001c 	add.w	r0, r4, #28
 80051e0:	1ad1      	subs	r1, r2, r3
 80051e2:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 80051e4:	60e3      	str	r3, [r4, #12]
 80051e6:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 80051e8:	f002 f842 	bl	8007270 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 80051ec:	f104 0010 	add.w	r0, r4, #16
 80051f0:	4631      	mov	r1, r6
 80051f2:	f002 f83d 	bl	8007270 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 80051f6:	f001 fd2b 	bl	8006c50 <chSchRescheduleS>
 80051fa:	f386 8811 	msr	BASEPRI, r6
 80051fe:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005202:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005204:	202c      	movs	r0, #44	; 0x2c
 8005206:	1f4d      	subs	r5, r1, #5
 8005208:	4269      	negs	r1, r5
 800520a:	4169      	adcs	r1, r5
 800520c:	f000 fe70 	bl	8005ef0 <_test_assert>
 8005210:	2800      	cmp	r0, #0
 8005212:	f040 8269 	bne.w	80056e8 <mbox1_execute.lto_priv.148+0x5b8>
 8005216:	f386 8811 	msr	BASEPRI, r6
 800521a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 800521e:	69a1      	ldr	r1, [r4, #24]
 8005220:	202d      	movs	r0, #45	; 0x2d
 8005222:	fab1 f181 	clz	r1, r1
 8005226:	0949      	lsrs	r1, r1, #5
 8005228:	f000 fe62 	bl	8005ef0 <_test_assert>
 800522c:	2800      	cmp	r0, #0
 800522e:	f040 825b 	bne.w	80056e8 <mbox1_execute.lto_priv.148+0x5b8>
 8005232:	f386 8811 	msr	BASEPRI, r6
 8005236:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 800523a:	6821      	ldr	r1, [r4, #0]
 800523c:	68a3      	ldr	r3, [r4, #8]
 800523e:	202e      	movs	r0, #46	; 0x2e
 8005240:	1aca      	subs	r2, r1, r3
 8005242:	4251      	negs	r1, r2
 8005244:	4151      	adcs	r1, r2
 8005246:	f000 fe53 	bl	8005ef0 <_test_assert>
 800524a:	2800      	cmp	r0, #0
 800524c:	f040 824c 	bne.w	80056e8 <mbox1_execute.lto_priv.148+0x5b8>
 8005250:	f386 8811 	msr	BASEPRI, r6
 8005254:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8005258:	6821      	ldr	r1, [r4, #0]
 800525a:	68e3      	ldr	r3, [r4, #12]
 800525c:	202f      	movs	r0, #47	; 0x2f
 800525e:	1acb      	subs	r3, r1, r3
 8005260:	4259      	negs	r1, r3
 8005262:	4159      	adcs	r1, r3
 8005264:	f000 fe44 	bl	8005ef0 <_test_assert>
 8005268:	2300      	movs	r3, #0
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	b002      	add	sp, #8
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8005274:	2101      	movs	r1, #1
 8005276:	2058      	movs	r0, #88	; 0x58
 8005278:	f003 fdf2 	bl	8008e60 <chMBPost.constprop.29>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800527c:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8005280:	fab1 f181 	clz	r1, r1
 8005284:	2004      	movs	r0, #4
 8005286:	0949      	lsrs	r1, r1, #5
 8005288:	f000 fe32 	bl	8005ef0 <_test_assert>
 800528c:	4604      	mov	r4, r0
 800528e:	2800      	cmp	r0, #0
 8005290:	d180      	bne.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005292:	2620      	movs	r6, #32
 8005294:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8005298:	2058      	movs	r0, #88	; 0x58
 800529a:	f003 fe09 	bl	8008eb0 <chMBPostI.constprop.28>
 800529e:	4601      	mov	r1, r0
 80052a0:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80052a4:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80052a8:	fab1 f181 	clz	r1, r1
 80052ac:	2005      	movs	r0, #5
 80052ae:	0949      	lsrs	r1, r1, #5
 80052b0:	f000 fe1e 	bl	8005ef0 <_test_assert>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f47f af6d 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 80052ba:	2101      	movs	r1, #1
 80052bc:	2058      	movs	r0, #88	; 0x58
 80052be:	f003 fe17 	bl	8008ef0 <chMBPostAhead.constprop.27>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80052c2:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 80052c6:	fab1 f181 	clz	r1, r1
 80052ca:	2006      	movs	r0, #6
 80052cc:	0949      	lsrs	r1, r1, #5
 80052ce:	f000 fe0f 	bl	8005ef0 <_test_assert>
 80052d2:	4604      	mov	r4, r0
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f47f af5d 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 80052da:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 80052de:	2058      	movs	r0, #88	; 0x58
 80052e0:	f003 fe2e 	bl	8008f40 <chMBPostAheadI.constprop.26>
 80052e4:	4601      	mov	r1, r0
 80052e6:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80052ea:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80052ee:	fab1 f181 	clz	r1, r1
 80052f2:	2007      	movs	r0, #7
 80052f4:	0949      	lsrs	r1, r1, #5
 80052f6:	f000 fdfb 	bl	8005ef0 <_test_assert>
 80052fa:	4680      	mov	r8, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f47f af49 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005302:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8005306:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005308:	2008      	movs	r0, #8
 800530a:	fab1 f181 	clz	r1, r1
 800530e:	0949      	lsrs	r1, r1, #5
 8005310:	f000 fdee 	bl	8005ef0 <_test_assert>
 8005314:	4c1f      	ldr	r4, [pc, #124]	; (8005394 <mbox1_execute.lto_priv.148+0x264>)
 8005316:	4607      	mov	r7, r0
 8005318:	b110      	cbz	r0, 8005320 <mbox1_execute.lto_priv.148+0x1f0>
 800531a:	f388 8811 	msr	BASEPRI, r8
 800531e:	e739      	b.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005320:	f380 8811 	msr	BASEPRI, r0
 8005324:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8005328:	69a1      	ldr	r1, [r4, #24]
 800532a:	2009      	movs	r0, #9
 800532c:	f1a1 0e05 	sub.w	lr, r1, #5
 8005330:	f1de 0100 	rsbs	r1, lr, #0
 8005334:	eb41 010e 	adc.w	r1, r1, lr
 8005338:	f000 fdda 	bl	8005ef0 <_test_assert>
 800533c:	b110      	cbz	r0, 8005344 <mbox1_execute.lto_priv.148+0x214>
 800533e:	f387 8811 	msr	BASEPRI, r7
 8005342:	e727      	b.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800534c:	68e1      	ldr	r1, [r4, #12]
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	200a      	movs	r0, #10
 8005352:	1acf      	subs	r7, r1, r3
 8005354:	4279      	negs	r1, r7
 8005356:	4179      	adcs	r1, r7
 8005358:	f000 fdca 	bl	8005ef0 <_test_assert>
 800535c:	2300      	movs	r3, #0
 800535e:	2800      	cmp	r0, #0
 8005360:	d183      	bne.n	800526a <mbox1_execute.lto_priv.148+0x13a>
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	2405      	movs	r4, #5
 8005368:	e005      	b.n	8005376 <mbox1_execute.lto_priv.148+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 800536a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800536e:	f000 fdd7 	bl	8005f20 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8005372:	3c01      	subs	r4, #1
 8005374:	d010      	beq.n	8005398 <mbox1_execute.lto_priv.148+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8005376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800537a:	a801      	add	r0, sp, #4
 800537c:	f003 fe00 	bl	8008f80 <chMBFetch.constprop.25>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8005380:	fab0 f180 	clz	r1, r0
 8005384:	200b      	movs	r0, #11
 8005386:	0949      	lsrs	r1, r1, #5
 8005388:	f000 fdb2 	bl	8005ef0 <_test_assert>
 800538c:	2800      	cmp	r0, #0
 800538e:	d0ec      	beq.n	800536a <mbox1_execute.lto_priv.148+0x23a>
 8005390:	e700      	b.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005392:	bf00      	nop
 8005394:	20000c8c 	.word	0x20000c8c
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8005398:	200c      	movs	r0, #12
 800539a:	49d5      	ldr	r1, [pc, #852]	; (80056f0 <mbox1_execute.lto_priv.148+0x5c0>)
 800539c:	f000 fc70 	bl	8005c80 <_test_assert_sequence>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f47f aef7 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80053a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053aa:	2047      	movs	r0, #71	; 0x47
 80053ac:	f003 fd58 	bl	8008e60 <chMBPost.constprop.29>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 80053b0:	fab0 f180 	clz	r1, r0
 80053b4:	200d      	movs	r0, #13
 80053b6:	0949      	lsrs	r1, r1, #5
 80053b8:	f000 fd9a 	bl	8005ef0 <_test_assert>
 80053bc:	2800      	cmp	r0, #0
 80053be:	f47f aee9 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80053c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80053c6:	a801      	add	r0, sp, #4
 80053c8:	f003 fdda 	bl	8008f80 <chMBFetch.constprop.25>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 80053cc:	fab0 f180 	clz	r1, r0
 80053d0:	200e      	movs	r0, #14
 80053d2:	0949      	lsrs	r1, r1, #5
 80053d4:	f000 fd8c 	bl	8005ef0 <_test_assert>
 80053d8:	2800      	cmp	r0, #0
 80053da:	f47f aedb 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80053de:	6829      	ldr	r1, [r5, #0]
 80053e0:	68ab      	ldr	r3, [r5, #8]
 80053e2:	200f      	movs	r0, #15
 80053e4:	1ace      	subs	r6, r1, r3
 80053e6:	4271      	negs	r1, r6
 80053e8:	4171      	adcs	r1, r6
 80053ea:	4ec2      	ldr	r6, [pc, #776]	; (80056f4 <mbox1_execute.lto_priv.148+0x5c4>)
 80053ec:	f000 fd80 	bl	8005ef0 <_test_assert>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f47f aecf 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80053f6:	6831      	ldr	r1, [r6, #0]
 80053f8:	68f3      	ldr	r3, [r6, #12]
 80053fa:	2010      	movs	r0, #16
 80053fc:	1aca      	subs	r2, r1, r3
 80053fe:	4251      	negs	r1, r2
 8005400:	4151      	adcs	r1, r2
 8005402:	f000 fd75 	bl	8005ef0 <_test_assert>
 8005406:	2800      	cmp	r0, #0
 8005408:	f47f aec4 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 800540c:	2101      	movs	r1, #1
 800540e:	a801      	add	r0, sp, #4
 8005410:	f003 fdb6 	bl	8008f80 <chMBFetch.constprop.25>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	4259      	negs	r1, r3
 8005418:	4159      	adcs	r1, r3
 800541a:	2011      	movs	r0, #17
 800541c:	f000 fd68 	bl	8005ef0 <_test_assert>
 8005420:	2800      	cmp	r0, #0
 8005422:	f47f aeb7 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005426:	2720      	movs	r7, #32
 8005428:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 800542c:	a801      	add	r0, sp, #4
 800542e:	f003 fdcf 	bl	8008fd0 <chMBFetchI.constprop.24>
 8005432:	4601      	mov	r1, r0
 8005434:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005438:	f101 0801 	add.w	r8, r1, #1
 800543c:	f1d8 0100 	rsbs	r1, r8, #0
 8005440:	eb41 0108 	adc.w	r1, r1, r8
 8005444:	2012      	movs	r0, #18
 8005446:	f000 fd53 	bl	8005ef0 <_test_assert>
 800544a:	2800      	cmp	r0, #0
 800544c:	f47f aea2 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005450:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005454:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8005456:	2013      	movs	r0, #19
 8005458:	f1a1 0c05 	sub.w	ip, r1, #5
 800545c:	f1dc 0100 	rsbs	r1, ip, #0
 8005460:	eb41 010c 	adc.w	r1, r1, ip
 8005464:	f000 fd44 	bl	8005ef0 <_test_assert>
 8005468:	2800      	cmp	r0, #0
 800546a:	f47f aefd 	bne.w	8005268 <mbox1_execute.lto_priv.148+0x138>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	f388 8811 	msr	BASEPRI, r8
 8005476:	2420      	movs	r4, #32
 8005478:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800547c:	69a9      	ldr	r1, [r5, #24]
 800547e:	2014      	movs	r0, #20
 8005480:	fab1 f181 	clz	r1, r1
 8005484:	0949      	lsrs	r1, r1, #5
 8005486:	f000 fd33 	bl	8005ef0 <_test_assert>
 800548a:	4e9a      	ldr	r6, [pc, #616]	; (80056f4 <mbox1_execute.lto_priv.148+0x5c4>)
 800548c:	4607      	mov	r7, r0
 800548e:	2800      	cmp	r0, #0
 8005490:	f47f af43 	bne.w	800531a <mbox1_execute.lto_priv.148+0x1ea>
 8005494:	f380 8811 	msr	BASEPRI, r0
 8005498:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800549c:	68f1      	ldr	r1, [r6, #12]
 800549e:	68b3      	ldr	r3, [r6, #8]
 80054a0:	2015      	movs	r0, #21
 80054a2:	ebc3 0e01 	rsb	lr, r3, r1
 80054a6:	f1de 0100 	rsbs	r1, lr, #0
 80054aa:	eb41 010e 	adc.w	r1, r1, lr
 80054ae:	f000 fd1f 	bl	8005ef0 <_test_assert>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f47f af43 	bne.w	800533e <mbox1_execute.lto_priv.148+0x20e>
 80054b8:	f380 8811 	msr	BASEPRI, r0
 80054bc:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 80054c0:	2041      	movs	r0, #65	; 0x41
 80054c2:	f003 fcf5 	bl	8008eb0 <chMBPostI.constprop.28>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 80054c6:	fab0 f180 	clz	r1, r0
 80054ca:	2016      	movs	r0, #22
 80054cc:	0949      	lsrs	r1, r1, #5
 80054ce:	f000 fd0f 	bl	8005ef0 <_test_assert>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f47f ae5e 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 80054d8:	2042      	movs	r0, #66	; 0x42
 80054da:	f003 fce9 	bl	8008eb0 <chMBPostI.constprop.28>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 80054de:	fab0 f180 	clz	r1, r0
 80054e2:	2017      	movs	r0, #23
 80054e4:	0949      	lsrs	r1, r1, #5
 80054e6:	f000 fd03 	bl	8005ef0 <_test_assert>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f47f ae52 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 80054f0:	2043      	movs	r0, #67	; 0x43
 80054f2:	f003 fcdd 	bl	8008eb0 <chMBPostI.constprop.28>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80054f6:	fab0 f180 	clz	r1, r0
 80054fa:	2018      	movs	r0, #24
 80054fc:	0949      	lsrs	r1, r1, #5
 80054fe:	f000 fcf7 	bl	8005ef0 <_test_assert>
 8005502:	2800      	cmp	r0, #0
 8005504:	f47f ae46 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8005508:	2044      	movs	r0, #68	; 0x44
 800550a:	f003 fcd1 	bl	8008eb0 <chMBPostI.constprop.28>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 800550e:	fab0 f180 	clz	r1, r0
 8005512:	2019      	movs	r0, #25
 8005514:	0949      	lsrs	r1, r1, #5
 8005516:	f000 fceb 	bl	8005ef0 <_test_assert>
 800551a:	4607      	mov	r7, r0
 800551c:	2800      	cmp	r0, #0
 800551e:	f47f ae39 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8005522:	2045      	movs	r0, #69	; 0x45
 8005524:	f003 fcc4 	bl	8008eb0 <chMBPostI.constprop.28>
 8005528:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 800552c:	fab0 f180 	clz	r1, r0
 8005530:	201a      	movs	r0, #26
 8005532:	0949      	lsrs	r1, r1, #5
 8005534:	f000 fcdc 	bl	8005ef0 <_test_assert>
 8005538:	2800      	cmp	r0, #0
 800553a:	f47f ae2b 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800553e:	68f1      	ldr	r1, [r6, #12]
 8005540:	68b3      	ldr	r3, [r6, #8]
 8005542:	201b      	movs	r0, #27
 8005544:	1ace      	subs	r6, r1, r3
 8005546:	4271      	negs	r1, r6
 8005548:	4171      	adcs	r1, r6
 800554a:	f000 fcd1 	bl	8005ef0 <_test_assert>
 800554e:	2800      	cmp	r0, #0
 8005550:	f47f ae20 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005554:	4680      	mov	r8, r0
 8005556:	4626      	mov	r6, r4
 8005558:	2405      	movs	r4, #5
 800555a:	2720      	movs	r7, #32
 800555c:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8005560:	a801      	add	r0, sp, #4
 8005562:	f003 fd35 	bl	8008fd0 <chMBFetchI.constprop.24>
 8005566:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 800556a:	fab0 f180 	clz	r1, r0
 800556e:	201c      	movs	r0, #28
 8005570:	0949      	lsrs	r1, r1, #5
 8005572:	f000 fcbd 	bl	8005ef0 <_test_assert>
 8005576:	2800      	cmp	r0, #0
 8005578:	f47f ae0c 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
    test_emit_token(msg2);
 800557c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005580:	f000 fcce 	bl	8005f20 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8005584:	3c01      	subs	r4, #1
 8005586:	d1e8      	bne.n	800555a <mbox1_execute.lto_priv.148+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8005588:	201d      	movs	r0, #29
 800558a:	4959      	ldr	r1, [pc, #356]	; (80056f0 <mbox1_execute.lto_priv.148+0x5c0>)
 800558c:	f000 fb78 	bl	8005c80 <_test_assert_sequence>
 8005590:	2800      	cmp	r0, #0
 8005592:	f47f adff 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005596:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800559a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800559c:	201e      	movs	r0, #30
 800559e:	1f4a      	subs	r2, r1, #5
 80055a0:	4251      	negs	r1, r2
 80055a2:	4151      	adcs	r1, r2
 80055a4:	4e53      	ldr	r6, [pc, #332]	; (80056f4 <mbox1_execute.lto_priv.148+0x5c4>)
 80055a6:	f000 fca3 	bl	8005ef0 <_test_assert>
 80055aa:	b110      	cbz	r0, 80055b2 <mbox1_execute.lto_priv.148+0x482>
 80055ac:	f384 8811 	msr	BASEPRI, r4
 80055b0:	e5f0      	b.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 80055b2:	f384 8811 	msr	BASEPRI, r4
 80055b6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 80055ba:	69b1      	ldr	r1, [r6, #24]
 80055bc:	201f      	movs	r0, #31
 80055be:	fab1 f181 	clz	r1, r1
 80055c2:	0949      	lsrs	r1, r1, #5
 80055c4:	f000 fc94 	bl	8005ef0 <_test_assert>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d1ef      	bne.n	80055ac <mbox1_execute.lto_priv.148+0x47c>
 80055cc:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80055d0:	68f1      	ldr	r1, [r6, #12]
 80055d2:	68b3      	ldr	r3, [r6, #8]
 80055d4:	4638      	mov	r0, r7
 80055d6:	1acb      	subs	r3, r1, r3
 80055d8:	4259      	negs	r1, r3
 80055da:	4159      	adcs	r1, r3
 80055dc:	f000 fc88 	bl	8005ef0 <_test_assert>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f47f add7 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 80055e6:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 80055ea:	2045      	movs	r0, #69	; 0x45
 80055ec:	f003 fca8 	bl	8008f40 <chMBPostAheadI.constprop.26>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 80055f0:	fab0 f180 	clz	r1, r0
 80055f4:	2021      	movs	r0, #33	; 0x21
 80055f6:	0949      	lsrs	r1, r1, #5
 80055f8:	f000 fc7a 	bl	8005ef0 <_test_assert>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	f47f adc9 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8005602:	2044      	movs	r0, #68	; 0x44
 8005604:	f003 fc9c 	bl	8008f40 <chMBPostAheadI.constprop.26>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8005608:	fab0 f180 	clz	r1, r0
 800560c:	2022      	movs	r0, #34	; 0x22
 800560e:	0949      	lsrs	r1, r1, #5
 8005610:	f000 fc6e 	bl	8005ef0 <_test_assert>
 8005614:	2800      	cmp	r0, #0
 8005616:	f47f adbd 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 800561a:	2043      	movs	r0, #67	; 0x43
 800561c:	f003 fc90 	bl	8008f40 <chMBPostAheadI.constprop.26>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8005620:	fab0 f180 	clz	r1, r0
 8005624:	2023      	movs	r0, #35	; 0x23
 8005626:	0949      	lsrs	r1, r1, #5
 8005628:	f000 fc62 	bl	8005ef0 <_test_assert>
 800562c:	2800      	cmp	r0, #0
 800562e:	f47f adb1 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8005632:	2042      	movs	r0, #66	; 0x42
 8005634:	f003 fc84 	bl	8008f40 <chMBPostAheadI.constprop.26>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8005638:	fab0 f180 	clz	r1, r0
 800563c:	2024      	movs	r0, #36	; 0x24
 800563e:	0949      	lsrs	r1, r1, #5
 8005640:	f000 fc56 	bl	8005ef0 <_test_assert>
 8005644:	2800      	cmp	r0, #0
 8005646:	f47f ada5 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 800564a:	2041      	movs	r0, #65	; 0x41
 800564c:	f003 fc78 	bl	8008f40 <chMBPostAheadI.constprop.26>
 8005650:	2300      	movs	r3, #0
 8005652:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8005656:	fab0 f180 	clz	r1, r0
 800565a:	2025      	movs	r0, #37	; 0x25
 800565c:	0949      	lsrs	r1, r1, #5
 800565e:	f000 fc47 	bl	8005ef0 <_test_assert>
 8005662:	2800      	cmp	r0, #0
 8005664:	f47f ad96 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8005668:	68e9      	ldr	r1, [r5, #12]
 800566a:	68ab      	ldr	r3, [r5, #8]
 800566c:	2026      	movs	r0, #38	; 0x26
 800566e:	ebc3 0801 	rsb	r8, r3, r1
 8005672:	f1d8 0100 	rsbs	r1, r8, #0
 8005676:	eb41 0108 	adc.w	r1, r1, r8
 800567a:	f000 fc39 	bl	8005ef0 <_test_assert>
 800567e:	2800      	cmp	r0, #0
 8005680:	f47f ad88 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 8005684:	4604      	mov	r4, r0
 8005686:	2605      	movs	r6, #5
 8005688:	f04f 0820 	mov.w	r8, #32
 800568c:	2720      	movs	r7, #32
 800568e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8005692:	a801      	add	r0, sp, #4
 8005694:	f003 fc9c 	bl	8008fd0 <chMBFetchI.constprop.24>
 8005698:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 800569c:	fab0 f180 	clz	r1, r0
 80056a0:	2027      	movs	r0, #39	; 0x27
 80056a2:	0949      	lsrs	r1, r1, #5
 80056a4:	f000 fc24 	bl	8005ef0 <_test_assert>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	f47f ad73 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
    test_emit_token(msg2);
 80056ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80056b2:	f000 fc35 	bl	8005f20 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 80056b6:	3e01      	subs	r6, #1
 80056b8:	d1e8      	bne.n	800568c <mbox1_execute.lto_priv.148+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 80056ba:	2028      	movs	r0, #40	; 0x28
 80056bc:	490c      	ldr	r1, [pc, #48]	; (80056f0 <mbox1_execute.lto_priv.148+0x5c0>)
 80056be:	f000 fadf 	bl	8005c80 <_test_assert_sequence>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f47f ad66 	bne.w	8005194 <mbox1_execute.lto_priv.148+0x64>
 80056c8:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80056cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80056ce:	2029      	movs	r0, #41	; 0x29
 80056d0:	f1a1 0c05 	sub.w	ip, r1, #5
 80056d4:	f1dc 0100 	rsbs	r1, ip, #0
 80056d8:	eb41 010c 	adc.w	r1, r1, ip
 80056dc:	4c05      	ldr	r4, [pc, #20]	; (80056f4 <mbox1_execute.lto_priv.148+0x5c4>)
 80056de:	f000 fc07 	bl	8005ef0 <_test_assert>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	f43f ad59 	beq.w	800519a <mbox1_execute.lto_priv.148+0x6a>
 80056e8:	f386 8811 	msr	BASEPRI, r6
 80056ec:	e552      	b.n	8005194 <mbox1_execute.lto_priv.148+0x64>
 80056ee:	bf00      	nop
 80056f0:	08009a50 	.word	0x08009a50
 80056f4:	20000c8c 	.word	0x20000c8c
 80056f8:	f3af 8000 	nop.w
 80056fc:	f3af 8000 	nop.w

08005700 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8005704:	2141      	movs	r1, #65	; 0x41
 8005706:	f001 f81b 	bl	8006740 <chMsgSend>
  chMsgSend(p, 'B');
 800570a:	4620      	mov	r0, r4
 800570c:	2142      	movs	r1, #66	; 0x42
 800570e:	f001 f817 	bl	8006740 <chMsgSend>
  chMsgSend(p, 'C');
 8005712:	4620      	mov	r0, r4
 8005714:	2143      	movs	r1, #67	; 0x43
 8005716:	f001 f813 	bl	8006740 <chMsgSend>
  return 0;
}
 800571a:	2000      	movs	r0, #0
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop

08005720 <msg1_execute.lto_priv.146>:

static void msg1_execute(void) {
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <msg1_execute.lto_priv.146+0x80>)
 8005724:	b082      	sub	sp, #8
 8005726:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8005728:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800572c:	68a2      	ldr	r2, [r4, #8]
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <msg1_execute.lto_priv.146+0x84>)
 8005730:	3201      	adds	r2, #1
 8005732:	9400      	str	r4, [sp, #0]
 8005734:	481c      	ldr	r0, [pc, #112]	; (80057a8 <msg1_execute.lto_priv.146+0x88>)
 8005736:	f001 fb7b 	bl	8006e30 <chThdCreateStatic>
 800573a:	4b1c      	ldr	r3, [pc, #112]	; (80057ac <msg1_execute.lto_priv.146+0x8c>)
 800573c:	2520      	movs	r5, #32
 800573e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8005740:	f000 ffde 	bl	8006700 <chMsgWait>
 8005744:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005746:	f385 8811 	msr	BASEPRI, r5
 800574a:	4631      	mov	r1, r6
 800574c:	f001 faa8 	bl	8006ca0 <chSchWakeupS>
 8005750:	2400      	movs	r4, #0
 8005752:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8005756:	b2f0      	uxtb	r0, r6
 8005758:	f000 fbe2 	bl	8005f20 <test_emit_token>
  tp = chMsgWait();
 800575c:	f000 ffd0 	bl	8006700 <chMsgWait>
 8005760:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005762:	f385 8811 	msr	BASEPRI, r5
 8005766:	4631      	mov	r1, r6
 8005768:	f001 fa9a 	bl	8006ca0 <chSchWakeupS>
 800576c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8005770:	b2f0      	uxtb	r0, r6
 8005772:	f000 fbd5 	bl	8005f20 <test_emit_token>
  tp = chMsgWait();
 8005776:	f000 ffc3 	bl	8006700 <chMsgWait>
 800577a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800577c:	f385 8811 	msr	BASEPRI, r5
 8005780:	4631      	mov	r1, r6
 8005782:	f001 fa8d 	bl	8006ca0 <chSchWakeupS>
 8005786:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 800578a:	b2f0      	uxtb	r0, r6
 800578c:	f000 fbc8 	bl	8005f20 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8005790:	4907      	ldr	r1, [pc, #28]	; (80057b0 <msg1_execute.lto_priv.146+0x90>)
 8005792:	2001      	movs	r0, #1
}
 8005794:	b002      	add	sp, #8
 8005796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 800579a:	f000 ba71 	b.w	8005c80 <_test_assert_sequence>
 800579e:	bf00      	nop
 80057a0:	20001de0 	.word	0x20001de0
 80057a4:	08005701 	.word	0x08005701
 80057a8:	20001768 	.word	0x20001768
 80057ac:	20001480 	.word	0x20001480
 80057b0:	08009a60 	.word	0x08009a60
 80057b4:	f3af 8000 	nop.w
 80057b8:	f3af 8000 	nop.w
 80057bc:	f3af 8000 	nop.w

080057c0 <mtx8_execute.lto_priv.145>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	4b19      	ldr	r3, [pc, #100]	; (8005828 <mtx8_execute.lto_priv.145+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80057c4:	4d19      	ldr	r5, [pc, #100]	; (800582c <mtx8_execute.lto_priv.145+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <mtx8_execute.lto_priv.145+0x70>)
 80057ca:	6896      	ldr	r6, [r2, #8]
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 80057cc:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80057ce:	1c72      	adds	r2, r6, #1
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	4628      	mov	r0, r5
 80057d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80057d8:	4b16      	ldr	r3, [pc, #88]	; (8005834 <mtx8_execute.lto_priv.145+0x74>)
 80057da:	f001 fb29 	bl	8006e30 <chThdCreateStatic>
 80057de:	4c16      	ldr	r4, [pc, #88]	; (8005838 <mtx8_execute.lto_priv.145+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <mtx8_execute.lto_priv.145+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80057e2:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80057e4:	1cb2      	adds	r2, r6, #2
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 80057ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <mtx8_execute.lto_priv.145+0x80>)
 80057f2:	f001 fb1d 	bl	8006e30 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <mtx8_execute.lto_priv.145+0x84>)
 80057f8:	1cf2      	adds	r2, r6, #3
 80057fa:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80057fe:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <mtx8_execute.lto_priv.145+0x88>)
 8005808:	f001 fb12 	bl	8006e30 <chThdCreateStatic>
 800580c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 800580e:	f003 faa7 	bl	8008d60 <chCondSignal.constprop.57>
  chCondSignal(&c1);
 8005812:	f003 faa5 	bl	8008d60 <chCondSignal.constprop.57>
  test_wait_threads();
 8005816:	f000 f9e3 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800581a:	490c      	ldr	r1, [pc, #48]	; (800584c <mtx8_execute.lto_priv.145+0x8c>)
 800581c:	2001      	movs	r0, #1
}
 800581e:	b002      	add	sp, #8
 8005820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8005824:	f000 ba2c 	b.w	8005c80 <_test_assert_sequence>
 8005828:	20001de0 	.word	0x20001de0
 800582c:	20001768 	.word	0x20001768
 8005830:	080099d0 	.word	0x080099d0
 8005834:	08005871 	.word	0x08005871
 8005838:	20001480 	.word	0x20001480
 800583c:	080099d8 	.word	0x080099d8
 8005840:	08005901 	.word	0x08005901
 8005844:	080099d4 	.word	0x080099d4
 8005848:	08005851 	.word	0x08005851
 800584c:	08009a60 	.word	0x08009a60

08005850 <thread12>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8005854:	4c05      	ldr	r4, [pc, #20]	; (800586c <thread12+0x1c>)
 8005856:	4620      	mov	r0, r4
 8005858:	f001 fce2 	bl	8007220 <chMtxLock>
  test_emit_token(*(char *)p);
 800585c:	7828      	ldrb	r0, [r5, #0]
 800585e:	f000 fb5f 	bl	8005f20 <test_emit_token>
  chMtxUnlock(&m2);
 8005862:	4620      	mov	r0, r4
 8005864:	f001 fa4c 	bl	8006d00 <chMtxUnlock>
  return 0;
}
 8005868:	2000      	movs	r0, #0
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20000c6c 	.word	0x20000c6c

08005870 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	4606      	mov	r6, r0

  chMtxLock(&m2);
 8005874:	481c      	ldr	r0, [pc, #112]	; (80058e8 <thread11+0x78>)
 8005876:	f001 fcd3 	bl	8007220 <chMtxLock>
  chMtxLock(&m1);
 800587a:	481c      	ldr	r0, [pc, #112]	; (80058ec <thread11+0x7c>)
 800587c:	f001 fcd0 	bl	8007220 <chMtxLock>
 8005880:	2320      	movs	r3, #32
 8005882:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005886:	4d1a      	ldr	r5, [pc, #104]	; (80058f0 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8005888:	69ab      	ldr	r3, [r5, #24]
 800588a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800588c:	4638      	mov	r0, r7
 800588e:	f001 fc37 	bl	8007100 <chMtxUnlockS>
  currp->p_u.wtobjp = cp;
 8005892:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <thread11+0x84>)
 8005894:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005896:	4610      	mov	r0, r2
 8005898:	4613      	mov	r3, r2
 800589a:	6222      	str	r2, [r4, #32]
 800589c:	e003      	b.n	80058a6 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800589e:	6899      	ldr	r1, [r3, #8]
 80058a0:	68a2      	ldr	r2, [r4, #8]
 80058a2:	4291      	cmp	r1, r2
 80058a4:	d302      	bcc.n	80058ac <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80058a6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80058a8:	4283      	cmp	r3, r0
 80058aa:	d1f8      	bne.n	800589e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80058ac:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 80058ae:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80058b0:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80058b2:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80058b4:	605c      	str	r4, [r3, #4]
 80058b6:	6014      	str	r4, [r2, #0]
 80058b8:	f001 fafa 	bl	8006eb0 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 80058bc:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	3301      	adds	r3, #1
 80058c2:	d002      	beq.n	80058ca <thread11+0x5a>
    chMtxLockS(mp);
 80058c4:	4638      	mov	r0, r7
 80058c6:	f001 fc43 	bl	8007150 <chMtxLockS>
 80058ca:	2400      	movs	r4, #0
 80058cc:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80058d0:	7830      	ldrb	r0, [r6, #0]
 80058d2:	f000 fb25 	bl	8005f20 <test_emit_token>
  chMtxUnlock(&m1);
 80058d6:	4805      	ldr	r0, [pc, #20]	; (80058ec <thread11+0x7c>)
 80058d8:	f001 fa12 	bl	8006d00 <chMtxUnlock>
  chMtxUnlock(&m2);
 80058dc:	4802      	ldr	r0, [pc, #8]	; (80058e8 <thread11+0x78>)
 80058de:	f001 fa0f 	bl	8006d00 <chMtxUnlock>
  return 0;
}
 80058e2:	4620      	mov	r0, r4
 80058e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000c6c 	.word	0x20000c6c
 80058ec:	20000c5c 	.word	0x20000c5c
 80058f0:	20001de0 	.word	0x20001de0
 80058f4:	20000c84 	.word	0x20000c84
 80058f8:	f3af 8000 	nop.w
 80058fc:	f3af 8000 	nop.w

08005900 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8005904:	4816      	ldr	r0, [pc, #88]	; (8005960 <thread10+0x60>)
 8005906:	f001 fc8b 	bl	8007220 <chMtxLock>
 800590a:	2320      	movs	r3, #32
 800590c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8005910:	4b14      	ldr	r3, [pc, #80]	; (8005964 <thread10+0x64>)
 8005912:	699c      	ldr	r4, [r3, #24]
 8005914:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8005916:	4628      	mov	r0, r5
 8005918:	f001 fbf2 	bl	8007100 <chMtxUnlockS>
  ctp->p_u.wtobjp = cp;
 800591c:	4a12      	ldr	r2, [pc, #72]	; (8005968 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800591e:	4610      	mov	r0, r2
 8005920:	4613      	mov	r3, r2
 8005922:	6222      	str	r2, [r4, #32]
 8005924:	e003      	b.n	800592e <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005926:	6899      	ldr	r1, [r3, #8]
 8005928:	68a2      	ldr	r2, [r4, #8]
 800592a:	4291      	cmp	r1, r2
 800592c:	d302      	bcc.n	8005934 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800592e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005930:	4283      	cmp	r3, r0
 8005932:	d1f8      	bne.n	8005926 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005934:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8005936:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005938:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800593a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800593c:	605c      	str	r4, [r3, #4]
 800593e:	6014      	str	r4, [r2, #0]
 8005940:	f001 fab6 	bl	8006eb0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8005944:	4628      	mov	r0, r5
 8005946:	f001 fc03 	bl	8007150 <chMtxLockS>
 800594a:	2400      	movs	r4, #0
 800594c:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8005950:	7830      	ldrb	r0, [r6, #0]
 8005952:	f000 fae5 	bl	8005f20 <test_emit_token>
  chMtxUnlock(&m1);
 8005956:	4802      	ldr	r0, [pc, #8]	; (8005960 <thread10+0x60>)
 8005958:	f001 f9d2 	bl	8006d00 <chMtxUnlock>
  return 0;
}
 800595c:	4620      	mov	r0, r4
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	20000c5c 	.word	0x20000c5c
 8005964:	20001de0 	.word	0x20001de0
 8005968:	20000c84 	.word	0x20000c84
 800596c:	f3af 8000 	nop.w

08005970 <mtx7_execute.lto_priv.143>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005970:	b530      	push	{r4, r5, lr}
 8005972:	4a2c      	ldr	r2, [pc, #176]	; (8005a24 <mtx7_execute.lto_priv.143+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005974:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <mtx7_execute.lto_priv.143+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005976:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005978:	b083      	sub	sp, #12
 800597a:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800597c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005980:	1c6a      	adds	r2, r5, #1
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4829      	ldr	r0, [pc, #164]	; (8005a2c <mtx7_execute.lto_priv.143+0xbc>)
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <mtx7_execute.lto_priv.143+0xc0>)
 8005988:	f001 fa52 	bl	8006e30 <chThdCreateStatic>
 800598c:	4c29      	ldr	r4, [pc, #164]	; (8005a34 <mtx7_execute.lto_priv.143+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800598e:	4b2a      	ldr	r3, [pc, #168]	; (8005a38 <mtx7_execute.lto_priv.143+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005990:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005992:	1caa      	adds	r2, r5, #2
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800599a:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <mtx7_execute.lto_priv.143+0xc0>)
 800599c:	4827      	ldr	r0, [pc, #156]	; (8005a3c <mtx7_execute.lto_priv.143+0xcc>)
 800599e:	f001 fa47 	bl	8006e30 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80059a2:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <mtx7_execute.lto_priv.143+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80059a4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80059a6:	1cea      	adds	r2, r5, #3
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <mtx7_execute.lto_priv.143+0xc0>)
 80059b0:	4824      	ldr	r0, [pc, #144]	; (8005a44 <mtx7_execute.lto_priv.143+0xd4>)
 80059b2:	f001 fa3d 	bl	8006e30 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <mtx7_execute.lto_priv.143+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80059b8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80059ba:	1d2a      	adds	r2, r5, #4
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059c2:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <mtx7_execute.lto_priv.143+0xc0>)
 80059c4:	4821      	ldr	r0, [pc, #132]	; (8005a4c <mtx7_execute.lto_priv.143+0xdc>)
 80059c6:	f001 fa33 	bl	8006e30 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80059ca:	4b21      	ldr	r3, [pc, #132]	; (8005a50 <mtx7_execute.lto_priv.143+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80059cc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80059ce:	1d6a      	adds	r2, r5, #5
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059d6:	4b16      	ldr	r3, [pc, #88]	; (8005a30 <mtx7_execute.lto_priv.143+0xc0>)
 80059d8:	481e      	ldr	r0, [pc, #120]	; (8005a54 <mtx7_execute.lto_priv.143+0xe4>)
 80059da:	f001 fa29 	bl	8006e30 <chThdCreateStatic>
 80059de:	2320      	movs	r3, #32
 80059e0:	6120      	str	r0, [r4, #16]
 80059e2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 80059e6:	4c1c      	ldr	r4, [pc, #112]	; (8005a58 <mtx7_execute.lto_priv.143+0xe8>)
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80059ec:	bf18      	it	ne
 80059ee:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 80059f2:	d009      	beq.n	8005a08 <mtx7_execute.lto_priv.143+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80059f4:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80059f6:	4618      	mov	r0, r3
 80059f8:	6054      	str	r4, [r2, #4]
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	f001 fb38 	bl	8007070 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005a00:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005a02:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	d1f5      	bne.n	80059f4 <mtx7_execute.lto_priv.143+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8005a08:	f001 f922 	bl	8006c50 <chSchRescheduleS>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8005a12:	f000 f8e5 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005a16:	4911      	ldr	r1, [pc, #68]	; (8005a5c <mtx7_execute.lto_priv.143+0xec>)
 8005a18:	2001      	movs	r0, #1
}
 8005a1a:	b003      	add	sp, #12
 8005a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005a20:	f000 b92e 	b.w	8005c80 <_test_assert_sequence>
 8005a24:	20001de0 	.word	0x20001de0
 8005a28:	08009a54 	.word	0x08009a54
 8005a2c:	20001768 	.word	0x20001768
 8005a30:	08005901 	.word	0x08005901
 8005a34:	20001480 	.word	0x20001480
 8005a38:	0800979c 	.word	0x0800979c
 8005a3c:	200018b0 	.word	0x200018b0
 8005a40:	080099d8 	.word	0x080099d8
 8005a44:	200019f8 	.word	0x200019f8
 8005a48:	080099d4 	.word	0x080099d4
 8005a4c:	20001b40 	.word	0x20001b40
 8005a50:	080099d0 	.word	0x080099d0
 8005a54:	20001c88 	.word	0x20001c88
 8005a58:	20000c84 	.word	0x20000c84
 8005a5c:	08009a50 	.word	0x08009a50

08005a60 <mtx6_execute.lto_priv.141>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005a62:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <mtx6_execute.lto_priv.141+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005a64:	4e2c      	ldr	r6, [pc, #176]	; (8005b18 <mtx6_execute.lto_priv.141+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	4d2c      	ldr	r5, [pc, #176]	; (8005b1c <mtx6_execute.lto_priv.141+0xbc>)
 8005a6a:	689f      	ldr	r7, [r3, #8]
 8005a6c:	492c      	ldr	r1, [pc, #176]	; (8005b20 <mtx6_execute.lto_priv.141+0xc0>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005a6e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005a70:	1c7a      	adds	r2, r7, #1
 8005a72:	462b      	mov	r3, r5
 8005a74:	9100      	str	r1, [sp, #0]
 8005a76:	4630      	mov	r0, r6
 8005a78:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a7c:	f001 f9d8 	bl	8006e30 <chThdCreateStatic>
 8005a80:	4c28      	ldr	r4, [pc, #160]	; (8005b24 <mtx6_execute.lto_priv.141+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005a82:	4929      	ldr	r1, [pc, #164]	; (8005b28 <mtx6_execute.lto_priv.141+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005a84:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005a86:	1cba      	adds	r2, r7, #2
 8005a88:	462b      	mov	r3, r5
 8005a8a:	9100      	str	r1, [sp, #0]
 8005a8c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8005a90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a94:	f001 f9cc 	bl	8006e30 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005a98:	4924      	ldr	r1, [pc, #144]	; (8005b2c <mtx6_execute.lto_priv.141+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005a9a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005a9c:	1cfa      	adds	r2, r7, #3
 8005a9e:	462b      	mov	r3, r5
 8005aa0:	9100      	str	r1, [sp, #0]
 8005aa2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8005aa6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005aaa:	f001 f9c1 	bl	8006e30 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005aae:	4920      	ldr	r1, [pc, #128]	; (8005b30 <mtx6_execute.lto_priv.141+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005ab0:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005ab2:	1d3a      	adds	r2, r7, #4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	9100      	str	r1, [sp, #0]
 8005ab8:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8005abc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ac0:	f001 f9b6 	bl	8006e30 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005ac4:	491b      	ldr	r1, [pc, #108]	; (8005b34 <mtx6_execute.lto_priv.141+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005ac6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005ac8:	462b      	mov	r3, r5
 8005aca:	9100      	str	r1, [sp, #0]
 8005acc:	1d7a      	adds	r2, r7, #5
 8005ace:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005ad2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ad6:	f001 f9ab 	bl	8006e30 <chThdCreateStatic>
 8005ada:	2320      	movs	r3, #32
 8005adc:	6120      	str	r0, [r4, #16]
 8005ade:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005ae2:	f003 f955 	bl	8008d90 <chCondSignalI.constprop.56>
  chCondSignalI(&c1);
 8005ae6:	f003 f953 	bl	8008d90 <chCondSignalI.constprop.56>
  chCondSignalI(&c1);
 8005aea:	f003 f951 	bl	8008d90 <chCondSignalI.constprop.56>
  chCondSignalI(&c1);
 8005aee:	f003 f94f 	bl	8008d90 <chCondSignalI.constprop.56>
  chCondSignalI(&c1);
 8005af2:	f003 f94d 	bl	8008d90 <chCondSignalI.constprop.56>
  chSchRescheduleS();
 8005af6:	f001 f8ab 	bl	8006c50 <chSchRescheduleS>
 8005afa:	2300      	movs	r3, #0
 8005afc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8005b00:	f000 f86e 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005b04:	490c      	ldr	r1, [pc, #48]	; (8005b38 <mtx6_execute.lto_priv.141+0xd8>)
 8005b06:	2001      	movs	r0, #1
}
 8005b08:	b003      	add	sp, #12
 8005b0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005b0e:	f000 b8b7 	b.w	8005c80 <_test_assert_sequence>
 8005b12:	bf00      	nop
 8005b14:	20001de0 	.word	0x20001de0
 8005b18:	20001768 	.word	0x20001768
 8005b1c:	08005901 	.word	0x08005901
 8005b20:	08009a54 	.word	0x08009a54
 8005b24:	20001480 	.word	0x20001480
 8005b28:	0800979c 	.word	0x0800979c
 8005b2c:	080099d8 	.word	0x080099d8
 8005b30:	080099d4 	.word	0x080099d4
 8005b34:	080099d0 	.word	0x080099d0
 8005b38:	08009a50 	.word	0x08009a50
 8005b3c:	f3af 8000 	nop.w

08005b40 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4e09      	ldr	r6, [pc, #36]	; (8005b68 <print_line+0x28>)
 8005b44:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8005b46:	6830      	ldr	r0, [r6, #0]
 8005b48:	212d      	movs	r1, #45	; 0x2d
 8005b4a:	6803      	ldr	r3, [r0, #0]
 8005b4c:	4d06      	ldr	r5, [pc, #24]	; (8005b68 <print_line+0x28>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8005b52:	3c01      	subs	r4, #1
 8005b54:	d1f7      	bne.n	8005b46 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005b56:	6828      	ldr	r0, [r5, #0]
 8005b58:	4904      	ldr	r1, [pc, #16]	; (8005b6c <print_line+0x2c>)
 8005b5a:	6803      	ldr	r3, [r0, #0]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	681b      	ldr	r3, [r3, #0]
}
 8005b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005b64:	4718      	bx	r3
 8005b66:	bf00      	nop
 8005b68:	2000149c 	.word	0x2000149c
 8005b6c:	0800a5c0 	.word	0x0800a5c0

08005b70 <tmr.lto_priv.79>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8005b70:	4b01      	ldr	r3, [pc, #4]	; (8005b78 <tmr.lto_priv.79+0x8>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	4770      	bx	lr
 8005b78:	20001760 	.word	0x20001760
 8005b7c:	f3af 8000 	nop.w

08005b80 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8005b80:	b410      	push	{r4}
 8005b82:	2320      	movs	r3, #32
 8005b84:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
 8005b88:	4c09      	ldr	r4, [pc, #36]	; (8005bb0 <chCoreAlloc+0x30>)
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <chCoreAlloc+0x34>)
 8005b8c:	6822      	ldr	r2, [r4, #0]
 8005b8e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8005b90:	1dc3      	adds	r3, r0, #7
 8005b92:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size)
 8005b96:	1a89      	subs	r1, r1, r2
 8005b98:	428b      	cmp	r3, r1
    return NULL;
  p = nextmem;
  nextmem += size;
 8005b9a:	bf9d      	ittte	ls
 8005b9c:	189b      	addls	r3, r3, r2
 8005b9e:	6023      	strls	r3, [r4, #0]
  return p;
 8005ba0:	4610      	movls	r0, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
    return NULL;
 8005ba2:	2000      	movhi	r0, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();
  return p;
}
 8005baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20001398 	.word	0x20001398
 8005bb4:	200013a0 	.word	0x200013a0
 8005bb8:	f3af 8000 	nop.w
 8005bbc:	f3af 8000 	nop.w

08005bc0 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8005bc0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	f001 fa44 	bl	8007050 <chThdSleep>
 8005bc8:	2320      	movs	r3, #32
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8005bda:	b280      	uxth	r0, r0
 8005bdc:	bd08      	pop	{r3, pc}
 8005bde:	bf00      	nop

08005be0 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4c07      	ldr	r4, [pc, #28]	; (8005c00 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8005be4:	2600      	movs	r6, #0
 8005be6:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8005bea:	f854 0b04 	ldr.w	r0, [r4], #4
 8005bee:	b118      	cbz	r0, 8005bf8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8005bf0:	f001 f99e 	bl	8006f30 <chThdWait>
      threads[i] = NULL;
 8005bf4:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8005bf8:	42ac      	cmp	r4, r5
 8005bfa:	d1f6      	bne.n	8005bea <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	bf00      	nop
 8005c00:	20001480 	.word	0x20001480
 8005c04:	f3af 8000 	nop.w
 8005c08:	f3af 8000 	nop.w
 8005c0c:	f3af 8000 	nop.w

08005c10 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <test_terminate_threads+0x2c>)
 8005c12:	b430      	push	{r4, r5}
 8005c14:	f103 0014 	add.w	r0, r3, #20
 8005c18:	2520      	movs	r5, #32
 8005c1a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8005c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c20:	b13a      	cbz	r2, 8005c32 <test_terminate_threads+0x22>
 8005c22:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8005c26:	7f51      	ldrb	r1, [r2, #29]
 8005c28:	f041 0104 	orr.w	r1, r1, #4
 8005c2c:	7751      	strb	r1, [r2, #29]
 8005c2e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8005c32:	4283      	cmp	r3, r0
 8005c34:	d1f2      	bne.n	8005c1c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8005c36:	bc30      	pop	{r4, r5}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20001480 	.word	0x20001480

08005c40 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8005c40:	b410      	push	{r4}
 8005c42:	2320      	movs	r3, #32
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	b2a4      	uxth	r4, r4
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 8005c56:	1a64      	subs	r4, r4, r1
 8005c58:	1a52      	subs	r2, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8005c5a:	4294      	cmp	r4, r2
 8005c5c:	db06      	blt.n	8005c6c <_test_assert_time_window+0x2c>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005c5e:	4c05      	ldr	r4, [pc, #20]	; (8005c74 <_test_assert_time_window+0x34>)
  global_fail = TRUE;
 8005c60:	4905      	ldr	r1, [pc, #20]	; (8005c78 <_test_assert_time_window+0x38>)
  failpoint = point;
 8005c62:	4a06      	ldr	r2, [pc, #24]	; (8005c7c <_test_assert_time_window+0x3c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
 8005c68:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8005c6a:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20001499 	.word	0x20001499
 8005c78:	20001498 	.word	0x20001498
 8005c7c:	200014b0 	.word	0x200014b0

08005c80 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8005c80:	b4f0      	push	{r4, r5, r6, r7}
 8005c82:	4e0e      	ldr	r6, [pc, #56]	; (8005cbc <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 8005c84:	4f0e      	ldr	r7, [pc, #56]	; (8005cc0 <_test_assert_sequence+0x40>)
 8005c86:	6835      	ldr	r5, [r6, #0]
 8005c88:	463b      	mov	r3, r7
 8005c8a:	e005      	b.n	8005c98 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 8005c8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8005c90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c94:	4294      	cmp	r4, r2
 8005c96:	d107      	bne.n	8005ca8 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8005c98:	42ab      	cmp	r3, r5
 8005c9a:	d3f7      	bcc.n	8005c8c <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8005c9c:	780b      	ldrb	r3, [r1, #0]
 8005c9e:	b91b      	cbnz	r3, 8005ca8 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8005ca0:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	bcf0      	pop	{r4, r5, r6, r7}
 8005ca6:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005ca8:	4c06      	ldr	r4, [pc, #24]	; (8005cc4 <_test_assert_sequence+0x44>)
  global_fail = TRUE;
 8005caa:	4907      	ldr	r1, [pc, #28]	; (8005cc8 <_test_assert_sequence+0x48>)
  failpoint = point;
 8005cac:	4a07      	ldr	r2, [pc, #28]	; (8005ccc <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8005cb2:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8005cb4:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8005cba:	4770      	bx	lr
 8005cbc:	20001494 	.word	0x20001494
 8005cc0:	200014a0 	.word	0x200014a0
 8005cc4:	20001499 	.word	0x20001499
 8005cc8:	20001498 	.word	0x20001498
 8005ccc:	200014b0 	.word	0x200014b0

08005cd0 <thd2_execute>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005cd4:	4e47      	ldr	r6, [pc, #284]	; (8005df4 <thd2_execute+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005cd6:	4d48      	ldr	r5, [pc, #288]	; (8005df8 <thd2_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005cd8:	69b3      	ldr	r3, [r6, #24]
 8005cda:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8005e10 <thd2_execute+0x140>
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	4946      	ldr	r1, [pc, #280]	; (8005dfc <thd2_execute+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005ce2:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	9100      	str	r1, [sp, #0]
 8005ce8:	3a04      	subs	r2, #4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005cf0:	f001 f89e 	bl	8006e30 <chThdCreateStatic>
 8005cf4:	69b3      	ldr	r3, [r6, #24]
 8005cf6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8005e14 <thd2_execute+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	4940      	ldr	r1, [pc, #256]	; (8005e00 <thd2_execute+0x130>)
 8005cfe:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005d02:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005d06:	464b      	mov	r3, r9
 8005d08:	9100      	str	r1, [sp, #0]
 8005d0a:	3a05      	subs	r2, #5
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d12:	f001 f88d 	bl	8006e30 <chThdCreateStatic>
 8005d16:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005d18:	493a      	ldr	r1, [pc, #232]	; (8005e04 <thd2_execute+0x134>)
 8005d1a:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005d1c:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005d20:	464b      	mov	r3, r9
 8005d22:	9100      	str	r1, [sp, #0]
 8005d24:	3a01      	subs	r2, #1
 8005d26:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8005d2a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d2e:	f001 f87f 	bl	8006e30 <chThdCreateStatic>
 8005d32:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005d34:	4934      	ldr	r1, [pc, #208]	; (8005e08 <thd2_execute+0x138>)
 8005d36:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005d38:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005d3c:	9100      	str	r1, [sp, #0]
 8005d3e:	3a02      	subs	r2, #2
 8005d40:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005d44:	464b      	mov	r3, r9
 8005d46:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d4a:	f001 f871 	bl	8006e30 <chThdCreateStatic>
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c8 000c 	str.w	r0, [r8, #12]
 8005d54:	f382 8811 	msr	BASEPRI, r2
 8005d58:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005d5a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005d5c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005d5e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8005e18 <thd2_execute+0x148>
 8005d62:	f1a3 0a03 	sub.w	sl, r3, #3
 8005d66:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8005e1c <thd2_execute+0x14c>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005d6a:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005d6e:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005d70:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8005d74:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8005d78:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005d7c:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005d80:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005d82:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8005d86:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8005d8a:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005d8e:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005d92:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8005d96:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 8005d9a:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005d9e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005da2:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 8005da6:	6173      	str	r3, [r6, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005da8:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005dac:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8005db0:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8005db4:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8005db8:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005dbc:	610b      	str	r3, [r1, #16]
 8005dbe:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005dc2:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8005dc6:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8005dca:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
 8005dce:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8005dd2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005dd6:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8005dda:	f001 f949 	bl	8007070 <chSchReadyI>
 8005dde:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8005de2:	f7ff fefd 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005de6:	4650      	mov	r0, sl
 8005de8:	4908      	ldr	r1, [pc, #32]	; (8005e0c <thd2_execute+0x13c>)
}
 8005dea:	b003      	add	sp, #12
 8005dec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005df0:	f7ff bf46 	b.w	8005c80 <_test_assert_sequence>
 8005df4:	20001de0 	.word	0x20001de0
 8005df8:	200018b0 	.word	0x200018b0
 8005dfc:	0800979c 	.word	0x0800979c
 8005e00:	08009a54 	.word	0x08009a54
 8005e04:	080099d0 	.word	0x080099d0
 8005e08:	080099d4 	.word	0x080099d4
 8005e0c:	08009a50 	.word	0x08009a50
 8005e10:	08005f51 	.word	0x08005f51
 8005e14:	20001480 	.word	0x20001480
 8005e18:	080099d8 	.word	0x080099d8
 8005e1c:	08000681 	.word	0x08000681

08005e20 <thd1_execute>:

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005e22:	4f27      	ldr	r7, [pc, #156]	; (8005ec0 <thd1_execute+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005e24:	4e27      	ldr	r6, [pc, #156]	; (8005ec4 <thd1_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	4d27      	ldr	r5, [pc, #156]	; (8005ec8 <thd1_execute+0xa8>)
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	4927      	ldr	r1, [pc, #156]	; (8005ecc <thd1_execute+0xac>)

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8005e2e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005e30:	462b      	mov	r3, r5
 8005e32:	9100      	str	r1, [sp, #0]
 8005e34:	3a05      	subs	r2, #5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e3c:	f000 fff8 	bl	8006e30 <chThdCreateStatic>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4c23      	ldr	r4, [pc, #140]	; (8005ed0 <thd1_execute+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	4923      	ldr	r1, [pc, #140]	; (8005ed4 <thd1_execute+0xb4>)
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005e48:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	9100      	str	r1, [sp, #0]
 8005e4e:	3a04      	subs	r2, #4
 8005e50:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8005e54:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e58:	f000 ffea 	bl	8006e30 <chThdCreateStatic>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005e5e:	491e      	ldr	r1, [pc, #120]	; (8005ed8 <thd1_execute+0xb8>)
 8005e60:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005e62:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005e64:	462b      	mov	r3, r5
 8005e66:	9100      	str	r1, [sp, #0]
 8005e68:	3a03      	subs	r2, #3
 8005e6a:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8005e6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e72:	f000 ffdd 	bl	8006e30 <chThdCreateStatic>
 8005e76:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005e78:	4918      	ldr	r1, [pc, #96]	; (8005edc <thd1_execute+0xbc>)
 8005e7a:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005e7c:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005e7e:	462b      	mov	r3, r5
 8005e80:	9100      	str	r1, [sp, #0]
 8005e82:	3a02      	subs	r2, #2
 8005e84:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8005e88:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e8c:	f000 ffd0 	bl	8006e30 <chThdCreateStatic>
 8005e90:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005e92:	4913      	ldr	r1, [pc, #76]	; (8005ee0 <thd1_execute+0xc0>)
 8005e94:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005e96:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	9100      	str	r1, [sp, #0]
 8005e9e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005ea2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ea6:	f000 ffc3 	bl	8006e30 <chThdCreateStatic>
 8005eaa:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8005eac:	f7ff fe98 	bl	8005be0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005eb0:	490c      	ldr	r1, [pc, #48]	; (8005ee4 <thd1_execute+0xc4>)
 8005eb2:	2001      	movs	r0, #1
}
 8005eb4:	b003      	add	sp, #12
 8005eb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005eba:	f7ff bee1 	b.w	8005c80 <_test_assert_sequence>
 8005ebe:	bf00      	nop
 8005ec0:	20001de0 	.word	0x20001de0
 8005ec4:	20001768 	.word	0x20001768
 8005ec8:	08005f51 	.word	0x08005f51
 8005ecc:	08009a54 	.word	0x08009a54
 8005ed0:	20001480 	.word	0x20001480
 8005ed4:	0800979c 	.word	0x0800979c
 8005ed8:	080099d8 	.word	0x080099d8
 8005edc:	080099d4 	.word	0x080099d4
 8005ee0:	080099d0 	.word	0x080099d0
 8005ee4:	08009a50 	.word	0x08009a50
 8005ee8:	f3af 8000 	nop.w
 8005eec:	f3af 8000 	nop.w

08005ef0 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8005ef0:	b959      	cbnz	r1, 8005f0a <_test_assert+0x1a>
  global_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8005ef2:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8005ef4:	4906      	ldr	r1, [pc, #24]	; (8005f10 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005ef6:	4c07      	ldr	r4, [pc, #28]	; (8005f14 <_test_assert+0x24>)
  global_fail = TRUE;
  failpoint = point;
 8005ef8:	4a07      	ldr	r2, [pc, #28]	; (8005f18 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8005efe:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8005f00:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f08:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	4770      	bx	lr
 8005f10:	20001498 	.word	0x20001498
 8005f14:	20001499 	.word	0x20001499
 8005f18:	200014b0 	.word	0x200014b0
 8005f1c:	f3af 8000 	nop.w

08005f20 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 8005f20:	b410      	push	{r4}
 8005f22:	2320      	movs	r3, #32
 8005f24:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <test_emit_token+0x20>)
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	1c54      	adds	r4, r2, #1
 8005f30:	7010      	strb	r0, [r2, #0]
 8005f32:	601c      	str	r4, [r3, #0]
 8005f34:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8005f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20001494 	.word	0x20001494
 8005f44:	f3af 8000 	nop.w
 8005f48:	f3af 8000 	nop.w
 8005f4c:	f3af 8000 	nop.w

08005f50 <thread>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 8005f50:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8005f52:	7800      	ldrb	r0, [r0, #0]
 8005f54:	f7ff ffe4 	bl	8005f20 <test_emit_token>
  return 0;
}
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd08      	pop	{r3, pc}
 8005f5c:	f3af 8000 	nop.w

08005f60 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8005f60:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f62:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8005f64:	4604      	mov	r4, r0
 8005f66:	4d09      	ldr	r5, [pc, #36]	; (8005f8c <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f68:	b139      	cbz	r1, 8005f7a <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 8005f6a:	6828      	ldr	r0, [r5, #0]
 8005f6c:	6803      	ldr	r3, [r0, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005f72:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005f76:	2900      	cmp	r1, #0
 8005f78:	d1f7      	bne.n	8005f6a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005f7a:	6828      	ldr	r0, [r5, #0]
 8005f7c:	4904      	ldr	r1, [pc, #16]	; (8005f90 <test_println+0x30>)
 8005f7e:	6803      	ldr	r3, [r0, #0]
 8005f80:	2202      	movs	r2, #2
 8005f82:	681b      	ldr	r3, [r3, #0]
}
 8005f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005f88:	4718      	bx	r3
 8005f8a:	bf00      	nop
 8005f8c:	2000149c 	.word	0x2000149c
 8005f90:	0800a5c0 	.word	0x0800a5c0
 8005f94:	f3af 8000 	nop.w
 8005f98:	f3af 8000 	nop.w
 8005f9c:	f3af 8000 	nop.w

08005fa0 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8005fa0:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8005fa2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8005fa4:	4604      	mov	r4, r0

  while (*msgp)
 8005fa6:	b141      	cbz	r1, 8005fba <test_print+0x1a>
 8005fa8:	4d04      	ldr	r5, [pc, #16]	; (8005fbc <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 8005faa:	6828      	ldr	r0, [r5, #0]
 8005fac:	6803      	ldr	r3, [r0, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005fb2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	d1f7      	bne.n	8005faa <test_print+0xa>
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	2000149c 	.word	0x2000149c

08005fc0 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8005fc0:	b310      	cbz	r0, 8006008 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8005fc2:	b570      	push	{r4, r5, r6, lr}
 8005fc4:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8005fc6:	466d      	mov	r5, sp
 8005fc8:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8005fca:	4a12      	ldr	r2, [pc, #72]	; (8006014 <test_printn+0x54>)
 8005fcc:	fba2 1300 	umull	r1, r3, r2, r0
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005fd6:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8005fda:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8005fde:	b2c9      	uxtb	r1, r1
 8005fe0:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8005fea:	42ac      	cmp	r4, r5
 8005fec:	d90a      	bls.n	8006004 <test_printn+0x44>
 8005fee:	4e0a      	ldr	r6, [pc, #40]	; (8006018 <test_printn+0x58>)
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	e001      	b.n	8005ff8 <test_printn+0x38>
 8005ff4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8005ff8:	6830      	ldr	r0, [r6, #0]
 8005ffa:	6803      	ldr	r3, [r0, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8006000:	42ac      	cmp	r4, r5
 8006002:	d1f7      	bne.n	8005ff4 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8006004:	b004      	add	sp, #16
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <test_printn+0x58>)
 800600a:	2130      	movs	r1, #48	; 0x30
 800600c:	6818      	ldr	r0, [r3, #0]
 800600e:	6803      	ldr	r3, [r0, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	4718      	bx	r3
 8006014:	cccccccd 	.word	0xcccccccd
 8006018:	2000149c 	.word	0x2000149c
 800601c:	f3af 8000 	nop.w

08006020 <TestThread>:
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8006020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8006024:	4ca1      	ldr	r4, [pc, #644]	; (80062ac <TestThread+0x28c>)
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8006026:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8006028:	6020      	str	r0, [r4, #0]
  test_println("");
 800602a:	48a1      	ldr	r0, [pc, #644]	; (80062b0 <TestThread+0x290>)
 800602c:	f7ff ff98 	bl	8005f60 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8006030:	48a0      	ldr	r0, [pc, #640]	; (80062b4 <TestThread+0x294>)
 8006032:	f7ff ff95 	bl	8005f60 <test_println>
  test_println("***");
 8006036:	4da0      	ldr	r5, [pc, #640]	; (80062b8 <TestThread+0x298>)
 8006038:	48a0      	ldr	r0, [pc, #640]	; (80062bc <TestThread+0x29c>)
 800603a:	f7ff ff91 	bl	8005f60 <test_println>
 800603e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	6803      	ldr	r3, [r0, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006048:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800604c:	2900      	cmp	r1, #0
 800604e:	d1f7      	bne.n	8006040 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8006050:	489b      	ldr	r0, [pc, #620]	; (80062c0 <TestThread+0x2a0>)
 8006052:	4d9c      	ldr	r5, [pc, #624]	; (80062c4 <TestThread+0x2a4>)
 8006054:	f7ff ff84 	bl	8005f60 <test_println>
 8006058:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800605a:	6820      	ldr	r0, [r4, #0]
 800605c:	6803      	ldr	r3, [r0, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006062:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006066:	2900      	cmp	r1, #0
 8006068:	d1f7      	bne.n	800605a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800606a:	4897      	ldr	r0, [pc, #604]	; (80062c8 <TestThread+0x2a8>)
 800606c:	4d97      	ldr	r5, [pc, #604]	; (80062cc <TestThread+0x2ac>)
 800606e:	f7ff ff77 	bl	8005f60 <test_println>
 8006072:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	6803      	ldr	r3, [r0, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800607c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006080:	2900      	cmp	r1, #0
 8006082:	d1f7      	bne.n	8006074 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8006084:	4892      	ldr	r0, [pc, #584]	; (80062d0 <TestThread+0x2b0>)
 8006086:	4d93      	ldr	r5, [pc, #588]	; (80062d4 <TestThread+0x2b4>)
 8006088:	f7ff ff6a 	bl	8005f60 <test_println>
 800608c:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	6803      	ldr	r3, [r0, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006096:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800609a:	2900      	cmp	r1, #0
 800609c:	d1f7      	bne.n	800608e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800609e:	488e      	ldr	r0, [pc, #568]	; (80062d8 <TestThread+0x2b8>)
 80060a0:	4d8e      	ldr	r5, [pc, #568]	; (80062dc <TestThread+0x2bc>)
 80060a2:	f7ff ff5d 	bl	8005f60 <test_println>
 80060a6:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	6803      	ldr	r3, [r0, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060b0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80060b4:	2900      	cmp	r1, #0
 80060b6:	d1f7      	bne.n	80060a8 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 80060b8:	4889      	ldr	r0, [pc, #548]	; (80062e0 <TestThread+0x2c0>)
 80060ba:	4d8a      	ldr	r5, [pc, #552]	; (80062e4 <TestThread+0x2c4>)
 80060bc:	f7ff ff50 	bl	8005f60 <test_println>
 80060c0:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060c2:	6820      	ldr	r0, [r4, #0]
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060ca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d1f7      	bne.n	80060c2 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 80060d2:	4885      	ldr	r0, [pc, #532]	; (80062e8 <TestThread+0x2c8>)
 80060d4:	4d85      	ldr	r5, [pc, #532]	; (80062ec <TestThread+0x2cc>)
 80060d6:	f7ff ff43 	bl	8005f60 <test_println>
 80060da:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	6803      	ldr	r3, [r0, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060e4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80060e8:	2900      	cmp	r1, #0
 80060ea:	d1f7      	bne.n	80060dc <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 80060ec:	4880      	ldr	r0, [pc, #512]	; (80062f0 <TestThread+0x2d0>)
 80060ee:	4d81      	ldr	r5, [pc, #516]	; (80062f4 <TestThread+0x2d4>)
 80060f0:	f7ff ff36 	bl	8005f60 <test_println>
 80060f4:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060f6:	6820      	ldr	r0, [r4, #0]
 80060f8:	6803      	ldr	r3, [r0, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060fe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006102:	2900      	cmp	r1, #0
 8006104:	d1f7      	bne.n	80060f6 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8006106:	487c      	ldr	r0, [pc, #496]	; (80062f8 <TestThread+0x2d8>)
 8006108:	9100      	str	r1, [sp, #0]
 800610a:	f7ff ff29 	bl	8005f60 <test_println>
#endif
  test_println("");
 800610e:	4868      	ldr	r0, [pc, #416]	; (80062b0 <TestThread+0x290>)
 8006110:	f7ff ff26 	bl	8005f60 <test_println>

  global_fail = FALSE;
 8006114:	4b79      	ldr	r3, [pc, #484]	; (80062fc <TestThread+0x2dc>)
 8006116:	9900      	ldr	r1, [sp, #0]
 8006118:	4f79      	ldr	r7, [pc, #484]	; (8006300 <TestThread+0x2e0>)
 800611a:	7019      	strb	r1, [r3, #0]
 800611c:	4b79      	ldr	r3, [pc, #484]	; (8006304 <TestThread+0x2e4>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800611e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80062ac <TestThread+0x28c>
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8006126:	2600      	movs	r6, #0
 8006128:	3301      	adds	r3, #1
 800612a:	9300      	str	r3, [sp, #0]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 800612c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8006130:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 808b 	beq.w	8006250 <TestThread+0x230>
      print_line();
 800613a:	4d73      	ldr	r5, [pc, #460]	; (8006308 <TestThread+0x2e8>)
 800613c:	f7ff fd00 	bl	8005b40 <print_line>
 8006140:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	6803      	ldr	r3, [r0, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800614a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800614e:	2900      	cmp	r1, #0
 8006150:	d1f7      	bne.n	8006142 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8006152:	9800      	ldr	r0, [sp, #0]
 8006154:	f7ff ff34 	bl	8005fc0 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006158:	f8db 0000 	ldr.w	r0, [fp]
 800615c:	212e      	movs	r1, #46	; 0x2e
 800615e:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8006160:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8006166:	4d69      	ldr	r5, [pc, #420]	; (800630c <TestThread+0x2ec>)
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff ff29 	bl	8005fc0 <test_printn>
 800616e:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	6803      	ldr	r3, [r0, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006178:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800617c:	2900      	cmp	r1, #0
 800617e:	d1f7      	bne.n	8006170 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8006180:	f8d8 3000 	ldr.w	r3, [r8]
 8006184:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006186:	7829      	ldrb	r1, [r5, #0]
 8006188:	b139      	cbz	r1, 800619a <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	6803      	ldr	r3, [r0, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006192:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006196:	2900      	cmp	r1, #0
 8006198:	d1f7      	bne.n	800618a <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 800619a:	485d      	ldr	r0, [pc, #372]	; (8006310 <TestThread+0x2f0>)
 800619c:	f7ff fee0 	bl	8005f60 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 80061a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80061a4:	f000 ff54 	bl	8007050 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80061a8:	4a5a      	ldr	r2, [pc, #360]	; (8006314 <TestThread+0x2f4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 80061aa:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80061ae:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	6053      	str	r3, [r2, #4]
 80061b4:	6093      	str	r3, [r2, #8]
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80061ba:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8006340 <TestThread+0x320>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80061be:	4d56      	ldr	r5, [pc, #344]	; (8006318 <TestThread+0x2f8>)
 80061c0:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8006328 <TestThread+0x308>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80061c4:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80061c8:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80061cc:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80061d0:	b102      	cbz	r2, 80061d4 <TestThread+0x1b4>
    tcp->setup();
 80061d2:	4790      	blx	r2
  tcp->execute();
 80061d4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80061d8:	4798      	blx	r3
  if (tcp->teardown != NULL)
 80061da:	f8da 3008 	ldr.w	r3, [sl, #8]
 80061de:	b103      	cbz	r3, 80061e2 <TestThread+0x1c2>
    tcp->teardown();
 80061e0:	4798      	blx	r3

  test_wait_threads();
 80061e2:	f7ff fcfd 	bl	8005be0 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 80061e6:	f898 3000 	ldrb.w	r3, [r8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d051      	beq.n	8006292 <TestThread+0x272>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 80061ee:	4f4b      	ldr	r7, [pc, #300]	; (800631c <TestThread+0x2fc>)
 80061f0:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	6803      	ldr	r3, [r0, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80061fa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80061fe:	2900      	cmp	r1, #0
 8006200:	d1f7      	bne.n	80061f2 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8006202:	4b47      	ldr	r3, [pc, #284]	; (8006320 <TestThread+0x300>)
 8006204:	4f47      	ldr	r7, [pc, #284]	; (8006324 <TestThread+0x304>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	f7ff feda 	bl	8005fc0 <test_printn>
 800620c:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800620e:	6820      	ldr	r0, [r4, #0]
 8006210:	6803      	ldr	r3, [r0, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006216:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800621a:	2900      	cmp	r1, #0
 800621c:	d1f7      	bne.n	800620e <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	454b      	cmp	r3, r9
 8006222:	d909      	bls.n	8006238 <TestThread+0x218>
 8006224:	4f40      	ldr	r7, [pc, #256]	; (8006328 <TestThread+0x308>)
    chSequentialStreamPut(chp, *cp++);
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	f817 1b01 	ldrb.w	r1, [r7], #1
 800622c:	6803      	ldr	r3, [r0, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	429f      	cmp	r7, r3
 8006236:	d3f6      	bcc.n	8006226 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8006238:	483c      	ldr	r0, [pc, #240]	; (800632c <TestThread+0x30c>)
 800623a:	f7ff fe91 	bl	8005f60 <test_println>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	681f      	ldr	r7, [r3, #0]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8006242:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8006246:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	f47f af75 	bne.w	800613a <TestThread+0x11a>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8006256:	9301      	str	r3, [sp, #4]
 8006258:	2f00      	cmp	r7, #0
 800625a:	f47f af63 	bne.w	8006124 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 800625e:	f7ff fc6f 	bl	8005b40 <print_line>
  test_println("");
 8006262:	4d33      	ldr	r5, [pc, #204]	; (8006330 <TestThread+0x310>)
 8006264:	4812      	ldr	r0, [pc, #72]	; (80062b0 <TestThread+0x290>)
 8006266:	f7ff fe7b 	bl	8005f60 <test_println>
 800626a:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006274:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006278:	2900      	cmp	r1, #0
 800627a:	d1f7      	bne.n	800626c <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 800627c:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <TestThread+0x2dc>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b95b      	cbnz	r3, 800629a <TestThread+0x27a>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8006282:	482c      	ldr	r0, [pc, #176]	; (8006334 <TestThread+0x314>)
 8006284:	f7ff fe6c 	bl	8005f60 <test_println>

  return (msg_t)global_fail;
 8006288:	4b1c      	ldr	r3, [pc, #112]	; (80062fc <TestThread+0x2dc>)
 800628a:	7818      	ldrb	r0, [r3, #0]
}
 800628c:	b003      	add	sp, #12
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8006292:	4829      	ldr	r0, [pc, #164]	; (8006338 <TestThread+0x318>)
 8006294:	f7ff fe64 	bl	8005f60 <test_println>
 8006298:	e748      	b.n	800612c <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 800629a:	4828      	ldr	r0, [pc, #160]	; (800633c <TestThread+0x31c>)
 800629c:	f7ff fe60 	bl	8005f60 <test_println>
  else
    test_println("SUCCESS");

  return (msg_t)global_fail;
 80062a0:	4b16      	ldr	r3, [pc, #88]	; (80062fc <TestThread+0x2dc>)
 80062a2:	7818      	ldrb	r0, [r3, #0]
}
 80062a4:	b003      	add	sp, #12
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	bf00      	nop
 80062ac:	2000149c 	.word	0x2000149c
 80062b0:	0800963c 	.word	0x0800963c
 80062b4:	08009ef0 	.word	0x08009ef0
 80062b8:	08009e10 	.word	0x08009e10
 80062bc:	08009f0c 	.word	0x08009f0c
 80062c0:	08009f34 	.word	0x08009f34
 80062c4:	08009e24 	.word	0x08009e24
 80062c8:	08009f40 	.word	0x08009f40
 80062cc:	08009e38 	.word	0x08009e38
 80062d0:	08009f58 	.word	0x08009f58
 80062d4:	08009e4c 	.word	0x08009e4c
 80062d8:	08009fa0 	.word	0x08009fa0
 80062dc:	08009e60 	.word	0x08009e60
 80062e0:	08009fa8 	.word	0x08009fa8
 80062e4:	08009e74 	.word	0x08009e74
 80062e8:	08009fb4 	.word	0x08009fb4
 80062ec:	08009e88 	.word	0x08009e88
 80062f0:	08009fcc 	.word	0x08009fcc
 80062f4:	08009e9c 	.word	0x08009e9c
 80062f8:	08009ff8 	.word	0x08009ff8
 80062fc:	20001498 	.word	0x20001498
 8006300:	08009b90 	.word	0x08009b90
 8006304:	08009c80 	.word	0x08009c80
 8006308:	08009eb0 	.word	0x08009eb0
 800630c:	08009ec0 	.word	0x08009ec0
 8006310:	08009f10 	.word	0x08009f10
 8006314:	20001480 	.word	0x20001480
 8006318:	20001494 	.word	0x20001494
 800631c:	08009ec4 	.word	0x08009ec4
 8006320:	200014b0 	.word	0x200014b0
 8006324:	08009edc 	.word	0x08009edc
 8006328:	200014a0 	.word	0x200014a0
 800632c:	08009f14 	.word	0x08009f14
 8006330:	08009ee0 	.word	0x08009ee0
 8006334:	08009f24 	.word	0x08009f24
 8006338:	08009f18 	.word	0x08009f18
 800633c:	08009f2c 	.word	0x08009f2c
 8006340:	20001499 	.word	0x20001499
 8006344:	f3af 8000 	nop.w
 8006348:	f3af 8000 	nop.w
 800634c:	f3af 8000 	nop.w

08006350 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8006350:	b508      	push	{r3, lr}
 8006352:	2220      	movs	r2, #32
 8006354:	4603      	mov	r3, r0
 8006356:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	b128      	cbz	r0, 800636a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 800635e:	6802      	ldr	r2, [r0, #0]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	2300      	movs	r3, #0
 8006364:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 8006368:	bd08      	pop	{r3, pc}
  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
    mp->mp_next = mp->mp_next->ph_next;
  else if (mp->mp_provider != NULL)
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	2a00      	cmp	r2, #0
 800636e:	d0f8      	beq.n	8006362 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8006370:	6858      	ldr	r0, [r3, #4]
 8006372:	4790      	blx	r2
 8006374:	2300      	movs	r3, #0
 8006376:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 800637a:	bd08      	pop	{r3, pc}
 800637c:	f3af 8000 	nop.w

08006380 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8006380:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 8006382:	4c0f      	ldr	r4, [pc, #60]	; (80063c0 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8006384:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 8006386:	2800      	cmp	r0, #0
 8006388:	bf18      	it	ne
 800638a:	4604      	movne	r4, r0

  H_LOCK(heapp);
 800638c:	f104 0510 	add.w	r5, r4, #16
 8006390:	4628      	mov	r0, r5
 8006392:	f000 ff45 	bl	8007220 <chMtxLock>

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	b173      	cbz	r3, 80063b8 <chHeapStatus+0x38>
 800639a:	2200      	movs	r2, #0
 800639c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800639e:	6858      	ldr	r0, [r3, #4]
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 80063a4:	4402      	add	r2, r0
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f9      	bne.n	800639e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  if (sizep)
 80063aa:	b106      	cbz	r6, 80063ae <chHeapStatus+0x2e>
    *sizep = sz;
 80063ac:	6032      	str	r2, [r6, #0]

  H_UNLOCK(heapp);
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 fca6 	bl	8006d00 <chMtxUnlock>
  return n;
}
 80063b4:	4620      	mov	r0, r4
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
 80063b8:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 80063ba:	461c      	mov	r4, r3
 80063bc:	e7f5      	b.n	80063aa <chHeapStatus+0x2a>
 80063be:	bf00      	nop
 80063c0:	200013a8 	.word	0x200013a8
 80063c4:	f3af 8000 	nop.w
 80063c8:	f3af 8000 	nop.w
 80063cc:	f3af 8000 	nop.w

080063d0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 80063d2:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80063d6:	4606      	mov	r6, r0
  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
  H_LOCK(heapp);
 80063d8:	f105 0710 	add.w	r7, r5, #16
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 80063dc:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80063e0:	3508      	adds	r5, #8
  H_LOCK(heapp);
 80063e2:	4638      	mov	r0, r7
 80063e4:	f000 ff1c 	bl	8007220 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80063e8:	462b      	mov	r3, r5
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80063ea:	42ab      	cmp	r3, r5
 80063ec:	d004      	beq.n	80063f8 <chHeapFree+0x28>
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	d302      	bcc.n	80063f8 <chHeapFree+0x28>
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	42ab      	cmp	r3, r5
 80063f6:	d1fa      	bne.n	80063ee <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80063f8:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80063fa:	b11a      	cbz	r2, 8006404 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80063fc:	4294      	cmp	r4, r2
 80063fe:	d301      	bcc.n	8006404 <chHeapFree+0x34>
 8006400:	4613      	mov	r3, r2
 8006402:	e7f2      	b.n	80063ea <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8006404:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8006408:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800640c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800640e:	f101 0208 	add.w	r2, r1, #8
 8006412:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8006416:	18a0      	adds	r0, r4, r2
 8006418:	42a8      	cmp	r0, r5
 800641a:	d00a      	beq.n	8006432 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800641c:	6859      	ldr	r1, [r3, #4]
 800641e:	f101 0208 	add.w	r2, r1, #8
 8006422:	441a      	add	r2, r3
 8006424:	4294      	cmp	r4, r2
 8006426:	d010      	beq.n	800644a <chHeapFree+0x7a>
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8006428:	4638      	mov	r0, r7
  return;
}
 800642a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 800642e:	f000 bc67 	b.w	8006d00 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8006432:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8006434:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8006436:	194a      	adds	r2, r1, r5
 8006438:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 800643a:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	f101 0208 	add.w	r2, r1, #8
 8006444:	441a      	add	r2, r3
 8006446:	4294      	cmp	r4, r2
 8006448:	d1ee      	bne.n	8006428 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 800644a:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 800644e:	440a      	add	r2, r1
 8006450:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8006452:	e883 0005 	stmia.w	r3, {r0, r2}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8006456:	4638      	mov	r0, r7
  return;
}
 8006458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 800645c:	f000 bc50 	b.w	8006d00 <chMtxUnlock>

08006460 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8006462:	4e21      	ldr	r6, [pc, #132]	; (80064e8 <chHeapAlloc+0x88>)

  size = MEM_ALIGN_NEXT(size);
 8006464:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8006466:	2800      	cmp	r0, #0
 8006468:	bf18      	it	ne
 800646a:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);
 800646c:	f106 0710 	add.w	r7, r6, #16
 8006470:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 8006472:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8006476:	f106 0408 	add.w	r4, r6, #8
  H_LOCK(heapp);
 800647a:	f000 fed1 	bl	8007220 <chMtxLock>
 800647e:	e003      	b.n	8006488 <chHeapAlloc+0x28>

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8006480:	6843      	ldr	r3, [r0, #4]
 8006482:	429d      	cmp	r5, r3
 8006484:	d912      	bls.n	80064ac <chHeapAlloc+0x4c>
 8006486:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	2800      	cmp	r0, #0
 800648c:	d1f8      	bne.n	8006480 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
 800648e:	4638      	mov	r0, r7
 8006490:	f000 fc36 	bl	8006d00 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	b323      	cbz	r3, 80064e2 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8006498:	f105 0008 	add.w	r0, r5, #8
 800649c:	4798      	blx	r3
    if (hp != NULL) {
 800649e:	b300      	cbz	r0, 80064e2 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 80064a0:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 80064a2:	6045      	str	r5, [r0, #4]
      hp++;
 80064a4:	f100 0408 	add.w	r4, r0, #8
      return (void *)hp;
    }
  }
  return NULL;
}
 80064a8:	4620      	mov	r0, r4
 80064aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
 80064ac:	f105 0108 	add.w	r1, r5, #8
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d909      	bls.n	80064c8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 80064b4:	6803      	ldr	r3, [r0, #0]
 80064b6:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 80064b8:	4604      	mov	r4, r0

      H_UNLOCK(heapp);
 80064ba:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 80064bc:	f844 6b08 	str.w	r6, [r4], #8

      H_UNLOCK(heapp);
 80064c0:	f000 fc1e 	bl	8006d00 <chMtxUnlock>
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 80064c4:	4620      	mov	r0, r4
 80064c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c8:	f06f 0e07 	mvn.w	lr, #7
 80064cc:	ebc5 0e0e 	rsb	lr, r5, lr
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 80064d0:	449e      	add	lr, r3
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 80064d2:	6803      	ldr	r3, [r0, #0]
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 80064d4:	1842      	adds	r2, r0, r1
        fp->h.u.next = hp->h.u.next;
 80064d6:	5043      	str	r3, [r0, r1]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 80064d8:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 80064dc:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 80064de:	6045      	str	r5, [r0, #4]
 80064e0:	e7ea      	b.n	80064b8 <chHeapAlloc+0x58>
      hp->h.size = size;
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
 80064e2:	2400      	movs	r4, #0
 80064e4:	e7e0      	b.n	80064a8 <chHeapAlloc+0x48>
 80064e6:	bf00      	nop
 80064e8:	200013a8 	.word	0x200013a8
 80064ec:	f3af 8000 	nop.w

080064f0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	b083      	sub	sp, #12
 80064f6:	4604      	mov	r4, r0
 80064f8:	468b      	mov	fp, r1
 80064fa:	4616      	mov	r6, r2
 80064fc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80064fe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8006502:	f04f 0920 	mov.w	r9, #32
 8006506:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800650a:	2700      	movs	r7, #0
 800650c:	46ba      	mov	sl, r7
 800650e:	f8cd 9000 	str.w	r9, [sp]
 8006512:	68a5      	ldr	r5, [r4, #8]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8006514:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8006518:	1e6a      	subs	r2, r5, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800651a:	b30d      	cbz	r5, 8006560 <chOQWriteTimeout+0x70>
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800651c:	6963      	ldr	r3, [r4, #20]
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 800651e:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	6162      	str	r2, [r4, #20]
 8006524:	f89b 2000 	ldrb.w	r2, [fp]
 8006528:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top)
 800652a:	6923      	ldr	r3, [r4, #16]
 800652c:	6962      	ldr	r2, [r4, #20]
 800652e:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8006530:	bf24      	itt	cs
 8006532:	68e3      	ldrcs	r3, [r4, #12]
 8006534:	6163      	strcs	r3, [r4, #20]

    if (nfy)
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	d001      	beq.n	8006540 <chOQWriteTimeout+0x50>
      nfy(oqp);
 800653c:	4620      	mov	r0, r4
 800653e:	47c0      	blx	r8
 8006540:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
    if (--n == 0)
 8006544:	3e01      	subs	r6, #1

    if (nfy)
      nfy(oqp);

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 8006546:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0)
 800654a:	d011      	beq.n	8006570 <chOQWriteTimeout+0x80>
 800654c:	9b00      	ldr	r3, [sp, #0]
 800654e:	f383 8811 	msr	BASEPRI, r3
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8006552:	46cb      	mov	fp, r9
 8006554:	68a5      	ldr	r5, [r4, #8]
 8006556:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 800655a:	1e6a      	subs	r2, r5, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800655c:	2d00      	cmp	r5, #0
 800655e:	d1dd      	bne.n	800651c <chOQWriteTimeout+0x2c>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 8006560:	4620      	mov	r0, r4
 8006562:	9901      	ldr	r1, [sp, #4]
 8006564:	f000 fd5c 	bl	8007020 <chThdEnqueueTimeoutS>
 8006568:	2800      	cmp	r0, #0
 800656a:	d0d2      	beq.n	8006512 <chOQWriteTimeout+0x22>
 800656c:	f385 8811 	msr	BASEPRI, r5
    w++;
    if (--n == 0)
      return w;
    chSysLock();
  }
}
 8006570:	4638      	mov	r0, r7
 8006572:	b003      	add	sp, #12
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	f3af 8000 	nop.w
 800657c:	f3af 8000 	nop.w

08006580 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	460f      	mov	r7, r1
 8006586:	4616      	mov	r6, r2
 8006588:	2320      	movs	r3, #32
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	e005      	b.n	800659c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8006590:	4620      	mov	r0, r4
 8006592:	4631      	mov	r1, r6
 8006594:	f000 fd44 	bl	8007020 <chThdEnqueueTimeoutS>
 8006598:	2800      	cmp	r0, #0
 800659a:	db16      	blt.n	80065ca <chOQPutTimeout+0x4a>
 800659c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800659e:	2d00      	cmp	r5, #0
 80065a0:	d0f6      	beq.n	8006590 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80065a2:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80065a4:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80065aa:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 80065ac:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top)
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6962      	ldr	r2, [r4, #20]
 80065b2:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80065b4:	bf24      	itt	cs
 80065b6:	68e3      	ldrcs	r3, [r4, #12]
 80065b8:	6163      	strcs	r3, [r4, #20]

  if (oqp->q_notify)
 80065ba:	69e3      	ldr	r3, [r4, #28]
 80065bc:	b10b      	cbz	r3, 80065c2 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 80065be:	4620      	mov	r0, r4
 80065c0:	4798      	blx	r3
 80065c2:	2000      	movs	r0, #0
 80065c4:	f380 8811 	msr	BASEPRI, r0

  chSysUnlock();
  return Q_OK;
}
 80065c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ca:	f385 8811 	msr	BASEPRI, r5
 80065ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065d0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	4604      	mov	r4, r0
 80065d6:	b083      	sub	sp, #12
 80065d8:	4689      	mov	r9, r1
 80065da:	4693      	mov	fp, r2
 80065dc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80065de:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80065e2:	2720      	movs	r7, #32
 80065e4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80065e8:	2600      	movs	r6, #0
 80065ea:	46b2      	mov	sl, r6
 80065ec:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy)
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	d007      	beq.n	8006604 <chIQReadTimeout+0x34>
      nfy(iqp);
 80065f4:	4620      	mov	r0, r4
 80065f6:	47c0      	blx	r8
 80065f8:	e004      	b.n	8006604 <chIQReadTimeout+0x34>

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	f000 fd0f 	bl	8007020 <chThdEnqueueTimeoutS>
 8006602:	b9c8      	cbnz	r0, 8006638 <chIQReadTimeout+0x68>
 8006604:	68a7      	ldr	r7, [r4, #8]
  chSysLock();
  while (true) {
    if (nfy)
      nfy(iqp);

    while (chIQIsEmptyI(iqp)) {
 8006606:	2f00      	cmp	r7, #0
 8006608:	d0f7      	beq.n	80065fa <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800660a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800660c:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 800660e:	1c51      	adds	r1, r2, #1
 8006610:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8006612:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8006614:	7813      	ldrb	r3, [r2, #0]
 8006616:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top)
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	69a2      	ldr	r2, [r4, #24]
 800661e:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8006620:	bf24      	itt	cs
 8006622:	68e3      	ldrcs	r3, [r4, #12]
 8006624:	61a3      	strcs	r3, [r4, #24]
 8006626:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 800662a:	3601      	adds	r6, #1
    if (--n == 0)
 800662c:	45b3      	cmp	fp, r6
 800662e:	d005      	beq.n	800663c <chIQReadTimeout+0x6c>
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	e7da      	b.n	80065ee <chIQReadTimeout+0x1e>
 8006638:	f387 8811 	msr	BASEPRI, r7
      return r;

    chSysLock();
  }
}
 800663c:	4630      	mov	r0, r6
 800663e:	b003      	add	sp, #12
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	f3af 8000 	nop.w
 8006648:	f3af 8000 	nop.w
 800664c:	f3af 8000 	nop.w

08006650 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	2320      	movs	r3, #32
 8006654:	460e      	mov	r6, r1
 8006656:	4604      	mov	r4, r0
 8006658:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify)
 800665c:	69c3      	ldr	r3, [r0, #28]
 800665e:	b13b      	cbz	r3, 8006670 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8006660:	4798      	blx	r3
 8006662:	e005      	b.n	8006670 <chIQGetTimeout+0x20>

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8006664:	4620      	mov	r0, r4
 8006666:	4631      	mov	r1, r6
 8006668:	f000 fcda 	bl	8007020 <chThdEnqueueTimeoutS>
 800666c:	2800      	cmp	r0, #0
 800666e:	db13      	blt.n	8006698 <chIQGetTimeout+0x48>
 8006670:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  if (iqp->q_notify)
    iqp->q_notify(iqp);

  while (chIQIsEmptyI(iqp)) {
 8006672:	2d00      	cmp	r5, #0
 8006674:	d0f6      	beq.n	8006664 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8006676:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top)
 8006678:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800667a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top)
 800667c:	428b      	cmp	r3, r1
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800667e:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8006680:	f105 35ff 	add.w	r5, r5, #4294967295
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top)
    iqp->q_rdptr = iqp->q_buffer;
 8006684:	bf28      	it	cs
 8006686:	68e3      	ldrcs	r3, [r4, #12]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8006688:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
 800668a:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top)
    iqp->q_rdptr = iqp->q_buffer;
 800668c:	bf28      	it	cs
 800668e:	61a3      	strcs	r3, [r4, #24]
 8006690:	2300      	movs	r3, #0
 8006692:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return b;
}
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f385 8811 	msr	BASEPRI, r5
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	bf00      	nop

080066a0 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 80066a0:	4603      	mov	r3, r0
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 80066a2:	6940      	ldr	r0, [r0, #20]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	b510      	push	{r4, lr}
 80066a8:	4290      	cmp	r0, r2
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	d01c      	beq.n	80066e8 <chIQPutI+0x48>
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 80066ae:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
 80066b0:	1c44      	adds	r4, r0, #1
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 80066b2:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
 80066b4:	615c      	str	r4, [r3, #20]
 80066b6:	7001      	strb	r1, [r0, #0]
  if (iqp->q_wrptr >= iqp->q_top)
 80066b8:	6959      	ldr	r1, [r3, #20]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	4291      	cmp	r1, r2
 80066be:	d20c      	bcs.n	80066da <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80066c0:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00e      	beq.n	80066e4 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80066c6:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80066c8:	2400      	movs	r4, #0
 80066ca:	6019      	str	r1, [r3, #0]
  chSchReadyI(tp);
 80066cc:	4610      	mov	r0, r2
 80066ce:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80066d0:	6214      	str	r4, [r2, #32]
  chSchReadyI(tp);
 80066d2:	f000 fccd 	bl	8007070 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 80066d6:	4620      	mov	r0, r4
 80066d8:	bd10      	pop	{r4, pc}
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top)
    iqp->q_wrptr = iqp->q_buffer;
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d1f0      	bne.n	80066c6 <chIQPutI+0x26>

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 80066e4:	2000      	movs	r0, #0
 80066e6:	bd10      	pop	{r4, pc}
 80066e8:	2a00      	cmp	r2, #0
 80066ea:	d0e0      	beq.n	80066ae <chIQPutI+0xe>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;
 80066ec:	f06f 0003 	mvn.w	r0, #3
 80066f0:	bd10      	pop	{r4, pc}
 80066f2:	bf00      	nop
 80066f4:	f3af 8000 	nop.w
 80066f8:	f3af 8000 	nop.w
 80066fc:	f3af 8000 	nop.w

08006700 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8006700:	b510      	push	{r4, lr}
 8006702:	2320      	movs	r3, #32
 8006704:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
 8006708:	4c0b      	ldr	r4, [pc, #44]	; (8006738 <chMsgWait+0x38>)
 800670a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800670c:	4613      	mov	r3, r2
 800670e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8006712:	4298      	cmp	r0, r3
 8006714:	d008      	beq.n	8006728 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006716:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8006718:	240d      	movs	r4, #13
 800671a:	6291      	str	r1, [r2, #40]	; 0x28
 800671c:	604b      	str	r3, [r1, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	7704      	strb	r4, [r0, #28]
 8006722:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();
  return tp;
}
 8006726:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
    chSchGoSleepS(CH_STATE_WTMSG);
 8006728:	200e      	movs	r0, #14
 800672a:	f000 fbc1 	bl	8006eb0 <chSchGoSleepS>
 800672e:	69a2      	ldr	r2, [r4, #24]
 8006730:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8006732:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8006736:	e7ee      	b.n	8006716 <chMsgWait+0x16>
 8006738:	20001de0 	.word	0x20001de0
 800673c:	f3af 8000 	nop.w

08006740 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8006740:	4b0e      	ldr	r3, [pc, #56]	; (800677c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8006742:	b570      	push	{r4, r5, r6, lr}
 8006744:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8006746:	699c      	ldr	r4, [r3, #24]
 8006748:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800674c:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8006750:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8006752:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006754:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8006756:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8006758:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 800675a:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 800675c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800675e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006760:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8006762:	d007      	beq.n	8006774 <chMsgSend+0x34>
    chSchReadyI(tp);
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8006764:	200c      	movs	r0, #12
 8006766:	f000 fba3 	bl	8006eb0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800676a:	6a20      	ldr	r0, [r4, #32]
 800676c:	2300      	movs	r3, #0
 800676e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8006772:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
    chSchReadyI(tp);
 8006774:	f000 fc7c 	bl	8007070 <chSchReadyI>
 8006778:	e7f4      	b.n	8006764 <chMsgSend+0x24>
 800677a:	bf00      	nop
 800677c:	20001de0 	.word	0x20001de0

08006780 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8006780:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8006782:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8006784:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8006786:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8006788:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800678a:	d00a      	beq.n	80067a2 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 800678c:	2a0b      	cmp	r2, #11
 800678e:	d000      	beq.n	8006792 <chEvtSignalI+0x12>
 8006790:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8006792:	6a03      	ldr	r3, [r0, #32]
 8006794:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8006796:	428b      	cmp	r3, r1
 8006798:	d1fa      	bne.n	8006790 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	6203      	str	r3, [r0, #32]
    chSchReadyI(tp);
 800679e:	f000 bc67 	b.w	8007070 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 80067a2:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80067a4:	4219      	tst	r1, r3
 80067a6:	d1f8      	bne.n	800679a <chEvtSignalI+0x1a>
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w

080067b0 <wakeup.lto_priv.118>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80067b0:	b410      	push	{r4}
 80067b2:	2320      	movs	r3, #32
 80067b4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80067b8:	7f03      	ldrb	r3, [r0, #28]
 80067ba:	2b07      	cmp	r3, #7
 80067bc:	d80e      	bhi.n	80067dc <wakeup.lto_priv.118+0x2c>
 80067be:	e8df f003 	tbb	[pc, r3]
 80067c2:	0d27      	.short	0x0d27
 80067c4:	0408230d 	.word	0x0408230d
 80067c8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 80067ca:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80067cc:	6893      	ldr	r3, [r2, #8]
 80067ce:	3301      	adds	r3, #1
 80067d0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80067d2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80067d6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80067d8:	6802      	ldr	r2, [r0, #0]
 80067da:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80067dc:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80067e0:	2200      	movs	r2, #0
 80067e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <wakeup.lto_priv.118+0x6c>)
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80067e6:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80067e8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80067ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	428a      	cmp	r2, r1
 80067f0:	d2fb      	bcs.n	80067ea <wakeup.lto_priv.118+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80067f6:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80067f8:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80067fa:	6058      	str	r0, [r3, #4]
 80067fc:	6010      	str	r0, [r2, #0]
 80067fe:	f381 8811 	msr	BASEPRI, r1
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8006802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006806:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 8006808:	6a03      	ldr	r3, [r0, #32]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e7e5      	b.n	80067dc <wakeup.lto_priv.118+0x2c>
 8006810:	2300      	movs	r3, #0
 8006812:	f383 8811 	msr	BASEPRI, r3
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8006816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20001de0 	.word	0x20001de0

08006820 <_idle_thread.lto_priv.88>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 8006820:	4b02      	ldr	r3, [pc, #8]	; (800682c <_idle_thread.lto_priv.88+0xc>)
 8006822:	4a03      	ldr	r2, [pc, #12]	; (8006830 <_idle_thread.lto_priv.88+0x10>)
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	619a      	str	r2, [r3, #24]
 8006828:	e7fe      	b.n	8006828 <_idle_thread.lto_priv.88+0x8>
 800682a:	bf00      	nop
 800682c:	20001de0 	.word	0x20001de0
 8006830:	0800a4b0 	.word	0x0800a4b0
 8006834:	f3af 8000 	nop.w
 8006838:	f3af 8000 	nop.w
 800683c:	f3af 8000 	nop.w

08006840 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8006840:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8006844:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8006846:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800684a:	2300      	movs	r3, #0
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	f3af 8000 	nop.w
 8006858:	f3af 8000 	nop.w
 800685c:	f3af 8000 	nop.w

08006860 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8006860:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8006862:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006864:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8006866:	6994      	ldr	r4, [r2, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006868:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800686a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800686c:	2600      	movs	r6, #0
 800686e:	68a1      	ldr	r1, [r4, #8]
 8006870:	462b      	mov	r3, r5
 8006872:	606a      	str	r2, [r5, #4]
 8006874:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006876:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8006878:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800687a:	7726      	strb	r6, [r4, #28]
 800687c:	e000      	b.n	8006880 <chSchDoRescheduleAhead+0x20>
 800687e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	428a      	cmp	r2, r1
 8006884:	d8fb      	bhi.n	800687e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8006886:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8006888:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800688a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800688c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = cp->p_prev = otp;
 800688e:	605c      	str	r4, [r3, #4]
 8006890:	6014      	str	r4, [r2, #0]

  chSysSwitch(currp, otp);
}
 8006892:	bcf0      	pop	{r4, r5, r6, r7}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8006894:	f7f9 beec 	b.w	8000670 <_port_switch>
 8006898:	20001de0 	.word	0x20001de0
 800689c:	f3af 8000 	nop.w

080068a0 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 80068a0:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 80068a2:	4849      	ldr	r0, [pc, #292]	; (80069c8 <Reset_Handler+0x128>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 80068a4:	f380 8809 	msr	PSP, r0
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 80068a8:	2302      	movs	r3, #2
 80068aa:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 80068ae:	f3bf 8f6f 	isb	sy
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80068b2:	4b46      	ldr	r3, [pc, #280]	; (80069cc <Reset_Handler+0x12c>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80068b4:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	f042 0201 	orr.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80068be:	680b      	ldr	r3, [r1, #0]
 80068c0:	4a42      	ldr	r2, [pc, #264]	; (80069cc <Reset_Handler+0x12c>)
 80068c2:	079d      	lsls	r5, r3, #30
 80068c4:	d5fb      	bpl.n	80068be <Reset_Handler+0x1e>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80068c6:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80068c8:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80068ca:	2400      	movs	r4, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80068cc:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80068d0:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80068d2:	6054      	str	r4, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80068d4:	684b      	ldr	r3, [r1, #4]
 80068d6:	4a3d      	ldr	r2, [pc, #244]	; (80069cc <Reset_Handler+0x12c>)
 80068d8:	f013 0f0c 	tst.w	r3, #12
 80068dc:	d1fa      	bne.n	80068d4 <Reset_Handler+0x34>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 80068de:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80068e0:	6813      	ldr	r3, [r2, #0]
 80068e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80068e8:	680b      	ldr	r3, [r1, #0]
 80068ea:	4a38      	ldr	r2, [pc, #224]	; (80069cc <Reset_Handler+0x12c>)
 80068ec:	039c      	lsls	r4, r3, #14
 80068ee:	d5fb      	bpl.n	80068e8 <Reset_Handler+0x48>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80068f0:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80068f2:	6853      	ldr	r3, [r2, #4]
 80068f4:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
 80068f8:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80068fa:	6813      	ldr	r3, [r2, #0]
 80068fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006900:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006902:	680b      	ldr	r3, [r1, #0]
 8006904:	4a31      	ldr	r2, [pc, #196]	; (80069cc <Reset_Handler+0x12c>)
 8006906:	019b      	lsls	r3, r3, #6
 8006908:	d5fb      	bpl.n	8006902 <Reset_Handler+0x62>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800690a:	4611      	mov	r1, r2
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800690c:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <Reset_Handler+0x130>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800690e:	4d31      	ldr	r5, [pc, #196]	; (80069d4 <Reset_Handler+0x134>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8006910:	2411      	movs	r4, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8006912:	6055      	str	r5, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8006914:	601c      	str	r4, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8006916:	6853      	ldr	r3, [r2, #4]
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800691e:	684b      	ldr	r3, [r1, #4]
 8006920:	f003 030c 	and.w	r3, r3, #12
 8006924:	2b08      	cmp	r3, #8
 8006926:	d1fa      	bne.n	800691e <Reset_Handler+0x7e>
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8006928:	492b      	ldr	r1, [pc, #172]	; (80069d8 <Reset_Handler+0x138>)
 800692a:	4a2c      	ldr	r2, [pc, #176]	; (80069dc <Reset_Handler+0x13c>)
 800692c:	4291      	cmp	r1, r2
 800692e:	d20c      	bcs.n	800694a <Reset_Handler+0xaa>
 8006930:	43cc      	mvns	r4, r1
 8006932:	4422      	add	r2, r4
 8006934:	f022 0203 	bic.w	r2, r2, #3
 8006938:	3204      	adds	r2, #4
 800693a:	460b      	mov	r3, r1
 800693c:	440a      	add	r2, r1
 800693e:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8006942:	f843 1b04 	str.w	r1, [r3], #4
 8006946:	4293      	cmp	r3, r2
 8006948:	d1fb      	bne.n	8006942 <Reset_Handler+0xa2>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 800694a:	4925      	ldr	r1, [pc, #148]	; (80069e0 <Reset_Handler+0x140>)
 800694c:	4281      	cmp	r1, r0
 800694e:	d20d      	bcs.n	800696c <Reset_Handler+0xcc>
 8006950:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <Reset_Handler+0x144>)
 8006952:	1d08      	adds	r0, r1, #4
 8006954:	1a12      	subs	r2, r2, r0
 8006956:	f022 0203 	bic.w	r2, r2, #3
 800695a:	3204      	adds	r2, #4
 800695c:	460b      	mov	r3, r1
 800695e:	440a      	add	r2, r1
 8006960:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8006964:	f843 1b04 	str.w	r1, [r3], #4
 8006968:	4293      	cmp	r3, r2
 800696a:	d1fb      	bne.n	8006964 <Reset_Handler+0xc4>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800696c:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <Reset_Handler+0x148>)
 800696e:	4b1f      	ldr	r3, [pc, #124]	; (80069ec <Reset_Handler+0x14c>)
 8006970:	429a      	cmp	r2, r3
 8006972:	d20d      	bcs.n	8006990 <Reset_Handler+0xf0>
 8006974:	43d0      	mvns	r0, r2
 8006976:	491e      	ldr	r1, [pc, #120]	; (80069f0 <Reset_Handler+0x150>)
 8006978:	4418      	add	r0, r3
 800697a:	460b      	mov	r3, r1
 800697c:	f020 0003 	bic.w	r0, r0, #3
 8006980:	3004      	adds	r0, #4
 8006982:	4408      	add	r0, r1
      *dp++ = *tp++;
 8006984:	f853 1b04 	ldr.w	r1, [r3], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8006988:	4283      	cmp	r3, r0
      *dp++ = *tp++;
 800698a:	f842 1b04 	str.w	r1, [r2], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800698e:	d1f9      	bne.n	8006984 <Reset_Handler+0xe4>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8006990:	4918      	ldr	r1, [pc, #96]	; (80069f4 <Reset_Handler+0x154>)
 8006992:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <Reset_Handler+0x158>)
 8006994:	4291      	cmp	r1, r2
 8006996:	d20b      	bcs.n	80069b0 <Reset_Handler+0x110>
 8006998:	43c8      	mvns	r0, r1
 800699a:	4402      	add	r2, r0
 800699c:	f022 0203 	bic.w	r2, r2, #3
 80069a0:	3204      	adds	r2, #4
 80069a2:	460b      	mov	r3, r1
 80069a4:	440a      	add	r2, r1
 80069a6:	2100      	movs	r1, #0
 80069a8:	f843 1b04 	str.w	r1, [r3], #4
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d1fb      	bne.n	80069a8 <Reset_Handler+0x108>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 80069b0:	4c12      	ldr	r4, [pc, #72]	; (80069fc <Reset_Handler+0x15c>)
 80069b2:	4d13      	ldr	r5, [pc, #76]	; (8006a00 <Reset_Handler+0x160>)
 80069b4:	42ac      	cmp	r4, r5
 80069b6:	d204      	bcs.n	80069c2 <Reset_Handler+0x122>
      (*fpp)();
 80069b8:	f854 3b04 	ldr.w	r3, [r4], #4
 80069bc:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 80069be:	42ac      	cmp	r4, r5
 80069c0:	d3fa      	bcc.n	80069b8 <Reset_Handler+0x118>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 80069c2:	f7f9 fbbd 	bl	8000140 <main>
 80069c6:	bf00      	nop
 80069c8:	20000800 	.word	0x20000800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40022000 	.word	0x40022000
 80069d4:	00496400 	.word	0x00496400
 80069d8:	20000000 	.word	0x20000000
 80069dc:	20000400 	.word	0x20000400
 80069e0:	20000400 	.word	0x20000400
 80069e4:	20000803 	.word	0x20000803
 80069e8:	20000800 	.word	0x20000800
 80069ec:	20000cfc 	.word	0x20000cfc
 80069f0:	0800a958 	.word	0x0800a958
 80069f4:	20000cfc 	.word	0x20000cfc
 80069f8:	20001ffc 	.word	0x20001ffc
 80069fc:	08000140 	.word	0x08000140
 8006a00:	08000140 	.word	0x08000140
 8006a04:	f3af 8000 	nop.w
 8006a08:	f3af 8000 	nop.w
 8006a0c:	f3af 8000 	nop.w

08006a10 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006a10:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8006a12:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006a14:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8006a16:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006a18:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8006a1a:	d00d      	beq.n	8006a38 <chEvtBroadcastFlagsI+0x28>
    elp->el_flags |= flags;
 8006a1c:	68e3      	ldr	r3, [r4, #12]
 8006a1e:	432b      	orrs	r3, r5
 8006a20:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0))
 8006a22:	b115      	cbz	r5, 8006a2a <chEvtBroadcastFlagsI+0x1a>
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	4213      	tst	r3, r2
 8006a28:	d003      	beq.n	8006a32 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8006a2a:	6860      	ldr	r0, [r4, #4]
 8006a2c:	68a1      	ldr	r1, [r4, #8]
 8006a2e:	f7ff fea7 	bl	8006780 <chEvtSignalI>
    elp = elp->el_next;
 8006a32:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8006a34:	42a6      	cmp	r6, r4
 8006a36:	d1f1      	bne.n	8006a1c <chEvtBroadcastFlagsI+0xc>
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w

08006a40 <chEvtUnregister>:
 8006a40:	2320      	movs	r3, #32
 8006a42:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8006a46:	4602      	mov	r2, r0
 8006a48:	e002      	b.n	8006a50 <chEvtUnregister+0x10>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 8006a4a:	428b      	cmp	r3, r1
 8006a4c:	d007      	beq.n	8006a5e <chEvtUnregister+0x1e>
 8006a4e:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 8006a50:	6813      	ldr	r3, [r2, #0]
 8006a52:	4283      	cmp	r3, r0
 8006a54:	d1f9      	bne.n	8006a4a <chEvtUnregister+0xa>
 8006a56:	2300      	movs	r3, #0
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	4770      	bx	lr
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8006a5e:	680b      	ldr	r3, [r1, #0]
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w

08006a70 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8006a70:	b430      	push	{r4, r5}
 8006a72:	4602      	mov	r2, r0
 8006a74:	2120      	movs	r1, #32
 8006a76:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 8006a7a:	7f83      	ldrb	r3, [r0, #30]
 8006a7c:	2400      	movs	r4, #0
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	7783      	strb	r3, [r0, #30]
 8006a84:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 8006a88:	b913      	cbnz	r3, 8006a90 <chThdRelease+0x20>
 8006a8a:	7f04      	ldrb	r4, [r0, #28]
 8006a8c:	2c0f      	cmp	r4, #15
 8006a8e:	d001      	beq.n	8006a94 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8006a90:	bc30      	pop	{r4, r5}
 8006a92:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8006a94:	7f44      	ldrb	r4, [r0, #29]
 8006a96:	f004 0403 	and.w	r4, r4, #3
 8006a9a:	2c01      	cmp	r4, #1
 8006a9c:	d00f      	beq.n	8006abe <chThdRelease+0x4e>
 8006a9e:	2c02      	cmp	r4, #2
 8006aa0:	d1f6      	bne.n	8006a90 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006aa2:	6905      	ldr	r5, [r0, #16]
 8006aa4:	6944      	ldr	r4, [r0, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8006aa6:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006aa8:	6125      	str	r5, [r4, #16]
 8006aaa:	6915      	ldr	r5, [r2, #16]
 8006aac:	616c      	str	r4, [r5, #20]
 8006aae:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ab2:	6801      	ldr	r1, [r0, #0]
 8006ab4:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8006ab6:	6002      	str	r2, [r0, #0]
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	e7e8      	b.n	8006a90 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006abe:	6943      	ldr	r3, [r0, #20]
 8006ac0:	6901      	ldr	r1, [r0, #16]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8006ac2:	bc30      	pop	{r4, r5}
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006ac4:	6119      	str	r1, [r3, #16]
 8006ac6:	6902      	ldr	r2, [r0, #16]
 8006ac8:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 8006aca:	f7ff bc81 	b.w	80063d0 <chHeapFree>
 8006ace:	bf00      	nop

08006ad0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8006ada:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist)
 8006adc:	429c      	cmp	r4, r3
    ntp = NULL;
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8006ade:	bf17      	itett	ne
 8006ae0:	7fa3      	ldrbne	r3, [r4, #30]
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
    ntp = NULL;
 8006ae2:	2400      	moveq	r4, #0
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8006ae4:	3301      	addne	r3, #1
 8006ae6:	77a3      	strbne	r3, [r4, #30]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8006aee:	f7ff ffbf 	bl	8006a70 <chThdRelease>
#endif
  return ntp;
}
 8006af2:	4620      	mov	r0, r4
 8006af4:	bd10      	pop	{r4, pc}
 8006af6:	bf00      	nop
 8006af8:	20001de0 	.word	0x20001de0
 8006afc:	f3af 8000 	nop.w

08006b00 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	2320      	movs	r3, #32
 8006b04:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8006b08:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <chThdYield+0x54>)
 8006b0a:	6810      	ldr	r0, [r2, #0]
 8006b0c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8006b0e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8006b10:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8006b12:	428b      	cmp	r3, r1
 8006b14:	d203      	bcs.n	8006b1e <chThdYield+0x1e>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006b1e:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006b20:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006b22:	2600      	movs	r6, #0
 8006b24:	606a      	str	r2, [r5, #4]
 8006b26:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006b28:	7707      	strb	r7, [r0, #28]
 8006b2a:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8006b2c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006b2e:	7726      	strb	r6, [r4, #28]
 8006b30:	e000      	b.n	8006b34 <chThdYield+0x34>
 8006b32:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	4291      	cmp	r1, r2
 8006b38:	d9fb      	bls.n	8006b32 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006b3a:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8006b3c:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006b3e:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8006b40:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8006b42:	605c      	str	r4, [r3, #4]
 8006b44:	6014      	str	r4, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8006b46:	f7f9 fd93 	bl	8000670 <_port_switch>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20001de0 	.word	0x20001de0
 8006b58:	f3af 8000 	nop.w
 8006b5c:	f3af 8000 	nop.w

08006b60 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8006b60:	b4f0      	push	{r4, r5, r6, r7}
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8006b62:	4c15      	ldr	r4, [pc, #84]	; (8006bb8 <chVTDoResetI+0x58>)
 8006b64:	f64f 76ff 	movw	r6, #65535	; 0xffff

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b68:	4623      	mov	r3, r4
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8006b6a:	6802      	ldr	r2, [r0, #0]
 8006b6c:	8907      	ldrh	r7, [r0, #8]
 8006b6e:	8911      	ldrh	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8006b70:	6845      	ldr	r5, [r0, #4]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8006b72:	4439      	add	r1, r7
 8006b74:	8111      	strh	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8006b76:	602a      	str	r2, [r5, #0]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b78:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8006b7c:	6807      	ldr	r7, [r0, #0]
  vtp->vt_func = (vtfunc_t)NULL;
 8006b7e:	2100      	movs	r1, #0
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b80:	429a      	cmp	r2, r3
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8006b82:	607d      	str	r5, [r7, #4]
  vtp->vt_func = (vtfunc_t)NULL;
 8006b84:	60c1      	str	r1, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8006b86:	84a6      	strh	r6, [r4, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006b88:	d011      	beq.n	8006bae <chVTDoResetI+0x4e>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8006b8a:	8912      	ldrh	r2, [r2, #8]
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8006b8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8006b8e:	2a01      	cmp	r2, #1
 8006b90:	d906      	bls.n	8006ba0 <chVTDoResetI+0x40>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8006b92:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006b94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	634b      	str	r3, [r1, #52]	; 0x34
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8006b9e:	4770      	bx	lr
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      else
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	6353      	str	r3, [r2, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006baa:	bcf0      	pop	{r4, r5, r6, r7}
 8006bac:	4770      	bx	lr
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8006bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bb2:	60d9      	str	r1, [r3, #12]
 8006bb4:	e7f2      	b.n	8006b9c <chVTDoResetI+0x3c>
 8006bb6:	bf00      	nop
 8006bb8:	20001de0 	.word	0x20001de0
 8006bbc:	f3af 8000 	nop.w

08006bc0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8006bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8006bc2:	4e1e      	ldr	r6, [pc, #120]	; (8006c3c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006bc4:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8006bc8:	4637      	mov	r7, r6
 8006bca:	f857 4f1c 	ldr.w	r4, [r7, #28]!
 8006bce:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;
 8006bd2:	2901      	cmp	r1, #1
 8006bd4:	bf98      	it	ls
 8006bd6:	2102      	movls	r1, #2

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8006bd8:	42bc      	cmp	r4, r7

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8006bda:	60c2      	str	r2, [r0, #12]
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8006bdc:	6103      	str	r3, [r0, #16]
 8006bde:	b2aa      	uxth	r2, r5
    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8006be0:	d01f      	beq.n	8006c22 <chVTDoSetI+0x62>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8006be2:	8cf5      	ldrh	r5, [r6, #38]	; 0x26

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8006be4:	8923      	ldrh	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8006be6:	1b52      	subs	r2, r2, r5
 8006be8:	4411      	add	r1, r2
 8006bea:	b289      	uxth	r1, r1

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d204      	bcs.n	8006bfa <chVTDoSetI+0x3a>
 8006bf0:	e012      	b.n	8006c18 <chVTDoSetI+0x58>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
    p = p->vt_next;
 8006bf2:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 8006bf4:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8006bf6:	8923      	ldrh	r3, [r4, #8]
    delay -= p->vt_delta;
 8006bf8:	b289      	uxth	r1, r1
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8006bfa:	428b      	cmp	r3, r1
 8006bfc:	d3f9      	bcc.n	8006bf2 <chVTDoSetI+0x32>
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
  ch.vtlist.vt_delta = (systime_t)-1;
 8006bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	6004      	str	r4, [r0, #0]
 8006c06:	6043      	str	r3, [r0, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8006c08:	6060      	str	r0, [r4, #4]
 8006c0a:	6018      	str	r0, [r3, #0]
  vtp->vt_delta = delay
 8006c0c:	8101      	strh	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8006c0e:	8923      	ldrh	r3, [r4, #8]
 8006c10:	1a59      	subs	r1, r3, r1
 8006c12:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8006c14:	84b2      	strh	r2, [r6, #36]	; 0x24
 8006c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8006c18:	440d      	add	r5, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c1a:	b2ad      	uxth	r5, r5
 8006c1c:	f8ce 5034 	str.w	r5, [lr, #52]	; 0x34
 8006c20:	e7eb      	b.n	8006bfa <chVTDoSetI+0x3a>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8006c22:	188b      	adds	r3, r1, r2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c24:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8006c26:	2700      	movs	r7, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006c28:	2502      	movs	r5, #2
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8006c2a:	84f2      	strh	r2, [r6, #38]	; 0x26
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c2c:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8006c30:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  STM32_ST_TIM->SR     = 0;
 8006c32:	f8ce 7010 	str.w	r7, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006c36:	f8ce 500c 	str.w	r5, [lr, #12]
 8006c3a:	e7de      	b.n	8006bfa <chVTDoSetI+0x3a>
 8006c3c:	20001de0 	.word	0x20001de0

08006c40 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8006c40:	f7ff be0e 	b.w	8006860 <chSchDoRescheduleAhead>
 8006c44:	f3af 8000 	nop.w
 8006c48:	f3af 8000 	nop.w
 8006c4c:	f3af 8000 	nop.w

08006c50 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <chSchRescheduleS+0x14>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
 8006c56:	6892      	ldr	r2, [r2, #8]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d800      	bhi.n	8006c60 <chSchRescheduleS+0x10>
 8006c5e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8006c60:	f7ff bdfe 	b.w	8006860 <chSchDoRescheduleAhead>
 8006c64:	20001de0 	.word	0x20001de0
 8006c68:	f3af 8000 	nop.w
 8006c6c:	f3af 8000 	nop.w

08006c70 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8006c70:	b510      	push	{r4, lr}
 8006c72:	2320      	movs	r3, #32
 8006c74:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8006c78:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <chThdSetPriority+0x2c>)
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
 8006c7e:	6899      	ldr	r1, [r3, #8]
 8006c80:	428c      	cmp	r4, r1
 8006c82:	d001      	beq.n	8006c88 <chThdSetPriority+0x18>
 8006c84:	4281      	cmp	r1, r0
 8006c86:	d200      	bcs.n	8006c8a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8006c88:	6098      	str	r0, [r3, #8]
  currp->p_realprio = newprio;
 8006c8a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8006c8c:	f7ff ffe0 	bl	8006c50 <chSchRescheduleS>
 8006c90:	2300      	movs	r3, #0
 8006c92:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return oldprio;
}
 8006c96:	4620      	mov	r0, r4
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20001de0 	.word	0x20001de0

08006ca0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006ca0:	4b14      	ldr	r3, [pc, #80]	; (8006cf4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8006ca2:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006ca4:	699e      	ldr	r6, [r3, #24]
 8006ca6:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8006ca8:	4605      	mov	r5, r0

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8006caa:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006cac:	68b0      	ldr	r0, [r6, #8]
 8006cae:	4284      	cmp	r4, r0
 8006cb0:	d80c      	bhi.n	8006ccc <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8006cb6:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	4294      	cmp	r4, r2
 8006cbc:	d9fb      	bls.n	8006cb6 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006cbe:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006cc0:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8006cc2:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8006cc4:	605d      	str	r5, [r3, #4]
 8006cc6:	6015      	str	r5, [r2, #0]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8006cc8:	bcf0      	pop	{r4, r5, r6, r7}
 8006cca:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8006ccc:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006cce:	2100      	movs	r1, #0
 8006cd0:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8006cd2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8006cd4:	6891      	ldr	r1, [r2, #8]
 8006cd6:	4288      	cmp	r0, r1
 8006cd8:	d9fb      	bls.n	8006cd2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006cda:	6854      	ldr	r4, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8006cdc:	2701      	movs	r7, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006cde:	e886 0014 	stmia.w	r6, {r2, r4}
  tp->p_prev->p_next = cp->p_prev = tp;
 8006ce2:	6056      	str	r6, [r2, #4]
 8006ce4:	6026      	str	r6, [r4, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8006ce6:	772f      	strb	r7, [r5, #28]
    chSysSwitch(ntp, otp);
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8006cec:	619d      	str	r5, [r3, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8006cee:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8006cf0:	f7f9 bcbe 	b.w	8000670 <_port_switch>
 8006cf4:	20001de0 	.word	0x20001de0
 8006cf8:	f3af 8000 	nop.w
 8006cfc:	f3af 8000 	nop.w

08006d00 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8006d00:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8006d02:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8006d04:	699d      	ldr	r5, [r3, #24]
 8006d06:	2320      	movs	r3, #32
 8006d08:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8006d0c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8006d0e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006d10:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8006d12:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006d14:	d01c      	beq.n	8006d50 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8006d16:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8006d18:	b14b      	cbz	r3, 8006d2e <chMtxUnlock+0x2e>
 8006d1a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <chMtxUnlock+0x28>
 8006d20:	6892      	ldr	r2, [r2, #8]
 8006d22:	4291      	cmp	r1, r2
 8006d24:	bf38      	it	cc
 8006d26:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8006d28:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f5      	bne.n	8006d1a <chMtxUnlock+0x1a>
 8006d2e:	4603      	mov	r3, r0
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8006d30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006d32:	6822      	ldr	r2, [r4, #0]
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8006d34:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8006d36:	60a9      	str	r1, [r5, #8]
 8006d38:	601a      	str	r2, [r3, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8006d3e:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8006d40:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8006d42:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8006d44:	f7ff ffac 	bl	8006ca0 <chSchWakeupS>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
      mp->m_owner = NULL;
 8006d50:	2300      	movs	r3, #0
 8006d52:	6083      	str	r3, [r0, #8]
 8006d54:	2300      	movs	r3, #0
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	20001de0 	.word	0x20001de0

08006d60 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8006d60:	b508      	push	{r3, lr}
 8006d62:	2320      	movs	r3, #32
 8006d64:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0)
 8006d68:	6883      	ldr	r3, [r0, #8]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	6083      	str	r3, [r0, #8]
 8006d70:	dd03      	ble.n	8006d7a <chSemSignal+0x1a>
 8006d72:	2300      	movs	r3, #0
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	bd08      	pop	{r3, pc}
 8006d7a:	4603      	mov	r3, r0
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006d7c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8006d7e:	2100      	movs	r1, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006d80:	6802      	ldr	r2, [r0, #0]
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	6053      	str	r3, [r2, #4]
 8006d86:	f7ff ff8b 	bl	8006ca0 <chSchWakeupS>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	bd08      	pop	{r3, pc}
 8006d92:	bf00      	nop
 8006d94:	f3af 8000 	nop.w
 8006d98:	f3af 8000 	nop.w
 8006d9c:	f3af 8000 	nop.w

08006da0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8006da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	4690      	mov	r8, r2
 8006da6:	4699      	mov	r9, r3
 8006da8:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8006daa:	f7ff fb59 	bl	8006460 <chHeapAlloc>
  if (wsp == NULL)
 8006dae:	4604      	mov	r4, r0
 8006db0:	b3b0      	cbz	r0, 8006e20 <chThdCreateFromHeap+0x80>
 8006db2:	2320      	movs	r3, #32
 8006db4:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006db8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006e28 <chThdCreateFromHeap+0x88>

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006dbc:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 8006dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006dc2:	f8de 3014 	ldr.w	r3, [lr, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006dc6:	eb00 0c01 	add.w	ip, r0, r1
 8006dca:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006e2c <chThdCreateFromHeap+0x8c>
 8006dce:	f8c0 c00c 	str.w	ip, [r0, #12]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006dd2:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006dd4:	f840 9001 	str.w	r9, [r0, r1]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8006dd8:	f100 0628 	add.w	r6, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006ddc:	f8cc 2004 	str.w	r2, [ip, #4]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8006de0:	f100 0724 	add.w	r7, r0, #36	; 0x24
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006de4:	2201      	movs	r2, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006de6:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006dea:	f8cc b020 	str.w	fp, [ip, #32]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8006dee:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006df0:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006df4:	f8c0 e010 	str.w	lr, [r0, #16]
 8006df8:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8006dfa:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006dfe:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006e02:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8006e04:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8006e06:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006e08:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e0a:	f8ce 0014 	str.w	r0, [lr, #20]
 8006e0e:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006e10:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8006e12:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8006e14:	62c6      	str	r6, [r0, #44]	; 0x2c
 8006e16:	6286      	str	r6, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8006e18:	f7ff ff42 	bl	8006ca0 <chSchWakeupS>
 8006e1c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8006e20:	4620      	mov	r0, r4
 8006e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	20001de0 	.word	0x20001de0
 8006e2c:	08000681 	.word	0x08000681

08006e30 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8006e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e34:	4699      	mov	r9, r3
 8006e36:	4604      	mov	r4, r0
 8006e38:	2320      	movs	r3, #32
 8006e3a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e3e:	4e19      	ldr	r6, [pc, #100]	; (8006ea4 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e40:	3924      	subs	r1, #36	; 0x24
 8006e42:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e44:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e46:	f8df a060 	ldr.w	sl, [pc, #96]	; 8006ea8 <chThdCreateStatic+0x78>
 8006e4a:	60c7      	str	r7, [r0, #12]
 8006e4c:	f840 9001 	str.w	r9, [r0, r1]
 8006e50:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006e52:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8006e54:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006e58:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8006e5c:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006e60:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e64:	6079      	str	r1, [r7, #4]
 8006e66:	f8c7 a020 	str.w	sl, [r7, #32]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8006e6a:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006e6c:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e6e:	6106      	str	r6, [r0, #16]
 8006e70:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8006e72:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006e74:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006e78:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006e7c:	7745      	strb	r5, [r0, #29]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e7e:	6170      	str	r0, [r6, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006e80:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8006e82:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8006e84:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8006e86:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006e88:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8006e8c:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8006e90:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8006e94:	f7ff ff04 	bl	8006ca0 <chSchWakeupS>
 8006e98:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20001de0 	.word	0x20001de0
 8006ea8:	08000681 	.word	0x08000681
 8006eac:	f3af 8000 	nop.w

08006eb0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8006eb0:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8006eb2:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006eb4:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8006eb6:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006eb8:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006eba:	2501      	movs	r5, #1
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8006ebc:	7708      	strb	r0, [r1, #28]
 8006ebe:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006ec0:	7715      	strb	r5, [r2, #28]
 8006ec2:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8006ec4:	4610      	mov	r0, r2
}
 8006ec6:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8006ec8:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8006eca:	f7f9 bbd1 	b.w	8000670 <_port_switch>
 8006ece:	bf00      	nop
 8006ed0:	20001de0 	.word	0x20001de0
 8006ed4:	f3af 8000 	nop.w
 8006ed8:	f3af 8000 	nop.w
 8006edc:	f3af 8000 	nop.w

08006ee0 <chSemWait>:
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8006ee6:	6883      	ldr	r3, [r0, #8]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	6083      	str	r3, [r0, #8]
 8006eee:	db04      	blt.n	8006efa <chSemWait+0x1a>
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
    return currp->p_u.rdymsg;
  }
  return MSG_OK;
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8006ef8:	4770      	bx	lr
 8006efa:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8006efc:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8006efe:	4c08      	ldr	r4, [pc, #32]	; (8006f20 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8006f00:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8006f02:	69a2      	ldr	r2, [r4, #24]
 8006f04:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006f06:	6859      	ldr	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8006f08:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8006f0a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8006f10:	f7ff ffce 	bl	8006eb0 <chSchGoSleepS>
    return currp->p_u.rdymsg;
 8006f14:	69a3      	ldr	r3, [r4, #24]
 8006f16:	6a18      	ldr	r0, [r3, #32]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8006f1e:	bd10      	pop	{r4, pc}
 8006f20:	20001de0 	.word	0x20001de0
 8006f24:	f3af 8000 	nop.w
 8006f28:	f3af 8000 	nop.w
 8006f2c:	f3af 8000 	nop.w

08006f30 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4604      	mov	r4, r0
 8006f34:	2320      	movs	r3, #32
 8006f36:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8006f3a:	7f03      	ldrb	r3, [r0, #28]
 8006f3c:	2b0f      	cmp	r3, #15
 8006f3e:	d007      	beq.n	8006f50 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8006f42:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006f44:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8006f46:	2009      	movs	r0, #9
 8006f48:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8006f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f4c:	f7ff ffb0 	bl	8006eb0 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8006f50:	6a25      	ldr	r5, [r4, #32]
 8006f52:	2300      	movs	r3, #0
 8006f54:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fd89 	bl	8006a70 <chThdRelease>
#endif
  return msg;
}
 8006f5e:	4628      	mov	r0, r5
 8006f60:	bd38      	pop	{r3, r4, r5, pc}
 8006f62:	bf00      	nop
 8006f64:	20001de0 	.word	0x20001de0
 8006f68:	f3af 8000 	nop.w
 8006f6c:	f3af 8000 	nop.w

08006f70 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8006f74:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006f76:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8006f78:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006f7a:	d012      	beq.n	8006fa2 <chSchGoSleepTimeoutS+0x32>
 8006f7c:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8006f7e:	4c0c      	ldr	r4, [pc, #48]	; (8006fb0 <chSchGoSleepTimeoutS+0x40>)
 8006f80:	a801      	add	r0, sp, #4
 8006f82:	69a3      	ldr	r3, [r4, #24]
 8006f84:	4a0b      	ldr	r2, [pc, #44]	; (8006fb4 <chSchGoSleepTimeoutS+0x44>)
 8006f86:	f7ff fe1b 	bl	8006bc0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7ff ff90 	bl	8006eb0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	b113      	cbz	r3, 8006f9a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8006f94:	a801      	add	r0, sp, #4
 8006f96:	f7ff fde3 	bl	8006b60 <chVTDoResetI>
  }
  else
    chSchGoSleepS(newstate);
  return currp->p_u.rdymsg;
 8006f9a:	69a3      	ldr	r3, [r4, #24]
}
 8006f9c:	6a18      	ldr	r0, [r3, #32]
 8006f9e:	b007      	add	sp, #28
 8006fa0:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8006fa2:	f7ff ff85 	bl	8006eb0 <chSchGoSleepS>
 8006fa6:	4c02      	ldr	r4, [pc, #8]	; (8006fb0 <chSchGoSleepTimeoutS+0x40>)
  return currp->p_u.rdymsg;
 8006fa8:	69a3      	ldr	r3, [r4, #24]
}
 8006faa:	6a18      	ldr	r0, [r3, #32]
 8006fac:	b007      	add	sp, #28
 8006fae:	bd30      	pop	{r4, r5, pc}
 8006fb0:	20001de0 	.word	0x20001de0
 8006fb4:	080067b1 	.word	0x080067b1
 8006fb8:	f3af 8000 	nop.w
 8006fbc:	f3af 8000 	nop.w

08006fc0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8006fc0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8006fc2:	6880      	ldr	r0, [r0, #8]
 8006fc4:	1e42      	subs	r2, r0, #1
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	609a      	str	r2, [r3, #8]
 8006fca:	db01      	blt.n	8006fd0 <chSemWaitTimeoutS+0x10>
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
 8006fcc:	2000      	movs	r0, #0
 8006fce:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8006fd0:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8006fd2:	b161      	cbz	r1, 8006fee <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8006fd6:	2005      	movs	r0, #5
  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8006fd8:	6992      	ldr	r2, [r2, #24]
 8006fda:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006fdc:	685c      	ldr	r4, [r3, #4]
 8006fde:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8006fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8006fea:	f7ff bfc1 	b.w	8006f70 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8006fee:	6098      	str	r0, [r3, #8]
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8006ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20001de0 	.word	0x20001de0

08007000 <chSemWaitTimeout>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8007000:	b508      	push	{r3, lr}
 8007002:	2320      	movs	r3, #32
 8007004:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8007008:	f7ff ffda 	bl	8006fc0 <chSemWaitTimeoutS>
 800700c:	2300      	movs	r3, #0
 800700e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8007012:	bd08      	pop	{r3, pc}
 8007014:	f3af 8000 	nop.w
 8007018:	f3af 8000 	nop.w
 800701c:	f3af 8000 	nop.w

08007020 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout)
 8007020:	b169      	cbz	r1, 800703e <chThdEnqueueTimeoutS+0x1e>
 8007022:	4602      	mov	r2, r0
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8007026:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8007028:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800702a:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800702c:	2004      	movs	r0, #4
 800702e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8007032:	6053      	str	r3, [r2, #4]
 8007034:	6023      	str	r3, [r4, #0]
}
 8007036:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800703a:	f7ff bf99 	b.w	8006f70 <chSchGoSleepTimeoutS>
}
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	4770      	bx	lr
 8007044:	20001de0 	.word	0x20001de0
 8007048:	f3af 8000 	nop.w
 800704c:	f3af 8000 	nop.w

08007050 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8007050:	b508      	push	{r3, lr}
 8007052:	4601      	mov	r1, r0
 8007054:	2320      	movs	r3, #32
 8007056:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800705a:	2008      	movs	r0, #8
 800705c:	f7ff ff88 	bl	8006f70 <chSchGoSleepTimeoutS>
 8007060:	2300      	movs	r3, #0
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	bd08      	pop	{r3, pc}
 8007068:	f3af 8000 	nop.w
 800706c:	f3af 8000 	nop.w

08007070 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8007070:	b410      	push	{r4}
 8007072:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8007074:	2200      	movs	r2, #0
 8007076:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800707a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800707c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	428a      	cmp	r2, r1
 8007082:	d2fb      	bcs.n	800707c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8007084:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
  return tp;
}
 8007086:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8007088:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800708a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800708c:	605c      	str	r4, [r3, #4]
 800708e:	6014      	str	r4, [r2, #0]
  return tp;
}
 8007090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20001de0 	.word	0x20001de0
 800709c:	f3af 8000 	nop.w

080070a0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80070a0:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80070a6:	6994      	ldr	r4, [r2, #24]
 80070a8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 80070ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070ae:	b1d3      	cbz	r3, 80070e6 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 80070b0:	2600      	movs	r6, #0
 80070b2:	e00b      	b.n	80070cc <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 80070b4:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80070b6:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 80070b8:	4610      	mov	r0, r2
 80070ba:	6019      	str	r1, [r3, #0]
 80070bc:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 80070be:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 80070c0:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 80070c2:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 80070c4:	f7ff ffd4 	bl	8007070 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 80070c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070ca:	b143      	cbz	r3, 80070de <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80070cc:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 80070ce:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 80070d0:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 80070d2:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 80070d4:	d1ee      	bne.n	80070b4 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 80070d6:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 80070d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f6      	bne.n	80070cc <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 80070de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80070e0:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 80070e2:	f7ff fdb5 	bl	8006c50 <chSchRescheduleS>
 80070e6:	2300      	movs	r3, #0
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	bf00      	nop
 80070f0:	20001de0 	.word	0x20001de0
 80070f4:	f3af 8000 	nop.w
 80070f8:	f3af 8000 	nop.w
 80070fc:	f3af 8000 	nop.w

08007100 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8007100:	b430      	push	{r4, r5}
 8007102:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8007104:	4a11      	ldr	r2, [pc, #68]	; (800714c <chMtxUnlockS+0x4c>)
 8007106:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8007108:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800710a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800710c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800710e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8007110:	d017      	beq.n	8007142 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8007112:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8007114:	b14b      	cbz	r3, 800712a <chMtxUnlockS+0x2a>
 8007116:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <chMtxUnlockS+0x24>
 800711c:	6892      	ldr	r2, [r2, #8]
 800711e:	4291      	cmp	r1, r2
 8007120:	bf38      	it	cc
 8007122:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8007124:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f5      	bne.n	8007116 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800712a:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800712c:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800712e:	6081      	str	r1, [r0, #8]
 8007130:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 8007132:	4628      	mov	r0, r5
 8007134:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8007136:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8007138:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800713a:	63ac      	str	r4, [r5, #56]	; 0x38
    else
      mp->m_owner = NULL;
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 800713c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 800713e:	f7ff bf97 	b.w	8007070 <chSchReadyI>
    }
    else
      mp->m_owner = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	60a3      	str	r3, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 8007146:	bc30      	pop	{r4, r5}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20001de0 	.word	0x20001de0

08007150 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8007152:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8007154:	4b2f      	ldr	r3, [pc, #188]	; (8007214 <chMtxLockS+0xc4>)
 8007156:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8007158:	2a00      	cmp	r2, #0
 800715a:	d055      	beq.n	8007208 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800715c:	68a1      	ldr	r1, [r4, #8]
 800715e:	6893      	ldr	r3, [r2, #8]
 8007160:	4605      	mov	r5, r0
 8007162:	4299      	cmp	r1, r3
 8007164:	d906      	bls.n	8007174 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8007166:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8007168:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800716a:	2b06      	cmp	r3, #6
 800716c:	d033      	beq.n	80071d6 <chMtxLockS+0x86>
 800716e:	2b07      	cmp	r3, #7
 8007170:	d01d      	beq.n	80071ae <chMtxLockS+0x5e>
 8007172:	b19b      	cbz	r3, 800719c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8007174:	462b      	mov	r3, r5
 8007176:	e003      	b.n	8007180 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8007178:	6899      	ldr	r1, [r3, #8]
 800717a:	68a2      	ldr	r2, [r4, #8]
 800717c:	4291      	cmp	r1, r2
 800717e:	d302      	bcc.n	8007186 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8007180:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8007182:	429d      	cmp	r5, r3
 8007184:	d1f8      	bne.n	8007178 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8007186:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8007188:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 800718a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800718c:	605c      	str	r4, [r3, #4]
 800718e:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 8007190:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8007192:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8007194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8007198:	f7ff be8a 	b.w	8006eb0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800719c:	e892 000a 	ldmia.w	r2, {r1, r3}
 80071a0:	6019      	str	r1, [r3, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 80071a2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	6053      	str	r3, [r2, #4]
 80071a8:	f7ff ff62 	bl	8007070 <chSchReadyI>
 80071ac:	e7e2      	b.n	8007174 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80071ae:	6817      	ldr	r7, [r2, #0]
 80071b0:	6850      	ldr	r0, [r2, #4]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 80071b2:	6a16      	ldr	r6, [r2, #32]
 80071b4:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80071b6:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80071b8:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	e002      	b.n	80071c4 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80071be:	6898      	ldr	r0, [r3, #8]
 80071c0:	4288      	cmp	r0, r1
 80071c2:	d302      	bcc.n	80071ca <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80071c4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80071c6:	429e      	cmp	r6, r3
 80071c8:	d1f9      	bne.n	80071be <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80071ca:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80071cc:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80071ce:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	600a      	str	r2, [r1, #0]
 80071d4:	e7ce      	b.n	8007174 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80071d6:	6817      	ldr	r7, [r2, #0]
 80071d8:	6850      	ldr	r0, [r2, #4]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 80071da:	6a16      	ldr	r6, [r2, #32]
 80071dc:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80071de:	6817      	ldr	r7, [r2, #0]
 80071e0:	4633      	mov	r3, r6
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	e002      	b.n	80071ec <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80071e6:	6898      	ldr	r0, [r3, #8]
 80071e8:	4288      	cmp	r0, r1
 80071ea:	d302      	bcc.n	80071f2 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80071ec:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80071ee:	429e      	cmp	r6, r3
 80071f0:	d1f9      	bne.n	80071e6 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80071f2:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80071f4:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80071f6:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	600a      	str	r2, [r1, #0]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 80071fc:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80071fe:	68a1      	ldr	r1, [r4, #8]
 8007200:	6893      	ldr	r3, [r2, #8]
 8007202:	428b      	cmp	r3, r1
 8007204:	d3af      	bcc.n	8007166 <chMtxLockS+0x16>
 8007206:	e7b5      	b.n	8007174 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8007208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800720a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800720c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800720e:	63a0      	str	r0, [r4, #56]	; 0x38
 8007210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007212:	bf00      	nop
 8007214:	20001de0 	.word	0x20001de0
 8007218:	f3af 8000 	nop.w
 800721c:	f3af 8000 	nop.w

08007220 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8007220:	b508      	push	{r3, lr}
 8007222:	2320      	movs	r3, #32
 8007224:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  chMtxLockS(mp);
 8007228:	f7ff ff92 	bl	8007150 <chMtxLockS>
 800722c:	2300      	movs	r3, #0
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	bd08      	pop	{r3, pc}
 8007234:	f3af 8000 	nop.w
 8007238:	f3af 8000 	nop.w
 800723c:	f3af 8000 	nop.w

08007240 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8007240:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8007242:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8007244:	3301      	adds	r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	6083      	str	r3, [r0, #8]
 800724a:	dd00      	ble.n	800724e <chSemSignalI+0xe>
 800724c:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800724e:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8007250:	b410      	push	{r4}

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8007252:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8007254:	2400      	movs	r4, #0
 8007256:	6011      	str	r1, [r2, #0]
 8007258:	604a      	str	r2, [r1, #4]
 800725a:	621c      	str	r4, [r3, #32]
    chSchReadyI(tp);
 800725c:	4618      	mov	r0, r3
  }
}
 800725e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8007262:	f7ff bf05 	b.w	8007070 <chSchReadyI>
 8007266:	bf00      	nop
 8007268:	f3af 8000 	nop.w
 800726c:	f3af 8000 	nop.w

08007270 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8007270:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8007272:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8007274:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0)
 8007276:	3501      	adds	r5, #1
 8007278:	2d00      	cmp	r5, #0
 800727a:	dc0c      	bgt.n	8007296 <chSemResetI+0x26>
 800727c:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800727e:	f06f 0601 	mvn.w	r6, #1
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8007282:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8007284:	3501      	adds	r5, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8007286:	6843      	ldr	r3, [r0, #4]
 8007288:	6063      	str	r3, [r4, #4]
 800728a:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800728c:	f7ff fef0 	bl	8007070 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8007290:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8007292:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8007294:	d1f5      	bne.n	8007282 <chSemResetI+0x12>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f3af 8000 	nop.w
 800729c:	f3af 8000 	nop.w

080072a0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80072a0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80072a2:	6803      	ldr	r3, [r0, #0]
 80072a4:	4604      	mov	r4, r0

  while (queue_notempty(tqp))
 80072a6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80072a8:	460d      	mov	r5, r1

  while (queue_notempty(tqp))
 80072aa:	d009      	beq.n	80072c0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80072ac:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  chSchReadyI(tp);
 80072ae:	4618      	mov	r0, r3
 80072b0:	6022      	str	r2, [r4, #0]
 80072b2:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80072b4:	621d      	str	r5, [r3, #32]
  chSchReadyI(tp);
 80072b6:	f7ff fedb 	bl	8007070 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	429c      	cmp	r4, r3
 80072be:	d1f5      	bne.n	80072ac <chThdDequeueAllI+0xc>
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
 80072c2:	bf00      	nop
 80072c4:	f3af 8000 	nop.w
 80072c8:	f3af 8000 	nop.w
 80072cc:	f3af 8000 	nop.w

080072d0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80072d0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <chThdExitS+0x3c>)
 80072d4:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80072d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 80072d8:	f104 0524 	add.w	r5, r4, #36	; 0x24
 80072dc:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 80072de:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 80072e0:	d007      	beq.n	80072f2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80072e2:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(list_remove(&tp->p_waiting));
 80072e4:	4618      	mov	r0, r3
 80072e6:	6262      	str	r2, [r4, #36]	; 0x24
 80072e8:	f7ff fec2 	bl	8007070 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80072ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 80072ee:	42ab      	cmp	r3, r5
 80072f0:	d1f7      	bne.n	80072e2 <chThdExitS+0x12>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
 80072f2:	7f63      	ldrb	r3, [r4, #29]
 80072f4:	079b      	lsls	r3, r3, #30
 80072f6:	d104      	bne.n	8007302 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80072f8:	6922      	ldr	r2, [r4, #16]
 80072fa:	6963      	ldr	r3, [r4, #20]
 80072fc:	611a      	str	r2, [r3, #16]
 80072fe:	6922      	ldr	r2, [r4, #16]
 8007300:	6153      	str	r3, [r2, #20]
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8007302:	200f      	movs	r0, #15
  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8007304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8007308:	f7ff bdd2 	b.w	8006eb0 <chSchGoSleepS>
 800730c:	20001de0 	.word	0x20001de0

08007310 <chThdExit>:
 8007310:	2320      	movs	r3, #32
 8007312:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8007316:	f7ff bfdb 	b.w	80072d0 <chThdExitS>
 800731a:	bf00      	nop
 800731c:	f3af 8000 	nop.w

08007320 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8007322:	490f      	ldr	r1, [pc, #60]	; (8007360 <chTMStopMeasurementX+0x40>)
 8007324:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8007326:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8007328:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800732e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 8007330:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8007332:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8007334:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8007338:	18e4      	adds	r4, r4, r3
 800733a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800733e:	3201      	adds	r2, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 8007340:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8007342:	60c2      	str	r2, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8007344:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8007346:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst)
 800734a:	d805      	bhi.n	8007358 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  else if (tmp->last < tmp->best)
 800734c:	6802      	ldr	r2, [r0, #0]
 800734e:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8007350:	bf38      	it	cc
 8007352:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8007354:	bc30      	pop	{r4, r5}
 8007356:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
    tmp->worst = tmp->last;
 8007358:	6043      	str	r3, [r0, #4]
 800735a:	e7fb      	b.n	8007354 <chTMStopMeasurementX+0x34>
 800735c:	e0001000 	.word	0xe0001000
 8007360:	20001de0 	.word	0x20001de0
 8007364:	f3af 8000 	nop.w
 8007368:	f3af 8000 	nop.w
 800736c:	f3af 8000 	nop.w

08007370 <_port_irq_epilogue>:
 8007370:	2320      	movs	r3, #32
 8007372:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <_port_irq_epilogue+0x44>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800737e:	d102      	bne.n	8007386 <_port_irq_epilogue+0x16>
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8007386:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800738a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800738e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8007392:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8007396:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800739a:	4a07      	ldr	r2, [pc, #28]	; (80073b8 <_port_irq_epilogue+0x48>)
 800739c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800739e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80073a0:	6889      	ldr	r1, [r1, #8]
 80073a2:	6892      	ldr	r2, [r2, #8]
 80073a4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80073a6:	bf8c      	ite	hi
 80073a8:	4a04      	ldrhi	r2, [pc, #16]	; (80073bc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80073aa:	4a05      	ldrls	r2, [pc, #20]	; (80073c0 <_port_irq_epilogue+0x50>)
 80073ac:	f843 2c08 	str.w	r2, [r3, #-8]
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	e000ed00 	.word	0xe000ed00
 80073b8:	20001de0 	.word	0x20001de0
 80073bc:	0800068f 	.word	0x0800068f
 80073c0:	08000692 	.word	0x08000692
 80073c4:	f3af 8000 	nop.w
 80073c8:	f3af 8000 	nop.w
 80073cc:	f3af 8000 	nop.w

080073d0 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 80073d0:	e7fe      	b.n	80073d0 <BusFault_Handler>
 80073d2:	bf00      	nop
 80073d4:	f3af 8000 	nop.w
 80073d8:	f3af 8000 	nop.w
 80073dc:	f3af 8000 	nop.w

080073e0 <spicb.lto_priv.83>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80073e0:	2320      	movs	r3, #32
 80073e2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80073e6:	6842      	ldr	r2, [r0, #4]
 80073e8:	2301      	movs	r3, #1
 80073ea:	8911      	ldrh	r1, [r2, #8]
 80073ec:	6852      	ldr	r2, [r2, #4]
 80073ee:	408b      	lsls	r3, r1
 80073f0:	6113      	str	r3, [r2, #16]
 80073f2:	2300      	movs	r3, #0
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	f3af 8000 	nop.w

08007400 <get_descriptor.lto_priv.94>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8007400:	2902      	cmp	r1, #2
 8007402:	d006      	beq.n	8007412 <get_descriptor.lto_priv.94+0x12>
 8007404:	2903      	cmp	r1, #3
 8007406:	d006      	beq.n	8007416 <get_descriptor.lto_priv.94+0x16>
 8007408:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800740a:	4806      	ldr	r0, [pc, #24]	; (8007424 <get_descriptor.lto_priv.94+0x24>)
 800740c:	bf18      	it	ne
 800740e:	2000      	movne	r0, #0
 8007410:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8007412:	4805      	ldr	r0, [pc, #20]	; (8007428 <get_descriptor.lto_priv.94+0x28>)
 8007414:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8007416:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8007418:	bf9a      	itte	ls
 800741a:	4b04      	ldrls	r3, [pc, #16]	; (800742c <get_descriptor.lto_priv.94+0x2c>)
 800741c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8007420:	2000      	movhi	r0, #0
}
 8007422:	4770      	bx	lr
 8007424:	0800a710 	.word	0x0800a710
 8007428:	0800a540 	.word	0x0800a540
 800742c:	0800a6f0 	.word	0x0800a6f0

08007430 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8007430:	b40e      	push	{r1, r2, r3}
 8007432:	b500      	push	{lr}
 8007434:	b082      	sub	sp, #8
 8007436:	ab03      	add	r3, sp, #12
 8007438:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800743c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800743e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8007440:	f7fa fa46 	bl	80018d0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8007444:	b002      	add	sp, #8
 8007446:	f85d eb04 	ldr.w	lr, [sp], #4
 800744a:	b003      	add	sp, #12
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop

08007450 <silabs_get_part_id>:
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
	RF_switch(0);
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
 8007450:	b929      	cbnz	r1, 800745e <silabs_get_part_id+0xe>
		chprintf(chp, "Gets part ID, Usage: p \r\n");
		return;
	}
	chprintf(chp, "%4X\r\n",Silabs_Part_ID);
 8007452:	4b04      	ldr	r3, [pc, #16]	; (8007464 <silabs_get_part_id+0x14>)
 8007454:	4904      	ldr	r1, [pc, #16]	; (8007468 <silabs_get_part_id+0x18>)
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	b292      	uxth	r2, r2
 800745a:	f7ff bfe9 	b.w	8007430 <chprintf>
	RF_switch(0);
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
		chprintf(chp, "Gets part ID, Usage: p \r\n");
 800745e:	4903      	ldr	r1, [pc, #12]	; (800746c <silabs_get_part_id+0x1c>)
 8007460:	f7ff bfe6 	b.w	8007430 <chprintf>
 8007464:	20001740 	.word	0x20001740
 8007468:	0800a59c 	.word	0x0800a59c
 800746c:	0800a580 	.word	0x0800a580

08007470 <silabs_tune_down>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8007470:	2900      	cmp	r1, #0
 8007472:	dd02      	ble.n	800747a <silabs_tune_down+0xa>
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 8007474:	4912      	ldr	r1, [pc, #72]	; (80074c0 <silabs_tune_down+0x50>)
 8007476:	f7ff bfdb 	b.w	8007430 <chprintf>
		return;
	}
	Command=2;
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <silabs_tune_down+0x54>)
 800747c:	2202      	movs	r2, #2
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
 800747e:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
		return;
	}
	Command=2;
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	4604      	mov	r4, r0
 8007484:	2320      	movs	r3, #32
 8007486:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800748a:	480f      	ldr	r0, [pc, #60]	; (80074c8 <silabs_tune_down+0x58>)
 800748c:	6883      	ldr	r3, [r0, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dd13      	ble.n	80074ba <silabs_tune_down+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8007492:	f7ff fbdd 	bl	8006c50 <chSchRescheduleS>
 8007496:	2300      	movs	r3, #0
 8007498:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 800749c:	480b      	ldr	r0, [pc, #44]	; (80074cc <silabs_tune_down+0x5c>)
 800749e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80074a2:	f7ff fdad 	bl	8007000 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80074a6:	b100      	cbz	r0, 80074aa <silabs_tune_down+0x3a>
 80074a8:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80074aa:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <silabs_tune_down+0x60>)
 80074ac:	4620      	mov	r0, r4
	}
}
 80074ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4907      	ldr	r1, [pc, #28]	; (80074d4 <silabs_tune_down+0x64>)
 80074b6:	f7ff bfbb 	b.w	8007430 <chprintf>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80074ba:	f7ff fec1 	bl	8007240 <chSemSignalI>
 80074be:	e7e8      	b.n	8007492 <silabs_tune_down+0x22>
 80074c0:	0800a5a4 	.word	0x0800a5a4
 80074c4:	20001fa8 	.word	0x20001fa8
 80074c8:	20001f88 	.word	0x20001f88
 80074cc:	20001fe4 	.word	0x20001fe4
 80074d0:	20000cf4 	.word	0x20000cf4
 80074d4:	0800a5c4 	.word	0x0800a5c4
 80074d8:	f3af 8000 	nop.w
 80074dc:	f3af 8000 	nop.w

080074e0 <silabs_tune_up>:
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 80074e0:	2900      	cmp	r1, #0
 80074e2:	dd02      	ble.n	80074ea <silabs_tune_up+0xa>
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 80074e4:	4912      	ldr	r1, [pc, #72]	; (8007530 <silabs_tune_up+0x50>)
 80074e6:	f7ff bfa3 	b.w	8007430 <chprintf>
		return;
	}
	Command=1;
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <silabs_tune_up+0x54>)
 80074ec:	2201      	movs	r2, #1
#define VCXO_FREQ 26000000UL
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
 80074ee:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
		return;
	}
	Command=1;
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	4604      	mov	r4, r0
 80074f4:	2320      	movs	r3, #32
 80074f6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80074fa:	480f      	ldr	r0, [pc, #60]	; (8007538 <silabs_tune_up+0x58>)
 80074fc:	6883      	ldr	r3, [r0, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd13      	ble.n	800752a <silabs_tune_up+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8007502:	f7ff fba5 	bl	8006c50 <chSchRescheduleS>
 8007506:	2300      	movs	r3, #0
 8007508:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 800750c:	480b      	ldr	r0, [pc, #44]	; (800753c <silabs_tune_up+0x5c>)
 800750e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007512:	f7ff fd75 	bl	8007000 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 8007516:	b100      	cbz	r0, 800751a <silabs_tune_up+0x3a>
 8007518:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <silabs_tune_up+0x60>)
 800751c:	4620      	mov	r0, r4
	}
}
 800751e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4907      	ldr	r1, [pc, #28]	; (8007544 <silabs_tune_up+0x64>)
 8007526:	f7ff bf83 	b.w	8007430 <chprintf>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800752a:	f7ff fe89 	bl	8007240 <chSemSignalI>
 800752e:	e7e8      	b.n	8007502 <silabs_tune_up+0x22>
 8007530:	0800a5d8 	.word	0x0800a5d8
 8007534:	20001fa8 	.word	0x20001fa8
 8007538:	20001f88 	.word	0x20001f88
 800753c:	20001fe4 	.word	0x20001fe4
 8007540:	20000cf4 	.word	0x20000cf4
 8007544:	0800a5c4 	.word	0x0800a5c4
 8007548:	f3af 8000 	nop.w
 800754c:	f3af 8000 	nop.w

08007550 <usb_event.lto_priv.93>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8007550:	2902      	cmp	r1, #2
 8007552:	d149      	bne.n	80075e8 <usb_event.lto_priv.93+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	4606      	mov	r6, r0
 8007558:	460d      	mov	r5, r1
 800755a:	2320      	movs	r3, #32
 800755c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8007560:	4c22      	ldr	r4, [pc, #136]	; (80075ec <usb_event.lto_priv.93+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8007562:	2101      	movs	r1, #1
 8007564:	4a22      	ldr	r2, [pc, #136]	; (80075f0 <usb_event.lto_priv.93+0xa0>)
 8007566:	f7fb fa83 	bl	8002a70 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800756a:	4630      	mov	r0, r6
 800756c:	4629      	mov	r1, r5
 800756e:	4a21      	ldr	r2, [pc, #132]	; (80075f4 <usb_event.lto_priv.93+0xa4>)
 8007570:	f7fb fa7e 	bl	8002a70 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8007574:	69a3      	ldr	r3, [r4, #24]
 8007576:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800757a:	f104 070c 	add.w	r7, r4, #12
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800757e:	2500      	movs	r5, #0
 8007580:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8007582:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8007584:	6223      	str	r3, [r4, #32]
 8007586:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8007588:	f06f 0101 	mvn.w	r1, #1
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800758c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800758e:	f7ff fe87 	bl	80072a0 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8007592:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_counter = chQSizeI(oqp);
 8007594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8007596:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeI(oqp);
 8007598:	1a9b      	subs	r3, r3, r2
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 800759a:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_counter = chQSizeI(oqp);
 800759c:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800759e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80075a2:	f06f 0101 	mvn.w	r1, #1
 80075a6:	f7ff fe7b 	bl	80072a0 <chThdDequeueAllI>
 80075aa:	1d20      	adds	r0, r4, #4
 80075ac:	2101      	movs	r1, #1
 80075ae:	f7ff fa2f 	bl	8006a10 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 80075b2:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80075b6:	2201      	movs	r2, #1
 80075b8:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80075ba:	4630      	mov	r0, r6
 80075bc:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 80075c0:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 80075c2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80075c6:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80075c8:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80075cc:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 80075ce:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80075d0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80075d2:	f000 ff25 	bl	8008420 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  usbStartReceiveI(usbp, sdup->config->bulk_out);
 80075d6:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 80075da:	4630      	mov	r0, r6
 80075dc:	7959      	ldrb	r1, [r3, #5]
 80075de:	f7fa ff4f 	bl	8002480 <usbStartReceiveI>
 80075e2:	f385 8811 	msr	BASEPRI, r5
 80075e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	200014b4 	.word	0x200014b4
 80075f0:	0800a4c0 	.word	0x0800a4c0
 80075f4:	0800a550 	.word	0x0800a550
 80075f8:	f3af 8000 	nop.w
 80075fc:	f3af 8000 	nop.w

08007600 <si446x_spi>:
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 8007604:	2500      	movs	r5, #0
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 8007606:	b086      	sub	sp, #24
 8007608:	4617      	mov	r7, r2
 800760a:	4699      	mov	r9, r3
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 800760c:	9501      	str	r5, [sp, #4]
 800760e:	9502      	str	r5, [sp, #8]
 8007610:	9503      	str	r5, [sp, #12]
 8007612:	9504      	str	r5, [sp, #16]
 8007614:	9505      	str	r5, [sp, #20]
 8007616:	2620      	movs	r6, #32
 8007618:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 800761c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8007714 <si446x_spi+0x114>
 8007620:	2401      	movs	r4, #1
 8007622:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007626:	891a      	ldrh	r2, [r3, #8]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	fa04 f202 	lsl.w	r2, r4, r2
 800762e:	615a      	str	r2, [r3, #20]
 8007630:	f385 8811 	msr	BASEPRI, r5
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
 8007634:	aa01      	add	r2, sp, #4
 8007636:	f001 fd33 	bl	80090a0 <spiExchange.constprop.5>
 800763a:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 800763e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007642:	891a      	ldrh	r2, [r3, #8]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	4094      	lsls	r4, r2
 8007648:	611c      	str	r4, [r3, #16]
 800764a:	f385 8811 	msr	BASEPRI, r5
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 800764e:	2344      	movs	r3, #68	; 0x44
 8007650:	f88d 3004 	strb.w	r3, [sp, #4]
 8007654:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8007658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800765c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800765e:	f385 8811 	msr	BASEPRI, r5
	uint32_t millis = MS2ST(chVTGetSystemTime());
 8007662:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007666:	b2a4      	uxth	r4, r4
 8007668:	fb03 f404 	mul.w	r4, r3, r4
 800766c:	4d27      	ldr	r5, [pc, #156]	; (800770c <si446x_spi+0x10c>)
 800766e:	3c01      	subs	r4, #1
 8007670:	fba5 3404 	umull	r3, r4, r5, r4
 8007674:	09a4      	lsrs	r4, r4, #6
 8007676:	3401      	adds	r4, #1
 8007678:	b2a4      	uxth	r4, r4
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 800767a:	4e25      	ldr	r6, [pc, #148]	; (8007710 <si446x_spi+0x110>)
 800767c:	e017      	b.n	80076ae <si446x_spi+0xae>
		chThdSleepMicroseconds(20);
 800767e:	f7ff fce7 	bl	8007050 <chThdSleep>
 8007682:	2320      	movs	r3, #32
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	f38a 8811 	msr	BASEPRI, sl
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
 8007692:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007696:	b29b      	uxth	r3, r3
 8007698:	fb02 f303 	mul.w	r3, r2, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	fba5 2303 	umull	r2, r3, r5, r3
 80076a2:	099b      	lsrs	r3, r3, #6
 80076a4:	3301      	adds	r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	1b1b      	subs	r3, r3, r4
 80076aa:	2b0a      	cmp	r3, #10
 80076ac:	d809      	bhi.n	80076c2 <si446x_spi+0xc2>
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80076ae:	68b3      	ldr	r3, [r6, #8]
		chThdSleepMicroseconds(20);
 80076b0:	2001      	movs	r0, #1
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80076b2:	f413 6a00 	ands.w	sl, r3, #2048	; 0x800
 80076b6:	d0e2      	beq.n	800767e <si446x_spi+0x7e>
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
 80076b8:	b93f      	cbnz	r7, 80076ca <si446x_spi+0xca>
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 80076ba:	4638      	mov	r0, r7
}
 80076bc:	b006      	add	sp, #24
 80076be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
 80076c2:	2001      	movs	r0, #1
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
}
 80076c4:	b006      	add	sp, #24
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ca:	2620      	movs	r6, #32
 80076cc:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80076d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076d4:	4604      	mov	r4, r0
 80076d6:	891a      	ldrh	r2, [r3, #8]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	fa00 f202 	lsl.w	r2, r0, r2
 80076de:	615a      	str	r2, [r3, #20]
 80076e0:	2500      	movs	r5, #0
 80076e2:	f385 8811 	msr	BASEPRI, r5
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
 80076e6:	4638      	mov	r0, r7
 80076e8:	a901      	add	r1, sp, #4
 80076ea:	464a      	mov	r2, r9
 80076ec:	f001 fcd8 	bl	80090a0 <spiExchange.constprop.5>
 80076f0:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80076f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076f8:	891a      	ldrh	r2, [r3, #8]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4094      	lsls	r4, r2
 80076fe:	611c      	str	r4, [r3, #16]
 8007700:	f385 8811 	msr	BASEPRI, r5
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 8007704:	4628      	mov	r0, r5
}
 8007706:	b006      	add	sp, #24
 8007708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770c:	10624dd3 	.word	0x10624dd3
 8007710:	40010c00 	.word	0x40010c00
 8007714:	20001f3c 	.word	0x20001f3c
 8007718:	f3af 8000 	nop.w
 800771c:	f3af 8000 	nop.w

08007720 <si446x_set_frequency>:
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007724:	4b64      	ldr	r3, [pc, #400]	; (80078b8 <si446x_set_frequency+0x198>)
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8007726:	b087      	sub	sp, #28
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007728:	4298      	cmp	r0, r3
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 800772a:	4604      	mov	r4, r0
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 800772c:	f200 8096 	bhi.w	800785c <si446x_set_frequency+0x13c>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8007730:	4b62      	ldr	r3, [pc, #392]	; (80078bc <si446x_set_frequency+0x19c>)
 8007732:	4298      	cmp	r0, r3
 8007734:	f200 80a0 	bhi.w	8007878 <si446x_set_frequency+0x158>
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8007738:	4b61      	ldr	r3, [pc, #388]	; (80078c0 <si446x_set_frequency+0x1a0>)
 800773a:	4298      	cmp	r0, r3
 800773c:	f200 80b4 	bhi.w	80078a8 <si446x_set_frequency+0x188>
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8007740:	4b60      	ldr	r3, [pc, #384]	; (80078c4 <si446x_set_frequency+0x1a4>)
 8007742:	4298      	cmp	r0, r3
 8007744:	f200 80a8 	bhi.w	8007898 <si446x_set_frequency+0x178>
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
 8007748:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <si446x_set_frequency+0x1a8>)
 800774a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80078f0 <si446x_set_frequency+0x1d0>
 800774e:	4298      	cmp	r0, r3
 8007750:	f200 809a 	bhi.w	8007888 <si446x_set_frequency+0x168>
 8007754:	2318      	movs	r3, #24
 8007756:	4e5d      	ldr	r6, [pc, #372]	; (80078cc <si446x_set_frequency+0x1ac>)
 8007758:	4d5d      	ldr	r5, [pc, #372]	; (80078d0 <si446x_set_frequency+0x1b0>)
 800775a:	f88a 3000 	strb.w	r3, [sl]
 800775e:	f04f 0b0d 	mov.w	fp, #13
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
 8007762:	4620      	mov	r0, r4
 8007764:	f7f9 fcba 	bl	80010dc <__aeabi_ui2f>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8007768:	fbb4 f8f5 	udiv	r8, r4, r5
	float ratio = (float)freq / (float)f_pfd;
 800776c:	4631      	mov	r1, r6
 800776e:	f7f9 fdc3 	bl	80012f8 <__aeabi_fdiv>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8007772:	f108 38ff 	add.w	r8, r8, #4294967295
	float ratio = (float)freq / (float)f_pfd;
 8007776:	4604      	mov	r4, r0
	float rest = ratio - (float)n;
 8007778:	4640      	mov	r0, r8
 800777a:	f7f9 fcaf 	bl	80010dc <__aeabi_ui2f>
 800777e:	4601      	mov	r1, r0
 8007780:	4620      	mov	r0, r4
 8007782:	f7f9 fbf9 	bl	8000f78 <__aeabi_fsub>
	uint32_t m = (unsigned long)(rest * 524288UL);
 8007786:	f04f 4192 	mov.w	r1, #1224736768	; 0x49000000
 800778a:	f7f9 fd01 	bl	8001190 <__aeabi_fmul>
 800778e:	f7f9 feef 	bl	8001570 <__aeabi_f2uiz>
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 8007792:	4a50      	ldr	r2, [pc, #320]	; (80078d4 <si446x_set_frequency+0x1b4>)
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
 8007794:	4681      	mov	r9, r0
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8007796:	2711      	movs	r7, #17
 8007798:	2601      	movs	r6, #1
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800779a:	a902      	add	r1, sp, #8
 800779c:	ab01      	add	r3, sp, #4
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 800779e:	f882 b000 	strb.w	fp, [r2]
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80077a2:	2520      	movs	r5, #32
 80077a4:	2451      	movs	r4, #81	; 0x51
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80077a6:	2200      	movs	r2, #0
 80077a8:	2005      	movs	r0, #5
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80077aa:	f88d 5009 	strb.w	r5, [sp, #9]
 80077ae:	f88d 400b 	strb.w	r4, [sp, #11]
 80077b2:	f88d b00c 	strb.w	fp, [sp, #12]
 80077b6:	f88d 7008 	strb.w	r7, [sp, #8]
 80077ba:	f88d 600a 	strb.w	r6, [sp, #10]
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80077be:	f7ff ff1f 	bl	8007600 <si446x_spi>
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 80077c2:	4b45      	ldr	r3, [pc, #276]	; (80078d8 <si446x_set_frequency+0x1b8>)
 80077c4:	f99a 5000 	ldrsb.w	r5, [sl]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	04ed      	lsls	r5, r5, #19
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	fb03 f505 	mul.w	r5, r3, r5
 80077d2:	4b42      	ldr	r3, [pc, #264]	; (80078dc <si446x_set_frequency+0x1bc>)
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
 80077d4:	ea4f 4e19 	mov.w	lr, r9, lsr #16
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 80077d8:	fba3 3505 	umull	r3, r5, r3, r5
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 80077dc:	eba9 490e 	sub.w	r9, r9, lr, lsl #16
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 80077e0:	f04f 0a00 	mov.w	sl, #0
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
 80077e4:	0e6d      	lsrs	r5, r5, #25
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 80077e6:	ea4f 2c19 	mov.w	ip, r9, lsr #8
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 80077ea:	a902      	add	r1, sp, #8
 80077ec:	ab01      	add	r3, sp, #4
 80077ee:	4652      	mov	r2, sl
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 80077f0:	f88d 800c 	strb.w	r8, [sp, #12]
 80077f4:	f88d 5011 	strb.w	r5, [sp, #17]
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80077f8:	4604      	mov	r4, r0
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 80077fa:	f04f 0840 	mov.w	r8, #64	; 0x40
 80077fe:	2506      	movs	r5, #6
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007800:	200a      	movs	r0, #10
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8007802:	f88d c00e 	strb.w	ip, [sp, #14]
 8007806:	f88d e00d 	strb.w	lr, [sp, #13]
 800780a:	f88d 500a 	strb.w	r5, [sp, #10]
 800780e:	f88d 7008 	strb.w	r7, [sp, #8]
 8007812:	f88d 900f 	strb.w	r9, [sp, #15]
 8007816:	f88d a00b 	strb.w	sl, [sp, #11]
 800781a:	f88d a010 	strb.w	sl, [sp, #16]
 800781e:	f88d 8009 	strb.w	r8, [sp, #9]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007822:	f7ff feed 	bl	8007600 <si446x_spi>
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007826:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <si446x_set_frequency+0x1c0>)
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007828:	4304      	orrs	r4, r0
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 800782a:	f893 e000 	ldrb.w	lr, [r3]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800782e:	a902      	add	r1, sp, #8
 8007830:	4652      	mov	r2, sl
 8007832:	ab01      	add	r3, sp, #4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007834:	2522      	movs	r5, #34	; 0x22
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007836:	2005      	movs	r0, #5
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007838:	f88d 7008 	strb.w	r7, [sp, #8]
 800783c:	f88d 600a 	strb.w	r6, [sp, #10]
 8007840:	f88d 600b 	strb.w	r6, [sp, #11]
 8007844:	f88d e00c 	strb.w	lr, [sp, #12]
 8007848:	f88d 5009 	strb.w	r5, [sp, #9]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800784c:	f7ff fed8 	bl	8007600 <si446x_spi>
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007850:	b2e4      	uxtb	r4, r4
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007852:	4320      	orrs	r0, r4
	return failure;
 8007854:	b2c0      	uxtb	r0, r0
}
 8007856:	b007      	add	sp, #28
 8007858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80078f0 <si446x_set_frequency+0x1d0>
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007860:	f04f 0b08 	mov.w	fp, #8
 8007864:	4b1f      	ldr	r3, [pc, #124]	; (80078e4 <si446x_set_frequency+0x1c4>)
 8007866:	f99a 5000 	ldrsb.w	r5, [sl]
 800786a:	fbb3 f5f5 	udiv	r5, r3, r5
 800786e:	4628      	mov	r0, r5
 8007870:	f7f9 fc34 	bl	80010dc <__aeabi_ui2f>
 8007874:	4606      	mov	r6, r0
 8007876:	e774      	b.n	8007762 <si446x_set_frequency+0x42>
 8007878:	f8df a074 	ldr.w	sl, [pc, #116]	; 80078f0 <si446x_set_frequency+0x1d0>
 800787c:	2306      	movs	r3, #6
 800787e:	f88a 3000 	strb.w	r3, [sl]
 8007882:	f04f 0b09 	mov.w	fp, #9
 8007886:	e7ed      	b.n	8007864 <si446x_set_frequency+0x144>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8007888:	2310      	movs	r3, #16
 800788a:	f88a 3000 	strb.w	r3, [sl]
 800788e:	f04f 0b0c 	mov.w	fp, #12
 8007892:	4e15      	ldr	r6, [pc, #84]	; (80078e8 <si446x_set_frequency+0x1c8>)
 8007894:	4d15      	ldr	r5, [pc, #84]	; (80078ec <si446x_set_frequency+0x1cc>)
 8007896:	e764      	b.n	8007762 <si446x_set_frequency+0x42>
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8007898:	f8df a054 	ldr.w	sl, [pc, #84]	; 80078f0 <si446x_set_frequency+0x1d0>
 800789c:	230c      	movs	r3, #12
 800789e:	f88a 3000 	strb.w	r3, [sl]
 80078a2:	f04f 0b0b 	mov.w	fp, #11
 80078a6:	e7dd      	b.n	8007864 <si446x_set_frequency+0x144>
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 80078a8:	f8df a044 	ldr.w	sl, [pc, #68]	; 80078f0 <si446x_set_frequency+0x1d0>
 80078ac:	2308      	movs	r3, #8
 80078ae:	f88a 3000 	strb.w	r3, [sl]
 80078b2:	f04f 0b0a 	mov.w	fp, #10
 80078b6:	e7d5      	b.n	8007864 <si446x_set_frequency+0x144>
 80078b8:	2a05723f 	.word	0x2a05723f
 80078bc:	1f4add3f 	.word	0x1f4add3f
 80078c0:	150a5a3f 	.word	0x150a5a3f
 80078c4:	0e3ed9bf 	.word	0x0e3ed9bf
 80078c8:	0a8cce3f 	.word	0x0a8cce3f
 80078cc:	4a043e28 	.word	0x4a043e28
 80078d0:	00210f8a 	.word	0x00210f8a
 80078d4:	20000c80 	.word	0x20000c80
 80078d8:	20000c7e 	.word	0x20000c7e
 80078dc:	a530e8a5 	.word	0xa530e8a5
 80078e0:	20000c7c 	.word	0x20000c7c
 80078e4:	03197500 	.word	0x03197500
 80078e8:	4a465d40 	.word	0x4a465d40
 80078ec:	00319750 	.word	0x00319750
 80078f0:	20000c81 	.word	0x20000c81
 80078f4:	f3af 8000 	nop.w
 80078f8:	f3af 8000 	nop.w
 80078fc:	f3af 8000 	nop.w

08007900 <si446x_initialise>:
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Reset the radio */
	SDN_HIGH;
 8007904:	4c13      	ldr	r4, [pc, #76]	; (8007954 <si446x_initialise+0x54>)
 8007906:	f44f 7500 	mov.w	r5, #512	; 0x200
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 800790a:	b0ad      	sub	sp, #180	; 0xb4
	/* Reset the radio */
	SDN_HIGH;
 800790c:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(10);
 800790e:	2014      	movs	r0, #20
 8007910:	f7ff fb9e 	bl	8007050 <chThdSleep>
	SDN_LOW;						/*Radio is now reset*/
 8007914:	6165      	str	r5, [r4, #20]
	chThdSleepMilliseconds(10);				/*Wait another 10ms to boot*/
 8007916:	2014      	movs	r0, #20
 8007918:	f7ff fb9a 	bl	8007050 <chThdSleep>
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMilliseconds(10);}/*Wait for CTS high after POR*/
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	051a      	lsls	r2, r3, #20
 8007920:	d5f9      	bpl.n	8007916 <si446x_initialise+0x16>
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8007922:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <si446x_initialise+0x58>)
 8007924:	2501      	movs	r5, #1
 8007926:	2602      	movs	r6, #2
 8007928:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 800792c:	f04f 0eba 	mov.w	lr, #186	; 0xba
 8007930:	2780      	movs	r7, #128	; 0x80
 8007932:	7065      	strb	r5, [r4, #1]
 8007934:	70a5      	strb	r5, [r4, #2]
 8007936:	70e5      	strb	r5, [r4, #3]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8007938:	4621      	mov	r1, r4
 800793a:	4632      	mov	r2, r6
 800793c:	2007      	movs	r0, #7
 800793e:	4b07      	ldr	r3, [pc, #28]	; (800795c <si446x_initialise+0x5c>)
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8007940:	f884 c004 	strb.w	ip, [r4, #4]
 8007944:	f884 e005 	strb.w	lr, [r4, #5]
 8007948:	71a7      	strb	r7, [r4, #6]
 800794a:	7026      	strb	r6, [r4, #0]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 800794c:	f7ff fe58 	bl	8007600 <si446x_spi>
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8007950:	4d00      	ldr	r5, [pc, #0]	; (8007954 <si446x_initialise+0x54>)
 8007952:	e008      	b.n	8007966 <si446x_initialise+0x66>
 8007954:	40010c00 	.word	0x40010c00
 8007958:	20001dd0 	.word	0x20001dd0
 800795c:	20001f30 	.word	0x20001f30
 8007960:	2014      	movs	r0, #20
 8007962:	f7ff fb75 	bl	8007050 <chThdSleep>
 8007966:	68aa      	ldr	r2, [r5, #8]
 8007968:	68ab      	ldr	r3, [r5, #8]
 800796a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800796e:	f083 0301 	eor.w	r3, r3, #1
 8007972:	4313      	orrs	r3, r2
 8007974:	07db      	lsls	r3, r3, #31
 8007976:	d4f3      	bmi.n	8007960 <si446x_initialise+0x60>
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8007978:	2500      	movs	r5, #0
 800797a:	2620      	movs	r6, #32
	si446x_spi( 4, tx_buffer, 0, NULL);
 800797c:	462a      	mov	r2, r5
 800797e:	462b      	mov	r3, r5
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8007980:	7026      	strb	r6, [r4, #0]
	si446x_spi( 4, tx_buffer, 0, NULL);
 8007982:	49dc      	ldr	r1, [pc, #880]	; (8007cf4 <si446x_initialise+0x3f4>)
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8007984:	7065      	strb	r5, [r4, #1]
 8007986:	70a5      	strb	r5, [r4, #2]
 8007988:	70e5      	strb	r5, [r4, #3]
	si446x_spi( 4, tx_buffer, 0, NULL);
 800798a:	2004      	movs	r0, #4
 800798c:	f7ff fe38 	bl	8007600 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8007990:	4bd9      	ldr	r3, [pc, #868]	; (8007cf8 <si446x_initialise+0x3f8>)
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8007992:	f8df 8388 	ldr.w	r8, [pc, #904]	; 8007d1c <si446x_initialise+0x41c>
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8007996:	881b      	ldrh	r3, [r3, #0]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8007998:	49d6      	ldr	r1, [pc, #856]	; (8007cf4 <si446x_initialise+0x3f4>)
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 800799a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800799e:	f8bd 6008 	ldrh.w	r6, [sp, #8]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 80079a2:	4643      	mov	r3, r8
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 80079a4:	8026      	strh	r6, [r4, #0]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 80079a6:	220c      	movs	r2, #12
 80079a8:	2002      	movs	r0, #2
 80079aa:	f7ff fe29 	bl	8007600 <si446x_spi>
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80079ae:	4ad2      	ldr	r2, [pc, #840]	; (8007cf8 <si446x_initialise+0x3f8>)
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 80079b0:	f8b8 e003 	ldrh.w	lr, [r8, #3]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80079b4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80079b8:	ab09      	add	r3, sp, #36	; 0x24
 80079ba:	8892      	ldrh	r2, [r2, #4]
 80079bc:	9009      	str	r0, [sp, #36]	; 0x24
 80079be:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 80079c2:	4ece      	ldr	r6, [pc, #824]	; (8007cfc <si446x_initialise+0x3fc>)
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 80079c4:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80079c6:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
 80079ca:	462b      	mov	r3, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80079cc:	6020      	str	r0, [r4, #0]
 80079ce:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, NULL);
 80079d0:	2006      	movs	r0, #6
 80079d2:	49c8      	ldr	r1, [pc, #800]	; (8007cf4 <si446x_initialise+0x3f4>)
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 80079d4:	f8a6 e000 	strh.w	lr, [r6]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 80079d8:	f7ff fe12 	bl	8007600 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 80079dc:	4bc8      	ldr	r3, [pc, #800]	; (8007d00 <si446x_initialise+0x400>)
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 80079de:	2720      	movs	r7, #32
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f7ff fe9d 	bl	8007720 <si446x_set_frequency>
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80079e6:	4bc7      	ldr	r3, [pc, #796]	; (8007d04 <si446x_initialise+0x404>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80079e8:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80079ec:	f993 0000 	ldrsb.w	r0, [r3]
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80079f0:	f10d 0990 	add.w	r9, sp, #144	; 0x90
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80079f4:	0480      	lsls	r0, r0, #18
 80079f6:	f7f9 fb75 	bl	80010e4 <__aeabi_i2f>
 80079fa:	49c3      	ldr	r1, [pc, #780]	; (8007d08 <si446x_initialise+0x408>)
 80079fc:	f7f9 fc7c 	bl	80012f8 <__aeabi_fdiv>
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 8007a00:	49c2      	ldr	r1, [pc, #776]	; (8007d0c <si446x_initialise+0x40c>)
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8007a02:	4683      	mov	fp, r0
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 8007a04:	f7f9 fbc4 	bl	8001190 <__aeabi_fmul>
 8007a08:	f7f8 ffae 	bl	8000968 <__aeabi_f2d>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	4bc0      	ldr	r3, [pc, #768]	; (8007d10 <si446x_initialise+0x410>)
 8007a10:	f7f8 fffe 	bl	8000a10 <__aeabi_dmul>
 8007a14:	f7f9 fa3c 	bl	8000e90 <__aeabi_d2uiz>
 8007a18:	4686      	mov	lr, r0
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007a1a:	9701      	str	r7, [sp, #4]
 8007a1c:	f89d 7004 	ldrb.w	r7, [sp, #4]
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8007a20:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8007a24:	0c00      	lsrs	r0, r0, #16
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007a26:	462a      	mov	r2, r5
 8007a28:	464b      	mov	r3, r9
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007a2a:	2603      	movs	r6, #3
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007a2c:	4651      	mov	r1, sl
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
 8007a2e:	f88d e0a6 	strb.w	lr, [sp, #166]	; 0xa6
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8007a32:	f88d 00a4 	strb.w	r0, [sp, #164]	; 0xa4
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007a36:	f04f 0e0a 	mov.w	lr, #10
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8007a3a:	f88d c0a5 	strb.w	ip, [sp, #165]	; 0xa5
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007a3e:	2007      	movs	r0, #7
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007a40:	f04f 0c11 	mov.w	ip, #17
 8007a44:	f88d c0a0 	strb.w	ip, [sp, #160]	; 0xa0
 8007a48:	f88d e0a3 	strb.w	lr, [sp, #163]	; 0xa3
 8007a4c:	f88d 70a1 	strb.w	r7, [sp, #161]	; 0xa1
 8007a50:	f88d 60a2 	strb.w	r6, [sp, #162]	; 0xa2
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007a54:	f7ff fdd4 	bl	8007600 <si446x_spi>
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
 8007a58:	4658      	mov	r0, fp
 8007a5a:	49ae      	ldr	r1, [pc, #696]	; (8007d14 <si446x_initialise+0x414>)
 8007a5c:	f7f9 fb98 	bl	8001190 <__aeabi_fmul>
 8007a60:	f7f8 ff82 	bl	8000968 <__aeabi_f2d>
 8007a64:	2200      	movs	r2, #0
 8007a66:	4baa      	ldr	r3, [pc, #680]	; (8007d10 <si446x_initialise+0x410>)
 8007a68:	f7f8 ffd2 	bl	8000a10 <__aeabi_dmul>
 8007a6c:	f7f9 fa10 	bl	8000e90 <__aeabi_d2uiz>
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8007a70:	2711      	movs	r7, #17
 8007a72:	9701      	str	r7, [sp, #4]
 8007a74:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8007a78:	f04f 0e02 	mov.w	lr, #2
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007a7c:	4651      	mov	r1, sl
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8007a7e:	ea4f 2b10 	mov.w	fp, r0, lsr #8
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007a82:	462a      	mov	r2, r5
 8007a84:	464b      	mov	r3, r9
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8007a86:	f04f 0c40 	mov.w	ip, #64	; 0x40
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
 8007a8a:	f88d 00a5 	strb.w	r0, [sp, #165]	; 0xa5
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8007a8e:	f88d e0a2 	strb.w	lr, [sp, #162]	; 0xa2
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007a92:	2006      	movs	r0, #6
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8007a94:	f04f 0e04 	mov.w	lr, #4
 8007a98:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8007a9c:	f88d b0a4 	strb.w	fp, [sp, #164]	; 0xa4
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8007aa0:	f88d c0a1 	strb.w	ip, [sp, #161]	; 0xa1
 8007aa4:	f88d e0a3 	strb.w	lr, [sp, #163]	; 0xa3
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007aa8:	f7ff fdaa 	bl	8007600 <si446x_spi>
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8007aac:	4b9a      	ldr	r3, [pc, #616]	; (8007d18 <si446x_initialise+0x418>)
 8007aae:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
 8007ab2:	781b      	ldrb	r3, [r3, #0]
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007ab4:	f04f 0b11 	mov.w	fp, #17
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8007ab8:	fb0e fe03 	mul.w	lr, lr, r3
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007abc:	4651      	mov	r1, sl
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 8007abe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	464b      	mov	r3, r9
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007ac6:	f88d b0a0 	strb.w	fp, [sp, #160]	; 0xa0
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007aca:	2007      	movs	r0, #7
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007acc:	f04f 0b20 	mov.w	fp, #32
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 8007ad0:	f88d c0a5 	strb.w	ip, [sp, #165]	; 0xa5
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
 8007ad4:	f88d e0a6 	strb.w	lr, [sp, #166]	; 0xa6
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007ad8:	f88d b0a1 	strb.w	fp, [sp, #161]	; 0xa1
 8007adc:	f88d 60a2 	strb.w	r6, [sp, #162]	; 0xa2
 8007ae0:	f88d 60a3 	strb.w	r6, [sp, #163]	; 0xa3
 8007ae4:	f88d 50a4 	strb.w	r5, [sp, #164]	; 0xa4
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007ae8:	f7ff fd8a 	bl	8007600 <si446x_spi>
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
 8007aec:	4a82      	ldr	r2, [pc, #520]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007aee:	ab07      	add	r3, sp, #28
 8007af0:	f852 0f0c 	ldr.w	r0, [r2, #12]!
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8007af4:	2711      	movs	r7, #17
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
 8007af6:	7912      	ldrb	r2, [r2, #4]
 8007af8:	9007      	str	r0, [sp, #28]
 8007afa:	f88d 2020 	strb.w	r2, [sp, #32]
 8007afe:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007b02:	462a      	mov	r2, r5
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
 8007b04:	6020      	str	r0, [r4, #0]
 8007b06:	7121      	strb	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007b08:	4643      	mov	r3, r8
 8007b0a:	497a      	ldr	r1, [pc, #488]	; (8007cf4 <si446x_initialise+0x3f4>)
 8007b0c:	2005      	movs	r0, #5
 8007b0e:	f7ff fd77 	bl	8007600 <si446x_spi>
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
 8007b12:	4a79      	ldr	r2, [pc, #484]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007b14:	ab13      	add	r3, sp, #76	; 0x4c
 8007b16:	f852 0f14 	ldr.w	r0, [r2, #20]!
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8007b1a:	f04f 0b4a 	mov.w	fp, #74	; 0x4a
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
 8007b1e:	8891      	ldrh	r1, [r2, #4]
 8007b20:	7992      	ldrb	r2, [r2, #6]
 8007b22:	9013      	str	r0, [sp, #76]	; 0x4c
 8007b24:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
 8007b28:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 8007b2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b30:	0c0e      	lsrs	r6, r1, #16
 8007b32:	71a6      	strb	r6, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8007b34:	4e70      	ldr	r6, [pc, #448]	; (8007cf8 <si446x_initialise+0x3f8>)
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007b36:	462a      	mov	r2, r5
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
 8007b38:	6020      	str	r0, [r4, #0]
 8007b3a:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007b3c:	4643      	mov	r3, r8
 8007b3e:	496d      	ldr	r1, [pc, #436]	; (8007cf4 <si446x_initialise+0x3f4>)
 8007b40:	2007      	movs	r0, #7
 8007b42:	f7ff fd5d 	bl	8007600 <si446x_spi>
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8007b46:	f856 0f1c 	ldr.w	r0, [r6, #28]!
 8007b4a:	ab18      	add	r3, sp, #96	; 0x60
 8007b4c:	6871      	ldr	r1, [r6, #4]
 8007b4e:	68b2      	ldr	r2, [r6, #8]
 8007b50:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8007b54:	c307      	stmia	r3!, {r0, r1, r2}
 8007b56:	7bb2      	ldrb	r2, [r6, #14]
 8007b58:	4e66      	ldr	r6, [pc, #408]	; (8007cf4 <si446x_initialise+0x3f4>)
 8007b5a:	f8a3 e000 	strh.w	lr, [r3]
 8007b5e:	709a      	strb	r2, [r3, #2]
 8007b60:	ab18      	add	r3, sp, #96	; 0x60
 8007b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b64:	c607      	stmia	r6!, {r0, r1, r2}
 8007b66:	f826 3b02 	strh.w	r3, [r6], #2
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	f801 390e 	strb.w	r3, [r1], #-14
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 8007b72:	462a      	mov	r2, r5
 8007b74:	4643      	mov	r3, r8
 8007b76:	200f      	movs	r0, #15
 8007b78:	f7ff fd42 	bl	8007600 <si446x_spi>
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8007b7c:	46d6      	mov	lr, sl
 8007b7e:	4b5e      	ldr	r3, [pc, #376]	; (8007cf8 <si446x_initialise+0x3f8>)
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8007b80:	f04f 0a0c 	mov.w	sl, #12
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8007b84:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8007b88:	6859      	ldr	r1, [r3, #4]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8007b96:	f1a6 010e 	sub.w	r1, r6, #14
 8007b9a:	462a      	mov	r2, r5
 8007b9c:	4643      	mov	r3, r8
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f7ff fd2e 	bl	8007600 <si446x_spi>
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8007ba4:	4a54      	ldr	r2, [pc, #336]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007ba6:	ab11      	add	r3, sp, #68	; 0x44
 8007ba8:	f852 0f3c 	ldr.w	r0, [r2, #60]!
 8007bac:	8891      	ldrh	r1, [r2, #4]
 8007bae:	7992      	ldrb	r2, [r2, #6]
 8007bb0:	9011      	str	r0, [sp, #68]	; 0x44
 8007bb2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
 8007bb6:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8007bba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bbe:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 8007bc2:	f884 e006 	strb.w	lr, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007bc6:	462a      	mov	r2, r5
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8007bc8:	80a1      	strh	r1, [r4, #4]
 8007bca:	6020      	str	r0, [r4, #0]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007bcc:	f1a6 010e 	sub.w	r1, r6, #14
 8007bd0:	4643      	mov	r3, r8
 8007bd2:	2007      	movs	r0, #7
 8007bd4:	f7ff fd14 	bl	8007600 <si446x_spi>
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8007bd8:	4a47      	ldr	r2, [pc, #284]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007bda:	ab0f      	add	r3, sp, #60	; 0x3c
 8007bdc:	f852 0f44 	ldr.w	r0, [r2, #68]!
 8007be0:	8892      	ldrh	r2, [r2, #4]
 8007be2:	900f      	str	r0, [sp, #60]	; 0x3c
 8007be4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8007be8:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007bec:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8007bee:	80a1      	strh	r1, [r4, #4]
 8007bf0:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007bf2:	f1a6 010e 	sub.w	r1, r6, #14
 8007bf6:	4643      	mov	r3, r8
 8007bf8:	2006      	movs	r0, #6
 8007bfa:	f7ff fd01 	bl	8007600 <si446x_spi>
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8007bfe:	4a3e      	ldr	r2, [pc, #248]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007c00:	ab0d      	add	r3, sp, #52	; 0x34
 8007c02:	f852 0f4c 	ldr.w	r0, [r2, #76]!
 8007c06:	8892      	ldrh	r2, [r2, #4]
 8007c08:	900d      	str	r0, [sp, #52]	; 0x34
 8007c0a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8007c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007c12:	462a      	mov	r2, r5
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8007c14:	80a1      	strh	r1, [r4, #4]
 8007c16:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007c18:	f1a6 010e 	sub.w	r1, r6, #14
 8007c1c:	4643      	mov	r3, r8
 8007c1e:	2006      	movs	r0, #6
 8007c20:	f7ff fcee 	bl	8007600 <si446x_spi>
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8007c24:	4a34      	ldr	r2, [pc, #208]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007c26:	ab15      	add	r3, sp, #84	; 0x54
 8007c28:	f852 0f54 	ldr.w	r0, [r2, #84]!
 8007c2c:	f1a6 0e0e 	sub.w	lr, r6, #14
 8007c30:	6851      	ldr	r1, [r2, #4]
 8007c32:	7a12      	ldrb	r2, [r2, #8]
 8007c34:	c303      	stmia	r3!, {r0, r1}
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	ab15      	add	r3, sp, #84	; 0x54
 8007c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c3e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8007c42:	4643      	mov	r3, r8
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8007c44:	f88e 2000 	strb.w	r2, [lr]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8007c48:	f1a6 010e 	sub.w	r1, r6, #14
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	2009      	movs	r0, #9
 8007c50:	f7ff fcd6 	bl	8007600 <si446x_spi>
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8007c54:	46ce      	mov	lr, r9
 8007c56:	4b28      	ldr	r3, [pc, #160]	; (8007cf8 <si446x_initialise+0x3f8>)
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8007c58:	f04f 093c 	mov.w	r9, #60	; 0x3c
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8007c5c:	f853 0f60 	ldr.w	r0, [r3, #96]!
 8007c60:	6859      	ldr	r1, [r3, #4]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8007c6e:	f1a6 010e 	sub.w	r1, r6, #14
 8007c72:	462a      	mov	r2, r5
 8007c74:	4643      	mov	r3, r8
 8007c76:	2009      	movs	r0, #9
 8007c78:	f7ff fcc2 	bl	8007600 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8007c7c:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007c7e:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 8007c82:	f853 0f70 	ldr.w	r0, [r3, #112]!
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8007c94:	f1a6 010e 	sub.w	r1, r6, #14
 8007c98:	462a      	mov	r2, r5
 8007c9a:	4643      	mov	r3, r8
 8007c9c:	2009      	movs	r0, #9
 8007c9e:	f7ff fcaf 	bl	8007600 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <si446x_initialise+0x3f8>)
 8007ca4:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
 8007ca8:	f853 0f80 	ldr.w	r0, [r3, #128]!
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8007cba:	f1a6 010e 	sub.w	r1, r6, #14
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4643      	mov	r3, r8
 8007cc2:	2009      	movs	r0, #9
 8007cc4:	f7ff fc9c 	bl	8007600 <si446x_spi>
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8007cc8:	9701      	str	r7, [sp, #4]
 8007cca:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8007cce:	f04f 0c12 	mov.w	ip, #18
 8007cd2:	7027      	strb	r7, [r4, #0]
 8007cd4:	2704      	movs	r7, #4
 8007cd6:	9701      	str	r7, [sp, #4]
 8007cd8:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8007cdc:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 8007ce0:	2020      	movs	r0, #32
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8007ce2:	f1a6 010e 	sub.w	r1, r6, #14
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4643      	mov	r3, r8
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8007cea:	7060      	strb	r0, [r4, #1]
 8007cec:	70a7      	strb	r7, [r4, #2]
 8007cee:	f884 b003 	strb.w	fp, [r4, #3]
 8007cf2:	e015      	b.n	8007d20 <si446x_initialise+0x420>
 8007cf4:	20001dd0 	.word	0x20001dd0
 8007cf8:	080093f0 	.word	0x080093f0
 8007cfc:	20001740 	.word	0x20001740
 8007d00:	20000cf4 	.word	0x20000cf4
 8007d04:	20000c81 	.word	0x20000c81
 8007d08:	4bc65d40 	.word	0x4bc65d40
 8007d0c:	43960000 	.word	0x43960000
 8007d10:	3fe00000 	.word	0x3fe00000
 8007d14:	453b8000 	.word	0x453b8000
 8007d18:	20000c80 	.word	0x20000c80
 8007d1c:	20001f30 	.word	0x20001f30
 8007d20:	f884 9004 	strb.w	r9, [r4, #4]
 8007d24:	f884 a005 	strb.w	sl, [r4, #5]
 8007d28:	f884 c006 	strb.w	ip, [r4, #6]
 8007d2c:	f884 e007 	strb.w	lr, [r4, #7]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8007d30:	2711      	movs	r7, #17
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8007d32:	2008      	movs	r0, #8
 8007d34:	f7ff fc64 	bl	8007600 <si446x_spi>
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8007d38:	9701      	str	r7, [sp, #4]
 8007d3a:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8007d3e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8007d42:	7027      	strb	r7, [r4, #0]
 8007d44:	2741      	movs	r7, #65	; 0x41
 8007d46:	9701      	str	r7, [sp, #4]
 8007d48:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8007d4c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007d50:	71a7      	strb	r7, [r4, #6]
 8007d52:	2742      	movs	r7, #66	; 0x42
 8007d54:	9701      	str	r7, [sp, #4]
 8007d56:	f89d 7004 	ldrb.w	r7, [sp, #4]
 8007d5a:	f04f 0c43 	mov.w	ip, #67	; 0x43
 8007d5e:	2024      	movs	r0, #36	; 0x24
 8007d60:	f884 a002 	strb.w	sl, [r4, #2]
 8007d64:	f884 9001 	strb.w	r9, [r4, #1]
 8007d68:	f04f 0b52 	mov.w	fp, #82	; 0x52
 8007d6c:	f04f 0a4f 	mov.w	sl, #79	; 0x4f
 8007d70:	f04f 0944 	mov.w	r9, #68	; 0x44
 8007d74:	f884 e005 	strb.w	lr, [r4, #5]
 8007d78:	f884 e008 	strb.w	lr, [r4, #8]
 8007d7c:	f884 e00b 	strb.w	lr, [r4, #11]
 8007d80:	f884 e00e 	strb.w	lr, [r4, #14]
 8007d84:	f884 c00c 	strb.w	ip, [r4, #12]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8007d88:	f1a6 010e 	sub.w	r1, r6, #14
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	4643      	mov	r3, r8
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8007d90:	7120      	strb	r0, [r4, #4]
 8007d92:	71e0      	strb	r0, [r4, #7]
 8007d94:	7267      	strb	r7, [r4, #9]
 8007d96:	70e5      	strb	r5, [r4, #3]
 8007d98:	f884 b00a 	strb.w	fp, [r4, #10]
 8007d9c:	f884 a00d 	strb.w	sl, [r4, #13]
 8007da0:	f884 900f 	strb.w	r9, [r4, #15]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8007da4:	2010      	movs	r0, #16
 8007da6:	f7ff fc2b 	bl	8007600 <si446x_spi>
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <si446x_initialise+0x524>)
 8007dac:	ab05      	add	r3, sp, #20
 8007dae:	f852 0f90 	ldr.w	r0, [r2, #144]!
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8007db2:	4f1c      	ldr	r7, [pc, #112]	; (8007e24 <si446x_initialise+0x524>)
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
 8007db4:	7912      	ldrb	r2, [r2, #4]
 8007db6:	9005      	str	r0, [sp, #20]
 8007db8:	f88d 2018 	strb.w	r2, [sp, #24]
 8007dbc:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007dc0:	462a      	mov	r2, r5
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
 8007dc2:	7121      	strb	r1, [r4, #4]
 8007dc4:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007dc6:	f1a6 010e 	sub.w	r1, r6, #14
 8007dca:	4643      	mov	r3, r8
 8007dcc:	2005      	movs	r0, #5
 8007dce:	f7ff fc17 	bl	8007600 <si446x_spi>
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8007dd2:	4a14      	ldr	r2, [pc, #80]	; (8007e24 <si446x_initialise+0x524>)
 8007dd4:	ab03      	add	r3, sp, #12
 8007dd6:	f852 0f98 	ldr.w	r0, [r2, #152]!
 8007dda:	7912      	ldrb	r2, [r2, #4]
 8007ddc:	9003      	str	r0, [sp, #12]
 8007dde:	f88d 2010 	strb.w	r2, [sp, #16]
 8007de2:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007de6:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8007de8:	7121      	strb	r1, [r4, #4]
 8007dea:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007dec:	f1a6 010e 	sub.w	r1, r6, #14
 8007df0:	4643      	mov	r3, r8
 8007df2:	2005      	movs	r0, #5
 8007df4:	f7ff fc04 	bl	8007600 <si446x_spi>
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8007df8:	f857 0fa0 	ldr.w	r0, [r7, #160]!
 8007dfc:	ab0b      	add	r3, sp, #44	; 0x2c
 8007dfe:	88ba      	ldrh	r2, [r7, #4]
 8007e00:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e02:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8007e06:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007e0a:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8007e0c:	80a1      	strh	r1, [r4, #4]
 8007e0e:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8007e10:	4643      	mov	r3, r8
 8007e12:	f1a6 010e 	sub.w	r1, r6, #14
 8007e16:	2006      	movs	r0, #6
 8007e18:	f7ff fbf2 	bl	8007600 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
	//Setup default channel config
	si446x_set_deviation_channel_bps(300, 3000, 200);
	si446x_set_modem();
}
 8007e1c:	b02d      	add	sp, #180	; 0xb4
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	bf00      	nop
 8007e24:	080093f0 	.word	0x080093f0
 8007e28:	f3af 8000 	nop.w
 8007e2c:	f3af 8000 	nop.w

08007e30 <RF_switch>:
}

/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
 8007e30:	b508      	push	{r3, lr}
	if(state)
 8007e32:	b970      	cbnz	r0, 8007e52 <RF_switch+0x22>
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <RF_switch+0x2c>)
 8007e36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007e3a:	611a      	str	r2, [r3, #16]
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
 8007e3c:	2046      	movs	r0, #70	; 0x46
 8007e3e:	f7ff f907 	bl	8007050 <chThdSleep>
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8007e42:	4907      	ldr	r1, [pc, #28]	; (8007e60 <RF_switch+0x30>)
	palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <RF_switch+0x2c>)
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8007e46:	2010      	movs	r0, #16
	palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8007e48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8007e4c:	6148      	str	r0, [r1, #20]
	palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8007e4e:	615a      	str	r2, [r3, #20]
 8007e50:	bd08      	pop	{r3, pc}
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <RF_switch+0x30>)
 8007e54:	2210      	movs	r2, #16
 8007e56:	611a      	str	r2, [r3, #16]
 8007e58:	e7f0      	b.n	8007e3c <RF_switch+0xc>
 8007e5a:	bf00      	nop
 8007e5c:	40010800 	.word	0x40010800
 8007e60:	40010c00 	.word	0x40010c00
 8007e64:	f3af 8000 	nop.w
 8007e68:	f3af 8000 	nop.w
 8007e6c:	f3af 8000 	nop.w

08007e70 <switch_output_callback.lto_priv.84>:
  GPIOA_NSEL,
  SPI_CR1_MSTR | SPI_CR1_BR_0
};

static void switch_output_callback() {
	RF_switch(0);
 8007e70:	2000      	movs	r0, #0
 8007e72:	f7ff bfdd 	b.w	8007e30 <RF_switch>
 8007e76:	bf00      	nop
 8007e78:	f3af 8000 	nop.w
 8007e7c:	f3af 8000 	nop.w

08007e80 <silabs_send_command>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8007e80:	2901      	cmp	r1, #1
 8007e82:	d12e      	bne.n	8007ee2 <silabs_send_command+0x62>
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4606      	mov	r6, r0
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
 8007e88:	6810      	ldr	r0, [r2, #0]
 8007e8a:	4615      	mov	r5, r2
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	f001 fa37 	bl	8009300 <strlen>
 8007e92:	2806      	cmp	r0, #6
 8007e94:	d005      	beq.n	8007ea2 <silabs_send_command+0x22>
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8007e96:	4630      	mov	r0, r6
	strcpy(Command_string,argv[0]);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
	RF_switch(0);
}
 8007e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8007e9c:	4914      	ldr	r1, [pc, #80]	; (8007ef0 <silabs_send_command+0x70>)
 8007e9e:	f7ff bac7 	b.w	8007430 <chprintf>
		return;
	}
	RF_switch(1);
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7ff ffc4 	bl	8007e30 <RF_switch>
	strcpy(Command_string,argv[0]);
 8007ea8:	6829      	ldr	r1, [r5, #0]
 8007eaa:	4812      	ldr	r0, [pc, #72]	; (8007ef4 <silabs_send_command+0x74>)
 8007eac:	f001 f9c8 	bl	8009240 <strcpy>
	Command=3;	
 8007eb0:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <silabs_send_command+0x78>)
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	2320      	movs	r3, #32
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8007ebc:	480f      	ldr	r0, [pc, #60]	; (8007efc <silabs_send_command+0x7c>)
 8007ebe:	6883      	ldr	r3, [r0, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dd11      	ble.n	8007ee8 <silabs_send_command+0x68>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8007ec4:	f7fe fec4 	bl	8006c50 <chSchRescheduleS>
 8007ec8:	2400      	movs	r4, #0
 8007eca:	f384 8811 	msr	BASEPRI, r4
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8007ece:	480c      	ldr	r0, [pc, #48]	; (8007f00 <silabs_send_command+0x80>)
 8007ed0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007ed4:	f7ff f894 	bl	8007000 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
	RF_switch(0);
 8007ed8:	4620      	mov	r0, r4
}
 8007eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	RF_switch(1);
	strcpy(Command_string,argv[0]);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
	RF_switch(0);
 8007ede:	f7ff bfa7 	b.w	8007e30 <RF_switch>
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8007ee2:	4908      	ldr	r1, [pc, #32]	; (8007f04 <silabs_send_command+0x84>)
 8007ee4:	f7ff baa4 	b.w	8007430 <chprintf>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8007ee8:	f7ff f9aa 	bl	8007240 <chSemSignalI>
 8007eec:	e7ea      	b.n	8007ec4 <silabs_send_command+0x44>
 8007eee:	bf00      	nop
 8007ef0:	0800a61c 	.word	0x0800a61c
 8007ef4:	20001ff0 	.word	0x20001ff0
 8007ef8:	20001fa8 	.word	0x20001fa8
 8007efc:	20001f88 	.word	0x20001f88
 8007f00:	20001fe4 	.word	0x20001fe4
 8007f04:	0800a5f8 	.word	0x0800a5f8
 8007f08:	f3af 8000 	nop.w
 8007f0c:	f3af 8000 	nop.w

08007f10 <spi_lld_serve_tx_interrupt.lto_priv.81>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8007f10:	070b      	lsls	r3, r1, #28
 8007f12:	d400      	bmi.n	8007f16 <spi_lld_serve_tx_interrupt.lto_priv.81+0x6>
 8007f14:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007f16:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8007f18:	4b01      	ldr	r3, [pc, #4]	; (8007f20 <spi_lld_serve_tx_interrupt.lto_priv.81+0x10>)
 8007f1a:	4a02      	ldr	r2, [pc, #8]	; (8007f24 <spi_lld_serve_tx_interrupt.lto_priv.81+0x14>)
 8007f1c:	629a      	str	r2, [r3, #40]	; 0x28
 8007f1e:	e7fe      	b.n	8007f1e <spi_lld_serve_tx_interrupt.lto_priv.81+0xe>
 8007f20:	20001de0 	.word	0x20001de0
 8007f24:	0800a720 	.word	0x0800a720
 8007f28:	f3af 8000 	nop.w
 8007f2c:	f3af 8000 	nop.w

08007f30 <Vector8C>:
 */
CH_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  CH_IRQ_PROLOGUE();

  CH_IRQ_EPILOGUE();
 8007f30:	f7ff ba1e 	b.w	8007370 <_port_irq_epilogue>
 8007f34:	f3af 8000 	nop.w
 8007f38:	f3af 8000 	nop.w
 8007f3c:	f3af 8000 	nop.w

08007f40 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 8007f44:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8007f48:	2700      	movs	r7, #0
 8007f4a:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007f4c:	2520      	movs	r5, #32
 8007f4e:	f385 8811 	msr	BASEPRI, r5
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8007f52:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007fec <VectorB0+0xac>
 8007f56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007f58:	f8b8 e026 	ldrh.w	lr, [r8, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8007f5c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007f60:	b289      	uxth	r1, r1
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8007f62:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8007f66:	891a      	ldrh	r2, [r3, #8]
 8007f68:	b280      	uxth	r0, r0
 8007f6a:	4290      	cmp	r0, r2
 8007f6c:	f108 061c 	add.w	r6, r8, #28
 8007f70:	d31a      	bcc.n	8007fa8 <VectorB0+0x68>
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8007f72:	6819      	ldr	r1, [r3, #0]
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
      break;

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8007f74:	4472      	add	r2, lr
 8007f76:	f8a8 2026 	strh.w	r2, [r8, #38]	; 0x26

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8007f7a:	68da      	ldr	r2, [r3, #12]
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8007f7c:	604e      	str	r6, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8007f7e:	f8c8 101c 	str.w	r1, [r8, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8007f82:	60df      	str	r7, [r3, #12]
 8007f84:	f387 8811 	msr	BASEPRI, r7

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8007f88:	6918      	ldr	r0, [r3, #16]
 8007f8a:	4790      	blx	r2
 8007f8c:	f385 8811 	msr	BASEPRI, r5
 8007f90:	6a61      	ldr	r1, [r4, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8007f92:	f8b8 e026 	ldrh.w	lr, [r8, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8007f96:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007f9a:	b289      	uxth	r1, r1
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8007f9c:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8007fa0:	891a      	ldrh	r2, [r3, #8]
 8007fa2:	b280      	uxth	r0, r0
 8007fa4:	4290      	cmp	r0, r2
 8007fa6:	d2e4      	bcs.n	8007f72 <VectorB0+0x32>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8007fa8:	42b3      	cmp	r3, r6
 8007faa:	d019      	beq.n	8007fe0 <VectorB0+0xa0>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8007fac:	2a01      	cmp	r2, #1
 8007fae:	d00b      	beq.n	8007fc8 <VectorB0+0x88>
      port_timer_set_alarm(now + vtp->vt_delta);
 8007fb0:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8007fb2:	b292      	uxth	r2, r2
 8007fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8007fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8007fc4:	f7ff b9d4 	b.w	8007370 <_port_irq_epilogue>
    else
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8007fc8:	3102      	adds	r1, #2
 8007fca:	b289      	uxth	r1, r1
 8007fcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fd0:	6359      	str	r1, [r3, #52]	; 0x34
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f383 8811 	msr	BASEPRI, r3
}
 8007fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8007fdc:	f7ff b9c8 	b.w	8007370 <_port_irq_epilogue>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8007fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60da      	str	r2, [r3, #12]
 8007fe8:	e7e7      	b.n	8007fba <VectorB0+0x7a>
 8007fea:	bf00      	nop
 8007fec:	20001de0 	.word	0x20001de0

08007ff0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8007ff0:	b508      	push	{r3, lr}
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <VectorB8+0x30>)
 8007ff4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
 8007ff6:	7818      	ldrb	r0, [r3, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8007ff8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
 8007ffa:	2804      	cmp	r0, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8007ffc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
 8007ffe:	d107      	bne.n	8008010 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 8008000:	2002      	movs	r0, #2
 8008002:	7018      	strb	r0, [r3, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8008004:	6011      	str	r1, [r2, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8008006:	6111      	str	r1, [r2, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8008008:	68d1      	ldr	r1, [r2, #12]
 800800a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800800e:	60d1      	str	r1, [r2, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	4803      	ldr	r0, [pc, #12]	; (8008020 <VectorB8+0x30>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
}
 8008018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 800801c:	f7ff b9a8 	b.w	8007370 <_port_irq_epilogue>
 8008020:	20001f6c 	.word	0x20001f6c
 8008024:	f3af 8000 	nop.w
 8008028:	f3af 8000 	nop.w
 800802c:	f3af 8000 	nop.w

08008030 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8008032:	4808      	ldr	r0, [pc, #32]	; (8008054 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8008034:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8008036:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8008038:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 800803c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 800803e:	060c      	lsls	r4, r1, #24
 8008040:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8008042:	b10a      	cbz	r2, 8008048 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8008044:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008046:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8008048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800804c:	f7ff b990 	b.w	8007370 <_port_irq_epilogue>
 8008050:	40020000 	.word	0x40020000
 8008054:	20001fac 	.word	0x20001fac
 8008058:	f3af 8000 	nop.w
 800805c:	f3af 8000 	nop.w

08008060 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8008062:	4808      	ldr	r0, [pc, #32]	; (8008084 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8008064:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8008066:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8008068:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 800806c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 800806e:	050c      	lsls	r4, r1, #20
 8008070:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8008072:	b10a      	cbz	r2, 8008078 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8008074:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008076:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8008078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800807c:	f7ff b978 	b.w	8007370 <_port_irq_epilogue>
 8008080:	40020000 	.word	0x40020000
 8008084:	20001fac 	.word	0x20001fac
 8008088:	f3af 8000 	nop.w
 800808c:	f3af 8000 	nop.w

08008090 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8008092:	4808      	ldr	r0, [pc, #32]	; (80080b4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8008094:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8008096:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8008098:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800809c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 800809e:	040c      	lsls	r4, r1, #16
 80080a0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80080a2:	b10a      	cbz	r2, 80080a8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80080a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80080a6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80080ac:	f7ff b960 	b.w	8007370 <_port_irq_epilogue>
 80080b0:	40020000 	.word	0x40020000
 80080b4:	20001fac 	.word	0x20001fac
 80080b8:	f3af 8000 	nop.w
 80080bc:	f3af 8000 	nop.w

080080c0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80080c2:	4808      	ldr	r0, [pc, #32]	; (80080e4 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80080c4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80080c6:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80080c8:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80080cc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 80080ce:	030c      	lsls	r4, r1, #12
 80080d0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 80080d2:	b10a      	cbz	r2, 80080d8 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80080d4:	69c0      	ldr	r0, [r0, #28]
 80080d6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80080d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80080dc:	f7ff b948 	b.w	8007370 <_port_irq_epilogue>
 80080e0:	40020000 	.word	0x40020000
 80080e4:	20001fac 	.word	0x20001fac
 80080e8:	f3af 8000 	nop.w
 80080ec:	f3af 8000 	nop.w

080080f0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 80080f2:	4808      	ldr	r0, [pc, #32]	; (8008114 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80080f4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 80080f6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80080f8:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 80080fc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 80080fe:	020c      	lsls	r4, r1, #8
 8008100:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8008102:	b10a      	cbz	r2, 8008108 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8008104:	6940      	ldr	r0, [r0, #20]
 8008106:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800810c:	f7ff b930 	b.w	8007370 <_port_irq_epilogue>
 8008110:	40020000 	.word	0x40020000
 8008114:	20001fac 	.word	0x20001fac
 8008118:	f3af 8000 	nop.w
 800811c:	f3af 8000 	nop.w

08008120 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8008122:	4808      	ldr	r0, [pc, #32]	; (8008144 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8008124:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8008126:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8008128:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800812c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 800812e:	010c      	lsls	r4, r1, #4
 8008130:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8008132:	b10a      	cbz	r2, 8008138 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8008134:	68c0      	ldr	r0, [r0, #12]
 8008136:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800813c:	f7ff b918 	b.w	8007370 <_port_irq_epilogue>
 8008140:	40020000 	.word	0x40020000
 8008144:	20001fac 	.word	0x20001fac
 8008148:	f3af 8000 	nop.w
 800814c:	f3af 8000 	nop.w

08008150 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8008150:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8008154:	4a07      	ldr	r2, [pc, #28]	; (8008174 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8008156:	6819      	ldr	r1, [r3, #0]
 8008158:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 800815c:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 800815e:	6813      	ldr	r3, [r2, #0]
 8008160:	b10b      	cbz	r3, 8008166 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8008162:	6850      	ldr	r0, [r2, #4]
 8008164:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8008166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800816a:	f7ff b901 	b.w	8007370 <_port_irq_epilogue>
 800816e:	bf00      	nop
 8008170:	40020000 	.word	0x40020000
 8008174:	20001fac 	.word	0x20001fac
 8008178:	f3af 8000 	nop.w
 800817c:	f3af 8000 	nop.w

08008180 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8008182:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8008184:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8008188:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 800818c:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8008190:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8008194:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8008196:	d018      	beq.n	80081ca <usb_packet_write_from_queue+0x4a>
 8008198:	4677      	mov	r7, lr
 800819a:	4664      	mov	r4, ip
 800819c:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800819e:	6988      	ldr	r0, [r1, #24]
 80081a0:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 80081a2:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80081a4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80081a6:	bf28      	it	cs
 80081a8:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80081aa:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80081ac:	1c5d      	adds	r5, r3, #1
 80081ae:	618d      	str	r5, [r1, #24]
 80081b0:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 80081b2:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80081b4:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80081b8:	bf24      	itt	cs
 80081ba:	68c8      	ldrcs	r0, [r1, #12]
 80081bc:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80081be:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 80081c0:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80081c4:	d1eb      	bne.n	800819e <usb_packet_write_from_queue+0x1e>
 80081c6:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 80081ca:	07d3      	lsls	r3, r2, #31
 80081cc:	d50b      	bpl.n	80081e6 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80081ce:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 80081d0:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 80081d6:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80081d8:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80081da:	bf28      	it	cs
 80081dc:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80081de:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80081e2:	bf28      	it	cs
 80081e4:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 80081e6:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80081ea:	b9cb      	cbnz	r3, 8008220 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ec:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80081f0:	2320      	movs	r3, #32
 80081f2:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 80081f6:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 80081f8:	4608      	mov	r0, r1
 80081fa:	441a      	add	r2, r3
 80081fc:	608a      	str	r2, [r1, #8]
 80081fe:	2100      	movs	r1, #0
 8008200:	f7ff f84e 	bl	80072a0 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008204:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FF) != 0);
 8008208:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context())
 800820c:	b11c      	cbz	r4, 8008216 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800820e:	2300      	movs	r3, #0
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    else {
      chSchRescheduleS();
 8008216:	f7fe fd1b 	bl	8006c50 <chSchRescheduleS>
 800821a:	f384 8811 	msr	BASEPRI, r4
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	688b      	ldr	r3, [r1, #8]
 8008222:	4608      	mov	r0, r1
 8008224:	441a      	add	r2, r3
 8008226:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8008228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800822c:	2100      	movs	r1, #0
 800822e:	f7ff b837 	b.w	80072a0 <chThdDequeueAllI>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
 8008238:	f3af 8000 	nop.w
 800823c:	f3af 8000 	nop.w

08008240 <spi_lld_serve_rx_interrupt.lto_priv.80>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8008242:	070b      	lsls	r3, r1, #28
 8008244:	d431      	bmi.n	80082aa <spi_lld_serve_rx_interrupt.lto_priv.80+0x6a>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8008246:	6a41      	ldr	r1, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 8008248:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800824a:	e891 00c0 	ldmia.w	r1, {r6, r7}
 800824e:	6835      	ldr	r5, [r6, #0]
 8008250:	230f      	movs	r3, #15
 8008252:	f025 050f 	bic.w	r5, r5, #15
 8008256:	6035      	str	r5, [r6, #0]
 8008258:	7a09      	ldrb	r1, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 800825a:	6815      	ldr	r5, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800825c:	fa03 f101 	lsl.w	r1, r3, r1
 8008260:	6039      	str	r1, [r7, #0]
  dmaStreamDisable(spip->dmarx);
 8008262:	6829      	ldr	r1, [r5, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8008264:	6846      	ldr	r6, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8008266:	f021 010f 	bic.w	r1, r1, #15
 800826a:	6029      	str	r1, [r5, #0]
 800826c:	7a15      	ldrb	r5, [r2, #8]
 800826e:	6851      	ldr	r1, [r2, #4]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8008270:	6832      	ldr	r2, [r6, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8008272:	40ab      	lsls	r3, r5
 8008274:	4604      	mov	r4, r0
 8008276:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8008278:	b1a2      	cbz	r2, 80082a4 <spi_lld_serve_rx_interrupt.lto_priv.80+0x64>
 800827a:	2304      	movs	r3, #4
 800827c:	7003      	strb	r3, [r0, #0]
 800827e:	4790      	blx	r2
 8008280:	7823      	ldrb	r3, [r4, #0]
 8008282:	2b04      	cmp	r3, #4
 8008284:	d00e      	beq.n	80082a4 <spi_lld_serve_rx_interrupt.lto_priv.80+0x64>
 8008286:	2320      	movs	r3, #32
 8008288:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	b12b      	cbz	r3, 800829c <spi_lld_serve_rx_interrupt.lto_priv.80+0x5c>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8008290:	2200      	movs	r2, #0
 8008292:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    chSchReadyI(tp);
 8008294:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8008296:	621a      	str	r2, [r3, #32]
    chSchReadyI(tp);
 8008298:	f7fe feea 	bl	8007070 <chSchReadyI>
 800829c:	2300      	movs	r3, #0
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a4:	2302      	movs	r3, #2
 80082a6:	7023      	strb	r3, [r4, #0]
 80082a8:	e7ed      	b.n	8008286 <spi_lld_serve_rx_interrupt.lto_priv.80+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082aa:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80082ac:	4b01      	ldr	r3, [pc, #4]	; (80082b4 <spi_lld_serve_rx_interrupt.lto_priv.80+0x74>)
 80082ae:	4a02      	ldr	r2, [pc, #8]	; (80082b8 <spi_lld_serve_rx_interrupt.lto_priv.80+0x78>)
 80082b0:	629a      	str	r2, [r3, #40]	; 0x28
 80082b2:	e7fe      	b.n	80082b2 <spi_lld_serve_rx_interrupt.lto_priv.80+0x72>
 80082b4:	20001de0 	.word	0x20001de0
 80082b8:	0800a720 	.word	0x0800a720
 80082bc:	f3af 8000 	nop.w

080082c0 <chprintf.lto_priv.91>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80082c0:	b40e      	push	{r1, r2, r3}
 80082c2:	b500      	push	{lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80082cc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80082ce:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80082d0:	f7f9 fafe 	bl	80018d0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80082d4:	b002      	add	sp, #8
 80082d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80082da:	b003      	add	sp, #12
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <cmd_info.lto_priv.103>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80082e0:	2900      	cmp	r1, #0
 80082e2:	dd03      	ble.n	80082ec <cmd_info.lto_priv.103+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80082e4:	4919      	ldr	r1, [pc, #100]	; (800834c <cmd_info.lto_priv.103+0x6c>)
 80082e6:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <cmd_info.lto_priv.103+0x70>)
 80082e8:	f7ff bfea 	b.w	80082c0 <chprintf.lto_priv.91>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80082ec:	b510      	push	{r4, lr}
 80082ee:	4604      	mov	r4, r0
 80082f0:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80082f2:	4918      	ldr	r1, [pc, #96]	; (8008354 <cmd_info.lto_priv.103+0x74>)
 80082f4:	4a18      	ldr	r2, [pc, #96]	; (8008358 <cmd_info.lto_priv.103+0x78>)
 80082f6:	f7ff ffe3 	bl	80082c0 <chprintf.lto_priv.91>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 80082fa:	4620      	mov	r0, r4
 80082fc:	4917      	ldr	r1, [pc, #92]	; (800835c <cmd_info.lto_priv.103+0x7c>)
 80082fe:	4a18      	ldr	r2, [pc, #96]	; (8008360 <cmd_info.lto_priv.103+0x80>)
 8008300:	f7ff ffde 	bl	80082c0 <chprintf.lto_priv.91>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8008304:	4620      	mov	r0, r4
 8008306:	4917      	ldr	r1, [pc, #92]	; (8008364 <cmd_info.lto_priv.103+0x84>)
 8008308:	4a17      	ldr	r2, [pc, #92]	; (8008368 <cmd_info.lto_priv.103+0x88>)
 800830a:	f7ff ffd9 	bl	80082c0 <chprintf.lto_priv.91>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 800830e:	4620      	mov	r0, r4
 8008310:	4916      	ldr	r1, [pc, #88]	; (800836c <cmd_info.lto_priv.103+0x8c>)
 8008312:	4a17      	ldr	r2, [pc, #92]	; (8008370 <cmd_info.lto_priv.103+0x90>)
 8008314:	f7ff ffd4 	bl	80082c0 <chprintf.lto_priv.91>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8008318:	4620      	mov	r0, r4
 800831a:	4916      	ldr	r1, [pc, #88]	; (8008374 <cmd_info.lto_priv.103+0x94>)
 800831c:	4a16      	ldr	r2, [pc, #88]	; (8008378 <cmd_info.lto_priv.103+0x98>)
 800831e:	f7ff ffcf 	bl	80082c0 <chprintf.lto_priv.91>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8008322:	4620      	mov	r0, r4
 8008324:	4915      	ldr	r1, [pc, #84]	; (800837c <cmd_info.lto_priv.103+0x9c>)
 8008326:	4a16      	ldr	r2, [pc, #88]	; (8008380 <cmd_info.lto_priv.103+0xa0>)
 8008328:	f7ff ffca 	bl	80082c0 <chprintf.lto_priv.91>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 800832c:	4620      	mov	r0, r4
 800832e:	4915      	ldr	r1, [pc, #84]	; (8008384 <cmd_info.lto_priv.103+0xa4>)
 8008330:	4a15      	ldr	r2, [pc, #84]	; (8008388 <cmd_info.lto_priv.103+0xa8>)
 8008332:	f7ff ffc5 	bl	80082c0 <chprintf.lto_priv.91>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8008336:	4b15      	ldr	r3, [pc, #84]	; (800838c <cmd_info.lto_priv.103+0xac>)
 8008338:	4620      	mov	r0, r4
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	4914      	ldr	r1, [pc, #80]	; (8008390 <cmd_info.lto_priv.103+0xb0>)
 800833e:	4a15      	ldr	r2, [pc, #84]	; (8008394 <cmd_info.lto_priv.103+0xb4>)
 8008340:	4b15      	ldr	r3, [pc, #84]	; (8008398 <cmd_info.lto_priv.103+0xb8>)
 8008342:	f7ff ffbd 	bl	80082c0 <chprintf.lto_priv.91>
#endif
#endif
}
 8008346:	b002      	add	sp, #8
 8008348:	bd10      	pop	{r4, pc}
 800834a:	bf00      	nop
 800834c:	080095a8 	.word	0x080095a8
 8008350:	08009774 	.word	0x08009774
 8008354:	0800a72c 	.word	0x0800a72c
 8008358:	08009f34 	.word	0x08009f34
 800835c:	0800a740 	.word	0x0800a740
 8008360:	08009f58 	.word	0x08009f58
 8008364:	0800a754 	.word	0x0800a754
 8008368:	08009fa0 	.word	0x08009fa0
 800836c:	0800a768 	.word	0x0800a768
 8008370:	08009fa8 	.word	0x08009fa8
 8008374:	0800a77c 	.word	0x0800a77c
 8008378:	08009fb4 	.word	0x08009fb4
 800837c:	0800a790 	.word	0x0800a790
 8008380:	08009fcc 	.word	0x08009fcc
 8008384:	0800a7a4 	.word	0x0800a7a4
 8008388:	08009ff8 	.word	0x08009ff8
 800838c:	0800a7e0 	.word	0x0800a7e0
 8008390:	0800a7b8 	.word	0x0800a7b8
 8008394:	0800a7d0 	.word	0x0800a7d0
 8008398:	0800a7dc 	.word	0x0800a7dc
 800839c:	f3af 8000 	nop.w

080083a0 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80083a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80083a4:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 80083a6:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80083a8:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 80083aa:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 80083ac:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 80083ae:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 80083b0:	7803      	ldrb	r3, [r0, #0]
 80083b2:	428a      	cmp	r2, r1
 80083b4:	bf28      	it	cs
 80083b6:	460a      	movcs	r2, r1
 80083b8:	bb03      	cbnz	r3, 80083fc <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80083ba:	4917      	ldr	r1, [pc, #92]	; (8008418 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 80083bc:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80083be:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80083c6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80083ca:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80083ce:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80083d2:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80083d4:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80083d6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80083da:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80083de:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80083e0:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80083e4:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 80083e6:	d007      	beq.n	80083f8 <usb_lld_prepare_transmit+0x58>
 80083e8:	3802      	subs	r0, #2
 80083ea:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80083ec:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80083f0:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80083f2:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80083f6:	d1f9      	bne.n	80083ec <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80083f8:	bc30      	pop	{r4, r5}
 80083fa:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <usb_lld_prepare_transmit+0x78>)
 80083fe:	68c1      	ldr	r1, [r0, #12]
 8008400:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008402:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8008406:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800840a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800840e:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8008410:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8008412:	f7ff beb5 	b.w	8008180 <usb_packet_write_from_queue>
 8008416:	bf00      	nop
 8008418:	40005c00 	.word	0x40005c00
 800841c:	f3af 8000 	nop.w

08008420 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8008420:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008424:	68c9      	ldr	r1, [r1, #12]
 8008426:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8008428:	6853      	ldr	r3, [r2, #4]
 800842a:	b133      	cbz	r3, 800843a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800842c:	8a49      	ldrh	r1, [r1, #18]
 800842e:	3b01      	subs	r3, #1
 8008430:	440b      	add	r3, r1
 8008432:	fbb3 f3f1 	udiv	r3, r3, r1
 8008436:	8213      	strh	r3, [r2, #16]
 8008438:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 800843a:	2301      	movs	r3, #1
 800843c:	8213      	strh	r3, [r2, #16]
 800843e:	4770      	bx	lr

08008440 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8008440:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008444:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8008446:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	f002 0203 	and.w	r2, r2, #3
 800844e:	3a01      	subs	r2, #1
 8008450:	2a02      	cmp	r2, #2
 8008452:	bf96      	itet	ls
 8008454:	4c2a      	ldrls	r4, [pc, #168]	; (8008500 <usb_lld_init_endpoint+0xc0>)
 8008456:	f44f 7400 	movhi.w	r4, #512	; 0x200
 800845a:	f834 4012 	ldrhls.w	r4, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	b10a      	cbz	r2, 8008466 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8008462:	f044 0420 	orr.w	r4, r4, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	b10a      	cbz	r2, 800846e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 800846a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800846e:	f647 0770 	movw	r7, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8008472:	ea44 0501 	orr.w	r5, r4, r1
 8008476:	008a      	lsls	r2, r1, #2
 8008478:	f425 45f0 	bic.w	r5, r5, #30720	; 0x7800
 800847c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008480:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8008484:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8008488:	6015      	str	r5, [r2, #0]
  EPR_TOGGLE(ep, epr);
 800848a:	6816      	ldr	r6, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800848c:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800848e:	4027      	ands	r7, r4
 8008490:	ea87 0406 	eor.w	r4, r7, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8008494:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8008496:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8008498:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800849c:	d826      	bhi.n	80084ec <usb_lld_init_endpoint+0xac>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800849e:	f044 0401 	orr.w	r4, r4, #1
 80084a2:	3401      	adds	r4, #1
 80084a4:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80084a8:	0264      	lsls	r4, r4, #9
 80084aa:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 80084ae:	4a15      	ldr	r2, [pc, #84]	; (8008504 <usb_lld_init_endpoint+0xc4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80084b0:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 80084b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 80084b4:	2700      	movs	r7, #0
 80084b6:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 80084ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 80084be:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80084c2:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 80084c4:	684b      	ldr	r3, [r1, #4]
 80084c6:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 80084c8:	68cb      	ldr	r3, [r1, #12]
 80084ca:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80084cc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 80084d0:	1993      	adds	r3, r2, r6
 80084d2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80084d6:	680b      	ldr	r3, [r1, #0]
 80084d8:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80084da:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 80084de:	441d      	add	r5, r3
 80084e0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80084e4:	688a      	ldr	r2, [r1, #8]
}
 80084e6:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80084e8:	608b      	str	r3, [r1, #8]
}
 80084ea:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80084ec:	f044 041f 	orr.w	r4, r4, #31
 80084f0:	3401      	adds	r4, #1
 80084f2:	1164      	asrs	r4, r4, #5
 80084f4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80084f8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80084fc:	b2a4      	uxth	r4, r4
 80084fe:	e7d6      	b.n	80084ae <usb_lld_init_endpoint+0x6e>
 8008500:	0800a820 	.word	0x0800a820
 8008504:	40005c00 	.word	0x40005c00
 8008508:	f3af 8000 	nop.w
 800850c:	f3af 8000 	nop.w

08008510 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8008510:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8008512:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8008514:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8008518:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 800851a:	4d0d      	ldr	r5, [pc, #52]	; (8008550 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 800851c:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8008520:	bf0c      	ite	eq
 8008522:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8008526:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 800852a:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800852e:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8008530:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8008532:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8008534:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8008536:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 800853a:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800853c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8008540:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 8008542:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8008546:	f7ff bf7b 	b.w	8008440 <usb_lld_init_endpoint>
 800854a:	bf00      	nop
 800854c:	40005c00 	.word	0x40005c00
 8008550:	0800a7f0 	.word	0x0800a7f0
 8008554:	f3af 8000 	nop.w
 8008558:	f3af 8000 	nop.w
 800855c:	f3af 8000 	nop.w

08008560 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8008564:	4b97      	ldr	r3, [pc, #604]	; (80087c4 <Vector90+0x264>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8008566:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8008568:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 800856a:	0563      	lsls	r3, r4, #21
 800856c:	f100 8198 	bmi.w	80088a0 <Vector90+0x340>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8008570:	0527      	lsls	r7, r4, #20
 8008572:	d515      	bpl.n	80085a0 <Vector90+0x40>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8008574:	f8df b250 	ldr.w	fp, [pc, #592]	; 80087c8 <Vector90+0x268>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8008578:	4a92      	ldr	r2, [pc, #584]	; (80087c4 <Vector90+0x264>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800857a:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 800857e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8008580:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8008582:	f043 0308 	orr.w	r3, r3, #8
 8008586:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8008588:	b115      	cbz	r5, 8008590 <Vector90+0x30>
 800858a:	4658      	mov	r0, fp
 800858c:	2103      	movs	r1, #3
 800858e:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8008590:	4b8c      	ldr	r3, [pc, #560]	; (80087c4 <Vector90+0x264>)
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8008592:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8008596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008598:	f042 0204 	orr.w	r2, r2, #4
 800859c:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 800859e:	6459      	str	r1, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 80085a0:	04e6      	lsls	r6, r4, #19
 80085a2:	d50c      	bpl.n	80085be <Vector90+0x5e>
    uint32_t fnr = STM32_USB->FNR;
 80085a4:	4b87      	ldr	r3, [pc, #540]	; (80087c4 <Vector90+0x264>)
 80085a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80085a8:	0415      	lsls	r5, r2, #16
 80085aa:	f140 8169 	bpl.w	8008880 <Vector90+0x320>
    }
#if STM32_USB_LOW_POWER_ON_SUSPEND
    else {
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
 80085ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085b0:	f042 0204 	orr.w	r2, r2, #4
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 80085b6:	4b83      	ldr	r3, [pc, #524]	; (80087c4 <Vector90+0x264>)
 80085b8:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80085bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 80085be:	05a0      	lsls	r0, r4, #22
 80085c0:	d50b      	bpl.n	80085da <Vector90+0x7a>
    _usb_isr_invoke_sof_cb(usbp);
 80085c2:	f8df b204 	ldr.w	fp, [pc, #516]	; 80087c8 <Vector90+0x268>
 80085c6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	b10b      	cbz	r3, 80085d2 <Vector90+0x72>
 80085ce:	4658      	mov	r0, fp
 80085d0:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 80085d2:	4b7c      	ldr	r3, [pc, #496]	; (80087c4 <Vector90+0x264>)
 80085d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80085d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80085da:	0421      	lsls	r1, r4, #16
 80085dc:	f140 80c7 	bpl.w	800876e <Vector90+0x20e>
 80085e0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80087c8 <Vector90+0x268>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80085e4:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80087c4 <Vector90+0x264>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 80085e8:	f004 040f 	and.w	r4, r4, #15
 80085ec:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80085f0:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 80085f4:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 80085f8:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 80085fc:	1ca6      	adds	r6, r4, #2
 80085fe:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8008602:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8008606:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8008608:	d05f      	beq.n	80086ca <Vector90+0x16a>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800860a:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 800860c:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800860e:	f423 43f1 	bic.w	r3, r3, #30848	; 0x7880
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8008618:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 800861c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8008620:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008624:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8008628:	4403      	add	r3, r0
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 800862e:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8008632:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8008636:	440b      	add	r3, r1
 8008638:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	f000 80b3 	beq.w	80087a8 <Vector90+0x248>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8008642:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8008644:	f89e c000 	ldrb.w	ip, [lr]
 8008648:	429a      	cmp	r2, r3
 800864a:	bf28      	it	cs
 800864c:	461a      	movcs	r2, r3
 800864e:	f1bc 0f00 	cmp.w	ip, #0
 8008652:	f040 8108 	bne.w	8008866 <Vector90+0x306>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8008656:	1c53      	adds	r3, r2, #1
 8008658:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 800865a:	f8de 300c 	ldr.w	r3, [lr, #12]
 800865e:	4419      	add	r1, r3
 8008660:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8008664:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 800866e:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8008672:	4470      	add	r0, lr
 8008674:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8008676:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800867a:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800867c:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8008680:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8008684:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8008688:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800868c:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 800868e:	d008      	beq.n	80086a2 <Vector90+0x142>
 8008690:	3902      	subs	r1, #2
 8008692:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8008696:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800869a:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800869c:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80086a0:	d1f9      	bne.n	8008696 <Vector90+0x136>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80086a2:	2320      	movs	r3, #32
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80086ac:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80086b0:	f8d8 3000 	ldr.w	r3, [r8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80086ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086be:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80086c2:	f8c8 3000 	str.w	r3, [r8]
 80086c6:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 80086ca:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80086ce:	d049      	beq.n	8008764 <Vector90+0x204>
      EPR_CLEAR_CTR_RX(ep);
 80086d0:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80086d2:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 80086d6:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80086da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086de:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80086e0:	d15a      	bne.n	8008798 <Vector90+0x238>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80086e2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80086e6:	69b9      	ldr	r1, [r7, #24]
 80086e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80086ec:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80086f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f4:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	4610      	mov	r0, r2
 80086fa:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80086fc:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80086fe:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8008702:	2a00      	cmp	r2, #0
 8008704:	d162      	bne.n	80087cc <Vector90+0x26c>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8008706:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 8008708:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 800870c:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8008710:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 8008714:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8008716:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 800871a:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800871c:	d009      	beq.n	8008732 <Vector90+0x1d2>
 800871e:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8008720:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8008724:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8008726:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800872a:	d1f9      	bne.n	8008720 <Vector90+0x1c0>
 800872c:	4671      	mov	r1, lr
 800872e:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8008732:	4440      	add	r0, r8
 8008734:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8008736:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8008738:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800873a:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800873c:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 800873e:	3801      	subs	r0, #1
 8008740:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8008742:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8008744:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8008748:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800874a:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800874c:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800874e:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8008750:	d312      	bcc.n	8008778 <Vector90+0x218>
 8008752:	b188      	cbz	r0, 8008778 <Vector90+0x218>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800875a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008762:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8008764:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8008768:	0423      	lsls	r3, r4, #16
 800876a:	f53f af3d 	bmi.w	80085e8 <Vector90+0x88>
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
}
 800876e:	b005      	add	sp, #20
 8008770:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
 8008774:	f7fe bdfc 	b.w	8007370 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8008778:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800877c:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8008780:	2101      	movs	r1, #1
 8008782:	40a1      	lsls	r1, r4
 8008784:	6872      	ldr	r2, [r6, #4]
 8008786:	ea23 0301 	bic.w	r3, r3, r1
 800878a:	68d2      	ldr	r2, [r2, #12]
 800878c:	f8ab 300a 	strh.w	r3, [fp, #10]
 8008790:	4621      	mov	r1, r4
 8008792:	480d      	ldr	r0, [pc, #52]	; (80087c8 <Vector90+0x268>)
 8008794:	4790      	blx	r2
 8008796:	e7e5      	b.n	8008764 <Vector90+0x204>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8008798:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 800879c:	6873      	ldr	r3, [r6, #4]
 800879e:	4621      	mov	r1, r4
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4809      	ldr	r0, [pc, #36]	; (80087c8 <Vector90+0x268>)
 80087a4:	4798      	blx	r3
 80087a6:	e7dd      	b.n	8008764 <Vector90+0x204>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <Vector90+0x268>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	891b      	ldrh	r3, [r3, #8]
 80087ae:	40a2      	lsls	r2, r4
 80087b0:	ea23 0302 	bic.w	r3, r3, r2
 80087b4:	4a04      	ldr	r2, [pc, #16]	; (80087c8 <Vector90+0x268>)
 80087b6:	4621      	mov	r1, r4
 80087b8:	8113      	strh	r3, [r2, #8]
 80087ba:	4610      	mov	r0, r2
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4798      	blx	r3
 80087c0:	e783      	b.n	80086ca <Vector90+0x16a>
 80087c2:	bf00      	nop
 80087c4:	40005c00 	.word	0x40005c00
 80087c8:	20000e48 	.word	0x20000e48
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80087cc:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80087ce:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80087d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80087d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80087da:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 80087de:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80087e0:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80087e2:	9203      	str	r2, [sp, #12]
 80087e4:	d021      	beq.n	800882a <Vector90+0x2ca>
 80087e6:	4610      	mov	r0, r2
 80087e8:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 80087ea:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 80087ec:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 80087f0:	f103 0901 	add.w	r9, r3, #1
 80087f4:	f8c1 9014 	str.w	r9, [r1, #20]
 80087f8:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 80087fa:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80087fc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 8008800:	694a      	ldr	r2, [r1, #20]
 8008802:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8008804:	bf28      	it	cs
 8008806:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8008808:	1c53      	adds	r3, r2, #1
 800880a:	614b      	str	r3, [r1, #20]
 800880c:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 8008810:	690b      	ldr	r3, [r1, #16]
 8008812:	694a      	ldr	r2, [r1, #20]
 8008814:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8008816:	bf24      	itt	cs
 8008818:	68cb      	ldrcs	r3, [r1, #12]
 800881a:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 800881c:	3801      	subs	r0, #1
 800881e:	d1e4      	bne.n	80087ea <Vector90+0x28a>
 8008820:	9b02      	ldr	r3, [sp, #8]
 8008822:	9a03      	ldr	r2, [sp, #12]
 8008824:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008828:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	07da      	lsls	r2, r3, #31
 800882e:	d50b      	bpl.n	8008848 <Vector90+0x2e8>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8008830:	9a02      	ldr	r2, [sp, #8]
 8008832:	694b      	ldr	r3, [r1, #20]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	1c58      	adds	r0, r3, #1
 8008838:	6148      	str	r0, [r1, #20]
 800883a:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 800883c:	690b      	ldr	r3, [r1, #16]
 800883e:	694a      	ldr	r2, [r1, #20]
 8008840:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8008842:	bf24      	itt	cs
 8008844:	68cb      	ldrcs	r3, [r1, #12]
 8008846:	614b      	strcs	r3, [r1, #20]
 8008848:	2320      	movs	r3, #32
 800884a:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 800884e:	688b      	ldr	r3, [r1, #8]
 8008850:	4608      	mov	r0, r1
 8008852:	4443      	add	r3, r8
 8008854:	608b      	str	r3, [r1, #8]
 8008856:	2100      	movs	r1, #0
 8008858:	f7fe fd22 	bl	80072a0 <chThdDequeueAllI>
 800885c:	2300      	movs	r3, #0
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	69b9      	ldr	r1, [r7, #24]
 8008864:	e767      	b.n	8008736 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8008866:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 800886a:	f8de 100c 	ldr.w	r1, [lr, #12]
 800886e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008872:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8008876:	4418      	add	r0, r3
 8008878:	0040      	lsls	r0, r0, #1
 800887a:	f7ff fc81 	bl	8008180 <usb_packet_write_from_queue>
 800887e:	e710      	b.n	80086a2 <Vector90+0x142>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008880:	f8df b074 	ldr.w	fp, [pc, #116]	; 80088f8 <Vector90+0x398>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8008884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008886:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800888a:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800888e:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8008890:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8008892:	2d00      	cmp	r5, #0
 8008894:	f43f ae8f 	beq.w	80085b6 <Vector90+0x56>
 8008898:	4658      	mov	r0, fp
 800889a:	2104      	movs	r1, #4
 800889c:	47a8      	blx	r5
 800889e:	e68a      	b.n	80085b6 <Vector90+0x56>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80088a0:	f8df b054 	ldr.w	fp, [pc, #84]	; 80088f8 <Vector90+0x398>
  usbp->status        = 0;
 80088a4:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80088a6:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80088a8:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 80088aa:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 80088ae:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 80088b2:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 80088b6:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 80088ba:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80088be:	f88b 2000 	strb.w	r2, [fp]
 80088c2:	f10b 0308 	add.w	r3, fp, #8
 80088c6:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80088ca:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 80088ce:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 80088d0:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 80088d4:	d1f9      	bne.n	80088ca <Vector90+0x36a>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80088d6:	4808      	ldr	r0, [pc, #32]	; (80088f8 <Vector90+0x398>)
  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80088d8:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80088dc:	f7ff fe18 	bl	8008510 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80088e0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	b113      	cbz	r3, 80088ee <Vector90+0x38e>
 80088e8:	4629      	mov	r1, r5
 80088ea:	4803      	ldr	r0, [pc, #12]	; (80088f8 <Vector90+0x398>)
 80088ec:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 80088ee:	4b03      	ldr	r3, [pc, #12]	; (80088fc <Vector90+0x39c>)
 80088f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088f4:	645a      	str	r2, [r3, #68]	; 0x44
 80088f6:	e63b      	b.n	8008570 <Vector90+0x10>
 80088f8:	20000e48 	.word	0x20000e48
 80088fc:	40005c00 	.word	0x40005c00

08008900 <dmaStreamAllocate.constprop.12>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8008900:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8008902:	4d21      	ldr	r5, [pc, #132]	; (8008988 <dmaStreamAllocate.constprop.12+0x88>)
 8008904:	7a44      	ldrb	r4, [r0, #9]
 8008906:	2301      	movs	r3, #1
 8008908:	682a      	ldr	r2, [r5, #0]
 800890a:	fa03 f604 	lsl.w	r6, r3, r4
 800890e:	4216      	tst	r6, r2
 8008910:	d135      	bne.n	800897e <dmaStreamAllocate.constprop.12+0x7e>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8008912:	4b1e      	ldr	r3, [pc, #120]	; (800898c <dmaStreamAllocate.constprop.12+0x8c>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8008914:	4332      	orrs	r2, r6
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8008916:	4f1e      	ldr	r7, [pc, #120]	; (8008990 <dmaStreamAllocate.constprop.12+0x90>)
 8008918:	eb03 06c4 	add.w	r6, r3, r4, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800891c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8008920:	0653      	lsls	r3, r2, #25
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8008922:	602a      	str	r2, [r5, #0]
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8008924:	6077      	str	r7, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8008926:	d004      	beq.n	8008932 <dmaStreamAllocate.constprop.12+0x32>
    rccEnableDMA1(FALSE);
 8008928:	4a1a      	ldr	r2, [pc, #104]	; (8008994 <dmaStreamAllocate.constprop.12+0x94>)
 800892a:	6953      	ldr	r3, [r2, #20]
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6153      	str	r3, [r2, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8008932:	6802      	ldr	r2, [r0, #0]
 8008934:	6846      	ldr	r6, [r0, #4]
 8008936:	6815      	ldr	r5, [r2, #0]
 8008938:	240f      	movs	r4, #15
 800893a:	f025 050f 	bic.w	r5, r5, #15
 800893e:	6015      	str	r5, [r2, #0]
 8008940:	7a05      	ldrb	r5, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8008942:	2300      	movs	r3, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8008944:	40ac      	lsls	r4, r5
 8008946:	6034      	str	r4, [r6, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8008948:	6013      	str	r3, [r2, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800894a:	b1d1      	cbz	r1, 8008982 <dmaStreamAllocate.constprop.12+0x82>
    nvicEnableVector(dmastp->vector, priority);
 800894c:	7a81      	ldrb	r1, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800894e:	2001      	movs	r0, #1
 8008950:	094a      	lsrs	r2, r1, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8008952:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8008956:	f001 011f 	and.w	r1, r1, #31
 800895a:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800895e:	4618      	mov	r0, r3
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8008966:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800896a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800896e:	25a0      	movs	r5, #160	; 0xa0
 8008970:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8008974:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8008978:	6011      	str	r1, [r2, #0]

  return FALSE;
}
 800897a:	bcf0      	pop	{r4, r5, r6, r7}
 800897c:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 800897e:	4618      	mov	r0, r3
 8008980:	e7fb      	b.n	800897a <dmaStreamAllocate.constprop.12+0x7a>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8008982:	4608      	mov	r0, r1
 8008984:	e7f9      	b.n	800897a <dmaStreamAllocate.constprop.12+0x7a>
 8008986:	bf00      	nop
 8008988:	20001ff8 	.word	0x20001ff8
 800898c:	20001fac 	.word	0x20001fac
 8008990:	20001f3c 	.word	0x20001f3c
 8008994:	40021000 	.word	0x40021000
 8008998:	f3af 8000 	nop.w
 800899c:	f3af 8000 	nop.w

080089a0 <SI_Thread.lto_priv.85>:

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 80089a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  (void)arg;
  chRegSetThreadName("si4432");
 80089a4:	4b90      	ldr	r3, [pc, #576]	; (8008be8 <SI_Thread.lto_priv.85+0x248>)
 80089a6:	4991      	ldr	r1, [pc, #580]	; (8008bec <SI_Thread.lto_priv.85+0x24c>)
 80089a8:	699a      	ldr	r2, [r3, #24]

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 80089aa:	b085      	sub	sp, #20
 80089ac:	2320      	movs	r3, #32

  (void)arg;
  chRegSetThreadName("si4432");
 80089ae:	6191      	str	r1, [r2, #24]
 80089b0:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 80089b4:	4c8e      	ldr	r4, [pc, #568]	; (8008bf0 <SI_Thread.lto_priv.85+0x250>)
 80089b6:	4b8f      	ldr	r3, [pc, #572]	; (8008bf4 <SI_Thread.lto_priv.85+0x254>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 80089b8:	7822      	ldrb	r2, [r4, #0]
 80089ba:	6063      	str	r3, [r4, #4]
 80089bc:	2a01      	cmp	r2, #1
 80089be:	f000 80fc 	beq.w	8008bba <SI_Thread.lto_priv.85+0x21a>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80089c2:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80089c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80089c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80089c8:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80089ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80089ce:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80089d2:	bf48      	it	mi
 80089d4:	f443 63a0 	orrmi.w	r3, r3, #1280	; 0x500
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80089d8:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80089da:	bf48      	it	mi
 80089dc:	f442 62a0 	orrmi.w	r2, r2, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80089e0:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80089e2:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80089e4:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80089e8:	2500      	movs	r5, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80089ea:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80089ec:	801d      	strh	r5, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80089ee:	8019      	strh	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80089f0:	809a      	strh	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80089f2:	881a      	ldrh	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 80089f4:	2102      	movs	r1, #2
 80089f6:	b292      	uxth	r2, r2
 80089f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089fc:	801a      	strh	r2, [r3, #0]
 80089fe:	7021      	strb	r1, [r4, #0]
 8008a00:	f385 8811 	msr	BASEPRI, r5
  /* Configuration goes here - setup the PLL carrier, TX modem settings and the Packet handler Tx functionality*/
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	si446x_initialise();
 8008a04:	f7fe ff7c 	bl	8007900 <si446x_initialise>
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8008a0e:	f8df a224 	ldr.w	sl, [pc, #548]	; 8008c34 <SI_Thread.lto_priv.85+0x294>
 8008a12:	4979      	ldr	r1, [pc, #484]	; (8008bf8 <SI_Thread.lto_priv.85+0x258>)
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8008a14:	f89a 3000 	ldrb.w	r3, [sl]
 8008a18:	f8ca 1004 	str.w	r1, [sl, #4]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	f000 80b3 	beq.w	8008b88 <SI_Thread.lto_priv.85+0x1e8>
 8008a22:	f8da 3008 	ldr.w	r3, [sl, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8008a26:	680a      	ldr	r2, [r1, #0]
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8008a28:	68c8      	ldr	r0, [r1, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8008a2a:	fbb3 f3f2 	udiv	r3, r3, r2
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
 8008a2e:	688d      	ldr	r5, [r1, #8]
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8008a30:	f8da 200c 	ldr.w	r2, [sl, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8008a34:	3b01      	subs	r3, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8008a36:	2100      	movs	r1, #0
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8008a38:	b29b      	uxth	r3, r3
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8008a3a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 8008a3e:	2402      	movs	r4, #2
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8008a40:	6011      	str	r1, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8008a42:	6055      	str	r5, [r2, #4]
 8008a44:	f88a 4000 	strb.w	r4, [sl]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8008a48:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 8008a4a:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8008a4c:	60d0      	str	r0, [r2, #12]
 8008a4e:	f381 8811 	msr	BASEPRI, r1
 8008a52:	4f6a      	ldr	r7, [pc, #424]	; (8008bfc <SI_Thread.lto_priv.85+0x25c>)
 8008a54:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8008c10 <SI_Thread.lto_priv.85+0x270>
	gptStart(&GPTD4, &gpt4cfg);
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 8008a58:	463d      	mov	r5, r7
 8008a5a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8008c38 <SI_Thread.lto_priv.85+0x298>
 8008a5e:	4e68      	ldr	r6, [pc, #416]	; (8008c00 <SI_Thread.lto_priv.85+0x260>)
 8008a60:	f10d 0908 	add.w	r9, sp, #8
 8008a64:	e004      	b.n	8008a70 <SI_Thread.lto_priv.85+0xd0>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008a66:	f7fe f8f3 	bl	8006c50 <chSchRescheduleS>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8008a70:	4864      	ldr	r0, [pc, #400]	; (8008c04 <SI_Thread.lto_priv.85+0x264>)
 8008a72:	21c8      	movs	r1, #200	; 0xc8
 8008a74:	f7fe fac4 	bl	8007000 <chSemWaitTimeout>
	*/
	spiStart(&SPID1, &spicfg);
	si446x_initialise();
	gptStart(&GPTD4, &gpt4cfg);
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
 8008a78:	4604      	mov	r4, r0
 8008a7a:	b968      	cbnz	r0, 8008a98 <SI_Thread.lto_priv.85+0xf8>
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 8008a7c:	783b      	ldrb	r3, [r7, #0]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d014      	beq.n	8008aac <SI_Thread.lto_priv.85+0x10c>
			Active_Frequency+=50;
		else if(Command==2)
 8008a82:	782b      	ldrb	r3, [r5, #0]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d017      	beq.n	8008ab8 <SI_Thread.lto_priv.85+0x118>
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
 8008a88:	782b      	ldrb	r3, [r5, #0]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d028      	beq.n	8008ae0 <SI_Thread.lto_priv.85+0x140>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 8008a8e:	783b      	ldrb	r3, [r7, #0]
 8008a90:	b113      	cbz	r3, 8008a98 <SI_Thread.lto_priv.85+0xf8>
 8008a92:	782b      	ldrb	r3, [r5, #0]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d915      	bls.n	8008ac4 <SI_Thread.lto_priv.85+0x124>
 8008a98:	2320      	movs	r3, #32
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008a9e:	68b3      	ldr	r3, [r6, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dce0      	bgt.n	8008a66 <SI_Thread.lto_priv.85+0xc6>
    chSemSignalI(&bsp->bs_sem);
 8008aa4:	4856      	ldr	r0, [pc, #344]	; (8008c00 <SI_Thread.lto_priv.85+0x260>)
 8008aa6:	f7fe fbcb 	bl	8007240 <chSemSignalI>
 8008aaa:	e7dc      	b.n	8008a66 <SI_Thread.lto_priv.85+0xc6>
	gptStart(&GPTD4, &gpt4cfg);
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
			Active_Frequency+=50;
 8008aac:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab0:	3332      	adds	r3, #50	; 0x32
 8008ab2:	f8c8 3000 	str.w	r3, [r8]
 8008ab6:	e7ea      	b.n	8008a8e <SI_Thread.lto_priv.85+0xee>
		else if(Command==2)
			Active_Frequency-=50;
 8008ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8008abc:	3b32      	subs	r3, #50	; 0x32
 8008abe:	f8c8 3000 	str.w	r3, [r8]
 8008ac2:	e7e4      	b.n	8008a8e <SI_Thread.lto_priv.85+0xee>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 8008ac4:	2300      	movs	r3, #0
			si446x_failure|=si446x_set_frequency(Active_Frequency);
 8008ac6:	f8d8 0000 	ldr.w	r0, [r8]
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	f7fe fe28 	bl	8007720 <si446x_set_frequency>
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	4318      	orrs	r0, r3
 8008ad4:	b2c3      	uxtb	r3, r0
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0de      	beq.n	8008a98 <SI_Thread.lto_priv.85+0xf8>
			si446x_initialise();
 8008ada:	f7fe ff11 	bl	8007900 <si446x_initialise>
 8008ade:	e7db      	b.n	8008a98 <SI_Thread.lto_priv.85+0xf8>
		if(Command==1)
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f7ff f9a5 	bl	8007e30 <RF_switch>
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8008ae6:	2366      	movs	r3, #102	; 0x66
			strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
 8008ae8:	4947      	ldr	r1, [pc, #284]	; (8008c08 <SI_Thread.lto_priv.85+0x268>)
 8008aea:	4848      	ldr	r0, [pc, #288]	; (8008c0c <SI_Thread.lto_priv.85+0x26c>)
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8008aec:	f88b 3000 	strb.w	r3, [fp]
			strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
 8008af0:	f000 fba6 	bl	8009240 <strcpy>
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008af4:	4844      	ldr	r0, [pc, #272]	; (8008c08 <SI_Thread.lto_priv.85+0x268>)
 8008af6:	f000 fc03 	bl	8009300 <strlen>
 8008afa:	3001      	adds	r0, #1
 8008afc:	4622      	mov	r2, r4
 8008afe:	4944      	ldr	r1, [pc, #272]	; (8008c10 <SI_Thread.lto_priv.85+0x270>)
 8008b00:	4b44      	ldr	r3, [pc, #272]	; (8008c14 <SI_Thread.lto_priv.85+0x274>)
 8008b02:	b2c0      	uxtb	r0, r0
 8008b04:	f7fe fd7c 	bl	8007600 <si446x_spi>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008b08:	4b43      	ldr	r3, [pc, #268]	; (8008c18 <SI_Thread.lto_priv.85+0x278>)
 8008b0a:	4a43      	ldr	r2, [pc, #268]	; (8008c18 <SI_Thread.lto_priv.85+0x278>)
 8008b0c:	791b      	ldrb	r3, [r3, #4]
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008b0e:	9001      	str	r0, [sp, #4]
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008b10:	6810      	ldr	r0, [r2, #0]
 8008b12:	f889 3004 	strb.w	r3, [r9, #4]
 8008b16:	4b41      	ldr	r3, [pc, #260]	; (8008c1c <SI_Thread.lto_priv.85+0x27c>)
 8008b18:	f8c9 0000 	str.w	r0, [r9]
 8008b1c:	e899 0003 	ldmia.w	r9, {r0, r1}
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008b20:	4622      	mov	r2, r4
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008b22:	f8cb 0000 	str.w	r0, [fp]
 8008b26:	7019      	strb	r1, [r3, #0]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008b28:	2005      	movs	r0, #5
 8008b2a:	1f19      	subs	r1, r3, #4
 8008b2c:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <SI_Thread.lto_priv.85+0x274>)
 8008b2e:	f7fe fd67 	bl	8007600 <si446x_spi>
 8008b32:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	ea40 000c 	orr.w	r0, r0, ip
 8008b3c:	b2c3      	uxtb	r3, r0
 8008b3e:	f382 8811 	msr	BASEPRI, r2
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8008b42:	f240 3e83 	movw	lr, #899	; 0x383

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8008b46:	f8da 1004 	ldr.w	r1, [sl, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8008b4a:	f8da 200c 	ldr.w	r2, [sl, #12]

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8008b4e:	6849      	ldr	r1, [r1, #4]
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8008b50:	f04f 0c04 	mov.w	ip, #4
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 8008b54:	2001      	movs	r0, #1
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8008b56:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
 8008b5a:	f88a c000 	strb.w	ip, [sl]
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 8008b5e:	6150      	str	r0, [r2, #20]
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 8008b60:	6254      	str	r4, [r2, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8008b62:	6114      	str	r4, [r2, #16]
  if (NULL != gptp->config->callback)
 8008b64:	b111      	cbz	r1, 8008b6c <SI_Thread.lto_priv.85+0x1cc>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8008b66:	68d1      	ldr	r1, [r2, #12]
 8008b68:	4301      	orrs	r1, r0
 8008b6a:	60d1      	str	r1, [r2, #12]
  gptp->tim->CR1   = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8008b6c:	2105      	movs	r1, #5
 8008b6e:	6011      	str	r1, [r2, #0]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f382 8811 	msr	BASEPRI, r2
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 8008b76:	783a      	ldrb	r2, [r7, #0]
 8008b78:	2a00      	cmp	r2, #0
 8008b7a:	d0ac      	beq.n	8008ad6 <SI_Thread.lto_priv.85+0x136>
 8008b7c:	782a      	ldrb	r2, [r5, #0]
 8008b7e:	2a02      	cmp	r2, #2
 8008b80:	d9a1      	bls.n	8008ac6 <SI_Thread.lto_priv.85+0x126>
			si446x_failure|=si446x_set_frequency(Active_Frequency);
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d088      	beq.n	8008a98 <SI_Thread.lto_priv.85+0xf8>
 8008b86:	e7a8      	b.n	8008ada <SI_Thread.lto_priv.85+0x13a>
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 8008b88:	4a25      	ldr	r2, [pc, #148]	; (8008c20 <SI_Thread.lto_priv.85+0x280>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8008b8a:	4826      	ldr	r0, [pc, #152]	; (8008c24 <SI_Thread.lto_priv.85+0x284>)
 8008b8c:	69d4      	ldr	r4, [r2, #28]
      rccResetTIM4();
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8008b8e:	4f26      	ldr	r7, [pc, #152]	; (8008c28 <SI_Thread.lto_priv.85+0x288>)
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 8008b90:	f044 0404 	orr.w	r4, r4, #4
 8008b94:	61d4      	str	r4, [r2, #28]
      rccResetTIM4();
 8008b96:	6914      	ldr	r4, [r2, #16]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8008b98:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8008b9c:	f04f 0e70 	mov.w	lr, #112	; 0x70
 8008ba0:	f044 0404 	orr.w	r4, r4, #4
 8008ba4:	6114      	str	r4, [r2, #16]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	f8ca 7008 	str.w	r7, [sl, #8]
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 8008bac:	6115      	str	r5, [r2, #16]
 8008bae:	f880 e31e 	strb.w	lr, [r0, #798]	; 0x31e
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8008bb2:	f8c0 6180 	str.w	r6, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8008bb6:	6006      	str	r6, [r0, #0]
 8008bb8:	e735      	b.n	8008a26 <SI_Thread.lto_priv.85+0x86>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8008bba:	491c      	ldr	r1, [pc, #112]	; (8008c2c <SI_Thread.lto_priv.85+0x28c>)
 8008bbc:	6a20      	ldr	r0, [r4, #32]
 8008bbe:	f7ff fe9f 	bl	8008900 <dmaStreamAllocate.constprop.12>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8008bc2:	491b      	ldr	r1, [pc, #108]	; (8008c30 <SI_Thread.lto_priv.85+0x290>)
 8008bc4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bc6:	f7ff fe9b 	bl	8008900 <dmaStreamAllocate.constprop.12>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008bca:	4915      	ldr	r1, [pc, #84]	; (8008c20 <SI_Thread.lto_priv.85+0x280>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008bcc:	6a25      	ldr	r5, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008bce:	6a60      	ldr	r0, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008bd0:	698b      	ldr	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008bd2:	69e2      	ldr	r2, [r4, #28]
 8008bd4:	682d      	ldr	r5, [r5, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008bd6:	6800      	ldr	r0, [r0, #0]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008bdc:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008bde:	618b      	str	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008be0:	60aa      	str	r2, [r5, #8]
 8008be2:	6863      	ldr	r3, [r4, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008be4:	6082      	str	r2, [r0, #8]
 8008be6:	e6ec      	b.n	80089c2 <SI_Thread.lto_priv.85+0x22>
 8008be8:	20001de0 	.word	0x20001de0
 8008bec:	0800a830 	.word	0x0800a830
 8008bf0:	20001f3c 	.word	0x20001f3c
 8008bf4:	0800a840 	.word	0x0800a840
 8008bf8:	20000cb4 	.word	0x20000cb4
 8008bfc:	20001fa8 	.word	0x20001fa8
 8008c00:	20001fe4 	.word	0x20001fe4
 8008c04:	20001f88 	.word	0x20001f88
 8008c08:	20001ff0 	.word	0x20001ff0
 8008c0c:	20001dd1 	.word	0x20001dd1
 8008c10:	20001dd0 	.word	0x20001dd0
 8008c14:	20001f30 	.word	0x20001f30
 8008c18:	080094a0 	.word	0x080094a0
 8008c1c:	20001dd4 	.word	0x20001dd4
 8008c20:	40021000 	.word	0x40021000
 8008c24:	e000e100 	.word	0xe000e100
 8008c28:	02dc6c00 	.word	0x02dc6c00
 8008c2c:	08008241 	.word	0x08008241
 8008c30:	08007f11 	.word	0x08007f11
 8008c34:	20001f6c 	.word	0x20001f6c
 8008c38:	20000cf4 	.word	0x20000cf4
 8008c3c:	f3af 8000 	nop.w

08008c40 <chTMStartMeasurementX.constprop.72>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8008c40:	4b01      	ldr	r3, [pc, #4]	; (8008c48 <chTMStartMeasurementX.constprop.72+0x8>)
 8008c42:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8008c44:	6083      	str	r3, [r0, #8]
 8008c46:	4770      	bx	lr
 8008c48:	e0001000 	.word	0xe0001000
 8008c4c:	f3af 8000 	nop.w

08008c50 <chThdCreateFromMemoryPool.constprop.64>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008c54:	4e21      	ldr	r6, [pc, #132]	; (8008cdc <chThdCreateFromMemoryPool.constprop.64+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008c56:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008c58:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008c5a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008c5c:	f7fd fb78 	bl	8006350 <chPoolAlloc>
  if (wsp == NULL)
 8008c60:	4604      	mov	r4, r0
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d037      	beq.n	8008cd6 <chThdCreateFromMemoryPool.constprop.64+0x86>
 8008c66:	2320      	movs	r3, #32
 8008c68:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c6c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008c6e:	4f1c      	ldr	r7, [pc, #112]	; (8008ce0 <chThdCreateFromMemoryPool.constprop.64+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c70:	3b24      	subs	r3, #36	; 0x24
 8008c72:	4d1c      	ldr	r5, [pc, #112]	; (8008ce4 <chThdCreateFromMemoryPool.constprop.64+0x94>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008c74:	f8d7 a014 	ldr.w	sl, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c78:	eb00 0e03 	add.w	lr, r0, r3
 8008c7c:	491a      	ldr	r1, [pc, #104]	; (8008ce8 <chThdCreateFromMemoryPool.constprop.64+0x98>)
 8008c7e:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8008c82:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c86:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8008c88:	f100 0224 	add.w	r2, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8008c8c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8008c8e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8008c92:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c96:	f8ce 9004 	str.w	r9, [lr, #4]
 8008c9a:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8008c9e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008ca2:	6107      	str	r7, [r0, #16]
 8008ca4:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8008ca8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8008cac:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8008cb0:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008cb4:	6178      	str	r0, [r7, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8008cb6:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8008cb8:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8008cba:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8008cbc:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8008cbe:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8008cc2:	6242      	str	r2, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8008cc4:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8008cc8:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8008cca:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008ccc:	6283      	str	r3, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8008cce:	f7fd ffe7 	bl	8006ca0 <chSchWakeupS>
 8008cd2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	20001f7c 	.word	0x20001f7c
 8008ce0:	20001de0 	.word	0x20001de0
 8008ce4:	08002d21 	.word	0x08002d21
 8008ce8:	08000681 	.word	0x08000681
 8008cec:	f3af 8000 	nop.w

08008cf0 <chSemSignalWait.constprop.61>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	2320      	movs	r3, #32
 8008cf4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
 8008cf8:	4c15      	ldr	r4, [pc, #84]	; (8008d50 <chSemSignalWait.constprop.61+0x60>)
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	dd1b      	ble.n	8008d3c <chSemSignalWait.constprop.61+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
 8008d04:	3b01      	subs	r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	60a3      	str	r3, [r4, #8]
 8008d0a:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <chSemSignalWait.constprop.61+0x60>)
 8008d0c:	db06      	blt.n	8008d1c <chSemSignalWait.constprop.61+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8008d0e:	f7fd ff9f 	bl	8006c50 <chSchRescheduleS>
    msg = MSG_OK;
 8008d12:	2000      	movs	r0, #0
 8008d14:	2300      	movs	r3, #0
 8008d16:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
  return msg;
}
 8008d1a:	bd10      	pop	{r4, pc}

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 8008d1c:	490d      	ldr	r1, [pc, #52]	; (8008d54 <chSemSignalWait.constprop.61+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8008d1e:	6853      	ldr	r3, [r2, #4]
 8008d20:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8008d22:	2005      	movs	r0, #5
 8008d24:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8008d28:	6054      	str	r4, [r2, #4]
 8008d2a:	601c      	str	r4, [r3, #0]
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 8008d2c:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 8008d2e:	f7fe f8bf 	bl	8006eb0 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8008d32:	6a20      	ldr	r0, [r4, #32]
 8008d34:	2300      	movs	r3, #0
 8008d36:	f383 8811 	msr	BASEPRI, r3
    chSchRescheduleS();
    msg = MSG_OK;
  }
  chSysUnlock();
  return msg;
}
 8008d3a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8008d3c:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8008d3e:	6803      	ldr	r3, [r0, #0]
 8008d40:	605c      	str	r4, [r3, #4]
 8008d42:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8008d44:	f7fe f994 	bl	8007070 <chSchReadyI>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	6202      	str	r2, [r0, #32]
 8008d4e:	e7d9      	b.n	8008d04 <chSemSignalWait.constprop.61+0x14>
 8008d50:	20000cc4 	.word	0x20000cc4
 8008d54:	20001de0 	.word	0x20001de0
 8008d58:	f3af 8000 	nop.w
 8008d5c:	f3af 8000 	nop.w

08008d60 <chCondSignal.constprop.57>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8008d60:	b508      	push	{r3, lr}
 8008d62:	2320      	movs	r3, #32
 8008d64:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8008d68:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <chCondSignal.constprop.57+0x24>)
 8008d6a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue))
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	d005      	beq.n	8008d7c <chCondSignal.constprop.57+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8008d70:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8008d72:	2100      	movs	r1, #0
 8008d74:	6053      	str	r3, [r2, #4]
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	f7fd ff92 	bl	8006ca0 <chSchWakeupS>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	bd08      	pop	{r3, pc}
 8008d84:	20000c84 	.word	0x20000c84
 8008d88:	f3af 8000 	nop.w
 8008d8c:	f3af 8000 	nop.w

08008d90 <chCondSignalI.constprop.56>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <chCondSignalI.constprop.56+0x20>)
 8008d92:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d00a      	beq.n	8008dae <chCondSignalI.constprop.56+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8008d98:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8008d9a:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8008d9c:	2400      	movs	r4, #0
 8008d9e:	604b      	str	r3, [r1, #4]
 8008da0:	6214      	str	r4, [r2, #32]
    chSchReadyI(tp);
 8008da2:	4610      	mov	r0, r2
 8008da4:	6019      	str	r1, [r3, #0]
  }
}
 8008da6:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8008daa:	f7fe b961 	b.w	8007070 <chSchReadyI>
 8008dae:	4770      	bx	lr
 8008db0:	20000c84 	.word	0x20000c84
 8008db4:	f3af 8000 	nop.w
 8008db8:	f3af 8000 	nop.w
 8008dbc:	f3af 8000 	nop.w

08008dc0 <chEvtGetAndClearEvents.constprop.48>:
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8008dc6:	4a04      	ldr	r2, [pc, #16]	; (8008dd8 <chEvtGetAndClearEvents.constprop.48+0x18>)
  currp->p_epending &= ~events;
 8008dc8:	2300      	movs	r3, #0
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8008dca:	6992      	ldr	r2, [r2, #24]
 8008dcc:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8008dce:	6353      	str	r3, [r2, #52]	; 0x34
 8008dd0:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20001de0 	.word	0x20001de0
 8008ddc:	f3af 8000 	nop.w

08008de0 <chEvtWaitOne.constprop.44>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8008de0:	4a0b      	ldr	r2, [pc, #44]	; (8008e10 <chEvtWaitOne.constprop.44+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8008de2:	b510      	push	{r4, lr}
 8008de4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008de6:	6994      	ldr	r4, [r2, #24]
 8008de8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8008dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dee:	b933      	cbnz	r3, 8008dfe <chEvtWaitOne.constprop.44+0x1e>
    ctp->p_u.ewmask = events;
 8008df0:	f04f 33ff 	mov.w	r3, #4294967295
 8008df4:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008df6:	200a      	movs	r0, #10
 8008df8:	f7fe f85a 	bl	8006eb0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8008dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8008dfe:	4258      	negs	r0, r3
 8008e00:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8008e02:	ea23 0300 	bic.w	r3, r3, r0
 8008e06:	6363      	str	r3, [r4, #52]	; 0x34
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 8008e0e:	bd10      	pop	{r4, pc}
 8008e10:	20001de0 	.word	0x20001de0
 8008e14:	f3af 8000 	nop.w
 8008e18:	f3af 8000 	nop.w
 8008e1c:	f3af 8000 	nop.w

08008e20 <chEvtWaitAny.constprop.43>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8008e20:	4a0b      	ldr	r2, [pc, #44]	; (8008e50 <chEvtWaitAny.constprop.43+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8008e22:	b510      	push	{r4, lr}
 8008e24:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008e26:	6994      	ldr	r4, [r2, #24]
 8008e28:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8008e2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e2e:	b930      	cbnz	r0, 8008e3e <chEvtWaitAny.constprop.43+0x1e>
    ctp->p_u.ewmask = events;
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008e34:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8008e36:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008e38:	f7fe f83a 	bl	8006eb0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8008e3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8008e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e40:	2200      	movs	r2, #0
 8008e42:	ea23 0300 	bic.w	r3, r3, r0
 8008e46:	6363      	str	r3, [r4, #52]	; 0x34
 8008e48:	f382 8811 	msr	BASEPRI, r2

  chSysUnlock();
  return m;
}
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	bf00      	nop
 8008e50:	20001de0 	.word	0x20001de0
	...

08008e60 <chMBPost.constprop.29>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	2320      	movs	r3, #32
 8008e64:	4606      	mov	r6, r0
 8008e66:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8008e6a:	4c0d      	ldr	r4, [pc, #52]	; (8008ea0 <chMBPost.constprop.29+0x40>)
 8008e6c:	f104 001c 	add.w	r0, r4, #28
 8008e70:	f7fe f8a6 	bl	8006fc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8008e74:	4605      	mov	r5, r0
 8008e76:	b970      	cbnz	r0, 8008e96 <chMBPost.constprop.29+0x36>
    *mbp->mb_wrptr++ = msg;
 8008e78:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8008e7a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8008e7c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8008e7e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8008e80:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8008e82:	bf28      	it	cs
 8008e84:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8008e86:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8008e88:	4806      	ldr	r0, [pc, #24]	; (8008ea4 <chMBPost.constprop.29+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8008e8a:	bf28      	it	cs
 8008e8c:	60a3      	strcs	r3, [r4, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8008e8e:	f7fe f9d7 	bl	8007240 <chSemSignalI>
    chSchRescheduleS();
 8008e92:	f7fd fedd 	bl	8006c50 <chSchRescheduleS>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	20000c8c 	.word	0x20000c8c
 8008ea4:	20000c9c 	.word	0x20000c9c
 8008ea8:	f3af 8000 	nop.w
 8008eac:	f3af 8000 	nop.w

08008eb0 <chMBPostI.constprop.28>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <chMBPostI.constprop.28+0x34>)
 8008eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	dd10      	ble.n	8008edc <chMBPostI.constprop.28+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8008eba:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top)
 8008ebc:	685d      	ldr	r5, [r3, #4]
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8008ebe:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8008ec0:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top)
 8008ec2:	42a9      	cmp	r1, r5
 8008ec4:	625a      	str	r2, [r3, #36]	; 0x24
    mbp->mb_wrptr = mbp->mb_buffer;
 8008ec6:	bf28      	it	cs
 8008ec8:	681a      	ldrcs	r2, [r3, #0]
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8008eca:	6099      	str	r1, [r3, #8]
 8008ecc:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
 8008ece:	4806      	ldr	r0, [pc, #24]	; (8008ee8 <chMBPostI.constprop.28+0x38>)
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 8008ed0:	bf28      	it	cs
 8008ed2:	609a      	strcs	r2, [r3, #8]
  chSemSignalI(&mbp->mb_fullsem);
 8008ed4:	f7fe f9b4 	bl	8007240 <chSemSignalI>
  return MSG_OK;
 8008ed8:	2000      	movs	r0, #0
 8008eda:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 8008ee0:	bd38      	pop	{r3, r4, r5, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000c8c 	.word	0x20000c8c
 8008ee8:	20000c9c 	.word	0x20000c9c
 8008eec:	f3af 8000 	nop.w

08008ef0 <chMBPostAhead.constprop.27>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t time) {
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	2320      	movs	r3, #32
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8008efa:	4c0e      	ldr	r4, [pc, #56]	; (8008f34 <chMBPostAhead.constprop.27+0x44>)
 8008efc:	f104 001c 	add.w	r0, r4, #28
 8008f00:	f7fe f85e 	bl	8006fc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8008f04:	4605      	mov	r5, r0
 8008f06:	b958      	cbnz	r0, 8008f20 <chMBPostAhead.constprop.27+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 8008f08:	68e3      	ldr	r3, [r4, #12]
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	3b04      	subs	r3, #4
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	60e3      	str	r3, [r4, #12]
 8008f12:	d30a      	bcc.n	8008f2a <chMBPostAhead.constprop.27+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 8008f14:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8008f16:	4808      	ldr	r0, [pc, #32]	; (8008f38 <chMBPostAhead.constprop.27+0x48>)
 8008f18:	f7fe f992 	bl	8007240 <chSemSignalI>
    chSchRescheduleS();
 8008f1c:	f7fd fe98 	bl	8006c50 <chSchRescheduleS>
 8008f20:	2300      	movs	r3, #0
 8008f22:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8008f26:	4628      	mov	r0, r5
 8008f28:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	3b04      	subs	r3, #4
 8008f2e:	60e3      	str	r3, [r4, #12]
 8008f30:	e7f0      	b.n	8008f14 <chMBPostAhead.constprop.27+0x24>
 8008f32:	bf00      	nop
 8008f34:	20000c8c 	.word	0x20000c8c
 8008f38:	20000c9c 	.word	0x20000c9c
 8008f3c:	f3af 8000 	nop.w

08008f40 <chMBPostAheadI.constprop.26>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8008f40:	4a0c      	ldr	r2, [pc, #48]	; (8008f74 <chMBPostAheadI.constprop.26+0x34>)
 8008f42:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8008f44:	2900      	cmp	r1, #0
 8008f46:	dd11      	ble.n	8008f6c <chMBPostAheadI.constprop.26+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 8008f48:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8008f4a:	b510      	push	{r4, lr}
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 8008f4c:	6814      	ldr	r4, [r2, #0]
 8008f4e:	3b04      	subs	r3, #4
 8008f50:	3901      	subs	r1, #1
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	6251      	str	r1, [r2, #36]	; 0x24
 8008f56:	60d3      	str	r3, [r2, #12]
 8008f58:	d202      	bcs.n	8008f60 <chMBPostAheadI.constprop.26+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8008f5a:	6853      	ldr	r3, [r2, #4]
 8008f5c:	3b04      	subs	r3, #4
 8008f5e:	60d3      	str	r3, [r2, #12]
  *mbp->mb_rdptr = msg;
 8008f60:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8008f62:	4805      	ldr	r0, [pc, #20]	; (8008f78 <chMBPostAheadI.constprop.26+0x38>)
 8008f64:	f7fe f96c 	bl	8007240 <chSemSignalI>
  return MSG_OK;
 8008f68:	2000      	movs	r0, #0
 8008f6a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 8008f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000c8c 	.word	0x20000c8c
 8008f78:	20000c9c 	.word	0x20000c9c
 8008f7c:	f3af 8000 	nop.w

08008f80 <chMBFetch.constprop.25>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	2320      	movs	r3, #32
 8008f84:	4606      	mov	r6, r0
 8008f86:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 8008f8a:	4c0e      	ldr	r4, [pc, #56]	; (8008fc4 <chMBFetch.constprop.25+0x44>)
 8008f8c:	f104 0010 	add.w	r0, r4, #16
 8008f90:	f7fe f816 	bl	8006fc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8008f94:	4605      	mov	r5, r0
 8008f96:	b978      	cbnz	r0, 8008fb8 <chMBFetch.constprop.25+0x38>
    *msgp = *mbp->mb_rdptr++;
 8008f98:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
 8008f9a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8008f9c:	6819      	ldr	r1, [r3, #0]
 8008f9e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top)
 8008fa0:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8008fa2:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8008fa4:	bf28      	it	cs
 8008fa6:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8008fa8:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_emptysem);
 8008faa:	4807      	ldr	r0, [pc, #28]	; (8008fc8 <chMBFetch.constprop.25+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8008fac:	bf28      	it	cs
 8008fae:	60e3      	strcs	r3, [r4, #12]
    chSemSignalI(&mbp->mb_emptysem);
 8008fb0:	f7fe f946 	bl	8007240 <chSemSignalI>
    chSchRescheduleS();
 8008fb4:	f7fd fe4c 	bl	8006c50 <chSchRescheduleS>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();
  return rdymsg;
}
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000c8c 	.word	0x20000c8c
 8008fc8:	20000ca8 	.word	0x20000ca8
 8008fcc:	00000000 	.word	0x00000000

08008fd0 <chMBFetchI.constprop.24>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <chMBFetchI.constprop.24+0x34>)
 8008fd2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	dd12      	ble.n	8008ffe <chMBFetchI.constprop.24+0x2e>
 8008fd8:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8008fda:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	6199      	str	r1, [r3, #24]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
 8008fe0:	6859      	ldr	r1, [r3, #4]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8008fe2:	6814      	ldr	r4, [r2, #0]
 8008fe4:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top)
 8008fe6:	428a      	cmp	r2, r1
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8008fe8:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 8008fea:	bf28      	it	cs
 8008fec:	681a      	ldrcs	r2, [r3, #0]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8008fee:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_emptysem);
 8008ff0:	4805      	ldr	r0, [pc, #20]	; (8009008 <chMBFetchI.constprop.24+0x38>)
  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 8008ff2:	bf28      	it	cs
 8008ff4:	60da      	strcs	r2, [r3, #12]
  chSemSignalI(&mbp->mb_emptysem);
 8008ff6:	f7fe f923 	bl	8007240 <chSemSignalI>
  return MSG_OK;
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8009002:	4770      	bx	lr
 8009004:	20000c8c 	.word	0x20000c8c
 8009008:	20000ca8 	.word	0x20000ca8
 800900c:	00000000 	.word	0x00000000

08009010 <chOQGetI.constprop.23>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8009010:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <chOQGetI.constprop.23+0x4c>)
 8009014:	695a      	ldr	r2, [r3, #20]
 8009016:	6999      	ldr	r1, [r3, #24]
 8009018:	428a      	cmp	r2, r1
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	d019      	beq.n	8009052 <chOQGetI.constprop.23+0x42>
  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 800901e:	691d      	ldr	r5, [r3, #16]
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 8009020:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
 8009022:	1c48      	adds	r0, r1, #1
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 8009024:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
 8009026:	6198      	str	r0, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top)
 8009028:	42a8      	cmp	r0, r5

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800902a:	780c      	ldrb	r4, [r1, #0]
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 800902c:	4a0b      	ldr	r2, [pc, #44]	; (800905c <chOQGetI.constprop.23+0x4c>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 800902e:	d20d      	bcs.n	800904c <chOQGetI.constprop.23+0x3c>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	490a      	ldr	r1, [pc, #40]	; (800905c <chOQGetI.constprop.23+0x4c>)
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8009034:	429a      	cmp	r2, r3
 8009036:	d007      	beq.n	8009048 <chOQGetI.constprop.23+0x38>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8009038:	6813      	ldr	r3, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800903a:	2500      	movs	r5, #0
 800903c:	6059      	str	r1, [r3, #4]
  chSchReadyI(tp);
 800903e:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8009040:	6215      	str	r5, [r2, #32]
 8009042:	600b      	str	r3, [r1, #0]
  chSchReadyI(tp);
 8009044:	f7fe f814 	bl	8007070 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 8009048:	4620      	mov	r0, r4
 800904a:	bd38      	pop	{r3, r4, r5, pc}
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
    oqp->q_rdptr = oqp->q_buffer;
 800904c:	68d1      	ldr	r1, [r2, #12]
 800904e:	6191      	str	r1, [r2, #24]
 8009050:	e7ee      	b.n	8009030 <chOQGetI.constprop.23+0x20>
 8009052:	2a00      	cmp	r2, #0
 8009054:	d0e3      	beq.n	800901e <chOQGetI.constprop.23+0xe>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;
 8009056:	f06f 0002 	mvn.w	r0, #2
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	20000cd0 	.word	0x20000cd0

08009060 <test_start_timer.constprop.19>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8009060:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8009062:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <test_start_timer.constprop.19+0x30>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	2320      	movs	r3, #32
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	4809      	ldr	r0, [pc, #36]	; (8009094 <test_start_timer.constprop.19+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp))
 8009070:	68c3      	ldr	r3, [r0, #12]
 8009072:	b10b      	cbz	r3, 8009078 <test_start_timer.constprop.19+0x18>
    chVTDoResetI(vtp);
 8009074:	f7fd fd74 	bl	8006b60 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8009078:	4806      	ldr	r0, [pc, #24]	; (8009094 <test_start_timer.constprop.19+0x34>)
 800907a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800907e:	4a06      	ldr	r2, [pc, #24]	; (8009098 <test_start_timer.constprop.19+0x38>)
 8009080:	2300      	movs	r3, #0
 8009082:	f7fd fd9d 	bl	8006bc0 <chVTDoSetI>
 8009086:	2300      	movs	r3, #0
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	bd08      	pop	{r3, pc}
 800908e:	bf00      	nop
 8009090:	20001760 	.word	0x20001760
 8009094:	20001f94 	.word	0x20001f94
 8009098:	08005b71 	.word	0x08005b71
 800909c:	f3af 8000 	nop.w

080090a0 <spiExchange.constprop.5>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
 80090a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a2:	4684      	mov	ip, r0
 80090a4:	b085      	sub	sp, #20
 80090a6:	2320      	movs	r3, #32
 80090a8:	f383 8811 	msr	BASEPRI, r3
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80090ac:	4b17      	ldr	r3, [pc, #92]	; (800910c <spiExchange.constprop.5+0x6c>)
 80090ae:	2003      	movs	r0, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80090b0:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80090b2:	6a1d      	ldr	r5, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80090b4:	9701      	str	r7, [sp, #4]
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80090b6:	6a9f      	ldr	r7, [r3, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80090b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80090ba:	f047 0e80 	orr.w	lr, r7, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80090be:	9f01      	ldr	r7, [sp, #4]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80090c0:	682d      	ldr	r5, [r5, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80090c2:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80090c4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80090c8:	60ea      	str	r2, [r5, #12]
 80090ca:	7018      	strb	r0, [r3, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80090cc:	f8c5 c004 	str.w	ip, [r5, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80090d0:	f8c5 e000 	str.w	lr, [r5]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80090d4:	60e1      	str	r1, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80090d6:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80090da:	6027      	str	r7, [r4, #0]

  dmaStreamEnable(spip->dmarx);
 80090dc:	682a      	ldr	r2, [r5, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80090de:	490c      	ldr	r1, [pc, #48]	; (8009110 <spiExchange.constprop.5+0x70>)
 80090e0:	f042 0201 	orr.w	r2, r2, #1
 80090e4:	602a      	str	r2, [r5, #0]
  dmaStreamEnable(spip->dmatx);
 80090e6:	6822      	ldr	r2, [r4, #0]
 80090e8:	6989      	ldr	r1, [r1, #24]
 80090ea:	f103 0508 	add.w	r5, r3, #8
 80090ee:	ae04      	add	r6, sp, #16
 80090f0:	f042 0201 	orr.w	r2, r2, #1
 80090f4:	6022      	str	r2, [r4, #0]
 80090f6:	f846 5d04 	str.w	r5, [r6, #-4]!
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80090fa:	6099      	str	r1, [r3, #8]
  tp->p_u.wtobjp = &trp;
 80090fc:	620e      	str	r6, [r1, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80090fe:	f7fd fed7 	bl	8006eb0 <chSchGoSleepS>
 8009102:	2300      	movs	r3, #0
 8009104:	f383 8811 	msr	BASEPRI, r3
  _spi_wait_s(spip);
  osalSysUnlock();
}
 8009108:	b005      	add	sp, #20
 800910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910c:	20001f3c 	.word	0x20001f3c
 8009110:	20001de0 	.word	0x20001de0
 8009114:	f3af 8000 	nop.w
 8009118:	f3af 8000 	nop.w
 800911c:	f3af 8000 	nop.w

08009120 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	460d      	mov	r5, r1
  char *token;
  if (str)
 8009124:	4604      	mov	r4, r0
 8009126:	b190      	cbz	r0, 800914e <_strtok.constprop.3+0x2e>
    *saveptr = str;
 8009128:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800912a:	4620      	mov	r0, r4
 800912c:	490b      	ldr	r1, [pc, #44]	; (800915c <_strtok.constprop.3+0x3c>)
 800912e:	f000 f93f 	bl	80093b0 <strspn>
 8009132:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8009134:	4620      	mov	r0, r4
 8009136:	4909      	ldr	r1, [pc, #36]	; (800915c <_strtok.constprop.3+0x3c>)
 8009138:	f000 f912 	bl	8009360 <strpbrk>
  if (*saveptr)
 800913c:	b160      	cbz	r0, 8009158 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 800913e:	1c42      	adds	r2, r0, #1
 8009140:	2300      	movs	r3, #0
 8009142:	602a      	str	r2, [r5, #0]
 8009144:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8009146:	7823      	ldrb	r3, [r4, #0]
 8009148:	b123      	cbz	r3, 8009154 <_strtok.constprop.3+0x34>
 800914a:	4620      	mov	r0, r4
}
 800914c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800914e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8009150:	2c00      	cmp	r4, #0
 8009152:	d1ea      	bne.n	800912a <_strtok.constprop.3+0xa>
    return NULL;
 8009154:	2000      	movs	r0, #0
 8009156:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8009158:	6028      	str	r0, [r5, #0]
 800915a:	e7f4      	b.n	8009146 <_strtok.constprop.3+0x26>
 800915c:	0800a838 	.word	0x0800a838

08009160 <memset>:
 8009160:	b470      	push	{r4, r5, r6}
 8009162:	0784      	lsls	r4, r0, #30
 8009164:	d046      	beq.n	80091f4 <memset+0x94>
 8009166:	1e54      	subs	r4, r2, #1
 8009168:	2a00      	cmp	r2, #0
 800916a:	d041      	beq.n	80091f0 <memset+0x90>
 800916c:	b2cd      	uxtb	r5, r1
 800916e:	4603      	mov	r3, r0
 8009170:	e002      	b.n	8009178 <memset+0x18>
 8009172:	1e62      	subs	r2, r4, #1
 8009174:	b3e4      	cbz	r4, 80091f0 <memset+0x90>
 8009176:	4614      	mov	r4, r2
 8009178:	f803 5b01 	strb.w	r5, [r3], #1
 800917c:	079a      	lsls	r2, r3, #30
 800917e:	d1f8      	bne.n	8009172 <memset+0x12>
 8009180:	2c03      	cmp	r4, #3
 8009182:	d92e      	bls.n	80091e2 <memset+0x82>
 8009184:	b2cd      	uxtb	r5, r1
 8009186:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800918a:	2c0f      	cmp	r4, #15
 800918c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009190:	d919      	bls.n	80091c6 <memset+0x66>
 8009192:	4626      	mov	r6, r4
 8009194:	f103 0210 	add.w	r2, r3, #16
 8009198:	3e10      	subs	r6, #16
 800919a:	2e0f      	cmp	r6, #15
 800919c:	f842 5c10 	str.w	r5, [r2, #-16]
 80091a0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80091a4:	f842 5c08 	str.w	r5, [r2, #-8]
 80091a8:	f842 5c04 	str.w	r5, [r2, #-4]
 80091ac:	f102 0210 	add.w	r2, r2, #16
 80091b0:	d8f2      	bhi.n	8009198 <memset+0x38>
 80091b2:	f1a4 0210 	sub.w	r2, r4, #16
 80091b6:	f022 020f 	bic.w	r2, r2, #15
 80091ba:	f004 040f 	and.w	r4, r4, #15
 80091be:	3210      	adds	r2, #16
 80091c0:	2c03      	cmp	r4, #3
 80091c2:	4413      	add	r3, r2
 80091c4:	d90d      	bls.n	80091e2 <memset+0x82>
 80091c6:	461e      	mov	r6, r3
 80091c8:	4622      	mov	r2, r4
 80091ca:	3a04      	subs	r2, #4
 80091cc:	2a03      	cmp	r2, #3
 80091ce:	f846 5b04 	str.w	r5, [r6], #4
 80091d2:	d8fa      	bhi.n	80091ca <memset+0x6a>
 80091d4:	1f22      	subs	r2, r4, #4
 80091d6:	f022 0203 	bic.w	r2, r2, #3
 80091da:	3204      	adds	r2, #4
 80091dc:	4413      	add	r3, r2
 80091de:	f004 0403 	and.w	r4, r4, #3
 80091e2:	b12c      	cbz	r4, 80091f0 <memset+0x90>
 80091e4:	b2c9      	uxtb	r1, r1
 80091e6:	441c      	add	r4, r3
 80091e8:	f803 1b01 	strb.w	r1, [r3], #1
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d1fb      	bne.n	80091e8 <memset+0x88>
 80091f0:	bc70      	pop	{r4, r5, r6}
 80091f2:	4770      	bx	lr
 80091f4:	4614      	mov	r4, r2
 80091f6:	4603      	mov	r3, r0
 80091f8:	e7c2      	b.n	8009180 <memset+0x20>
 80091fa:	bf00      	nop
 80091fc:	0000      	movs	r0, r0
	...

08009200 <strcasecmp>:
 8009200:	4b0e      	ldr	r3, [pc, #56]	; (800923c <strcasecmp+0x3c>)
 8009202:	b430      	push	{r4, r5}
 8009204:	681d      	ldr	r5, [r3, #0]
 8009206:	e002      	b.n	800920e <strcasecmp+0xe>
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	d114      	bne.n	8009236 <strcasecmp+0x36>
 800920c:	b19a      	cbz	r2, 8009236 <strcasecmp+0x36>
 800920e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009212:	18ea      	adds	r2, r5, r3
 8009214:	7852      	ldrb	r2, [r2, #1]
 8009216:	f002 0203 	and.w	r2, r2, #3
 800921a:	2a01      	cmp	r2, #1
 800921c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009220:	bf08      	it	eq
 8009222:	3320      	addeq	r3, #32
 8009224:	18ac      	adds	r4, r5, r2
 8009226:	7864      	ldrb	r4, [r4, #1]
 8009228:	f004 0403 	and.w	r4, r4, #3
 800922c:	2c01      	cmp	r4, #1
 800922e:	d1eb      	bne.n	8009208 <strcasecmp+0x8>
 8009230:	3220      	adds	r2, #32
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	d0eb      	beq.n	800920e <strcasecmp+0xe>
 8009236:	4618      	mov	r0, r3
 8009238:	bc30      	pop	{r4, r5}
 800923a:	4770      	bx	lr
 800923c:	20000cf8 	.word	0x20000cf8

08009240 <strcpy>:
 8009240:	ea80 0201 	eor.w	r2, r0, r1
 8009244:	4684      	mov	ip, r0
 8009246:	f012 0f03 	tst.w	r2, #3
 800924a:	d14f      	bne.n	80092ec <strcpy+0xac>
 800924c:	f011 0f03 	tst.w	r1, #3
 8009250:	d132      	bne.n	80092b8 <strcpy+0x78>
 8009252:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8009256:	f011 0f04 	tst.w	r1, #4
 800925a:	f851 3b04 	ldr.w	r3, [r1], #4
 800925e:	d00b      	beq.n	8009278 <strcpy+0x38>
 8009260:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8009264:	439a      	bics	r2, r3
 8009266:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800926a:	bf04      	itt	eq
 800926c:	f84c 3b04 	streq.w	r3, [ip], #4
 8009270:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009274:	d116      	bne.n	80092a4 <strcpy+0x64>
 8009276:	bf00      	nop
 8009278:	f851 4b04 	ldr.w	r4, [r1], #4
 800927c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8009280:	439a      	bics	r2, r3
 8009282:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8009286:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800928a:	d10b      	bne.n	80092a4 <strcpy+0x64>
 800928c:	f84c 3b04 	str.w	r3, [ip], #4
 8009290:	43a2      	bics	r2, r4
 8009292:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8009296:	bf04      	itt	eq
 8009298:	f851 3b04 	ldreq.w	r3, [r1], #4
 800929c:	f84c 4b04 	streq.w	r4, [ip], #4
 80092a0:	d0ea      	beq.n	8009278 <strcpy+0x38>
 80092a2:	4623      	mov	r3, r4
 80092a4:	f80c 3b01 	strb.w	r3, [ip], #1
 80092a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80092ac:	ea4f 2333 	mov.w	r3, r3, ror #8
 80092b0:	d1f8      	bne.n	80092a4 <strcpy+0x64>
 80092b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	f011 0f01 	tst.w	r1, #1
 80092bc:	d006      	beq.n	80092cc <strcpy+0x8c>
 80092be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092c2:	f80c 2b01 	strb.w	r2, [ip], #1
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	bf08      	it	eq
 80092ca:	4770      	bxeq	lr
 80092cc:	f011 0f02 	tst.w	r1, #2
 80092d0:	d0bf      	beq.n	8009252 <strcpy+0x12>
 80092d2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80092d6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80092da:	bf16      	itet	ne
 80092dc:	f82c 2b02 	strhne.w	r2, [ip], #2
 80092e0:	f88c 2000 	strbeq.w	r2, [ip]
 80092e4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80092e8:	d1b3      	bne.n	8009252 <strcpy+0x12>
 80092ea:	4770      	bx	lr
 80092ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092f0:	f80c 2b01 	strb.w	r2, [ip], #1
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d1f9      	bne.n	80092ec <strcpy+0xac>
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	0000      	movs	r0, r0
	...

08009300 <strlen>:
 8009300:	f020 0103 	bic.w	r1, r0, #3
 8009304:	f010 0003 	ands.w	r0, r0, #3
 8009308:	f1c0 0000 	rsb	r0, r0, #0
 800930c:	f851 3b04 	ldr.w	r3, [r1], #4
 8009310:	f100 0c04 	add.w	ip, r0, #4
 8009314:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009318:	f06f 0200 	mvn.w	r2, #0
 800931c:	bf1c      	itt	ne
 800931e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8009322:	4313      	orrne	r3, r2
 8009324:	f04f 0c01 	mov.w	ip, #1
 8009328:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800932c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8009330:	eba3 020c 	sub.w	r2, r3, ip
 8009334:	ea22 0203 	bic.w	r2, r2, r3
 8009338:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800933c:	bf04      	itt	eq
 800933e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009342:	3004      	addeq	r0, #4
 8009344:	d0f4      	beq.n	8009330 <strlen+0x30>
 8009346:	f1c2 0100 	rsb	r1, r2, #0
 800934a:	ea02 0201 	and.w	r2, r2, r1
 800934e:	fab2 f282 	clz	r2, r2
 8009352:	f1c2 021f 	rsb	r2, r2, #31
 8009356:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800935a:	4770      	bx	lr
 800935c:	0000      	movs	r0, r0
	...

08009360 <strpbrk>:
 8009360:	b430      	push	{r4, r5}
 8009362:	7804      	ldrb	r4, [r0, #0]
 8009364:	b1ec      	cbz	r4, 80093a2 <strpbrk+0x42>
 8009366:	780d      	ldrb	r5, [r1, #0]
 8009368:	b1ad      	cbz	r5, 8009396 <strpbrk+0x36>
 800936a:	42ac      	cmp	r4, r5
 800936c:	d00e      	beq.n	800938c <strpbrk+0x2c>
 800936e:	460a      	mov	r2, r1
 8009370:	e001      	b.n	8009376 <strpbrk+0x16>
 8009372:	429c      	cmp	r4, r3
 8009374:	d009      	beq.n	800938a <strpbrk+0x2a>
 8009376:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f9      	bne.n	8009372 <strpbrk+0x12>
 800937e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009382:	2c00      	cmp	r4, #0
 8009384:	d1f0      	bne.n	8009368 <strpbrk+0x8>
 8009386:	7815      	ldrb	r5, [r2, #0]
 8009388:	e000      	b.n	800938c <strpbrk+0x2c>
 800938a:	4625      	mov	r5, r4
 800938c:	2d00      	cmp	r5, #0
 800938e:	bf08      	it	eq
 8009390:	2000      	moveq	r0, #0
 8009392:	bc30      	pop	{r4, r5}
 8009394:	4770      	bx	lr
 8009396:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800939a:	460a      	mov	r2, r1
 800939c:	2c00      	cmp	r4, #0
 800939e:	d1e3      	bne.n	8009368 <strpbrk+0x8>
 80093a0:	e7f1      	b.n	8009386 <strpbrk+0x26>
 80093a2:	4620      	mov	r0, r4
 80093a4:	bc30      	pop	{r4, r5}
 80093a6:	4770      	bx	lr
	...

080093b0 <strspn>:
 80093b0:	b470      	push	{r4, r5, r6}
 80093b2:	7804      	ldrb	r4, [r0, #0]
 80093b4:	b1a4      	cbz	r4, 80093e0 <strspn+0x30>
 80093b6:	4605      	mov	r5, r0
 80093b8:	780e      	ldrb	r6, [r1, #0]
 80093ba:	b14e      	cbz	r6, 80093d0 <strspn+0x20>
 80093bc:	42b4      	cmp	r4, r6
 80093be:	d00a      	beq.n	80093d6 <strspn+0x26>
 80093c0:	460a      	mov	r2, r1
 80093c2:	e001      	b.n	80093c8 <strspn+0x18>
 80093c4:	429c      	cmp	r4, r3
 80093c6:	d006      	beq.n	80093d6 <strspn+0x26>
 80093c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f9      	bne.n	80093c4 <strspn+0x14>
 80093d0:	1a28      	subs	r0, r5, r0
 80093d2:	bc70      	pop	{r4, r5, r6}
 80093d4:	4770      	bx	lr
 80093d6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80093da:	2c00      	cmp	r4, #0
 80093dc:	d1ed      	bne.n	80093ba <strspn+0xa>
 80093de:	e7f7      	b.n	80093d0 <strspn+0x20>
 80093e0:	4620      	mov	r0, r4
 80093e2:	e7f6      	b.n	80093d2 <strspn+0x22>
	...
 80093f0:	00000101 	.word	0x00000101
 80093f4:	00020111 	.word	0x00020111
 80093f8:	00001001 	.word	0x00001001
 80093fc:	00022011 	.word	0x00022011
 8009400:	00000002 	.word	0x00000002
 8009404:	22031211 	.word	0x22031211
 8009408:	000a0006 	.word	0x000a0006
 800940c:	190b2011 	.word	0x190b2011
 8009410:	80030880 	.word	0x80030880
 8009414:	7410f000 	.word	0x7410f000
 8009418:	005500e8 	.word	0x005500e8
 800941c:	240c2011 	.word	0x240c2011
 8009420:	03ab0c06 	.word	0x03ab0c06
 8009424:	00c20203 	.word	0x00c20203
 8009428:	01c03204 	.word	0x01c03204
 800942c:	30032011 	.word	0x30032011
 8009430:	00c06403 	.word	0x00c06403
 8009434:	50022011 	.word	0x50022011
 8009438:	00000a84 	.word	0x00000a84
 800943c:	54022011 	.word	0x54022011
 8009440:	0000070f 	.word	0x0000070f
 8009444:	5b052011 	.word	0x5b052011
 8009448:	78210440 	.word	0x78210440
 800944c:	00000020 	.word	0x00000020
 8009450:	000c2111 	.word	0x000c2111
 8009454:	510fbaff 	.word	0x510fbaff
 8009458:	fcc9a9cf 	.word	0xfcc9a9cf
 800945c:	010f1e1b 	.word	0x010f1e1b
 8009460:	0c0c2111 	.word	0x0c0c2111
 8009464:	ff15fdfc 	.word	0xff15fdfc
 8009468:	baff0f00 	.word	0xbaff0f00
 800946c:	a9cf510f 	.word	0xa9cf510f
 8009470:	180c2111 	.word	0x180c2111
 8009474:	1e1bfcc9 	.word	0x1e1bfcc9
 8009478:	fdfc010f 	.word	0xfdfc010f
 800947c:	0f00ff15 	.word	0x0f00ff15
 8009480:	06011211 	.word	0x06011211
 8009484:	00000080 	.word	0x00000080
 8009488:	00011211 	.word	0x00011211
 800948c:	00000085 	.word	0x00000085
 8009490:	01021111 	.word	0x01021111
 8009494:	000091d3 	.word	0x000091d3
	...
 80094a0:	00300031 	.word	0x00300031
	...

080094b0 <ch_debug>:
 80094b0:	6e69616d 18001600 08440204 1814100c     main......D.....
 80094c0:	1e1d1c00 00000000 00000000 00000000     ................

080094d0 <states.8544>:
 80094d0:	0800977c 08009784 0800978c 08009794     |...............
 80094e0:	080097a0 080097a8 080097b0 080097b8     ................
 80094f0:	080097c0 080097cc 080097d4 080097dc     ................
 8009500:	080097e8 080097f0 080097f8 08009800     ................

08009510 <serusbcfg>:
 8009510:	20000e48 00020101 00000000 00000000     H.. ............

08009520 <usbcfg>:
 8009520:	08007551 08007401 08001f01 00000000     Qu...t..........

08009530 <vmt>:
 8009530:	08002131 08002111 08002171 08002151     1!...!..q!..Q!..
 8009540:	08002161 08002141 08002121 08002101     a!..A!..!!...!..

08009550 <commands>:
 8009550:	08009754 08001e21 08009758 08001db1     T...!...X.......
 8009560:	0800a3b0 08001d61 08009760 08001d11     ....a...`.......
 8009570:	08009768 080074e1 0800976c 08007471     h....t..l...qt..
 8009580:	0800a100 08007e81 08009770 08007451     .....~..p...Qt..
	...
 80095a0:	6e696c62 0072656b 67617355 25203a65     blinker.Usage: %
 80095b0:	000a0d73 74737973 00656d69 0d756c25     s...systime.%lu.
 80095c0:	0000000a 6c656873 0000006c 68430a0d     ....shell.....Ch
 80095d0:	4f696269 54522f53 65685320 0a0d6c6c     ibiOS/RT Shell..
 80095e0:	00000000 203e6863 00000000 0000445e     ....ch> ....^D..
 80095f0:	206f6f74 796e616d 67726120 6e656d75     too many argumen
 8009600:	0a0d7374 00000000 74697865 00000000     ts......exit....
 8009610:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 8009620:	6568203a 6520706c 20746978 00000000     : help exit ....
 8009630:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 8009640:	6f6c0a0d 74756f67 00000000 6c756e28     ..logout....(nul
 8009650:	0000296c 730a0a0d 70706f74 0a0d6465     l).....stopped..
 8009660:	00000000 67617355 77203a65 65746972     ....Usage: write
 8009670:	00000a0d 67617355 74203a65 0d747365     ....Usage: test.
 8009680:	0000000a 2074756f 6d20666f 726f6d65     ....out of memor
 8009690:	000a0d79 67617355 74203a65 61657268     y...Usage: threa
 80096a0:	0a0d7364 00000000 20202020 72646461     ds......    addr
 80096b0:	20202020 63617473 7270206b 72206f69         stack prio r
 80096c0:	20736665 20202020 74617473 000a0d65     efs     state...
 80096d0:	6c383025 30252078 20786c38 756c3425     %08lx %08lx %4lu
 80096e0:	6c342520 39252075 000a0d73 67617355      %4lu %9s...Usag
 80096f0:	6d203a65 0a0d6d65 00000000 65726f63     e: mem......core
 8009700:	65726620 656d2065 79726f6d 25203a20      free memory : %
 8009710:	79622075 0d736574 0000000a 70616568     u bytes.....heap
 8009720:	61726620 6e656d67 20207374 25203a20      fragments   : %
 8009730:	000a0d75 70616568 65726620 6f742065     u...heap free to
 8009740:	206c6174 25203a20 79622075 0d736574     tal  : %u bytes.
 8009750:	0000000a 006d656d 65726874 00736461     ....mem.threads.
 8009760:	74697277 00000065 00000075 00000064     write...u...d...
 8009770:	00000070 6f666e69 00000000 44414552     p...info....READ
 8009780:	00000059 52525543 00544e45 54535457     Y...CURRENT.WTST
 8009790:	00545241 50535553 45444e45 00000044     ART.SUSPENDED...
 80097a0:	55455551 00004445 45535457 0000004d     QUEUED..WTSEM...
 80097b0:	544d5457 00000058 4f435457 0000444e     WTMTX...WTCOND..
 80097c0:	45454c53 474e4950 00000000 58455457     SLEEPING....WTEX
 80097d0:	00005449 524f5457 00545645 4e415457     IT..WTOREVT.WTAN
 80097e0:	54564544 00000000 4d444e53 00514753     DEVT....SNDMSGQ.
 80097f0:	4d444e53 00004753 534d5457 00000047     SNDMSG..WTMSG...
 8009800:	414e4946 0000004c 00000000 00000000     FINAL...........

08009810 <shell_cfg1>:
 8009810:	200014b4 08009550 00000000 00000000     ... P...........

08009820 <pow10>:
 8009820:	0000000a 00000064 000003e8 00002710     ....d........'..
 8009830:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8009840:	3b9aca00 00000000 00000000 00000000     ...;............

08009850 <_stm32_dma_streams>:
 8009850:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 8009860:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 8009870:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 8009880:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 8009890:	40020004 00100514 40020080 40020004     ...@.......@...@
 80098a0:	00110618 00000000 00000000 00000000     ................

080098b0 <halted_status>:
 80098b0:	00000001 00000000 00000000 00000000     ................

080098c0 <zero_status>:
	...

080098d0 <active_status>:
	...
 80098e0:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 80098f0:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 8009900:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 8009910:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 8009920:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 8009930:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 8009940:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 8009950:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 8009960:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 8009970:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 8009980:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 8009990:	203a2065 00000000 636f6c20 6e752b6b     e : .... lock+un
 80099a0:	6b636f6c 0000532f 69617720 69732b74     lock/S.. wait+si
 80099b0:	6c616e67 0000532f 6d697420 2f737265     gnal/S.. timers/
 80099c0:	00000053 74796220 532f7365 00000000     S... bytes/S....
 80099d0:	00000041 00000042 00000043 44434241     A...B...C...ABCD
 80099e0:	00000000 00004241 00000000 00000000     ....AB..........

080099f0 <wa>:
 80099f0:	20001768 200018b0 200019f8 20001b40     h.. ... ... @.. 
 8009a00:	20001c88 00000000 00000000 00000000     ... ............
 8009a10:	78746320 2f637773 00000053 72687420      ctxswc/S... thr
 8009a20:	73646165 0000532f 73657220 64656863     eads/S.. resched
 8009a30:	73656c75 202c532f 00000000 67736d20     ules/S, .... msg
 8009a40:	2c532f73 00000020 00000000 00000000     s/S, ...........
 8009a50:	44434241 00000045 00000000 00000000     ABCDE...........
 8009a60:	00434241 00000000 00000000 00000000     ABC.............

08009a70 <evhndl>:
 8009a70:	08005111 08005101 080050f1 00000000     .Q...Q...P......

08009a80 <testmtx4>:
 8009a80:	0800a378 08004321 00000000 08004481     x...!C.......D..

08009a90 <testmtx5>:
 8009a90:	0800a368 08004311 00000000 08004381     h....C.......C..

08009aa0 <testmtx6>:
 8009aa0:	0800a350 080042f1 00000000 08005a61     P....B......aZ..

08009ab0 <testmtx7>:
 8009ab0:	0800a338 08004ff1 00000000 08005971     8....O......qY..

08009ac0 <testmtx8>:
 8009ac0:	0800a324 08004fc1 00000000 080057c1     $....O.......W..

08009ad0 <patternmsg>:
 8009ad0:	08009d10 00000000 00000000 00000000     ................

08009ae0 <testbmk11>:
 8009ae0:	0800a044 08001f51 00000000 080022e1     D...Q........"..

08009af0 <testbmk12>:
 8009af0:	0800a024 08001f41 00000000 08002271     $...A.......q"..

08009b00 <testevt2>:
 8009b00:	0800a2b4 080031e1 00000000 080031f1     .....1.......1..

08009b10 <patterndyn>:
 8009b10:	08009cb0 08009cc0 08009cd0 00000000     ................

08009b20 <testsem1>:
 8009b20:	0800a410 08004371 00000000 08004c11     ....qC.......L..

08009b30 <testsem2>:
 8009b30:	0800a3fc 08004361 00000000 08004ab1     ....aC.......J..

08009b40 <testsem3>:
 8009b40:	0800a3dc 08004351 00000000 08004a01     ....QC.......J..

08009b50 <testsem4>:
 8009b50:	0800a3b8 00000000 00000000 080048a1     .............H..

08009b60 <testbmk6>:
 8009b60:	0800a104 00000000 00000000 08003721     ............!7..

08009b70 <testbmk10>:
 8009b70:	0800a068 00000000 00000000 08002351     h...........Q#..

08009b80 <testbmk4>:
 8009b80:	0800a144 00000000 00000000 08003961     D...........a9..

08009b90 <patternthd>:
 8009b90:	08009d50 08009d60 08009d70 08009d80     P...`...p.......
	...

08009bb0 <testbmk13>:
 8009bb0:	0800a008 00000000 00000000 08002181     .............!..

08009bc0 <testbmk1>:
 8009bc0:	0800a190 00000000 00000000 08003c01     .............<..

08009bd0 <testbmk2>:
 8009bd0:	0800a178 00000000 00000000 08003b91     x............;..

08009be0 <testbmk3>:
 8009be0:	0800a160 00000000 00000000 08003ab1     `............:..

08009bf0 <testbmk5>:
 8009bf0:	0800a124 00000000 00000000 080038f1     $............8..

08009c00 <testbmk8>:
 8009c00:	0800a0b0 00000000 00000000 08003611     .............6..

08009c10 <testbmk7>:
 8009c10:	0800a0dc 08003551 00000000 080037c1     ....Q5.......7..

08009c20 <testpools1>:
 8009c20:	0800a25c 08002b11 00000000 08002b61     \....+......a+..

08009c30 <testbmk9>:
 8009c30:	0800a08c 00000000 00000000 080023d1     .............#..

08009c40 <patternbmk>:
 8009c40:	08009bc0 08009bd0 08009be0 08009b80     ................
 8009c50:	08009bf0 08009b60 08009c10 08009c00     ....`...........
 8009c60:	08009c30 08009b70 08009ae0 08009af0     0...p...........
 8009c70:	08009bb0 00000000 00000000 00000000     ................

08009c80 <patterns>:
 8009c80:	08009b90 08009d90 08009df0 08009ad0     ................
 8009c90:	08009d40 08009cf0 08009d00 0800a4a0     @...............
 8009ca0:	08009b10 08009db0 08009c40 00000000     ........@.......

08009cb0 <testdyn1>:
 8009cb0:	0800a230 08002ad1 00000000 08002d31     0....*......1-..

08009cc0 <testdyn2>:
 8009cc0:	0800a200 08002ab1 00000000 08002c31     .....*......1,..

08009cd0 <testdyn3>:
 8009cd0:	0800a1d8 080035e1 00000000 080041b1     .....5.......A..

08009ce0 <testmbox1>:
 8009ce0:	0800a2f4 08004f81 00000000 08005131     .....O......1Q..

08009cf0 <patternevt>:
 8009cf0:	08009dc0 08009b00 08009de0 00000000     ................

08009d00 <patternheap>:
 8009d00:	08009dd0 00000000 00000000 00000000     ................

08009d10 <testmsg1>:
 8009d10:	0800a314 00000000 00000000 08005721     ............!W..

08009d20 <testqueues1>:
 8009d20:	0800a1c0 080035b1 00000000 08003f01     .....5.......?..

08009d30 <testqueues2>:
 8009d30:	0800a1a8 08003581 00000000 08003c91     .....5.......<..

08009d40 <patternmbox>:
 8009d40:	08009ce0 00000000 00000000 00000000     ................

08009d50 <testthd1>:
 8009d50:	0800a470 00000000 00000000 08005e21     p...........!^..

08009d60 <testthd2>:
 8009d60:	0800a454 00000000 00000000 08005cd1     T............\..

08009d70 <testthd3>:
 8009d70:	0800a438 00000000 00000000 08004e51     8...........QN..

08009d80 <testthd4>:
 8009d80:	0800a428 00000000 00000000 08004d81     (............M..

08009d90 <patternsem>:
 8009d90:	08009b20 08009b30 08009b40 08009b50      ...0...@...P...
	...

08009db0 <patternqueues>:
 8009db0:	08009d20 08009d30 00000000 00000000      ...0...........

08009dc0 <testevt1>:
 8009dc0:	0800a2d0 08005121 00000000 08005011     ....!Q.......P..

08009dd0 <testheap1>:
 8009dd0:	0800a278 08002b31 00000000 08002e31     x...1+......1...

08009de0 <testevt3>:
 8009de0:	0800a2a0 080031d1 00000000 08003071     .....1......q0..

08009df0 <patternmtx>:
 8009df0:	0800a490 08009a80 08009a90 08009aa0     ................
 8009e00:	08009ab0 08009ac0 00000000 00000000     ................
 8009e10:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 8009e20:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 8009e30:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 8009e40:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 8009e50:	68637241 63657469 65727574 0000203a     Architecture: ..
 8009e60:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 8009e70:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 8009e80:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 8009e90:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 8009ea0:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 8009eb0:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 8009ec0:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 8009ed0:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 8009ee0:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 8009ef0:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 8009f00:	20747365 74697573 00000065 002a2a2a     est suite...***.
 8009f10:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 8009f20:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 8009f30:	00455255 2e302e33 76656430 00000000     URE.3.0.0dev....
 8009f40:	206e614a 32203033 20353130 3831202d     Jan 30 2015 - 18
 8009f50:	3a33313a 00003532 20434347 2e392e34     :13:25..GCC 4.9.
 8009f60:	30322033 31313431 28203931 656c6572     3 20141119 (rele
 8009f70:	29657361 52415b20 6d652f4d 64646562     ase) [ARM/embedd
 8009f80:	342d6465 622d395f 636e6172 65722068     ed-4_9-branch re
 8009f90:	69736976 32206e6f 37323831 00005d38     vision 218278]..
 8009fa0:	764d5241 004d2d37 74726f43 4d2d7865     ARMv7-M.Cortex-M
 8009fb0:	00000033 61766441 6465636e 72656b20     3...Advanced ker
 8009fc0:	206c656e 65646f6d 00000000 334d5453     nel mode....STM3
 8009fd0:	30314632 65502078 726f6672 636e616d     2F10x Performanc
 8009fe0:	694c2065 4d20656e 75696465 6544206d     e Line Medium De
 8009ff0:	7469736e 00000079 55207854 6e696c70     nsity...Tx Uplin
 800a000:	6f62206b 00647261 636e6542 72616d68     k board.Benchmar
 800a010:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
 800a020:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 800a030:	78657475 6c207365 2f6b636f 6f6c6e75     utexes lock/unlo
 800a040:	00006b63 636e6542 72616d68 73202c6b     ck..Benchmark, s
 800a050:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 800a060:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 800a070:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 800a080:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 800a090:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 800a0a0:	68742073 67756f72 74757068 00000000     s throughput....
 800a0b0:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 800a0c0:	626f7220 63206e69 65746e6f 73207478      robin context s
 800a0d0:	63746977 676e6968 00000000 636e6542     witching....Benc
 800a0e0:	72616d68 6d202c6b 20737361 63736572     hmark, mass resc
 800a0f0:	75646568 202c656c 68742035 64616572     hedule, 5 thread
 800a100:	00000073 636e6542 72616d68 74202c6b     s...Benchmark, t
 800a110:	61657268 202c7364 61657263 6f206574     hreads, create o
 800a120:	00796c6e 636e6542 72616d68 74202c6b     nly.Benchmark, t
 800a130:	61657268 202c7364 6c6c7566 63796320     hreads, full cyc
 800a140:	0000656c 636e6542 72616d68 63202c6b     le..Benchmark, c
 800a150:	65746e6f 73207478 63746977 00000068     ontext switch...
 800a160:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 800a170:	20736567 00003323 636e6542 72616d68     ges #3..Benchmar
 800a180:	6d202c6b 61737365 20736567 00003223     k, messages #2..
 800a190:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 800a1a0:	20736567 00003123 75657551 202c7365     ges #1..Queues, 
 800a1b0:	7074756f 71207475 65756575 00000073     output queues...
 800a1c0:	75657551 202c7365 75706e69 75712074     Queues, input qu
 800a1d0:	73657565 00000000 616e7944 2063696d     eues....Dynamic 
 800a1e0:	73495041 6572202c 74736967 61207972     APIs, registry a
 800a1f0:	7220646e 72656665 65636e65 00000073     nd references...
 800a200:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 800a210:	64616572 72632073 69746165 66206e6f     reads creation f
 800a220:	206d6f72 6f6d656d 70207972 006c6f6f     rom memory pool.
 800a230:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 800a240:	64616572 72632073 69746165 66206e6f     reads creation f
 800a250:	206d6f72 70616568 00000000 6f6d654d     rom heap....Memo
 800a260:	50207972 736c6f6f 7571202c 2f657565     ry Pools, queue/
 800a270:	75716564 00657565 70616548 6c61202c     dequeue.Heap, al
 800a280:	61636f6c 6e6f6974 646e6120 61726620     location and fra
 800a290:	6e656d67 69746174 74206e6f 00747365     gmentation test.
 800a2a0:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 800a2b0:	00000000 6e657645 202c7374 74696177     ....Events, wait
 800a2c0:	646e6120 6f726220 61636461 00007473      and broadcast..
 800a2d0:	6e657645 202c7374 69676572 61727473     Events, registra
 800a2e0:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 800a2f0:	00000068 6c69614d 65786f62 71202c73     h...Mailboxes, q
 800a300:	69756575 6120676e 7420646e 6f656d69     ueuing and timeo
 800a310:	00737475 7373654d 73656761 6f6c202c     uts.Messages, lo
 800a320:	0000706f 646e6f43 2c726156 6f6f6220     op..CondVar, boo
 800a330:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 800a340:	6f726220 61636461 74207473 00747365      broadcast test.
 800a350:	646e6f43 2c726156 67697320 206c616e     CondVar, signal 
 800a360:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 800a370:	61747320 00737574 6574754d 2c736578      status.Mutexes,
 800a380:	69727020 7469726f 65722079 6e727574      priority return
 800a390:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 800a3a0:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 800a3b0:	74736574 00000000 616e6942 53207972     test....Binary S
 800a3c0:	70616d65 65726f68 66202c73 74636e75     emaphores, funct
 800a3d0:	616e6f69 7974696c 00000000 616d6553     ionality....Sema
 800a3e0:	726f6870 202c7365 6d6f7461 73206369     phores, atomic s
 800a3f0:	616e6769 61772d6c 00007469 616d6553     ignal-wait..Sema
 800a400:	726f6870 202c7365 656d6974 0074756f     phores, timeout.
 800a410:	616d6553 726f6870 202c7365 75716e65     Semaphores, enqu
 800a420:	6e697565 00000067 65726854 2c736461     euing...Threads,
 800a430:	6c656420 00737961 65726854 2c736461      delays.Threads,
 800a440:	69727020 7469726f 68632079 65676e61      priority change
 800a450:	00000000 65726854 2c736461 716e6520     ....Threads, enq
 800a460:	69756575 7420676e 20747365 00003223     ueuing test #2..
 800a470:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 800a480:	7420676e 20747365 00003123 00000000     ng test #1......

0800a490 <testmtx1>:
 800a490:	0800a394 08004341 00000000 08004711     ....AC.......G..

0800a4a0 <patternpools>:
 800a4a0:	08009c20 00000000 00000000 00000000      ...............
 800a4b0:	656c6469 00000000 00000000 00000000     idle............

0800a4c0 <ep1config>:
 800a4c0:	00000002 00000000 08002071 08002971     ........q ..q)..
 800a4d0:	00400040 20001720 2000170c 00000002     @.@. .. ... ....
	...

0800a4f0 <vcom_configuration_descriptor_data>:
 800a4f0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800a500:	24050001 05011000 01000124 02022404     ...$....$....$..
 800a510:	00062405 82050701 ff000803 00010409     .$..............
 800a520:	00000a02 01050700 00004002 02810507     .........@......
 800a530:	00000040 00000000 00000000 00000000     @...............

0800a540 <vcom_configuration_descriptor>:
 800a540:	00000043 0800a4f0 00000000 00000000     C...............

0800a550 <ep2config>:
 800a550:	00000003 00000000 08001ef1 00000000     ................
 800a560:	00000010 20001730 00000000 00000001     ....0.. ........
	...
 800a580:	73746547 72617020 44492074 7355202c     Gets part ID, Us
 800a590:	3a656761 0d207020 0000000a 0d583425     age: p .....%4X.
 800a5a0:	0000000a 656e7554 6f642073 62206e77     ....Tunes down b
 800a5b0:	30352079 202c7a68 67617355 64203a65     y 50hz, Usage: d
 800a5c0:	00000a0d 71657246 636e6575 73692079     ....Frequency is
 800a5d0:	7525203a 00000a0d 656e7554 70752073     : %u....Tunes up
 800a5e0:	20796220 7a683035 7355202c 3a656761      by 50hz, Usage:
 800a5f0:	0a0d7520 00000000 646e6553 20612073      u......Sends a 
 800a600:	6b636170 202c7465 67617355 73203a65     packet, Usage: s
 800a610:	61703c20 74656b63 000a0d3e 6361703c      <packet>...<pac
 800a620:	3e74656b 73756d20 65622074 61786520     ket> must be exa
 800a630:	796c7463 63203620 61726168 72657463     ctly 6 character
 800a640:	000a0d73 00000000 00000000 00000000     s...............

0800a650 <vcom_device_descriptor_data>:
 800a650:	01100112 40000002 00041eaf 02010200     .......@........
 800a660:	00000103 00000000 00000000 00000000     ................

0800a670 <vcom_string0>:
 800a670:	04090304 00000000 00000000 00000000     ................

0800a680 <vcom_string1>:
 800a680:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 800a690:	00000073 00000000 00000000 00000000     s...............

0800a6a0 <vcom_string2>:
 800a6a0:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800a6b0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800a6c0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800a6d0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800a6e0 <vcom_string3>:
 800a6e0:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800a6f0 <vcom_strings>:
 800a6f0:	00000004 0800a670 00000012 0800a680     ....p...........
 800a700:	00000038 0800a6a0 00000008 0800a6e0     8...............

0800a710 <vcom_device_descriptor>:
 800a710:	00000012 0800a650 00000000 00000000     ....P...........
 800a720:	20414d44 6c696166 00657275 6e72654b     DMA failure.Kern
 800a730:	203a6c65 20202020 73252020 00000a0d     el:       %s....
 800a740:	706d6f43 72656c69 2020203a 73252020     Compiler:     %s
 800a750:	00000a0d 68637241 63657469 65727574     ....Architecture
 800a760:	7325203a 00000a0d 65726f43 72615620     : %s....Core Var
 800a770:	746e6169 7325203a 00000a0d 74726f50     iant: %s....Port
 800a780:	666e4920 20203a6f 73252020 00000a0d      Info:    %s....
 800a790:	74616c50 6d726f66 2020203a 73252020     Platform:     %s
 800a7a0:	00000a0d 72616f42 20203a64 20202020     ....Board:      
 800a7b0:	73252020 00000a0d 6c697542 69742064       %s....Build ti
 800a7c0:	203a656d 73252020 73257325 00000a0d     me:   %s%s%s....
 800a7d0:	206e614a 32203033 00353130 00202d20     Jan 30 2015. - .
 800a7e0:	313a3831 39323a33 00000000 00000000     18:13:29........

0800a7f0 <ep0config>:
 800a7f0:	00000000 080025a1 080024c1 08001f71     .....%...$..q...
 800a800:	00400040 20001744 20001744 00000001     @.@.D.. D.. ....
 800a810:	20001758 00000000 00000000 00000000     X.. ............

0800a820 <CSWTCH.32>:
 800a820:	00000400 00000600 00000000 00000000     ................
 800a830:	34346973 00003233 00000920 00000000     si4432.. .......

0800a840 <spicfg>:
 800a840:	080073e1 40010800 000c0004 00000000     .s.....@........

0800a850 <_ctype_>:
 800a850:	20202000 20202020 28282020 20282828     .         ((((( 
 800a860:	20202020 20202020 20202020 20202020                     
 800a870:	10108820 10101010 10101010 10101010      ...............
 800a880:	04040410 04040404 10040404 10101010     ................
 800a890:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800a8a0:	01010101 01010101 01010101 10101010     ................
 800a8b0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800a8c0:	02020202 02020202 02020202 10101010     ................
 800a8d0:	00000020 00000000 00000000 00000000      ...............
	...
