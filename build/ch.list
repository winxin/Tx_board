
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <main.4457>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000140:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000144:	2400      	movs	r4, #0
 8000146:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800014a:	f04f 32ff 	mov.w	r2, #4294967295
 800014e:	6933      	ldr	r3, [r6, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8000150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000154:	6132      	str	r2, [r6, #16]
 8000156:	6134      	str	r4, [r6, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000158:	68f3      	ldr	r3, [r6, #12]
 800015a:	60f2      	str	r2, [r6, #12]
 800015c:	60f4      	str	r4, [r6, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800015e:	69f3      	ldr	r3, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000160:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000164:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
 8000168:	61f0      	str	r0, [r6, #28]
  rccEnableBKPInterface(FALSE);
 800016a:	69f5      	ldr	r5, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800016c:	f2c4 0100 	movt	r1, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8000170:	f045 6700 	orr.w	r7, r5, #134217728	; 0x8000000
 8000174:	61f7      	str	r7, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000176:	f8d1 b000 	ldr.w	fp, [r1]
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
 800017a:	4bca      	ldr	r3, [pc, #808]	; (80004a4 <__fini_array_end+0x364>)
 800017c:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
 8000180:	f8c1 b000 	str.w	fp, [r1]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000184:	276c      	movs	r7, #108	; 0x6c
 8000186:	2580      	movs	r5, #128	; 0x80
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 8000188:	4620      	mov	r0, r4
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800018a:	49c7      	ldr	r1, [pc, #796]	; (80004a8 <__fini_array_end+0x368>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 800018c:	f04f 0a08 	mov.w	sl, #8
 8000190:	f04f 091c 	mov.w	r9, #28
 8000194:	f04f 0830 	mov.w	r8, #48	; 0x30
 8000198:	f04f 0c44 	mov.w	ip, #68	; 0x44
 800019c:	f04f 0e58 	mov.w	lr, #88	; 0x58
 80001a0:	f2c4 0a02 	movt	sl, #16386	; 0x4002
 80001a4:	f2c4 0902 	movt	r9, #16386	; 0x4002
 80001a8:	f2c4 0802 	movt	r8, #16386	; 0x4002
 80001ac:	f2c4 0c02 	movt	ip, #16386	; 0x4002
 80001b0:	f2c4 0e02 	movt	lr, #16386	; 0x4002
 80001b4:	f2c4 0702 	movt	r7, #16386	; 0x4002
 80001b8:	f2c4 0502 	movt	r5, #16386	; 0x4002
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 80001c0:	600c      	str	r4, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001c2:	f8ca 4000 	str.w	r4, [sl]
    dma_isr_redir[i].dma_func = NULL;
 80001c6:	601c      	str	r4, [r3, #0]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001c8:	f8c9 4000 	str.w	r4, [r9]
    dma_isr_redir[i].dma_func = NULL;
 80001cc:	609c      	str	r4, [r3, #8]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001ce:	f8c8 4000 	str.w	r4, [r8]
    dma_isr_redir[i].dma_func = NULL;
 80001d2:	611c      	str	r4, [r3, #16]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001d4:	f8cc 4000 	str.w	r4, [ip]
    dma_isr_redir[i].dma_func = NULL;
 80001d8:	619c      	str	r4, [r3, #24]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001da:	f8ce 4000 	str.w	r4, [lr]
    dma_isr_redir[i].dma_func = NULL;
 80001de:	621c      	str	r4, [r3, #32]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001e0:	603c      	str	r4, [r7, #0]
    dma_isr_redir[i].dma_func = NULL;
 80001e2:	629c      	str	r4, [r3, #40]	; 0x28
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001e4:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 80001e6:	631c      	str	r4, [r3, #48]	; 0x30
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001e8:	6042      	str	r2, [r0, #4]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001ea:	69b7      	ldr	r7, [r6, #24]
 80001ec:	b091      	sub	sp, #68	; 0x44
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001f2:	9704      	str	r7, [sp, #16]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001f4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80001f8:	9102      	str	r1, [sp, #8]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001fa:	9904      	ldr	r1, [sp, #16]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001fc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000200:	f041 017d 	orr.w	r1, r1, #125	; 0x7d
 8000204:	9104      	str	r1, [sp, #16]
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8000206:	f64e 51ef 	movw	r1, #60911	; 0xedef
 800020a:	f6cf 71ff 	movt	r1, #65535	; 0xffff
 800020e:	9103      	str	r1, [sp, #12]
  GPIOB->CRH = config->PBData.crh;
 8000210:	f648 0138 	movw	r1, #34872	; 0x8838
 8000214:	f6c8 0182 	movt	r1, #34946	; 0x8882
 8000218:	9105      	str	r1, [sp, #20]
  GPIOB->CRL = config->PBData.crl;
 800021a:	f648 0188 	movw	r1, #34952	; 0x8888
 800021e:	f6c8 0122 	movt	r1, #34850	; 0x8822
 8000222:	9106      	str	r1, [sp, #24]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8000224:	f648 0144 	movw	r1, #34884	; 0x8844
 8000228:	f6c8 0188 	movt	r1, #34952	; 0x8888
 800022c:	9107      	str	r1, [sp, #28]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 800022e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000232:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000236:	9108      	str	r1, [sp, #32]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8000238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000240:	9109      	str	r1, [sp, #36]	; 0x24
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000242:	9904      	ldr	r1, [sp, #16]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8000244:	f2c4 0c01 	movt	ip, #16385	; 0x4001
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000248:	61b1      	str	r1, [r6, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800024a:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 800024e:	f8cc 100c 	str.w	r1, [ip, #12]
  GPIOA->CRH = config->PAData.crh;
 8000252:	f248 4ab8 	movw	sl, #33976	; 0x84b8
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8000256:	9903      	ldr	r1, [sp, #12]
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8000258:	f644 3988 	movw	r9, #19336	; 0x4b88
  GPIOB->ODR = config->PBData.odr;
 800025c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 8000260:	f2c4 0801 	movt	r8, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8000264:	f6c2 0a88 	movt	sl, #10376	; 0x2888
  GPIOA->CRL = config->PAData.crl;
 8000268:	f6cb 09b3 	movt	r9, #47283	; 0xb8b3

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 800026c:	f8cc a004 	str.w	sl, [ip, #4]
  GPIOA->CRL = config->PAData.crl;
 8000270:	f8cc 9000 	str.w	r9, [ip]
  GPIOB->ODR = config->PBData.odr;
 8000274:	f8c8 100c 	str.w	r1, [r8, #12]
  GPIOB->CRH = config->PBData.crh;
 8000278:	9905      	ldr	r1, [sp, #20]
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800027a:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800027e:	f8c8 1004 	str.w	r1, [r8, #4]
  GPIOB->CRL = config->PBData.crl;
 8000282:	9906      	ldr	r1, [sp, #24]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8000284:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8000288:	f8c8 1000 	str.w	r1, [r8]
  GPIOC->ODR = config->PCData.odr;
 800028c:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8000290:	f2c4 0001 	movt	r0, #16385	; 0x4001
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8000294:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8000298:	f8ce 200c 	str.w	r2, [lr, #12]
  GPIOC->CRH = config->PCData.crh;
 800029c:	f8ce 1004 	str.w	r1, [lr, #4]
  GPIOC->CRL = config->PCData.crl;
 80002a0:	f8ce 1000 	str.w	r1, [lr]
  GPIOD->ODR = config->PDData.odr;
 80002a4:	60c2      	str	r2, [r0, #12]
  GPIOD->CRH = config->PDData.crh;
 80002a6:	6041      	str	r1, [r0, #4]
  GPIOD->CRL = config->PDData.crl;
 80002a8:	9907      	ldr	r1, [sp, #28]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80002aa:	2701      	movs	r7, #1
 80002ac:	6001      	str	r1, [r0, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80002ae:	9802      	ldr	r0, [sp, #8]
  GPIOE->CRH = config->PEData.crh;
 80002b0:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80002b4:	60c2      	str	r2, [r0, #12]
  GPIOE->CRH = config->PEData.crh;
 80002b6:	6041      	str	r1, [r0, #4]
  GPIOE->CRL = config->PEData.crl;
 80002b8:	6001      	str	r1, [r0, #0]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80002ba:	9808      	ldr	r0, [sp, #32]
 80002bc:	f641 0120 	movw	r1, #6176	; 0x1820
 80002c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002c4:	60c8      	str	r0, [r1, #12]
 80002c6:	700f      	strb	r7, [r1, #0]
  gptp->config = NULL;
 80002c8:	604c      	str	r4, [r1, #4]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80002ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80002cc:	f641 0130 	movw	r1, #6192	; 0x1830
 80002d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002d4:	60c8      	str	r0, [r1, #12]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 80002d6:	4875      	ldr	r0, [pc, #468]	; (80004ac <__fini_array_end+0x36c>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80002d8:	4b75      	ldr	r3, [pc, #468]	; (80004b0 <__fini_array_end+0x370>)
 80002da:	8002      	strh	r2, [r0, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80002dc:	4875      	ldr	r0, [pc, #468]	; (80004b4 <__fini_array_end+0x374>)
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80002de:	700f      	strb	r7, [r1, #0]
  gptp->config = NULL;
 80002e0:	604c      	str	r4, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80002e2:	f103 010c 	add.w	r1, r3, #12
 80002e6:	6119      	str	r1, [r3, #16]
 80002e8:	60d9      	str	r1, [r3, #12]
 80002ea:	6218      	str	r0, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80002ec:	f100 010c 	add.w	r1, r0, #12
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80002f0:	f241 000a 	movw	r0, #4106	; 0x100a
 80002f4:	6298      	str	r0, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80002f6:	300e      	adds	r0, #14
 80002f8:	62d8      	str	r0, [r3, #44]	; 0x2c

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80002fa:	69f0      	ldr	r0, [r6, #28]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80002fc:	f44f 5b40 	mov.w	fp, #12288	; 0x3000
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8000300:	4d6d      	ldr	r5, [pc, #436]	; (80004b8 <__fini_array_end+0x378>)
 8000302:	f2c4 0b01 	movt	fp, #16385	; 0x4001
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8000306:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800030a:	ea40 0c07 	orr.w	ip, r0, r7
 800030e:	701f      	strb	r7, [r3, #0]
  spip->config = NULL;
 8000310:	605c      	str	r4, [r3, #4]
#if SPI_USE_WAIT
  spip->thread = NULL;
 8000312:	609c      	str	r4, [r3, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000314:	615c      	str	r4, [r3, #20]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8000316:	f8c3 b01c 	str.w	fp, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800031a:	6259      	str	r1, [r3, #36]	; 0x24

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800031c:	f645 59bf 	movw	r9, #23999	; 0x5dbf
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000324:	f44f 4a61 	mov.w	sl, #57600	; 0xe100
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000328:	f44f 416d 	mov.w	r1, #60672	; 0xed00
 800032c:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000330:	f2ce 0a00 	movt	sl, #57344	; 0xe000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000334:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000338:	702f      	strb	r7, [r5, #0]
  usbp->config       = NULL;
 800033a:	606c      	str	r4, [r5, #4]
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800033c:	62ec      	str	r4, [r5, #44]	; 0x2c
    usbp->out_params[i] = NULL;
 800033e:	64ac      	str	r4, [r5, #72]	; 0x48
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000340:	632c      	str	r4, [r5, #48]	; 0x30
    usbp->out_params[i] = NULL;
 8000342:	64ec      	str	r4, [r5, #76]	; 0x4c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000344:	636c      	str	r4, [r5, #52]	; 0x34
    usbp->out_params[i] = NULL;
 8000346:	652c      	str	r4, [r5, #80]	; 0x50
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000348:	63ac      	str	r4, [r5, #56]	; 0x38
    usbp->out_params[i] = NULL;
 800034a:	656c      	str	r4, [r5, #84]	; 0x54
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800034c:	63ec      	str	r4, [r5, #60]	; 0x3c
    usbp->out_params[i] = NULL;
 800034e:	65ac      	str	r4, [r5, #88]	; 0x58
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000350:	642c      	str	r4, [r5, #64]	; 0x40
    usbp->out_params[i] = NULL;
 8000352:	65ec      	str	r4, [r5, #92]	; 0x5c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000354:	646c      	str	r4, [r5, #68]	; 0x44
    usbp->out_params[i] = NULL;
 8000356:	662c      	str	r4, [r5, #96]	; 0x60
  }
  usbp->transmitting = 0;
 8000358:	812c      	strh	r4, [r5, #8]
  usbp->receiving    = 0;
 800035a:	816c      	strh	r4, [r5, #10]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800035c:	f8c6 c01c 	str.w	ip, [r6, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000360:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000364:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8000368:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800036a:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800036c:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800036e:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000370:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000372:	601f      	str	r7, [r3, #0]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	f88a 331c 	strb.w	r3, [sl, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800037a:	f8ca 0180 	str.w	r0, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800037e:	f8ca 0000 	str.w	r0, [sl]
 8000382:	608c      	str	r4, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000384:	f8d1 b00c 	ldr.w	fp, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000388:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                 |
 800038c:	f44f 7340 	mov.w	r3, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000390:	ea0b 0000 	and.w	r0, fp, r0
  reg_value  =  (reg_value                                 |
 8000394:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
 8000398:	4303      	orrs	r3, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800039a:	f64e 50f0 	movw	r0, #60912	; 0xedf0
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800039e:	60cb      	str	r3, [r1, #12]
 80003a0:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80003a4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80003a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80003ac:	f04c 7980 	orr.w	r9, ip, #16777216	; 0x1000000
 80003b0:	f8c0 900c 	str.w	r9, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80003b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003b8:	6818      	ldr	r0, [r3, #0]
 80003ba:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80004c0 <__fini_array_end+0x380>
 80003be:	4338      	orrs	r0, r7
 80003c0:	6018      	str	r0, [r3, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003c2:	f04f 0b20 	mov.w	fp, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 80003c6:	f109 031c 	add.w	r3, r9, #28
 80003ca:	2010      	movs	r0, #16
 80003cc:	77c8      	strb	r0, [r1, #31]
 80003ce:	f881 b022 	strb.w	fp, [r1, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80003d2:	a80a      	add	r0, sp, #40	; 0x28
 80003d4:	f8c9 3020 	str.w	r3, [r9, #32]
 80003d8:	f8c9 301c 	str.w	r3, [r9, #28]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80003dc:	920a      	str	r2, [sp, #40]	; 0x28
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80003de:	2300      	movs	r3, #0
 80003e0:	2200      	movs	r2, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 80003e2:	f8a9 e024 	strh.w	lr, [r9, #36]	; 0x24
 80003e6:	f8c9 9004 	str.w	r9, [r9, #4]
 80003ea:	f8c9 9000 	str.w	r9, [r9]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80003ee:	f8c9 4008 	str.w	r4, [r9, #8]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80003f2:	f8c9 9014 	str.w	r9, [r9, #20]
 80003f6:	f8c9 9010 	str.w	r9, [r9, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 80003fa:	f8a9 4026 	strh.w	r4, [r9, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 80003fe:	f8c9 4070 	str.w	r4, [r9, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000402:	940b      	str	r4, [sp, #44]	; 0x2c
  tmp->last       = (rtcnt_t)0;
 8000404:	940c      	str	r4, [sp, #48]	; 0x30
  tmp->n          = (ucnt_t)0;
 8000406:	940d      	str	r4, [sp, #52]	; 0x34
  tmp->cumulative = (rttime_t)0;
 8000408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800040c:	f002 fc88 	bl	8002d20 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000410:	a80a      	add	r0, sp, #40	; 0x28
 8000412:	f002 fc5d 	bl	8002cd0 <chTMStopMeasurementX>
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <__fini_array_end+0x37c>)
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000418:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80004c4 <__fini_array_end+0x384>
 800041c:	f103 0e10 	add.w	lr, r3, #16
 8000420:	f8c3 e010 	str.w	lr, [r3, #16]
 8000424:	f8c3 e014 	str.w	lr, [r3, #20]
 8000428:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80004c8 <__fini_array_end+0x388>
 800042c:	f02c 0c07 	bic.w	ip, ip, #7
 8000430:	f8ce c000 	str.w	ip, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000434:	f8df c094 	ldr.w	ip, [pc, #148]	; 80004cc <__fini_array_end+0x38c>
 8000438:	f8df e094 	ldr.w	lr, [pc, #148]	; 80004d0 <__fini_array_end+0x390>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800043c:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8000440:	f02c 0c07 	bic.w	ip, ip, #7
 8000444:	f8ce c000 	str.w	ip, [lr]
 8000448:	f8df c088 	ldr.w	ip, [pc, #136]	; 80004d4 <__fini_array_end+0x394>
 800044c:	9203      	str	r2, [sp, #12]
  ch.tm.offset = tm.last;
 800044e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000450:	619c      	str	r4, [r3, #24]
 8000452:	f8c3 c000 	str.w	ip, [r3]
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 8000456:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000458:	60dc      	str	r4, [r3, #12]
 800045a:	9b03      	ldr	r3, [sp, #12]
 800045c:	f109 022c 	add.w	r2, r9, #44	; 0x2c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000460:	2040      	movs	r0, #64	; 0x40
 8000462:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000466:	f8c9 2014 	str.w	r2, [r9, #20]
 800046a:	f109 0154 	add.w	r1, r9, #84	; 0x54
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800046e:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8000472:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000476:	f8c9 903c 	str.w	r9, [r9, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800047a:	f109 0050 	add.w	r0, r9, #80	; 0x50
 800047e:	611a      	str	r2, [r3, #16]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000480:	f8c9 2018 	str.w	r2, [r9, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000484:	2200      	movs	r2, #0
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000486:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800048a:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800048e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
 8000492:	f8c9 1054 	str.w	r1, [r9, #84]	; 0x54
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000496:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800049a:	f8c9 4064 	str.w	r4, [r9, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 800049e:	f8c9 4060 	str.w	r4, [r9, #96]	; 0x60
 80004a2:	e019      	b.n	80004d8 <__fini_array_end+0x398>
 80004a4:	20001524 	.word	0x20001524
 80004a8:	20000fc8 	.word	0x20000fc8
 80004ac:	20001520 	.word	0x20001520
 80004b0:	200017f0 	.word	0x200017f0
 80004b4:	0800a8fc 	.word	0x0800a8fc
 80004b8:	20000fd0 	.word	0x20000fd0
 80004bc:	20001580 	.word	0x20001580
 80004c0:	20001ec0 	.word	0x20001ec0
 80004c4:	2000202b 	.word	0x2000202b
 80004c8:	200015b0 	.word	0x200015b0
 80004cc:	20005000 	.word	0x20005000
 80004d0:	20000fcc 	.word	0x20000fcc
 80004d4:	08001651 	.word	0x08001651
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 80004d8:	f889 704a 	strb.w	r7, [r9, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 80004dc:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80004e0:	f889 7048 	strb.w	r7, [r9, #72]	; 0x48

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004e4:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004e8:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80004ea:	496e      	ldr	r1, [pc, #440]	; (80006a4 <__fini_array_end+0x564>)
 80004ec:	f8d9 3018 	ldr.w	r3, [r9, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80004f0:	463a      	mov	r2, r7
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80004f2:	6199      	str	r1, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80004f4:	f109 0078 	add.w	r0, r9, #120	; 0x78
 80004f8:	21d8      	movs	r1, #216	; 0xd8
 80004fa:	9400      	str	r4, [sp, #0]
 80004fc:	4b6a      	ldr	r3, [pc, #424]	; (80006a8 <__fini_array_end+0x568>)
 80004fe:	f001 fc9f 	bl	8001e40 <chThdCreateStatic>
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;/* Disable the JTAG but keep SWD in operation */
 8000502:	4620      	mov	r0, r4
 8000504:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000508:	6842      	ldr	r2, [r0, #4]
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 800050a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80006e4 <__fini_array_end+0x5a4>
 800050e:	f042 7300 	orr.w	r3, r2, #33554432	; 0x2000000
 8000512:	6043      	str	r3, [r0, #4]
 8000514:	4865      	ldr	r0, [pc, #404]	; (80006ac <__fini_array_end+0x56c>)
 8000516:	4649      	mov	r1, r9
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8000518:	f509 73aa 	add.w	r3, r9, #340	; 0x154
 800051c:	f841 0b04 	str.w	r0, [r1], #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000520:	f109 0254 	add.w	r2, r9, #84	; 0x54
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8000524:	f8c9 1004 	str.w	r1, [r9, #4]
  iqp->q_top = bp + size;
 8000528:	f8c9 301c 	str.w	r3, [r9, #28]
  iqp->q_notify = infy;
 800052c:	4960      	ldr	r1, [pc, #384]	; (80006b0 <__fini_array_end+0x570>)
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 800052e:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8000532:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
 8000536:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 800053a:	4b5e      	ldr	r3, [pc, #376]	; (80006b4 <__fini_array_end+0x574>)
 800053c:	f109 0e0c 	add.w	lr, r9, #12
 8000540:	f109 0030 	add.w	r0, r9, #48	; 0x30
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000544:	f509 7c15 	add.w	ip, r9, #596	; 0x254
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000548:	f8c9 2020 	str.w	r2, [r9, #32]
 800054c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 8000550:	f8c9 2018 	str.w	r2, [r9, #24]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000558:	f8c9 e010 	str.w	lr, [r9, #16]
 800055c:	f8c9 e00c 	str.w	lr, [r9, #12]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8000560:	f8c9 1028 	str.w	r1, [r9, #40]	; 0x28
 8000564:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
 8000568:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800056c:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000570:	f8c9 c040 	str.w	ip, [r9, #64]	; 0x40
  oqp->q_notify = onfy;
 8000574:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8000578:	f889 7008 	strb.w	r7, [r9, #8]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800057c:	f8c9 4014 	str.w	r4, [r9, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 8000580:	f8c9 902c 	str.w	r9, [r9, #44]	; 0x2c
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 8000584:	f8c9 9050 	str.w	r9, [r9, #80]	; 0x50

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000588:	f38b 8811 	msr	BASEPRI, fp
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 800058c:	4f4a      	ldr	r7, [pc, #296]	; (80006b8 <__fini_array_end+0x578>)
  sdup->state = SDU_READY;
 800058e:	2002      	movs	r0, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
 8000590:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 8000594:	f8c9 7254 	str.w	r7, [r9, #596]	; 0x254

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
 8000598:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
  usbp->in_params[config->int_in - 1]    = sdup;
 800059c:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
  sdup->config = config;
  sdup->state = SDU_READY;
 80005a0:	f889 0008 	strb.w	r0, [r9, #8]
 80005a4:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	f8c8 1010 	str.w	r1, [r8, #16]
  chThdSleepMilliseconds(1500);
 80005b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005b4:	f007 fa8c 	bl	8007ad0 <chThdSleep>
 80005b8:	f38b 8811 	msr	BASEPRI, fp
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 80005bc:	782f      	ldrb	r7, [r5, #0]
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 80005be:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <__fini_array_end+0x57c>)
 80005c0:	2f01      	cmp	r7, #1
 80005c2:	606a      	str	r2, [r5, #4]
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80005c4:	60ec      	str	r4, [r5, #12]
 80005c6:	612c      	str	r4, [r5, #16]
 80005c8:	616c      	str	r4, [r5, #20]
 80005ca:	61ac      	str	r4, [r5, #24]
 80005cc:	61ec      	str	r4, [r5, #28]
 80005ce:	622c      	str	r4, [r5, #32]
 80005d0:	626c      	str	r4, [r5, #36]	; 0x24
 80005d2:	62ac      	str	r4, [r5, #40]	; 0x28
 80005d4:	d046      	beq.n	8000664 <__fini_array_end+0x524>
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 80005d6:	2402      	movs	r4, #2
 80005d8:	702c      	strb	r4, [r5, #0]
 80005da:	2400      	movs	r4, #0
 80005dc:	f384 8811 	msr	BASEPRI, r4
 80005e0:	4d37      	ldr	r5, [pc, #220]	; (80006c0 <__fini_array_end+0x580>)
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 80005e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	6159      	str	r1, [r3, #20]
 80005f0:	4e34      	ldr	r6, [pc, #208]	; (80006c4 <__fini_array_end+0x584>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80005f2:	9400      	str	r4, [sp, #0]
 80005f4:	602d      	str	r5, [r5, #0]
 80005f6:	4d34      	ldr	r5, [pc, #208]	; (80006c8 <__fini_array_end+0x588>)
 80005f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <__fini_array_end+0x58c>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8000600:	2701      	movs	r7, #1
 8000602:	4833      	ldr	r0, [pc, #204]	; (80006d0 <__fini_array_end+0x590>)
 8000604:	f001 fc1c 	bl	8001e40 <chThdCreateStatic>
	chBSemObjectInit(&Silabs_busy,FALSE);/*Init it as not taken*/
	chBSemObjectInit(&Silabs_callback,FALSE);/*Init it as not taken*/
	/*
	* Creates the thread. Thread has priority slightly above normal and takes no argument
	*/
	return chThdCreateStatic(waThreadSI, sizeof(waThreadSI), NORMALPRIO+1, SI_Thread, (void*)NULL);
 8000608:	9400      	str	r4, [sp, #0]
 800060a:	4832      	ldr	r0, [pc, #200]	; (80006d4 <__fini_array_end+0x594>)
 800060c:	6076      	str	r6, [r6, #4]
 800060e:	6036      	str	r6, [r6, #0]
 8000610:	60b7      	str	r7, [r6, #8]
 8000612:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000616:	2241      	movs	r2, #65	; 0x41
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <__fini_array_end+0x598>)
 800061a:	606d      	str	r5, [r5, #4]
 800061c:	602d      	str	r5, [r5, #0]
 800061e:	60af      	str	r7, [r5, #8]
 8000620:	f001 fc0e 	bl	8001e40 <chThdCreateStatic>
 8000624:	4e2d      	ldr	r6, [pc, #180]	; (80006dc <__fini_array_end+0x59c>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000626:	b144      	cbz	r4, 800063a <__fini_array_end+0x4fa>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8000628:	7f21      	ldrb	r1, [r4, #28]
 800062a:	290f      	cmp	r1, #15
 800062c:	d015      	beq.n	800065a <__fini_array_end+0x51a>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 800062e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000632:	f007 fa4d 	bl	8007ad0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000636:	2c00      	cmp	r4, #0
 8000638:	d1f6      	bne.n	8000628 <__fini_array_end+0x4e8>
 800063a:	f8d9 2254 	ldr.w	r2, [r9, #596]	; 0x254
 800063e:	6810      	ldr	r0, [r2, #0]
 8000640:	7803      	ldrb	r3, [r0, #0]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d1f0      	bne.n	8000628 <__fini_array_end+0x4e8>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8000646:	4620      	mov	r0, r4
 8000648:	9600      	str	r6, [sp, #0]
 800064a:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <__fini_array_end+0x5a0>)
 8000652:	f002 fa35 	bl	8002ac0 <chThdCreateFromHeap>
 8000656:	4604      	mov	r4, r0
 8000658:	e7e9      	b.n	800062e <__fini_array_end+0x4ee>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 800065a:	4620      	mov	r0, r4
 800065c:	f001 feb0 	bl	80023c0 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8000660:	2400      	movs	r4, #0
 8000662:	e7e4      	b.n	800062e <__fini_array_end+0x4ee>
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8000664:	69f0      	ldr	r0, [r6, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8000666:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800066a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 800066e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000672:	61f0      	str	r0, [r6, #28]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000674:	f44f 2100 	mov.w	r1, #524288	; 0x80000
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8000678:	641f      	str	r7, [r3, #64]	; 0x40
 800067a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800067e:	26d0      	movs	r6, #208	; 0xd0
 8000680:	27e0      	movs	r7, #224	; 0xe0
 8000682:	f88a 6313 	strb.w	r6, [sl, #787]	; 0x313
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 8000686:	4628      	mov	r0, r5
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000688:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800068c:	f8ca 1000 	str.w	r1, [sl]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000690:	f88a 7314 	strb.w	r7, [sl, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000694:	f8ca 2180 	str.w	r2, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000698:	f8ca 2000 	str.w	r2, [sl]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 800069c:	641c      	str	r4, [r3, #64]	; 0x40
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 800069e:	f006 f8df 	bl	8006860 <_usb_reset>
 80006a2:	e798      	b.n	80005d6 <__fini_array_end+0x496>
 80006a4:	0800a6e0 	.word	0x0800a6e0
 80006a8:	080016f1 	.word	0x080016f1
 80006ac:	0800a8d0 	.word	0x0800a8d0
 80006b0:	080067e1 	.word	0x080067e1
 80006b4:	08007971 	.word	0x08007971
 80006b8:	0800a950 	.word	0x0800a950
 80006bc:	0800a960 	.word	0x0800a960
 80006c0:	20001eb8 	.word	0x20001eb8
 80006c4:	20000fa0 	.word	0x20000fa0
 80006c8:	20000fb4 	.word	0x20000fb4
 80006cc:	08008291 	.word	0x08008291
 80006d0:	200015b8 	.word	0x200015b8
 80006d4:	20001058 	.word	0x20001058
 80006d8:	08009801 	.word	0x08009801
 80006dc:	0800a590 	.word	0x0800a590
 80006e0:	08009b31 	.word	0x08009b31
 80006e4:	20000d0c 	.word	0x20000d0c
 80006e8:	f3af 8000 	nop.w
 80006ec:	f3af 8000 	nop.w

080006f0 <_port_switch>:
 80006f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80006f8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80006fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000700 <_port_thread_start>:
 8000700:	2300      	movs	r3, #0
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	4628      	mov	r0, r5
 8000708:	47a0      	blx	r4
 800070a:	f009 fcb1 	bl	800a070 <chThdExit>

0800070e <_port_switch_from_isr>:
 800070e:	f009 fcb7 	bl	800a080 <chSchDoReschedule>

08000712 <_port_exit_from_isr>:
 8000712:	df00      	svc	0
 8000714:	e7fe      	b.n	8000714 <_port_exit_from_isr+0x2>
	...

08000720 <__aeabi_drsub>:
 8000720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e002      	b.n	800072c <__adddf3>
 8000726:	bf00      	nop

08000728 <__aeabi_dsub>:
 8000728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800072c <__adddf3>:
 800072c:	b530      	push	{r4, r5, lr}
 800072e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000732:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000736:	ea94 0f05 	teq	r4, r5
 800073a:	bf08      	it	eq
 800073c:	ea90 0f02 	teqeq	r0, r2
 8000740:	bf1f      	itttt	ne
 8000742:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000746:	ea55 0c02 	orrsne.w	ip, r5, r2
 800074a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800074e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000752:	f000 80e2 	beq.w	800091a <__adddf3+0x1ee>
 8000756:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800075a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800075e:	bfb8      	it	lt
 8000760:	426d      	neglt	r5, r5
 8000762:	dd0c      	ble.n	800077e <__adddf3+0x52>
 8000764:	442c      	add	r4, r5
 8000766:	ea80 0202 	eor.w	r2, r0, r2
 800076a:	ea81 0303 	eor.w	r3, r1, r3
 800076e:	ea82 0000 	eor.w	r0, r2, r0
 8000772:	ea83 0101 	eor.w	r1, r3, r1
 8000776:	ea80 0202 	eor.w	r2, r0, r2
 800077a:	ea81 0303 	eor.w	r3, r1, r3
 800077e:	2d36      	cmp	r5, #54	; 0x36
 8000780:	bf88      	it	hi
 8000782:	bd30      	pophi	{r4, r5, pc}
 8000784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000794:	d002      	beq.n	800079c <__adddf3+0x70>
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80007a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80007a8:	d002      	beq.n	80007b0 <__adddf3+0x84>
 80007aa:	4252      	negs	r2, r2
 80007ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b0:	ea94 0f05 	teq	r4, r5
 80007b4:	f000 80a7 	beq.w	8000906 <__adddf3+0x1da>
 80007b8:	f1a4 0401 	sub.w	r4, r4, #1
 80007bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80007c0:	db0d      	blt.n	80007de <__adddf3+0xb2>
 80007c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80007c6:	fa22 f205 	lsr.w	r2, r2, r5
 80007ca:	1880      	adds	r0, r0, r2
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80007d4:	1880      	adds	r0, r0, r2
 80007d6:	fa43 f305 	asr.w	r3, r3, r5
 80007da:	4159      	adcs	r1, r3
 80007dc:	e00e      	b.n	80007fc <__adddf3+0xd0>
 80007de:	f1a5 0520 	sub.w	r5, r5, #32
 80007e2:	f10e 0e20 	add.w	lr, lr, #32
 80007e6:	2a01      	cmp	r2, #1
 80007e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80007ec:	bf28      	it	cs
 80007ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80007f2:	fa43 f305 	asr.w	r3, r3, r5
 80007f6:	18c0      	adds	r0, r0, r3
 80007f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000800:	d507      	bpl.n	8000812 <__adddf3+0xe6>
 8000802:	f04f 0e00 	mov.w	lr, #0
 8000806:	f1dc 0c00 	rsbs	ip, ip, #0
 800080a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800080e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000816:	d31b      	bcc.n	8000850 <__adddf3+0x124>
 8000818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800081c:	d30c      	bcc.n	8000838 <__adddf3+0x10c>
 800081e:	0849      	lsrs	r1, r1, #1
 8000820:	ea5f 0030 	movs.w	r0, r0, rrx
 8000824:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000828:	f104 0401 	add.w	r4, r4, #1
 800082c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000834:	f080 809a 	bcs.w	800096c <__adddf3+0x240>
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800083c:	bf08      	it	eq
 800083e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000842:	f150 0000 	adcs.w	r0, r0, #0
 8000846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800084a:	ea41 0105 	orr.w	r1, r1, r5
 800084e:	bd30      	pop	{r4, r5, pc}
 8000850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000854:	4140      	adcs	r0, r0
 8000856:	eb41 0101 	adc.w	r1, r1, r1
 800085a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085e:	f1a4 0401 	sub.w	r4, r4, #1
 8000862:	d1e9      	bne.n	8000838 <__adddf3+0x10c>
 8000864:	f091 0f00 	teq	r1, #0
 8000868:	bf04      	itt	eq
 800086a:	4601      	moveq	r1, r0
 800086c:	2000      	moveq	r0, #0
 800086e:	fab1 f381 	clz	r3, r1
 8000872:	bf08      	it	eq
 8000874:	3320      	addeq	r3, #32
 8000876:	f1a3 030b 	sub.w	r3, r3, #11
 800087a:	f1b3 0220 	subs.w	r2, r3, #32
 800087e:	da0c      	bge.n	800089a <__adddf3+0x16e>
 8000880:	320c      	adds	r2, #12
 8000882:	dd08      	ble.n	8000896 <__adddf3+0x16a>
 8000884:	f102 0c14 	add.w	ip, r2, #20
 8000888:	f1c2 020c 	rsb	r2, r2, #12
 800088c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000890:	fa21 f102 	lsr.w	r1, r1, r2
 8000894:	e00c      	b.n	80008b0 <__adddf3+0x184>
 8000896:	f102 0214 	add.w	r2, r2, #20
 800089a:	bfd8      	it	le
 800089c:	f1c2 0c20 	rsble	ip, r2, #32
 80008a0:	fa01 f102 	lsl.w	r1, r1, r2
 80008a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008a8:	bfdc      	itt	le
 80008aa:	ea41 010c 	orrle.w	r1, r1, ip
 80008ae:	4090      	lslle	r0, r2
 80008b0:	1ae4      	subs	r4, r4, r3
 80008b2:	bfa2      	ittt	ge
 80008b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80008b8:	4329      	orrge	r1, r5
 80008ba:	bd30      	popge	{r4, r5, pc}
 80008bc:	ea6f 0404 	mvn.w	r4, r4
 80008c0:	3c1f      	subs	r4, #31
 80008c2:	da1c      	bge.n	80008fe <__adddf3+0x1d2>
 80008c4:	340c      	adds	r4, #12
 80008c6:	dc0e      	bgt.n	80008e6 <__adddf3+0x1ba>
 80008c8:	f104 0414 	add.w	r4, r4, #20
 80008cc:	f1c4 0220 	rsb	r2, r4, #32
 80008d0:	fa20 f004 	lsr.w	r0, r0, r4
 80008d4:	fa01 f302 	lsl.w	r3, r1, r2
 80008d8:	ea40 0003 	orr.w	r0, r0, r3
 80008dc:	fa21 f304 	lsr.w	r3, r1, r4
 80008e0:	ea45 0103 	orr.w	r1, r5, r3
 80008e4:	bd30      	pop	{r4, r5, pc}
 80008e6:	f1c4 040c 	rsb	r4, r4, #12
 80008ea:	f1c4 0220 	rsb	r2, r4, #32
 80008ee:	fa20 f002 	lsr.w	r0, r0, r2
 80008f2:	fa01 f304 	lsl.w	r3, r1, r4
 80008f6:	ea40 0003 	orr.w	r0, r0, r3
 80008fa:	4629      	mov	r1, r5
 80008fc:	bd30      	pop	{r4, r5, pc}
 80008fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000902:	4629      	mov	r1, r5
 8000904:	bd30      	pop	{r4, r5, pc}
 8000906:	f094 0f00 	teq	r4, #0
 800090a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800090e:	bf06      	itte	eq
 8000910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000914:	3401      	addeq	r4, #1
 8000916:	3d01      	subne	r5, #1
 8000918:	e74e      	b.n	80007b8 <__adddf3+0x8c>
 800091a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800091e:	bf18      	it	ne
 8000920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000924:	d029      	beq.n	800097a <__adddf3+0x24e>
 8000926:	ea94 0f05 	teq	r4, r5
 800092a:	bf08      	it	eq
 800092c:	ea90 0f02 	teqeq	r0, r2
 8000930:	d005      	beq.n	800093e <__adddf3+0x212>
 8000932:	ea54 0c00 	orrs.w	ip, r4, r0
 8000936:	bf04      	itt	eq
 8000938:	4619      	moveq	r1, r3
 800093a:	4610      	moveq	r0, r2
 800093c:	bd30      	pop	{r4, r5, pc}
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf1e      	ittt	ne
 8000944:	2100      	movne	r1, #0
 8000946:	2000      	movne	r0, #0
 8000948:	bd30      	popne	{r4, r5, pc}
 800094a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800094e:	d105      	bne.n	800095c <__adddf3+0x230>
 8000950:	0040      	lsls	r0, r0, #1
 8000952:	4149      	adcs	r1, r1
 8000954:	bf28      	it	cs
 8000956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800095a:	bd30      	pop	{r4, r5, pc}
 800095c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000960:	bf3c      	itt	cc
 8000962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000966:	bd30      	popcc	{r4, r5, pc}
 8000968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800096c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	bd30      	pop	{r4, r5, pc}
 800097a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800097e:	bf1a      	itte	ne
 8000980:	4619      	movne	r1, r3
 8000982:	4610      	movne	r0, r2
 8000984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000988:	bf1c      	itt	ne
 800098a:	460b      	movne	r3, r1
 800098c:	4602      	movne	r2, r0
 800098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000992:	bf06      	itte	eq
 8000994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000998:	ea91 0f03 	teqeq	r1, r3
 800099c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80009a0:	bd30      	pop	{r4, r5, pc}
 80009a2:	bf00      	nop

080009a4 <__aeabi_ui2d>:
 80009a4:	f090 0f00 	teq	r0, #0
 80009a8:	bf04      	itt	eq
 80009aa:	2100      	moveq	r1, #0
 80009ac:	4770      	bxeq	lr
 80009ae:	b530      	push	{r4, r5, lr}
 80009b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009b8:	f04f 0500 	mov.w	r5, #0
 80009bc:	f04f 0100 	mov.w	r1, #0
 80009c0:	e750      	b.n	8000864 <__adddf3+0x138>
 80009c2:	bf00      	nop

080009c4 <__aeabi_i2d>:
 80009c4:	f090 0f00 	teq	r0, #0
 80009c8:	bf04      	itt	eq
 80009ca:	2100      	moveq	r1, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	b530      	push	{r4, r5, lr}
 80009d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80009dc:	bf48      	it	mi
 80009de:	4240      	negmi	r0, r0
 80009e0:	f04f 0100 	mov.w	r1, #0
 80009e4:	e73e      	b.n	8000864 <__adddf3+0x138>
 80009e6:	bf00      	nop

080009e8 <__aeabi_f2d>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80009f6:	bf1f      	itttt	ne
 80009f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80009fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000a04:	4770      	bxne	lr
 8000a06:	f092 0f00 	teq	r2, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a10:	4770      	bxeq	lr
 8000a12:	b530      	push	{r4, r5, lr}
 8000a14:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a20:	e720      	b.n	8000864 <__adddf3+0x138>
 8000a22:	bf00      	nop

08000a24 <__aeabi_ul2d>:
 8000a24:	ea50 0201 	orrs.w	r2, r0, r1
 8000a28:	bf08      	it	eq
 8000a2a:	4770      	bxeq	lr
 8000a2c:	b530      	push	{r4, r5, lr}
 8000a2e:	f04f 0500 	mov.w	r5, #0
 8000a32:	e00a      	b.n	8000a4a <__aeabi_l2d+0x16>

08000a34 <__aeabi_l2d>:
 8000a34:	ea50 0201 	orrs.w	r2, r0, r1
 8000a38:	bf08      	it	eq
 8000a3a:	4770      	bxeq	lr
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000a42:	d502      	bpl.n	8000a4a <__aeabi_l2d+0x16>
 8000a44:	4240      	negs	r0, r0
 8000a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a56:	f43f aedc 	beq.w	8000812 <__adddf3+0xe6>
 8000a5a:	f04f 0203 	mov.w	r2, #3
 8000a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a62:	bf18      	it	ne
 8000a64:	3203      	addne	r2, #3
 8000a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a6a:	bf18      	it	ne
 8000a6c:	3203      	addne	r2, #3
 8000a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a72:	f1c2 0320 	rsb	r3, r2, #32
 8000a76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a82:	ea40 000e 	orr.w	r0, r0, lr
 8000a86:	fa21 f102 	lsr.w	r1, r1, r2
 8000a8a:	4414      	add	r4, r2
 8000a8c:	e6c1      	b.n	8000812 <__adddf3+0xe6>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dmul>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a9e:	bf1d      	ittte	ne
 8000aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000aa4:	ea94 0f0c 	teqne	r4, ip
 8000aa8:	ea95 0f0c 	teqne	r5, ip
 8000aac:	f000 f8de 	bleq	8000c6c <__aeabi_dmul+0x1dc>
 8000ab0:	442c      	add	r4, r5
 8000ab2:	ea81 0603 	eor.w	r6, r1, r3
 8000ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ac2:	bf18      	it	ne
 8000ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ad0:	d038      	beq.n	8000b44 <__aeabi_dmul+0xb4>
 8000ad2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000ad6:	f04f 0500 	mov.w	r5, #0
 8000ada:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000ae6:	f04f 0600 	mov.w	r6, #0
 8000aea:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000aee:	f09c 0f00 	teq	ip, #0
 8000af2:	bf18      	it	ne
 8000af4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b04:	d204      	bcs.n	8000b10 <__aeabi_dmul+0x80>
 8000b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b0a:	416d      	adcs	r5, r5
 8000b0c:	eb46 0606 	adc.w	r6, r6, r6
 8000b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b28:	bf88      	it	hi
 8000b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b2e:	d81e      	bhi.n	8000b6e <__aeabi_dmul+0xde>
 8000b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b34:	bf08      	it	eq
 8000b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b3a:	f150 0000 	adcs.w	r0, r0, #0
 8000b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b48:	ea46 0101 	orr.w	r1, r6, r1
 8000b4c:	ea40 0002 	orr.w	r0, r0, r2
 8000b50:	ea81 0103 	eor.w	r1, r1, r3
 8000b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000b58:	bfc2      	ittt	gt
 8000b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b62:	bd70      	popgt	{r4, r5, r6, pc}
 8000b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b68:	f04f 0e00 	mov.w	lr, #0
 8000b6c:	3c01      	subs	r4, #1
 8000b6e:	f300 80ab 	bgt.w	8000cc8 <__aeabi_dmul+0x238>
 8000b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b76:	bfde      	ittt	le
 8000b78:	2000      	movle	r0, #0
 8000b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000b7e:	bd70      	pople	{r4, r5, r6, pc}
 8000b80:	f1c4 0400 	rsb	r4, r4, #0
 8000b84:	3c20      	subs	r4, #32
 8000b86:	da35      	bge.n	8000bf4 <__aeabi_dmul+0x164>
 8000b88:	340c      	adds	r4, #12
 8000b8a:	dc1b      	bgt.n	8000bc4 <__aeabi_dmul+0x134>
 8000b8c:	f104 0414 	add.w	r4, r4, #20
 8000b90:	f1c4 0520 	rsb	r5, r4, #32
 8000b94:	fa00 f305 	lsl.w	r3, r0, r5
 8000b98:	fa20 f004 	lsr.w	r0, r0, r4
 8000b9c:	fa01 f205 	lsl.w	r2, r1, r5
 8000ba0:	ea40 0002 	orr.w	r0, r0, r2
 8000ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bb0:	fa21 f604 	lsr.w	r6, r1, r4
 8000bb4:	eb42 0106 	adc.w	r1, r2, r6
 8000bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bbc:	bf08      	it	eq
 8000bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f1c4 040c 	rsb	r4, r4, #12
 8000bc8:	f1c4 0520 	rsb	r5, r4, #32
 8000bcc:	fa00 f304 	lsl.w	r3, r0, r4
 8000bd0:	fa20 f005 	lsr.w	r0, r0, r5
 8000bd4:	fa01 f204 	lsl.w	r2, r1, r4
 8000bd8:	ea40 0002 	orr.w	r0, r0, r2
 8000bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000be4:	f141 0100 	adc.w	r1, r1, #0
 8000be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f1c4 0520 	rsb	r5, r4, #32
 8000bf8:	fa00 f205 	lsl.w	r2, r0, r5
 8000bfc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c00:	fa20 f304 	lsr.w	r3, r0, r4
 8000c04:	fa01 f205 	lsl.w	r2, r1, r5
 8000c08:	ea43 0302 	orr.w	r3, r3, r2
 8000c0c:	fa21 f004 	lsr.w	r0, r1, r4
 8000c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c14:	fa21 f204 	lsr.w	r2, r1, r4
 8000c18:	ea20 0002 	bic.w	r0, r0, r2
 8000c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c24:	bf08      	it	eq
 8000c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f094 0f00 	teq	r4, #0
 8000c30:	d10f      	bne.n	8000c52 <__aeabi_dmul+0x1c2>
 8000c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c36:	0040      	lsls	r0, r0, #1
 8000c38:	eb41 0101 	adc.w	r1, r1, r1
 8000c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c40:	bf08      	it	eq
 8000c42:	3c01      	subeq	r4, #1
 8000c44:	d0f7      	beq.n	8000c36 <__aeabi_dmul+0x1a6>
 8000c46:	ea41 0106 	orr.w	r1, r1, r6
 8000c4a:	f095 0f00 	teq	r5, #0
 8000c4e:	bf18      	it	ne
 8000c50:	4770      	bxne	lr
 8000c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000c56:	0052      	lsls	r2, r2, #1
 8000c58:	eb43 0303 	adc.w	r3, r3, r3
 8000c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c60:	bf08      	it	eq
 8000c62:	3d01      	subeq	r5, #1
 8000c64:	d0f7      	beq.n	8000c56 <__aeabi_dmul+0x1c6>
 8000c66:	ea43 0306 	orr.w	r3, r3, r6
 8000c6a:	4770      	bx	lr
 8000c6c:	ea94 0f0c 	teq	r4, ip
 8000c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c74:	bf18      	it	ne
 8000c76:	ea95 0f0c 	teqne	r5, ip
 8000c7a:	d00c      	beq.n	8000c96 <__aeabi_dmul+0x206>
 8000c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c80:	bf18      	it	ne
 8000c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c86:	d1d1      	bne.n	8000c2c <__aeabi_dmul+0x19c>
 8000c88:	ea81 0103 	eor.w	r1, r1, r3
 8000c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	bd70      	pop	{r4, r5, r6, pc}
 8000c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c9a:	bf06      	itte	eq
 8000c9c:	4610      	moveq	r0, r2
 8000c9e:	4619      	moveq	r1, r3
 8000ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ca4:	d019      	beq.n	8000cda <__aeabi_dmul+0x24a>
 8000ca6:	ea94 0f0c 	teq	r4, ip
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_dmul+0x222>
 8000cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cb0:	d113      	bne.n	8000cda <__aeabi_dmul+0x24a>
 8000cb2:	ea95 0f0c 	teq	r5, ip
 8000cb6:	d105      	bne.n	8000cc4 <__aeabi_dmul+0x234>
 8000cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000cbc:	bf1c      	itt	ne
 8000cbe:	4610      	movne	r0, r2
 8000cc0:	4619      	movne	r1, r3
 8000cc2:	d10a      	bne.n	8000cda <__aeabi_dmul+0x24a>
 8000cc4:	ea81 0103 	eor.w	r1, r1, r3
 8000cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cd4:	f04f 0000 	mov.w	r0, #0
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}

08000ce4 <__aeabi_ddiv>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000cf2:	bf1d      	ittte	ne
 8000cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000cf8:	ea94 0f0c 	teqne	r4, ip
 8000cfc:	ea95 0f0c 	teqne	r5, ip
 8000d00:	f000 f8a7 	bleq	8000e52 <__aeabi_ddiv+0x16e>
 8000d04:	eba4 0405 	sub.w	r4, r4, r5
 8000d08:	ea81 0e03 	eor.w	lr, r1, r3
 8000d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d14:	f000 8088 	beq.w	8000e28 <__aeabi_ddiv+0x144>
 8000d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000d3c:	429d      	cmp	r5, r3
 8000d3e:	bf08      	it	eq
 8000d40:	4296      	cmpeq	r6, r2
 8000d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000d4a:	d202      	bcs.n	8000d52 <__aeabi_ddiv+0x6e>
 8000d4c:	085b      	lsrs	r3, r3, #1
 8000d4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d52:	1ab6      	subs	r6, r6, r2
 8000d54:	eb65 0503 	sbc.w	r5, r5, r3
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000d66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d6e:	bf22      	ittt	cs
 8000d70:	1ab6      	subcs	r6, r6, r2
 8000d72:	4675      	movcs	r5, lr
 8000d74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d78:	085b      	lsrs	r3, r3, #1
 8000d7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d86:	bf22      	ittt	cs
 8000d88:	1ab6      	subcs	r6, r6, r2
 8000d8a:	4675      	movcs	r5, lr
 8000d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d9e:	bf22      	ittt	cs
 8000da0:	1ab6      	subcs	r6, r6, r2
 8000da2:	4675      	movcs	r5, lr
 8000da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dae:	ebb6 0e02 	subs.w	lr, r6, r2
 8000db2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000db6:	bf22      	ittt	cs
 8000db8:	1ab6      	subcs	r6, r6, r2
 8000dba:	4675      	movcs	r5, lr
 8000dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dc0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000dc4:	d018      	beq.n	8000df8 <__aeabi_ddiv+0x114>
 8000dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000de2:	d1c0      	bne.n	8000d66 <__aeabi_ddiv+0x82>
 8000de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000de8:	d10b      	bne.n	8000e02 <__aeabi_ddiv+0x11e>
 8000dea:	ea41 0100 	orr.w	r1, r1, r0
 8000dee:	f04f 0000 	mov.w	r0, #0
 8000df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000df6:	e7b6      	b.n	8000d66 <__aeabi_ddiv+0x82>
 8000df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000dfc:	bf04      	itt	eq
 8000dfe:	4301      	orreq	r1, r0
 8000e00:	2000      	moveq	r0, #0
 8000e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000e06:	bf88      	it	hi
 8000e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000e0c:	f63f aeaf 	bhi.w	8000b6e <__aeabi_dmul+0xde>
 8000e10:	ebb5 0c03 	subs.w	ip, r5, r3
 8000e14:	bf04      	itt	eq
 8000e16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e1e:	f150 0000 	adcs.w	r0, r0, #0
 8000e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000e34:	bfc2      	ittt	gt
 8000e36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000e3e:	bd70      	popgt	{r4, r5, r6, pc}
 8000e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e44:	f04f 0e00 	mov.w	lr, #0
 8000e48:	3c01      	subs	r4, #1
 8000e4a:	e690      	b.n	8000b6e <__aeabi_dmul+0xde>
 8000e4c:	ea45 0e06 	orr.w	lr, r5, r6
 8000e50:	e68d      	b.n	8000b6e <__aeabi_dmul+0xde>
 8000e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e56:	ea94 0f0c 	teq	r4, ip
 8000e5a:	bf08      	it	eq
 8000e5c:	ea95 0f0c 	teqeq	r5, ip
 8000e60:	f43f af3b 	beq.w	8000cda <__aeabi_dmul+0x24a>
 8000e64:	ea94 0f0c 	teq	r4, ip
 8000e68:	d10a      	bne.n	8000e80 <__aeabi_ddiv+0x19c>
 8000e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e6e:	f47f af34 	bne.w	8000cda <__aeabi_dmul+0x24a>
 8000e72:	ea95 0f0c 	teq	r5, ip
 8000e76:	f47f af25 	bne.w	8000cc4 <__aeabi_dmul+0x234>
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	e72c      	b.n	8000cda <__aeabi_dmul+0x24a>
 8000e80:	ea95 0f0c 	teq	r5, ip
 8000e84:	d106      	bne.n	8000e94 <__aeabi_ddiv+0x1b0>
 8000e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e8a:	f43f aefd 	beq.w	8000c88 <__aeabi_dmul+0x1f8>
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	e722      	b.n	8000cda <__aeabi_dmul+0x24a>
 8000e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e98:	bf18      	it	ne
 8000e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e9e:	f47f aec5 	bne.w	8000c2c <__aeabi_dmul+0x19c>
 8000ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ea6:	f47f af0d 	bne.w	8000cc4 <__aeabi_dmul+0x234>
 8000eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000eae:	f47f aeeb 	bne.w	8000c88 <__aeabi_dmul+0x1f8>
 8000eb2:	e712      	b.n	8000cda <__aeabi_dmul+0x24a>
	...

08000ec0 <__aeabi_d2iz>:
 8000ec0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ec4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ec8:	d215      	bcs.n	8000ef6 <__aeabi_d2iz+0x36>
 8000eca:	d511      	bpl.n	8000ef0 <__aeabi_d2iz+0x30>
 8000ecc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ed0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ed4:	d912      	bls.n	8000efc <__aeabi_d2iz+0x3c>
 8000ed6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ede:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ee2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ee6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eea:	bf18      	it	ne
 8000eec:	4240      	negne	r0, r0
 8000eee:	4770      	bx	lr
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	4770      	bx	lr
 8000ef6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000efa:	d105      	bne.n	8000f08 <__aeabi_d2iz+0x48>
 8000efc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000f00:	bf08      	it	eq
 8000f02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <__aeabi_d2uiz>:
 8000f10:	004a      	lsls	r2, r1, #1
 8000f12:	d211      	bcs.n	8000f38 <__aeabi_d2uiz+0x28>
 8000f14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f18:	d211      	bcs.n	8000f3e <__aeabi_d2uiz+0x2e>
 8000f1a:	d50d      	bpl.n	8000f38 <__aeabi_d2uiz+0x28>
 8000f1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f24:	d40e      	bmi.n	8000f44 <__aeabi_d2uiz+0x34>
 8000f26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f32:	fa23 f002 	lsr.w	r0, r3, r2
 8000f36:	4770      	bx	lr
 8000f38:	f04f 0000 	mov.w	r0, #0
 8000f3c:	4770      	bx	lr
 8000f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f42:	d102      	bne.n	8000f4a <__aeabi_d2uiz+0x3a>
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	4770      	bx	lr
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_d2f>:
 8000f50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000f58:	bf24      	itt	cs
 8000f5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000f5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000f62:	d90d      	bls.n	8000f80 <__aeabi_d2f+0x30>
 8000f64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000f6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000f70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f84:	d121      	bne.n	8000fca <__aeabi_d2f+0x7a>
 8000f86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f8a:	bfbc      	itt	lt
 8000f8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f90:	4770      	bxlt	lr
 8000f92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f9a:	f1c2 0218 	rsb	r2, r2, #24
 8000f9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000fa2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000fa6:	fa20 f002 	lsr.w	r0, r0, r2
 8000faa:	bf18      	it	ne
 8000fac:	f040 0001 	orrne.w	r0, r0, #1
 8000fb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000fb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000fbc:	ea40 000c 	orr.w	r0, r0, ip
 8000fc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000fc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fc8:	e7cc      	b.n	8000f64 <__aeabi_d2f+0x14>
 8000fca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000fce:	d107      	bne.n	8000fe0 <__aeabi_d2f+0x90>
 8000fd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bxne	lr
 8000fe0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000fe4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fe8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_frsub>:
 8000ff0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ff4:	e002      	b.n	8000ffc <__addsf3>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fsub>:
 8000ff8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ffc <__addsf3>:
 8000ffc:	0042      	lsls	r2, r0, #1
 8000ffe:	bf1f      	itttt	ne
 8001000:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8001004:	ea92 0f03 	teqne	r2, r3
 8001008:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800100c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001010:	d06a      	beq.n	80010e8 <__addsf3+0xec>
 8001012:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8001016:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800101a:	bfc1      	itttt	gt
 800101c:	18d2      	addgt	r2, r2, r3
 800101e:	4041      	eorgt	r1, r0
 8001020:	4048      	eorgt	r0, r1
 8001022:	4041      	eorgt	r1, r0
 8001024:	bfb8      	it	lt
 8001026:	425b      	neglt	r3, r3
 8001028:	2b19      	cmp	r3, #25
 800102a:	bf88      	it	hi
 800102c:	4770      	bxhi	lr
 800102e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800103a:	bf18      	it	ne
 800103c:	4240      	negne	r0, r0
 800103e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001042:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001046:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800104a:	bf18      	it	ne
 800104c:	4249      	negne	r1, r1
 800104e:	ea92 0f03 	teq	r2, r3
 8001052:	d03f      	beq.n	80010d4 <__addsf3+0xd8>
 8001054:	f1a2 0201 	sub.w	r2, r2, #1
 8001058:	fa41 fc03 	asr.w	ip, r1, r3
 800105c:	eb10 000c 	adds.w	r0, r0, ip
 8001060:	f1c3 0320 	rsb	r3, r3, #32
 8001064:	fa01 f103 	lsl.w	r1, r1, r3
 8001068:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800106c:	d502      	bpl.n	8001074 <__addsf3+0x78>
 800106e:	4249      	negs	r1, r1
 8001070:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8001074:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001078:	d313      	bcc.n	80010a2 <__addsf3+0xa6>
 800107a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800107e:	d306      	bcc.n	800108e <__addsf3+0x92>
 8001080:	0840      	lsrs	r0, r0, #1
 8001082:	ea4f 0131 	mov.w	r1, r1, rrx
 8001086:	f102 0201 	add.w	r2, r2, #1
 800108a:	2afe      	cmp	r2, #254	; 0xfe
 800108c:	d251      	bcs.n	8001132 <__addsf3+0x136>
 800108e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8001092:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001096:	bf08      	it	eq
 8001098:	f020 0001 	biceq.w	r0, r0, #1
 800109c:	ea40 0003 	orr.w	r0, r0, r3
 80010a0:	4770      	bx	lr
 80010a2:	0049      	lsls	r1, r1, #1
 80010a4:	eb40 0000 	adc.w	r0, r0, r0
 80010a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80010ac:	f1a2 0201 	sub.w	r2, r2, #1
 80010b0:	d1ed      	bne.n	800108e <__addsf3+0x92>
 80010b2:	fab0 fc80 	clz	ip, r0
 80010b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80010ba:	ebb2 020c 	subs.w	r2, r2, ip
 80010be:	fa00 f00c 	lsl.w	r0, r0, ip
 80010c2:	bfaa      	itet	ge
 80010c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80010c8:	4252      	neglt	r2, r2
 80010ca:	4318      	orrge	r0, r3
 80010cc:	bfbc      	itt	lt
 80010ce:	40d0      	lsrlt	r0, r2
 80010d0:	4318      	orrlt	r0, r3
 80010d2:	4770      	bx	lr
 80010d4:	f092 0f00 	teq	r2, #0
 80010d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80010dc:	bf06      	itte	eq
 80010de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80010e2:	3201      	addeq	r2, #1
 80010e4:	3b01      	subne	r3, #1
 80010e6:	e7b5      	b.n	8001054 <__addsf3+0x58>
 80010e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	bf18      	it	ne
 80010f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010f6:	d021      	beq.n	800113c <__addsf3+0x140>
 80010f8:	ea92 0f03 	teq	r2, r3
 80010fc:	d004      	beq.n	8001108 <__addsf3+0x10c>
 80010fe:	f092 0f00 	teq	r2, #0
 8001102:	bf08      	it	eq
 8001104:	4608      	moveq	r0, r1
 8001106:	4770      	bx	lr
 8001108:	ea90 0f01 	teq	r0, r1
 800110c:	bf1c      	itt	ne
 800110e:	2000      	movne	r0, #0
 8001110:	4770      	bxne	lr
 8001112:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8001116:	d104      	bne.n	8001122 <__addsf3+0x126>
 8001118:	0040      	lsls	r0, r0, #1
 800111a:	bf28      	it	cs
 800111c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8001126:	bf3c      	itt	cc
 8001128:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800112c:	4770      	bxcc	lr
 800112e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001132:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8001136:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800113a:	4770      	bx	lr
 800113c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001140:	bf16      	itet	ne
 8001142:	4608      	movne	r0, r1
 8001144:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001148:	4601      	movne	r1, r0
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	bf06      	itte	eq
 800114e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8001152:	ea90 0f01 	teqeq	r0, r1
 8001156:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800115a:	4770      	bx	lr

0800115c <__aeabi_ui2f>:
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e004      	b.n	800116c <__aeabi_i2f+0x8>
 8001162:	bf00      	nop

08001164 <__aeabi_i2f>:
 8001164:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001168:	bf48      	it	mi
 800116a:	4240      	negmi	r0, r0
 800116c:	ea5f 0c00 	movs.w	ip, r0
 8001170:	bf08      	it	eq
 8001172:	4770      	bxeq	lr
 8001174:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001178:	4601      	mov	r1, r0
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	e01c      	b.n	80011ba <__aeabi_l2f+0x2a>

08001180 <__aeabi_ul2f>:
 8001180:	ea50 0201 	orrs.w	r2, r0, r1
 8001184:	bf08      	it	eq
 8001186:	4770      	bxeq	lr
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e00a      	b.n	80011a4 <__aeabi_l2f+0x14>
 800118e:	bf00      	nop

08001190 <__aeabi_l2f>:
 8001190:	ea50 0201 	orrs.w	r2, r0, r1
 8001194:	bf08      	it	eq
 8001196:	4770      	bxeq	lr
 8001198:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800119c:	d502      	bpl.n	80011a4 <__aeabi_l2f+0x14>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	ea5f 0c01 	movs.w	ip, r1
 80011a8:	bf02      	ittt	eq
 80011aa:	4684      	moveq	ip, r0
 80011ac:	4601      	moveq	r1, r0
 80011ae:	2000      	moveq	r0, #0
 80011b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80011b4:	bf08      	it	eq
 80011b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80011ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80011be:	fabc f28c 	clz	r2, ip
 80011c2:	3a08      	subs	r2, #8
 80011c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80011c8:	db10      	blt.n	80011ec <__aeabi_l2f+0x5c>
 80011ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80011ce:	4463      	add	r3, ip
 80011d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80011d4:	f1c2 0220 	rsb	r2, r2, #32
 80011d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80011dc:	fa20 f202 	lsr.w	r2, r0, r2
 80011e0:	eb43 0002 	adc.w	r0, r3, r2
 80011e4:	bf08      	it	eq
 80011e6:	f020 0001 	biceq.w	r0, r0, #1
 80011ea:	4770      	bx	lr
 80011ec:	f102 0220 	add.w	r2, r2, #32
 80011f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80011f4:	f1c2 0220 	rsb	r2, r2, #32
 80011f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80011fc:	fa21 f202 	lsr.w	r2, r1, r2
 8001200:	eb43 0002 	adc.w	r0, r3, r2
 8001204:	bf08      	it	eq
 8001206:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800120a:	4770      	bx	lr
 800120c:	0000      	movs	r0, r0
	...

08001210 <__aeabi_fmul>:
 8001210:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001214:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001218:	bf1e      	ittt	ne
 800121a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800121e:	ea92 0f0c 	teqne	r2, ip
 8001222:	ea93 0f0c 	teqne	r3, ip
 8001226:	d06f      	beq.n	8001308 <__aeabi_fmul+0xf8>
 8001228:	441a      	add	r2, r3
 800122a:	ea80 0c01 	eor.w	ip, r0, r1
 800122e:	0240      	lsls	r0, r0, #9
 8001230:	bf18      	it	ne
 8001232:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8001236:	d01e      	beq.n	8001276 <__aeabi_fmul+0x66>
 8001238:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800123c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001240:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001244:	fba0 3101 	umull	r3, r1, r0, r1
 8001248:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800124c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001250:	bf3e      	ittt	cc
 8001252:	0049      	lslcc	r1, r1, #1
 8001254:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001258:	005b      	lslcc	r3, r3, #1
 800125a:	ea40 0001 	orr.w	r0, r0, r1
 800125e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001262:	2afd      	cmp	r2, #253	; 0xfd
 8001264:	d81d      	bhi.n	80012a2 <__aeabi_fmul+0x92>
 8001266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800126a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800126e:	bf08      	it	eq
 8001270:	f020 0001 	biceq.w	r0, r0, #1
 8001274:	4770      	bx	lr
 8001276:	f090 0f00 	teq	r0, #0
 800127a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800127e:	bf08      	it	eq
 8001280:	0249      	lsleq	r1, r1, #9
 8001282:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001286:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800128a:	3a7f      	subs	r2, #127	; 0x7f
 800128c:	bfc2      	ittt	gt
 800128e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001292:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001296:	4770      	bxgt	lr
 8001298:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	3a01      	subs	r2, #1
 80012a2:	dc5d      	bgt.n	8001360 <__aeabi_fmul+0x150>
 80012a4:	f112 0f19 	cmn.w	r2, #25
 80012a8:	bfdc      	itt	le
 80012aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80012ae:	4770      	bxle	lr
 80012b0:	f1c2 0200 	rsb	r2, r2, #0
 80012b4:	0041      	lsls	r1, r0, #1
 80012b6:	fa21 f102 	lsr.w	r1, r1, r2
 80012ba:	f1c2 0220 	rsb	r2, r2, #32
 80012be:	fa00 fc02 	lsl.w	ip, r0, r2
 80012c2:	ea5f 0031 	movs.w	r0, r1, rrx
 80012c6:	f140 0000 	adc.w	r0, r0, #0
 80012ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80012ce:	bf08      	it	eq
 80012d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80012d4:	4770      	bx	lr
 80012d6:	f092 0f00 	teq	r2, #0
 80012da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80012de:	bf02      	ittt	eq
 80012e0:	0040      	lsleq	r0, r0, #1
 80012e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80012e6:	3a01      	subeq	r2, #1
 80012e8:	d0f9      	beq.n	80012de <__aeabi_fmul+0xce>
 80012ea:	ea40 000c 	orr.w	r0, r0, ip
 80012ee:	f093 0f00 	teq	r3, #0
 80012f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80012f6:	bf02      	ittt	eq
 80012f8:	0049      	lsleq	r1, r1, #1
 80012fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80012fe:	3b01      	subeq	r3, #1
 8001300:	d0f9      	beq.n	80012f6 <__aeabi_fmul+0xe6>
 8001302:	ea41 010c 	orr.w	r1, r1, ip
 8001306:	e78f      	b.n	8001228 <__aeabi_fmul+0x18>
 8001308:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800130c:	ea92 0f0c 	teq	r2, ip
 8001310:	bf18      	it	ne
 8001312:	ea93 0f0c 	teqne	r3, ip
 8001316:	d00a      	beq.n	800132e <__aeabi_fmul+0x11e>
 8001318:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800131c:	bf18      	it	ne
 800131e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001322:	d1d8      	bne.n	80012d6 <__aeabi_fmul+0xc6>
 8001324:	ea80 0001 	eor.w	r0, r0, r1
 8001328:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800132c:	4770      	bx	lr
 800132e:	f090 0f00 	teq	r0, #0
 8001332:	bf17      	itett	ne
 8001334:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001338:	4608      	moveq	r0, r1
 800133a:	f091 0f00 	teqne	r1, #0
 800133e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001342:	d014      	beq.n	800136e <__aeabi_fmul+0x15e>
 8001344:	ea92 0f0c 	teq	r2, ip
 8001348:	d101      	bne.n	800134e <__aeabi_fmul+0x13e>
 800134a:	0242      	lsls	r2, r0, #9
 800134c:	d10f      	bne.n	800136e <__aeabi_fmul+0x15e>
 800134e:	ea93 0f0c 	teq	r3, ip
 8001352:	d103      	bne.n	800135c <__aeabi_fmul+0x14c>
 8001354:	024b      	lsls	r3, r1, #9
 8001356:	bf18      	it	ne
 8001358:	4608      	movne	r0, r1
 800135a:	d108      	bne.n	800136e <__aeabi_fmul+0x15e>
 800135c:	ea80 0001 	eor.w	r0, r0, r1
 8001360:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001364:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800136c:	4770      	bx	lr
 800136e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001372:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001376:	4770      	bx	lr

08001378 <__aeabi_fdiv>:
 8001378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800137c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001380:	bf1e      	ittt	ne
 8001382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001386:	ea92 0f0c 	teqne	r2, ip
 800138a:	ea93 0f0c 	teqne	r3, ip
 800138e:	d069      	beq.n	8001464 <__aeabi_fdiv+0xec>
 8001390:	eba2 0203 	sub.w	r2, r2, r3
 8001394:	ea80 0c01 	eor.w	ip, r0, r1
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800139e:	d037      	beq.n	8001410 <__aeabi_fdiv+0x98>
 80013a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80013a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80013ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80013b0:	428b      	cmp	r3, r1
 80013b2:	bf38      	it	cc
 80013b4:	005b      	lslcc	r3, r3, #1
 80013b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80013ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80013be:	428b      	cmp	r3, r1
 80013c0:	bf24      	itt	cs
 80013c2:	1a5b      	subcs	r3, r3, r1
 80013c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80013c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80013cc:	bf24      	itt	cs
 80013ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80013d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80013d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80013da:	bf24      	itt	cs
 80013dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80013e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80013e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80013e8:	bf24      	itt	cs
 80013ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80013ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	bf18      	it	ne
 80013f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80013fa:	d1e0      	bne.n	80013be <__aeabi_fdiv+0x46>
 80013fc:	2afd      	cmp	r2, #253	; 0xfd
 80013fe:	f63f af50 	bhi.w	80012a2 <__aeabi_fmul+0x92>
 8001402:	428b      	cmp	r3, r1
 8001404:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001408:	bf08      	it	eq
 800140a:	f020 0001 	biceq.w	r0, r0, #1
 800140e:	4770      	bx	lr
 8001410:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001414:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001418:	327f      	adds	r2, #127	; 0x7f
 800141a:	bfc2      	ittt	gt
 800141c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001420:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001424:	4770      	bxgt	lr
 8001426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	3a01      	subs	r2, #1
 8001430:	e737      	b.n	80012a2 <__aeabi_fmul+0x92>
 8001432:	f092 0f00 	teq	r2, #0
 8001436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800143a:	bf02      	ittt	eq
 800143c:	0040      	lsleq	r0, r0, #1
 800143e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001442:	3a01      	subeq	r2, #1
 8001444:	d0f9      	beq.n	800143a <__aeabi_fdiv+0xc2>
 8001446:	ea40 000c 	orr.w	r0, r0, ip
 800144a:	f093 0f00 	teq	r3, #0
 800144e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001452:	bf02      	ittt	eq
 8001454:	0049      	lsleq	r1, r1, #1
 8001456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800145a:	3b01      	subeq	r3, #1
 800145c:	d0f9      	beq.n	8001452 <__aeabi_fdiv+0xda>
 800145e:	ea41 010c 	orr.w	r1, r1, ip
 8001462:	e795      	b.n	8001390 <__aeabi_fdiv+0x18>
 8001464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001468:	ea92 0f0c 	teq	r2, ip
 800146c:	d108      	bne.n	8001480 <__aeabi_fdiv+0x108>
 800146e:	0242      	lsls	r2, r0, #9
 8001470:	f47f af7d 	bne.w	800136e <__aeabi_fmul+0x15e>
 8001474:	ea93 0f0c 	teq	r3, ip
 8001478:	f47f af70 	bne.w	800135c <__aeabi_fmul+0x14c>
 800147c:	4608      	mov	r0, r1
 800147e:	e776      	b.n	800136e <__aeabi_fmul+0x15e>
 8001480:	ea93 0f0c 	teq	r3, ip
 8001484:	d104      	bne.n	8001490 <__aeabi_fdiv+0x118>
 8001486:	024b      	lsls	r3, r1, #9
 8001488:	f43f af4c 	beq.w	8001324 <__aeabi_fmul+0x114>
 800148c:	4608      	mov	r0, r1
 800148e:	e76e      	b.n	800136e <__aeabi_fmul+0x15e>
 8001490:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001494:	bf18      	it	ne
 8001496:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800149a:	d1ca      	bne.n	8001432 <__aeabi_fdiv+0xba>
 800149c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80014a0:	f47f af5c 	bne.w	800135c <__aeabi_fmul+0x14c>
 80014a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80014a8:	f47f af3c 	bne.w	8001324 <__aeabi_fmul+0x114>
 80014ac:	e75f      	b.n	800136e <__aeabi_fmul+0x15e>
 80014ae:	bf00      	nop

080014b0 <__gesf2>:
 80014b0:	f04f 3cff 	mov.w	ip, #4294967295
 80014b4:	e006      	b.n	80014c4 <__cmpsf2+0x4>
 80014b6:	bf00      	nop

080014b8 <__lesf2>:
 80014b8:	f04f 0c01 	mov.w	ip, #1
 80014bc:	e002      	b.n	80014c4 <__cmpsf2+0x4>
 80014be:	bf00      	nop

080014c0 <__cmpsf2>:
 80014c0:	f04f 0c01 	mov.w	ip, #1
 80014c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80014c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80014cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80014d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80014d4:	bf18      	it	ne
 80014d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80014da:	d011      	beq.n	8001500 <__cmpsf2+0x40>
 80014dc:	b001      	add	sp, #4
 80014de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80014e2:	bf18      	it	ne
 80014e4:	ea90 0f01 	teqne	r0, r1
 80014e8:	bf58      	it	pl
 80014ea:	ebb2 0003 	subspl.w	r0, r2, r3
 80014ee:	bf88      	it	hi
 80014f0:	17c8      	asrhi	r0, r1, #31
 80014f2:	bf38      	it	cc
 80014f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80014f8:	bf18      	it	ne
 80014fa:	f040 0001 	orrne.w	r0, r0, #1
 80014fe:	4770      	bx	lr
 8001500:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001504:	d102      	bne.n	800150c <__cmpsf2+0x4c>
 8001506:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800150a:	d105      	bne.n	8001518 <__cmpsf2+0x58>
 800150c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001510:	d1e4      	bne.n	80014dc <__cmpsf2+0x1c>
 8001512:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001516:	d0e1      	beq.n	80014dc <__cmpsf2+0x1c>
 8001518:	f85d 0b04 	ldr.w	r0, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <__aeabi_cfrcmple>:
 8001520:	4684      	mov	ip, r0
 8001522:	4608      	mov	r0, r1
 8001524:	4661      	mov	r1, ip
 8001526:	e7ff      	b.n	8001528 <__aeabi_cfcmpeq>

08001528 <__aeabi_cfcmpeq>:
 8001528:	b50f      	push	{r0, r1, r2, r3, lr}
 800152a:	f7ff ffc9 	bl	80014c0 <__cmpsf2>
 800152e:	2800      	cmp	r0, #0
 8001530:	bf48      	it	mi
 8001532:	f110 0f00 	cmnmi.w	r0, #0
 8001536:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001538 <__aeabi_fcmpeq>:
 8001538:	f84d ed08 	str.w	lr, [sp, #-8]!
 800153c:	f7ff fff4 	bl	8001528 <__aeabi_cfcmpeq>
 8001540:	bf0c      	ite	eq
 8001542:	2001      	moveq	r0, #1
 8001544:	2000      	movne	r0, #0
 8001546:	f85d fb08 	ldr.w	pc, [sp], #8
 800154a:	bf00      	nop

0800154c <__aeabi_fcmplt>:
 800154c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001550:	f7ff ffea 	bl	8001528 <__aeabi_cfcmpeq>
 8001554:	bf34      	ite	cc
 8001556:	2001      	movcc	r0, #1
 8001558:	2000      	movcs	r0, #0
 800155a:	f85d fb08 	ldr.w	pc, [sp], #8
 800155e:	bf00      	nop

08001560 <__aeabi_fcmple>:
 8001560:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001564:	f7ff ffe0 	bl	8001528 <__aeabi_cfcmpeq>
 8001568:	bf94      	ite	ls
 800156a:	2001      	movls	r0, #1
 800156c:	2000      	movhi	r0, #0
 800156e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001572:	bf00      	nop

08001574 <__aeabi_fcmpge>:
 8001574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001578:	f7ff ffd2 	bl	8001520 <__aeabi_cfrcmple>
 800157c:	bf94      	ite	ls
 800157e:	2001      	movls	r0, #1
 8001580:	2000      	movhi	r0, #0
 8001582:	f85d fb08 	ldr.w	pc, [sp], #8
 8001586:	bf00      	nop

08001588 <__aeabi_fcmpgt>:
 8001588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800158c:	f7ff ffc8 	bl	8001520 <__aeabi_cfrcmple>
 8001590:	bf34      	ite	cc
 8001592:	2001      	movcc	r0, #1
 8001594:	2000      	movcs	r0, #0
 8001596:	f85d fb08 	ldr.w	pc, [sp], #8
 800159a:	bf00      	nop
 800159c:	0000      	movs	r0, r0
	...

080015a0 <__aeabi_f2iz>:
 80015a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80015a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80015a8:	d30f      	bcc.n	80015ca <__aeabi_f2iz+0x2a>
 80015aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80015ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80015b2:	d90d      	bls.n	80015d0 <__aeabi_f2iz+0x30>
 80015b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80015b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015bc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80015c0:	fa23 f002 	lsr.w	r0, r3, r2
 80015c4:	bf18      	it	ne
 80015c6:	4240      	negne	r0, r0
 80015c8:	4770      	bx	lr
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	4770      	bx	lr
 80015d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80015d4:	d101      	bne.n	80015da <__aeabi_f2iz+0x3a>
 80015d6:	0242      	lsls	r2, r0, #9
 80015d8:	d105      	bne.n	80015e6 <__aeabi_f2iz+0x46>
 80015da:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80015de:	bf08      	it	eq
 80015e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80015e4:	4770      	bx	lr
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	4770      	bx	lr
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <__aeabi_f2uiz>:
 80015f0:	0042      	lsls	r2, r0, #1
 80015f2:	d20e      	bcs.n	8001612 <__aeabi_f2uiz+0x22>
 80015f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80015f8:	d30b      	bcc.n	8001612 <__aeabi_f2uiz+0x22>
 80015fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80015fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001602:	d409      	bmi.n	8001618 <__aeabi_f2uiz+0x28>
 8001604:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800160c:	fa23 f002 	lsr.w	r0, r3, r2
 8001610:	4770      	bx	lr
 8001612:	f04f 0000 	mov.w	r0, #0
 8001616:	4770      	bx	lr
 8001618:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800161c:	d101      	bne.n	8001622 <__aeabi_f2uiz+0x32>
 800161e:	0242      	lsls	r2, r0, #9
 8001620:	d102      	bne.n	8001628 <__aeabi_f2uiz+0x38>
 8001622:	f04f 30ff 	mov.w	r0, #4294967295
 8001626:	4770      	bx	lr
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <null_provider.7957>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8001630:	2000      	movs	r0, #0
 8001632:	4770      	bx	lr
 8001634:	f3af 8000 	nop.w
 8001638:	f3af 8000 	nop.w
 800163c:	f3af 8000 	nop.w

08001640 <tmr.6612>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8001640:	f241 5322 	movw	r3, #5410	; 0x1522
 8001644:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <chCoreAlloc>:
 8001650:	2320      	movs	r3, #32
 8001652:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <chCoreAlloc+0x2c>)
 8001658:	4909      	ldr	r1, [pc, #36]	; (8001680 <chCoreAlloc+0x30>)
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	6809      	ldr	r1, [r1, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800165e:	3007      	adds	r0, #7
 8001660:	f020 0007 	bic.w	r0, r0, #7
  if ((size_t)(endmem - nextmem) < size)
 8001664:	1ac9      	subs	r1, r1, r3
 8001666:	4288      	cmp	r0, r1
    return NULL;
  p = nextmem;
  nextmem += size;
 8001668:	bf9a      	itte	ls
 800166a:	1818      	addls	r0, r3, r0
 800166c:	6010      	strls	r0, [r2, #0]

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
    return NULL;
 800166e:	2300      	movhi	r3, #0
 8001670:	2200      	movs	r2, #0
 8001672:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();
  return p;
}
 8001676:	4618      	mov	r0, r3
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200015b0 	.word	0x200015b0
 8001680:	20000fcc 	.word	0x20000fcc
 8001684:	f3af 8000 	nop.w
 8001688:	f3af 8000 	nop.w
 800168c:	f3af 8000 	nop.w

08001690 <wakeup.4589>:
 8001690:	2320      	movs	r3, #32
 8001692:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001696:	7f01      	ldrb	r1, [r0, #28]
 8001698:	2907      	cmp	r1, #7
 800169a:	d80e      	bhi.n	80016ba <wakeup.4589+0x2a>
 800169c:	e8df f001 	tbb	[pc, r1]
 80016a0:	210d0d1d 	.word	0x210d0d1d
 80016a4:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 80016a8:	6a03      	ldr	r3, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	1c51      	adds	r1, r2, #1
 80016ae:	6099      	str	r1, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016b0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80016b4:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80016b6:	6802      	ldr	r2, [r0, #0]
 80016b8:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80016ba:	f04f 32ff 	mov.w	r2, #4294967295
 80016be:	6202      	str	r2, [r0, #32]
 80016c0:	6881      	ldr	r1, [r0, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80016c2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.r_queue;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <wakeup.4589+0x5c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80016c6:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80016c8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	428a      	cmp	r2, r1
 80016ce:	d2fb      	bcs.n	80016c8 <wakeup.4589+0x38>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80016d0:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80016d2:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80016d4:	6041      	str	r1, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80016d6:	6008      	str	r0, [r1, #0]
 80016d8:	6058      	str	r0, [r3, #4]
 80016da:	2000      	movs	r0, #0
 80016dc:	f380 8811 	msr	BASEPRI, r0
 80016e0:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 80016e2:	6a03      	ldr	r3, [r0, #32]
 80016e4:	2100      	movs	r1, #0
 80016e6:	6019      	str	r1, [r3, #0]
 80016e8:	e7e7      	b.n	80016ba <wakeup.4589+0x2a>
 80016ea:	bf00      	nop
 80016ec:	20001ec0 	.word	0x20001ec0

080016f0 <_idle_thread.4288>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <_idle_thread.4288+0xc>)
 80016f2:	4a03      	ldr	r2, [pc, #12]	; (8001700 <_idle_thread.4288+0x10>)
 80016f4:	6998      	ldr	r0, [r3, #24]
 80016f6:	6182      	str	r2, [r0, #24]
 80016f8:	e7fe      	b.n	80016f8 <_idle_thread.4288+0x8>
 80016fa:	bf00      	nop
 80016fc:	20001ec0 	.word	0x20001ec0
 8001700:	0800a4c0 	.word	0x0800a4c0
 8001704:	f3af 8000 	nop.w
 8001708:	f3af 8000 	nop.w
 800170c:	f3af 8000 	nop.w

08001710 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001710:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001714:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001716:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800171a:	2000      	movs	r0, #0
 800171c:	f380 8811 	msr	BASEPRI, r0
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	f3af 8000 	nop.w
 800172c:	f3af 8000 	nop.w

08001730 <test_terminate_threads>:
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <test_terminate_threads+0x7c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	b14a      	cbz	r2, 800174a <test_terminate_threads+0x1a>
 8001736:	2120      	movs	r1, #32
 8001738:	f381 8811 	msr	BASEPRI, r1
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 800173c:	7f50      	ldrb	r0, [r2, #29]
 800173e:	f040 0104 	orr.w	r1, r0, #4
 8001742:	7751      	strb	r1, [r2, #29]
 8001744:	2200      	movs	r2, #0
 8001746:	f382 8811 	msr	BASEPRI, r2
 800174a:	6858      	ldr	r0, [r3, #4]
 800174c:	b148      	cbz	r0, 8001762 <test_terminate_threads+0x32>
 800174e:	2120      	movs	r1, #32
 8001750:	f381 8811 	msr	BASEPRI, r1
 8001754:	7f42      	ldrb	r2, [r0, #29]
 8001756:	f042 0104 	orr.w	r1, r2, #4
 800175a:	7741      	strb	r1, [r0, #29]
 800175c:	2000      	movs	r0, #0
 800175e:	f380 8811 	msr	BASEPRI, r0
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	b14a      	cbz	r2, 800177a <test_terminate_threads+0x4a>
 8001766:	2120      	movs	r1, #32
 8001768:	f381 8811 	msr	BASEPRI, r1
 800176c:	7f50      	ldrb	r0, [r2, #29]
 800176e:	f040 0104 	orr.w	r1, r0, #4
 8001772:	7751      	strb	r1, [r2, #29]
 8001774:	2200      	movs	r2, #0
 8001776:	f382 8811 	msr	BASEPRI, r2
 800177a:	68d8      	ldr	r0, [r3, #12]
 800177c:	b148      	cbz	r0, 8001792 <test_terminate_threads+0x62>
 800177e:	2120      	movs	r1, #32
 8001780:	f381 8811 	msr	BASEPRI, r1
 8001784:	7f42      	ldrb	r2, [r0, #29]
 8001786:	f042 0104 	orr.w	r1, r2, #4
 800178a:	7741      	strb	r1, [r0, #29]
 800178c:	2000      	movs	r0, #0
 800178e:	f380 8811 	msr	BASEPRI, r0
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	b14b      	cbz	r3, 80017aa <test_terminate_threads+0x7a>
 8001796:	2220      	movs	r2, #32
 8001798:	f382 8811 	msr	BASEPRI, r2
 800179c:	7f59      	ldrb	r1, [r3, #29]
 800179e:	f041 0004 	orr.w	r0, r1, #4
 80017a2:	7758      	strb	r0, [r3, #29]
 80017a4:	2300      	movs	r3, #0
 80017a6:	f383 8811 	msr	BASEPRI, r3
 80017aa:	4770      	bx	lr
 80017ac:	20002010 	.word	0x20002010

080017b0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80017b0:	b410      	push	{r4}
 80017b2:	2320      	movs	r3, #32
 80017b4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80017b8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80017bc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80017be:	2300      	movs	r3, #0
 80017c0:	f383 8811 	msr	BASEPRI, r3
    test_println("FAILURE");
  else
    test_println("SUCCESS");

  return (msg_t)global_fail;
}
 80017c4:	b2a4      	uxth	r4, r4
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 80017c6:	1a64      	subs	r4, r4, r1
 80017c8:	1a51      	subs	r1, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80017ca:	428c      	cmp	r4, r1
 80017cc:	db09      	blt.n	80017e2 <_test_assert_time_window+0x32>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <_test_assert_time_window+0x38>)
 80017d0:	2301      	movs	r3, #1
 80017d2:	7013      	strb	r3, [r2, #0]
  global_fail = TRUE;
 80017d4:	4905      	ldr	r1, [pc, #20]	; (80017ec <_test_assert_time_window+0x3c>)
  failpoint = point;
 80017d6:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <_test_assert_time_window+0x40>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 80017d8:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 80017da:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 80017dc:	4618      	mov	r0, r3
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 80017de:	bc10      	pop	{r4}
 80017e0:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 80017e2:	4618      	mov	r0, r3
 80017e4:	e7fb      	b.n	80017de <_test_assert_time_window+0x2e>
 80017e6:	bf00      	nop
 80017e8:	20001758 	.word	0x20001758
 80017ec:	20001780 	.word	0x20001780
 80017f0:	20001788 	.word	0x20001788
 80017f4:	f3af 8000 	nop.w
 80017f8:	f3af 8000 	nop.w
 80017fc:	f3af 8000 	nop.w

08001800 <_test_assert_sequence>:
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8001800:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8001804:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001880 <_test_assert_sequence+0x80>
 8001808:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001884 <_test_assert_sequence+0x84>
 800180c:	f8d8 7000 	ldr.w	r7, [r8]
 8001810:	4663      	mov	r3, ip
 8001812:	ebcc 0207 	rsb	r2, ip, r7
 8001816:	07d2      	lsls	r2, r2, #31
 8001818:	d515      	bpl.n	8001846 <_test_assert_sequence+0x46>
  char *cp = tokens_buffer;
  while (cp < tokp) {
 800181a:	4567      	cmp	r7, ip
 800181c:	d918      	bls.n	8001850 <_test_assert_sequence+0x50>
    if (*cp++ != *expected++)
 800181e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001822:	f89c 4000 	ldrb.w	r4, [ip]
 8001826:	f10c 0301 	add.w	r3, ip, #1
 800182a:	4294      	cmp	r4, r2
 800182c:	d00b      	beq.n	8001846 <_test_assert_sequence+0x46>
 800182e:	e015      	b.n	800185c <_test_assert_sequence+0x5c>
 8001830:	781e      	ldrb	r6, [r3, #0]
 8001832:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001836:	1c63      	adds	r3, r4, #1
 8001838:	42ae      	cmp	r6, r5
 800183a:	d10f      	bne.n	800185c <_test_assert_sequence+0x5c>
 800183c:	784d      	ldrb	r5, [r1, #1]
 800183e:	7824      	ldrb	r4, [r4, #0]
 8001840:	1c51      	adds	r1, r2, #1
 8001842:	42ac      	cmp	r4, r5
 8001844:	d10a      	bne.n	800185c <_test_assert_sequence+0x5c>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8001846:	429f      	cmp	r7, r3
    if (*cp++ != *expected++)
 8001848:	460a      	mov	r2, r1
 800184a:	f103 0401 	add.w	r4, r3, #1
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 800184e:	d8ef      	bhi.n	8001830 <_test_assert_sequence+0x30>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8001850:	780b      	ldrb	r3, [r1, #0]
 8001852:	b91b      	cbnz	r3, 800185c <_test_assert_sequence+0x5c>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8001854:	f8c8 c000 	str.w	ip, [r8]
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
 8001858:	4618      	mov	r0, r3
 800185a:	e007      	b.n	800186c <_test_assert_sequence+0x6c>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 800185c:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_test_assert_sequence+0x74>)
 800185e:	2101      	movs	r1, #1
 8001860:	7011      	strb	r1, [r2, #0]
  global_fail = TRUE;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <_test_assert_sequence+0x78>)
  failpoint = point;
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <_test_assert_sequence+0x7c>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8001866:	7019      	strb	r1, [r3, #0]
  failpoint = point;
 8001868:	6010      	str	r0, [r2, #0]
  while (cp < tokp) {
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
 800186a:	4608      	mov	r0, r1
  clear_tokens();
  return FALSE;
}
 800186c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20001758 	.word	0x20001758
 8001878:	20001780 	.word	0x20001780
 800187c:	20001788 	.word	0x20001788
 8001880:	20001754 	.word	0x20001754
 8001884:	2000178c 	.word	0x2000178c
 8001888:	f3af 8000 	nop.w
 800188c:	f3af 8000 	nop.w

08001890 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8001890:	b941      	cbnz	r1, 80018a4 <_test_assert+0x14>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_test_assert+0x18>)
 8001894:	2301      	movs	r3, #1
 8001896:	7013      	strb	r3, [r2, #0]
  global_fail = TRUE;
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <_test_assert+0x1c>)
  failpoint = point;
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <_test_assert+0x20>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 800189c:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 800189e:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 80018a0:	4618      	mov	r0, r3
 80018a2:	4770      	bx	lr
  return FALSE;
 80018a4:	2000      	movs	r0, #0
}
 80018a6:	4770      	bx	lr
 80018a8:	20001758 	.word	0x20001758
 80018ac:	20001780 	.word	0x20001780
 80018b0:	20001788 	.word	0x20001788
 80018b4:	f3af 8000 	nop.w
 80018b8:	f3af 8000 	nop.w
 80018bc:	f3af 8000 	nop.w

080018c0 <test_emit_token>:
 80018c0:	2320      	movs	r3, #32
 80018c2:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 80018c6:	f241 7154 	movw	r1, #5972	; 0x1754
 80018ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018ce:	680a      	ldr	r2, [r1, #0]
 80018d0:	f802 0b01 	strb.w	r0, [r2], #1
 80018d4:	600a      	str	r2, [r1, #0]
 80018d6:	2000      	movs	r0, #0
 80018d8:	f380 8811 	msr	BASEPRI, r0
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <thread.8077>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 80018e0:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 80018e2:	7800      	ldrb	r0, [r0, #0]
 80018e4:	f7ff ffec 	bl	80018c0 <test_emit_token>
  return 0;
}
 80018e8:	2000      	movs	r0, #0
 80018ea:	bd08      	pop	{r3, pc}
 80018ec:	f3af 8000 	nop.w

080018f0 <h1.7730>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 80018f0:	2041      	movs	r0, #65	; 0x41
 80018f2:	f7ff bfe5 	b.w	80018c0 <test_emit_token>
 80018f6:	bf00      	nop
 80018f8:	f3af 8000 	nop.w
 80018fc:	f3af 8000 	nop.w

08001900 <h2.7727>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8001900:	2042      	movs	r0, #66	; 0x42
 8001902:	f7ff bfdd 	b.w	80018c0 <test_emit_token>
 8001906:	bf00      	nop
 8001908:	f3af 8000 	nop.w
 800190c:	f3af 8000 	nop.w

08001910 <h3.7724>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8001910:	2043      	movs	r0, #67	; 0x43
 8001912:	f7ff bfd5 	b.w	80018c0 <test_emit_token>
 8001916:	bf00      	nop
 8001918:	f3af 8000 	nop.w
 800191c:	f3af 8000 	nop.w

08001920 <thread.6821.4130>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 8001920:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8001922:	7800      	ldrb	r0, [r0, #0]
 8001924:	f7ff ffcc 	bl	80018c0 <test_emit_token>
  return 0;
}
 8001928:	2000      	movs	r0, #0
 800192a:	bd08      	pop	{r3, pc}
 800192c:	f3af 8000 	nop.w

08001930 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8001930:	b538      	push	{r3, r4, r5, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001932:	7801      	ldrb	r1, [r0, #0]
 8001934:	4d08      	ldr	r5, [pc, #32]	; (8001958 <test_println+0x28>)
 8001936:	b141      	cbz	r1, 800194a <test_println+0x1a>
 8001938:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800193a:	6828      	ldr	r0, [r5, #0]
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001942:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001946:	2900      	cmp	r1, #0
 8001948:	d1f7      	bne.n	800193a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800194a:	6828      	ldr	r0, [r5, #0]
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <test_println+0x2c>)
 800194e:	6803      	ldr	r3, [r0, #0]
 8001950:	2202      	movs	r2, #2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4798      	blx	r3
 8001956:	bd38      	pop	{r3, r4, r5, pc}
 8001958:	20001784 	.word	0x20001784
 800195c:	0800b274 	.word	0x0800b274

08001960 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8001960:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8001962:	7801      	ldrb	r1, [r0, #0]
 8001964:	b149      	cbz	r1, 800197a <test_print+0x1a>
 8001966:	4d05      	ldr	r5, [pc, #20]	; (800197c <test_print+0x1c>)
 8001968:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800196a:	6828      	ldr	r0, [r5, #0]
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001972:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001976:	2900      	cmp	r1, #0
 8001978:	d1f7      	bne.n	800196a <test_print+0xa>
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	20001784 	.word	0x20001784

08001980 <test_printn>:
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b085      	sub	sp, #20
  char buf[16], *p;

  if (!n)
 8001984:	2800      	cmp	r0, #0
 8001986:	d037      	beq.n	80019f8 <test_printn+0x78>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001988:	f10d 0501 	add.w	r5, sp, #1
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800198c:	f64c 46cd 	movw	r6, #52429	; 0xcccd
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001990:	462b      	mov	r3, r5
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8001992:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
 8001996:	fba6 1200 	umull	r1, r2, r6, r0
 800199a:	08d4      	lsrs	r4, r2, #3
 800199c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80019a0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80019a4:	3030      	adds	r0, #48	; 0x30
 80019a6:	b2c1      	uxtb	r1, r0

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80019a8:	4620      	mov	r0, r4
      *p++ = (n % 10) + '0', n /= 10;
 80019aa:	f803 1c01 	strb.w	r1, [r3, #-1]
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80019ae:	461c      	mov	r4, r3
 80019b0:	3301      	adds	r3, #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d1ef      	bne.n	8001996 <test_printn+0x16>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80019b6:	466a      	mov	r2, sp
 80019b8:	4294      	cmp	r4, r2
 80019ba:	d91b      	bls.n	80019f4 <test_printn+0x74>
 80019bc:	1b60      	subs	r0, r4, r5
 80019be:	07c0      	lsls	r0, r0, #31
 80019c0:	4f11      	ldr	r7, [pc, #68]	; (8001a08 <test_printn+0x88>)
 80019c2:	d511      	bpl.n	80019e8 <test_printn+0x68>
      chSequentialStreamPut(chp, *--p);
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	6803      	ldr	r3, [r0, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4790      	blx	r2
 80019cc:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80019d0:	3c01      	subs	r4, #1
 80019d2:	e009      	b.n	80019e8 <test_printn+0x68>
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	1e66      	subs	r6, r4, #1
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4790      	blx	r2
 80019e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80019e6:	3c02      	subs	r4, #2
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	4790      	blx	r2
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80019f0:	42ac      	cmp	r4, r5
 80019f2:	d1ef      	bne.n	80019d4 <test_printn+0x54>
      chSequentialStreamPut(chp, *--p);
  }
}
 80019f4:	b005      	add	sp, #20
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <test_printn+0x88>)
 80019fa:	2130      	movs	r1, #48	; 0x30
 80019fc:	6800      	ldr	r0, [r0, #0]
 80019fe:	6803      	ldr	r3, [r0, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	4790      	blx	r2
 8001a04:	e7f6      	b.n	80019f4 <test_printn+0x74>
 8001a06:	bf00      	nop
 8001a08:	20001784 	.word	0x20001784
 8001a0c:	f3af 8000 	nop.w

08001a10 <print_line.6617>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4d0b      	ldr	r5, [pc, #44]	; (8001a40 <print_line.6617+0x30>)
 8001a14:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8001a16:	6828      	ldr	r0, [r5, #0]
 8001a18:	212d      	movs	r1, #45	; 0x2d
 8001a1a:	6803      	ldr	r3, [r0, #0]
 8001a1c:	3c01      	subs	r4, #1
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4790      	blx	r2
 8001a22:	6828      	ldr	r0, [r5, #0]
 8001a24:	6801      	ldr	r1, [r0, #0]
 8001a26:	688b      	ldr	r3, [r1, #8]
 8001a28:	212d      	movs	r1, #45	; 0x2d
 8001a2a:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8001a2c:	3c01      	subs	r4, #1
 8001a2e:	d1f2      	bne.n	8001a16 <print_line.6617+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <print_line.6617+0x30>)
 8001a32:	4904      	ldr	r1, [pc, #16]	; (8001a44 <print_line.6617+0x34>)
 8001a34:	6800      	ldr	r0, [r0, #0]
 8001a36:	6802      	ldr	r2, [r0, #0]
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4798      	blx	r3
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
 8001a40:	20001784 	.word	0x20001784
 8001a44:	0800b274 	.word	0x0800b274
 8001a48:	f3af 8000 	nop.w
 8001a4c:	f3af 8000 	nop.w

08001a50 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001a50:	b508      	push	{r3, lr}
 8001a52:	2220      	movs	r2, #32
 8001a54:	4603      	mov	r3, r0
 8001a56:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
 8001a5a:	6800      	ldr	r0, [r0, #0]
 8001a5c:	b128      	cbz	r0, 8001a6a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 8001a68:	bd08      	pop	{r3, pc}
  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
    mp->mp_next = mp->mp_next->ph_next;
  else if (mp->mp_provider != NULL)
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	2900      	cmp	r1, #0
 8001a6e:	d0f8      	beq.n	8001a62 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8001a70:	6858      	ldr	r0, [r3, #4]
 8001a72:	4788      	blx	r1
 8001a74:	e7f5      	b.n	8001a62 <chPoolAlloc+0x12>
 8001a76:	bf00      	nop
 8001a78:	f3af 8000 	nop.w
 8001a7c:	f3af 8000 	nop.w

08001a80 <chEvtUnregister>:
 8001a80:	2320      	movs	r3, #32
 8001a82:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8001a86:	4602      	mov	r2, r0
 8001a88:	e000      	b.n	8001a8c <chEvtUnregister+0xc>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 8001a8a:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 8001a8c:	6813      	ldr	r3, [r2, #0]
 8001a8e:	4283      	cmp	r3, r0
 8001a90:	d003      	beq.n	8001a9a <chEvtUnregister+0x1a>
    if (p->el_next == elp) {
 8001a92:	428b      	cmp	r3, r1
 8001a94:	d1f9      	bne.n	8001a8a <chEvtUnregister+0xa>
      p->el_next = elp->el_next;
 8001a96:	6808      	ldr	r0, [r1, #0]
 8001a98:	6010      	str	r0, [r2, #0]
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f381 8811 	msr	BASEPRI, r1
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	f3af 8000 	nop.w
 8001aac:	f3af 8000 	nop.w

08001ab0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <chThdYield+0x48>)
 8001aba:	6810      	ldr	r0, [r2, #0]
 8001abc:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8001abe:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001ac0:	688c      	ldr	r4, [r1, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8001ac2:	42a3      	cmp	r3, r4
 8001ac4:	d203      	bcs.n	8001ace <chThdYield+0x1e>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f380 8811 	msr	BASEPRI, r0
 8001acc:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001ace:	6803      	ldr	r3, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001ad0:	2501      	movs	r5, #1
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001ad6:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ad8:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001ada:	7705      	strb	r5, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001adc:	770a      	strb	r2, [r1, #28]
 8001ade:	e000      	b.n	8001ae2 <chThdYield+0x32>
 8001ae0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4294      	cmp	r4, r2
 8001ae6:	d9fb      	bls.n	8001ae0 <chThdYield+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001ae8:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001aea:	600b      	str	r3, [r1, #0]
  tp->p_prev = cp->p_prev;
 8001aec:	604a      	str	r2, [r1, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001aee:	6011      	str	r1, [r2, #0]
 8001af0:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001af2:	f7fe fdfd 	bl	80006f0 <_port_switch>
 8001af6:	e7e6      	b.n	8001ac6 <chThdYield+0x16>
 8001af8:	20001ec0 	.word	0x20001ec0
 8001afc:	f3af 8000 	nop.w

08001b00 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001b00:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001b04:	3924      	subs	r1, #36	; 0x24
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b06:	f641 65c0 	movw	r5, #7872	; 0x1ec0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001b0a:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b0c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001b10:	f8d5 c014 	ldr.w	ip, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001b14:	60c7      	str	r7, [r0, #12]
 8001b16:	5043      	str	r3, [r0, r1]
 8001b18:	9b06      	ldr	r3, [sp, #24]
 8001b1a:	f240 7101 	movw	r1, #1793	; 0x701
 8001b1e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	6239      	str	r1, [r7, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001b26:	2600      	movs	r6, #0
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001b28:	4690      	mov	r8, r2
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001b2a:	f100 0924 	add.w	r9, r0, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001b2e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001b32:	2302      	movs	r3, #2
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001b34:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b36:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001b38:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b3c:	f8c0 c014 	str.w	ip, [r0, #20]
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001b40:	4604      	mov	r4, r0
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b42:	6168      	str	r0, [r5, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001b44:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b46:	f8cc 0010 	str.w	r0, [ip, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001b4a:	7746      	strb	r6, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001b4c:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8001b50:	6386      	str	r6, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001b52:	6346      	str	r6, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001b54:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001b56:	6186      	str	r6, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001b58:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001b5c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001b5e:	6282      	str	r2, [r0, #40]	; 0x28
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
  return _thread_init(tp, prio);
}
 8001b60:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	f3af 8000 	nop.w
 8001b6c:	f3af 8000 	nop.w

08001b70 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001b70:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <chSchDoRescheduleAhead+0x34>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001b72:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001b74:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001b76:	6991      	ldr	r1, [r2, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	688c      	ldr	r4, [r1, #8]
 8001b7c:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001b7e:	2501      	movs	r5, #1
 8001b80:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001b82:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001b84:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001b86:	7705      	strb	r5, [r0, #28]

  otp->p_state = CH_STATE_READY;
 8001b88:	770a      	strb	r2, [r1, #28]
 8001b8a:	e000      	b.n	8001b8e <chSchDoRescheduleAhead+0x1e>
 8001b8c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	42a2      	cmp	r2, r4
 8001b92:	d8fb      	bhi.n	8001b8c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001b94:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8001b96:	600b      	str	r3, [r1, #0]
  otp->p_prev = cp->p_prev;
 8001b98:	604a      	str	r2, [r1, #4]
  otp->p_prev->p_next = cp->p_prev = otp;
 8001b9a:	6011      	str	r1, [r2, #0]
 8001b9c:	6059      	str	r1, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001b9e:	bc30      	pop	{r4, r5}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001ba0:	f7fe bda6 	b.w	80006f0 <_port_switch>
 8001ba4:	20001ec0 	.word	0x20001ec0
 8001ba8:	f3af 8000 	nop.w
 8001bac:	f3af 8000 	nop.w

08001bb0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <chSchRescheduleS+0x14>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	6998      	ldr	r0, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
 8001bb6:	6891      	ldr	r1, [r2, #8]
 8001bb8:	6883      	ldr	r3, [r0, #8]
 8001bba:	4299      	cmp	r1, r3
 8001bbc:	d800      	bhi.n	8001bc0 <chSchRescheduleS+0x10>
 8001bbe:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001bc0:	f7ff bfd6 	b.w	8001b70 <chSchDoRescheduleAhead>
 8001bc4:	20001ec0 	.word	0x20001ec0
 8001bc8:	f3af 8000 	nop.w
 8001bcc:	f3af 8000 	nop.w

08001bd0 <chThdSetPriority.4334>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8001bd8:	4908      	ldr	r1, [pc, #32]	; (8001bfc <chThdSetPriority.4334+0x2c>)
 8001bda:	698a      	ldr	r2, [r1, #24]
 8001bdc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
 8001bde:	6893      	ldr	r3, [r2, #8]
 8001be0:	429c      	cmp	r4, r3
 8001be2:	d001      	beq.n	8001be8 <chThdSetPriority.4334+0x18>
 8001be4:	4283      	cmp	r3, r0
 8001be6:	d200      	bcs.n	8001bea <chThdSetPriority.4334+0x1a>
    currp->p_prio = newprio;
 8001be8:	6090      	str	r0, [r2, #8]
  currp->p_realprio = newprio;
 8001bea:	63d0      	str	r0, [r2, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8001bec:	f7ff ffe0 	bl	8001bb0 <chSchRescheduleS>
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return oldprio;
}
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	bd10      	pop	{r4, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20001ec0 	.word	0x20001ec0

08001c00 <thd3_execute.6824>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001c02:	4e51      	ldr	r6, [pc, #324]	; (8001d48 <thd3_execute.6824+0x148>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001c04:	69b3      	ldr	r3, [r6, #24]
 8001c06:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001c08:	1c65      	adds	r5, r4, #1
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f7ff ffe0 	bl	8001bd0 <chThdSetPriority.4334>
  test_assert(1, p1 == prio,
 8001c10:	ebb0 0c04 	subs.w	ip, r0, r4
 8001c14:	f1dc 0100 	rsbs	r1, ip, #0
 8001c18:	eb51 010c 	adcs.w	r1, r1, ip

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001c1c:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fe36 	bl	8001890 <_test_assert>
 8001c24:	b100      	cbz	r0, 8001c28 <thd3_execute.6824+0x28>
 8001c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c28:	69b2      	ldr	r2, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	6893      	ldr	r3, [r2, #8]
 8001c2e:	ebb5 0e03 	subs.w	lr, r5, r3
 8001c32:	f1de 0100 	rsbs	r1, lr, #0
 8001c36:	eb51 010e 	adcs.w	r1, r1, lr
 8001c3a:	f7ff fe29 	bl	8001890 <_test_assert>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d1f1      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8001c42:	4638      	mov	r0, r7
 8001c44:	f7ff ffc4 	bl	8001bd0 <chThdSetPriority.4334>
  test_assert(3, p1 == prio + 1,
 8001c48:	1a28      	subs	r0, r5, r0
 8001c4a:	4242      	negs	r2, r0
 8001c4c:	eb52 0100 	adcs.w	r1, r2, r0
 8001c50:	2003      	movs	r0, #3
 8001c52:	f7ff fe1d 	bl	8001890 <_test_assert>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d1e5      	bne.n	8001c26 <thd3_execute.6824+0x26>
 8001c5a:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8001c5c:	2004      	movs	r0, #4
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	1a62      	subs	r2, r4, r1
 8001c62:	4253      	negs	r3, r2
 8001c64:	eb53 0102 	adcs.w	r1, r3, r2
 8001c68:	f7ff fe12 	bl	8001890 <_test_assert>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d1da      	bne.n	8001c26 <thd3_execute.6824+0x26>
 8001c70:	2720      	movs	r7, #32
 8001c72:	f387 8811 	msr	BASEPRI, r7
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001c76:	69b1      	ldr	r1, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8001c78:	688a      	ldr	r2, [r1, #8]
 8001c7a:	1c93      	adds	r3, r2, #2
 8001c7c:	608b      	str	r3, [r1, #8]
 8001c7e:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001c82:	69b0      	ldr	r0, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8001c84:	1ca7      	adds	r7, r4, #2
 8001c86:	6881      	ldr	r1, [r0, #8]
 8001c88:	2005      	movs	r0, #5
 8001c8a:	1a7a      	subs	r2, r7, r1
 8001c8c:	4253      	negs	r3, r2
 8001c8e:	eb53 0102 	adcs.w	r1, r3, r2
 8001c92:	f7ff fdfd 	bl	8001890 <_test_assert>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d1c5      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f7ff ff98 	bl	8001bd0 <chThdSetPriority.4334>
  test_assert(6, p1 == prio,
 8001ca0:	ebb0 0c04 	subs.w	ip, r0, r4
 8001ca4:	f1dc 0000 	rsbs	r0, ip, #0
 8001ca8:	eb50 010c 	adcs.w	r1, r0, ip
 8001cac:	2006      	movs	r0, #6
 8001cae:	f7ff fdef 	bl	8001890 <_test_assert>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	d1b7      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8001cb6:	69b1      	ldr	r1, [r6, #24]
 8001cb8:	2007      	movs	r0, #7
 8001cba:	688a      	ldr	r2, [r1, #8]
 8001cbc:	ebb7 0e02 	subs.w	lr, r7, r2
 8001cc0:	f1de 0300 	rsbs	r3, lr, #0
 8001cc4:	eb53 010e 	adcs.w	r1, r3, lr
 8001cc8:	f7ff fde2 	bl	8001890 <_test_assert>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d1aa      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8001cd0:	69b1      	ldr	r1, [r6, #24]
 8001cd2:	2008      	movs	r0, #8
 8001cd4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001cd6:	1aab      	subs	r3, r5, r2
 8001cd8:	4259      	negs	r1, r3
 8001cda:	4159      	adcs	r1, r3
 8001cdc:	f7ff fdd8 	bl	8001890 <_test_assert>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d1a0      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8001ce4:	1ce7      	adds	r7, r4, #3
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	f7ff ff72 	bl	8001bd0 <chThdSetPriority.4334>
  test_assert(9, p1 == prio + 1,
 8001cec:	1a28      	subs	r0, r5, r0
 8001cee:	4242      	negs	r2, r0
 8001cf0:	eb52 0100 	adcs.w	r1, r2, r0
 8001cf4:	2009      	movs	r0, #9
 8001cf6:	f7ff fdcb 	bl	8001890 <_test_assert>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d193      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8001cfe:	69b3      	ldr	r3, [r6, #24]
 8001d00:	200a      	movs	r0, #10
 8001d02:	6899      	ldr	r1, [r3, #8]
 8001d04:	ebb7 0c01 	subs.w	ip, r7, r1
 8001d08:	f1dc 0200 	rsbs	r2, ip, #0
 8001d0c:	eb52 010c 	adcs.w	r1, r2, ip
 8001d10:	f7ff fdbe 	bl	8001890 <_test_assert>
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d186      	bne.n	8001c26 <thd3_execute.6824+0x26>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8001d18:	69b3      	ldr	r3, [r6, #24]
 8001d1a:	200b      	movs	r0, #11
 8001d1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d1e:	ebb7 0e01 	subs.w	lr, r7, r1
 8001d22:	f1de 0200 	rsbs	r2, lr, #0
 8001d26:	eb52 010e 	adcs.w	r1, r2, lr
 8001d2a:	f7ff fdb1 	bl	8001890 <_test_assert>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	f47f af79 	bne.w	8001c26 <thd3_execute.6824+0x26>
 8001d34:	2320      	movs	r3, #32
 8001d36:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d3a:	69b2      	ldr	r2, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8001d3c:	6094      	str	r4, [r2, #8]
  chThdGetSelfX()->p_realprio = prio;
 8001d3e:	63d4      	str	r4, [r2, #60]	; 0x3c
 8001d40:	f380 8811 	msr	BASEPRI, r0
 8001d44:	e76f      	b.n	8001c26 <thd3_execute.6824+0x26>
 8001d46:	bf00      	nop
 8001d48:	20001ec0 	.word	0x20001ec0
 8001d4c:	f3af 8000 	nop.w

08001d50 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001d50:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d52:	4f14      	ldr	r7, [pc, #80]	; (8001da4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001d54:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d56:	69be      	ldr	r6, [r7, #24]
 8001d58:	6885      	ldr	r5, [r0, #8]
 8001d5a:	68b0      	ldr	r0, [r6, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d5c:	2300      	movs	r3, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d5e:	4285      	cmp	r5, r0

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001d60:	6221      	str	r1, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d62:	d80c      	bhi.n	8001d7e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d64:	7723      	strb	r3, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001d66:	4639      	mov	r1, r7
  do {
    cp = cp->p_next;
 8001d68:	6809      	ldr	r1, [r1, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001d6a:	688a      	ldr	r2, [r1, #8]
 8001d6c:	4295      	cmp	r5, r2
 8001d6e:	d9fb      	bls.n	8001d68 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d70:	6848      	ldr	r0, [r1, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001d72:	6021      	str	r1, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001d74:	6060      	str	r0, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001d76:	6004      	str	r4, [r0, #0]
 8001d78:	604c      	str	r4, [r1, #4]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d7c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d7e:	7733      	strb	r3, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001d80:	4639      	mov	r1, r7
  do {
    cp = cp->p_next;
 8001d82:	6809      	ldr	r1, [r1, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001d84:	688a      	ldr	r2, [r1, #8]
 8001d86:	4290      	cmp	r0, r2
 8001d88:	d9fb      	bls.n	8001d82 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d8a:	6848      	ldr	r0, [r1, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001d8c:	6031      	str	r1, [r6, #0]
  tp->p_prev = cp->p_prev;
 8001d8e:	6070      	str	r0, [r6, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001d90:	6006      	str	r6, [r0, #0]
 8001d92:	604e      	str	r6, [r1, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001d94:	2301      	movs	r3, #1
    chSysSwitch(ntp, otp);
 8001d96:	4620      	mov	r0, r4
 8001d98:	4631      	mov	r1, r6
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001d9a:	7723      	strb	r3, [r4, #28]
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8001d9c:	61bc      	str	r4, [r7, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001d9e:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001da0:	f7fe bca6 	b.w	80006f0 <_port_switch>
 8001da4:	20001ec0 	.word	0x20001ec0
 8001da8:	f3af 8000 	nop.w
 8001dac:	f3af 8000 	nop.w

08001db0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001db0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <chMtxUnlock+0x58>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001db4:	4604      	mov	r4, r0
 8001db6:	2120      	movs	r1, #32
  thread_t *ctp = currp;
 8001db8:	6998      	ldr	r0, [r3, #24]
 8001dba:	f381 8811 	msr	BASEPRI, r1
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8001dbe:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001dc0:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001dc2:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001dc4:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001dc6:	d01b      	beq.n	8001e00 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001dc8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001dca:	b14b      	cbz	r3, 8001de0 <chMtxUnlock+0x30>
 8001dcc:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d003      	beq.n	8001dda <chMtxUnlock+0x2a>
 8001dd2:	6892      	ldr	r2, [r2, #8]
 8001dd4:	4291      	cmp	r1, r2
 8001dd6:	bf38      	it	cc
 8001dd8:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8001dda:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f5      	bne.n	8001dcc <chMtxUnlock+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001de0:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001de2:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001de4:	6081      	str	r1, [r0, #8]
 8001de6:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001de8:	4628      	mov	r0, r5
 8001dea:	605c      	str	r4, [r3, #4]
 8001dec:	2100      	movs	r1, #0
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001dee:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8001df0:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8001df2:	63ac      	str	r4, [r5, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001df4:	f7ff ffac 	bl	8001d50 <chSchWakeupS>
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f380 8811 	msr	BASEPRI, r0
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
      mp->m_owner = NULL;
 8001e00:	2200      	movs	r2, #0
 8001e02:	60a2      	str	r2, [r4, #8]
 8001e04:	e7f8      	b.n	8001df8 <chMtxUnlock+0x48>
 8001e06:	bf00      	nop
 8001e08:	20001ec0 	.word	0x20001ec0
 8001e0c:	f3af 8000 	nop.w

08001e10 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8001e10:	b508      	push	{r3, lr}
 8001e12:	2220      	movs	r2, #32
 8001e14:	4603      	mov	r3, r0
 8001e16:	f382 8811 	msr	BASEPRI, r2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0)
 8001e1a:	6880      	ldr	r0, [r0, #8]
 8001e1c:	1c41      	adds	r1, r0, #1
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	6099      	str	r1, [r3, #8]
 8001e22:	dd03      	ble.n	8001e2c <chSemSignal+0x1c>
 8001e24:	2300      	movs	r3, #0
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	bd08      	pop	{r3, pc}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001e2c:	6818      	ldr	r0, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8001e2e:	2100      	movs	r1, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001e30:	6802      	ldr	r2, [r0, #0]
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	6053      	str	r3, [r2, #4]
 8001e36:	f7ff ff8b 	bl	8001d50 <chSchWakeupS>
 8001e3a:	e7f3      	b.n	8001e24 <chSemSignal+0x14>
 8001e3c:	f3af 8000 	nop.w

08001e40 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e44:	4604      	mov	r4, r0
 8001e46:	2520      	movs	r5, #32
 8001e48:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e4c:	f641 66c0 	movw	r6, #7872	; 0x1ec0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e50:	f1a1 0824 	sub.w	r8, r1, #36	; 0x24
 8001e54:	eb00 0708 	add.w	r7, r0, r8
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e58:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8001e5c:	f8d6 c014 	ldr.w	ip, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e60:	60c7      	str	r7, [r0, #12]
 8001e62:	f840 3008 	str.w	r3, [r0, r8]
 8001e66:	9b08      	ldr	r3, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001e68:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	f240 7301 	movw	r3, #1793	; 0x701
 8001e70:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e74:	623b      	str	r3, [r7, #32]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001e76:	f100 0e28 	add.w	lr, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001e7a:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001e7c:	f100 0924 	add.w	r9, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001e80:	2302      	movs	r3, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001e82:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001e84:	2201      	movs	r2, #1
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e86:	6106      	str	r6, [r0, #16]
 8001e88:	f8c0 c014 	str.w	ip, [r0, #20]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001e8c:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e8e:	6170      	str	r0, [r6, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001e90:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e92:	f8cc 0010 	str.w	r0, [ip, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001e96:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001e98:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001e9a:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001e9c:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001e9e:	6185      	str	r5, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001ea0:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001ea4:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
 8001ea8:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001eac:	f7ff ff50 	bl	8001d50 <chSchWakeupS>
 8001eb0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001eba:	bf00      	nop
 8001ebc:	f3af 8000 	nop.w

08001ec0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001ec0:	f641 63c0 	movw	r3, #7872	; 0x1ec0
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001ec4:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001ece:	6814      	ldr	r4, [r2, #0]
 8001ed0:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	7710      	strb	r0, [r2, #28]
  chSysSwitch(currp, otp);
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	601c      	str	r4, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001edc:	619a      	str	r2, [r3, #24]
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
}
 8001ede:	bc10      	pop	{r4}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001ee0:	f7fe bc06 	b.w	80006f0 <_port_switch>
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	f3af 8000 	nop.w
 8001eec:	f3af 8000 	nop.w

08001ef0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
 8001ef8:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <chMsgWait+0x38>)
 8001efa:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 8001efc:	4613      	mov	r3, r2
 8001efe:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001f02:	4298      	cmp	r0, r3
 8001f04:	d008      	beq.n	8001f18 <chMsgWait+0x28>
 8001f06:	6801      	ldr	r1, [r0, #0]
 8001f08:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8001f0a:	220d      	movs	r2, #13
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	7702      	strb	r2, [r0, #28]
 8001f10:	2300      	movs	r3, #0
 8001f12:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return tp;
}
 8001f16:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
    chSchGoSleepS(CH_STATE_WTMSG);
 8001f18:	200e      	movs	r0, #14
 8001f1a:	f7ff ffd1 	bl	8001ec0 <chSchGoSleepS>
 8001f1e:	69a2      	ldr	r2, [r4, #24]
 8001f20:	4613      	mov	r3, r2
 8001f22:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001f26:	e7ee      	b.n	8001f06 <chMsgWait+0x16>
 8001f28:	20001ec0 	.word	0x20001ec0
 8001f2c:	f3af 8000 	nop.w

08001f30 <chSemWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4603      	mov	r3, r0
 8001f34:	2220      	movs	r2, #32
 8001f36:	f382 8811 	msr	BASEPRI, r2
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8001f3a:	6880      	ldr	r0, [r0, #8]
 8001f3c:	1e41      	subs	r1, r0, #1
 8001f3e:	2900      	cmp	r1, #0
 8001f40:	6099      	str	r1, [r3, #8]
 8001f42:	db04      	blt.n	8001f4e <chSemWait+0x1e>
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
    return currp->p_u.rdymsg;
  }
  return MSG_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	2200      	movs	r2, #0
 8001f48:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8001f4c:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001f4e:	4c07      	ldr	r4, [pc, #28]	; (8001f6c <chSemWait+0x3c>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001f50:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001f52:	69a2      	ldr	r2, [r4, #24]
 8001f54:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f56:	6859      	ldr	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001f58:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8001f5a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001f60:	f7ff ffae 	bl	8001ec0 <chSchGoSleepS>
    return currp->p_u.rdymsg;
 8001f64:	69a3      	ldr	r3, [r4, #24]
 8001f66:	6a18      	ldr	r0, [r3, #32]
 8001f68:	e7ed      	b.n	8001f46 <chSemWait+0x16>
 8001f6a:	bf00      	nop
 8001f6c:	20001ec0 	.word	0x20001ec0

08001f70 <thread1.7054>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8001f74:	f640 4048 	movw	r0, #3144	; 0xc48
 8001f78:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f7c:	f7ff ffd8 	bl	8001f30 <chSemWait>
  test_emit_token(*(char *)p);
 8001f80:	7820      	ldrb	r0, [r4, #0]
 8001f82:	f7ff fc9d 	bl	80018c0 <test_emit_token>
  return 0;
}
 8001f86:	2000      	movs	r0, #0
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	bf00      	nop
 8001f8c:	f3af 8000 	nop.w

08001f90 <thread3.7057>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 8001f90:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8001f92:	f640 4448 	movw	r4, #3144	; 0xc48
 8001f96:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff ffc8 	bl	8001f30 <chSemWait>
  chSemSignal(&sem1);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ff35 	bl	8001e10 <chSemSignal>
  return 0;
}
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	bd10      	pop	{r4, pc}
 8001faa:	bf00      	nop
 8001fac:	f3af 8000 	nop.w

08001fb0 <_port_irq_epilogue>:
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8001fb6:	f44f 406d 	mov.w	r0, #60672	; 0xed00
 8001fba:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8001fbe:	6841      	ldr	r1, [r0, #4]
 8001fc0:	f411 6200 	ands.w	r2, r1, #2048	; 0x800
 8001fc4:	d102      	bne.n	8001fcc <_port_irq_epilogue+0x1c>
 8001fc6:	f382 8811 	msr	BASEPRI, r2
 8001fca:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001fcc:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001fd0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001fd4:	f843 0c04 	str.w	r0, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001fd8:	f1a3 0120 	sub.w	r1, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001fdc:	f381 8809 	msr	PSP, r1
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001fe0:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <_port_irq_epilogue+0x48>)
 8001fe2:	6810      	ldr	r0, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001fe4:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001fe6:	6881      	ldr	r1, [r0, #8]
 8001fe8:	6890      	ldr	r0, [r2, #8]
 8001fea:	4281      	cmp	r1, r0
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001fec:	bf8c      	ite	hi
 8001fee:	4803      	ldrhi	r0, [pc, #12]	; (8001ffc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001ff0:	4803      	ldrls	r0, [pc, #12]	; (8002000 <_port_irq_epilogue+0x50>)
 8001ff2:	f843 0c08 	str.w	r0, [r3, #-8]
 8001ff6:	4770      	bx	lr
 8001ff8:	20001ec0 	.word	0x20001ec0
 8001ffc:	0800070f 	.word	0x0800070f
 8002000:	08000712 	.word	0x08000712
 8002004:	f3af 8000 	nop.w
 8002008:	f3af 8000 	nop.w
 800200c:	f3af 8000 	nop.w

08002010 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002010:	2200      	movs	r2, #0
 8002012:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <chSchReadyI+0x1c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002016:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002018:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	428a      	cmp	r2, r1
 800201e:	d2fb      	bcs.n	8002018 <chSchReadyI+0x8>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002020:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002022:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8002024:	6041      	str	r1, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8002026:	6008      	str	r0, [r1, #0]
 8002028:	6058      	str	r0, [r3, #4]
  return tp;
}
 800202a:	4770      	bx	lr
 800202c:	20001ec0 	.word	0x20001ec0

08002030 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002032:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002034:	6994      	ldr	r4, [r2, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002036:	2520      	movs	r5, #32
 8002038:	f385 8811 	msr	BASEPRI, r5

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800203c:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8002040:	6225      	str	r5, [r4, #32]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002042:	7f06      	ldrb	r6, [r0, #28]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8002044:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002046:	2e0e      	cmp	r6, #14
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8002048:	6025      	str	r5, [r4, #0]
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 800204a:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev = tqp->p_prev;
 800204c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800204e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002050:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002052:	d007      	beq.n	8002064 <chMsgSend+0x34>
    chSchReadyI(tp);
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8002054:	200c      	movs	r0, #12
 8002056:	f7ff ff33 	bl	8001ec0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800205a:	6a20      	ldr	r0, [r4, #32]
 800205c:	2100      	movs	r1, #0
 800205e:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  return msg;
}
 8002062:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
    chSchReadyI(tp);
 8002064:	f7ff ffd4 	bl	8002010 <chSchReadyI>
 8002068:	e7f4      	b.n	8002054 <chMsgSend+0x24>
 800206a:	bf00      	nop
 800206c:	20001ec0 	.word	0x20001ec0

08002070 <thread.7390>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8002070:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8002072:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8002074:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8002076:	f7ff ffdb 	bl	8002030 <chMsgSend>
  chMsgSend(p, 'B');
 800207a:	2142      	movs	r1, #66	; 0x42
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff ffd7 	bl	8002030 <chMsgSend>
  chMsgSend(p, 'C');
 8002082:	4620      	mov	r0, r4
 8002084:	2143      	movs	r1, #67	; 0x43
 8002086:	f7ff ffd3 	bl	8002030 <chMsgSend>
  return 0;
}
 800208a:	2000      	movs	r0, #0
 800208c:	bd10      	pop	{r4, pc}
 800208e:	bf00      	nop

08002090 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002090:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002092:	7f03      	ldrb	r3, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002094:	4311      	orrs	r1, r2
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002096:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002098:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800209a:	d00a      	beq.n	80020b2 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 800209c:	2b0b      	cmp	r3, #11
 800209e:	d000      	beq.n	80020a2 <chEvtSignalI+0x12>
 80020a0:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80020a2:	6a02      	ldr	r2, [r0, #32]
 80020a4:	4011      	ands	r1, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80020a6:	428a      	cmp	r2, r1
 80020a8:	d1fa      	bne.n	80020a0 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80020aa:	2100      	movs	r1, #0
 80020ac:	6201      	str	r1, [r0, #32]
    chSchReadyI(tp);
 80020ae:	f7ff bfaf 	b.w	8002010 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 80020b2:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80020b4:	4219      	tst	r1, r3
 80020b6:	d1f8      	bne.n	80020aa <chEvtSignalI+0x1a>
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w

080020c0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020c0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80020c2:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020c4:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80020c6:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020c8:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80020ca:	d00e      	beq.n	80020ea <chEvtBroadcastFlagsI+0x2a>
    elp->el_flags |= flags;
 80020cc:	68e3      	ldr	r3, [r4, #12]
 80020ce:	ea45 0003 	orr.w	r0, r5, r3
 80020d2:	60e0      	str	r0, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0))
 80020d4:	b115      	cbz	r5, 80020dc <chEvtBroadcastFlagsI+0x1c>
 80020d6:	6922      	ldr	r2, [r4, #16]
 80020d8:	4210      	tst	r0, r2
 80020da:	d003      	beq.n	80020e4 <chEvtBroadcastFlagsI+0x24>
      chEvtSignalI(elp->el_listener, elp->el_events);
 80020dc:	6860      	ldr	r0, [r4, #4]
 80020de:	68a1      	ldr	r1, [r4, #8]
 80020e0:	f7ff ffd6 	bl	8002090 <chEvtSignalI>
    elp = elp->el_next;
 80020e4:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80020e6:	42a6      	cmp	r6, r4
 80020e8:	d1f0      	bne.n	80020cc <chEvtBroadcastFlagsI+0xc>
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	f3af 8000 	nop.w

080020f0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 80020f2:	b570      	push	{r4, r5, r6, lr}
 80020f4:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 80020f6:	699c      	ldr	r4, [r3, #24]
 80020f8:	f380 8811 	msr	BASEPRI, r0

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 80020fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020fe:	b1d3      	cbz	r3, 8002136 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8002100:	2600      	movs	r6, #0
 8002102:	e00a      	b.n	800211a <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002104:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8002106:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8002108:	6019      	str	r1, [r3, #0]
 800210a:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800210c:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 800210e:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8002110:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 8002112:	f7ff ff7d 	bl	8002010 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8002116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002118:	b14b      	cbz	r3, 800212e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800211a:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800211c:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 800211e:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 8002120:	4610      	mov	r0, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8002122:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8002124:	d1ee      	bne.n	8002104 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8002126:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8002128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f5      	bne.n	800211a <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 800212e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002130:	60a0      	str	r0, [r4, #8]
    chSchRescheduleS();
 8002132:	f7ff fd3d 	bl	8001bb0 <chSchRescheduleS>
 8002136:	2200      	movs	r2, #0
 8002138:	f382 8811 	msr	BASEPRI, r2
 800213c:	bd70      	pop	{r4, r5, r6, pc}
 800213e:	bf00      	nop
 8002140:	20001ec0 	.word	0x20001ec0
 8002144:	f3af 8000 	nop.w
 8002148:	f3af 8000 	nop.w
 800214c:	f3af 8000 	nop.w

08002150 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8002150:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8002154:	4604      	mov	r4, r0
 8002156:	6825      	ldr	r5, [r4, #0]
  thread_t *ctp = currp;
 8002158:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800215a:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800215c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800215e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002160:	d017      	beq.n	8002192 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002162:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002164:	b14b      	cbz	r3, 800217a <chMtxUnlockS+0x2a>
 8002166:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <chMtxUnlockS+0x24>
 800216c:	6892      	ldr	r2, [r2, #8]
 800216e:	4291      	cmp	r1, r2
 8002170:	bf38      	it	cc
 8002172:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8002174:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f5      	bne.n	8002166 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800217a:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800217c:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800217e:	6081      	str	r1, [r0, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 8002180:	4628      	mov	r0, r5
 8002182:	6023      	str	r3, [r4, #0]
 8002184:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8002186:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8002188:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800218a:	63ac      	str	r4, [r5, #56]	; 0x38
    else
      mp->m_owner = NULL;
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 800218c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 800218e:	f7ff bf3f 	b.w	8002010 <chSchReadyI>
    }
    else
      mp->m_owner = NULL;
 8002192:	2100      	movs	r1, #0
 8002194:	60a1      	str	r1, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 8002196:	bc30      	pop	{r4, r5}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20001ec0 	.word	0x20001ec0

080021a0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <chMtxLockS+0xc0>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80021a4:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80021a6:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 80021a8:	6994      	ldr	r4, [r2, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d051      	beq.n	8002252 <chMtxLockS+0xb2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80021ae:	68a1      	ldr	r1, [r4, #8]
 80021b0:	6898      	ldr	r0, [r3, #8]
 80021b2:	4281      	cmp	r1, r0
 80021b4:	d906      	bls.n	80021c4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80021b6:	7f1a      	ldrb	r2, [r3, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80021b8:	6099      	str	r1, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80021ba:	2a06      	cmp	r2, #6
 80021bc:	d031      	beq.n	8002222 <chMtxLockS+0x82>
 80021be:	2a07      	cmp	r2, #7
 80021c0:	d01c      	beq.n	80021fc <chMtxLockS+0x5c>
 80021c2:	b192      	cbz	r2, 80021ea <chMtxLockS+0x4a>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80021c4:	4628      	mov	r0, r5
  do {
    cp = cp->p_next;
 80021c6:	6800      	ldr	r0, [r0, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80021c8:	4285      	cmp	r5, r0
 80021ca:	d003      	beq.n	80021d4 <chMtxLockS+0x34>
 80021cc:	6883      	ldr	r3, [r0, #8]
 80021ce:	68a1      	ldr	r1, [r4, #8]
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d2f8      	bcs.n	80021c6 <chMtxLockS+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80021d4:	6842      	ldr	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80021d6:	6020      	str	r0, [r4, #0]
  tp->p_prev = cp->p_prev;
 80021d8:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80021da:	6044      	str	r4, [r0, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80021dc:	2006      	movs	r0, #6
 80021de:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 80021e0:	6225      	str	r5, [r4, #32]
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80021e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80021e6:	f7ff be6b 	b.w	8001ec0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80021ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ee:	6011      	str	r1, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 80021f0:	6819      	ldr	r1, [r3, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 80021f2:	4618      	mov	r0, r3
 80021f4:	604a      	str	r2, [r1, #4]
 80021f6:	f7ff ff0b 	bl	8002010 <chSchReadyI>
 80021fa:	e7e3      	b.n	80021c4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80021fc:	6858      	ldr	r0, [r3, #4]
 80021fe:	681f      	ldr	r7, [r3, #0]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 8002200:	6a1e      	ldr	r6, [r3, #32]
 8002202:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8002204:	681f      	ldr	r7, [r3, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8002206:	4632      	mov	r2, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 8002208:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800220a:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800220c:	4296      	cmp	r6, r2
 800220e:	d002      	beq.n	8002216 <chMtxLockS+0x76>
 8002210:	6890      	ldr	r0, [r2, #8]
 8002212:	4288      	cmp	r0, r1
 8002214:	d2f9      	bcs.n	800220a <chMtxLockS+0x6a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002216:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8002218:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 800221a:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800221c:	600b      	str	r3, [r1, #0]
 800221e:	6053      	str	r3, [r2, #4]
 8002220:	e7d0      	b.n	80021c4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8002222:	6858      	ldr	r0, [r3, #4]
 8002224:	681f      	ldr	r7, [r3, #0]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 8002226:	6a1e      	ldr	r6, [r3, #32]
 8002228:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800222a:	681f      	ldr	r7, [r3, #0]
 800222c:	4632      	mov	r2, r6
 800222e:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8002230:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002232:	4296      	cmp	r6, r2
 8002234:	d012      	beq.n	800225c <chMtxLockS+0xbc>
 8002236:	6890      	ldr	r0, [r2, #8]
 8002238:	4288      	cmp	r0, r1
 800223a:	d2f9      	bcs.n	8002230 <chMtxLockS+0x90>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800223c:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800223e:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 8002240:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	6053      	str	r3, [r2, #4]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 8002246:	68b3      	ldr	r3, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8002248:	68a1      	ldr	r1, [r4, #8]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	428a      	cmp	r2, r1
 800224e:	d3b2      	bcc.n	80021b6 <chMtxLockS+0x16>
 8002250:	e7b8      	b.n	80021c4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8002252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8002254:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 8002256:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 8002258:	63a0      	str	r0, [r4, #56]	; 0x38
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800225c:	4632      	mov	r2, r6
 800225e:	e7ed      	b.n	800223c <chMtxLockS+0x9c>
 8002260:	20001ec0 	.word	0x20001ec0
 8002264:	f3af 8000 	nop.w
 8002268:	f3af 8000 	nop.w
 800226c:	f3af 8000 	nop.w

08002270 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8002270:	b508      	push	{r3, lr}
 8002272:	2320      	movs	r3, #32
 8002274:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  chMtxLockS(mp);
 8002278:	f7ff ff92 	bl	80021a0 <chMtxLockS>
 800227c:	2000      	movs	r0, #0
 800227e:	f380 8811 	msr	BASEPRI, r0
 8002282:	bd08      	pop	{r3, pc}
 8002284:	f3af 8000 	nop.w
 8002288:	f3af 8000 	nop.w
 800228c:	f3af 8000 	nop.w

08002290 <thread1.7272.4114>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8002290:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8002292:	f640 0400 	movw	r4, #2048	; 0x800
 8002296:	f2c2 0400 	movt	r4, #8192	; 0x2000
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 800229a:	4605      	mov	r5, r0

  chMtxLock(&m1);
 800229c:	4620      	mov	r0, r4
 800229e:	f7ff ffe7 	bl	8002270 <chMtxLock>
  test_emit_token(*(char *)p);
 80022a2:	7828      	ldrb	r0, [r5, #0]
 80022a4:	f7ff fb0c 	bl	80018c0 <test_emit_token>
  chMtxUnlock(&m1);
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff fd81 	bl	8001db0 <chMtxUnlock>
  return 0;
}
 80022ae:	2000      	movs	r0, #0
 80022b0:	bd38      	pop	{r3, r4, r5, pc}
 80022b2:	bf00      	nop
 80022b4:	f3af 8000 	nop.w
 80022b8:	f3af 8000 	nop.w
 80022bc:	f3af 8000 	nop.w

080022c0 <thread12.7263>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 80022c0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 80022c2:	f640 4438 	movw	r4, #3128	; 0xc38
 80022c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 80022ca:	4605      	mov	r5, r0

  chMtxLock(&m2);
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff ffcf 	bl	8002270 <chMtxLock>
  test_emit_token(*(char *)p);
 80022d2:	7828      	ldrb	r0, [r5, #0]
 80022d4:	f7ff faf4 	bl	80018c0 <test_emit_token>
  chMtxUnlock(&m2);
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff fd69 	bl	8001db0 <chMtxUnlock>
  return 0;
}
 80022de:	2000      	movs	r0, #0
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	f3af 8000 	nop.w
 80022e8:	f3af 8000 	nop.w
 80022ec:	f3af 8000 	nop.w

080022f0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 80022f2:	4c0e      	ldr	r4, [pc, #56]	; (800232c <chHeapStatus+0x3c>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80022f4:	460f      	mov	r7, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 80022f6:	2800      	cmp	r0, #0
 80022f8:	bf18      	it	ne
 80022fa:	4604      	movne	r4, r0

  H_LOCK(heapp);
 80022fc:	f104 0610 	add.w	r6, r4, #16
 8002300:	4630      	mov	r0, r6
 8002302:	f7ff ffb5 	bl	8002270 <chMtxLock>

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002306:	68a3      	ldr	r3, [r4, #8]
 8002308:	b16b      	cbz	r3, 8002326 <chHeapStatus+0x36>
 800230a:	2200      	movs	r2, #0
 800230c:	4614      	mov	r4, r2
 800230e:	cb28      	ldmia	r3, {r3, r5}
 8002310:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 8002312:	1952      	adds	r2, r2, r5
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1fa      	bne.n	800230e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  if (sizep)
 8002318:	b107      	cbz	r7, 800231c <chHeapStatus+0x2c>
    *sizep = sz;
 800231a:	603a      	str	r2, [r7, #0]

  H_UNLOCK(heapp);
 800231c:	4630      	mov	r0, r6
 800231e:	f7ff fd47 	bl	8001db0 <chMtxUnlock>
  return n;
}
 8002322:	4620      	mov	r0, r4
 8002324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (heapp == NULL)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
 8002326:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002328:	461c      	mov	r4, r3
 800232a:	e7f5      	b.n	8002318 <chHeapStatus+0x28>
 800232c:	20001580 	.word	0x20001580

08002330 <chHeapFree.4233>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 8002332:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002336:	4606      	mov	r6, r0
  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
  H_LOCK(heapp);
 8002338:	f105 0710 	add.w	r7, r5, #16
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 800233c:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002340:	3508      	adds	r5, #8
  H_LOCK(heapp);
 8002342:	4638      	mov	r0, r7
 8002344:	f7ff ff94 	bl	8002270 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002348:	462b      	mov	r3, r5
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800234a:	42ab      	cmp	r3, r5
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800234c:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800234e:	d001      	beq.n	8002354 <chHeapFree.4233+0x24>
 8002350:	42a3      	cmp	r3, r4
 8002352:	d202      	bcs.n	800235a <chHeapFree.4233+0x2a>
 8002354:	b11a      	cbz	r2, 800235e <chHeapFree.4233+0x2e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002356:	4294      	cmp	r4, r2
 8002358:	d301      	bcc.n	800235e <chHeapFree.4233+0x2e>
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
 800235a:	4613      	mov	r3, r2
 800235c:	e7f5      	b.n	800234a <chHeapFree.4233+0x1a>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800235e:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002362:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8002366:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002368:	f101 0208 	add.w	r2, r1, #8
 800236c:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8002370:	18a0      	adds	r0, r4, r2
 8002372:	42a8      	cmp	r0, r5
 8002374:	d00a      	beq.n	800238c <chHeapFree.4233+0x5c>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	f102 0008 	add.w	r0, r2, #8
 800237c:	1819      	adds	r1, r3, r0
 800237e:	428c      	cmp	r4, r1
 8002380:	d012      	beq.n	80023a8 <chHeapFree.4233+0x78>
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8002382:	4638      	mov	r0, r7
  return;
}
 8002384:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8002388:	f7ff bd12 	b.w	8001db0 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 800238c:	6840      	ldr	r0, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 800238e:	58a2      	ldr	r2, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002390:	1809      	adds	r1, r1, r0
 8002392:	3108      	adds	r1, #8
 8002394:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002398:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	f102 0008 	add.w	r0, r2, #8
 80023a2:	1819      	adds	r1, r3, r0
 80023a4:	428c      	cmp	r4, r1
 80023a6:	d1ec      	bne.n	8002382 <chHeapFree.4233+0x52>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80023a8:	f856 0c04 	ldr.w	r0, [r6, #-4]
        qp->h.u.next = hp->h.u.next;
 80023ac:	f856 1c08 	ldr.w	r1, [r6, #-8]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80023b0:	1812      	adds	r2, r2, r0
 80023b2:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80023b4:	e883 0006 	stmia.w	r3, {r1, r2}
 80023b8:	e7e3      	b.n	8002382 <chHeapFree.4233+0x52>
 80023ba:	bf00      	nop
 80023bc:	f3af 8000 	nop.w

080023c0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80023c0:	b430      	push	{r4, r5}
 80023c2:	4603      	mov	r3, r0
 80023c4:	2120      	movs	r1, #32
 80023c6:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 80023ca:	7f82      	ldrb	r2, [r0, #30]
 80023cc:	1e54      	subs	r4, r2, #1
 80023ce:	b2e2      	uxtb	r2, r4
 80023d0:	7782      	strb	r2, [r0, #30]
 80023d2:	2400      	movs	r4, #0
 80023d4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 80023d8:	b912      	cbnz	r2, 80023e0 <chThdRelease+0x20>
 80023da:	7f04      	ldrb	r4, [r0, #28]
 80023dc:	2c0f      	cmp	r4, #15
 80023de:	d001      	beq.n	80023e4 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 80023e0:	bc30      	pop	{r4, r5}
 80023e2:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 80023e4:	7f44      	ldrb	r4, [r0, #29]
 80023e6:	f004 0403 	and.w	r4, r4, #3
 80023ea:	2c01      	cmp	r4, #1
 80023ec:	d00f      	beq.n	800240e <chThdRelease+0x4e>
 80023ee:	2c02      	cmp	r4, #2
 80023f0:	d1f6      	bne.n	80023e0 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 80023f2:	6944      	ldr	r4, [r0, #20]
 80023f4:	6905      	ldr	r5, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 80023f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 80023f8:	6125      	str	r5, [r4, #16]
 80023fa:	691d      	ldr	r5, [r3, #16]
 80023fc:	616c      	str	r4, [r5, #20]
 80023fe:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002402:	6801      	ldr	r1, [r0, #0]
 8002404:	6019      	str	r1, [r3, #0]
  mp->mp_next = php;
 8002406:	6003      	str	r3, [r0, #0]
 8002408:	f382 8811 	msr	BASEPRI, r2
 800240c:	e7e8      	b.n	80023e0 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 800240e:	6942      	ldr	r2, [r0, #20]
 8002410:	6901      	ldr	r1, [r0, #16]
 8002412:	6111      	str	r1, [r2, #16]
 8002414:	6903      	ldr	r3, [r0, #16]
 8002416:	615a      	str	r2, [r3, #20]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8002418:	bc30      	pop	{r4, r5}
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
#endif
      chHeapFree(tp);
 800241a:	f7ff bf89 	b.w	8002330 <chHeapFree.4233>
 800241e:	bf00      	nop

08002420 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4604      	mov	r4, r0
 8002424:	2320      	movs	r3, #32
 8002426:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800242a:	7f00      	ldrb	r0, [r0, #28]
 800242c:	280f      	cmp	r0, #15
 800242e:	d007      	beq.n	8002440 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8002430:	4908      	ldr	r1, [pc, #32]	; (8002454 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8002432:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002434:	698d      	ldr	r5, [r1, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8002436:	2009      	movs	r0, #9
 8002438:	602a      	str	r2, [r5, #0]
  tlp->p_next = tp;
 800243a:	6265      	str	r5, [r4, #36]	; 0x24
 800243c:	f7ff fd40 	bl	8001ec0 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8002440:	6a25      	ldr	r5, [r4, #32]
 8002442:	2300      	movs	r3, #0
 8002444:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff ffb9 	bl	80023c0 <chThdRelease>
#endif
  return msg;
}
 800244e:	4628      	mov	r0, r5
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	20001ec0 	.word	0x20001ec0
 8002458:	f3af 8000 	nop.w
 800245c:	f3af 8000 	nop.w

08002460 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8002460:	b510      	push	{r4, lr}
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8002462:	4c12      	ldr	r4, [pc, #72]	; (80024ac <test_wait_threads+0x4c>)
 8002464:	6820      	ldr	r0, [r4, #0]
 8002466:	b118      	cbz	r0, 8002470 <test_wait_threads+0x10>
      chThdWait(threads[i]);
 8002468:	f7ff ffda 	bl	8002420 <chThdWait>
      threads[i] = NULL;
 800246c:	2300      	movs	r3, #0
 800246e:	6023      	str	r3, [r4, #0]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8002470:	6860      	ldr	r0, [r4, #4]
 8002472:	b120      	cbz	r0, 800247e <test_wait_threads+0x1e>
      chThdWait(threads[i]);
 8002474:	f7ff ffd4 	bl	8002420 <chThdWait>
      threads[i] = NULL;
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <test_wait_threads+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	6042      	str	r2, [r0, #4]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800247e:	68a0      	ldr	r0, [r4, #8]
 8002480:	b120      	cbz	r0, 800248c <test_wait_threads+0x2c>
      chThdWait(threads[i]);
 8002482:	f7ff ffcd 	bl	8002420 <chThdWait>
      threads[i] = NULL;
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <test_wait_threads+0x4c>)
 8002488:	2100      	movs	r1, #0
 800248a:	6099      	str	r1, [r3, #8]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800248c:	68e0      	ldr	r0, [r4, #12]
 800248e:	b120      	cbz	r0, 800249a <test_wait_threads+0x3a>
      chThdWait(threads[i]);
 8002490:	f7ff ffc6 	bl	8002420 <chThdWait>
      threads[i] = NULL;
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <test_wait_threads+0x4c>)
 8002496:	2200      	movs	r2, #0
 8002498:	60c2      	str	r2, [r0, #12]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800249a:	6920      	ldr	r0, [r4, #16]
 800249c:	b120      	cbz	r0, 80024a8 <test_wait_threads+0x48>
      chThdWait(threads[i]);
 800249e:	f7ff ffbf 	bl	8002420 <chThdWait>
      threads[i] = NULL;
 80024a2:	4b02      	ldr	r3, [pc, #8]	; (80024ac <test_wait_threads+0x4c>)
 80024a4:	2100      	movs	r1, #0
 80024a6:	6119      	str	r1, [r3, #16]
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	bf00      	nop
 80024ac:	20002010 	.word	0x20002010

080024b0 <mtx1_execute.7299>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	4e28      	ldr	r6, [pc, #160]	; (8002554 <mtx1_execute.7299+0xa4>)
 80024b4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80024b6:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <mtx1_execute.7299+0xa8>)
 80024ba:	689c      	ldr	r4, [r3, #8]
 80024bc:	f7ff fed8 	bl	8002270 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80024c0:	4826      	ldr	r0, [pc, #152]	; (800255c <mtx1_execute.7299+0xac>)
 80024c2:	1c62      	adds	r2, r4, #1
 80024c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <mtx1_execute.7299+0xb0>)
 80024ca:	9000      	str	r0, [sp, #0]
 80024cc:	4825      	ldr	r0, [pc, #148]	; (8002564 <mtx1_execute.7299+0xb4>)
 80024ce:	f7ff fcb7 	bl	8001e40 <chThdCreateStatic>
 80024d2:	4d25      	ldr	r5, [pc, #148]	; (8002568 <mtx1_execute.7299+0xb8>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80024d4:	1ca2      	adds	r2, r4, #2

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80024d6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80024d8:	4824      	ldr	r0, [pc, #144]	; (800256c <mtx1_execute.7299+0xbc>)
 80024da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <mtx1_execute.7299+0xb0>)
 80024e0:	9000      	str	r0, [sp, #0]
 80024e2:	4823      	ldr	r0, [pc, #140]	; (8002570 <mtx1_execute.7299+0xc0>)
 80024e4:	f7ff fcac 	bl	8001e40 <chThdCreateStatic>
 80024e8:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80024ea:	4822      	ldr	r0, [pc, #136]	; (8002574 <mtx1_execute.7299+0xc4>)
 80024ec:	1ce2      	adds	r2, r4, #3
 80024ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <mtx1_execute.7299+0xb0>)
 80024f4:	9000      	str	r0, [sp, #0]
 80024f6:	4820      	ldr	r0, [pc, #128]	; (8002578 <mtx1_execute.7299+0xc8>)
 80024f8:	f7ff fca2 	bl	8001e40 <chThdCreateStatic>
 80024fc:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80024fe:	481f      	ldr	r0, [pc, #124]	; (800257c <mtx1_execute.7299+0xcc>)
 8002500:	1d22      	adds	r2, r4, #4
 8002502:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <mtx1_execute.7299+0xb0>)
 8002508:	9000      	str	r0, [sp, #0]
 800250a:	481d      	ldr	r0, [pc, #116]	; (8002580 <mtx1_execute.7299+0xd0>)
 800250c:	f7ff fc98 	bl	8001e40 <chThdCreateStatic>
 8002510:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002512:	481c      	ldr	r0, [pc, #112]	; (8002584 <mtx1_execute.7299+0xd4>)
 8002514:	1d62      	adds	r2, r4, #5
 8002516:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <mtx1_execute.7299+0xb0>)
 800251c:	9000      	str	r0, [sp, #0]
 800251e:	481a      	ldr	r0, [pc, #104]	; (8002588 <mtx1_execute.7299+0xd8>)
 8002520:	f7ff fc8e 	bl	8001e40 <chThdCreateStatic>
 8002524:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <mtx1_execute.7299+0xa8>)
 8002528:	f7ff fc42 	bl	8001db0 <chMtxUnlock>
  test_wait_threads();
 800252c:	f7ff ff98 	bl	8002460 <test_wait_threads>
 8002530:	69b1      	ldr	r1, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8002532:	2001      	movs	r0, #1
 8002534:	688a      	ldr	r2, [r1, #8]
 8002536:	1aa3      	subs	r3, r4, r2
 8002538:	4259      	negs	r1, r3
 800253a:	4159      	adcs	r1, r3
 800253c:	f7ff f9a8 	bl	8001890 <_test_assert>
 8002540:	b108      	cbz	r0, 8002546 <mtx1_execute.7299+0x96>
  test_assert_sequence(2, "ABCDE");
}
 8002542:	b002      	add	sp, #8
 8002544:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002546:	4911      	ldr	r1, [pc, #68]	; (800258c <mtx1_execute.7299+0xdc>)
 8002548:	2002      	movs	r0, #2
}
 800254a:	b002      	add	sp, #8
 800254c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002550:	f7ff b956 	b.w	8001800 <_test_assert_sequence>
 8002554:	20001ec0 	.word	0x20001ec0
 8002558:	20000800 	.word	0x20000800
 800255c:	0800a4d8 	.word	0x0800a4d8
 8002560:	08002291 	.word	0x08002291
 8002564:	20001850 	.word	0x20001850
 8002568:	20002010 	.word	0x20002010
 800256c:	0800a85c 	.word	0x0800a85c
 8002570:	20001998 	.word	0x20001998
 8002574:	0800a4c8 	.word	0x0800a4c8
 8002578:	20001ae0 	.word	0x20001ae0
 800257c:	0800a4cc 	.word	0x0800a4cc
 8002580:	20001c28 	.word	0x20001c28
 8002584:	0800a4d0 	.word	0x0800a4d0
 8002588:	20001d70 	.word	0x20001d70
 800258c:	0800a4d4 	.word	0x0800a4d4

08002590 <thd1_execute.6828>:

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8002590:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002592:	f641 67c0 	movw	r7, #7872	; 0x1ec0
 8002596:	f2c2 0700 	movt	r7, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800259a:	69bb      	ldr	r3, [r7, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800259c:	f641 0550 	movw	r5, #6224	; 0x1850
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	f641 1621 	movw	r6, #6433	; 0x1921
 80025a6:	f24a 40d8 	movw	r0, #42200	; 0xa4d8

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 80025aa:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80025ac:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80025b0:	f6c0 0600 	movt	r6, #2048	; 0x800
 80025b4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025b8:	3a05      	subs	r2, #5
 80025ba:	4633      	mov	r3, r6
 80025bc:	9000      	str	r0, [sp, #0]
 80025be:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025c2:	4628      	mov	r0, r5
 80025c4:	f7ff fc3c 	bl	8001e40 <chThdCreateStatic>
 80025c8:	f242 0410 	movw	r4, #8208	; 0x2010
 80025cc:	69b9      	ldr	r1, [r7, #24]
 80025ce:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80025d2:	688b      	ldr	r3, [r1, #8]
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80025d4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80025d6:	f64a 005c 	movw	r0, #43100	; 0xa85c
 80025da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025e2:	1f1a      	subs	r2, r3, #4
 80025e4:	9000      	str	r0, [sp, #0]
 80025e6:	4633      	mov	r3, r6
 80025e8:	1868      	adds	r0, r5, r1
 80025ea:	f7ff fc29 	bl	8001e40 <chThdCreateStatic>
 80025ee:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80025f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025f4:	6893      	ldr	r3, [r2, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80025f6:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80025f8:	f24a 40c8 	movw	r0, #42184	; 0xa4c8
 80025fc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002600:	1eda      	subs	r2, r3, #3
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	4633      	mov	r3, r6
 8002606:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800260a:	f7ff fc19 	bl	8001e40 <chThdCreateStatic>
 800260e:	69b9      	ldr	r1, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002610:	4633      	mov	r3, r6
 8002612:	688a      	ldr	r2, [r1, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8002614:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002616:	f24a 40cc 	movw	r0, #42188	; 0xa4cc
 800261a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800261e:	3a02      	subs	r2, #2
 8002620:	9000      	str	r0, [sp, #0]
 8002622:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002626:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800262a:	f7ff fc09 	bl	8001e40 <chThdCreateStatic>
 800262e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002630:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002634:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002636:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002638:	f24a 40d0 	movw	r0, #42192	; 0xa4d0
 800263c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002640:	3a01      	subs	r2, #1
 8002642:	4633      	mov	r3, r6
 8002644:	9000      	str	r0, [sp, #0]
 8002646:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800264a:	f7ff fbf9 	bl	8001e40 <chThdCreateStatic>
 800264e:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8002650:	f7ff ff06 	bl	8002460 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002654:	f24a 41d4 	movw	r1, #42196	; 0xa4d4
 8002658:	2001      	movs	r0, #1
 800265a:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 800265e:	b003      	add	sp, #12
 8002660:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002664:	f7ff b8cc 	b.w	8001800 <_test_assert_sequence>
 8002668:	f3af 8000 	nop.w
 800266c:	f3af 8000 	nop.w

08002670 <thd2_execute.6826>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002674:	f641 66c0 	movw	r6, #7872	; 0x1ec0
 8002678:	f2c2 0600 	movt	r6, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800267c:	69b3      	ldr	r3, [r6, #24]

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800267e:	f641 1521 	movw	r5, #6433	; 0x1921
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	f64a 015c 	movw	r1, #43100	; 0xa85c
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002688:	b082      	sub	sp, #8

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800268a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800268e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002692:	3a04      	subs	r2, #4
 8002694:	462b      	mov	r3, r5
 8002696:	9100      	str	r1, [sp, #0]
 8002698:	4833      	ldr	r0, [pc, #204]	; (8002768 <thd2_execute.6826+0xf8>)
 800269a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800269e:	f7ff fbcf 	bl	8001e40 <chThdCreateStatic>
 80026a2:	f242 0410 	movw	r4, #8208	; 0x2010
 80026a6:	69b7      	ldr	r7, [r6, #24]
 80026a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80026ac:	68bb      	ldr	r3, [r7, #8]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80026ae:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80026b0:	f641 0750 	movw	r7, #6224	; 0x1850
 80026b4:	f24a 40d8 	movw	r0, #42200	; 0xa4d8
 80026b8:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80026bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026c0:	1f5a      	subs	r2, r3, #5
 80026c2:	9000      	str	r0, [sp, #0]
 80026c4:	462b      	mov	r3, r5
 80026c6:	4638      	mov	r0, r7
 80026c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026cc:	f7ff fbb8 	bl	8001e40 <chThdCreateStatic>
 80026d0:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80026d2:	462b      	mov	r3, r5
 80026d4:	6891      	ldr	r1, [r2, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80026d6:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80026d8:	f24a 40d0 	movw	r0, #42192	; 0xa4d0
 80026dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026e0:	1e4a      	subs	r2, r1, #1
 80026e2:	9000      	str	r0, [sp, #0]
 80026e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026e8:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80026ec:	f7ff fba8 	bl	8001e40 <chThdCreateStatic>
 80026f0:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80026f2:	f24a 41cc 	movw	r1, #42188	; 0xa4cc
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	f6c0 0100 	movt	r1, #2048	; 0x800

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80026fc:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80026fe:	9100      	str	r1, [sp, #0]
 8002700:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8002704:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002708:	3a02      	subs	r2, #2
 800270a:	462b      	mov	r3, r5
 800270c:	f7ff fb98 	bl	8001e40 <chThdCreateStatic>
 8002710:	f04f 0820 	mov.w	r8, #32
 8002714:	60e0      	str	r0, [r4, #12]
 8002716:	f388 8811 	msr	BASEPRI, r8
 800271a:	69b0      	ldr	r0, [r6, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800271c:	f24a 43c8 	movw	r3, #42184	; 0xa4c8
 8002720:	6882      	ldr	r2, [r0, #8]
 8002722:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f507 7024 	add.w	r0, r7, #656	; 0x290
 800272c:	462b      	mov	r3, r5
 800272e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002732:	3a03      	subs	r2, #3
 8002734:	f7ff f9e4 	bl	8001b00 <chThdCreateI>
 8002738:	2500      	movs	r5, #0
 800273a:	60a0      	str	r0, [r4, #8]
 800273c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  chThdStart(threads[2]);
 8002740:	68a0      	ldr	r0, [r4, #8]
 8002742:	f388 8811 	msr	BASEPRI, r8
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8002746:	f7ff fc63 	bl	8002010 <chSchReadyI>
 800274a:	f385 8811 	msr	BASEPRI, r5
  test_wait_threads();
 800274e:	f7ff fe87 	bl	8002460 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002752:	f24a 41d4 	movw	r1, #42196	; 0xa4d4
 8002756:	2001      	movs	r0, #1
 8002758:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 800275c:	b002      	add	sp, #8
 800275e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002762:	f7ff b84d 	b.w	8001800 <_test_assert_sequence>
 8002766:	bf00      	nop
 8002768:	20001998 	.word	0x20001998
 800276c:	f3af 8000 	nop.w

08002770 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8002770:	b510      	push	{r4, lr}
 8002772:	2320      	movs	r3, #32
 8002774:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 800277a:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist)
 800277c:	428c      	cmp	r4, r1
 800277e:	d009      	beq.n	8002794 <chRegNextThread+0x24>
    ntp = NULL;
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8002780:	7fa2      	ldrb	r2, [r4, #30]
 8002782:	1c53      	adds	r3, r2, #1
 8002784:	77a3      	strb	r3, [r4, #30]
 8002786:	2100      	movs	r1, #0
 8002788:	f381 8811 	msr	BASEPRI, r1
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 800278c:	f7ff fe18 	bl	80023c0 <chThdRelease>
#endif
  return ntp;
}
 8002790:	4620      	mov	r0, r4
 8002792:	bd10      	pop	{r4, pc}
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
    ntp = NULL;
 8002794:	2400      	movs	r4, #0
 8002796:	e7f6      	b.n	8002786 <chRegNextThread+0x16>
 8002798:	20001ec0 	.word	0x20001ec0
 800279c:	f3af 8000 	nop.w

080027a0 <regfind.8080>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	2320      	movs	r3, #32
 80027a6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80027aa:	480a      	ldr	r0, [pc, #40]	; (80027d4 <regfind.8080+0x34>)
 80027ac:	2400      	movs	r4, #0
 80027ae:	6903      	ldr	r3, [r0, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 80027b0:	7f9a      	ldrb	r2, [r3, #30]
 80027b2:	1c51      	adds	r1, r2, #1
 80027b4:	7799      	strb	r1, [r3, #30]
 80027b6:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 80027ba:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 80027bc:	42ab      	cmp	r3, r5
 80027be:	bf08      	it	eq
 80027c0:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 80027c4:	f7ff ffd4 	bl	8002770 <chRegNextThread>
  } while (ftp != NULL);
 80027c8:	4603      	mov	r3, r0
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d1f5      	bne.n	80027ba <regfind.8080+0x1a>
  return found;
}
 80027ce:	4620      	mov	r0, r4
 80027d0:	bd38      	pop	{r3, r4, r5, pc}
 80027d2:	bf00      	nop
 80027d4:	20001ec0 	.word	0x20001ec0
 80027d8:	f3af 8000 	nop.w
 80027dc:	f3af 8000 	nop.w

080027e0 <chHeapAlloc.4244>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 80027e2:	4e22      	ldr	r6, [pc, #136]	; (800286c <chHeapAlloc.4244+0x8c>)

  size = MEM_ALIGN_NEXT(size);
 80027e4:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 80027e6:	2800      	cmp	r0, #0
 80027e8:	bf18      	it	ne
 80027ea:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);
 80027ec:	f106 0710 	add.w	r7, r6, #16
 80027f0:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 80027f2:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 80027f6:	f106 0408 	add.w	r4, r6, #8
  H_LOCK(heapp);
 80027fa:	f7ff fd39 	bl	8002270 <chMtxLock>
 80027fe:	e000      	b.n	8002802 <chHeapAlloc.4244+0x22>

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002800:	461c      	mov	r4, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	b303      	cbz	r3, 8002848 <chHeapAlloc.4244+0x68>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4295      	cmp	r5, r2
 800280a:	d8f9      	bhi.n	8002800 <chHeapAlloc.4244+0x20>
      if (hp->h.size < size + sizeof(union heap_header)) {
 800280c:	f105 0108 	add.w	r1, r5, #8
 8002810:	4291      	cmp	r1, r2
 8002812:	d816      	bhi.n	8002842 <chHeapAlloc.4244+0x62>
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 8002814:	f64f 7ef8 	movw	lr, #65528	; 0xfff8
 8002818:	f6cf 7eff 	movt	lr, #65535	; 0xffff
 800281c:	ebc5 0c0e 	rsb	ip, r5, lr
 8002820:	eb0c 0e02 	add.w	lr, ip, r2
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 8002824:	681a      	ldr	r2, [r3, #0]
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8002826:	1858      	adds	r0, r3, r1
        fp->h.u.next = hp->h.u.next;
 8002828:	505a      	str	r2, [r3, r1]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 800282a:	f8c0 e004 	str.w	lr, [r0, #4]
        qp->h.u.next = fp;
 800282e:	6020      	str	r0, [r4, #0]
        hp->h.size = size;
 8002830:	605d      	str	r5, [r3, #4]
      }
      hp->h.u.heap = heapp;
 8002832:	461c      	mov	r4, r3
 8002834:	f844 6b08 	str.w	r6, [r4], #8

      H_UNLOCK(heapp);
 8002838:	4638      	mov	r0, r7
 800283a:	f7ff fab9 	bl	8001db0 <chMtxUnlock>
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 800283e:	4620      	mov	r0, r4
 8002840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	6021      	str	r1, [r4, #0]
 8002846:	e7f4      	b.n	8002832 <chHeapAlloc.4244+0x52>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
 8002848:	4638      	mov	r0, r7
 800284a:	f7ff fab1 	bl	8001db0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 800284e:	6832      	ldr	r2, [r6, #0]
 8002850:	b14a      	cbz	r2, 8002866 <chHeapAlloc.4244+0x86>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8002852:	f105 0008 	add.w	r0, r5, #8
 8002856:	4790      	blx	r2
    if (hp != NULL) {
 8002858:	b128      	cbz	r0, 8002866 <chHeapAlloc.4244+0x86>
      hp->h.u.heap = heapp;
      hp->h.size = size;
      hp++;
      return (void *)hp;
 800285a:	f100 0408 	add.w	r4, r0, #8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 800285e:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8002860:	6045      	str	r5, [r0, #4]
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 8002862:	4620      	mov	r0, r4
 8002864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hp->h.size = size;
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
 8002866:	2400      	movs	r4, #0
 8002868:	e7e9      	b.n	800283e <chHeapAlloc.4244+0x5e>
 800286a:	bf00      	nop
 800286c:	20001580 	.word	0x20001580

08002870 <heap1_execute.7927>:
static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}

static void heap1_execute(void) {
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8002874:	a901      	add	r1, sp, #4
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff fd3a 	bl	80022f0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800287c:	2110      	movs	r1, #16
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff ffae 	bl	80027e0 <chHeapAlloc.4244>
  test_assert(1, p1 != NULL, "allocation failed");
 8002884:	1c01      	adds	r1, r0, #0
 8002886:	bf18      	it	ne
 8002888:	2101      	movne	r1, #1
 800288a:	4604      	mov	r4, r0
 800288c:	2001      	movs	r0, #1
 800288e:	f7fe ffff 	bl	8001890 <_test_assert>
 8002892:	4605      	mov	r5, r0
 8002894:	b108      	cbz	r0, 800289a <heap1_execute.7927+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8002896:	b002      	add	sp, #8
 8002898:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff fd48 	bl	8002330 <chHeapFree.4233>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 80028a0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80028a4:	4628      	mov	r0, r5
 80028a6:	f7ff ff9b 	bl	80027e0 <chHeapAlloc.4244>
  test_assert(2, p1 == NULL, "allocation not failed");
 80028aa:	f1d0 0101 	rsbs	r1, r0, #1
 80028ae:	bf38      	it	cc
 80028b0:	2100      	movcc	r1, #0
 80028b2:	2002      	movs	r0, #2
 80028b4:	f7fe ffec 	bl	8001890 <_test_assert>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1ec      	bne.n	8002896 <heap1_execute.7927+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 80028bc:	a901      	add	r1, sp, #4
 80028be:	487f      	ldr	r0, [pc, #508]	; (8002abc <heap1_execute.7927+0x24c>)
 80028c0:	f7ff fd16 	bl	80022f0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80028c4:	2110      	movs	r1, #16
 80028c6:	487d      	ldr	r0, [pc, #500]	; (8002abc <heap1_execute.7927+0x24c>)
 80028c8:	f7ff ff8a 	bl	80027e0 <chHeapAlloc.4244>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80028cc:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80028ce:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80028d0:	487a      	ldr	r0, [pc, #488]	; (8002abc <heap1_execute.7927+0x24c>)
 80028d2:	f7ff ff85 	bl	80027e0 <chHeapAlloc.4244>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80028d6:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80028d8:	4604      	mov	r4, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80028da:	4878      	ldr	r0, [pc, #480]	; (8002abc <heap1_execute.7927+0x24c>)
 80028dc:	f7ff ff80 	bl	80027e0 <chHeapAlloc.4244>
 80028e0:	4606      	mov	r6, r0
  chHeapFree(p1);                               /* Does not merge.*/
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7ff fd24 	bl	8002330 <chHeapFree.4233>
  chHeapFree(p2);                               /* Merges backward.*/
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff fd21 	bl	8002330 <chHeapFree.4233>
  chHeapFree(p3);                               /* Merges both sides.*/
 80028ee:	4630      	mov	r0, r6
 80028f0:	f7ff fd1e 	bl	8002330 <chHeapFree.4233>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80028f4:	4669      	mov	r1, sp
 80028f6:	4871      	ldr	r0, [pc, #452]	; (8002abc <heap1_execute.7927+0x24c>)
 80028f8:	f7ff fcfa 	bl	80022f0 <chHeapStatus>
 80028fc:	f1b0 0c01 	subs.w	ip, r0, #1
 8002900:	f1dc 0100 	rsbs	r1, ip, #0
 8002904:	eb51 010c 	adcs.w	r1, r1, ip
 8002908:	2003      	movs	r0, #3
 800290a:	f7fe ffc1 	bl	8001890 <_test_assert>
 800290e:	2800      	cmp	r0, #0
 8002910:	d1c1      	bne.n	8002896 <heap1_execute.7927+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002912:	2110      	movs	r1, #16
 8002914:	4869      	ldr	r0, [pc, #420]	; (8002abc <heap1_execute.7927+0x24c>)
 8002916:	f7ff ff63 	bl	80027e0 <chHeapAlloc.4244>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800291a:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800291c:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800291e:	4867      	ldr	r0, [pc, #412]	; (8002abc <heap1_execute.7927+0x24c>)
 8002920:	f7ff ff5e 	bl	80027e0 <chHeapAlloc.4244>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002924:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002926:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002928:	4864      	ldr	r0, [pc, #400]	; (8002abc <heap1_execute.7927+0x24c>)
 800292a:	f7ff ff59 	bl	80027e0 <chHeapAlloc.4244>
  chHeapFree(p3);                               /* Merges forward.*/
 800292e:	f7ff fcff 	bl	8002330 <chHeapFree.4233>
  chHeapFree(p2);                               /* Merges forward.*/
 8002932:	4628      	mov	r0, r5
 8002934:	f7ff fcfc 	bl	8002330 <chHeapFree.4233>
  chHeapFree(p1);                               /* Merges forward.*/
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff fcf9 	bl	8002330 <chHeapFree.4233>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800293e:	4669      	mov	r1, sp
 8002940:	485e      	ldr	r0, [pc, #376]	; (8002abc <heap1_execute.7927+0x24c>)
 8002942:	f7ff fcd5 	bl	80022f0 <chHeapStatus>
 8002946:	f1b0 0e01 	subs.w	lr, r0, #1
 800294a:	f1de 0000 	rsbs	r0, lr, #0
 800294e:	eb50 010e 	adcs.w	r1, r0, lr
 8002952:	2004      	movs	r0, #4
 8002954:	f7fe ff9c 	bl	8001890 <_test_assert>
 8002958:	2800      	cmp	r0, #0
 800295a:	d19c      	bne.n	8002896 <heap1_execute.7927+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 800295c:	2111      	movs	r1, #17
 800295e:	4857      	ldr	r0, [pc, #348]	; (8002abc <heap1_execute.7927+0x24c>)
 8002960:	f7ff ff3e 	bl	80027e0 <chHeapAlloc.4244>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002964:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8002966:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002968:	4854      	ldr	r0, [pc, #336]	; (8002abc <heap1_execute.7927+0x24c>)
 800296a:	f7ff ff39 	bl	80027e0 <chHeapAlloc.4244>
 800296e:	4605      	mov	r5, r0
  chHeapFree(p1);
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff fcdd 	bl	8002330 <chHeapFree.4233>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8002976:	4669      	mov	r1, sp
 8002978:	4850      	ldr	r0, [pc, #320]	; (8002abc <heap1_execute.7927+0x24c>)
 800297a:	f7ff fcb9 	bl	80022f0 <chHeapStatus>
 800297e:	1e82      	subs	r2, r0, #2
 8002980:	4253      	negs	r3, r2
 8002982:	eb53 0102 	adcs.w	r1, r3, r2
 8002986:	2005      	movs	r0, #5
 8002988:	f7fe ff82 	bl	8001890 <_test_assert>
 800298c:	2800      	cmp	r0, #0
 800298e:	d182      	bne.n	8002896 <heap1_execute.7927+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002990:	2110      	movs	r1, #16
 8002992:	484a      	ldr	r0, [pc, #296]	; (8002abc <heap1_execute.7927+0x24c>)
 8002994:	f7ff ff24 	bl	80027e0 <chHeapAlloc.4244>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8002998:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 800299a:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 800299c:	4847      	ldr	r0, [pc, #284]	; (8002abc <heap1_execute.7927+0x24c>)
 800299e:	f7ff fca7 	bl	80022f0 <chHeapStatus>
 80029a2:	2801      	cmp	r0, #1
 80029a4:	f000 8088 	beq.w	8002ab8 <heap1_execute.7927+0x248>
 80029a8:	4669      	mov	r1, sp
 80029aa:	4844      	ldr	r0, [pc, #272]	; (8002abc <heap1_execute.7927+0x24c>)
 80029ac:	f7ff fca0 	bl	80022f0 <chHeapStatus>
 80029b0:	3802      	subs	r0, #2
 80029b2:	4241      	negs	r1, r0
 80029b4:	4141      	adcs	r1, r0
 80029b6:	2006      	movs	r0, #6
 80029b8:	f7fe ff6a 	bl	8001890 <_test_assert>
 80029bc:	2800      	cmp	r0, #0
 80029be:	f47f af6a 	bne.w	8002896 <heap1_execute.7927+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 80029c2:	4628      	mov	r0, r5
 80029c4:	f7ff fcb4 	bl	8002330 <chHeapFree.4233>
  chHeapFree(p1);
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fcb1 	bl	8002330 <chHeapFree.4233>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80029ce:	4669      	mov	r1, sp
 80029d0:	483a      	ldr	r0, [pc, #232]	; (8002abc <heap1_execute.7927+0x24c>)
 80029d2:	f7ff fc8d 	bl	80022f0 <chHeapStatus>
 80029d6:	1e42      	subs	r2, r0, #1
 80029d8:	4253      	negs	r3, r2
 80029da:	eb53 0102 	adcs.w	r1, r3, r2
 80029de:	2007      	movs	r0, #7
 80029e0:	f7fe ff56 	bl	8001890 <_test_assert>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f47f af56 	bne.w	8002896 <heap1_execute.7927+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80029ea:	2110      	movs	r1, #16
 80029ec:	4833      	ldr	r0, [pc, #204]	; (8002abc <heap1_execute.7927+0x24c>)
 80029ee:	f7ff fef7 	bl	80027e0 <chHeapAlloc.4244>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80029f2:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80029f4:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80029f6:	4831      	ldr	r0, [pc, #196]	; (8002abc <heap1_execute.7927+0x24c>)
 80029f8:	f7ff fef2 	bl	80027e0 <chHeapAlloc.4244>
 80029fc:	4604      	mov	r4, r0
  chHeapFree(p1);
 80029fe:	4628      	mov	r0, r5
 8002a00:	f7ff fc96 	bl	8002330 <chHeapFree.4233>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8002a04:	4669      	mov	r1, sp
 8002a06:	482d      	ldr	r0, [pc, #180]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a08:	f7ff fc72 	bl	80022f0 <chHeapStatus>
 8002a0c:	f1b0 0c02 	subs.w	ip, r0, #2
 8002a10:	f1dc 0000 	rsbs	r0, ip, #0
 8002a14:	eb50 010c 	adcs.w	r1, r0, ip
 8002a18:	2008      	movs	r0, #8
 8002a1a:	f7fe ff39 	bl	8001890 <_test_assert>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	f47f af39 	bne.w	8002896 <heap1_execute.7927+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8002a24:	2120      	movs	r1, #32
 8002a26:	4825      	ldr	r0, [pc, #148]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a28:	f7ff feda 	bl	80027e0 <chHeapAlloc.4244>
  chHeapFree(p1);
 8002a2c:	f7ff fc80 	bl	8002330 <chHeapFree.4233>
  chHeapFree(p2);
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff fc7d 	bl	8002330 <chHeapFree.4233>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002a36:	4669      	mov	r1, sp
 8002a38:	4820      	ldr	r0, [pc, #128]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a3a:	f7ff fc59 	bl	80022f0 <chHeapStatus>
 8002a3e:	f1b0 0e01 	subs.w	lr, r0, #1
 8002a42:	f1de 0100 	rsbs	r1, lr, #0
 8002a46:	eb51 010e 	adcs.w	r1, r1, lr
 8002a4a:	2009      	movs	r0, #9
 8002a4c:	f7fe ff20 	bl	8001890 <_test_assert>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f47f af20 	bne.w	8002896 <heap1_execute.7927+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8002a56:	4669      	mov	r1, sp
 8002a58:	4818      	ldr	r0, [pc, #96]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a5a:	f7ff fc49 	bl	80022f0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8002a5e:	9900      	ldr	r1, [sp, #0]
 8002a60:	4816      	ldr	r0, [pc, #88]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a62:	f7ff febd 	bl	80027e0 <chHeapAlloc.4244>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8002a66:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8002a68:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8002a6a:	4814      	ldr	r0, [pc, #80]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a6c:	f7ff fc40 	bl	80022f0 <chHeapStatus>
 8002a70:	f1d0 0101 	rsbs	r1, r0, #1
 8002a74:	bf38      	it	cc
 8002a76:	2100      	movcc	r1, #0
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f7fe ff09 	bl	8001890 <_test_assert>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	f47f af09 	bne.w	8002896 <heap1_execute.7927+0x26>
  chHeapFree(p1);
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fc53 	bl	8002330 <chHeapFree.4233>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002a8a:	4669      	mov	r1, sp
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <heap1_execute.7927+0x24c>)
 8002a8e:	f7ff fc2f 	bl	80022f0 <chHeapStatus>
 8002a92:	1e42      	subs	r2, r0, #1
 8002a94:	4253      	negs	r3, r2
 8002a96:	eb53 0102 	adcs.w	r1, r3, r2
 8002a9a:	200b      	movs	r0, #11
 8002a9c:	f7fe fef8 	bl	8001890 <_test_assert>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	f47f aef8 	bne.w	8002896 <heap1_execute.7927+0x26>
  test_assert(12, n == sz, "size changed");
 8002aa6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8002aaa:	200c      	movs	r0, #12
 8002aac:	1aca      	subs	r2, r1, r3
 8002aae:	4251      	negs	r1, r2
 8002ab0:	4151      	adcs	r1, r2
 8002ab2:	f7fe feed 	bl	8001890 <_test_assert>
 8002ab6:	e6ee      	b.n	8002896 <heap1_execute.7927+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8002ab8:	4601      	mov	r1, r0
 8002aba:	e77c      	b.n	80029b6 <heap1_execute.7927+0x146>
 8002abc:	20001728 	.word	0x20001728

08002ac0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	460d      	mov	r5, r1
 8002ac6:	4617      	mov	r7, r2
 8002ac8:	461e      	mov	r6, r3
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8002aca:	f7ff fe89 	bl	80027e0 <chHeapAlloc.4244>
  if (wsp == NULL)
 8002ace:	4604      	mov	r4, r0
 8002ad0:	b190      	cbz	r0, 8002af8 <chThdCreateFromHeap+0x38>
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8002ad8:	9c08      	ldr	r4, [sp, #32]
 8002ada:	4629      	mov	r1, r5
 8002adc:	463a      	mov	r2, r7
 8002ade:	4633      	mov	r3, r6
 8002ae0:	9400      	str	r4, [sp, #0]
 8002ae2:	f7ff f80d 	bl	8001b00 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	7741      	strb	r1, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 8002aea:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8002aec:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002aee:	f7ff f92f 	bl	8001d50 <chSchWakeupS>
 8002af2:	2000      	movs	r0, #0
 8002af4:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return tp;
}
 8002af8:	4620      	mov	r0, r4
 8002afa:	b003      	add	sp, #12
 8002afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afe:	bf00      	nop

08002b00 <dyn1_execute.8094>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8002b00:	b570      	push	{r4, r5, r6, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <dyn1_execute.8094+0xd4>)
 8002b04:	b084      	sub	sp, #16
 8002b06:	699a      	ldr	r2, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8002b08:	a903      	add	r1, sp, #12
 8002b0a:	4833      	ldr	r0, [pc, #204]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b0c:	6895      	ldr	r5, [r2, #8]
 8002b0e:	f7ff fbef 	bl	80022f0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8002b12:	4832      	ldr	r0, [pc, #200]	; (8002bdc <dyn1_execute.8094+0xdc>)
 8002b14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b18:	1e6a      	subs	r2, r5, #1
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <dyn1_execute.8094+0xe0>)
 8002b1c:	9000      	str	r0, [sp, #0]
 8002b1e:	482e      	ldr	r0, [pc, #184]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b20:	f7ff ffce 	bl	8002ac0 <chThdCreateFromHeap>
 8002b24:	4c2f      	ldr	r4, [pc, #188]	; (8002be4 <dyn1_execute.8094+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002b26:	4e30      	ldr	r6, [pc, #192]	; (8002be8 <dyn1_execute.8094+0xe8>)
 8002b28:	1eaa      	subs	r2, r5, #2
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <dyn1_execute.8094+0xe0>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8002b2c:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002b2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b32:	9600      	str	r6, [sp, #0]
 8002b34:	4828      	ldr	r0, [pc, #160]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b36:	f7ff ffc3 	bl	8002ac0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8002b3a:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8002b3c:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8002b3e:	4826      	ldr	r0, [pc, #152]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b40:	f7ff fbd6 	bl	80022f0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8002b44:	9902      	ldr	r1, [sp, #8]
 8002b46:	4824      	ldr	r0, [pc, #144]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b48:	f7ff fe4a 	bl	80027e0 <chHeapAlloc.4244>
 8002b4c:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8002b4e:	4827      	ldr	r0, [pc, #156]	; (8002bec <dyn1_execute.8094+0xec>)
 8002b50:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b54:	1eea      	subs	r2, r5, #3
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <dyn1_execute.8094+0xe0>)
 8002b58:	9000      	str	r0, [sp, #0]
 8002b5a:	481f      	ldr	r0, [pc, #124]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b5c:	f7ff ffb0 	bl	8002ac0 <chThdCreateFromHeap>
 8002b60:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8002b62:	4630      	mov	r0, r6
 8002b64:	f7ff fbe4 	bl	8002330 <chHeapFree.4233>

  test_assert(1, (threads[0] != NULL) &&
 8002b68:	6821      	ldr	r1, [r4, #0]
 8002b6a:	b129      	cbz	r1, 8002b78 <dyn1_execute.8094+0x78>
 8002b6c:	6861      	ldr	r1, [r4, #4]
 8002b6e:	b119      	cbz	r1, 8002b78 <dyn1_execute.8094+0x78>
 8002b70:	68a1      	ldr	r1, [r4, #8]
 8002b72:	2900      	cmp	r1, #0
 8002b74:	d025      	beq.n	8002bc2 <dyn1_execute.8094+0xc2>
 8002b76:	2100      	movs	r1, #0
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7fe fe89 	bl	8001890 <_test_assert>
 8002b7e:	b108      	cbz	r0, 8002b84 <dyn1_execute.8094+0x84>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8002b80:	b004      	add	sp, #16
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8002b84:	f7ff fc6c 	bl	8002460 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8002b88:	2002      	movs	r0, #2
 8002b8a:	4919      	ldr	r1, [pc, #100]	; (8002bf0 <dyn1_execute.8094+0xf0>)
 8002b8c:	f7fe fe38 	bl	8001800 <_test_assert_sequence>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d1f5      	bne.n	8002b80 <dyn1_execute.8094+0x80>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8002b94:	a902      	add	r1, sp, #8
 8002b96:	4810      	ldr	r0, [pc, #64]	; (8002bd8 <dyn1_execute.8094+0xd8>)
 8002b98:	f7ff fbaa 	bl	80022f0 <chHeapStatus>
 8002b9c:	1e42      	subs	r2, r0, #1
 8002b9e:	4250      	negs	r0, r2
 8002ba0:	eb50 0102 	adcs.w	r1, r0, r2
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f7fe fe73 	bl	8001890 <_test_assert>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d1e8      	bne.n	8002b80 <dyn1_execute.8094+0x80>
  test_assert(4, n == sz, "heap size changed");
 8002bae:	9b03      	ldr	r3, [sp, #12]
 8002bb0:	9902      	ldr	r1, [sp, #8]
 8002bb2:	2004      	movs	r0, #4
 8002bb4:	1aca      	subs	r2, r1, r3
 8002bb6:	4253      	negs	r3, r2
 8002bb8:	eb53 0102 	adcs.w	r1, r3, r2
 8002bbc:	f7fe fe68 	bl	8001890 <_test_assert>
 8002bc0:	e7de      	b.n	8002b80 <dyn1_execute.8094+0x80>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8002bc2:	68e3      	ldr	r3, [r4, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1d7      	bne.n	8002b78 <dyn1_execute.8094+0x78>
 8002bc8:	6921      	ldr	r1, [r4, #16]
 8002bca:	f1d1 0101 	rsbs	r1, r1, #1
 8002bce:	bf38      	it	cc
 8002bd0:	2100      	movcc	r1, #0
 8002bd2:	e7d1      	b.n	8002b78 <dyn1_execute.8094+0x78>
 8002bd4:	20001ec0 	.word	0x20001ec0
 8002bd8:	20001760 	.word	0x20001760
 8002bdc:	0800a4d0 	.word	0x0800a4d0
 8002be0:	080018e1 	.word	0x080018e1
 8002be4:	20002010 	.word	0x20002010
 8002be8:	0800a4cc 	.word	0x0800a4cc
 8002bec:	0800a4c8 	.word	0x0800a4c8
 8002bf0:	0800a4dc 	.word	0x0800a4dc
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	f3af 8000 	nop.w
 8002bfc:	f3af 8000 	nop.w

08002c00 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8002c00:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8002c02:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8002c04:	1c50      	adds	r0, r2, #1
 8002c06:	2800      	cmp	r0, #0
 8002c08:	6098      	str	r0, [r3, #8]
 8002c0a:	dd00      	ble.n	8002c0e <chSemSignalI+0xe>
 8002c0c:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8002c0e:	681a      	ldr	r2, [r3, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002c10:	6811      	ldr	r1, [r2, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8002c12:	4610      	mov	r0, r2
 8002c14:	6019      	str	r1, [r3, #0]
 8002c16:	604b      	str	r3, [r1, #4]

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6213      	str	r3, [r2, #32]
    chSchReadyI(tp);
 8002c1c:	f7ff b9f8 	b.w	8002010 <chSchReadyI>

08002c20 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8002c22:	6885      	ldr	r5, [r0, #8]
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002c24:	4604      	mov	r4, r0
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002c26:	3501      	adds	r5, #1
 8002c28:	2d00      	cmp	r5, #0
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
 8002c2a:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0)
 8002c2c:	dc29      	bgt.n	8002c82 <chSemResetI+0x62>
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002c2e:	6840      	ldr	r0, [r0, #4]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002c30:	f06f 0701 	mvn.w	r7, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002c34:	6843      	ldr	r3, [r0, #4]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002c36:	1c6e      	adds	r6, r5, #1
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002c3c:	f7ff f9e8 	bl	8002010 <chSchReadyI>
 8002c40:	f005 0101 	and.w	r1, r5, #1
 8002c44:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002c46:	b1ed      	cbz	r5, 8002c84 <chSemResetI+0x64>
 8002c48:	b149      	cbz	r1, 8002c5e <chSemResetI+0x3e>
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002c4a:	6860      	ldr	r0, [r4, #4]
 8002c4c:	3601      	adds	r6, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002c4e:	6842      	ldr	r2, [r0, #4]
 8002c50:	6062      	str	r2, [r4, #4]
 8002c52:	6014      	str	r4, [r2, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002c54:	f7ff f9dc 	bl	8002010 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002c58:	2e01      	cmp	r6, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002c5a:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002c5c:	d013      	beq.n	8002c86 <chSemResetI+0x66>
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002c5e:	6860      	ldr	r0, [r4, #4]
 8002c60:	1c75      	adds	r5, r6, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002c62:	6843      	ldr	r3, [r0, #4]
 8002c64:	3602      	adds	r6, #2
 8002c66:	6063      	str	r3, [r4, #4]
 8002c68:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002c6a:	f7ff f9d1 	bl	8002010 <chSchReadyI>
 8002c6e:	6207      	str	r7, [r0, #32]
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002c70:	6860      	ldr	r0, [r4, #4]

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002c72:	6841      	ldr	r1, [r0, #4]
 8002c74:	6061      	str	r1, [r4, #4]
 8002c76:	600c      	str	r4, [r1, #0]
 8002c78:	f7ff f9ca 	bl	8002010 <chSchReadyI>
 8002c7c:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002c7e:	2d00      	cmp	r5, #0
 8002c80:	d1ed      	bne.n	8002c5e <chSemResetI+0x3e>
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c88:	f3af 8000 	nop.w
 8002c8c:	f3af 8000 	nop.w

08002c90 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002c90:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <chThdExitS+0x3c>)
 8002c94:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002c96:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002c98:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8002c9c:	428d      	cmp	r5, r1
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8002c9e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002ca0:	d007      	beq.n	8002cb2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8002ca2:	680a      	ldr	r2, [r1, #0]
    chSchReadyI(list_remove(&tp->p_waiting));
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	6262      	str	r2, [r4, #36]	; 0x24
 8002ca8:	f7ff f9b2 	bl	8002010 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002cac:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002cae:	42a9      	cmp	r1, r5
 8002cb0:	d1f7      	bne.n	8002ca2 <chThdExitS+0x12>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
 8002cb2:	7f60      	ldrb	r0, [r4, #29]
 8002cb4:	0781      	lsls	r1, r0, #30
 8002cb6:	d104      	bne.n	8002cc2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8002cb8:	6963      	ldr	r3, [r4, #20]
 8002cba:	6922      	ldr	r2, [r4, #16]
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	6921      	ldr	r1, [r4, #16]
 8002cc0:	614b      	str	r3, [r1, #20]
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002cc2:	200f      	movs	r0, #15
  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002cc8:	f7ff b8fa 	b.w	8001ec0 <chSchGoSleepS>
 8002ccc:	20001ec0 	.word	0x20001ec0

08002cd0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <chTMStopMeasurementX+0x44>)
 8002cda:	6859      	ldr	r1, [r3, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002cdc:	b430      	push	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8002cde:	6884      	ldr	r4, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002ce0:	6f13      	ldr	r3, [r2, #112]	; 0x70

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002ce2:	68c5      	ldr	r5, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8002ce4:	1b09      	subs	r1, r1, r4
 8002ce6:	1ac9      	subs	r1, r1, r3
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 8002ce8:	6844      	ldr	r4, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002cea:	e9d0 2304 	ldrd	r2, r3, [r0, #16]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002cee:	3501      	adds	r5, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002cf0:	1852      	adds	r2, r2, r1
 8002cf2:	f143 0300 	adc.w	r3, r3, #0
  if (tmp->last > tmp->worst)
 8002cf6:	42a1      	cmp	r1, r4

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002cf8:	60c5      	str	r5, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8002cfa:	6081      	str	r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002cfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
  if (tmp->last > tmp->worst)
 8002d00:	d805      	bhi.n	8002d0e <chTMStopMeasurementX+0x3e>
    tmp->worst = tmp->last;
  else if (tmp->last < tmp->best)
 8002d02:	6802      	ldr	r2, [r0, #0]
 8002d04:	4291      	cmp	r1, r2
    tmp->best = tmp->last;
 8002d06:	bf38      	it	cc
 8002d08:	6001      	strcc	r1, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8002d0a:	bc30      	pop	{r4, r5}
 8002d0c:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
    tmp->worst = tmp->last;
 8002d0e:	6041      	str	r1, [r0, #4]
 8002d10:	e7fb      	b.n	8002d0a <chTMStopMeasurementX+0x3a>
 8002d12:	bf00      	nop
 8002d14:	20001ec0 	.word	0x20001ec0
 8002d18:	f3af 8000 	nop.w
 8002d1c:	f3af 8000 	nop.w

08002d20 <chTMStartMeasurementX>:
 8002d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d24:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002d28:	6859      	ldr	r1, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002d2a:	6081      	str	r1, [r0, #8]
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8002d30:	e7fe      	b.n	8002d30 <BusFault_Handler>
 8002d32:	bf00      	nop
 8002d34:	f3af 8000 	nop.w
 8002d38:	f3af 8000 	nop.w
 8002d3c:	f3af 8000 	nop.w

08002d40 <mbox1_execute.7599>:
static void mbox1_setup(void) {

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}

static void mbox1_execute(void) {
 8002d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d44:	2520      	movs	r5, #32
 8002d46:	b082      	sub	sp, #8
 8002d48:	f385 8811 	msr	BASEPRI, r5
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8002d4c:	4c67      	ldr	r4, [pc, #412]	; (8002eec <mbox1_execute.7599+0x1ac>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8002d4e:	2001      	movs	r0, #1
 8002d50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002d52:	f1b1 0e05 	subs.w	lr, r1, #5
 8002d56:	f1de 0200 	rsbs	r2, lr, #0
 8002d5a:	eb52 010e 	adcs.w	r1, r2, lr
 8002d5e:	f7fe fd97 	bl	8001890 <_test_assert>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	f040 8257 	bne.w	8003216 <mbox1_execute.7599+0x4d6>
 8002d68:	f380 8811 	msr	BASEPRI, r0
 8002d6c:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8002d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d74:	f104 001c 	add.w	r0, r4, #28
 8002d78:	f002 fe4a 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002d7c:	4605      	mov	r5, r0
 8002d7e:	b970      	cbnz	r0, 8002d9e <mbox1_execute.7599+0x5e>
    *mbp->mb_wrptr++ = msg;
 8002d80:	68a3      	ldr	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002d82:	6860      	ldr	r0, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002d84:	2142      	movs	r1, #66	; 0x42
 8002d86:	f843 1b04 	str.w	r1, [r3], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002d8a:	4283      	cmp	r3, r0
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002d8c:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002d8e:	d301      	bcc.n	8002d94 <mbox1_execute.7599+0x54>
      mbp->mb_wrptr = mbp->mb_buffer;
 8002d90:	6822      	ldr	r2, [r4, #0]
 8002d92:	60a2      	str	r2, [r4, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8002d94:	4856      	ldr	r0, [pc, #344]	; (8002ef0 <mbox1_execute.7599+0x1b0>)
 8002d96:	f7ff ff33 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8002d9a:	f7fe ff09 	bl	8001bb0 <chSchRescheduleS>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f383 8811 	msr	BASEPRI, r3
  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8002da4:	2002      	movs	r0, #2
 8002da6:	1aea      	subs	r2, r5, r3
 8002da8:	4251      	negs	r1, r2
 8002daa:	4151      	adcs	r1, r2
 8002dac:	f7fe fd70 	bl	8001890 <_test_assert>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	f040 8098 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8002db6:	2520      	movs	r5, #32
 8002db8:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8002dbc:	484d      	ldr	r0, [pc, #308]	; (8002ef4 <mbox1_execute.7599+0x1b4>)
 8002dbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dc2:	f002 fe25 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	b970      	cbnz	r0, 8002de8 <mbox1_execute.7599+0xa8>
    *mbp->mb_wrptr++ = msg;
 8002dca:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002dcc:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002dce:	2243      	movs	r2, #67	; 0x43
 8002dd0:	f840 2b04 	str.w	r2, [r0], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002dd4:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002dd6:	60a0      	str	r0, [r4, #8]
 8002dd8:	4944      	ldr	r1, [pc, #272]	; (8002eec <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002dda:	f080 8220 	bcs.w	800321e <mbox1_execute.7599+0x4de>
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8002dde:	4844      	ldr	r0, [pc, #272]	; (8002ef0 <mbox1_execute.7599+0x1b0>)
 8002de0:	f7ff ff0e 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8002de4:	f7fe fee4 	bl	8001bb0 <chSchRescheduleS>
 8002de8:	2300      	movs	r3, #0
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	2002      	movs	r0, #2
 8002df0:	1aea      	subs	r2, r5, r3
 8002df2:	4251      	negs	r1, r2
 8002df4:	4151      	adcs	r1, r2
 8002df6:	f7fe fd4b 	bl	8001890 <_test_assert>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d173      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
 8002dfe:	2520      	movs	r5, #32
 8002e00:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8002e04:	483b      	ldr	r0, [pc, #236]	; (8002ef4 <mbox1_execute.7599+0x1b4>)
 8002e06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e0a:	f002 fe01 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002e0e:	4605      	mov	r5, r0
 8002e10:	b970      	cbnz	r0, 8002e30 <mbox1_execute.7599+0xf0>
    *mbp->mb_wrptr++ = msg;
 8002e12:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002e14:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002e16:	2244      	movs	r2, #68	; 0x44
 8002e18:	f840 2b04 	str.w	r2, [r0], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002e1c:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002e1e:	60a0      	str	r0, [r4, #8]
 8002e20:	4932      	ldr	r1, [pc, #200]	; (8002eec <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002e22:	f080 81ff 	bcs.w	8003224 <mbox1_execute.7599+0x4e4>
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8002e26:	4832      	ldr	r0, [pc, #200]	; (8002ef0 <mbox1_execute.7599+0x1b0>)
 8002e28:	f7ff feea 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8002e2c:	f7fe fec0 	bl	8001bb0 <chSchRescheduleS>
 8002e30:	2300      	movs	r3, #0
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	2002      	movs	r0, #2
 8002e38:	ebb5 0c03 	subs.w	ip, r5, r3
 8002e3c:	f1dc 0200 	rsbs	r2, ip, #0
 8002e40:	eb52 010c 	adcs.w	r1, r2, ip
 8002e44:	f7fe fd24 	bl	8001890 <_test_assert>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d14c      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
 8002e4c:	2520      	movs	r5, #32
 8002e4e:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8002e52:	4828      	ldr	r0, [pc, #160]	; (8002ef4 <mbox1_execute.7599+0x1b4>)
 8002e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e58:	f002 fdda 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b978      	cbnz	r0, 8002e80 <mbox1_execute.7599+0x140>
    *mbp->mb_wrptr++ = msg;
 8002e60:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002e62:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002e64:	2145      	movs	r1, #69	; 0x45
 8002e66:	f840 1b04 	str.w	r1, [r0], #4
 8002e6a:	4a20      	ldr	r2, [pc, #128]	; (8002eec <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8002e6c:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8002e6e:	60a0      	str	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8002e70:	bf24      	itt	cs
 8002e72:	6810      	ldrcs	r0, [r2, #0]
 8002e74:	6090      	strcs	r0, [r2, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8002e76:	481e      	ldr	r0, [pc, #120]	; (8002ef0 <mbox1_execute.7599+0x1b0>)
 8002e78:	f7ff fec2 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8002e7c:	f7fe fe98 	bl	8001bb0 <chSchRescheduleS>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	2002      	movs	r0, #2
 8002e88:	ebb5 0e03 	subs.w	lr, r5, r3
 8002e8c:	f1de 0100 	rsbs	r1, lr, #0
 8002e90:	eb51 010e 	adcs.w	r1, r1, lr
 8002e94:	f7fe fcfc 	bl	8001890 <_test_assert>
 8002e98:	bb28      	cbnz	r0, 8002ee6 <mbox1_execute.7599+0x1a6>
 8002e9a:	2520      	movs	r5, #32
 8002e9c:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8002ea0:	4814      	ldr	r0, [pc, #80]	; (8002ef4 <mbox1_execute.7599+0x1b4>)
 8002ea2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ea6:	f002 fdb3 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8002eaa:	4605      	mov	r5, r0
 8002eac:	b970      	cbnz	r0, 8002ecc <mbox1_execute.7599+0x18c>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 8002eae:	68e0      	ldr	r0, [r4, #12]
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	1f03      	subs	r3, r0, #4
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	60e3      	str	r3, [r4, #12]
 8002eb8:	490c      	ldr	r1, [pc, #48]	; (8002eec <mbox1_execute.7599+0x1ac>)
 8002eba:	f0c0 81b6 	bcc.w	800322a <mbox1_execute.7599+0x4ea>
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 8002ebe:	2241      	movs	r2, #65	; 0x41
    chSemSignalI(&mbp->mb_fullsem);
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <mbox1_execute.7599+0x1b0>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 8002ec2:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8002ec4:	f7ff fe9c 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8002ec8:	f7fe fe72 	bl	8001bb0 <chSchRescheduleS>
 8002ecc:	2100      	movs	r1, #0
 8002ece:	f381 8811 	msr	BASEPRI, r1
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8002ed2:	2003      	movs	r0, #3
 8002ed4:	1a6b      	subs	r3, r5, r1
 8002ed6:	425a      	negs	r2, r3
 8002ed8:	eb52 0103 	adcs.w	r1, r2, r3
 8002edc:	f7fe fcd8 	bl	8001890 <_test_assert>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f000 81ab 	beq.w	800323c <mbox1_execute.7599+0x4fc>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8002ee6:	b002      	add	sp, #8
 8002ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eec:	20000ce0 	.word	0x20000ce0
 8002ef0:	20000cf0 	.word	0x20000cf0
 8002ef4:	20000cfc 	.word	0x20000cfc
 8002ef8:	f380 8811 	msr	BASEPRI, r0
 8002efc:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8002f00:	2041      	movs	r0, #65	; 0x41
 8002f02:	f003 fb15 	bl	8006530 <chMBPostI.constprop.29>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8002f06:	f1d0 0101 	rsbs	r1, r0, #1
 8002f0a:	bf38      	it	cc
 8002f0c:	2100      	movcc	r1, #0
 8002f0e:	2016      	movs	r0, #22
 8002f10:	f7fe fcbe 	bl	8001890 <_test_assert>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d1e6      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'B');
 8002f18:	2042      	movs	r0, #66	; 0x42
 8002f1a:	f003 fb09 	bl	8006530 <chMBPostI.constprop.29>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 8002f1e:	f1d0 0101 	rsbs	r1, r0, #1
 8002f22:	bf38      	it	cc
 8002f24:	2100      	movcc	r1, #0
 8002f26:	2017      	movs	r0, #23
 8002f28:	f7fe fcb2 	bl	8001890 <_test_assert>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d1da      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'C');
 8002f30:	2043      	movs	r0, #67	; 0x43
 8002f32:	f003 fafd 	bl	8006530 <chMBPostI.constprop.29>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8002f36:	f1d0 0101 	rsbs	r1, r0, #1
 8002f3a:	bf38      	it	cc
 8002f3c:	2100      	movcc	r1, #0
 8002f3e:	2018      	movs	r0, #24
 8002f40:	f7fe fca6 	bl	8001890 <_test_assert>
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1ce      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'D');
 8002f48:	2044      	movs	r0, #68	; 0x44
 8002f4a:	f003 faf1 	bl	8006530 <chMBPostI.constprop.29>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 8002f4e:	f1d0 0101 	rsbs	r1, r0, #1
 8002f52:	bf38      	it	cc
 8002f54:	2100      	movcc	r1, #0
 8002f56:	2019      	movs	r0, #25
 8002f58:	f7fe fc9a 	bl	8001890 <_test_assert>
 8002f5c:	4607      	mov	r7, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d1c1      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'E');
 8002f62:	2045      	movs	r0, #69	; 0x45
 8002f64:	f003 fae4 	bl	8006530 <chMBPostI.constprop.29>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 8002f6e:	201a      	movs	r0, #26
 8002f70:	f1d2 0101 	rsbs	r1, r2, #1
 8002f74:	bf38      	it	cc
 8002f76:	2100      	movcc	r1, #0
 8002f78:	f7fe fc8a 	bl	8001890 <_test_assert>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d1b2      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8002f80:	68e9      	ldr	r1, [r5, #12]
 8002f82:	68ab      	ldr	r3, [r5, #8]
 8002f84:	201b      	movs	r0, #27
 8002f86:	1aca      	subs	r2, r1, r3
 8002f88:	4251      	negs	r1, r2
 8002f8a:	4151      	adcs	r1, r2
 8002f8c:	f7fe fc80 	bl	8001890 <_test_assert>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d1a8      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
 8002f94:	2505      	movs	r5, #5
 8002f96:	46b0      	mov	r8, r6
 8002f98:	4607      	mov	r7, r0
 8002f9a:	2620      	movs	r6, #32
 8002f9c:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8002fa0:	a801      	add	r0, sp, #4
 8002fa2:	f003 fb05 	bl	80065b0 <chMBFetchI.constprop.25>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 8002fac:	201c      	movs	r0, #28
 8002fae:	f1d3 0101 	rsbs	r1, r3, #1
 8002fb2:	bf38      	it	cc
 8002fb4:	2100      	movcc	r1, #0
 8002fb6:	f7fe fc6b 	bl	8001890 <_test_assert>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d193      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
 8002fbe:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002fc2:	f7fe fc7d 	bl	80018c0 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8002fc6:	3d01      	subs	r5, #1
 8002fc8:	d1e7      	bne.n	8002f9a <mbox1_execute.7599+0x25a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8002fca:	201d      	movs	r0, #29
 8002fcc:	4999      	ldr	r1, [pc, #612]	; (8003234 <mbox1_execute.7599+0x4f4>)
 8002fce:	f7fe fc17 	bl	8001800 <_test_assert_sequence>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d187      	bne.n	8002ee6 <mbox1_execute.7599+0x1a6>
 8002fd6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8002fda:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8002fdc:	201e      	movs	r0, #30
 8002fde:	1f7a      	subs	r2, r7, #5
 8002fe0:	4251      	negs	r1, r2
 8002fe2:	4151      	adcs	r1, r2
 8002fe4:	4f94      	ldr	r7, [pc, #592]	; (8003238 <mbox1_execute.7599+0x4f8>)
 8002fe6:	f7fe fc53 	bl	8001890 <_test_assert>
 8002fea:	f385 8811 	msr	BASEPRI, r5
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	f47f af79 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8002ff4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	201f      	movs	r0, #31
 8002ffc:	f1d3 0101 	rsbs	r1, r3, #1
 8003000:	bf38      	it	cc
 8003002:	2100      	movcc	r1, #0
 8003004:	f7fe fc44 	bl	8001890 <_test_assert>
 8003008:	f385 8811 	msr	BASEPRI, r5
 800300c:	2800      	cmp	r0, #0
 800300e:	f47f af6a 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4630      	mov	r0, r6
 8003018:	ebb2 0e01 	subs.w	lr, r2, r1
 800301c:	f1de 0300 	rsbs	r3, lr, #0
 8003020:	eb53 010e 	adcs.w	r1, r3, lr
 8003024:	f7fe fc34 	bl	8001890 <_test_assert>
 8003028:	2800      	cmp	r0, #0
 800302a:	f47f af5c 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 800302e:	f386 8811 	msr	BASEPRI, r6

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8003032:	2045      	movs	r0, #69	; 0x45
 8003034:	f003 fa9c 	bl	8006570 <chMBPostAheadI.constprop.27>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8003038:	f1d0 0101 	rsbs	r1, r0, #1
 800303c:	bf38      	it	cc
 800303e:	2100      	movcc	r1, #0
 8003040:	2021      	movs	r0, #33	; 0x21
 8003042:	f7fe fc25 	bl	8001890 <_test_assert>
 8003046:	2800      	cmp	r0, #0
 8003048:	f47f af4d 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'D');
 800304c:	2044      	movs	r0, #68	; 0x44
 800304e:	f003 fa8f 	bl	8006570 <chMBPostAheadI.constprop.27>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8003052:	f1d0 0101 	rsbs	r1, r0, #1
 8003056:	bf38      	it	cc
 8003058:	2100      	movcc	r1, #0
 800305a:	2022      	movs	r0, #34	; 0x22
 800305c:	f7fe fc18 	bl	8001890 <_test_assert>
 8003060:	2800      	cmp	r0, #0
 8003062:	f47f af40 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8003066:	2043      	movs	r0, #67	; 0x43
 8003068:	f003 fa82 	bl	8006570 <chMBPostAheadI.constprop.27>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 800306c:	f1d0 0101 	rsbs	r1, r0, #1
 8003070:	bf38      	it	cc
 8003072:	2100      	movcc	r1, #0
 8003074:	2023      	movs	r0, #35	; 0x23
 8003076:	f7fe fc0b 	bl	8001890 <_test_assert>
 800307a:	2800      	cmp	r0, #0
 800307c:	f47f af33 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8003080:	2042      	movs	r0, #66	; 0x42
 8003082:	f003 fa75 	bl	8006570 <chMBPostAheadI.constprop.27>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8003086:	f1d0 0101 	rsbs	r1, r0, #1
 800308a:	bf38      	it	cc
 800308c:	2100      	movcc	r1, #0
 800308e:	2024      	movs	r0, #36	; 0x24
 8003090:	f7fe fbfe 	bl	8001890 <_test_assert>
 8003094:	2800      	cmp	r0, #0
 8003096:	f47f af26 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'A');
 800309a:	2041      	movs	r0, #65	; 0x41
 800309c:	f003 fa68 	bl	8006570 <chMBPostAheadI.constprop.27>
 80030a0:	2100      	movs	r1, #0
 80030a2:	4602      	mov	r2, r0
 80030a4:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 80030a8:	2025      	movs	r0, #37	; 0x25
 80030aa:	ebb2 0c01 	subs.w	ip, r2, r1
 80030ae:	f1dc 0300 	rsbs	r3, ip, #0
 80030b2:	eb53 010c 	adcs.w	r1, r3, ip
 80030b6:	f7fe fbeb 	bl	8001890 <_test_assert>
 80030ba:	2800      	cmp	r0, #0
 80030bc:	f47f af13 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80030c0:	68e2      	ldr	r2, [r4, #12]
 80030c2:	68a1      	ldr	r1, [r4, #8]
 80030c4:	2026      	movs	r0, #38	; 0x26
 80030c6:	1a53      	subs	r3, r2, r1
 80030c8:	425a      	negs	r2, r3
 80030ca:	eb52 0103 	adcs.w	r1, r2, r3
 80030ce:	f7fe fbdf 	bl	8001890 <_test_assert>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	f47f af07 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 80030d8:	2505      	movs	r5, #5
 80030da:	f04f 0820 	mov.w	r8, #32
 80030de:	4607      	mov	r7, r0
 80030e0:	2620      	movs	r6, #32
 80030e2:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 80030e6:	a801      	add	r0, sp, #4
 80030e8:	f003 fa62 	bl	80065b0 <chMBFetchI.constprop.25>
 80030ec:	4601      	mov	r1, r0
 80030ee:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 80030f2:	2027      	movs	r0, #39	; 0x27
 80030f4:	f1d1 0101 	rsbs	r1, r1, #1
 80030f8:	bf38      	it	cc
 80030fa:	2100      	movcc	r1, #0
 80030fc:	f7fe fbc8 	bl	8001890 <_test_assert>
 8003100:	2800      	cmp	r0, #0
 8003102:	f47f aef0 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
 8003106:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800310a:	f7fe fbd9 	bl	80018c0 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 800310e:	3d01      	subs	r5, #1
 8003110:	d1e6      	bne.n	80030e0 <mbox1_execute.7599+0x3a0>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8003112:	2028      	movs	r0, #40	; 0x28
 8003114:	4947      	ldr	r1, [pc, #284]	; (8003234 <mbox1_execute.7599+0x4f4>)
 8003116:	f7fe fb73 	bl	8001800 <_test_assert_sequence>
 800311a:	2800      	cmp	r0, #0
 800311c:	f47f aee3 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003120:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8003124:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8003126:	2029      	movs	r0, #41	; 0x29
 8003128:	1f63      	subs	r3, r4, #5
 800312a:	425a      	negs	r2, r3
 800312c:	eb52 0103 	adcs.w	r1, r2, r3
 8003130:	4c41      	ldr	r4, [pc, #260]	; (8003238 <mbox1_execute.7599+0x4f8>)
 8003132:	f7fe fbad 	bl	8001890 <_test_assert>
 8003136:	f385 8811 	msr	BASEPRI, r5
 800313a:	2800      	cmp	r0, #0
 800313c:	f47f aed3 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003140:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8003144:	69a1      	ldr	r1, [r4, #24]
 8003146:	202a      	movs	r0, #42	; 0x2a
 8003148:	f1d1 0101 	rsbs	r1, r1, #1
 800314c:	bf38      	it	cc
 800314e:	2100      	movcc	r1, #0
 8003150:	f7fe fb9e 	bl	8001890 <_test_assert>
 8003154:	f385 8811 	msr	BASEPRI, r5
 8003158:	2800      	cmp	r0, #0
 800315a:	f47f aec4 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800315e:	68e2      	ldr	r2, [r4, #12]
 8003160:	68a3      	ldr	r3, [r4, #8]
 8003162:	202b      	movs	r0, #43	; 0x2b
 8003164:	ebb2 0e03 	subs.w	lr, r2, r3
 8003168:	f1de 0100 	rsbs	r1, lr, #0
 800316c:	eb51 010e 	adcs.w	r1, r1, lr
 8003170:	f7fe fb8e 	bl	8001890 <_test_assert>
 8003174:	2800      	cmp	r0, #0
 8003176:	f47f aeb6 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 800317a:	f386 8811 	msr	BASEPRI, r6
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 800317e:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 8003180:	6862      	ldr	r2, [r4, #4]
 8003182:	f104 001c 	add.w	r0, r4, #28
 8003186:	1ad1      	subs	r1, r2, r3
 8003188:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 800318a:	60e3      	str	r3, [r4, #12]
 800318c:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 800318e:	f7ff fd47 	bl	8002c20 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 8003192:	f104 0010 	add.w	r0, r4, #16
 8003196:	4629      	mov	r1, r5
 8003198:	f7ff fd42 	bl	8002c20 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 800319c:	f7fe fd08 	bl	8001bb0 <chSchRescheduleS>
 80031a0:	f385 8811 	msr	BASEPRI, r5
 80031a4:	f386 8811 	msr	BASEPRI, r6
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80031a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031aa:	202c      	movs	r0, #44	; 0x2c
 80031ac:	f1b3 0c05 	subs.w	ip, r3, #5
 80031b0:	f1dc 0200 	rsbs	r2, ip, #0
 80031b4:	eb52 010c 	adcs.w	r1, r2, ip
 80031b8:	f7fe fb6a 	bl	8001890 <_test_assert>
 80031bc:	f385 8811 	msr	BASEPRI, r5
 80031c0:	2800      	cmp	r0, #0
 80031c2:	f47f ae90 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 80031c6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 80031ca:	69a1      	ldr	r1, [r4, #24]
 80031cc:	202d      	movs	r0, #45	; 0x2d
 80031ce:	f1d1 0101 	rsbs	r1, r1, #1
 80031d2:	bf38      	it	cc
 80031d4:	2100      	movcc	r1, #0
 80031d6:	f7fe fb5b 	bl	8001890 <_test_assert>
 80031da:	f385 8811 	msr	BASEPRI, r5
 80031de:	2800      	cmp	r0, #0
 80031e0:	f47f ae81 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 80031e4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	68a3      	ldr	r3, [r4, #8]
 80031ec:	202e      	movs	r0, #46	; 0x2e
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	4251      	negs	r1, r2
 80031f2:	4151      	adcs	r1, r2
 80031f4:	f7fe fb4c 	bl	8001890 <_test_assert>
 80031f8:	f385 8811 	msr	BASEPRI, r5
 80031fc:	2800      	cmp	r0, #0
 80031fe:	f47f ae72 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003202:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	68e3      	ldr	r3, [r4, #12]
 800320a:	202f      	movs	r0, #47	; 0x2f
 800320c:	1ad2      	subs	r2, r2, r3
 800320e:	4251      	negs	r1, r2
 8003210:	4151      	adcs	r1, r2
 8003212:	f7fe fb3d 	bl	8001890 <_test_assert>
 8003216:	2000      	movs	r0, #0
 8003218:	f380 8811 	msr	BASEPRI, r0
 800321c:	e663      	b.n	8002ee6 <mbox1_execute.7599+0x1a6>

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 800321e:	6808      	ldr	r0, [r1, #0]
 8003220:	6088      	str	r0, [r1, #8]
 8003222:	e5dc      	b.n	8002dde <mbox1_execute.7599+0x9e>
 8003224:	6808      	ldr	r0, [r1, #0]
 8003226:	6088      	str	r0, [r1, #8]
 8003228:	e5fd      	b.n	8002e26 <mbox1_execute.7599+0xe6>
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
 800322a:	684b      	ldr	r3, [r1, #4]
 800322c:	3b04      	subs	r3, #4
 800322e:	60cb      	str	r3, [r1, #12]
 8003230:	e645      	b.n	8002ebe <mbox1_execute.7599+0x17e>
 8003232:	bf00      	nop
 8003234:	0800a4d4 	.word	0x0800a4d4
 8003238:	20000ce0 	.word	0x20000ce0
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 800323c:	2101      	movs	r1, #1
 800323e:	2058      	movs	r0, #88	; 0x58
 8003240:	f001 fe9e 	bl	8004f80 <chMBPost.constprop.30>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003244:	f1b0 35ff 	subs.w	r5, r0, #4294967295
 8003248:	4268      	negs	r0, r5
 800324a:	eb50 0105 	adcs.w	r1, r0, r5
 800324e:	2004      	movs	r0, #4
 8003250:	f7fe fb1e 	bl	8001890 <_test_assert>
 8003254:	4605      	mov	r5, r0
 8003256:	2800      	cmp	r0, #0
 8003258:	f47f ae45 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 800325c:	2620      	movs	r6, #32
 800325e:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8003262:	2058      	movs	r0, #88	; 0x58
 8003264:	f003 f964 	bl	8006530 <chMBPostI.constprop.29>
 8003268:	4601      	mov	r1, r0
 800326a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800326e:	2005      	movs	r0, #5
 8003270:	f1b1 3cff 	subs.w	ip, r1, #4294967295
 8003274:	f1dc 0300 	rsbs	r3, ip, #0
 8003278:	eb53 010c 	adcs.w	r1, r3, ip
 800327c:	f7fe fb08 	bl	8001890 <_test_assert>
 8003280:	2800      	cmp	r0, #0
 8003282:	f47f ae30 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003286:	f386 8811 	msr	BASEPRI, r6
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 800328a:	488e      	ldr	r0, [pc, #568]	; (80034c4 <mbox1_execute.7599+0x784>)
 800328c:	2101      	movs	r1, #1
 800328e:	f002 fbbf 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8003292:	4605      	mov	r5, r0
 8003294:	b980      	cbnz	r0, 80032b8 <mbox1_execute.7599+0x578>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 8003296:	68e0      	ldr	r0, [r4, #12]
 8003298:	6822      	ldr	r2, [r4, #0]
 800329a:	1f03      	subs	r3, r0, #4
 800329c:	4293      	cmp	r3, r2
 800329e:	60e3      	str	r3, [r4, #12]
 80032a0:	4989      	ldr	r1, [pc, #548]	; (80034c8 <mbox1_execute.7599+0x788>)
 80032a2:	d202      	bcs.n	80032aa <mbox1_execute.7599+0x56a>
      mbp->mb_rdptr = mbp->mb_top - 1;
 80032a4:	684b      	ldr	r3, [r1, #4]
 80032a6:	3b04      	subs	r3, #4
 80032a8:	60cb      	str	r3, [r1, #12]
    *mbp->mb_rdptr = msg;
 80032aa:	2258      	movs	r2, #88	; 0x58
    chSemSignalI(&mbp->mb_fullsem);
 80032ac:	4887      	ldr	r0, [pc, #540]	; (80034cc <mbox1_execute.7599+0x78c>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 80032ae:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80032b0:	f7ff fca6 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 80032b4:	f7fe fc7c 	bl	8001bb0 <chSchRescheduleS>
 80032b8:	2000      	movs	r0, #0
 80032ba:	f380 8811 	msr	BASEPRI, r0
  msg1 = chMBPostAhead(&mb1, 'X', 1);
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80032be:	2006      	movs	r0, #6
 80032c0:	f1b5 3eff 	subs.w	lr, r5, #4294967295
 80032c4:	f1de 0500 	rsbs	r5, lr, #0
 80032c8:	eb55 010e 	adcs.w	r1, r5, lr
 80032cc:	f7fe fae0 	bl	8001890 <_test_assert>
 80032d0:	4605      	mov	r5, r0
 80032d2:	2800      	cmp	r0, #0
 80032d4:	f47f ae07 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 80032d8:	2620      	movs	r6, #32
 80032da:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 80032de:	2058      	movs	r0, #88	; 0x58
 80032e0:	f003 f946 	bl	8006570 <chMBPostAheadI.constprop.27>
 80032e4:	4601      	mov	r1, r0
 80032e6:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80032ea:	2007      	movs	r0, #7
 80032ec:	f1b1 33ff 	subs.w	r3, r1, #4294967295
 80032f0:	425a      	negs	r2, r3
 80032f2:	eb52 0103 	adcs.w	r1, r2, r3
 80032f6:	f7fe facb 	bl	8001890 <_test_assert>
 80032fa:	4605      	mov	r5, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	f47f adf2 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003302:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8003306:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003308:	2008      	movs	r0, #8
 800330a:	f1d7 0101 	rsbs	r1, r7, #1
 800330e:	bf38      	it	cc
 8003310:	2100      	movcc	r1, #0
 8003312:	f7fe fabd 	bl	8001890 <_test_assert>
 8003316:	4f6c      	ldr	r7, [pc, #432]	; (80034c8 <mbox1_execute.7599+0x788>)
 8003318:	4680      	mov	r8, r0
 800331a:	b110      	cbz	r0, 8003322 <mbox1_execute.7599+0x5e2>
 800331c:	f385 8811 	msr	BASEPRI, r5
 8003320:	e5e1      	b.n	8002ee6 <mbox1_execute.7599+0x1a6>
 8003322:	f380 8811 	msr	BASEPRI, r0
 8003326:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800332a:	69bd      	ldr	r5, [r7, #24]
 800332c:	2009      	movs	r0, #9
 800332e:	1f6b      	subs	r3, r5, #5
 8003330:	4259      	negs	r1, r3
 8003332:	4159      	adcs	r1, r3
 8003334:	f7fe faac 	bl	8001890 <_test_assert>
 8003338:	4605      	mov	r5, r0
 800333a:	b110      	cbz	r0, 8003342 <mbox1_execute.7599+0x602>
 800333c:	f388 8811 	msr	BASEPRI, r8
 8003340:	e5d1      	b.n	8002ee6 <mbox1_execute.7599+0x1a6>
 8003342:	f380 8811 	msr	BASEPRI, r0
 8003346:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	200a      	movs	r0, #10
 8003350:	1ad2      	subs	r2, r2, r3
 8003352:	4251      	negs	r1, r2
 8003354:	4151      	adcs	r1, r2
 8003356:	f7fe fa9b 	bl	8001890 <_test_assert>
 800335a:	2800      	cmp	r0, #0
 800335c:	d1de      	bne.n	800331c <mbox1_execute.7599+0x5dc>
 800335e:	f380 8811 	msr	BASEPRI, r0
 8003362:	2505      	movs	r5, #5
 8003364:	e005      	b.n	8003372 <mbox1_execute.7599+0x632>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8003366:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800336a:	f7fe faa9 	bl	80018c0 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 800336e:	3d01      	subs	r5, #1
 8003370:	d00e      	beq.n	8003390 <mbox1_execute.7599+0x650>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8003372:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003376:	a801      	add	r0, sp, #4
 8003378:	f002 fb6a 	bl	8005a50 <chMBFetch.constprop.26>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 800337c:	f1d0 0101 	rsbs	r1, r0, #1
 8003380:	bf38      	it	cc
 8003382:	2100      	movcc	r1, #0
 8003384:	200b      	movs	r0, #11
 8003386:	f7fe fa83 	bl	8001890 <_test_assert>
 800338a:	2800      	cmp	r0, #0
 800338c:	d0eb      	beq.n	8003366 <mbox1_execute.7599+0x626>
 800338e:	e5aa      	b.n	8002ee6 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8003390:	200c      	movs	r0, #12
 8003392:	494f      	ldr	r1, [pc, #316]	; (80034d0 <mbox1_execute.7599+0x790>)
 8003394:	f7fe fa34 	bl	8001800 <_test_assert_sequence>
 8003398:	2800      	cmp	r0, #0
 800339a:	f47f ada4 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800339e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033a2:	2047      	movs	r0, #71	; 0x47
 80033a4:	f001 fdec 	bl	8004f80 <chMBPost.constprop.30>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 80033a8:	f1d0 0101 	rsbs	r1, r0, #1
 80033ac:	bf38      	it	cc
 80033ae:	2100      	movcc	r1, #0
 80033b0:	200d      	movs	r0, #13
 80033b2:	f7fe fa6d 	bl	8001890 <_test_assert>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	f47f ad95 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80033bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033c0:	a801      	add	r0, sp, #4
 80033c2:	f002 fb45 	bl	8005a50 <chMBFetch.constprop.26>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 80033c6:	f1d0 0101 	rsbs	r1, r0, #1
 80033ca:	bf38      	it	cc
 80033cc:	2100      	movcc	r1, #0
 80033ce:	200e      	movs	r0, #14
 80033d0:	f7fe fa5e 	bl	8001890 <_test_assert>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f47f ad86 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80033da:	6826      	ldr	r6, [r4, #0]
 80033dc:	68a3      	ldr	r3, [r4, #8]
 80033de:	200f      	movs	r0, #15
 80033e0:	ebb6 0c03 	subs.w	ip, r6, r3
 80033e4:	f1dc 0200 	rsbs	r2, ip, #0
 80033e8:	eb52 010c 	adcs.w	r1, r2, ip
 80033ec:	4e36      	ldr	r6, [pc, #216]	; (80034c8 <mbox1_execute.7599+0x788>)
 80033ee:	f7fe fa4f 	bl	8001890 <_test_assert>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	f47f ad77 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80033f8:	6831      	ldr	r1, [r6, #0]
 80033fa:	68f3      	ldr	r3, [r6, #12]
 80033fc:	2010      	movs	r0, #16
 80033fe:	ebb1 0e03 	subs.w	lr, r1, r3
 8003402:	f1de 0200 	rsbs	r2, lr, #0
 8003406:	eb52 010e 	adcs.w	r1, r2, lr
 800340a:	f7fe fa41 	bl	8001890 <_test_assert>
 800340e:	2800      	cmp	r0, #0
 8003410:	f47f ad69 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8003414:	2101      	movs	r1, #1
 8003416:	a801      	add	r0, sp, #4
 8003418:	f002 fb1a 	bl	8005a50 <chMBFetch.constprop.26>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800341c:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 8003420:	4241      	negs	r1, r0
 8003422:	4141      	adcs	r1, r0
 8003424:	2011      	movs	r0, #17
 8003426:	f7fe fa33 	bl	8001890 <_test_assert>
 800342a:	2800      	cmp	r0, #0
 800342c:	f47f ad5b 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003430:	2720      	movs	r7, #32
 8003432:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8003436:	a801      	add	r0, sp, #4
 8003438:	f003 f8ba 	bl	80065b0 <chMBFetchI.constprop.25>
 800343c:	4603      	mov	r3, r0
 800343e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8003442:	2012      	movs	r0, #18
 8003444:	f1b3 32ff 	subs.w	r2, r3, #4294967295
 8003448:	4251      	negs	r1, r2
 800344a:	4151      	adcs	r1, r2
 800344c:	f7fe fa20 	bl	8001890 <_test_assert>
 8003450:	2800      	cmp	r0, #0
 8003452:	f47f ad48 	bne.w	8002ee6 <mbox1_execute.7599+0x1a6>
 8003456:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800345a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800345c:	2013      	movs	r0, #19
 800345e:	1f5a      	subs	r2, r3, #5
 8003460:	4251      	negs	r1, r2
 8003462:	4151      	adcs	r1, r2
 8003464:	f7fe fa14 	bl	8001890 <_test_assert>
 8003468:	2800      	cmp	r0, #0
 800346a:	f47f aed4 	bne.w	8003216 <mbox1_execute.7599+0x4d6>
 800346e:	f04f 0800 	mov.w	r8, #0
 8003472:	f388 8811 	msr	BASEPRI, r8
 8003476:	2620      	movs	r6, #32
 8003478:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800347c:	69a7      	ldr	r7, [r4, #24]
 800347e:	2014      	movs	r0, #20
 8003480:	ebb7 0508 	subs.w	r5, r7, r8
 8003484:	426b      	negs	r3, r5
 8003486:	eb53 0105 	adcs.w	r1, r3, r5
 800348a:	f7fe fa01 	bl	8001890 <_test_assert>
 800348e:	4d0e      	ldr	r5, [pc, #56]	; (80034c8 <mbox1_execute.7599+0x788>)
 8003490:	4607      	mov	r7, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	f47f af52 	bne.w	800333c <mbox1_execute.7599+0x5fc>
 8003498:	f380 8811 	msr	BASEPRI, r0
 800349c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80034a0:	68a9      	ldr	r1, [r5, #8]
 80034a2:	68ea      	ldr	r2, [r5, #12]
 80034a4:	2015      	movs	r0, #21
 80034a6:	ebb2 0c01 	subs.w	ip, r2, r1
 80034aa:	f1dc 0300 	rsbs	r3, ip, #0
 80034ae:	eb53 010c 	adcs.w	r1, r3, ip
 80034b2:	f7fe f9ed 	bl	8001890 <_test_assert>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	f43f ad1e 	beq.w	8002ef8 <mbox1_execute.7599+0x1b8>
 80034bc:	f387 8811 	msr	BASEPRI, r7
 80034c0:	e511      	b.n	8002ee6 <mbox1_execute.7599+0x1a6>
 80034c2:	bf00      	nop
 80034c4:	20000cfc 	.word	0x20000cfc
 80034c8:	20000ce0 	.word	0x20000ce0
 80034cc:	20000cf0 	.word	0x20000cf0
 80034d0:	0800a4d4 	.word	0x0800a4d4
 80034d4:	f3af 8000 	nop.w
 80034d8:	f3af 8000 	nop.w
 80034dc:	f3af 8000 	nop.w

080034e0 <silabs_send_packet.4130>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 80034e0:	2901      	cmp	r1, #1
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
 80034e2:	b538      	push	{r3, r4, r5, lr}
 80034e4:	4605      	mov	r5, r0
	if (argc != 1) {
 80034e6:	d126      	bne.n	8003536 <silabs_send_packet.4130+0x56>
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
		return;
	}
	if (strlen(argv[0]) != 1) {
 80034e8:	6814      	ldr	r4, [r2, #0]
 80034ea:	4620      	mov	r0, r4
 80034ec:	f006 fe90 	bl	800a210 <strlen>
 80034f0:	2801      	cmp	r0, #1
 80034f2:	d005      	beq.n	8003500 <silabs_send_packet.4130+0x20>
		chprintf(chp, "<packet> must be exactly 1 character\r\n");
 80034f4:	4914      	ldr	r1, [pc, #80]	; (8003548 <silabs_send_packet.4130+0x68>)
 80034f6:	4628      	mov	r0, r5
	}
	strncpy(Command_string,argv[0],1);
	Command=7;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 80034f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
		return;
	}
	if (strlen(argv[0]) != 1) {
		chprintf(chp, "<packet> must be exactly 1 character\r\n");
 80034fc:	f004 bfd0 	b.w	80084a0 <chprintf.11622>
		return;
	}
	strncpy(Command_string,argv[0],1);
 8003500:	4602      	mov	r2, r0
 8003502:	4621      	mov	r1, r4
 8003504:	4811      	ldr	r0, [pc, #68]	; (800354c <silabs_send_packet.4130+0x6c>)
 8003506:	f006 feb3 	bl	800a270 <strncpy>
	Command=7;	
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <silabs_send_packet.4130+0x70>)
 800350c:	2207      	movs	r2, #7
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	2020      	movs	r0, #32
 8003512:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8003516:	480f      	ldr	r0, [pc, #60]	; (8003554 <silabs_send_packet.4130+0x74>)
 8003518:	6881      	ldr	r1, [r0, #8]
 800351a:	2900      	cmp	r1, #0
 800351c:	dd11      	ble.n	8003542 <silabs_send_packet.4130+0x62>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800351e:	f7fe fb47 	bl	8001bb0 <chSchRescheduleS>
 8003522:	2200      	movs	r2, #0
 8003524:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8003528:	480b      	ldr	r0, [pc, #44]	; (8003558 <silabs_send_packet.4130+0x78>)
 800352a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800352e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003532:	f002 bab5 	b.w	8005aa0 <chSemWaitTimeout>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
 8003536:	4909      	ldr	r1, [pc, #36]	; (800355c <silabs_send_packet.4130+0x7c>)
 8003538:	4a09      	ldr	r2, [pc, #36]	; (8003560 <silabs_send_packet.4130+0x80>)
	}
	strncpy(Command_string,argv[0],1);
	Command=7;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800353a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
 800353e:	f004 bfaf 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8003542:	f7ff fb5d 	bl	8002c00 <chSemSignalI>
 8003546:	e7ea      	b.n	800351e <silabs_send_packet.4130+0x3e>
 8003548:	0800a624 	.word	0x0800a624
 800354c:	20000fc0 	.word	0x20000fc0
 8003550:	20000f78 	.word	0x20000f78
 8003554:	20000fa0 	.word	0x20000fa0
 8003558:	20000fb4 	.word	0x20000fb4
 800355c:	0800a5b0 	.word	0x0800a5b0
 8003560:	0800a61c 	.word	0x0800a61c
 8003564:	f3af 8000 	nop.w
 8003568:	f3af 8000 	nop.w
 800356c:	f3af 8000 	nop.w

08003570 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];
 8003572:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003576:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8003578:	4606      	mov	r6, r0
 800357a:	460d      	mov	r5, r1
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];

  if (sdup == NULL)
 800357c:	b1b4      	cbz	r4, 80035ac <sduDataTransmitted+0x3c>
 800357e:	2720      	movs	r7, #32
 8003580:	f387 8811 	msr	BASEPRI, r7
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003584:	2108      	movs	r1, #8
 8003586:	1d20      	adds	r0, r4, #4
 8003588:	f7fe fd9a 	bl	80020c0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 800358c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800358e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003590:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003592:	1a8b      	subs	r3, r1, r2
    return;

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
 8003594:	1a1b      	subs	r3, r3, r0
 8003596:	d119      	bne.n	80035cc <sduDataTransmitted+0x5c>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8003598:	1ca9      	adds	r1, r5, #2
 800359a:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800359e:	6842      	ldr	r2, [r0, #4]
 80035a0:	6953      	ldr	r3, [r2, #20]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	b919      	cbnz	r1, 80035ae <sduDataTransmitted+0x3e>
 80035a6:	2300      	movs	r3, #0
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           !(usbp->epc[ep]->in_state->txsize &
             (usbp->epc[ep]->in_maxsize - 1))) {
 80035ae:	8a12      	ldrh	r2, [r2, #16]
 80035b0:	1e53      	subs	r3, r2, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 80035b2:	400b      	ands	r3, r1
 80035b4:	d1f7      	bne.n	80035a6 <sduDataTransmitted+0x36>
 80035b6:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80035ba:	6840      	ldr	r0, [r0, #4]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 80035bc:	3430      	adds	r4, #48	; 0x30
 80035be:	6942      	ldr	r2, [r0, #20]

  isp->txqueued           = TRUE;
 80035c0:	2101      	movs	r1, #1
 80035c2:	7011      	strb	r1, [r2, #0]
  isp->mode.queue.txqueue = oqp;
 80035c4:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 80035c6:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80035c8:	6093      	str	r3, [r2, #8]
 80035ca:	e00c      	b.n	80035e6 <sduDataTransmitted+0x76>
 80035cc:	2200      	movs	r2, #0
 80035ce:	f382 8811 	msr	BASEPRI, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80035d2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80035d6:	68c1      	ldr	r1, [r0, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 80035d8:	3430      	adds	r4, #48	; 0x30
 80035da:	6949      	ldr	r1, [r1, #20]

  isp->txqueued           = TRUE;
 80035dc:	2001      	movs	r0, #1
 80035de:	7008      	strb	r0, [r1, #0]
  isp->mode.queue.txqueue = oqp;
 80035e0:	60cc      	str	r4, [r1, #12]
  isp->txsize             = n;
 80035e2:	604b      	str	r3, [r1, #4]
  isp->txcnt              = 0;
 80035e4:	608a      	str	r2, [r1, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80035e6:	4630      	mov	r0, r6
 80035e8:	4629      	mov	r1, r5
 80035ea:	f004 f959 	bl	80078a0 <usb_lld_prepare_transmit>
 80035ee:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
 80035f2:	4630      	mov	r0, r6
 80035f4:	4629      	mov	r1, r5
 80035f6:	f003 f8a3 	bl	8006740 <usbStartTransmitI>
 80035fa:	e7d4      	b.n	80035a6 <sduDataTransmitted+0x36>
 80035fc:	f3af 8000 	nop.w

08003600 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8003602:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8003606:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800360a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800360c:	4604      	mov	r4, r0
 800360e:	f102 5500 	add.w	r5, r2, #536870912	; 0x20000000
 8003612:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 8003616:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800361a:	004f      	lsls	r7, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 800361c:	68bb      	ldr	r3, [r7, #8]
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 800361e:	6842      	ldr	r2, [r0, #4]
 8003620:	f103 5500 	add.w	r5, r3, #536870912	; 0x20000000
 8003624:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 8003628:	0071      	lsls	r1, r6, #1
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 800362a:	680f      	ldr	r7, [r1, #0]
 800362c:	684e      	ldr	r6, [r1, #4]
 800362e:	688d      	ldr	r5, [r1, #8]
 8003630:	6893      	ldr	r3, [r2, #8]
 8003632:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8003634:	2200      	movs	r2, #0
 8003636:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 800363a:	f8a0 7074 	strh.w	r7, [r0, #116]	; 0x74
 800363e:	f8a0 6076 	strh.w	r6, [r0, #118]	; 0x76
 8003642:	f8a0 5078 	strh.w	r5, [r0, #120]	; 0x78
 8003646:	f8a0 107a 	strh.w	r1, [r0, #122]	; 0x7a
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 800364a:	b333      	cbz	r3, 800369a <_usb_ep0setup+0x9a>
      !(usbp->config->requests_hook_cb(usbp))) {
 800364c:	4798      	blx	r3
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 800364e:	b320      	cbz	r0, 800369a <_usb_ep0setup+0x9a>
 8003650:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8003652:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
 8003656:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 800365a:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
 800365e:	ea40 2201 	orr.w	r2, r0, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
 8003662:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8003664:	bf3c      	itt	cc
 8003666:	66e2      	strcc	r2, [r4, #108]	; 0x6c
 8003668:	4615      	movcc	r5, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	f100 80aa 	bmi.w	80037c4 <_usb_ep0setup+0x1c4>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
 8003670:	2d00      	cmp	r5, #0
 8003672:	f040 808e 	bne.w	8003792 <_usb_ep0setup+0x192>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8003676:	2305      	movs	r3, #5
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 8003678:	4629      	mov	r1, r5
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800367a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 800367e:	4620      	mov	r0, r4
 8003680:	462a      	mov	r2, r5
 8003682:	f004 f965 	bl	8007950 <usbPrepareTransmit.constprop.5>
 8003686:	2120      	movs	r1, #32
 8003688:	f381 8811 	msr	BASEPRI, r1
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f003 f856 	bl	8006740 <usbStartTransmitI>
 8003694:	f385 8811 	msr	BASEPRI, r5
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
      !(usbp->config->requests_hook_cb(usbp))) {
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800369a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800369e:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 80036a2:	d01d      	beq.n	80036e0 <_usb_ep0setup+0xe0>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80036a4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80036a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80036ac:	6819      	ldr	r1, [r3, #0]
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80036ae:	6862      	ldr	r2, [r4, #4]
 80036b0:	f421 40f0 	bic.w	r0, r1, #30720	; 0x7800
 80036b4:	f020 0140 	bic.w	r1, r0, #64	; 0x40
 80036b8:	f081 0010 	eor.w	r0, r1, #16
 80036bc:	6018      	str	r0, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	f421 4090 	bic.w	r0, r1, #18432	; 0x4800
 80036c6:	f020 0170 	bic.w	r1, r0, #112	; 0x70
 80036ca:	f481 5080 	eor.w	r0, r1, #4096	; 0x1000
 80036ce:	6018      	str	r0, [r3, #0]
 80036d0:	b112      	cbz	r2, 80036d8 <_usb_ep0setup+0xd8>
 80036d2:	4620      	mov	r0, r4
 80036d4:	2105      	movs	r1, #5
 80036d6:	4790      	blx	r2
      usbp->ep0state = USB_EP0_ERROR;
 80036d8:	2306      	movs	r3, #6
 80036da:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80036de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
 80036e0:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80036e4:	f003 007f 	and.w	r0, r3, #127	; 0x7f
                              USB_RTYPE_TYPE_MASK)) |
 80036e8:	ea40 2205 	orr.w	r2, r0, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80036ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80036f0:	f000 80d8 	beq.w	80038a4 <_usb_ep0setup+0x2a4>
 80036f4:	dd18      	ble.n	8003728 <_usb_ep0setup+0x128>
 80036f6:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80036fa:	f000 80fd 	beq.w	80038f8 <_usb_ep0setup+0x2f8>
 80036fe:	f340 808c 	ble.w	800381a <_usb_ep0setup+0x21a>
 8003702:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8003706:	f000 80e4 	beq.w	80038d2 <_usb_ep0setup+0x2d2>
 800370a:	f640 4102 	movw	r1, #3074	; 0xc02
 800370e:	428a      	cmp	r2, r1
 8003710:	f000 8097 	beq.w	8003842 <_usb_ep0setup+0x242>
 8003714:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003718:	d1c4      	bne.n	80036a4 <_usb_ep0setup+0xa4>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800371a:	2501      	movs	r5, #1
 800371c:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 8003720:	66a2      	str	r2, [r4, #104]	; 0x68
 8003722:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003724:	6726      	str	r6, [r4, #112]	; 0x70
 8003726:	e796      	b.n	8003656 <_usb_ep0setup+0x56>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003728:	2a02      	cmp	r2, #2
 800372a:	f000 80a1 	beq.w	8003870 <_usb_ep0setup+0x270>
 800372e:	f340 8083 	ble.w	8003838 <_usb_ep0setup+0x238>
 8003732:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003736:	f000 808b 	beq.w	8003850 <_usb_ep0setup+0x250>
 800373a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800373e:	d1b1      	bne.n	80036a4 <_usb_ep0setup+0xa4>
        return FALSE;
      }
    }
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 8003740:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8003744:	2800      	cmp	r0, #0
 8003746:	d1ad      	bne.n	80036a4 <_usb_ep0setup+0xa4>
      return FALSE;
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8003748:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800374c:	f015 010f 	ands.w	r1, r5, #15
 8003750:	d01a      	beq.n	8003788 <_usb_ep0setup+0x188>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8003752:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003756:	f2c4 0200 	movt	r2, #16384	; 0x4000
      if (usbp->setup[4] & 0x80)
 800375a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800375e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8003762:	f040 811c 	bne.w	800399e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8003766:	f400 5540 	and.w	r5, r0, #12288	; 0x3000
 800376a:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
 800376e:	d00b      	beq.n	8003788 <_usb_ep0setup+0x188>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8003770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003774:	f423 40f0 	bic.w	r0, r3, #30720	; 0x7800
 8003778:	f020 0540 	bic.w	r5, r0, #64	; 0x40
 800377c:	f485 5300 	eor.w	r3, r5, #8192	; 0x2000
 8003780:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003784:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      if (usbp->setup[4] & 0x80)
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0F);
      else
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0F);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8003788:	2500      	movs	r5, #0
 800378a:	66a5      	str	r5, [r4, #104]	; 0x68
 800378c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800378e:	6725      	str	r5, [r4, #112]	; 0x70
 8003790:	e761      	b.n	8003656 <_usb_ep0setup+0x56>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003792:	68e6      	ldr	r6, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8003794:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003796:	69b3      	ldr	r3, [r6, #24]
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8003798:	2004      	movs	r0, #4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800379a:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800379c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80037a0:	4631      	mov	r1, r6
 80037a2:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 80037a4:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 80037a6:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 80037a8:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 80037aa:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80037ac:	f003 f808 	bl	80067c0 <usb_lld_prepare_receive>
 80037b0:	2120      	movs	r1, #32
 80037b2:	f381 8811 	msr	BASEPRI, r1
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 80037b6:	4620      	mov	r0, r4
 80037b8:	4631      	mov	r1, r6
 80037ba:	f002 ffe1 	bl	8006780 <usbStartReceiveI>
 80037be:	f386 8811 	msr	BASEPRI, r6
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
 80037c4:	b195      	cbz	r5, 80037ec <_usb_ep0setup+0x1ec>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 80037c6:	2201      	movs	r2, #1
 80037c8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 80037cc:	4620      	mov	r0, r4
 80037ce:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80037d0:	462a      	mov	r2, r5
 80037d2:	f004 f8bd 	bl	8007950 <usbPrepareTransmit.constprop.5>
 80037d6:	2320      	movs	r3, #32
 80037d8:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 80037dc:	2100      	movs	r1, #0
 80037de:	4620      	mov	r0, r4
 80037e0:	f002 ffae 	bl	8006740 <usbStartTransmitI>
 80037e4:	2000      	movs	r0, #0
 80037e6:	f380 8811 	msr	BASEPRI, r0
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80037ec:	68e2      	ldr	r2, [r4, #12]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80037ee:	2003      	movs	r0, #3
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80037f0:	6993      	ldr	r3, [r2, #24]
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80037f2:	4629      	mov	r1, r5
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80037f4:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80037f8:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 80037fa:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 80037fc:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 80037fe:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8003800:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003802:	f002 ffdd 	bl	80067c0 <usb_lld_prepare_receive>
 8003806:	2120      	movs	r1, #32
 8003808:	f381 8811 	msr	BASEPRI, r1
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 800380c:	4620      	mov	r0, r4
 800380e:	4629      	mov	r1, r5
 8003810:	f002 ffb6 	bl	8006780 <usbStartReceiveI>
 8003814:	f385 8811 	msr	BASEPRI, r5
 8003818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800381a:	f240 3102 	movw	r1, #770	; 0x302
 800381e:	428a      	cmp	r2, r1
 8003820:	f000 8083 	beq.w	800392a <_usb_ep0setup+0x32a>
 8003824:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8003828:	f47f af3c 	bne.w	80036a4 <_usb_ep0setup+0xa4>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
        (usbp->setup[1] == USB_REQ_SET_ADDRESS))
      set_address(usbp);
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 800382c:	4d6a      	ldr	r5, [pc, #424]	; (80039d8 <_usb_ep0setup+0x3d8>)
 800382e:	66a6      	str	r6, [r4, #104]	; 0x68
 8003830:	6725      	str	r5, [r4, #112]	; 0x70
 8003832:	66e6      	str	r6, [r4, #108]	; 0x6c
 8003834:	4635      	mov	r5, r6
 8003836:	e70e      	b.n	8003656 <_usb_ep0setup+0x56>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003838:	2a00      	cmp	r2, #0
 800383a:	d043      	beq.n	80038c4 <_usb_ep0setup+0x2c4>
 800383c:	2a01      	cmp	r2, #1
 800383e:	f47f af31 	bne.w	80036a4 <_usb_ep0setup+0xa4>
    return TRUE;
  case USB_RTYPE_RECIPIENT_INTERFACE | (USB_REQ_GET_STATUS << 8):
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8003842:	4866      	ldr	r0, [pc, #408]	; (80039dc <_usb_ep0setup+0x3dc>)
 8003844:	2502      	movs	r5, #2
 8003846:	2100      	movs	r1, #0
 8003848:	66a0      	str	r0, [r4, #104]	; 0x68
 800384a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800384c:	6721      	str	r1, [r4, #112]	; 0x70
 800384e:	e702      	b.n	8003656 <_usb_ep0setup+0x56>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8003850:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
 8003854:	2901      	cmp	r1, #1
 8003856:	f47f af25 	bne.w	80036a4 <_usb_ep0setup+0xa4>
      usbp->status &= ~2;
 800385a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800385e:	66a6      	str	r6, [r4, #104]	; 0x68
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 8003860:	f022 0002 	bic.w	r0, r2, #2
 8003864:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003868:	66e6      	str	r6, [r4, #108]	; 0x6c
 800386a:	6726      	str	r6, [r4, #112]	; 0x70
 800386c:	4635      	mov	r5, r6
 800386e:	e6f2      	b.n	8003656 <_usb_ep0setup+0x56>
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
 8003870:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8003874:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 8003878:	f011 0f80 	tst.w	r1, #128	; 0x80
 800387c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8003880:	f001 010f 	and.w	r1, r1, #15
 8003884:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8003888:	d177      	bne.n	800397a <_usb_ep0setup+0x37a>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 800388a:	f410 5140 	ands.w	r1, r0, #12288	; 0x3000
 800388e:	f43f af09 	beq.w	80036a4 <_usb_ep0setup+0xa4>
 8003892:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003896:	d06a      	beq.n	800396e <_usb_ep0setup+0x36e>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8003898:	4d51      	ldr	r5, [pc, #324]	; (80039e0 <_usb_ep0setup+0x3e0>)
 800389a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800389c:	66a5      	str	r5, [r4, #104]	; 0x68
 800389e:	6726      	str	r6, [r4, #112]	; 0x70
 80038a0:	4615      	mov	r5, r2
 80038a2:	e6d8      	b.n	8003656 <_usb_ep0setup+0x56>
    }
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80038a4:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 80038a8:	2801      	cmp	r0, #1
 80038aa:	f47f aefb 	bne.w	80036a4 <_usb_ep0setup+0xa4>
      usbp->status |= 2;
 80038ae:	f8b4 507c 	ldrh.w	r5, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80038b2:	66a6      	str	r6, [r4, #104]	; 0x68
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 80038b4:	f045 0202 	orr.w	r2, r5, #2
 80038b8:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80038bc:	66e6      	str	r6, [r4, #108]	; 0x6c
 80038be:	6726      	str	r6, [r4, #112]	; 0x70
 80038c0:	4635      	mov	r5, r6
 80038c2:	e6c8      	b.n	8003656 <_usb_ep0setup+0x56>
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80038c4:	2502      	movs	r5, #2
 80038c6:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 80038ca:	66a1      	str	r1, [r4, #104]	; 0x68
 80038cc:	66e5      	str	r5, [r4, #108]	; 0x6c
 80038ce:	6722      	str	r2, [r4, #112]	; 0x70
 80038d0:	e6c1      	b.n	8003656 <_usb_ep0setup+0x56>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 80038d2:	f894 5076 	ldrb.w	r5, [r4, #118]	; 0x76
 80038d6:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
    if (usbp->configuration == 0)
 80038da:	2d00      	cmp	r5, #0
 80038dc:	d144      	bne.n	8003968 <_usb_ep0setup+0x368>
      usbp->state = USB_SELECTED;
 80038de:	2003      	movs	r0, #3
 80038e0:	7020      	strb	r0, [r4, #0]
    else
      usbp->state = USB_ACTIVE;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80038e2:	6861      	ldr	r1, [r4, #4]
 80038e4:	680d      	ldr	r5, [r1, #0]
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	f43f af4e 	beq.w	8003788 <_usb_ep0setup+0x188>
 80038ec:	4620      	mov	r0, r4
 80038ee:	2102      	movs	r1, #2
 80038f0:	47a8      	blx	r5
 80038f2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80038f6:	e747      	b.n	8003788 <_usb_ep0setup+0x188>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 80038f8:	6862      	ldr	r2, [r4, #4]
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
 80038fa:	f894 7079 	ldrb.w	r7, [r4, #121]	; 0x79
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 80038fe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8003902:	6855      	ldr	r5, [r2, #4]
 8003904:	4620      	mov	r0, r4
 8003906:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800390a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800390e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8003912:	47a8      	blx	r5
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
    if (dp == NULL)
 8003914:	2800      	cmp	r0, #0
 8003916:	f43f aec5 	beq.w	80036a4 <_usb_ep0setup+0xa4>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800391a:	6841      	ldr	r1, [r0, #4]
 800391c:	6805      	ldr	r5, [r0, #0]
 800391e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003922:	66a1      	str	r1, [r4, #104]	; 0x68
 8003924:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003926:	6726      	str	r6, [r4, #112]	; 0x70
 8003928:	e695      	b.n	8003656 <_usb_ep0setup+0x56>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 800392a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800392e:	2a00      	cmp	r2, #0
 8003930:	f47f aeb8 	bne.w	80036a4 <_usb_ep0setup+0xa4>
      return FALSE;
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8003934:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
 8003938:	f010 010f 	ands.w	r1, r0, #15
 800393c:	f43f af24 	beq.w	8003788 <_usb_ep0setup+0x188>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8003940:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8003944:	f2c4 0300 	movt	r3, #16384	; 0x4000
      if (usbp->setup[4] & 0x80)
 8003948:	f010 0f80 	tst.w	r0, #128	; 0x80
 800394c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8003950:	d137      	bne.n	80039c2 <_usb_ep0setup+0x3c2>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8003952:	f425 4290 	bic.w	r2, r5, #18432	; 0x4800
 8003956:	f022 0070 	bic.w	r0, r2, #112	; 0x70
 800395a:	f480 5580 	eor.w	r5, r0, #4096	; 0x1000
 800395e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8003962:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003966:	e70f      	b.n	8003788 <_usb_ep0setup+0x188>
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0)
      usbp->state = USB_SELECTED;
    else
      usbp->state = USB_ACTIVE;
 8003968:	2204      	movs	r2, #4
 800396a:	7022      	strb	r2, [r4, #0]
 800396c:	e7b9      	b.n	80038e2 <_usb_ep0setup+0x2e2>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800396e:	4d1d      	ldr	r5, [pc, #116]	; (80039e4 <_usb_ep0setup+0x3e4>)
 8003970:	66e2      	str	r2, [r4, #108]	; 0x6c
 8003972:	66a5      	str	r5, [r4, #104]	; 0x68
 8003974:	6726      	str	r6, [r4, #112]	; 0x70
 8003976:	4615      	mov	r5, r2
 8003978:	e66d      	b.n	8003656 <_usb_ep0setup+0x56>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 800397a:	f000 0130 	and.w	r1, r0, #48	; 0x30
 800397e:	2910      	cmp	r1, #16
 8003980:	d806      	bhi.n	8003990 <_usb_ep0setup+0x390>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0F)) {
 8003982:	4819      	ldr	r0, [pc, #100]	; (80039e8 <_usb_ep0setup+0x3e8>)
 8003984:	5c41      	ldrb	r1, [r0, r1]
 8003986:	2901      	cmp	r1, #1
 8003988:	d0f1      	beq.n	800396e <_usb_ep0setup+0x36e>
 800398a:	2902      	cmp	r1, #2
 800398c:	f47f ae8a 	bne.w	80036a4 <_usb_ep0setup+0xa4>
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <_usb_ep0setup+0x3e0>)
 8003992:	2502      	movs	r5, #2
 8003994:	2000      	movs	r0, #0
 8003996:	66a2      	str	r2, [r4, #104]	; 0x68
 8003998:	66e5      	str	r5, [r4, #108]	; 0x6c
 800399a:	6720      	str	r0, [r4, #112]	; 0x70
 800399c:	e65b      	b.n	8003656 <_usb_ep0setup+0x56>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 800399e:	f000 0030 	and.w	r0, r0, #48	; 0x30
 80039a2:	2830      	cmp	r0, #48	; 0x30
 80039a4:	f43f aef0 	beq.w	8003788 <_usb_ep0setup+0x188>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 80039a8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80039ac:	f425 43f0 	bic.w	r3, r5, #30720	; 0x7800
 80039b0:	f023 0040 	bic.w	r0, r3, #64	; 0x40
 80039b4:	f080 0520 	eor.w	r5, r0, #32
 80039b8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80039bc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80039c0:	e6e2      	b.n	8003788 <_usb_ep0setup+0x188>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80039c2:	f425 42f0 	bic.w	r2, r5, #30720	; 0x7800
 80039c6:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 80039ca:	f080 0510 	eor.w	r5, r0, #16
 80039ce:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 80039d2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80039d6:	e6d7      	b.n	8003788 <_usb_ep0setup+0x188>
 80039d8:	08005c81 	.word	0x08005c81
 80039dc:	0800a560 	.word	0x0800a560
 80039e0:	0800a4e0 	.word	0x0800a4e0
 80039e4:	0800a5a0 	.word	0x0800a5a0
 80039e8:	0800a570 	.word	0x0800a570
 80039ec:	f3af 8000 	nop.w

080039f0 <mtx5_execute.7301>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 80039f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80039f4:	4d3b      	ldr	r5, [pc, #236]	; (8003ae4 <mtx5_execute.7301+0xf4>)
 80039f6:	2020      	movs	r0, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80039f8:	69ab      	ldr	r3, [r5, #24]
 80039fa:	689e      	ldr	r6, [r3, #8]
 80039fc:	f380 8811 	msr	BASEPRI, r0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003a00:	4c39      	ldr	r4, [pc, #228]	; (8003ae8 <mtx5_execute.7301+0xf8>)
 8003a02:	68a1      	ldr	r1, [r4, #8]
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d060      	beq.n	8003aca <mtx5_execute.7301+0xda>
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f380 8811 	msr	BASEPRI, r0
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8003a10:	2001      	movs	r0, #1
 8003a12:	f7fd ff3d 	bl	8001890 <_test_assert>
 8003a16:	b108      	cbz	r0, 8003a1c <mtx5_execute.7301+0x2c>
 8003a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a1c:	2720      	movs	r7, #32
 8003a1e:	f387 8811 	msr	BASEPRI, r7
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8003a22:	68a1      	ldr	r1, [r4, #8]
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <mtx5_execute.7301+0xf8>)
 8003a26:	2900      	cmp	r1, #0
 8003a28:	d056      	beq.n	8003ad8 <mtx5_execute.7301+0xe8>
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	2700      	movs	r7, #0
 8003a2e:	f387 8811 	msr	BASEPRI, r7

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8003a32:	2002      	movs	r0, #2
 8003a34:	f7fd ff2c 	bl	8001890 <_test_assert>
 8003a38:	4607      	mov	r7, r0
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d1ec      	bne.n	8003a18 <mtx5_execute.7301+0x28>
 8003a3e:	2120      	movs	r1, #32
 8003a40:	f381 8811 	msr	BASEPRI, r1

  chSysLock();
  chMtxUnlockS(&m1);
 8003a44:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003ae8 <mtx5_execute.7301+0xf8>
 8003a48:	4640      	mov	r0, r8
 8003a4a:	f7fe fb81 	bl	8002150 <chMtxUnlockS>
 8003a4e:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8003a52:	6823      	ldr	r3, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8003a54:	2003      	movs	r0, #3
 8003a56:	ebb3 0e04 	subs.w	lr, r3, r4
 8003a5a:	f1de 0200 	rsbs	r2, lr, #0
 8003a5e:	eb52 010e 	adcs.w	r1, r2, lr
 8003a62:	f7fd ff15 	bl	8001890 <_test_assert>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1d6      	bne.n	8003a18 <mtx5_execute.7301+0x28>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8003a6a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003a6e:	2004      	movs	r0, #4
 8003a70:	f1d1 0101 	rsbs	r1, r1, #1
 8003a74:	bf38      	it	cc
 8003a76:	2100      	movcc	r1, #0
 8003a78:	f7fd ff0a 	bl	8001890 <_test_assert>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1cb      	bne.n	8003a18 <mtx5_execute.7301+0x28>
 8003a80:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8003a82:	2005      	movs	r0, #5
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	1ab3      	subs	r3, r6, r2
 8003a88:	4259      	negs	r1, r3
 8003a8a:	4159      	adcs	r1, r3
 8003a8c:	f7fd ff00 	bl	8001890 <_test_assert>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1c1      	bne.n	8003a18 <mtx5_execute.7301+0x28>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8003a94:	4640      	mov	r0, r8
 8003a96:	f7fe fbeb 	bl	8002270 <chMtxLock>
  chMtxUnlockAll();
 8003a9a:	f7fe fb29 	bl	80020f0 <chMtxUnlockAll>
 8003a9e:	f8d8 2000 	ldr.w	r2, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8003aa2:	2006      	movs	r0, #6
 8003aa4:	ebb2 0308 	subs.w	r3, r2, r8
 8003aa8:	4259      	negs	r1, r3
 8003aaa:	4159      	adcs	r1, r3
 8003aac:	f7fd fef0 	bl	8001890 <_test_assert>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d1b1      	bne.n	8003a18 <mtx5_execute.7301+0x28>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003ab4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003ab8:	2007      	movs	r0, #7
 8003aba:	f1d2 0101 	rsbs	r1, r2, #1
 8003abe:	bf38      	it	cc
 8003ac0:	2100      	movcc	r1, #0
}
 8003ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8003ac6:	f7fd bee3 	b.w	8001890 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003aca:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 8003acc:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 8003ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003ad0:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8003ad2:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8003ad4:	639c      	str	r4, [r3, #56]	; 0x38
 8003ad6:	e798      	b.n	8003a0a <mtx5_execute.7301+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003ad8:	69aa      	ldr	r2, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8003ada:	6b90      	ldr	r0, [r2, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8003adc:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 8003ade:	60d8      	str	r0, [r3, #12]
  currp->p_mtxlist = mp;
 8003ae0:	6393      	str	r3, [r2, #56]	; 0x38
 8003ae2:	e7a3      	b.n	8003a2c <mtx5_execute.7301+0x3c>
 8003ae4:	20001ec0 	.word	0x20001ec0
 8003ae8:	20000800 	.word	0x20000800
 8003aec:	f3af 8000 	nop.w

08003af0 <chIQPutI.4391>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8003af0:	4603      	mov	r3, r0
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003af2:	6942      	ldr	r2, [r0, #20]
 8003af4:	6980      	ldr	r0, [r0, #24]
 8003af6:	b510      	push	{r4, lr}
 8003af8:	4282      	cmp	r2, r0
 8003afa:	6898      	ldr	r0, [r3, #8]
 8003afc:	d01b      	beq.n	8003b36 <chIQPutI.4391+0x46>
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 8003afe:	3001      	adds	r0, #1
 8003b00:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8003b02:	f802 1b01 	strb.w	r1, [r2], #1
  if (iqp->q_wrptr >= iqp->q_top)
 8003b06:	6919      	ldr	r1, [r3, #16]

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
 8003b08:	615a      	str	r2, [r3, #20]
  if (iqp->q_wrptr >= iqp->q_top)
 8003b0a:	428a      	cmp	r2, r1
 8003b0c:	d20c      	bcs.n	8003b28 <chIQPutI.4391+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8003b0e:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <chIQPutI.4391+0x42>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8003b14:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003b16:	2400      	movs	r4, #0
 8003b18:	6019      	str	r1, [r3, #0]
  chSchReadyI(tp);
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003b1e:	6214      	str	r4, [r2, #32]
  chSchReadyI(tp);
 8003b20:	f7fe fa76 	bl	8002010 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003b24:	4620      	mov	r0, r4
 8003b26:	bd10      	pop	{r4, pc}
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top)
    iqp->q_wrptr = iqp->q_buffer;
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d1f0      	bne.n	8003b14 <chIQPutI.4391+0x24>

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003b32:	2000      	movs	r0, #0
 8003b34:	bd10      	pop	{r4, pc}
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d0e1      	beq.n	8003afe <chIQPutI.4391+0xe>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;
 8003b3a:	f06f 0003 	mvn.w	r0, #3
 8003b3e:	bd10      	pop	{r4, pc}

08003b40 <queues1_execute.8272>:
  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
  return 0;
}

static void queues1_execute(void) {
 8003b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b44:	2620      	movs	r6, #32
 8003b46:	b082      	sub	sp, #8
 8003b48:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8003b4c:	4ca6      	ldr	r4, [pc, #664]	; (8003de8 <queues1_execute.8272+0x2a8>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8003b4e:	2001      	movs	r0, #1
 8003b50:	68a1      	ldr	r1, [r4, #8]
 8003b52:	f1d1 0101 	rsbs	r1, r1, #1
 8003b56:	bf38      	it	cc
 8003b58:	2100      	movcc	r1, #0
 8003b5a:	f7fd fe99 	bl	8001890 <_test_assert>
 8003b5e:	4605      	mov	r5, r0
 8003b60:	bb08      	cbnz	r0, 8003ba6 <queues1_execute.8272+0x66>
 8003b62:	f380 8811 	msr	BASEPRI, r0
 8003b66:	f386 8811 	msr	BASEPRI, r6

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8003b6a:	2141      	movs	r1, #65	; 0x41
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7ff ffbf 	bl	8003af0 <chIQPutI.4391>
 8003b72:	2142      	movs	r1, #66	; 0x42
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7ff ffbb 	bl	8003af0 <chIQPutI.4391>
 8003b7a:	2143      	movs	r1, #67	; 0x43
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff ffb7 	bl	8003af0 <chIQPutI.4391>
 8003b82:	4620      	mov	r0, r4
 8003b84:	2144      	movs	r1, #68	; 0x44
 8003b86:	f7ff ffb3 	bl	8003af0 <chIQPutI.4391>
 8003b8a:	f385 8811 	msr	BASEPRI, r5
 8003b8e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003b92:	6962      	ldr	r2, [r4, #20]
 8003b94:	69a3      	ldr	r3, [r4, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d052      	beq.n	8003c40 <queues1_execute.8272+0x100>
 8003b9a:	4629      	mov	r1, r5
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f7fd fe77 	bl	8001890 <_test_assert>
 8003ba2:	4605      	mov	r5, r0
 8003ba4:	b128      	cbz	r0, 8003bb2 <queues1_execute.8272+0x72>
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f382 8811 	msr	BASEPRI, r2
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8003bac:	b002      	add	sp, #8
 8003bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bb2:	f380 8811 	msr	BASEPRI, r0
 8003bb6:	f04f 0820 	mov.w	r8, #32
 8003bba:	f388 8811 	msr	BASEPRI, r8
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8003bbe:	4e8a      	ldr	r6, [pc, #552]	; (8003de8 <queues1_execute.8272+0x2a8>)
 8003bc0:	4601      	mov	r1, r0
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f7ff ff94 	bl	8003af0 <chIQPutI.4391>
 8003bc8:	3004      	adds	r0, #4
 8003bca:	bf14      	ite	ne
 8003bcc:	2100      	movne	r1, #0
 8003bce:	2101      	moveq	r1, #1
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	f7fd fe5d 	bl	8001890 <_test_assert>
 8003bd6:	4607      	mov	r7, r0
 8003bd8:	bb78      	cbnz	r0, 8003c3a <queues1_execute.8272+0xfa>
 8003bda:	f380 8811 	msr	BASEPRI, r0
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8003bde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003be2:	4630      	mov	r0, r6
 8003be4:	f001 fde4 	bl	80057b0 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8003be8:	b2c0      	uxtb	r0, r0
 8003bea:	f7fd fe69 	bl	80018c0 <test_emit_token>
 8003bee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f001 fddc 	bl	80057b0 <chIQGetTimeout>
 8003bf8:	b2c0      	uxtb	r0, r0
 8003bfa:	f7fd fe61 	bl	80018c0 <test_emit_token>
 8003bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c02:	4630      	mov	r0, r6
 8003c04:	f001 fdd4 	bl	80057b0 <chIQGetTimeout>
 8003c08:	b2c0      	uxtb	r0, r0
 8003c0a:	f7fd fe59 	bl	80018c0 <test_emit_token>
 8003c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c12:	4630      	mov	r0, r6
 8003c14:	f001 fdcc 	bl	80057b0 <chIQGetTimeout>
 8003c18:	b2c0      	uxtb	r0, r0
 8003c1a:	f7fd fe51 	bl	80018c0 <test_emit_token>
 8003c1e:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8003c22:	68b1      	ldr	r1, [r6, #8]
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8003c24:	2004      	movs	r0, #4
 8003c26:	f1d1 0101 	rsbs	r1, r1, #1
 8003c2a:	bf38      	it	cc
 8003c2c:	2100      	movcc	r1, #0
 8003c2e:	f7fd fe2f 	bl	8001890 <_test_assert>
 8003c32:	b150      	cbz	r0, 8003c4a <queues1_execute.8272+0x10a>
 8003c34:	f387 8811 	msr	BASEPRI, r7
 8003c38:	e7b8      	b.n	8003bac <queues1_execute.8272+0x6c>
 8003c3a:	f385 8811 	msr	BASEPRI, r5
 8003c3e:	e7b5      	b.n	8003bac <queues1_execute.8272+0x6c>
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003c40:	68a0      	ldr	r0, [r4, #8]
 8003c42:	1c01      	adds	r1, r0, #0
 8003c44:	bf18      	it	ne
 8003c46:	2101      	movne	r1, #1
 8003c48:	e7a8      	b.n	8003b9c <queues1_execute.8272+0x5c>
 8003c4a:	f380 8811 	msr	BASEPRI, r0
  test_assert_sequence(5, "ABCD");
 8003c4e:	2005      	movs	r0, #5
 8003c50:	4966      	ldr	r1, [pc, #408]	; (8003dec <queues1_execute.8272+0x2ac>)
 8003c52:	f7fd fdd5 	bl	8001800 <_test_assert_sequence>
 8003c56:	4605      	mov	r5, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d1a7      	bne.n	8003bac <queues1_execute.8272+0x6c>
 8003c5c:	f388 8811 	msr	BASEPRI, r8

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8003c60:	2141      	movs	r1, #65	; 0x41
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff ff44 	bl	8003af0 <chIQPutI.4391>
 8003c68:	2142      	movs	r1, #66	; 0x42
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f7ff ff40 	bl	8003af0 <chIQPutI.4391>
 8003c70:	2143      	movs	r1, #67	; 0x43
 8003c72:	4630      	mov	r0, r6
 8003c74:	f7ff ff3c 	bl	8003af0 <chIQPutI.4391>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	2144      	movs	r1, #68	; 0x44
 8003c7c:	f7ff ff38 	bl	8003af0 <chIQPutI.4391>
 8003c80:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8003c84:	2208      	movs	r2, #8
 8003c86:	462b      	mov	r3, r5
 8003c88:	4959      	ldr	r1, [pc, #356]	; (8003df0 <queues1_execute.8272+0x2b0>)
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f001 fdd8 	bl	8005840 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8003c90:	1f05      	subs	r5, r0, #4
 8003c92:	426a      	negs	r2, r5
 8003c94:	eb52 0105 	adcs.w	r1, r2, r5
 8003c98:	2006      	movs	r0, #6
 8003c9a:	f7fd fdf9 	bl	8001890 <_test_assert>
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d183      	bne.n	8003bac <queues1_execute.8272+0x6c>
 8003ca4:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8003ca8:	68b7      	ldr	r7, [r6, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8003caa:	2007      	movs	r0, #7
 8003cac:	f1d7 0101 	rsbs	r1, r7, #1
 8003cb0:	bf38      	it	cc
 8003cb2:	2100      	movcc	r1, #0
 8003cb4:	f7fd fdec 	bl	8001890 <_test_assert>
 8003cb8:	4607      	mov	r7, r0
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d1bd      	bne.n	8003c3a <queues1_execute.8272+0xfa>
 8003cbe:	f380 8811 	msr	BASEPRI, r0
 8003cc2:	f388 8811 	msr	BASEPRI, r8

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8003cc6:	2141      	movs	r1, #65	; 0x41
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f7ff ff11 	bl	8003af0 <chIQPutI.4391>
 8003cce:	2142      	movs	r1, #66	; 0x42
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f7ff ff0d 	bl	8003af0 <chIQPutI.4391>
 8003cd6:	2143      	movs	r1, #67	; 0x43
 8003cd8:	4630      	mov	r0, r6
 8003cda:	f7ff ff09 	bl	8003af0 <chIQPutI.4391>
 8003cde:	4630      	mov	r0, r6
 8003ce0:	2144      	movs	r1, #68	; 0x44
 8003ce2:	f7ff ff05 	bl	8003af0 <chIQPutI.4391>
 8003ce6:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003cea:	4941      	ldr	r1, [pc, #260]	; (8003df0 <queues1_execute.8272+0x2b0>)
 8003cec:	2202      	movs	r2, #2
 8003cee:	463b      	mov	r3, r7
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f001 fda5 	bl	8005840 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8003cf6:	1e83      	subs	r3, r0, #2
 8003cf8:	4258      	negs	r0, r3
 8003cfa:	eb50 0103 	adcs.w	r1, r0, r3
 8003cfe:	2008      	movs	r0, #8
 8003d00:	f7fd fdc6 	bl	8001890 <_test_assert>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	f47f af51 	bne.w	8003bac <queues1_execute.8272+0x6c>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4938      	ldr	r1, [pc, #224]	; (8003df0 <queues1_execute.8272+0x2b0>)
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4630      	mov	r0, r6
 8003d12:	f001 fd95 	bl	8005840 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8003d16:	1e82      	subs	r2, r0, #2
 8003d18:	4251      	negs	r1, r2
 8003d1a:	4151      	adcs	r1, r2
 8003d1c:	2009      	movs	r0, #9
 8003d1e:	f7fd fdb7 	bl	8001890 <_test_assert>
 8003d22:	4607      	mov	r7, r0
 8003d24:	2800      	cmp	r0, #0
 8003d26:	f47f af41 	bne.w	8003bac <queues1_execute.8272+0x6c>
 8003d2a:	f388 8811 	msr	BASEPRI, r8
 8003d2e:	68b5      	ldr	r5, [r6, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8003d30:	200a      	movs	r0, #10
 8003d32:	f1d5 0101 	rsbs	r1, r5, #1
 8003d36:	bf38      	it	cc
 8003d38:	2100      	movcc	r1, #0
 8003d3a:	f7fd fda9 	bl	8001890 <_test_assert>
 8003d3e:	4605      	mov	r5, r0
 8003d40:	2800      	cmp	r0, #0
 8003d42:	f47f af77 	bne.w	8003c34 <queues1_execute.8272+0xf4>
 8003d46:	f380 8811 	msr	BASEPRI, r0
 8003d4a:	f388 8811 	msr	BASEPRI, r8

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8003d4e:	4601      	mov	r1, r0
 8003d50:	4630      	mov	r0, r6
 8003d52:	f7ff fecd 	bl	8003af0 <chIQPutI.4391>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8003d56:	68f3      	ldr	r3, [r6, #12]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f06f 0101 	mvn.w	r1, #1
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8003d5e:	6173      	str	r3, [r6, #20]
 8003d60:	61b3      	str	r3, [r6, #24]
  iqp->q_counter = 0;
 8003d62:	60b5      	str	r5, [r6, #8]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8003d64:	f003 fa8c 	bl	8007280 <chThdDequeueAllI>
 8003d68:	f385 8811 	msr	BASEPRI, r5
 8003d6c:	f388 8811 	msr	BASEPRI, r8
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8003d70:	68b2      	ldr	r2, [r6, #8]
 8003d72:	200b      	movs	r0, #11
 8003d74:	f1d2 0101 	rsbs	r1, r2, #1
 8003d78:	bf38      	it	cc
 8003d7a:	2100      	movcc	r1, #0
 8003d7c:	f7fd fd88 	bl	8001890 <_test_assert>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	f47f af10 	bne.w	8003ba6 <queues1_execute.8272+0x66>
 8003d86:	2500      	movs	r5, #0
 8003d88:	f385 8811 	msr	BASEPRI, r5
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003d8c:	4819      	ldr	r0, [pc, #100]	; (8003df4 <queues1_execute.8272+0x2b4>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 8003d8e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003d92:	6982      	ldr	r2, [r0, #24]
 8003d94:	4b18      	ldr	r3, [pc, #96]	; (8003df8 <queues1_execute.8272+0x2b8>)
 8003d96:	6892      	ldr	r2, [r2, #8]
 8003d98:	4818      	ldr	r0, [pc, #96]	; (8003dfc <queues1_execute.8272+0x2bc>)
 8003d9a:	9500      	str	r5, [sp, #0]
 8003d9c:	3201      	adds	r2, #1
 8003d9e:	f7fe f84f 	bl	8001e40 <chThdCreateStatic>
 8003da2:	4917      	ldr	r1, [pc, #92]	; (8003e00 <queues1_execute.8272+0x2c0>)
 8003da4:	2320      	movs	r3, #32
 8003da6:	6008      	str	r0, [r1, #0]
 8003da8:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8003dac:	68a2      	ldr	r2, [r4, #8]
 8003dae:	200c      	movs	r0, #12
 8003db0:	1b53      	subs	r3, r2, r5
 8003db2:	4259      	negs	r1, r3
 8003db4:	4159      	adcs	r1, r3
 8003db6:	f7fd fd6b 	bl	8001890 <_test_assert>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	f47f af3d 	bne.w	8003c3a <queues1_execute.8272+0xfa>
 8003dc0:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8003dc4:	f7fe fb4c 	bl	8002460 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8003dc8:	210a      	movs	r1, #10
 8003dca:	4807      	ldr	r0, [pc, #28]	; (8003de8 <queues1_execute.8272+0x2a8>)
 8003dcc:	f001 fcf0 	bl	80057b0 <chIQGetTimeout>
 8003dd0:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 8003dd4:	f1dc 0000 	rsbs	r0, ip, #0
 8003dd8:	eb50 010c 	adcs.w	r1, r0, ip
 8003ddc:	200d      	movs	r0, #13
}
 8003dde:	b002      	add	sp, #8
 8003de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8003de4:	f7fd bd54 	b.w	8001890 <_test_assert>
 8003de8:	20000cbc 	.word	0x20000cbc
 8003dec:	0800a740 	.word	0x0800a740
 8003df0:	20001998 	.word	0x20001998
 8003df4:	20001ec0 	.word	0x20001ec0
 8003df8:	08005801 	.word	0x08005801
 8003dfc:	20001850 	.word	0x20001850
 8003e00:	20002010 	.word	0x20002010
 8003e04:	f3af 8000 	nop.w
 8003e08:	f3af 8000 	nop.w
 8003e0c:	f3af 8000 	nop.w

08003e10 <bmk9_execute.8477>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8003e12:	4a26      	ldr	r2, [pc, #152]	; (8003eac <bmk9_execute.8477+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8003e14:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003e16:	2400      	movs	r4, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8003e18:	f102 0110 	add.w	r1, r2, #16
 8003e1c:	605b      	str	r3, [r3, #4]
 8003e1e:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003e20:	609c      	str	r4, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	619a      	str	r2, [r3, #24]
 8003e26:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
 8003e28:	6119      	str	r1, [r3, #16]
  iqp->q_notify = infy;
 8003e2a:	61dc      	str	r4, [r3, #28]
  iqp->q_link = link;
 8003e2c:	621c      	str	r4, [r3, #32]
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8003e2e:	f003 fe5f 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8003e32:	f001 fe45 	bl	8005ac0 <test_start_timer.constprop.19>
 8003e36:	4f1f      	ldr	r7, [pc, #124]	; (8003eb4 <bmk9_execute.8477+0xa4>)
 8003e38:	2620      	movs	r6, #32
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8003e3a:	4625      	mov	r5, r4
 8003e3c:	f386 8811 	msr	BASEPRI, r6
 8003e40:	2100      	movs	r1, #0
 8003e42:	481b      	ldr	r0, [pc, #108]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e44:	f7ff fe54 	bl	8003af0 <chIQPutI.4391>
    chIQPutI(&iq, 1);
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4819      	ldr	r0, [pc, #100]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e4c:	f7ff fe50 	bl	8003af0 <chIQPutI.4391>
    chIQPutI(&iq, 2);
 8003e50:	2102      	movs	r1, #2
 8003e52:	4817      	ldr	r0, [pc, #92]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e54:	f7ff fe4c 	bl	8003af0 <chIQPutI.4391>
    chIQPutI(&iq, 3);
 8003e58:	2103      	movs	r1, #3
 8003e5a:	4815      	ldr	r0, [pc, #84]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e5c:	f7ff fe48 	bl	8003af0 <chIQPutI.4391>
 8003e60:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8003e64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e68:	4811      	ldr	r0, [pc, #68]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e6a:	f001 fca1 	bl	80057b0 <chIQGetTimeout>
 8003e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e72:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e74:	f001 fc9c 	bl	80057b0 <chIQGetTimeout>
 8003e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e7c:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e7e:	f001 fc97 	bl	80057b0 <chIQGetTimeout>
 8003e82:	480b      	ldr	r0, [pc, #44]	; (8003eb0 <bmk9_execute.8477+0xa0>)
 8003e84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e88:	f001 fc92 	bl	80057b0 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003e8c:	7838      	ldrb	r0, [r7, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8003e8e:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0d3      	beq.n	8003e3c <bmk9_execute.8477+0x2c>
  test_print("--- Score : ");
 8003e94:	4808      	ldr	r0, [pc, #32]	; (8003eb8 <bmk9_execute.8477+0xa8>)
 8003e96:	f7fd fd63 	bl	8001960 <test_print>
  test_printn(n * 4);
 8003e9a:	00a0      	lsls	r0, r4, #2
 8003e9c:	f7fd fd70 	bl	8001980 <test_printn>
  test_println(" bytes/S");
 8003ea0:	4806      	ldr	r0, [pc, #24]	; (8003ebc <bmk9_execute.8477+0xac>)
}
 8003ea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8003ea6:	f7fd bd43 	b.w	8001930 <test_println>
 8003eaa:	bf00      	nop
 8003eac:	200015a0 	.word	0x200015a0
 8003eb0:	2000155c 	.word	0x2000155c
 8003eb4:	20001522 	.word	0x20001522
 8003eb8:	0800a748 	.word	0x0800a748
 8003ebc:	0800a758 	.word	0x0800a758

08003ec0 <cmd_threads.11062>:
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8003ec2:	2900      	cmp	r1, #0
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	4606      	mov	r6, r0
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8003ec8:	dd05      	ble.n	8003ed6 <cmd_threads.11062+0x16>
    chprintf(chp, "Usage: threads\r\n");
 8003eca:	4916      	ldr	r1, [pc, #88]	; (8003f24 <cmd_threads.11062+0x64>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 8003ecc:	b005      	add	sp, #20
 8003ece:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
 8003ed2:	f004 ba45 	b.w	8008360 <chprintf.11034>
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8003ed6:	4914      	ldr	r1, [pc, #80]	; (8003f28 <cmd_threads.11062+0x68>)
 8003ed8:	f004 fa42 	bl	8008360 <chprintf.11034>
 8003edc:	2320      	movs	r3, #32
 8003ede:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8003ee2:	4812      	ldr	r0, [pc, #72]	; (8003f2c <cmd_threads.11062+0x6c>)
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	6904      	ldr	r4, [r0, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8003ee8:	7fa1      	ldrb	r1, [r4, #30]
 8003eea:	1c4a      	adds	r2, r1, #1
 8003eec:	77a2      	strb	r2, [r4, #30]
 8003eee:	f385 8811 	msr	BASEPRI, r5
 8003ef2:	4f0f      	ldr	r7, [pc, #60]	; (8003f30 <cmd_threads.11062+0x70>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8003ef4:	68a0      	ldr	r0, [r4, #8]
 8003ef6:	68e3      	ldr	r3, [r4, #12]
 8003ef8:	9000      	str	r0, [sp, #0]
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8003efa:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8003efc:	490d      	ldr	r1, [pc, #52]	; (8003f34 <cmd_threads.11062+0x74>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8003efe:	1e55      	subs	r5, r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8003f00:	9501      	str	r5, [sp, #4]
 8003f02:	7f20      	ldrb	r0, [r4, #28]
 8003f04:	4622      	mov	r2, r4
 8003f06:	f857 5020 	ldr.w	r5, [r7, r0, lsl #2]
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	9502      	str	r5, [sp, #8]
 8003f0e:	f004 fa27 	bl	8008360 <chprintf.11034>
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7fe fc2c 	bl	8002770 <chRegNextThread>
  } while (tp != NULL);
 8003f18:	4604      	mov	r4, r0
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d1ea      	bne.n	8003ef4 <cmd_threads.11062+0x34>
}
 8003f1e:	b005      	add	sp, #20
 8003f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	0800a764 	.word	0x0800a764
 8003f28:	0800a778 	.word	0x0800a778
 8003f2c:	20001ec0 	.word	0x20001ec0
 8003f30:	0800a700 	.word	0x0800a700
 8003f34:	0800a7a0 	.word	0x0800a7a0
 8003f38:	f3af 8000 	nop.w
 8003f3c:	f3af 8000 	nop.w

08003f40 <silabs_set_channel>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8003f40:	2900      	cmp	r1, #0
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003f42:	b538      	push	{r3, r4, r5, lr}
 8003f44:	4605      	mov	r5, r0
	if (argc > 0) {
 8003f46:	dc0e      	bgt.n	8003f66 <silabs_set_channel+0x26>
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
		return;
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
 8003f48:	6814      	ldr	r4, [r2, #0]
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f006 f960 	bl	800a210 <strlen>
 8003f50:	2801      	cmp	r0, #1
 8003f52:	d102      	bne.n	8003f5a <silabs_set_channel+0x1a>
 8003f54:	7823      	ldrb	r3, [r4, #0]
 8003f56:	2b38      	cmp	r3, #56	; 0x38
 8003f58:	dd0a      	ble.n	8003f70 <silabs_set_channel+0x30>
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
 8003f5a:	4917      	ldr	r1, [pc, #92]	; (8003fb8 <silabs_set_channel+0x78>)
 8003f5c:	4628      	mov	r0, r5
	Command=5;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}
 8003f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
		return;
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
 8003f62:	f004 ba9d 	b.w	80084a0 <chprintf.11622>
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
 8003f66:	4915      	ldr	r1, [pc, #84]	; (8003fbc <silabs_set_channel+0x7c>)
	Command=5;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}
 8003f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
 8003f6c:	f004 ba98 	b.w	80084a0 <chprintf.11622>
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
		return;
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
 8003f70:	3b30      	subs	r3, #48	; 0x30
 8003f72:	4c13      	ldr	r4, [pc, #76]	; (8003fc0 <silabs_set_channel+0x80>)
	Command=5;
 8003f74:	4913      	ldr	r1, [pc, #76]	; (8003fc4 <silabs_set_channel+0x84>)
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
		return;
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
 8003f76:	b2d8      	uxtb	r0, r3
	Command=5;
 8003f78:	2205      	movs	r2, #5
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
		return;
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
 8003f7a:	7020      	strb	r0, [r4, #0]
 8003f7c:	2320      	movs	r3, #32
	Command=5;
 8003f7e:	700a      	strb	r2, [r1, #0]
 8003f80:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8003f84:	4810      	ldr	r0, [pc, #64]	; (8003fc8 <silabs_set_channel+0x88>)
 8003f86:	6882      	ldr	r2, [r0, #8]
 8003f88:	2a00      	cmp	r2, #0
 8003f8a:	dd12      	ble.n	8003fb2 <silabs_set_channel+0x72>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8003f8c:	f7fd fe10 	bl	8001bb0 <chSchRescheduleS>
 8003f90:	2000      	movs	r0, #0
 8003f92:	f380 8811 	msr	BASEPRI, r0
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8003f96:	480d      	ldr	r0, [pc, #52]	; (8003fcc <silabs_set_channel+0x8c>)
 8003f98:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f9c:	f001 fd80 	bl	8005aa0 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 8003fa0:	b100      	cbz	r0, 8003fa4 <silabs_set_channel+0x64>
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
 8003fa4:	7822      	ldrb	r2, [r4, #0]
 8003fa6:	490a      	ldr	r1, [pc, #40]	; (8003fd0 <silabs_set_channel+0x90>)
 8003fa8:	4628      	mov	r0, r5
	}
}
 8003faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
	Command=5;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
 8003fae:	f004 ba77 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8003fb2:	f7fe fe25 	bl	8002c00 <chSemSignalI>
 8003fb6:	e7e9      	b.n	8003f8c <silabs_set_channel+0x4c>
 8003fb8:	0800a7ec 	.word	0x0800a7ec
 8003fbc:	0800a7bc 	.word	0x0800a7bc
 8003fc0:	20001840 	.word	0x20001840
 8003fc4:	20000f78 	.word	0x20000f78
 8003fc8:	20000fa0 	.word	0x20000fa0
 8003fcc:	20000fb4 	.word	0x20000fb4
 8003fd0:	0800a828 	.word	0x0800a828
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	f3af 8000 	nop.w
 8003fdc:	f3af 8000 	nop.w

08003fe0 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 8003fe0:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 8003fe2:	4978      	ldr	r1, [pc, #480]	; (80041c4 <Reset_Handler+0x1e4>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 8003fe4:	f381 8809 	msr	PSP, r1
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 8003fee:	f3bf 8f6f 	isb	sy
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003ff2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8003ff6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8003ffa:	6822      	ldr	r2, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003ffc:	4620      	mov	r0, r4
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003ffe:	f042 0501 	orr.w	r5, r2, #1
 8004002:	6025      	str	r5, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004004:	6806      	ldr	r6, [r0, #0]
 8004006:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800400a:	07b2      	lsls	r2, r6, #30
 800400c:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8004010:	d5f8      	bpl.n	8004004 <Reset_Handler+0x24>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004012:	683b      	ldr	r3, [r7, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8004014:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004016:	f003 04f9 	and.w	r4, r3, #249	; 0xf9
 800401a:	603c      	str	r4, [r7, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800401c:	4638      	mov	r0, r7
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800401e:	607a      	str	r2, [r7, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004020:	6845      	ldr	r5, [r0, #4]
 8004022:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8004026:	f015 0f0c 	tst.w	r5, #12
 800402a:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800402e:	d1f7      	bne.n	8004020 <Reset_Handler+0x40>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8004030:	6837      	ldr	r7, [r6, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8004032:	4634      	mov	r4, r6
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8004034:	f447 3380 	orr.w	r3, r7, #65536	; 0x10000
 8004038:	6033      	str	r3, [r6, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8004040:	0387      	lsls	r7, r0, #14
 8004042:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8004046:	d5f8      	bpl.n	800403a <Reset_Handler+0x5a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8004048:	686a      	ldr	r2, [r5, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800404a:	462f      	mov	r7, r5
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800404c:	f442 2610 	orr.w	r6, r2, #589824	; 0x90000
 8004050:	606e      	str	r6, [r5, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8004052:	682c      	ldr	r4, [r5, #0]
 8004054:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 8004058:	602b      	str	r3, [r5, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800405a:	6838      	ldr	r0, [r7, #0]
 800405c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8004060:	0186      	lsls	r6, r0, #6
 8004062:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8004066:	d5f8      	bpl.n	800405a <Reset_Handler+0x7a>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8004068:	f44f 47c8 	mov.w	r7, #25600	; 0x6400
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800406c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8004070:	f2c0 0749 	movt	r7, #73	; 0x49
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8004074:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004078:	2611      	movs	r6, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800407a:	606f      	str	r7, [r5, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800407c:	6016      	str	r6, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800407e:	686c      	ldr	r4, [r5, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004080:	462f      	mov	r7, r5
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8004082:	f044 0302 	orr.w	r3, r4, #2
 8004086:	606b      	str	r3, [r5, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 050c 	and.w	r5, r0, #12
 800408e:	2d08      	cmp	r5, #8
 8004090:	d1fa      	bne.n	8004088 <Reset_Handler+0xa8>
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8004092:	4e4d      	ldr	r6, [pc, #308]	; (80041c8 <Reset_Handler+0x1e8>)
 8004094:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <Reset_Handler+0x1ec>)
 8004096:	4296      	cmp	r6, r2
 8004098:	d218      	bcs.n	80040cc <Reset_Handler+0xec>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800409a:	1cd4      	adds	r4, r2, #3
 800409c:	1d37      	adds	r7, r6, #4
 800409e:	1be3      	subs	r3, r4, r7
 80040a0:	f023 0503 	bic.w	r5, r3, #3
 80040a4:	4634      	mov	r4, r6
 80040a6:	19ae      	adds	r6, r5, r6
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 80040a8:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80040ac:	42b4      	cmp	r4, r6
 80040ae:	6020      	str	r0, [r4, #0]
 80040b0:	f3c5 0280 	ubfx	r2, r5, #2, #1
 80040b4:	d00a      	beq.n	80040cc <Reset_Handler+0xec>
 80040b6:	b11a      	cbz	r2, 80040c0 <Reset_Handler+0xe0>
 80040b8:	42b7      	cmp	r7, r6
 80040ba:	463c      	mov	r4, r7
 80040bc:	6038      	str	r0, [r7, #0]
 80040be:	d005      	beq.n	80040cc <Reset_Handler+0xec>
 80040c0:	1d27      	adds	r7, r4, #4
 80040c2:	6060      	str	r0, [r4, #4]
 80040c4:	3408      	adds	r4, #8
 80040c6:	42b4      	cmp	r4, r6
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	d1f9      	bne.n	80040c0 <Reset_Handler+0xe0>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80040cc:	4d40      	ldr	r5, [pc, #256]	; (80041d0 <Reset_Handler+0x1f0>)
 80040ce:	428d      	cmp	r5, r1
 80040d0:	d218      	bcs.n	8004104 <Reset_Handler+0x124>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 80040d2:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <Reset_Handler+0x1f4>)
 80040d4:	1d2e      	adds	r6, r5, #4
 80040d6:	1b98      	subs	r0, r3, r6
 80040d8:	f020 0203 	bic.w	r2, r0, #3
 80040dc:	1951      	adds	r1, r2, r5
#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80040de:	f04f 3455 	mov.w	r4, #1431655765	; 0x55555555
 80040e2:	428d      	cmp	r5, r1
 80040e4:	462b      	mov	r3, r5
 80040e6:	602c      	str	r4, [r5, #0]
 80040e8:	f3c2 0780 	ubfx	r7, r2, #2, #1
 80040ec:	d00a      	beq.n	8004104 <Reset_Handler+0x124>
 80040ee:	b11f      	cbz	r7, 80040f8 <Reset_Handler+0x118>
 80040f0:	428e      	cmp	r6, r1
 80040f2:	4633      	mov	r3, r6
 80040f4:	6034      	str	r4, [r6, #0]
 80040f6:	d005      	beq.n	8004104 <Reset_Handler+0x124>
 80040f8:	1d1d      	adds	r5, r3, #4
 80040fa:	605c      	str	r4, [r3, #4]
 80040fc:	3308      	adds	r3, #8
 80040fe:	428b      	cmp	r3, r1
 8004100:	606c      	str	r4, [r5, #4]
 8004102:	d1f9      	bne.n	80040f8 <Reset_Handler+0x118>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8004104:	4934      	ldr	r1, [pc, #208]	; (80041d8 <Reset_Handler+0x1f8>)
 8004106:	4e35      	ldr	r6, [pc, #212]	; (80041dc <Reset_Handler+0x1fc>)
 8004108:	42b1      	cmp	r1, r6
 800410a:	d21b      	bcs.n	8004144 <Reset_Handler+0x164>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800410c:	1cf2      	adds	r2, r6, #3
 800410e:	1d0c      	adds	r4, r1, #4
 8004110:	1b17      	subs	r7, r2, r4
 8004112:	4833      	ldr	r0, [pc, #204]	; (80041e0 <Reset_Handler+0x200>)
 8004114:	f027 0203 	bic.w	r2, r7, #3
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
      *dp++ = *tp++;
 8004118:	6805      	ldr	r5, [r0, #0]
 800411a:	1d16      	adds	r6, r2, #4
 800411c:	2304      	movs	r3, #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800411e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8004120:	600d      	str	r5, [r1, #0]
 8004122:	f3c2 0780 	ubfx	r7, r2, #2, #1
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8004126:	d00d      	beq.n	8004144 <Reset_Handler+0x164>
 8004128:	b127      	cbz	r7, 8004134 <Reset_Handler+0x154>
      *dp++ = *tp++;
 800412a:	6842      	ldr	r2, [r0, #4]
 800412c:	2308      	movs	r3, #8
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800412e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8004130:	6022      	str	r2, [r4, #0]
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8004132:	d007      	beq.n	8004144 <Reset_Handler+0x164>
      *dp++ = *tp++;
 8004134:	581d      	ldr	r5, [r3, r0]
 8004136:	1d1f      	adds	r7, r3, #4
 8004138:	505d      	str	r5, [r3, r1]
 800413a:	59c4      	ldr	r4, [r0, r7]
 800413c:	3308      	adds	r3, #8
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800413e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8004140:	51cc      	str	r4, [r1, r7]
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8004142:	d1f7      	bne.n	8004134 <Reset_Handler+0x154>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8004144:	4827      	ldr	r0, [pc, #156]	; (80041e4 <Reset_Handler+0x204>)
 8004146:	4928      	ldr	r1, [pc, #160]	; (80041e8 <Reset_Handler+0x208>)
 8004148:	4288      	cmp	r0, r1
 800414a:	d217      	bcs.n	800417c <Reset_Handler+0x19c>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800414c:	1cce      	adds	r6, r1, #3
 800414e:	1d07      	adds	r7, r0, #4
 8004150:	1bf2      	subs	r2, r6, r7
 8004152:	f022 0503 	bic.w	r5, r2, #3
 8004156:	4603      	mov	r3, r0
 8004158:	1828      	adds	r0, r5, r0
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 800415a:	2400      	movs	r4, #0
 800415c:	4283      	cmp	r3, r0
 800415e:	601c      	str	r4, [r3, #0]
 8004160:	f3c5 0180 	ubfx	r1, r5, #2, #1
 8004164:	d00a      	beq.n	800417c <Reset_Handler+0x19c>
 8004166:	b119      	cbz	r1, 8004170 <Reset_Handler+0x190>
 8004168:	4287      	cmp	r7, r0
 800416a:	463b      	mov	r3, r7
 800416c:	603c      	str	r4, [r7, #0]
 800416e:	d005      	beq.n	800417c <Reset_Handler+0x19c>
 8004170:	1d1e      	adds	r6, r3, #4
 8004172:	605c      	str	r4, [r3, #4]
 8004174:	3308      	adds	r3, #8
 8004176:	4283      	cmp	r3, r0
 8004178:	6074      	str	r4, [r6, #4]
 800417a:	d1f9      	bne.n	8004170 <Reset_Handler+0x190>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 800417c:	4d1b      	ldr	r5, [pc, #108]	; (80041ec <Reset_Handler+0x20c>)
 800417e:	4f1c      	ldr	r7, [pc, #112]	; (80041f0 <Reset_Handler+0x210>)
 8004180:	42bd      	cmp	r5, r7
 8004182:	d21c      	bcs.n	80041be <Reset_Handler+0x1de>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 8004184:	1cfa      	adds	r2, r7, #3
 8004186:	1d2e      	adds	r6, r5, #4
 8004188:	1b94      	subs	r4, r2, r6
 800418a:	08a0      	lsrs	r0, r4, #2
 800418c:	1c47      	adds	r7, r0, #1
 800418e:	2401      	movs	r4, #1
#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
      (*fpp)();
 8004190:	6829      	ldr	r1, [r5, #0]
 8004192:	ea00 0804 	and.w	r8, r0, r4
 8004196:	4788      	blx	r1

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8004198:	42bc      	cmp	r4, r7
 800419a:	d010      	beq.n	80041be <Reset_Handler+0x1de>
 800419c:	f1b8 0f00 	cmp.w	r8, #0
 80041a0:	d005      	beq.n	80041ae <Reset_Handler+0x1ce>
      (*fpp)();
 80041a2:	6833      	ldr	r3, [r6, #0]
 80041a4:	2402      	movs	r4, #2
 80041a6:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 80041a8:	42bc      	cmp	r4, r7
 80041aa:	4635      	mov	r5, r6
 80041ac:	d007      	beq.n	80041be <Reset_Handler+0x1de>
      (*fpp)();
 80041ae:	686a      	ldr	r2, [r5, #4]
 80041b0:	4790      	blx	r2
 80041b2:	3402      	adds	r4, #2
 80041b4:	68ae      	ldr	r6, [r5, #8]
 80041b6:	47b0      	blx	r6
 80041b8:	3508      	adds	r5, #8

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 80041ba:	42bc      	cmp	r4, r7
 80041bc:	d1f7      	bne.n	80041ae <Reset_Handler+0x1ce>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 80041be:	f7fb ffbf 	bl	8000140 <main.4457>
 80041c2:	bf00      	nop
 80041c4:	20000800 	.word	0x20000800
 80041c8:	20000000 	.word	0x20000000
 80041cc:	20000400 	.word	0x20000400
 80041d0:	20000400 	.word	0x20000400
 80041d4:	20000803 	.word	0x20000803
 80041d8:	20000800 	.word	0x20000800
 80041dc:	20000d0c 	.word	0x20000d0c
 80041e0:	0800bcc8 	.word	0x0800bcc8
 80041e4:	20000d0c 	.word	0x20000d0c
 80041e8:	20002024 	.word	0x20002024
 80041ec:	08000140 	.word	0x08000140
 80041f0:	08000140 	.word	0x08000140
 80041f4:	f3af 8000 	nop.w
 80041f8:	f3af 8000 	nop.w
 80041fc:	f3af 8000 	nop.w

08004200 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8004200:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8004202:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8004206:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8004208:	2b02      	cmp	r3, #2
 800420a:	d047      	beq.n	800429c <_usb_ep0in+0x9c>
 800420c:	2b05      	cmp	r3, #5
 800420e:	d047      	beq.n	80042a0 <_usb_ep0in+0xa0>
 8004210:	2b01      	cmp	r3, #1
 8004212:	d01c      	beq.n	800424e <_usb_ep0in+0x4e>
 8004214:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004218:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800421c:	6819      	ldr	r1, [r3, #0]
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800421e:	6842      	ldr	r2, [r0, #4]
 8004220:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 8004224:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004228:	f081 0110 	eor.w	r1, r1, #16
 800422c:	6019      	str	r1, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8004236:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800423a:	f481 5180 	eor.w	r1, r1, #4096	; 0x1000
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	b10a      	cbz	r2, 8004246 <_usb_ep0in+0x46>
 8004242:	2105      	movs	r1, #5
 8004244:	4790      	blx	r2
  usbp->ep0state = USB_EP0_ERROR;
 8004246:	2006      	movs	r0, #6
 8004248:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 800424c:	bd38      	pop	{r3, r4, r5, pc}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 800424e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8004252:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8004256:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8004258:	ea43 2105 	orr.w	r1, r3, r5, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 800425c:	4291      	cmp	r1, r2
 800425e:	68c3      	ldr	r3, [r0, #12]
 8004260:	d905      	bls.n	800426e <_usb_ep0in+0x6e>
 8004262:	8a19      	ldrh	r1, [r3, #16]
 8004264:	fbb2 f5f1 	udiv	r5, r2, r1
 8004268:	fb01 2515 	mls	r5, r1, r5, r2
 800426c:	b1fd      	cbz	r5, 80042ae <_usb_ep0in+0xae>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800426e:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = FALSE;
 8004270:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8004272:	2003      	movs	r0, #3
 8004274:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8004278:	4629      	mov	r1, r5
 800427a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800427c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800427e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8004280:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8004282:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8004284:	f002 fa9c 	bl	80067c0 <usb_lld_prepare_receive>
 8004288:	2220      	movs	r2, #32
 800428a:	f382 8811 	msr	BASEPRI, r2
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0);
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f002 fa75 	bl	8006780 <usbStartReceiveI>
 8004296:	f385 8811 	msr	BASEPRI, r5
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	68c3      	ldr	r3, [r0, #12]
 800429e:	e7e6      	b.n	800426e <_usb_ep0in+0x6e>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL)
 80042a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80042a2:	b103      	cbz	r3, 80042a6 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 80042a4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80042a6:	2100      	movs	r1, #0
 80042a8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 80042ac:	bd38      	pop	{r3, r4, r5, pc}
    max = usbFetchWord(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
 80042ae:	4629      	mov	r1, r5
 80042b0:	462a      	mov	r2, r5
 80042b2:	f003 fb4d 	bl	8007950 <usbPrepareTransmit.constprop.5>
 80042b6:	2020      	movs	r0, #32
 80042b8:	f380 8811 	msr	BASEPRI, r0
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 80042bc:	4620      	mov	r0, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	f002 fa3e 	bl	8006740 <usbStartTransmitI>
 80042c4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 80042c8:	2202      	movs	r2, #2
 80042ca:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80042ce:	bd38      	pop	{r3, r4, r5, pc}

080042d0 <thread4.7051>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 80042d0:	b508      	push	{r3, lr}
 80042d2:	2220      	movs	r2, #32
 80042d4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80042d8:	6881      	ldr	r1, [r0, #8]
 80042da:	2900      	cmp	r1, #0
 80042dc:	dd05      	ble.n	80042ea <thread4.7051+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80042de:	f7fd fc67 	bl	8001bb0 <chSchRescheduleS>
 80042e2:	2000      	movs	r0, #0
 80042e4:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 80042e8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80042ea:	f7fe fc89 	bl	8002c00 <chSemSignalI>
 80042ee:	e7f6      	b.n	80042de <thread4.7051+0xe>

080042f0 <thread2.7700>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2520      	movs	r5, #32
 80042f4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80042f8:	f640 4058 	movw	r0, #3160	; 0xc58
 80042fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004300:	2100      	movs	r1, #0
 8004302:	f7fd fedd 	bl	80020c0 <chEvtBroadcastFlagsI>
 8004306:	2400      	movs	r4, #0
  chSchRescheduleS();
 8004308:	f7fd fc52 	bl	8001bb0 <chSchRescheduleS>
 800430c:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8004310:	2064      	movs	r0, #100	; 0x64
 8004312:	f003 fbdd 	bl	8007ad0 <chThdSleep>
 8004316:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 800431a:	f640 407c 	movw	r0, #3196	; 0xc7c
 800431e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004322:	4621      	mov	r1, r4
 8004324:	f7fd fecc 	bl	80020c0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8004328:	f7fd fc42 	bl	8001bb0 <chSchRescheduleS>
 800432c:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 8004330:	4620      	mov	r0, r4
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	f3af 8000 	nop.w
 8004338:	f3af 8000 	nop.w
 800433c:	f3af 8000 	nop.w

08004340 <usb_event.11388>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8004340:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8004342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004344:	460d      	mov	r5, r1
 8004346:	4606      	mov	r6, r0
  extern SerialUSBDriver SDU1;

  switch (event) {
 8004348:	d145      	bne.n	80043d6 <usb_event.11388+0x96>
 800434a:	2320      	movs	r3, #32
 800434c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8004350:	4c21      	ldr	r4, [pc, #132]	; (80043d8 <usb_event.11388+0x98>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8004352:	2101      	movs	r1, #1
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <usb_event.11388+0x9c>)
 8004356:	f002 fabb 	bl	80068d0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800435a:	4630      	mov	r0, r6
 800435c:	4629      	mov	r1, r5
 800435e:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <usb_event.11388+0xa0>)
 8004360:	f002 fab6 	bl	80068d0 <usbInitEndpointI>

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8004364:	f104 070c 	add.w	r7, r4, #12
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8004368:	69a3      	ldr	r3, [r4, #24]
 800436a:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_counter = 0;
 800436e:	2500      	movs	r5, #0
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8004370:	4638      	mov	r0, r7
 8004372:	f06f 0101 	mvn.w	r1, #1
 8004376:	6816      	ldr	r6, [r2, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8004378:	6223      	str	r3, [r4, #32]
 800437a:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_counter = 0;
 800437c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800437e:	f002 ff7f 	bl	8007280 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8004382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  oqp->q_counter = chQSizeI(oqp);
 8004384:	6c21      	ldr	r1, [r4, #64]	; 0x40
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8004386:	f104 0030 	add.w	r0, r4, #48	; 0x30
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 800438a:	1aca      	subs	r2, r1, r3
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800438c:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8004390:	6463      	str	r3, [r4, #68]	; 0x44
 8004392:	64a3      	str	r3, [r4, #72]	; 0x48
  oqp->q_counter = chQSizeI(oqp);
 8004394:	63a2      	str	r2, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8004396:	f002 ff73 	bl	8007280 <chThdDequeueAllI>
 800439a:	1d20      	adds	r0, r4, #4
 800439c:	2101      	movs	r1, #1
 800439e:	f7fd fe8f 	bl	80020c0 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 80043a2:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80043a6:	f04f 0e01 	mov.w	lr, #1
 80043aa:	7941      	ldrb	r1, [r0, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80043ac:	4630      	mov	r0, r6
 80043ae:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 80043b2:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 80043b4:	8a5a      	ldrh	r2, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80043b6:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = TRUE;
 80043b8:	f883 e000 	strb.w	lr, [r3]
  osp->mode.queue.rxqueue = iqp;
 80043bc:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
 80043be:	605a      	str	r2, [r3, #4]
  osp->rxcnt              = 0;
 80043c0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80043c2:	f002 f9fd 	bl	80067c0 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  usbStartReceiveI(usbp, sdup->config->bulk_out);
 80043c6:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80043ca:	4630      	mov	r0, r6
 80043cc:	7949      	ldrb	r1, [r1, #5]
 80043ce:	f002 f9d7 	bl	8006780 <usbStartReceiveI>
 80043d2:	f385 8811 	msr	BASEPRI, r5
 80043d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d8:	20000d0c 	.word	0x20000d0c
 80043dc:	0800a6b0 	.word	0x0800a6b0
 80043e0:	0800a970 	.word	0x0800a970
 80043e4:	f3af 8000 	nop.w
 80043e8:	f3af 8000 	nop.w
 80043ec:	f3af 8000 	nop.w

080043f0 <chOQGetI.constprop.24.4427>:
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <chOQGetI.constprop.24.4427+0x4c>)
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80043f2:	b510      	push	{r4, lr}
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	6898      	ldr	r0, [r3, #8]
 80043fa:	4291      	cmp	r1, r2
 80043fc:	d018      	beq.n	8004430 <chOQGetI.constprop.24.4427+0x40>
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 80043fe:	1c44      	adds	r4, r0, #1
 8004400:	609c      	str	r4, [r3, #8]
  b = *oqp->q_rdptr++;
 8004402:	f812 4b01 	ldrb.w	r4, [r2], #1
  if (oqp->q_rdptr >= oqp->q_top)
 8004406:	6918      	ldr	r0, [r3, #16]

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8004408:	619a      	str	r2, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top)
 800440a:	4282      	cmp	r2, r0
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 800440c:	490b      	ldr	r1, [pc, #44]	; (800443c <chOQGetI.constprop.24.4427+0x4c>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 800440e:	d20c      	bcs.n	800442a <chOQGetI.constprop.24.4427+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <chOQGetI.constprop.24.4427+0x4c>)
 8004414:	4298      	cmp	r0, r3
 8004416:	d006      	beq.n	8004426 <chOQGetI.constprop.24.4427+0x36>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8004418:	6803      	ldr	r3, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800441a:	2100      	movs	r1, #0
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	6201      	str	r1, [r0, #32]
 8004420:	6013      	str	r3, [r2, #0]
  chSchReadyI(tp);
 8004422:	f7fd fdf5 	bl	8002010 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 8004426:	4620      	mov	r0, r4
 8004428:	bd10      	pop	{r4, pc}
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
    oqp->q_rdptr = oqp->q_buffer;
 800442a:	68ca      	ldr	r2, [r1, #12]
 800442c:	618a      	str	r2, [r1, #24]
 800442e:	e7ef      	b.n	8004410 <chOQGetI.constprop.24.4427+0x20>
 8004430:	2800      	cmp	r0, #0
 8004432:	d0e4      	beq.n	80043fe <chOQGetI.constprop.24.4427+0xe>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;
 8004434:	f06f 0002 	mvn.w	r0, #2
 8004438:	bd10      	pop	{r4, pc}
 800443a:	bf00      	nop
 800443c:	20000c98 	.word	0x20000c98

08004440 <queues2_execute.8268>:
  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
  return 0;
}

static void queues2_execute(void) {
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	2320      	movs	r3, #32
 8004444:	b083      	sub	sp, #12
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	4d9c      	ldr	r5, [pc, #624]	; (80046bc <queues2_execute.8268+0x27c>)
 800444c:	696a      	ldr	r2, [r5, #20]
 800444e:	69a8      	ldr	r0, [r5, #24]
 8004450:	4282      	cmp	r2, r0
 8004452:	f000 8082 	beq.w	800455a <queues2_execute.8268+0x11a>
 8004456:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8004458:	2001      	movs	r0, #1
 800445a:	f7fd fa19 	bl	8001890 <_test_assert>
 800445e:	4607      	mov	r7, r0
 8004460:	2800      	cmp	r0, #0
 8004462:	d159      	bne.n	8004518 <queues2_execute.8268+0xd8>
 8004464:	f380 8811 	msr	BASEPRI, r0
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8004468:	4c94      	ldr	r4, [pc, #592]	; (80046bc <queues2_execute.8268+0x27c>)
 800446a:	2141      	movs	r1, #65	; 0x41
 800446c:	4620      	mov	r0, r4
 800446e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004472:	f001 fa35 	bl	80058e0 <chOQPutTimeout>
 8004476:	2142      	movs	r1, #66	; 0x42
 8004478:	4620      	mov	r0, r4
 800447a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447e:	f001 fa2f 	bl	80058e0 <chOQPutTimeout>
 8004482:	2143      	movs	r1, #67	; 0x43
 8004484:	4620      	mov	r0, r4
 8004486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800448a:	f001 fa29 	bl	80058e0 <chOQPutTimeout>
 800448e:	4620      	mov	r0, r4
 8004490:	2144      	movs	r1, #68	; 0x44
 8004492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004496:	f001 fa23 	bl	80058e0 <chOQPutTimeout>
 800449a:	2620      	movs	r6, #32
 800449c:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 80044a0:	68ad      	ldr	r5, [r5, #8]

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 80044a2:	2002      	movs	r0, #2
 80044a4:	f1d5 0101 	rsbs	r1, r5, #1
 80044a8:	bf38      	it	cc
 80044aa:	2100      	movcc	r1, #0
 80044ac:	f7fd f9f0 	bl	8001890 <_test_assert>
 80044b0:	4605      	mov	r5, r0
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d135      	bne.n	8004522 <queues2_execute.8268+0xe2>
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80044be:	f7ff ff97 	bl	80043f0 <chOQGetI.constprop.24.4427>
 80044c2:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80044c6:	b2c0      	uxtb	r0, r0
 80044c8:	f7fd f9fa 	bl	80018c0 <test_emit_token>
 80044cc:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80044d0:	f7ff ff8e 	bl	80043f0 <chOQGetI.constprop.24.4427>
 80044d4:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80044d8:	b2c0      	uxtb	r0, r0
 80044da:	f7fd f9f1 	bl	80018c0 <test_emit_token>
 80044de:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80044e2:	f7ff ff85 	bl	80043f0 <chOQGetI.constprop.24.4427>
 80044e6:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80044ea:	b2c0      	uxtb	r0, r0
 80044ec:	f7fd f9e8 	bl	80018c0 <test_emit_token>
 80044f0:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80044f4:	f7ff ff7c 	bl	80043f0 <chOQGetI.constprop.24.4427>
 80044f8:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80044fc:	b2c0      	uxtb	r0, r0
 80044fe:	f7fd f9df 	bl	80018c0 <test_emit_token>
 8004502:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8004506:	6962      	ldr	r2, [r4, #20]
 8004508:	69a3      	ldr	r3, [r4, #24]
 800450a:	429a      	cmp	r2, r3
 800450c:	d02a      	beq.n	8004564 <queues2_execute.8268+0x124>
 800450e:	4629      	mov	r1, r5
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8004510:	2003      	movs	r0, #3
 8004512:	f7fd f9bd 	bl	8001890 <_test_assert>
 8004516:	b138      	cbz	r0, 8004528 <queues2_execute.8268+0xe8>
 8004518:	2100      	movs	r1, #0
 800451a:	f381 8811 	msr	BASEPRI, r1
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 800451e:	b003      	add	sp, #12
 8004520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004522:	f387 8811 	msr	BASEPRI, r7
 8004526:	e7fa      	b.n	800451e <queues2_execute.8268+0xde>
 8004528:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 800452c:	2004      	movs	r0, #4
 800452e:	4964      	ldr	r1, [pc, #400]	; (80046c0 <queues2_execute.8268+0x280>)
 8004530:	f7fd f966 	bl	8001800 <_test_assert_sequence>
 8004534:	4604      	mov	r4, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d1f1      	bne.n	800451e <queues2_execute.8268+0xde>
 800453a:	2520      	movs	r5, #32
 800453c:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8004540:	f7ff ff56 	bl	80043f0 <chOQGetI.constprop.24.4427>
 8004544:	3003      	adds	r0, #3
 8004546:	bf14      	ite	ne
 8004548:	2100      	movne	r1, #0
 800454a:	2101      	moveq	r1, #1
 800454c:	2005      	movs	r0, #5
 800454e:	f7fd f99f 	bl	8001890 <_test_assert>
 8004552:	b160      	cbz	r0, 800456e <queues2_execute.8268+0x12e>
 8004554:	f384 8811 	msr	BASEPRI, r4
 8004558:	e7e1      	b.n	800451e <queues2_execute.8268+0xde>
 800455a:	68a9      	ldr	r1, [r5, #8]
 800455c:	3100      	adds	r1, #0
 800455e:	bf18      	it	ne
 8004560:	2101      	movne	r1, #1
 8004562:	e779      	b.n	8004458 <queues2_execute.8268+0x18>
 8004564:	68a0      	ldr	r0, [r4, #8]
 8004566:	1c01      	adds	r1, r0, #0
 8004568:	bf18      	it	ne
 800456a:	2101      	movne	r1, #1
 800456c:	e7d0      	b.n	8004510 <queues2_execute.8268+0xd0>
 800456e:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8004572:	4c52      	ldr	r4, [pc, #328]	; (80046bc <queues2_execute.8268+0x27c>)
 8004574:	2208      	movs	r2, #8
 8004576:	4603      	mov	r3, r0
 8004578:	4952      	ldr	r1, [pc, #328]	; (80046c4 <queues2_execute.8268+0x284>)
 800457a:	4620      	mov	r0, r4
 800457c:	f001 f9f8 	bl	8005970 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8004580:	1f06      	subs	r6, r0, #4
 8004582:	4271      	negs	r1, r6
 8004584:	4171      	adcs	r1, r6
 8004586:	2006      	movs	r0, #6
 8004588:	f7fd f982 	bl	8001890 <_test_assert>
 800458c:	4606      	mov	r6, r0
 800458e:	2800      	cmp	r0, #0
 8004590:	d1c5      	bne.n	800451e <queues2_execute.8268+0xde>
 8004592:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8004596:	68a7      	ldr	r7, [r4, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8004598:	2007      	movs	r0, #7
 800459a:	f1d7 0101 	rsbs	r1, r7, #1
 800459e:	bf38      	it	cc
 80045a0:	2100      	movcc	r1, #0
 80045a2:	f7fd f975 	bl	8001890 <_test_assert>
 80045a6:	4607      	mov	r7, r0
 80045a8:	b110      	cbz	r0, 80045b0 <queues2_execute.8268+0x170>
 80045aa:	f386 8811 	msr	BASEPRI, r6
 80045ae:	e7b6      	b.n	800451e <queues2_execute.8268+0xde>
 80045b0:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80045b4:	4a44      	ldr	r2, [pc, #272]	; (80046c8 <queues2_execute.8268+0x288>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80045b6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80045ba:	6990      	ldr	r0, [r2, #24]
 80045bc:	4b43      	ldr	r3, [pc, #268]	; (80046cc <queues2_execute.8268+0x28c>)
 80045be:	6886      	ldr	r6, [r0, #8]
 80045c0:	9700      	str	r7, [sp, #0]
 80045c2:	1c72      	adds	r2, r6, #1
 80045c4:	4842      	ldr	r0, [pc, #264]	; (80046d0 <queues2_execute.8268+0x290>)
 80045c6:	f7fd fc3b 	bl	8001e40 <chThdCreateStatic>
 80045ca:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <queues2_execute.8268+0x294>)
 80045cc:	6018      	str	r0, [r3, #0]
 80045ce:	f385 8811 	msr	BASEPRI, r5
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 80045d2:	6921      	ldr	r1, [r4, #16]
 80045d4:	68e2      	ldr	r2, [r4, #12]
 80045d6:	68a0      	ldr	r0, [r4, #8]
 80045d8:	1a8e      	subs	r6, r1, r2
 80045da:	1a33      	subs	r3, r6, r0
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 80045dc:	2008      	movs	r0, #8
 80045de:	f1b3 0c04 	subs.w	ip, r3, #4
 80045e2:	f1dc 0100 	rsbs	r1, ip, #0
 80045e6:	eb51 010c 	adcs.w	r1, r1, ip
 80045ea:	f7fd f951 	bl	8001890 <_test_assert>
 80045ee:	4606      	mov	r6, r0
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d196      	bne.n	8004522 <queues2_execute.8268+0xe2>
 80045f4:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80045f8:	f7fd ff32 	bl	8002460 <test_wait_threads>
 80045fc:	f385 8811 	msr	BASEPRI, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8004600:	68e3      	ldr	r3, [r4, #12]
  oqp->q_counter = chQSizeI(oqp);
 8004602:	6922      	ldr	r2, [r4, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8004604:	4620      	mov	r0, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 8004606:	1ad2      	subs	r2, r2, r3
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8004608:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 800460c:	6163      	str	r3, [r4, #20]
 800460e:	61a3      	str	r3, [r4, #24]
  oqp->q_counter = chQSizeI(oqp);
 8004610:	60a2      	str	r2, [r4, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8004612:	f002 fe35 	bl	8007280 <chThdDequeueAllI>
 8004616:	f386 8811 	msr	BASEPRI, r6
 800461a:	f385 8811 	msr	BASEPRI, r5
 800461e:	6920      	ldr	r0, [r4, #16]
 8004620:	68e1      	ldr	r1, [r4, #12]

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	1a42      	subs	r2, r0, r1
 8004626:	2009      	movs	r0, #9
 8004628:	ebb2 0e03 	subs.w	lr, r2, r3
 800462c:	f1de 0100 	rsbs	r1, lr, #0
 8004630:	eb51 010e 	adcs.w	r1, r1, lr
 8004634:	f7fd f92c 	bl	8001890 <_test_assert>
 8004638:	4603      	mov	r3, r0
 800463a:	2800      	cmp	r0, #0
 800463c:	d1b5      	bne.n	80045aa <queues2_execute.8268+0x16a>
 800463e:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004642:	2202      	movs	r2, #2
 8004644:	491f      	ldr	r1, [pc, #124]	; (80046c4 <queues2_execute.8268+0x284>)
 8004646:	4620      	mov	r0, r4
 8004648:	f001 f992 	bl	8005970 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800464c:	3802      	subs	r0, #2
 800464e:	4243      	negs	r3, r0
 8004650:	eb53 0100 	adcs.w	r1, r3, r0
 8004654:	200a      	movs	r0, #10
 8004656:	f7fd f91b 	bl	8001890 <_test_assert>
 800465a:	4603      	mov	r3, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	f47f af5e 	bne.w	800451e <queues2_execute.8268+0xde>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004662:	4918      	ldr	r1, [pc, #96]	; (80046c4 <queues2_execute.8268+0x284>)
 8004664:	2202      	movs	r2, #2
 8004666:	4620      	mov	r0, r4
 8004668:	f001 f982 	bl	8005970 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800466c:	1e82      	subs	r2, r0, #2
 800466e:	4251      	negs	r1, r2
 8004670:	4151      	adcs	r1, r2
 8004672:	200b      	movs	r0, #11
 8004674:	f7fd f90c 	bl	8001890 <_test_assert>
 8004678:	2800      	cmp	r0, #0
 800467a:	f47f af50 	bne.w	800451e <queues2_execute.8268+0xde>
 800467e:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8004682:	68a3      	ldr	r3, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8004684:	200c      	movs	r0, #12
 8004686:	f1d3 0101 	rsbs	r1, r3, #1
 800468a:	bf38      	it	cc
 800468c:	2100      	movcc	r1, #0
 800468e:	f7fd f8ff 	bl	8001890 <_test_assert>
 8004692:	2800      	cmp	r0, #0
 8004694:	f47f af40 	bne.w	8004518 <queues2_execute.8268+0xd8>
 8004698:	2100      	movs	r1, #0
 800469a:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800469e:	220a      	movs	r2, #10
 80046a0:	4806      	ldr	r0, [pc, #24]	; (80046bc <queues2_execute.8268+0x27c>)
 80046a2:	f001 f91d 	bl	80058e0 <chOQPutTimeout>
 80046a6:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 80046aa:	4242      	negs	r2, r0
 80046ac:	eb52 0100 	adcs.w	r1, r2, r0
 80046b0:	200d      	movs	r0, #13
}
 80046b2:	b003      	add	sp, #12
 80046b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 80046b8:	f7fd b8ea 	b.w	8001890 <_test_assert>
 80046bc:	20000c98 	.word	0x20000c98
 80046c0:	0800a740 	.word	0x0800a740
 80046c4:	20001998 	.word	0x20001998
 80046c8:	20001ec0 	.word	0x20001ec0
 80046cc:	08005931 	.word	0x08005931
 80046d0:	20001850 	.word	0x20001850
 80046d4:	20002010 	.word	0x20002010
 80046d8:	f3af 8000 	nop.w
 80046dc:	f3af 8000 	nop.w

080046e0 <si446x_spi>:
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 80046e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 80046e4:	2400      	movs	r4, #0
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 80046e6:	b08b      	sub	sp, #44	; 0x2c
 80046e8:	4607      	mov	r7, r0
 80046ea:	460e      	mov	r6, r1
 80046ec:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 80046f0:	9405      	str	r4, [sp, #20]
 80046f2:	9406      	str	r4, [sp, #24]
 80046f4:	9407      	str	r4, [sp, #28]
 80046f6:	9408      	str	r4, [sp, #32]
 80046f8:	9409      	str	r4, [sp, #36]	; 0x24
 80046fa:	f04f 0820 	mov.w	r8, #32
 80046fe:	f388 8811 	msr	BASEPRI, r8
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8004702:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8004850 <si446x_spi+0x170>
 8004706:	2101      	movs	r1, #1
 8004708:	f8da 3004 	ldr.w	r3, [sl, #4]
 800470c:	891a      	ldrh	r2, [r3, #8]
 800470e:	6858      	ldr	r0, [r3, #4]
 8004710:	fa01 f502 	lsl.w	r5, r1, r2
 8004714:	6145      	str	r5, [r0, #20]
 8004716:	f384 8811 	msr	BASEPRI, r4
 800471a:	f388 8811 	msr	BASEPRI, r8
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 800471e:	4639      	mov	r1, r7
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004720:	f641 67c0 	movw	r7, #7872	; 0x1ec0
 8004724:	2503      	movs	r5, #3
 8004726:	4650      	mov	r0, sl
 8004728:	4632      	mov	r2, r6
 800472a:	ab05      	add	r3, sp, #20
 800472c:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8004730:	f88a 5000 	strb.w	r5, [sl]
 8004734:	f002 f904 	bl	8006940 <spi_lld_exchange>
 8004738:	69be      	ldr	r6, [r7, #24]
 800473a:	ab0a      	add	r3, sp, #40	; 0x28
 800473c:	f10a 0208 	add.w	r2, sl, #8
 8004740:	f843 2d1c 	str.w	r2, [r3, #-28]!
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wtobjp = &trp;
 8004744:	6233      	str	r3, [r6, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8004746:	4628      	mov	r0, r5
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8004748:	f8ca 6008 	str.w	r6, [sl, #8]
  tp->p_u.wtobjp = &trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800474c:	f7fd fbb8 	bl	8001ec0 <chSchGoSleepS>
 8004750:	f384 8811 	msr	BASEPRI, r4
 8004754:	f388 8811 	msr	BASEPRI, r8

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8004758:	4650      	mov	r0, sl
 800475a:	f002 f911 	bl	8006980 <spi_lld_unselect>
 800475e:	f384 8811 	msr	BASEPRI, r4
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 8004762:	2044      	movs	r0, #68	; 0x44
 8004764:	f88d 0014 	strb.w	r0, [sp, #20]
 8004768:	f388 8811 	msr	BASEPRI, r8
 800476c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8004770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004772:	f384 8811 	msr	BASEPRI, r4
	uint32_t millis = MS2ST(chVTGetSystemTime());
 8004776:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 800477a:	fa1f f981 	uxth.w	r9, r1
 800477e:	fb06 f409 	mul.w	r4, r6, r9
 8004782:	f644 55d3 	movw	r5, #19923	; 0x4dd3
 8004786:	f104 33ff 	add.w	r3, r4, #4294967295
 800478a:	f2c1 0562 	movt	r5, #4194	; 0x1062
 800478e:	fba5 2003 	umull	r2, r0, r5, r3
 8004792:	ea4f 1290 	mov.w	r2, r0, lsr #6
 8004796:	f102 0101 	add.w	r1, r2, #1
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 800479a:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	uint8_t dummy_buffer[20]={};/*For dummy data*/
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
 800479e:	fa1f f981 	uxth.w	r9, r1
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80047a2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80047a6:	e013      	b.n	80047d0 <si446x_spi+0xf0>
		chThdSleepMicroseconds(20);
 80047a8:	f003 f992 	bl	8007ad0 <chThdSleep>
 80047ac:	f388 8811 	msr	BASEPRI, r8
 80047b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b2:	f38b 8811 	msr	BASEPRI, fp
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
 80047b6:	b28b      	uxth	r3, r1
 80047b8:	fb06 f303 	mul.w	r3, r6, r3
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	fba5 1002 	umull	r1, r0, r5, r2
 80047c2:	0981      	lsrs	r1, r0, #6
 80047c4:	1c4b      	adds	r3, r1, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	ebc9 0002 	rsb	r0, r9, r2
 80047cc:	280a      	cmp	r0, #10
 80047ce:	d80a      	bhi.n	80047e6 <si446x_spi+0x106>
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80047d0:	68a3      	ldr	r3, [r4, #8]
		chThdSleepMicroseconds(20);
 80047d2:	2001      	movs	r0, #1
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80047d4:	f413 6b00 	ands.w	fp, r3, #2048	; 0x800
 80047d8:	d0e6      	beq.n	80047a8 <si446x_spi+0xc8>
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
 80047da:	9a00      	ldr	r2, [sp, #0]
 80047dc:	b92a      	cbnz	r2, 80047ea <si446x_spi+0x10a>
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 80047de:	9800      	ldr	r0, [sp, #0]
}
 80047e0:	b00b      	add	sp, #44	; 0x2c
 80047e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
 80047e6:	2001      	movs	r0, #1
 80047e8:	e7fa      	b.n	80047e0 <si446x_spi+0x100>
 80047ea:	2520      	movs	r5, #32
 80047ec:	f385 8811 	msr	BASEPRI, r5
 80047f0:	f8da 6004 	ldr.w	r6, [sl, #4]
 80047f4:	8934      	ldrh	r4, [r6, #8]
 80047f6:	6873      	ldr	r3, [r6, #4]
 80047f8:	fa00 f104 	lsl.w	r1, r0, r4
 80047fc:	2400      	movs	r4, #0
 80047fe:	6159      	str	r1, [r3, #20]
 8004800:	f384 8811 	msr	BASEPRI, r4
 8004804:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8004808:	2603      	movs	r6, #3
 800480a:	9900      	ldr	r1, [sp, #0]
 800480c:	aa05      	add	r2, sp, #20
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	480f      	ldr	r0, [pc, #60]	; (8004850 <si446x_spi+0x170>)
 8004812:	f88a 6000 	strb.w	r6, [sl]
 8004816:	f002 f893 	bl	8006940 <spi_lld_exchange>
 800481a:	f641 62c0 	movw	r2, #7872	; 0x1ec0
 800481e:	480d      	ldr	r0, [pc, #52]	; (8004854 <si446x_spi+0x174>)
 8004820:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004824:	ab0a      	add	r3, sp, #40	; 0x28
 8004826:	6992      	ldr	r2, [r2, #24]
 8004828:	f843 0d18 	str.w	r0, [r3, #-24]!
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wtobjp = &trp;
 800482c:	6213      	str	r3, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800482e:	4630      	mov	r0, r6
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8004830:	f8ca 2008 	str.w	r2, [sl, #8]
  tp->p_u.wtobjp = &trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8004834:	f7fd fb44 	bl	8001ec0 <chSchGoSleepS>
 8004838:	f384 8811 	msr	BASEPRI, r4
 800483c:	f385 8811 	msr	BASEPRI, r5

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8004840:	4803      	ldr	r0, [pc, #12]	; (8004850 <si446x_spi+0x170>)
 8004842:	f002 f89d 	bl	8006980 <spi_lld_unselect>
 8004846:	f384 8811 	msr	BASEPRI, r4
	if(rx_bytes) {
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 800484a:	4620      	mov	r0, r4
 800484c:	e7c8      	b.n	80047e0 <si446x_spi+0x100>
 800484e:	bf00      	nop
 8004850:	200017f0 	.word	0x200017f0
 8004854:	200017f8 	.word	0x200017f8
 8004858:	f3af 8000 	nop.w
 800485c:	f3af 8000 	nop.w

08004860 <si446x_set_frequency>:
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8004864:	f247 233f 	movw	r3, #29247	; 0x723f
 8004868:	f6c2 2305 	movt	r3, #10757	; 0x2a05
 800486c:	4298      	cmp	r0, r3
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 800486e:	b087      	sub	sp, #28
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8004870:	f200 80b0 	bhi.w	80049d4 <si446x_set_frequency+0x174>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8004874:	f64d 513f 	movw	r1, #56639	; 0xdd3f
 8004878:	f6c1 714a 	movt	r1, #8010	; 0x1f4a
 800487c:	4288      	cmp	r0, r1
 800487e:	f200 80ae 	bhi.w	80049de <si446x_set_frequency+0x17e>
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8004882:	f645 253f 	movw	r5, #23103	; 0x5a3f
 8004886:	f2c1 550a 	movt	r5, #5386	; 0x150a
 800488a:	42a8      	cmp	r0, r5
 800488c:	f200 80b5 	bhi.w	80049fa <si446x_set_frequency+0x19a>
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8004890:	f64d 13bf 	movw	r3, #55743	; 0xd9bf
 8004894:	f6c0 633e 	movt	r3, #3646	; 0xe3e
 8004898:	4298      	cmp	r0, r3
 800489a:	f200 80a9 	bhi.w	80049f0 <si446x_set_frequency+0x190>
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
 800489e:	f64c 623f 	movw	r2, #52799	; 0xce3f
 80048a2:	f6c0 228c 	movt	r2, #2700	; 0xa8c
 80048a6:	4290      	cmp	r0, r2
 80048a8:	4c56      	ldr	r4, [pc, #344]	; (8004a04 <si446x_set_frequency+0x1a4>)
 80048aa:	f200 809d 	bhi.w	80049e8 <si446x_set_frequency+0x188>
 80048ae:	2118      	movs	r1, #24
 80048b0:	7021      	strb	r1, [r4, #0]
 80048b2:	270d      	movs	r7, #13
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
 80048b4:	f44f 45ea 	mov.w	r5, #29952	; 0x7500
 80048b8:	f2c0 3519 	movt	r5, #793	; 0x319
 80048bc:	fbb5 f5f1 	udiv	r5, r5, r1
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 80048c0:	fbb0 f8f5 	udiv	r8, r0, r5
	float ratio = (float)freq / (float)f_pfd;
 80048c4:	f7fc fc4a 	bl	800115c <__aeabi_ui2f>
 80048c8:	4606      	mov	r6, r0
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7fc fc46 	bl	800115c <__aeabi_ui2f>
 80048d0:	4601      	mov	r1, r0
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7fc fd50 	bl	8001378 <__aeabi_fdiv>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 80048d8:	f108 38ff 	add.w	r8, r8, #4294967295
	float ratio = (float)freq / (float)f_pfd;
 80048dc:	4605      	mov	r5, r0
	float rest = ratio - (float)n;
 80048de:	4640      	mov	r0, r8
 80048e0:	f7fc fc3c 	bl	800115c <__aeabi_ui2f>
 80048e4:	4601      	mov	r1, r0
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7fc fb86 	bl	8000ff8 <__aeabi_fsub>
	uint32_t m = (unsigned long)(rest * 524288UL);
 80048ec:	f04f 4192 	mov.w	r1, #1224736768	; 0x49000000
 80048f0:	f7fc fc8e 	bl	8001210 <__aeabi_fmul>
 80048f4:	f7fc fe7c 	bl	80015f0 <__aeabi_f2uiz>
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 80048f8:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004a10 <si446x_set_frequency+0x1b0>
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80048fc:	2611      	movs	r6, #17
 80048fe:	2501      	movs	r5, #1
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
 8004900:	4681      	mov	r9, r0
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004902:	a902      	add	r1, sp, #8
 8004904:	2200      	movs	r2, #0
 8004906:	ab01      	add	r3, sp, #4
 8004908:	2005      	movs	r0, #5
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 800490a:	f04f 0a20 	mov.w	sl, #32
 800490e:	f04f 0b51 	mov.w	fp, #81	; 0x51
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 8004912:	f88e 7000 	strb.w	r7, [lr]
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8004916:	f88d a009 	strb.w	sl, [sp, #9]
 800491a:	f88d b00b 	strb.w	fp, [sp, #11]
 800491e:	f88d 700c 	strb.w	r7, [sp, #12]
 8004922:	f88d 6008 	strb.w	r6, [sp, #8]
 8004926:	f88d 500a 	strb.w	r5, [sp, #10]
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800492a:	f7ff fed9 	bl	80046e0 <si446x_spi>
 800492e:	4682      	mov	sl, r0
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 8004930:	f994 0000 	ldrsb.w	r0, [r4]
 8004934:	4c34      	ldr	r4, [pc, #208]	; (8004a08 <si446x_set_frequency+0x1a8>)
 8004936:	04c7      	lsls	r7, r0, #19
 8004938:	8823      	ldrh	r3, [r4, #0]
 800493a:	f64e 00a5 	movw	r0, #59557	; 0xe8a5
 800493e:	b299      	uxth	r1, r3
 8004940:	fb01 f207 	mul.w	r2, r1, r7
 8004944:	f2ca 5030 	movt	r0, #42288	; 0xa530
 8004948:	fba0 2302 	umull	r2, r3, r0, r2
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
 800494c:	ea4f 4719 	mov.w	r7, r9, lsr #16
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8004950:	2400      	movs	r4, #0
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8004952:	eba9 4907 	sub.w	r9, r9, r7, lsl #16
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8004956:	f04f 0b40 	mov.w	fp, #64	; 0x40
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
 800495a:	ea4f 6e53 	mov.w	lr, r3, lsr #25
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 800495e:	ea4f 2c19 	mov.w	ip, r9, lsr #8
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8004962:	a902      	add	r1, sp, #8
 8004964:	4622      	mov	r2, r4
 8004966:	ab01      	add	r3, sp, #4
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8004968:	f88d b009 	strb.w	fp, [sp, #9]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 800496c:	200a      	movs	r0, #10
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 800496e:	f04f 0b06 	mov.w	fp, #6
 8004972:	f88d 400b 	strb.w	r4, [sp, #11]
 8004976:	f88d 700d 	strb.w	r7, [sp, #13]
 800497a:	f88d c00e 	strb.w	ip, [sp, #14]
 800497e:	f88d 4010 	strb.w	r4, [sp, #16]
 8004982:	f88d e011 	strb.w	lr, [sp, #17]
 8004986:	f88d 6008 	strb.w	r6, [sp, #8]
 800498a:	f88d b00a 	strb.w	fp, [sp, #10]
 800498e:	f88d 800c 	strb.w	r8, [sp, #12]
 8004992:	f88d 900f 	strb.w	r9, [sp, #15]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8004996:	f7ff fea3 	bl	80046e0 <si446x_spi>
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 800499a:	491c      	ldr	r1, [pc, #112]	; (8004a0c <si446x_set_frequency+0x1ac>)
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800499c:	4622      	mov	r2, r4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 800499e:	780f      	ldrb	r7, [r1, #0]
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 80049a0:	ea40 0a0a 	orr.w	sl, r0, sl
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80049a4:	a902      	add	r1, sp, #8
 80049a6:	2005      	movs	r0, #5
 80049a8:	ab01      	add	r3, sp, #4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 80049aa:	2422      	movs	r4, #34	; 0x22
 80049ac:	f88d 6008 	strb.w	r6, [sp, #8]
 80049b0:	f88d 4009 	strb.w	r4, [sp, #9]
 80049b4:	f88d 500a 	strb.w	r5, [sp, #10]
 80049b8:	f88d 500b 	strb.w	r5, [sp, #11]
 80049bc:	f88d 700c 	strb.w	r7, [sp, #12]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80049c0:	f7ff fe8e 	bl	80046e0 <si446x_spi>
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 80049c4:	fa5f fa8a 	uxtb.w	sl, sl
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80049c8:	ea4a 0200 	orr.w	r2, sl, r0
	return failure;
 80049cc:	b2d0      	uxtb	r0, r2
}
 80049ce:	b007      	add	sp, #28
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	4c0b      	ldr	r4, [pc, #44]	; (8004a04 <si446x_set_frequency+0x1a4>)
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 80049d6:	2708      	movs	r7, #8
 80049d8:	f994 1000 	ldrsb.w	r1, [r4]
 80049dc:	e76a      	b.n	80048b4 <si446x_set_frequency+0x54>
 80049de:	4c09      	ldr	r4, [pc, #36]	; (8004a04 <si446x_set_frequency+0x1a4>)
 80049e0:	2206      	movs	r2, #6
 80049e2:	7022      	strb	r2, [r4, #0]
 80049e4:	2709      	movs	r7, #9
 80049e6:	e7f7      	b.n	80049d8 <si446x_set_frequency+0x178>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 80049e8:	2110      	movs	r1, #16
 80049ea:	7021      	strb	r1, [r4, #0]
 80049ec:	270c      	movs	r7, #12
 80049ee:	e761      	b.n	80048b4 <si446x_set_frequency+0x54>
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 80049f0:	4c04      	ldr	r4, [pc, #16]	; (8004a04 <si446x_set_frequency+0x1a4>)
 80049f2:	270c      	movs	r7, #12
 80049f4:	7027      	strb	r7, [r4, #0]
 80049f6:	270b      	movs	r7, #11
 80049f8:	e7ee      	b.n	80049d8 <si446x_set_frequency+0x178>
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 80049fa:	4c02      	ldr	r4, [pc, #8]	; (8004a04 <si446x_set_frequency+0x1a4>)
 80049fc:	2608      	movs	r6, #8
 80049fe:	7026      	strb	r6, [r4, #0]
 8004a00:	270a      	movs	r7, #10
 8004a02:	e7e9      	b.n	80049d8 <si446x_set_frequency+0x178>
 8004a04:	20000814 	.word	0x20000814
 8004a08:	20000810 	.word	0x20000810
 8004a0c:	20000813 	.word	0x20000813
 8004a10:	20000812 	.word	0x20000812
 8004a14:	f3af 8000 	nop.w
 8004a18:	f3af 8000 	nop.w
 8004a1c:	f3af 8000 	nop.w

08004a20 <si446x_initialise>:
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Reset the radio */
	SDN_HIGH;
 8004a24:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8004a28:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004a2c:	f44f 7500 	mov.w	r5, #512	; 0x200
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8004a30:	b0af      	sub	sp, #188	; 0xbc
	/* Reset the radio */
	SDN_HIGH;
	chThdSleepMilliseconds(10);
 8004a32:	2014      	movs	r0, #20
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
	/* Reset the radio */
	SDN_HIGH;
 8004a34:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(10);
 8004a36:	f003 f84b 	bl	8007ad0 <chThdSleep>
	SDN_LOW;						/*Radio is now reset*/
 8004a3a:	6165      	str	r5, [r4, #20]
	chThdSleepMilliseconds(10);				/*Wait another 10ms to boot*/
 8004a3c:	2014      	movs	r0, #20
 8004a3e:	f003 f847 	bl	8007ad0 <chThdSleep>
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMilliseconds(10);}/*Wait for CTS high after POR*/
 8004a42:	68a3      	ldr	r3, [r4, #8]
 8004a44:	051a      	lsls	r2, r3, #20
 8004a46:	d5f9      	bpl.n	8004a3c <si446x_initialise+0x1c>
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8004a48:	4c0b      	ldr	r4, [pc, #44]	; (8004a78 <si446x_initialise+0x58>)
 8004a4a:	2701      	movs	r7, #1
 8004a4c:	2602      	movs	r6, #2
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8004a4e:	4632      	mov	r2, r6
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8004a50:	7026      	strb	r6, [r4, #0]
 8004a52:	7067      	strb	r7, [r4, #1]
 8004a54:	70a7      	strb	r7, [r4, #2]
 8004a56:	70e7      	strb	r7, [r4, #3]
 8004a58:	258c      	movs	r5, #140	; 0x8c
 8004a5a:	26ba      	movs	r6, #186	; 0xba
 8004a5c:	2780      	movs	r7, #128	; 0x80
 8004a5e:	7125      	strb	r5, [r4, #4]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8004a60:	2007      	movs	r0, #7
 8004a62:	4621      	mov	r1, r4
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <si446x_initialise+0x5c>)
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8004a66:	7166      	strb	r6, [r4, #5]
 8004a68:	71a7      	strb	r7, [r4, #6]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8004a6a:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8004a6e:	f7ff fe37 	bl	80046e0 <si446x_spi>
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8004a72:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004a76:	e006      	b.n	8004a86 <si446x_initialise+0x66>
 8004a78:	200017e0 	.word	0x200017e0
 8004a7c:	20001844 	.word	0x20001844
 8004a80:	2014      	movs	r0, #20
 8004a82:	f003 f825 	bl	8007ad0 <chThdSleep>
 8004a86:	68a8      	ldr	r0, [r5, #8]
 8004a88:	68aa      	ldr	r2, [r5, #8]
 8004a8a:	f000 0101 	and.w	r1, r0, #1
 8004a8e:	f3c2 2380 	ubfx	r3, r2, #10, #1
 8004a92:	f083 0601 	eor.w	r6, r3, #1
 8004a96:	ea56 0301 	orrs.w	r3, r6, r1
 8004a9a:	d1f1      	bne.n	8004a80 <si446x_initialise+0x60>
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8004a9c:	2500      	movs	r5, #0
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8004a9e:	f8df 835c 	ldr.w	r8, [pc, #860]	; 8004dfc <si446x_initialise+0x3dc>
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8004aa2:	2720      	movs	r7, #32
	si446x_spi( 4, tx_buffer, 0, NULL);
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	462b      	mov	r3, r5
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8004aa8:	7027      	strb	r7, [r4, #0]
	si446x_spi( 4, tx_buffer, 0, NULL);
 8004aaa:	49cf      	ldr	r1, [pc, #828]	; (8004de8 <si446x_initialise+0x3c8>)
 8004aac:	2004      	movs	r0, #4
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8004aae:	7065      	strb	r5, [r4, #1]
 8004ab0:	70a5      	strb	r5, [r4, #2]
 8004ab2:	70e5      	strb	r5, [r4, #3]
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8004ab4:	4ecd      	ldr	r6, [pc, #820]	; (8004dec <si446x_initialise+0x3cc>)
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
 8004ab6:	f7ff fe13 	bl	80046e0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8004aba:	f838 eb04 	ldrh.w	lr, [r8], #4
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8004abe:	4633      	mov	r3, r6
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8004ac0:	f8a4 e000 	strh.w	lr, [r4]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8004ac4:	220c      	movs	r2, #12
 8004ac6:	49c8      	ldr	r1, [pc, #800]	; (8004de8 <si446x_initialise+0x3c8>)
 8004ac8:	2002      	movs	r0, #2
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8004aca:	f8ad e008 	strh.w	lr, [sp, #8]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8004ace:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8004e00 <si446x_initialise+0x3e0>
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8004ad2:	f7ff fe05 	bl	80046e0 <si446x_spi>
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8004ad6:	e898 0003 	ldmia.w	r8, {r0, r1}
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8004ada:	f8b6 c003 	ldrh.w	ip, [r6, #3]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8004ade:	9009      	str	r0, [sp, #36]	; 0x24
 8004ae0:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8004ae4:	a809      	add	r0, sp, #36	; 0x24
 8004ae6:	c803      	ldmia	r0, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
 8004ae8:	462b      	mov	r3, r5
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8004aea:	f8a9 c000 	strh.w	ip, [r9]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 8004aee:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, NULL);
 8004af4:	2006      	movs	r0, #6
 8004af6:	49bc      	ldr	r1, [pc, #752]	; (8004de8 <si446x_initialise+0x3c8>)
 8004af8:	f7ff fdf2 	bl	80046e0 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8004afc:	4abc      	ldr	r2, [pc, #752]	; (8004df0 <si446x_initialise+0x3d0>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004afe:	a926      	add	r1, sp, #152	; 0x98
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8004b00:	6810      	ldr	r0, [r2, #0]
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004b02:	9101      	str	r1, [sp, #4]
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8004b04:	f7ff feac 	bl	8004860 <si446x_set_frequency>
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8004b08:	4bba      	ldr	r3, [pc, #744]	; (8004df4 <si446x_initialise+0x3d4>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004b0a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8004b0e:	f993 7000 	ldrsb.w	r7, [r3]
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8004b12:	f04f 0b11 	mov.w	fp, #17
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8004b16:	04b8      	lsls	r0, r7, #18
 8004b18:	f7fc fb24 	bl	8001164 <__aeabi_i2f>
 8004b1c:	f645 5140 	movw	r1, #23872	; 0x5d40
 8004b20:	f6c4 31c6 	movt	r1, #19398	; 0x4bc6
 8004b24:	f7fc fc28 	bl	8001378 <__aeabi_fdiv>
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8004b28:	2100      	movs	r1, #0
 8004b2a:	f2c4 3196 	movt	r1, #17302	; 0x4396
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8004b2e:	4681      	mov	r9, r0
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8004b30:	f7fc fb6e 	bl	8001210 <__aeabi_fmul>
 8004b34:	f7fb ff58 	bl	80009e8 <__aeabi_f2d>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8004b40:	f7fb ffa6 	bl	8000a90 <__aeabi_dmul>
 8004b44:	f7fc f9e4 	bl	8000f10 <__aeabi_d2uiz>
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8004b48:	2720      	movs	r7, #32
 8004b4a:	f88d 70a9 	strb.w	r7, [sp, #169]	; 0xa9
 8004b4e:	2703      	movs	r7, #3
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8004b50:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8004b54:	4686      	mov	lr, r0
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004b56:	462a      	mov	r2, r5
 8004b58:	ab26      	add	r3, sp, #152	; 0x98
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8004b5a:	ea4f 4a10 	mov.w	sl, r0, lsr #16
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004b5e:	4641      	mov	r1, r8
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8004b60:	f88d 70aa 	strb.w	r7, [sp, #170]	; 0xaa
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004b64:	2007      	movs	r0, #7
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8004b66:	270a      	movs	r7, #10
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8004b68:	f88d c0ad 	strb.w	ip, [sp, #173]	; 0xad
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
 8004b6c:	f88d e0ae 	strb.w	lr, [sp, #174]	; 0xae
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8004b70:	f88d 70ab 	strb.w	r7, [sp, #171]	; 0xab
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8004b74:	f88d a0ac 	strb.w	sl, [sp, #172]	; 0xac
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8004b78:	f88d b0a8 	strb.w	fp, [sp, #168]	; 0xa8
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004b7c:	f7ff fdb0 	bl	80046e0 <si446x_spi>
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
 8004b80:	2100      	movs	r1, #0
 8004b82:	f2c4 4116 	movt	r1, #17430	; 0x4416
 8004b86:	4648      	mov	r0, r9
 8004b88:	f7fc fb42 	bl	8001210 <__aeabi_fmul>
 8004b8c:	f7fc fd30 	bl	80015f0 <__aeabi_f2uiz>
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8004b90:	f04f 0702 	mov.w	r7, #2
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
 8004b94:	4686      	mov	lr, r0
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8004b96:	ea4f 2a10 	mov.w	sl, r0, lsr #8
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	ab26      	add	r3, sp, #152	; 0x98
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8004ba0:	f88d 70aa 	strb.w	r7, [sp, #170]	; 0xaa
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004ba4:	2006      	movs	r0, #6
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8004ba6:	2704      	movs	r7, #4
 8004ba8:	f04f 0940 	mov.w	r9, #64	; 0x40
 8004bac:	f88d 90a9 	strb.w	r9, [sp, #169]	; 0xa9
 8004bb0:	f88d 70ab 	strb.w	r7, [sp, #171]	; 0xab
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8004bb4:	f88d a0ac 	strb.w	sl, [sp, #172]	; 0xac
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
 8004bb8:	f88d e0ad 	strb.w	lr, [sp, #173]	; 0xad
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8004bbc:	f88d b0a8 	strb.w	fp, [sp, #168]	; 0xa8
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004bc0:	f7ff fd8e 	bl	80046e0 <si446x_spi>
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8004bc4:	488c      	ldr	r0, [pc, #560]	; (8004df8 <si446x_initialise+0x3d8>)
 8004bc6:	f04f 01c8 	mov.w	r1, #200	; 0xc8
 8004bca:	7802      	ldrb	r2, [r0, #0]
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 8004bcc:	2720      	movs	r7, #32
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8004bce:	fb01 fe02 	mul.w	lr, r1, r2
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 8004bd2:	f88d 70a9 	strb.w	r7, [sp, #169]	; 0xa9
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 8004bd6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 8004bda:	200b      	movs	r0, #11
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 8004bdc:	2703      	movs	r7, #3
 8004bde:	f04f 0a07 	mov.w	sl, #7
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 8004be2:	4641      	mov	r1, r8
 8004be4:	462a      	mov	r2, r5
 8004be6:	ab26      	add	r3, sp, #152	; 0x98
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 8004be8:	f88d 70ab 	strb.w	r7, [sp, #171]	; 0xab
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 8004bec:	f88d c0ad 	strb.w	ip, [sp, #173]	; 0xad
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
 8004bf0:	f88d e0ae 	strb.w	lr, [sp, #174]	; 0xae
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 8004bf4:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8004bf8:	f04f 0e8c 	mov.w	lr, #140	; 0x8c
 8004bfc:	f04f 0901 	mov.w	r9, #1
 8004c00:	f04f 07ba 	mov.w	r7, #186	; 0xba
 8004c04:	f88d e0b0 	strb.w	lr, [sp, #176]	; 0xb0
 8004c08:	f88d c0b2 	strb.w	ip, [sp, #178]	; 0xb2
 8004c0c:	f88d 90af 	strb.w	r9, [sp, #175]	; 0xaf
 8004c10:	f88d 70b1 	strb.w	r7, [sp, #177]	; 0xb1
 8004c14:	f88d b0a8 	strb.w	fp, [sp, #168]	; 0xa8
 8004c18:	f88d a0aa 	strb.w	sl, [sp, #170]	; 0xaa
 8004c1c:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 8004c20:	f7ff fd5e 	bl	80046e0 <si446x_spi>
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8004c24:	4a75      	ldr	r2, [pc, #468]	; (8004dfc <si446x_initialise+0x3dc>)
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8004c26:	4f75      	ldr	r7, [pc, #468]	; (8004dfc <si446x_initialise+0x3dc>)
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8004c28:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8004c2c:	ab11      	add	r3, sp, #68	; 0x44
 8004c2e:	8891      	ldrh	r1, [r2, #4]
 8004c30:	9011      	str	r0, [sp, #68]	; 0x44
 8004c32:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8004c36:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004c3a:	462a      	mov	r2, r5
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8004c3c:	6020      	str	r0, [r4, #0]
 8004c3e:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004c40:	4633      	mov	r3, r6
 8004c42:	4969      	ldr	r1, [pc, #420]	; (8004de8 <si446x_initialise+0x3c8>)
 8004c44:	2005      	movs	r0, #5
 8004c46:	f7ff fd4b 	bl	80046e0 <si446x_spi>
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8004c4a:	f857 0f14 	ldr.w	r0, [r7, #20]!
 8004c4e:	ab15      	add	r3, sp, #84	; 0x54
 8004c50:	88b9      	ldrh	r1, [r7, #4]
 8004c52:	79ba      	ldrb	r2, [r7, #6]
 8004c54:	9015      	str	r0, [sp, #84]	; 0x54
 8004c56:	f88d 205a 	strb.w	r2, [sp, #90]	; 0x5a
 8004c5a:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 8004c5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c62:	ea4f 4911 	mov.w	r9, r1, lsr #16
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004c66:	462a      	mov	r2, r5
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8004c68:	6020      	str	r0, [r4, #0]
 8004c6a:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004c6c:	4633      	mov	r3, r6
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8004c6e:	f884 9006 	strb.w	r9, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004c72:	4650      	mov	r0, sl
 8004c74:	495c      	ldr	r1, [pc, #368]	; (8004de8 <si446x_initialise+0x3c8>)
 8004c76:	f7ff fd33 	bl	80046e0 <si446x_spi>
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8004c7a:	f8df c180 	ldr.w	ip, [pc, #384]	; 8004dfc <si446x_initialise+0x3dc>
 8004c7e:	af1a      	add	r7, sp, #104	; 0x68
 8004c80:	f85c 0f1c 	ldr.w	r0, [ip, #28]!
 8004c84:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8004de8 <si446x_initialise+0x3c8>
 8004c88:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8004c8c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8004c90:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 8004c94:	c707      	stmia	r7!, {r0, r1, r2}
 8004c96:	f89c 000e 	ldrb.w	r0, [ip, #14]
 8004c9a:	f8a7 e000 	strh.w	lr, [r7]
 8004c9e:	70b8      	strb	r0, [r7, #2]
 8004ca0:	ab1a      	add	r3, sp, #104	; 0x68
 8004ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ca4:	e8a9 0007 	stmia.w	r9!, {r0, r1, r2}
 8004ca8:	ea4f 4713 	mov.w	r7, r3, lsr #16
 8004cac:	46cc      	mov	ip, r9
 8004cae:	4649      	mov	r1, r9
 8004cb0:	f821 390c 	strh.w	r3, [r1], #-12
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 8004cb4:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8004cb6:	f80c 7f02 	strb.w	r7, [ip, #2]!
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 8004cba:	4633      	mov	r3, r6
 8004cbc:	200f      	movs	r0, #15
 8004cbe:	f8cd c000 	str.w	ip, [sp]
 8004cc2:	f7ff fd0d 	bl	80046e0 <si446x_spi>
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8004cc6:	4b4d      	ldr	r3, [pc, #308]	; (8004dfc <si446x_initialise+0x3dc>)
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8004cc8:	af13      	add	r7, sp, #76	; 0x4c
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8004cca:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8004cdc:	f8dd e000 	ldr.w	lr, [sp]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	f1ae 010e 	sub.w	r1, lr, #14
 8004ce6:	4633      	mov	r3, r6
 8004ce8:	2010      	movs	r0, #16
 8004cea:	f7ff fcf9 	bl	80046e0 <si446x_spi>
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8004cee:	4a43      	ldr	r2, [pc, #268]	; (8004dfc <si446x_initialise+0x3dc>)
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8004cf0:	f1a9 080c 	sub.w	r8, r9, #12
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8004cf4:	f852 0f3c 	ldr.w	r0, [r2, #60]!
 8004cf8:	8891      	ldrh	r1, [r2, #4]
 8004cfa:	7993      	ldrb	r3, [r2, #6]
 8004cfc:	9013      	str	r0, [sp, #76]	; 0x4c
 8004cfe:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8004d02:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 8004d06:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004d0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004d0e:	f884 c006 	strb.w	ip, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004d12:	462a      	mov	r2, r5
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8004d14:	6020      	str	r0, [r4, #0]
 8004d16:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8004d18:	4633      	mov	r3, r6
 8004d1a:	f1a9 010c 	sub.w	r1, r9, #12
 8004d1e:	4650      	mov	r0, sl
 8004d20:	f7ff fcde 	bl	80046e0 <si446x_spi>
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8004d24:	4a35      	ldr	r2, [pc, #212]	; (8004dfc <si446x_initialise+0x3dc>)
 8004d26:	af0f      	add	r7, sp, #60	; 0x3c
 8004d28:	f852 0f44 	ldr.w	r0, [r2, #68]!
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004d2c:	4633      	mov	r3, r6
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8004d2e:	8891      	ldrh	r1, [r2, #4]
 8004d30:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d32:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8004d36:	e897 0003 	ldmia.w	r7, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004d3a:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8004d3c:	6020      	str	r0, [r4, #0]
 8004d3e:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004d40:	2006      	movs	r0, #6
 8004d42:	f1a9 010c 	sub.w	r1, r9, #12
 8004d46:	f7ff fccb 	bl	80046e0 <si446x_spi>
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <si446x_initialise+0x3dc>)
 8004d4c:	ab0d      	add	r3, sp, #52	; 0x34
 8004d4e:	f852 0f4c 	ldr.w	r0, [r2, #76]!
 8004d52:	8897      	ldrh	r7, [r2, #4]
 8004d54:	900d      	str	r0, [sp, #52]	; 0x34
 8004d56:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 8004d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004d5e:	462a      	mov	r2, r5
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8004d60:	6020      	str	r0, [r4, #0]
 8004d62:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004d64:	4633      	mov	r3, r6
 8004d66:	f1a9 010c 	sub.w	r1, r9, #12
 8004d6a:	2006      	movs	r0, #6
 8004d6c:	f7ff fcb8 	bl	80046e0 <si446x_spi>
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8004d70:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <si446x_initialise+0x3dc>)
 8004d72:	ab17      	add	r3, sp, #92	; 0x5c
 8004d74:	f852 0f54 	ldr.w	r0, [r2, #84]!
 8004d78:	6851      	ldr	r1, [r2, #4]
 8004d7a:	7a17      	ldrb	r7, [r2, #8]
 8004d7c:	c303      	stmia	r3!, {r0, r1}
 8004d7e:	a917      	add	r1, sp, #92	; 0x5c
 8004d80:	701f      	strb	r7, [r3, #0]
 8004d82:	c907      	ldmia	r1, {r0, r1, r2}
 8004d84:	e8a8 0003 	stmia.w	r8!, {r0, r1}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8004d88:	4633      	mov	r3, r6
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8004d8a:	f888 2000 	strb.w	r2, [r8]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8004d8e:	f1a9 010c 	sub.w	r1, r9, #12
 8004d92:	462a      	mov	r2, r5
 8004d94:	2009      	movs	r0, #9
 8004d96:	f7ff fca3 	bl	80046e0 <si446x_spi>
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <si446x_initialise+0x3dc>)
 8004d9c:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 8004da0:	f853 0f60 	ldr.w	r0, [r3, #96]!
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8004da4:	4f15      	ldr	r7, [pc, #84]	; (8004dfc <si446x_initialise+0x3dc>)
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	68db      	ldr	r3, [r3, #12]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8004dac:	f10d 0878 	add.w	r8, sp, #120	; 0x78
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8004db0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004db4:	9801      	ldr	r0, [sp, #4]
 8004db6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8004db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8004dbc:	f1a9 010c 	sub.w	r1, r9, #12
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	4633      	mov	r3, r6
 8004dc4:	2009      	movs	r0, #9
 8004dc6:	f7ff fc8b 	bl	80046e0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8004dca:	f857 0f70 	ldr.w	r0, [r7, #112]!
 8004dce:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8004dd8:	2720      	movs	r7, #32
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8004dda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8004de2:	f1a9 010c 	sub.w	r1, r9, #12
 8004de6:	e00d      	b.n	8004e04 <si446x_initialise+0x3e4>
 8004de8:	200017e0 	.word	0x200017e0
 8004dec:	20001844 	.word	0x20001844
 8004df0:	20000c54 	.word	0x20000c54
 8004df4:	20000814 	.word	0x20000814
 8004df8:	20000812 	.word	0x20000812
 8004dfc:	0800a410 	.word	0x0800a410
 8004e00:	20001700 	.word	0x20001700
 8004e04:	462a      	mov	r2, r5
 8004e06:	4633      	mov	r3, r6
 8004e08:	2009      	movs	r0, #9
 8004e0a:	f7ff fc69 	bl	80046e0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8004e0e:	4b58      	ldr	r3, [pc, #352]	; (8004f70 <si446x_initialise+0x550>)
 8004e10:	f853 0f80 	ldr.w	r0, [r3, #128]!
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8004e22:	f1a9 010c 	sub.w	r1, r9, #12
 8004e26:	462a      	mov	r2, r5
 8004e28:	4633      	mov	r3, r6
 8004e2a:	2009      	movs	r0, #9
 8004e2c:	f7ff fc58 	bl	80046e0 <si446x_spi>
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8004e30:	7067      	strb	r7, [r4, #1]
 8004e32:	2704      	movs	r7, #4
 8004e34:	70a7      	strb	r7, [r4, #2]
 8004e36:	f04f 073c 	mov.w	r7, #60	; 0x3c
 8004e3a:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
 8004e3e:	7127      	strb	r7, [r4, #4]
 8004e40:	f04f 0c12 	mov.w	ip, #18
 8004e44:	270c      	movs	r7, #12
 8004e46:	f04f 083e 	mov.w	r8, #62	; 0x3e
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8004e4a:	f1a9 010c 	sub.w	r1, r9, #12
 8004e4e:	462a      	mov	r2, r5
 8004e50:	4633      	mov	r3, r6
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8004e52:	f884 e003 	strb.w	lr, [r4, #3]
 8004e56:	7167      	strb	r7, [r4, #5]
 8004e58:	f884 c006 	strb.w	ip, [r4, #6]
 8004e5c:	f884 8007 	strb.w	r8, [r4, #7]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8004e60:	2008      	movs	r0, #8
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8004e62:	f884 b000 	strb.w	fp, [r4]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8004e66:	f7ff fc3b 	bl	80046e0 <si446x_spi>
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8004e6a:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8004e6e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8004e72:	70a7      	strb	r7, [r4, #2]
 8004e74:	f884 c004 	strb.w	ip, [r4, #4]
 8004e78:	f884 c007 	strb.w	ip, [r4, #7]
 8004e7c:	f04f 0830 	mov.w	r8, #48	; 0x30
 8004e80:	f04f 0742 	mov.w	r7, #66	; 0x42
 8004e84:	f04f 0c52 	mov.w	ip, #82	; 0x52
 8004e88:	f884 8001 	strb.w	r8, [r4, #1]
 8004e8c:	f884 e005 	strb.w	lr, [r4, #5]
 8004e90:	f884 e008 	strb.w	lr, [r4, #8]
 8004e94:	7267      	strb	r7, [r4, #9]
 8004e96:	f884 c00a 	strb.w	ip, [r4, #10]
 8004e9a:	f884 e00b 	strb.w	lr, [r4, #11]
 8004e9e:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8004ea2:	f884 e00e 	strb.w	lr, [r4, #14]
 8004ea6:	f04f 0841 	mov.w	r8, #65	; 0x41
 8004eaa:	f04f 0e44 	mov.w	lr, #68	; 0x44
 8004eae:	f04f 0743 	mov.w	r7, #67	; 0x43
 8004eb2:	f884 c00d 	strb.w	ip, [r4, #13]
 8004eb6:	f884 e00f 	strb.w	lr, [r4, #15]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8004eba:	f1a9 010c 	sub.w	r1, r9, #12
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4633      	mov	r3, r6
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8004ec2:	7327      	strb	r7, [r4, #12]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8004ec4:	2010      	movs	r0, #16
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8004ec6:	f884 b000 	strb.w	fp, [r4]
 8004eca:	70e5      	strb	r5, [r4, #3]
 8004ecc:	f884 8006 	strb.w	r8, [r4, #6]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8004ed0:	f7ff fc06 	bl	80046e0 <si446x_spi>
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8004ed4:	4a26      	ldr	r2, [pc, #152]	; (8004f70 <si446x_initialise+0x550>)
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8004ed6:	4f26      	ldr	r7, [pc, #152]	; (8004f70 <si446x_initialise+0x550>)
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8004ed8:	f852 1f90 	ldr.w	r1, [r2, #144]!
 8004edc:	a807      	add	r0, sp, #28
 8004ede:	7913      	ldrb	r3, [r2, #4]
 8004ee0:	9107      	str	r1, [sp, #28]
 8004ee2:	f88d 3020 	strb.w	r3, [sp, #32]
 8004ee6:	c803      	ldmia	r0, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004ee8:	462a      	mov	r2, r5
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	7121      	strb	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004eee:	4633      	mov	r3, r6
 8004ef0:	f1a9 010c 	sub.w	r1, r9, #12
 8004ef4:	2005      	movs	r0, #5
 8004ef6:	f7ff fbf3 	bl	80046e0 <si446x_spi>
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8004efa:	f857 1f98 	ldr.w	r1, [r7, #152]!
 8004efe:	a805      	add	r0, sp, #20
 8004f00:	793a      	ldrb	r2, [r7, #4]
 8004f02:	9105      	str	r1, [sp, #20]
 8004f04:	f88d 2018 	strb.w	r2, [sp, #24]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
 8004f08:	4f19      	ldr	r7, [pc, #100]	; (8004f70 <si446x_initialise+0x550>)
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8004f0a:	c803      	ldmia	r0, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004f0c:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8004f0e:	6020      	str	r0, [r4, #0]
 8004f10:	7121      	strb	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004f12:	4633      	mov	r3, r6
 8004f14:	f1a9 010c 	sub.w	r1, r9, #12
 8004f18:	2005      	movs	r0, #5
 8004f1a:	f7ff fbe1 	bl	80046e0 <si446x_spi>
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
 8004f1e:	f857 1fa0 	ldr.w	r1, [r7, #160]!
 8004f22:	ab03      	add	r3, sp, #12
 8004f24:	7938      	ldrb	r0, [r7, #4]
 8004f26:	9103      	str	r1, [sp, #12]
 8004f28:	f88d 0010 	strb.w	r0, [sp, #16]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8004f2c:	4f10      	ldr	r7, [pc, #64]	; (8004f70 <si446x_initialise+0x550>)
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
 8004f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004f32:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
 8004f34:	6020      	str	r0, [r4, #0]
 8004f36:	7121      	strb	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8004f38:	4633      	mov	r3, r6
 8004f3a:	f1a9 010c 	sub.w	r1, r9, #12
 8004f3e:	2005      	movs	r0, #5
 8004f40:	f7ff fbce 	bl	80046e0 <si446x_spi>
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8004f44:	f857 1fa8 	ldr.w	r1, [r7, #168]!
 8004f48:	ab0b      	add	r3, sp, #44	; 0x2c
 8004f4a:	88ba      	ldrh	r2, [r7, #4]
 8004f4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f4e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8004f52:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004f56:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8004f58:	6020      	str	r0, [r4, #0]
 8004f5a:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8004f5c:	4633      	mov	r3, r6
 8004f5e:	f1a9 010c 	sub.w	r1, r9, #12
 8004f62:	2006      	movs	r0, #6
 8004f64:	f7ff fbbc 	bl	80046e0 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
	//Setup default channel config
	si446x_set_deviation_channel_bps(DEVIATION, CHANNEL_SPACING, BPS);
	si446x_set_modem();
}
 8004f68:	b02f      	add	sp, #188	; 0xbc
 8004f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6e:	bf00      	nop
 8004f70:	0800a410 	.word	0x0800a410
 8004f74:	f3af 8000 	nop.w
 8004f78:	f3af 8000 	nop.w
 8004f7c:	f3af 8000 	nop.w

08004f80 <chMBPost.constprop.30>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4605      	mov	r5, r0
 8004f84:	2320      	movs	r3, #32
 8004f86:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8004f8a:	480c      	ldr	r0, [pc, #48]	; (8004fbc <chMBPost.constprop.30+0x3c>)
 8004f8c:	f000 fd40 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8004f90:	4604      	mov	r4, r0
 8004f92:	b970      	cbnz	r0, 8004fb2 <chMBPost.constprop.30+0x32>
    *mbp->mb_wrptr++ = msg;
 8004f94:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <chMBPost.constprop.30+0x40>)
 8004f96:	6882      	ldr	r2, [r0, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8004f98:	6841      	ldr	r1, [r0, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8004f9a:	f842 5b04 	str.w	r5, [r2], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8004f9e:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8004fa0:	6082      	str	r2, [r0, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8004fa2:	bf24      	itt	cs
 8004fa4:	6802      	ldrcs	r2, [r0, #0]
 8004fa6:	6082      	strcs	r2, [r0, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8004fa8:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <chMBPost.constprop.30+0x44>)
 8004faa:	f7fd fe29 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8004fae:	f7fc fdff 	bl	8001bb0 <chSchRescheduleS>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8004fb8:	4620      	mov	r0, r4
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20000cfc 	.word	0x20000cfc
 8004fc0:	20000ce0 	.word	0x20000ce0
 8004fc4:	20000cf0 	.word	0x20000cf0
 8004fc8:	f3af 8000 	nop.w
 8004fcc:	f3af 8000 	nop.w

08004fd0 <mtx7_setup.7285>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8004fd0:	f640 0220 	movw	r2, #2080	; 0x820
 8004fd4:	f640 0300 	movw	r3, #2048	; 0x800
 8004fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004fdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	6052      	str	r2, [r2, #4]
 8004fe4:	6012      	str	r2, [r2, #0]
 8004fe6:	605b      	str	r3, [r3, #4]
 8004fe8:	601b      	str	r3, [r3, #0]
 8004fea:	6098      	str	r0, [r3, #8]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop

08004ff0 <mtx6_setup.7287>:
 8004ff0:	f640 0220 	movw	r2, #2080	; 0x820
 8004ff4:	f640 0300 	movw	r3, #2048	; 0x800
 8004ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ffc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005000:	2000      	movs	r0, #0
 8005002:	6052      	str	r2, [r2, #4]
 8005004:	6012      	str	r2, [r2, #0]
 8005006:	605b      	str	r3, [r3, #4]
 8005008:	601b      	str	r3, [r3, #0]
 800500a:	6098      	str	r0, [r3, #8]
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <mtx5_setup.7289>:
 8005010:	f640 0300 	movw	r3, #2048	; 0x800
 8005014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005018:	2200      	movs	r2, #0
 800501a:	605b      	str	r3, [r3, #4]
 800501c:	601b      	str	r3, [r3, #0]
 800501e:	609a      	str	r2, [r3, #8]
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	f3af 8000 	nop.w
 8005028:	f3af 8000 	nop.w
 800502c:	f3af 8000 	nop.w

08005030 <mtx4_setup.7291>:
 8005030:	f640 0200 	movw	r2, #2048	; 0x800
 8005034:	f640 4338 	movw	r3, #3128	; 0xc38
 8005038:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800503c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005040:	2100      	movs	r1, #0
 8005042:	6052      	str	r2, [r2, #4]
 8005044:	6012      	str	r2, [r2, #0]
 8005046:	6091      	str	r1, [r2, #8]
 8005048:	605b      	str	r3, [r3, #4]
 800504a:	601b      	str	r3, [r3, #0]
 800504c:	6099      	str	r1, [r3, #8]
 800504e:	4770      	bx	lr

08005050 <mtx1_setup.7293>:
 8005050:	f640 0300 	movw	r3, #2048	; 0x800
 8005054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005058:	2200      	movs	r2, #0
 800505a:	605b      	str	r3, [r3, #4]
 800505c:	601b      	str	r3, [r3, #0]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	f3af 8000 	nop.w
 8005068:	f3af 8000 	nop.w
 800506c:	f3af 8000 	nop.w

08005070 <bmk12_setup.8464>:
 8005070:	f241 73a8 	movw	r3, #6056	; 0x17a8
 8005074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005078:	2200      	movs	r2, #0
 800507a:	605b      	str	r3, [r3, #4]
 800507c:	601b      	str	r3, [r3, #0]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	f3af 8000 	nop.w
 8005088:	f3af 8000 	nop.w
 800508c:	f3af 8000 	nop.w

08005090 <queues2_setup.8259>:
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8005090:	f641 0250 	movw	r2, #6224	; 0x1850
 8005094:	f640 4398 	movw	r3, #3224	; 0xc98
 8005098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800509c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  oqp->q_top = bp + size;
 80050a0:	1d11      	adds	r1, r2, #4
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80050a2:	615a      	str	r2, [r3, #20]
 80050a4:	619a      	str	r2, [r3, #24]
 80050a6:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80050a8:	f645 5251 	movw	r2, #23889	; 0x5d51
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80050ac:	2004      	movs	r0, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80050ae:	6119      	str	r1, [r3, #16]
  oqp->q_notify = onfy;
 80050b0:	f6c0 0200 	movt	r2, #2048	; 0x800
  oqp->q_link = link;
 80050b4:	2100      	movs	r1, #0
 80050b6:	605b      	str	r3, [r3, #4]
 80050b8:	601b      	str	r3, [r3, #0]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80050ba:	6098      	str	r0, [r3, #8]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80050bc:	61da      	str	r2, [r3, #28]
  oqp->q_link = link;
 80050be:	6219      	str	r1, [r3, #32]
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	f3af 8000 	nop.w
 80050c8:	f3af 8000 	nop.w
 80050cc:	f3af 8000 	nop.w

080050d0 <spi_lld_serve_tx_interrupt.9951>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80050d0:	070b      	lsls	r3, r1, #28
 80050d2:	d400      	bmi.n	80050d6 <spi_lld_serve_tx_interrupt.9951+0x6>
 80050d4:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050d6:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80050d8:	4a01      	ldr	r2, [pc, #4]	; (80050e0 <spi_lld_serve_tx_interrupt.9951+0x10>)
 80050da:	4b02      	ldr	r3, [pc, #8]	; (80050e4 <spi_lld_serve_tx_interrupt.9951+0x14>)
 80050dc:	629a      	str	r2, [r3, #40]	; 0x28
 80050de:	e7fe      	b.n	80050de <spi_lld_serve_tx_interrupt.9951+0xe>
 80050e0:	0800a9a0 	.word	0x0800a9a0
 80050e4:	20001ec0 	.word	0x20001ec0
 80050e8:	f3af 8000 	nop.w
 80050ec:	f3af 8000 	nop.w

080050f0 <queues1_setup.8264>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80050f0:	f641 0250 	movw	r2, #6224	; 0x1850
 80050f4:	f640 43bc 	movw	r3, #3260	; 0xcbc
 80050f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  iqp->q_top = bp + size;
 8005100:	1d10      	adds	r0, r2, #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8005102:	615a      	str	r2, [r3, #20]
 8005104:	619a      	str	r2, [r3, #24]
 8005106:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8005108:	f645 5251 	movw	r2, #23889	; 0x5d51
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800510c:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 800510e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005112:	605b      	str	r3, [r3, #4]
 8005114:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8005116:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8005118:	6118      	str	r0, [r3, #16]
  iqp->q_notify = infy;
 800511a:	61da      	str	r2, [r3, #28]
  iqp->q_link = link;
 800511c:	6219      	str	r1, [r3, #32]
 800511e:	4770      	bx	lr

08005120 <mbox1_setup.7601>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 8005120:	f640 43e0 	movw	r3, #3296	; 0xce0
 8005124:	f641 0250 	movw	r2, #6224	; 0x1850
 8005128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800512c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8005130:	b410      	push	{r4}
 8005132:	f103 001c 	add.w	r0, r3, #28
  mbp->mb_top = &buf[n];
 8005136:	f102 0414 	add.w	r4, r2, #20
 800513a:	f103 0110 	add.w	r1, r3, #16
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	609a      	str	r2, [r3, #8]
  mbp->mb_top = &buf[n];
 8005142:	e883 0014 	stmia.w	r3, {r2, r4}
 8005146:	6218      	str	r0, [r3, #32]
 8005148:	61d8      	str	r0, [r3, #28]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 800514a:	2205      	movs	r2, #5
 800514c:	2000      	movs	r0, #0
 800514e:	625a      	str	r2, [r3, #36]	; 0x24
 8005150:	6159      	str	r1, [r3, #20]
 8005152:	6119      	str	r1, [r3, #16]
 8005154:	6198      	str	r0, [r3, #24]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 8005156:	bc10      	pop	{r4}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w

08005160 <sem3_setup.7070>:
 8005160:	f640 4348 	movw	r3, #3144	; 0xc48
 8005164:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005168:	2200      	movs	r2, #0
 800516a:	605b      	str	r3, [r3, #4]
 800516c:	601b      	str	r3, [r3, #0]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	f3af 8000 	nop.w
 8005178:	f3af 8000 	nop.w
 800517c:	f3af 8000 	nop.w

08005180 <sem2_setup.7072>:
 8005180:	f640 4348 	movw	r3, #3144	; 0xc48
 8005184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005188:	2200      	movs	r2, #0
 800518a:	605b      	str	r3, [r3, #4]
 800518c:	601b      	str	r3, [r3, #0]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	f3af 8000 	nop.w
 8005198:	f3af 8000 	nop.w
 800519c:	f3af 8000 	nop.w

080051a0 <sem1_setup.7074>:
 80051a0:	f640 4348 	movw	r3, #3144	; 0xc48
 80051a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051a8:	2200      	movs	r2, #0
 80051aa:	605b      	str	r3, [r3, #4]
 80051ac:	601b      	str	r3, [r3, #0]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	f3af 8000 	nop.w
 80051b8:	f3af 8000 	nop.w
 80051bc:	f3af 8000 	nop.w

080051c0 <bmk11_setup.8468>:
 80051c0:	f241 739c 	movw	r3, #6044	; 0x179c
 80051c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051c8:	2201      	movs	r2, #1
 80051ca:	605b      	str	r3, [r3, #4]
 80051cc:	601b      	str	r3, [r3, #0]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	f3af 8000 	nop.w
 80051d8:	f3af 8000 	nop.w
 80051dc:	f3af 8000 	nop.w

080051e0 <bmk7_setup.8470>:
 80051e0:	f241 739c 	movw	r3, #6044	; 0x179c
 80051e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051e8:	2200      	movs	r2, #0
 80051ea:	605b      	str	r3, [r3, #4]
 80051ec:	601b      	str	r3, [r3, #0]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	f3af 8000 	nop.w
 80051f8:	f3af 8000 	nop.w
 80051fc:	f3af 8000 	nop.w

08005200 <dyn2_setup.8092>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005200:	f241 7348 	movw	r3, #5960	; 0x1748
 8005204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005208:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 800520a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800520e:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 8005210:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	f3af 8000 	nop.w
 800521c:	f3af 8000 	nop.w

08005220 <pools1_setup.7960>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005220:	f640 0328 	movw	r3, #2088	; 0x828
 8005224:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005228:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 800522a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800522e:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 8005230:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	f3af 8000 	nop.w
 800523c:	f3af 8000 	nop.w

08005240 <spi_lld_serve_rx_interrupt.9955>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005240:	070a      	lsls	r2, r1, #28
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8005242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005244:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005246:	d431      	bmi.n	80052ac <spi_lld_serve_rx_interrupt.9955+0x6c>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8005248:	6a42      	ldr	r2, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 800524a:	6a03      	ldr	r3, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800524c:	6815      	ldr	r5, [r2, #0]
 800524e:	6856      	ldr	r6, [r2, #4]
 8005250:	682f      	ldr	r7, [r5, #0]
 8005252:	210f      	movs	r1, #15
 8005254:	f027 070f 	bic.w	r7, r7, #15
 8005258:	602f      	str	r7, [r5, #0]
 800525a:	7a15      	ldrb	r5, [r2, #8]
  dmaStreamDisable(spip->dmarx);
 800525c:	681a      	ldr	r2, [r3, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800525e:	fa01 f505 	lsl.w	r5, r1, r5
 8005262:	6035      	str	r5, [r6, #0]
  dmaStreamDisable(spip->dmarx);
 8005264:	6816      	ldr	r6, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8005266:	6845      	ldr	r5, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8005268:	f026 060f 	bic.w	r6, r6, #15
 800526c:	6016      	str	r6, [r2, #0]
 800526e:	7a1e      	ldrb	r6, [r3, #8]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	fa01 f106 	lsl.w	r1, r1, r6

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8005276:	682b      	ldr	r3, [r5, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8005278:	6011      	str	r1, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800527a:	b1a3      	cbz	r3, 80052a6 <spi_lld_serve_rx_interrupt.9955+0x66>
 800527c:	2104      	movs	r1, #4
 800527e:	7001      	strb	r1, [r0, #0]
 8005280:	4798      	blx	r3
 8005282:	7820      	ldrb	r0, [r4, #0]
 8005284:	2804      	cmp	r0, #4
 8005286:	d00e      	beq.n	80052a6 <spi_lld_serve_rx_interrupt.9955+0x66>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8005288:	2320      	movs	r3, #32
 800528a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800528e:	68a1      	ldr	r1, [r4, #8]
 8005290:	b129      	cbz	r1, 800529e <spi_lld_serve_rx_interrupt.9955+0x5e>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8005292:	2200      	movs	r2, #0
 8005294:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    chSchReadyI(tp);
 8005296:	4608      	mov	r0, r1

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8005298:	620a      	str	r2, [r1, #32]
    chSchReadyI(tp);
 800529a:	f7fc feb9 	bl	8002010 <chSchReadyI>
 800529e:	2000      	movs	r0, #0
 80052a0:	f380 8811 	msr	BASEPRI, r0
 80052a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a6:	2202      	movs	r2, #2
 80052a8:	7022      	strb	r2, [r4, #0]
 80052aa:	e7ed      	b.n	8005288 <spi_lld_serve_rx_interrupt.9955+0x48>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ac:	b672      	cpsid	i
 80052ae:	4c02      	ldr	r4, [pc, #8]	; (80052b8 <spi_lld_serve_rx_interrupt.9955+0x78>)
 80052b0:	4f02      	ldr	r7, [pc, #8]	; (80052bc <spi_lld_serve_rx_interrupt.9955+0x7c>)
 80052b2:	62bc      	str	r4, [r7, #40]	; 0x28
 80052b4:	e7fe      	b.n	80052b4 <spi_lld_serve_rx_interrupt.9955+0x74>
 80052b6:	bf00      	nop
 80052b8:	0800a9a0 	.word	0x0800a9a0
 80052bc:	20001ec0 	.word	0x20001ec0

080052c0 <sem1_execute.7091>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 80052c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	4e4f      	ldr	r6, [pc, #316]	; (8005404 <sem1_execute.7091+0x144>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80052c6:	4f50      	ldr	r7, [pc, #320]	; (8005408 <sem1_execute.7091+0x148>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80052c8:	69b3      	ldr	r3, [r6, #24]
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 80052ca:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052d2:	4b4e      	ldr	r3, [pc, #312]	; (800540c <sem1_execute.7091+0x14c>)
 80052d4:	3205      	adds	r2, #5
 80052d6:	9700      	str	r7, [sp, #0]
 80052d8:	484d      	ldr	r0, [pc, #308]	; (8005410 <sem1_execute.7091+0x150>)
 80052da:	f7fc fdb1 	bl	8001e40 <chThdCreateStatic>
 80052de:	4d4d      	ldr	r5, [pc, #308]	; (8005414 <sem1_execute.7091+0x154>)
 80052e0:	69b1      	ldr	r1, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80052e2:	4b4a      	ldr	r3, [pc, #296]	; (800540c <sem1_execute.7091+0x14c>)
 80052e4:	688c      	ldr	r4, [r1, #8]
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80052e6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80052e8:	484b      	ldr	r0, [pc, #300]	; (8005418 <sem1_execute.7091+0x158>)
 80052ea:	1c62      	adds	r2, r4, #1
 80052ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80052f0:	9000      	str	r0, [sp, #0]
 80052f2:	484a      	ldr	r0, [pc, #296]	; (800541c <sem1_execute.7091+0x15c>)
 80052f4:	f7fc fda4 	bl	8001e40 <chThdCreateStatic>
 80052f8:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 80052fa:	4c49      	ldr	r4, [pc, #292]	; (8005420 <sem1_execute.7091+0x160>)
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005302:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005304:	3203      	adds	r2, #3
 8005306:	4b41      	ldr	r3, [pc, #260]	; (800540c <sem1_execute.7091+0x14c>)
 8005308:	9400      	str	r4, [sp, #0]
 800530a:	4846      	ldr	r0, [pc, #280]	; (8005424 <sem1_execute.7091+0x164>)
 800530c:	f7fc fd98 	bl	8001e40 <chThdCreateStatic>
 8005310:	69b1      	ldr	r1, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005312:	688b      	ldr	r3, [r1, #8]

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005314:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005316:	4844      	ldr	r0, [pc, #272]	; (8005428 <sem1_execute.7091+0x168>)
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800531e:	4b3b      	ldr	r3, [pc, #236]	; (800540c <sem1_execute.7091+0x14c>)
 8005320:	9000      	str	r0, [sp, #0]
 8005322:	4842      	ldr	r0, [pc, #264]	; (800542c <sem1_execute.7091+0x16c>)
 8005324:	f7fc fd8c 	bl	8001e40 <chThdCreateStatic>
 8005328:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800532a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800532e:	6894      	ldr	r4, [r2, #8]
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005330:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005332:	483f      	ldr	r0, [pc, #252]	; (8005430 <sem1_execute.7091+0x170>)
 8005334:	1ca2      	adds	r2, r4, #2
 8005336:	4b35      	ldr	r3, [pc, #212]	; (800540c <sem1_execute.7091+0x14c>)
 8005338:	9000      	str	r0, [sp, #0]
 800533a:	483e      	ldr	r0, [pc, #248]	; (8005434 <sem1_execute.7091+0x174>)
 800533c:	f7fc fd80 	bl	8001e40 <chThdCreateStatic>
  chSemSignal(&sem1);
 8005340:	4c3d      	ldr	r4, [pc, #244]	; (8005438 <sem1_execute.7091+0x178>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005342:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8005344:	4620      	mov	r0, r4
 8005346:	f7fc fd63 	bl	8001e10 <chSemSignal>
  chSemSignal(&sem1);
 800534a:	4620      	mov	r0, r4
 800534c:	f7fc fd60 	bl	8001e10 <chSemSignal>
  chSemSignal(&sem1);
 8005350:	4620      	mov	r0, r4
 8005352:	f7fc fd5d 	bl	8001e10 <chSemSignal>
  chSemSignal(&sem1);
 8005356:	4620      	mov	r0, r4
 8005358:	f7fc fd5a 	bl	8001e10 <chSemSignal>
  chSemSignal(&sem1);
 800535c:	4620      	mov	r0, r4
 800535e:	f7fc fd57 	bl	8001e10 <chSemSignal>
  test_wait_threads();
 8005362:	f7fd f87d 	bl	8002460 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8005366:	2001      	movs	r0, #1
 8005368:	4934      	ldr	r1, [pc, #208]	; (800543c <sem1_execute.7091+0x17c>)
 800536a:	f7fc fa49 	bl	8001800 <_test_assert_sequence>
 800536e:	4680      	mov	r8, r0
 8005370:	b110      	cbz	r0, 8005378 <sem1_execute.7091+0xb8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8005372:	b002      	add	sp, #8
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005378:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800537a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	4823      	ldr	r0, [pc, #140]	; (8005410 <sem1_execute.7091+0x150>)
 8005382:	4b22      	ldr	r3, [pc, #136]	; (800540c <sem1_execute.7091+0x14c>)
 8005384:	9700      	str	r7, [sp, #0]
 8005386:	3205      	adds	r2, #5
 8005388:	f7fc fd5a 	bl	8001e40 <chThdCreateStatic>
 800538c:	6028      	str	r0, [r5, #0]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800538e:	2520      	movs	r5, #32
 8005390:	f385 8811 	msr	BASEPRI, r5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0)
 8005394:	68a1      	ldr	r1, [r4, #8]
 8005396:	1c48      	adds	r0, r1, #1
 8005398:	2800      	cmp	r0, #0
 800539a:	60a0      	str	r0, [r4, #8]
 800539c:	dd29      	ble.n	80053f2 <sem1_execute.7091+0x132>
 800539e:	68a5      	ldr	r5, [r4, #8]
 80053a0:	4a25      	ldr	r2, [pc, #148]	; (8005438 <sem1_execute.7091+0x178>)
 80053a2:	1c69      	adds	r1, r5, #1
 80053a4:	2900      	cmp	r1, #0
 80053a6:	60a1      	str	r1, [r4, #8]
 80053a8:	dd1a      	ble.n	80053e0 <sem1_execute.7091+0x120>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 80053aa:	f7fc fc01 	bl	8001bb0 <chSchRescheduleS>
 80053ae:	2500      	movs	r5, #0
 80053b0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 80053b4:	f7fd f854 	bl	8002460 <test_wait_threads>
 80053b8:	2020      	movs	r0, #32
 80053ba:	f380 8811 	msr	BASEPRI, r0
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 80053be:	68a2      	ldr	r2, [r4, #8]
 80053c0:	2002      	movs	r0, #2
 80053c2:	f1b2 0e01 	subs.w	lr, r2, #1
 80053c6:	f1de 0100 	rsbs	r1, lr, #0
 80053ca:	eb51 010e 	adcs.w	r1, r1, lr
 80053ce:	f7fc fa5f 	bl	8001890 <_test_assert>
 80053d2:	b910      	cbnz	r0, 80053da <sem1_execute.7091+0x11a>
 80053d4:	f380 8811 	msr	BASEPRI, r0
 80053d8:	e7cb      	b.n	8005372 <sem1_execute.7091+0xb2>
 80053da:	f385 8811 	msr	BASEPRI, r5
 80053de:	e7c8      	b.n	8005372 <sem1_execute.7091+0xb2>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80053e0:	6810      	ldr	r0, [r2, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 80053e2:	2500      	movs	r5, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80053e4:	6803      	ldr	r3, [r0, #0]
 80053e6:	605a      	str	r2, [r3, #4]
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	f7fc fe11 	bl	8002010 <chSchReadyI>
 80053ee:	6205      	str	r5, [r0, #32]
 80053f0:	e7db      	b.n	80053aa <sem1_execute.7091+0xea>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80053f2:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80053f4:	6803      	ldr	r3, [r0, #0]
 80053f6:	605c      	str	r4, [r3, #4]
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	f7fc fe09 	bl	8002010 <chSchReadyI>
 80053fe:	f8c0 8020 	str.w	r8, [r0, #32]
 8005402:	e7cc      	b.n	800539e <sem1_execute.7091+0xde>
 8005404:	20001ec0 	.word	0x20001ec0
 8005408:	0800a4d0 	.word	0x0800a4d0
 800540c:	08001f71 	.word	0x08001f71
 8005410:	20001850 	.word	0x20001850
 8005414:	20002010 	.word	0x20002010
 8005418:	0800a4cc 	.word	0x0800a4cc
 800541c:	20001998 	.word	0x20001998
 8005420:	0800a4c8 	.word	0x0800a4c8
 8005424:	20001ae0 	.word	0x20001ae0
 8005428:	0800a85c 	.word	0x0800a85c
 800542c:	20001c28 	.word	0x20001c28
 8005430:	0800a4d8 	.word	0x0800a4d8
 8005434:	20001d70 	.word	0x20001d70
 8005438:	20000c48 	.word	0x20000c48
 800543c:	0800a4d4 	.word	0x0800a4d4

08005440 <sem3_execute.7095>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8005440:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005442:	4b1f      	ldr	r3, [pc, #124]	; (80054c0 <sem3_execute.7095+0x80>)
 8005444:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005446:	6998      	ldr	r0, [r3, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005448:	2400      	movs	r4, #0
 800544a:	6882      	ldr	r2, [r0, #8]
 800544c:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <sem3_execute.7095+0x84>)
 800544e:	3201      	adds	r2, #1
 8005450:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005454:	9400      	str	r4, [sp, #0]
 8005456:	481c      	ldr	r0, [pc, #112]	; (80054c8 <sem3_execute.7095+0x88>)
 8005458:	f7fc fcf2 	bl	8001e40 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 800545c:	4c1b      	ldr	r4, [pc, #108]	; (80054cc <sem3_execute.7095+0x8c>)
 800545e:	491c      	ldr	r1, [pc, #112]	; (80054d0 <sem3_execute.7095+0x90>)
 8005460:	6008      	str	r0, [r1, #0]
  chSemSignalWait(&sem1, &sem1);
 8005462:	f000 ffc5 	bl	80063f0 <chSemSignalWait.constprop.52>
 8005466:	6823      	ldr	r3, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8005468:	2001      	movs	r0, #1
 800546a:	1b1a      	subs	r2, r3, r4
 800546c:	4251      	negs	r1, r2
 800546e:	4151      	adcs	r1, r2
 8005470:	f7fc fa0e 	bl	8001890 <_test_assert>
 8005474:	b108      	cbz	r0, 800547a <sem3_execute.7095+0x3a>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8005476:	b002      	add	sp, #8
 8005478:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	2002      	movs	r0, #2
 800547e:	f1d3 0101 	rsbs	r1, r3, #1
 8005482:	bf38      	it	cc
 8005484:	2100      	movcc	r1, #0
 8005486:	f7fc fa03 	bl	8001890 <_test_assert>
 800548a:	2800      	cmp	r0, #0
 800548c:	d1f3      	bne.n	8005476 <sem3_execute.7095+0x36>

  chSemSignalWait(&sem1, &sem1);
 800548e:	f000 ffaf 	bl	80063f0 <chSemSignalWait.constprop.52>
 8005492:	6822      	ldr	r2, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8005494:	2003      	movs	r0, #3
 8005496:	ebb2 0c04 	subs.w	ip, r2, r4
 800549a:	f1dc 0100 	rsbs	r1, ip, #0
 800549e:	eb51 010c 	adcs.w	r1, r1, ip
 80054a2:	f7fc f9f5 	bl	8001890 <_test_assert>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1e5      	bne.n	8005476 <sem3_execute.7095+0x36>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	2004      	movs	r0, #4
 80054ae:	f1d3 0101 	rsbs	r1, r3, #1
 80054b2:	bf38      	it	cc
 80054b4:	2100      	movcc	r1, #0
}
 80054b6:	b002      	add	sp, #8
 80054b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80054bc:	f7fc b9e8 	b.w	8001890 <_test_assert>
 80054c0:	20001ec0 	.word	0x20001ec0
 80054c4:	08001f91 	.word	0x08001f91
 80054c8:	20001850 	.word	0x20001850
 80054cc:	20000c48 	.word	0x20000c48
 80054d0:	20002010 	.word	0x20002010
 80054d4:	f3af 8000 	nop.w
 80054d8:	f3af 8000 	nop.w
 80054dc:	f3af 8000 	nop.w

080054e0 <gpt_lld_start>:
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 80054e0:	7803      	ldrb	r3, [r0, #0]
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
 80054e2:	b430      	push	{r4, r5}
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d013      	beq.n	8005510 <gpt_lld_start+0x30>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80054e8:	6842      	ldr	r2, [r0, #4]
 80054ea:	6881      	ldr	r1, [r0, #8]
 80054ec:	6814      	ldr	r4, [r2, #0]
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80054ee:	68d5      	ldr	r5, [r2, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80054f0:	fbb1 f1f4 	udiv	r1, r1, r4
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80054f4:	68c3      	ldr	r3, [r0, #12]
  gptp->tim->CR2  = gptp->config->cr2;
 80054f6:	6894      	ldr	r4, [r2, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80054f8:	1e48      	subs	r0, r1, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80054fa:	2200      	movs	r2, #0
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80054fc:	b281      	uxth	r1, r0
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80054fe:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8005502:	601a      	str	r2, [r3, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8005504:	605c      	str	r4, [r3, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8005506:	6299      	str	r1, [r3, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 8005508:	611a      	str	r2, [r3, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 800550a:	60d8      	str	r0, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
}
 800550c:	bc30      	pop	{r4, r5}
 800550e:	4770      	bx	lr
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 8005510:	4922      	ldr	r1, [pc, #136]	; (800559c <gpt_lld_start+0xbc>)
 8005512:	4288      	cmp	r0, r1
 8005514:	d022      	beq.n	800555c <gpt_lld_start+0x7c>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 8005516:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <gpt_lld_start+0xc0>)
 8005518:	4290      	cmp	r0, r2
 800551a:	d1e5      	bne.n	80054e8 <gpt_lld_start+0x8>
      rccEnableTIM4(FALSE);
 800551c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005524:	69dc      	ldr	r4, [r3, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8005526:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800552a:	f044 0504 	orr.w	r5, r4, #4
 800552e:	61dd      	str	r5, [r3, #28]
      rccResetTIM4();
 8005530:	691d      	ldr	r5, [r3, #16]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005532:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 8005536:	f045 0504 	orr.w	r5, r5, #4
 800553a:	611d      	str	r5, [r3, #16]
 800553c:	2500      	movs	r5, #0
 800553e:	611d      	str	r5, [r3, #16]
 8005540:	f2ce 0200 	movt	r2, #57344	; 0xe000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005544:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005548:	f2c0 21dc 	movt	r1, #732	; 0x2dc
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800554c:	2370      	movs	r3, #112	; 0x70
 800554e:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005552:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8005556:	6014      	str	r4, [r2, #0]
 8005558:	6081      	str	r1, [r0, #8]
 800555a:	e7c5      	b.n	80054e8 <gpt_lld_start+0x8>
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 800555c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005560:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005564:	69d9      	ldr	r1, [r3, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8005566:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800556a:	f041 0402 	orr.w	r4, r1, #2
 800556e:	61dc      	str	r4, [r3, #28]
      rccResetTIM3();
 8005570:	691d      	ldr	r5, [r3, #16]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005572:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
      rccResetTIM3();
 8005576:	f045 0502 	orr.w	r5, r5, #2
 800557a:	611d      	str	r5, [r3, #16]
 800557c:	2500      	movs	r5, #0
 800557e:	611d      	str	r5, [r3, #16]
 8005580:	f2ce 0200 	movt	r2, #57344	; 0xe000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005584:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005588:	f2c0 21dc 	movt	r1, #732	; 0x2dc
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800558c:	2370      	movs	r3, #112	; 0x70
 800558e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005592:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8005596:	6014      	str	r4, [r2, #0]
 8005598:	6081      	str	r1, [r0, #8]
 800559a:	e7a5      	b.n	80054e8 <gpt_lld_start+0x8>
 800559c:	20001820 	.word	0x20001820
 80055a0:	20001830 	.word	0x20001830
 80055a4:	f3af 8000 	nop.w
 80055a8:	f3af 8000 	nop.w
 80055ac:	f3af 8000 	nop.w

080055b0 <chVTDoResetI>:
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 80055b0:	4915      	ldr	r1, [pc, #84]	; (8005608 <chVTDoResetI+0x58>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80055b2:	b4f0      	push	{r4, r5, r6, r7}
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 80055b4:	e890 0014 	ldmia.w	r0, {r2, r4}
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 80055b8:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80055bc:	8916      	ldrh	r6, [r2, #8]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80055be:	460b      	mov	r3, r1
 80055c0:	f853 5f1c 	ldr.w	r5, [r3, #28]!
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 80055c4:	6022      	str	r2, [r4, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 80055c6:	6807      	ldr	r7, [r0, #0]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 80055c8:	44b4      	add	ip, r6
 80055ca:	f8a2 c008 	strh.w	ip, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 80055ce:	2600      	movs	r6, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 80055d0:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80055d4:	429d      	cmp	r5, r3
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 80055d6:	607c      	str	r4, [r7, #4]
  vtp->vt_func = (vtfunc_t)NULL;
 80055d8:	60c6      	str	r6, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 80055da:	848a      	strh	r2, [r1, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80055dc:	d010      	beq.n	8005600 <chVTDoResetI+0x50>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 80055de:	8928      	ldrh	r0, [r5, #8]
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 80055e0:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 80055e2:	2801      	cmp	r0, #1
 80055e4:	d906      	bls.n	80055f4 <chVTDoResetI+0x44>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 80055e6:	1841      	adds	r1, r0, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80055e8:	b28b      	uxth	r3, r1
 80055ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055ee:	6353      	str	r3, [r2, #52]	; 0x34
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80055f0:	bcf0      	pop	{r4, r5, r6, r7}
 80055f2:	4770      	bx	lr
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      else
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 80055f4:	1c8b      	adds	r3, r1, #2
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80055fc:	6342      	str	r2, [r0, #52]	; 0x34
 80055fe:	e7f7      	b.n	80055f0 <chVTDoResetI+0x40>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8005600:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005604:	60c6      	str	r6, [r0, #12]
 8005606:	e7f3      	b.n	80055f0 <chVTDoResetI+0x40>
 8005608:	20001ec0 	.word	0x20001ec0
 800560c:	f3af 8000 	nop.w

08005610 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8005610:	b4f0      	push	{r4, r5, r6, r7}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8005612:	4d1f      	ldr	r5, [pc, #124]	; (8005690 <chVTDoSetI+0x80>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005614:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8005618:	462e      	mov	r6, r5
 800561a:	f856 4f1c 	ldr.w	r4, [r6, #28]!
 800561e:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;
 8005622:	2901      	cmp	r1, #1
 8005624:	bf98      	it	ls
 8005626:	2102      	movls	r1, #2

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8005628:	42b4      	cmp	r4, r6
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 800562a:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 800562c:	60c2      	str	r2, [r0, #12]
 800562e:	fa1f fc8c 	uxth.w	ip, ip
    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8005632:	d021      	beq.n	8005678 <chVTDoSetI+0x68>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8005634:	8cea      	ldrh	r2, [r5, #38]	; 0x26

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8005636:	8923      	ldrh	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8005638:	ebc2 0c0c 	rsb	ip, r2, ip
 800563c:	4461      	add	r1, ip
 800563e:	b289      	uxth	r1, r1

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8005640:	4299      	cmp	r1, r3
 8005642:	d315      	bcc.n	8005670 <chVTDoSetI+0x60>
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8005644:	4299      	cmp	r1, r3
 8005646:	d905      	bls.n	8005654 <chVTDoSetI+0x44>
    delay -= p->vt_delta;
    p = p->vt_next;
 8005648:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 800564a:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 800564c:	8923      	ldrh	r3, [r4, #8]
    delay -= p->vt_delta;
 800564e:	b289      	uxth	r1, r1
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8005650:	428b      	cmp	r3, r1
 8005652:	d3f9      	bcc.n	8005648 <chVTDoSetI+0x38>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay
 8005654:	8101      	strh	r1, [r0, #8]
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8005656:	6863      	ldr	r3, [r4, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8005658:	8922      	ldrh	r2, [r4, #8]
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 800565a:	6004      	str	r4, [r0, #0]
 800565c:	6043      	str	r3, [r0, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 800565e:	6018      	str	r0, [r3, #0]
 8005660:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8005662:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_delta = (systime_t)-1;
 8005664:	f64f 70ff 	movw	r0, #65535	; 0xffff
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8005668:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800566a:	84a8      	strh	r0, [r5, #36]	; 0x24
}
 800566c:	bcf0      	pop	{r4, r5, r6, r7}
 800566e:	4770      	bx	lr
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8005670:	188a      	adds	r2, r1, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8005672:	b292      	uxth	r2, r2
 8005674:	637a      	str	r2, [r7, #52]	; 0x34
 8005676:	e7e5      	b.n	8005644 <chVTDoSetI+0x34>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8005678:	eb01 030c 	add.w	r3, r1, ip
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800567c:	b29a      	uxth	r2, r3
 800567e:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8005680:	2300      	movs	r3, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8005682:	2202      	movs	r2, #2
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8005684:	f8a5 c026 	strh.w	ip, [r5, #38]	; 0x26
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800568c:	60fa      	str	r2, [r7, #12]
 800568e:	e7d9      	b.n	8005644 <chVTDoSetI+0x34>
 8005690:	20001ec0 	.word	0x20001ec0
 8005694:	f3af 8000 	nop.w
 8005698:	f3af 8000 	nop.w
 800569c:	f3af 8000 	nop.w

080056a0 <thread11.7269>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	4607      	mov	r7, r0

  chMtxLock(&m2);
 80056a4:	481b      	ldr	r0, [pc, #108]	; (8005714 <thread11.7269+0x74>)
 80056a6:	f7fc fde3 	bl	8002270 <chMtxLock>
  chMtxLock(&m1);
 80056aa:	481b      	ldr	r0, [pc, #108]	; (8005718 <thread11.7269+0x78>)
 80056ac:	f7fc fde0 	bl	8002270 <chMtxLock>
 80056b0:	2320      	movs	r3, #32
 80056b2:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80056b6:	4e19      	ldr	r6, [pc, #100]	; (800571c <thread11.7269+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 80056b8:	69b0      	ldr	r0, [r6, #24]
 80056ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 80056bc:	4620      	mov	r0, r4
 80056be:	f7fc fd47 	bl	8002150 <chMtxUnlockS>
  currp->p_u.wtobjp = cp;
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <thread11.7269+0x80>)
 80056c4:	69b2      	ldr	r2, [r6, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80056c6:	461d      	mov	r5, r3
 80056c8:	6213      	str	r3, [r2, #32]
  do {
    cp = cp->p_next;
 80056ca:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80056cc:	42ab      	cmp	r3, r5
 80056ce:	d003      	beq.n	80056d8 <thread11.7269+0x38>
 80056d0:	6898      	ldr	r0, [r3, #8]
 80056d2:	6891      	ldr	r1, [r2, #8]
 80056d4:	4288      	cmp	r0, r1
 80056d6:	d2f8      	bcs.n	80056ca <thread11.7269+0x2a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80056d8:	6858      	ldr	r0, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80056da:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80056dc:	6050      	str	r0, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80056de:	6002      	str	r2, [r0, #0]
 80056e0:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 80056e2:	2007      	movs	r0, #7
 80056e4:	f7fc fbec 	bl	8001ec0 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 80056e8:	69b2      	ldr	r2, [r6, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT)
 80056ea:	6a13      	ldr	r3, [r2, #32]
 80056ec:	3301      	adds	r3, #1
 80056ee:	d002      	beq.n	80056f6 <thread11.7269+0x56>
    chMtxLockS(mp);
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7fc fd55 	bl	80021a0 <chMtxLockS>
 80056f6:	2400      	movs	r4, #0
 80056f8:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80056fc:	7838      	ldrb	r0, [r7, #0]
 80056fe:	f7fc f8df 	bl	80018c0 <test_emit_token>
  chMtxUnlock(&m1);
 8005702:	4805      	ldr	r0, [pc, #20]	; (8005718 <thread11.7269+0x78>)
 8005704:	f7fc fb54 	bl	8001db0 <chMtxUnlock>
  chMtxUnlock(&m2);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <thread11.7269+0x74>)
 800570a:	f7fc fb51 	bl	8001db0 <chMtxUnlock>
  return 0;
}
 800570e:	4620      	mov	r0, r4
 8005710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005712:	bf00      	nop
 8005714:	20000c38 	.word	0x20000c38
 8005718:	20000800 	.word	0x20000800
 800571c:	20001ec0 	.word	0x20001ec0
 8005720:	20000820 	.word	0x20000820
 8005724:	f3af 8000 	nop.w
 8005728:	f3af 8000 	nop.w
 800572c:	f3af 8000 	nop.w

08005730 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8005730:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8005732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005736:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8005738:	b087      	sub	sp, #28
 800573a:	4605      	mov	r5, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800573c:	d011      	beq.n	8005762 <chSchGoSleepTimeoutS+0x32>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800573e:	4c0b      	ldr	r4, [pc, #44]	; (800576c <chSchGoSleepTimeoutS+0x3c>)
 8005740:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <chSchGoSleepTimeoutS+0x40>)
 8005742:	69a3      	ldr	r3, [r4, #24]
 8005744:	a801      	add	r0, sp, #4
 8005746:	f7ff ff63 	bl	8005610 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800574a:	4628      	mov	r0, r5
 800574c:	f7fc fbb8 	bl	8001ec0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8005750:	9804      	ldr	r0, [sp, #16]
 8005752:	b110      	cbz	r0, 800575a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8005754:	a801      	add	r0, sp, #4
 8005756:	f7ff ff2b 	bl	80055b0 <chVTDoResetI>
  }
  else
    chSchGoSleepS(newstate);
  return currp->p_u.rdymsg;
 800575a:	69a1      	ldr	r1, [r4, #24]
}
 800575c:	6a08      	ldr	r0, [r1, #32]
 800575e:	b007      	add	sp, #28
 8005760:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8005762:	f7fc fbad 	bl	8001ec0 <chSchGoSleepS>
 8005766:	4c01      	ldr	r4, [pc, #4]	; (800576c <chSchGoSleepTimeoutS+0x3c>)
 8005768:	e7f7      	b.n	800575a <chSchGoSleepTimeoutS+0x2a>
 800576a:	bf00      	nop
 800576c:	20001ec0 	.word	0x20001ec0
 8005770:	08001691 	.word	0x08001691
 8005774:	f3af 8000 	nop.w
 8005778:	f3af 8000 	nop.w
 800577c:	f3af 8000 	nop.w

08005780 <chThdEnqueueTimeoutS.4427>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8005780:	b410      	push	{r4}
 8005782:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout)
 8005784:	b151      	cbz	r1, 800579c <chThdEnqueueTimeoutS.4427+0x1c>
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <chThdEnqueueTimeoutS.4427+0x24>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8005788:	6844      	ldr	r4, [r0, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800578c:	2004      	movs	r0, #4
 800578e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8005792:	6053      	str	r3, [r2, #4]
 8005794:	6023      	str	r3, [r4, #0]
}
 8005796:	bc10      	pop	{r4}

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8005798:	f7ff bfca 	b.w	8005730 <chSchGoSleepTimeoutS>
}
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	bc10      	pop	{r4}
 80057a2:	4770      	bx	lr
 80057a4:	20001ec0 	.word	0x20001ec0
 80057a8:	f3af 8000 	nop.w
 80057ac:	f3af 8000 	nop.w

080057b0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	2320      	movs	r3, #32
 80057b4:	4604      	mov	r4, r0
 80057b6:	460e      	mov	r6, r1
 80057b8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify)
 80057bc:	69c1      	ldr	r1, [r0, #28]
 80057be:	b101      	cbz	r1, 80057c2 <chIQGetTimeout+0x12>
    iqp->q_notify(iqp);
 80057c0:	4788      	blx	r1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 80057c2:	68a5      	ldr	r5, [r4, #8]

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 80057c4:	4620      	mov	r0, r4
 80057c6:	4631      	mov	r1, r6

  chSysLock();
  if (iqp->q_notify)
    iqp->q_notify(iqp);

  while (chIQIsEmptyI(iqp)) {
 80057c8:	b935      	cbnz	r5, 80057d8 <chIQGetTimeout+0x28>
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 80057ca:	f7ff ffd9 	bl	8005780 <chThdEnqueueTimeoutS.4427>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	daf7      	bge.n	80057c2 <chIQGetTimeout+0x12>
 80057d2:	f385 8811 	msr	BASEPRI, r5
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80057d8:	69a3      	ldr	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80057da:	3d01      	subs	r5, #1
 80057dc:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
 80057de:	f813 0b01 	ldrb.w	r0, [r3], #1
  if (iqp->q_rdptr >= iqp->q_top)
 80057e2:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80057e4:	61a3      	str	r3, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top)
 80057e6:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 80057e8:	bf24      	itt	cs
 80057ea:	68e3      	ldrcs	r3, [r4, #12]
 80057ec:	61a3      	strcs	r3, [r4, #24]
 80057ee:	2100      	movs	r1, #0
 80057f0:	f381 8811 	msr	BASEPRI, r1

  chSysUnlock();
  return b;
}
 80057f4:	bd70      	pop	{r4, r5, r6, pc}
 80057f6:	bf00      	nop
 80057f8:	f3af 8000 	nop.w
 80057fc:	f3af 8000 	nop.w

08005800 <thread1.8252>:
}

static msg_t thread1(void *p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8005800:	f640 40bc 	movw	r0, #3260	; 0xcbc
static void queues1_setup(void) {

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread1(void *p) {
 8005804:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8005806:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800580a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800580e:	f7ff ffcf 	bl	80057b0 <chIQGetTimeout>
  return 0;
}
 8005812:	2000      	movs	r0, #0
 8005814:	bd08      	pop	{r3, pc}
 8005816:	bf00      	nop
 8005818:	f3af 8000 	nop.w
 800581c:	f3af 8000 	nop.w

08005820 <gett.8862>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8005820:	300c      	adds	r0, #12
 8005822:	f7ff bfc5 	b.w	80057b0 <chIQGetTimeout>
 8005826:	bf00      	nop
 8005828:	f3af 8000 	nop.w
 800582c:	f3af 8000 	nop.w

08005830 <get.8866>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8005830:	300c      	adds	r0, #12
 8005832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005836:	f7ff bfbb 	b.w	80057b0 <chIQGetTimeout>
 800583a:	bf00      	nop
 800583c:	f3af 8000 	nop.w

08005840 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 8005840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	4604      	mov	r4, r0
 8005846:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8005848:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800584c:	f04f 0b20 	mov.w	fp, #32
 8005850:	f38b 8811 	msr	BASEPRI, fp
  size_t r = 0;
 8005854:	2600      	movs	r6, #0
 *                      .
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
 8005856:	f101 0801 	add.w	r8, r1, #1
 800585a:	eb01 0a02 	add.w	sl, r1, r2

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy)
 800585e:	f1b9 0f00 	cmp.w	r9, #0
 8005862:	d001      	beq.n	8005868 <chIQReadTimeout+0x28>
      nfy(iqp);
 8005864:	4620      	mov	r0, r4
 8005866:	47c8      	blx	r9
 8005868:	68a7      	ldr	r7, [r4, #8]

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
  chSysLock();
  while (true) {
    if (nfy)
      nfy(iqp);

    while (chIQIsEmptyI(iqp)) {
 800586e:	b947      	cbnz	r7, 8005882 <chIQReadTimeout+0x42>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 8005870:	f7ff ff86 	bl	8005780 <chThdEnqueueTimeoutS.4427>
 8005874:	2800      	cmp	r0, #0
 8005876:	d0f7      	beq.n	8005868 <chIQReadTimeout+0x28>
 8005878:	f387 8811 	msr	BASEPRI, r7
    if (--n == 0)
      return r;

    chSysLock();
  }
}
 800587c:	4630      	mov	r0, r6
 800587e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8005882:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8005884:	1e7b      	subs	r3, r7, #1
 8005886:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8005888:	f812 0b01 	ldrb.w	r0, [r2], #1
 800588c:	f808 0c01 	strb.w	r0, [r8, #-1]
    if (iqp->q_rdptr >= iqp->q_top)
 8005890:	6921      	ldr	r1, [r4, #16]
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8005892:	61a2      	str	r2, [r4, #24]
    if (iqp->q_rdptr >= iqp->q_top)
 8005894:	428a      	cmp	r2, r1
      iqp->q_rdptr = iqp->q_buffer;
 8005896:	bf24      	itt	cs
 8005898:	68e1      	ldrcs	r1, [r4, #12]
 800589a:	61a1      	strcs	r1, [r4, #24]
 800589c:	2300      	movs	r3, #0
 800589e:	f383 8811 	msr	BASEPRI, r3

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 80058a2:	3601      	adds	r6, #1
    if (--n == 0)
 80058a4:	45d0      	cmp	r8, sl
 80058a6:	d0e9      	beq.n	800587c <chIQReadTimeout+0x3c>
 80058a8:	f38b 8811 	msr	BASEPRI, fp
 80058ac:	f108 0801 	add.w	r8, r8, #1
 80058b0:	e7d5      	b.n	800585e <chIQReadTimeout+0x1e>
 80058b2:	bf00      	nop
 80058b4:	f3af 8000 	nop.w
 80058b8:	f3af 8000 	nop.w
 80058bc:	f3af 8000 	nop.w

080058c0 <readt.8838>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, time);
 80058c0:	300c      	adds	r0, #12
 80058c2:	f7ff bfbd 	b.w	8005840 <chIQReadTimeout>
 80058c6:	bf00      	nop
 80058c8:	f3af 8000 	nop.w
 80058cc:	f3af 8000 	nop.w

080058d0 <read.8846>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 80058d0:	300c      	adds	r0, #12
 80058d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058d6:	f7ff bfb3 	b.w	8005840 <chIQReadTimeout>
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w

080058e0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	4616      	mov	r6, r2
 80058e8:	2320      	movs	r3, #32
 80058ea:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 80058ee:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 80058f0:	4620      	mov	r0, r4
 80058f2:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80058f4:	b935      	cbnz	r5, 8005904 <chOQPutTimeout+0x24>
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 80058f6:	f7ff ff43 	bl	8005780 <chThdEnqueueTimeoutS.4427>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	daf7      	bge.n	80058ee <chOQPutTimeout+0xe>
 80058fe:	f385 8811 	msr	BASEPRI, r5
 8005902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8005904:	6960      	ldr	r0, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8005906:	3d01      	subs	r5, #1
 8005908:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 800590a:	f800 7b01 	strb.w	r7, [r0], #1
  if (oqp->q_wrptr >= oqp->q_top)
 800590e:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8005910:	6160      	str	r0, [r4, #20]
  if (oqp->q_wrptr >= oqp->q_top)
 8005912:	4290      	cmp	r0, r2
    oqp->q_wrptr = oqp->q_buffer;
 8005914:	bf28      	it	cs
 8005916:	68e0      	ldrcs	r0, [r4, #12]

  if (oqp->q_notify)
 8005918:	69e1      	ldr	r1, [r4, #28]
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
  if (oqp->q_wrptr >= oqp->q_top)
    oqp->q_wrptr = oqp->q_buffer;
 800591a:	bf28      	it	cs
 800591c:	6160      	strcs	r0, [r4, #20]

  if (oqp->q_notify)
 800591e:	b109      	cbz	r1, 8005924 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8005920:	4620      	mov	r0, r4
 8005922:	4788      	blx	r1
 8005924:	2000      	movs	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0

  chSysUnlock();
  return Q_OK;
}
 800592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592c:	f3af 8000 	nop.w

08005930 <thread2.8249>:
}

static msg_t thread2(void *p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005930:	f640 4098 	movw	r0, #3224	; 0xc98
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 8005934:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005936:	2100      	movs	r1, #0
 8005938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800593c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005940:	f7ff ffce 	bl	80058e0 <chOQPutTimeout>
  return 0;
}
 8005944:	2000      	movs	r0, #0
 8005946:	bd08      	pop	{r3, pc}
 8005948:	f3af 8000 	nop.w
 800594c:	f3af 8000 	nop.w

08005950 <putt.8869>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8005950:	3030      	adds	r0, #48	; 0x30
 8005952:	f7ff bfc5 	b.w	80058e0 <chOQPutTimeout>
 8005956:	bf00      	nop
 8005958:	f3af 8000 	nop.w
 800595c:	f3af 8000 	nop.w

08005960 <put.8874>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8005960:	3030      	adds	r0, #48	; 0x30
 8005962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005966:	f7ff bfbb 	b.w	80058e0 <chOQPutTimeout>
 800596a:	bf00      	nop
 800596c:	f3af 8000 	nop.w

08005970 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	4604      	mov	r4, r0
 8005976:	b083      	sub	sp, #12
 8005978:	460f      	mov	r7, r1
 800597a:	4615      	mov	r5, r2
 800597c:	469b      	mov	fp, r3
  qnotify_t nfy = oqp->q_notify;
 800597e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8005982:	f04f 0a20 	mov.w	sl, #32
 8005986:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 800598a:	2600      	movs	r6, #0
 800598c:	46b1      	mov	r9, r6
 800598e:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
    if (oqp->q_wrptr >= oqp->q_top)
      oqp->q_wrptr = oqp->q_buffer;

    if (nfy)
      nfy(oqp);
 8005990:	4620      	mov	r0, r4
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005992:	1e5a      	subs	r2, r3, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8005994:	b1db      	cbz	r3, 80059ce <chOQWriteTimeout+0x5e>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005996:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8005998:	6963      	ldr	r3, [r4, #20]
 800599a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800599e:	f803 1b01 	strb.w	r1, [r3], #1
    if (oqp->q_wrptr >= oqp->q_top)
 80059a2:	6922      	ldr	r2, [r4, #16]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80059a4:	6163      	str	r3, [r4, #20]
    if (oqp->q_wrptr >= oqp->q_top)
 80059a6:	4293      	cmp	r3, r2
      oqp->q_wrptr = oqp->q_buffer;
 80059a8:	bf24      	itt	cs
 80059aa:	68e3      	ldrcs	r3, [r4, #12]
 80059ac:	6163      	strcs	r3, [r4, #20]

    if (nfy)
 80059ae:	f1b8 0f00 	cmp.w	r8, #0
 80059b2:	d000      	beq.n	80059b6 <chOQWriteTimeout+0x46>
      nfy(oqp);
 80059b4:	47c0      	blx	r8
 80059b6:	f389 8811 	msr	BASEPRI, r9

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 80059ba:	3601      	adds	r6, #1
    if (--n == 0)
 80059bc:	3d01      	subs	r5, #1
 80059be:	d010      	beq.n	80059e2 <chOQWriteTimeout+0x72>
 80059c0:	f38a 8811 	msr	BASEPRI, sl
 80059c4:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
    if (oqp->q_wrptr >= oqp->q_top)
      oqp->q_wrptr = oqp->q_buffer;

    if (nfy)
      nfy(oqp);
 80059c6:	4620      	mov	r0, r4
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 80059c8:	1e5a      	subs	r2, r3, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 80059ce:	4659      	mov	r1, fp
 80059d0:	4620      	mov	r0, r4
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	f7ff fed4 	bl	8005780 <chThdEnqueueTimeoutS.4427>
 80059d8:	9901      	ldr	r1, [sp, #4]
 80059da:	2800      	cmp	r0, #0
 80059dc:	d0d7      	beq.n	800598e <chOQWriteTimeout+0x1e>
 80059de:	f381 8811 	msr	BASEPRI, r1
    w++;
    if (--n == 0)
      return w;
    chSysLock();
  }
}
 80059e2:	4630      	mov	r0, r6
 80059e4:	b003      	add	sp, #12
 80059e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <writet.8851>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
 80059f0:	3030      	adds	r0, #48	; 0x30
 80059f2:	f7ff bfbd 	b.w	8005970 <chOQWriteTimeout>
 80059f6:	bf00      	nop
 80059f8:	f3af 8000 	nop.w
 80059fc:	f3af 8000 	nop.w

08005a00 <write.8857>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8005a00:	3030      	adds	r0, #48	; 0x30
 8005a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a06:	f7ff bfb3 	b.w	8005970 <chOQWriteTimeout>
 8005a0a:	bf00      	nop
 8005a0c:	f3af 8000 	nop.w

08005a10 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005a10:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8005a12:	6880      	ldr	r0, [r0, #8]
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005a14:	b410      	push	{r4}
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8005a16:	1e42      	subs	r2, r0, #1
 8005a18:	2a00      	cmp	r2, #0
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005a1a:	460c      	mov	r4, r1
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8005a1c:	609a      	str	r2, [r3, #8]
 8005a1e:	db02      	blt.n	8005a26 <chSemWaitTimeoutS+0x16>
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
 8005a20:	2000      	movs	r0, #0
}
 8005a22:	bc10      	pop	{r4}
 8005a24:	4770      	bx	lr
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8005a26:	b159      	cbz	r1, 8005a40 <chSemWaitTimeoutS+0x30>
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8005a28:	4c07      	ldr	r4, [pc, #28]	; (8005a48 <chSemWaitTimeoutS+0x38>)
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8005a2a:	2005      	movs	r0, #5
  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8005a2c:	69a2      	ldr	r2, [r4, #24]
 8005a2e:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8005a30:	685c      	ldr	r4, [r3, #4]
 8005a32:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8005a3a:	bc10      	pop	{r4}
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8005a3c:	f7ff be78 	b.w	8005730 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8005a40:	6098      	str	r0, [r3, #8]
      return MSG_TIMEOUT;
 8005a42:	f04f 30ff 	mov.w	r0, #4294967295
 8005a46:	e7ec      	b.n	8005a22 <chSemWaitTimeoutS+0x12>
 8005a48:	20001ec0 	.word	0x20001ec0
 8005a4c:	f3af 8000 	nop.w

08005a50 <chMBFetch.constprop.26>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4605      	mov	r5, r0
 8005a54:	2320      	movs	r3, #32
 8005a56:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 8005a5a:	480d      	ldr	r0, [pc, #52]	; (8005a90 <chMBFetch.constprop.26+0x40>)
 8005a5c:	f7ff ffd8 	bl	8005a10 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005a60:	4604      	mov	r4, r0
 8005a62:	b980      	cbnz	r0, 8005a86 <chMBFetch.constprop.26+0x36>
    *msgp = *mbp->mb_rdptr++;
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <chMBFetch.constprop.26+0x44>)
 8005a66:	68da      	ldr	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
 8005a68:	6859      	ldr	r1, [r3, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005a6a:	f852 0b04 	ldr.w	r0, [r2], #4
    if (mbp->mb_rdptr >= mbp->mb_top)
 8005a6e:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005a70:	6028      	str	r0, [r5, #0]
 8005a72:	60da      	str	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8005a74:	bf28      	it	cs
 8005a76:	681a      	ldrcs	r2, [r3, #0]
    chSemSignalI(&mbp->mb_emptysem);
 8005a78:	4807      	ldr	r0, [pc, #28]	; (8005a98 <chMBFetch.constprop.26+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8005a7a:	bf28      	it	cs
 8005a7c:	60da      	strcs	r2, [r3, #12]
    chSemSignalI(&mbp->mb_emptysem);
 8005a7e:	f7fd f8bf 	bl	8002c00 <chSemSignalI>
    chSchRescheduleS();
 8005a82:	f7fc f895 	bl	8001bb0 <chSchRescheduleS>
 8005a86:	2300      	movs	r3, #0
 8005a88:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();
  return rdymsg;
}
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	20000cf0 	.word	0x20000cf0
 8005a94:	20000ce0 	.word	0x20000ce0
 8005a98:	20000cfc 	.word	0x20000cfc
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <chSemWaitTimeout>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8005aa0:	b508      	push	{r3, lr}
 8005aa2:	2320      	movs	r3, #32
 8005aa4:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8005aa8:	f7ff ffb2 	bl	8005a10 <chSemWaitTimeoutS>
 8005aac:	2100      	movs	r1, #0
 8005aae:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  return msg;
}
 8005ab2:	bd08      	pop	{r3, pc}
 8005ab4:	f3af 8000 	nop.w
 8005ab8:	f3af 8000 	nop.w
 8005abc:	f3af 8000 	nop.w

08005ac0 <test_start_timer.constprop.19>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8005ac0:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <test_start_timer.constprop.19+0x30>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	2020      	movs	r0, #32
 8005aca:	f380 8811 	msr	BASEPRI, r0
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 8005ace:	4809      	ldr	r0, [pc, #36]	; (8005af4 <test_start_timer.constprop.19+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp))
 8005ad0:	68c1      	ldr	r1, [r0, #12]
 8005ad2:	b109      	cbz	r1, 8005ad8 <test_start_timer.constprop.19+0x18>
    chVTDoResetI(vtp);
 8005ad4:	f7ff fd6c 	bl	80055b0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8005ad8:	4806      	ldr	r0, [pc, #24]	; (8005af4 <test_start_timer.constprop.19+0x34>)
 8005ada:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005ade:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <test_start_timer.constprop.19+0x38>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f7ff fd95 	bl	8005610 <chVTDoSetI>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f382 8811 	msr	BASEPRI, r2
 8005aec:	bd08      	pop	{r3, pc}
 8005aee:	bf00      	nop
 8005af0:	20001522 	.word	0x20001522
 8005af4:	20001714 	.word	0x20001714
 8005af8:	08001641 	.word	0x08001641
 8005afc:	f3af 8000 	nop.w

08005b00 <chThdCreateFromMemoryPool.constprop.54>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005b02:	4c0f      	ldr	r4, [pc, #60]	; (8005b40 <chThdCreateFromMemoryPool.constprop.54+0x40>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005b04:	b083      	sub	sp, #12
 8005b06:	4607      	mov	r7, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005b08:	4620      	mov	r0, r4
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005b0a:	460e      	mov	r6, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005b0c:	f7fb ffa0 	bl	8001a50 <chPoolAlloc>
  if (wsp == NULL)
 8005b10:	4605      	mov	r5, r0
 8005b12:	b190      	cbz	r0, 8005b3a <chThdCreateFromMemoryPool.constprop.54+0x3a>
 8005b14:	2320      	movs	r3, #32
 8005b16:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <chThdCreateFromMemoryPool.constprop.54+0x44>)
 8005b1c:	6861      	ldr	r1, [r4, #4]
 8005b1e:	463a      	mov	r2, r7
 8005b20:	9600      	str	r6, [sp, #0]
 8005b22:	f7fb ffed 	bl	8001b00 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8005b26:	2102      	movs	r1, #2
 8005b28:	7741      	strb	r1, [r0, #29]
  tp->p_mpool = mp;
 8005b2a:	6404      	str	r4, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8005b2c:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8005b2e:	4605      	mov	r5, r0
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8005b30:	f7fc f90e 	bl	8001d50 <chSchWakeupS>
 8005b34:	2000      	movs	r0, #0
 8005b36:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return tp;
}
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	b003      	add	sp, #12
 8005b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b40:	20001748 	.word	0x20001748
 8005b44:	080018e1 	.word	0x080018e1
 8005b48:	f3af 8000 	nop.w
 8005b4c:	f3af 8000 	nop.w

08005b50 <heap1_setup.7929>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8005b50:	f241 7328 	movw	r3, #5928	; 0x1728
 8005b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8005b58:	f641 0250 	movw	r2, #6224	; 0x1850
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8005b5c:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8005b5e:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 8005b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8005b64:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8005b68:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8005b6c:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 8005b6e:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8005b70:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8005b72:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8005b74:	6054      	str	r4, [r2, #4]
 8005b76:	6158      	str	r0, [r3, #20]
 8005b78:	6118      	str	r0, [r3, #16]
 8005b7a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8005b7c:	bc10      	pop	{r4}
 8005b7e:	4770      	bx	lr

08005b80 <get_descriptor.11379>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8005b80:	2902      	cmp	r1, #2
 8005b82:	d006      	beq.n	8005b92 <get_descriptor.11379+0x12>
 8005b84:	2903      	cmp	r1, #3
 8005b86:	d006      	beq.n	8005b96 <get_descriptor.11379+0x16>
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 8005b88:	4807      	ldr	r0, [pc, #28]	; (8005ba8 <get_descriptor.11379+0x28>)
 8005b8a:	2901      	cmp	r1, #1
 8005b8c:	bf18      	it	ne
 8005b8e:	2000      	movne	r0, #0
 8005b90:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8005b92:	4806      	ldr	r0, [pc, #24]	; (8005bac <get_descriptor.11379+0x2c>)
 8005b94:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8005b96:	2a03      	cmp	r2, #3
 8005b98:	d803      	bhi.n	8005ba2 <get_descriptor.11379+0x22>
      return &vcom_strings[dindex];
 8005b9a:	4805      	ldr	r0, [pc, #20]	; (8005bb0 <get_descriptor.11379+0x30>)
 8005b9c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8005ba0:	4770      	bx	lr
  }
  return NULL;
 8005ba2:	2000      	movs	r0, #0
}
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	0800aa00 	.word	0x0800aa00
 8005bac:	0800ab40 	.word	0x0800ab40
 8005bb0:	0800a9e0 	.word	0x0800a9e0
 8005bb4:	f3af 8000 	nop.w
 8005bb8:	f3af 8000 	nop.w
 8005bbc:	f3af 8000 	nop.w

08005bc0 <usb_lld_init_endpoint.4464>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8005bc0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8005bc4:	68da      	ldr	r2, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8005bc6:	b470      	push	{r4, r5, r6}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8005bc8:	6815      	ldr	r5, [r2, #0]
 8005bca:	f005 0603 	and.w	r6, r5, #3
 8005bce:	1e73      	subs	r3, r6, #1
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	bf96      	itet	ls
 8005bd4:	4c28      	ldrls	r4, [pc, #160]	; (8005c78 <usb_lld_init_endpoint.4464+0xb8>)
 8005bd6:	f44f 7300 	movhi.w	r3, #512	; 0x200
 8005bda:	f834 3013 	ldrhls.w	r3, [r4, r3, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 8005bde:	6894      	ldr	r4, [r2, #8]
 8005be0:	b10c      	cbz	r4, 8005be6 <usb_lld_init_endpoint.4464+0x26>
    epr |= EPR_STAT_TX_NAK;
 8005be2:	f043 0320 	orr.w	r3, r3, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8005be6:	68d5      	ldr	r5, [r2, #12]
 8005be8:	b10d      	cbz	r5, 8005bee <usb_lld_init_endpoint.4464+0x2e>
    epr |= EPR_STAT_RX_NAK;
 8005bea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8005bee:	ea43 0601 	orr.w	r6, r3, r1
 8005bf2:	f426 45f0 	bic.w	r5, r6, #30720	; 0x7800
 8005bf6:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8005bfa:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8005bfe:	f025 0670 	bic.w	r6, r5, #112	; 0x70
 8005c02:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
  EPR_TOGGLE(ep, epr);
 8005c06:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
 8005c0a:	f647 0570 	movw	r5, #30832	; 0x7870
 8005c0e:	401d      	ands	r5, r3

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8005c10:	8a53      	ldrh	r3, [r2, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8005c12:	4075      	eors	r5, r6
 8005c14:	f844 5021 	str.w	r5, [r4, r1, lsl #2]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8005c18:	1e5c      	subs	r4, r3, #1
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8005c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c1c:	d821      	bhi.n	8005c62 <usb_lld_init_endpoint.4464+0xa2>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8005c1e:	f044 0601 	orr.w	r6, r4, #1
 8005c22:	1c75      	adds	r5, r6, #1
 8005c24:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 8005c28:	0266      	lsls	r6, r4, #9
 8005c2a:	f406 457c 	and.w	r5, r6, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 8005c2e:	f44f 46b8 	mov.w	r6, #23552	; 0x5c00
 8005c32:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8005c36:	6d36      	ldr	r6, [r6, #80]	; 0x50
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8005c38:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8005c3c:	8a12      	ldrh	r2, [r2, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8005c3e:	f106 5600 	add.w	r6, r6, #536870912	; 0x20000000
 8005c42:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8005c46:	1912      	adds	r2, r2, r4
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8005c48:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8005c4c:	0049      	lsls	r1, r1, #1
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8005c4e:	18d3      	adds	r3, r2, r3
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
 8005c50:	2600      	movs	r6, #0
 8005c52:	604e      	str	r6, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8005c54:	60cd      	str	r5, [r1, #12]
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8005c56:	600c      	str	r4, [r1, #0]
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8005c58:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8005c5c:	608a      	str	r2, [r1, #8]
}
 8005c5e:	bc70      	pop	{r4, r5, r6}
 8005c60:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8005c62:	f044 051f 	orr.w	r5, r4, #31
 8005c66:	1c6c      	adds	r4, r5, #1
 8005c68:	1166      	asrs	r6, r4, #5
 8005c6a:	ea6f 65c6 	mvn.w	r5, r6, lsl #27
 8005c6e:	ea6f 4455 	mvn.w	r4, r5, lsr #17
 8005c72:	b2a5      	uxth	r5, r4
 8005c74:	e7db      	b.n	8005c2e <usb_lld_init_endpoint.4464+0x6e>
 8005c76:	bf00      	nop
 8005c78:	0800ab50 	.word	0x0800ab50
 8005c7c:	f3af 8000 	nop.w

08005c80 <set_address.9473>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8005c80:	b538      	push	{r3, r4, r5, lr}

  usbp->address = usbp->setup[2];
 8005c82:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005c86:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8005c88:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8005c8c:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005c90:	680d      	ldr	r5, [r1, #0]
 8005c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c96:	f2c4 0300 	movt	r3, #16384	; 0x4000
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	64da      	str	r2, [r3, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005c9e:	b10d      	cbz	r5, 8005ca4 <set_address.9473+0x24>
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	47a8      	blx	r5
  usbp->state = USB_SELECTED;
 8005ca4:	2003      	movs	r0, #3
 8005ca6:	7020      	strb	r0, [r4, #0]
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w

08005cb0 <gpt_lld_serve_interrupt.10064.4525>:
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8005cb0:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Shared IRQ handler.
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {
 8005cb2:	b508      	push	{r3, lr}

  gptp->tim->SR = 0;
 8005cb4:	68c3      	ldr	r3, [r0, #12]
 8005cb6:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8005cb8:	2904      	cmp	r1, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8005cba:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 8005cbc:	d107      	bne.n	8005cce <gpt_lld_serve_interrupt.10064.4525+0x1e>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 8005cbe:	2102      	movs	r1, #2
 8005cc0:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8005cc2:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8005cc4:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8005ccc:	60d9      	str	r1, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 8005cce:	6843      	ldr	r3, [r0, #4]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4790      	blx	r2
 8005cd4:	bd08      	pop	{r3, pc}
 8005cd6:	bf00      	nop
 8005cd8:	f3af 8000 	nop.w
 8005cdc:	f3af 8000 	nop.w

08005ce0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	f3af 8000 	nop.w
 8005cec:	f3af 8000 	nop.w

08005cf0 <sduRequestsHook>:
 * @retval TRUE         Message handled internally.
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8005cf0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005cf4:	f003 0160 	and.w	r1, r3, #96	; 0x60
 8005cf8:	2920      	cmp	r1, #32
 8005cfa:	d001      	beq.n	8005d00 <sduRequestsHook+0x10>
      return TRUE;
    default:
      return FALSE;
    }
  }
  return FALSE;
 8005cfc:	2000      	movs	r0, #0
}
 8005cfe:	4770      	bx	lr
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8005d00:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8005d04:	2a21      	cmp	r2, #33	; 0x21
 8005d06:	d003      	beq.n	8005d10 <sduRequestsHook+0x20>
 8005d08:	2a22      	cmp	r2, #34	; 0x22
 8005d0a:	d009      	beq.n	8005d20 <sduRequestsHook+0x30>
 8005d0c:	2a20      	cmp	r2, #32
 8005d0e:	d1f5      	bne.n	8005cfc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return TRUE;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8005d10:	4906      	ldr	r1, [pc, #24]	; (8005d2c <sduRequestsHook+0x3c>)
 8005d12:	2207      	movs	r2, #7
 8005d14:	2300      	movs	r3, #0
 8005d16:	6681      	str	r1, [r0, #104]	; 0x68
 8005d18:	66c2      	str	r2, [r0, #108]	; 0x6c
 8005d1a:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8005d20:	2300      	movs	r3, #0
 8005d22:	6683      	str	r3, [r0, #104]	; 0x68
 8005d24:	66c3      	str	r3, [r0, #108]	; 0x6c
 8005d26:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 8005d28:	2001      	movs	r0, #1
 8005d2a:	4770      	bx	lr
 8005d2c:	20000818 	.word	0x20000818

08005d30 <tmo.8442>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	f3af 8000 	nop.w
 8005d3c:	f3af 8000 	nop.w

08005d40 <thread1.8445>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	f3af 8000 	nop.w
 8005d48:	f3af 8000 	nop.w
 8005d4c:	f3af 8000 	nop.w

08005d50 <notify.8246>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
 8005d58:	f3af 8000 	nop.w
 8005d5c:	f3af 8000 	nop.w

08005d60 <chCondSignalI.constprop.48.4129>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <chCondSignalI.constprop.48.4129+0x18>)
 8005d62:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8005d64:	4298      	cmp	r0, r3
 8005d66:	d006      	beq.n	8005d76 <chCondSignalI.constprop.48.4129+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005d68:	6802      	ldr	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	6201      	str	r1, [r0, #32]
 8005d70:	601a      	str	r2, [r3, #0]
    chSchReadyI(tp);
 8005d72:	f7fc b94d 	b.w	8002010 <chSchReadyI>
 8005d76:	4770      	bx	lr
 8005d78:	20000820 	.word	0x20000820
 8005d7c:	f3af 8000 	nop.w

08005d80 <thread4>:
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 8005d82:	b510      	push	{r4, lr}
 8005d84:	2020      	movs	r0, #32
 8005d86:	699c      	ldr	r4, [r3, #24]
 8005d88:	f380 8811 	msr	BASEPRI, r0
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8005d8c:	2003      	movs	r0, #3
 8005d8e:	f7fc f897 	bl	8001ec0 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8005d92:	6a21      	ldr	r1, [r4, #32]
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d0f9      	beq.n	8005d8c <thread4+0xc>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8005d9e:	bd10      	pop	{r4, pc}
 8005da0:	20001ec0 	.word	0x20001ec0
 8005da4:	f3af 8000 	nop.w
 8005da8:	f3af 8000 	nop.w
 8005dac:	f3af 8000 	nop.w

08005db0 <mtx6_execute.7297>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db2:	f641 63c0 	movw	r3, #7872	; 0x1ec0
 8005db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005dba:	6998      	ldr	r0, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005dbc:	f641 0650 	movw	r6, #6224	; 0x1850
 8005dc0:	6887      	ldr	r7, [r0, #8]
 8005dc2:	f246 0571 	movw	r5, #24689	; 0x6071
 8005dc6:	f24a 41d8 	movw	r1, #42200	; 0xa4d8
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005dca:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005dcc:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8005dd0:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005dd4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005dd8:	1c7a      	adds	r2, r7, #1
 8005dda:	462b      	mov	r3, r5
 8005ddc:	9100      	str	r1, [sp, #0]
 8005dde:	4630      	mov	r0, r6
 8005de0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005de4:	f7fc f82c 	bl	8001e40 <chThdCreateStatic>
 8005de8:	f242 0410 	movw	r4, #8208	; 0x2010
 8005dec:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005df0:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005df2:	f64a 005c 	movw	r0, #43100	; 0xa85c
 8005df6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005dfa:	1cba      	adds	r2, r7, #2
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	9000      	str	r0, [sp, #0]
 8005e00:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e04:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8005e08:	f7fc f81a 	bl	8001e40 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005e0c:	f24a 41c8 	movw	r1, #42184	; 0xa4c8
 8005e10:	f6c0 0100 	movt	r1, #2048	; 0x800

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005e14:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005e16:	1cfa      	adds	r2, r7, #3
 8005e18:	462b      	mov	r3, r5
 8005e1a:	9100      	str	r1, [sp, #0]
 8005e1c:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8005e20:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e24:	f7fc f80c 	bl	8001e40 <chThdCreateStatic>
 8005e28:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005e2a:	f24a 40cc 	movw	r0, #42188	; 0xa4cc
 8005e2e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005e32:	1d3a      	adds	r2, r7, #4
 8005e34:	462b      	mov	r3, r5
 8005e36:	9000      	str	r0, [sp, #0]
 8005e38:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e3c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8005e40:	f7fb fffe 	bl	8001e40 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005e44:	f24a 42d0 	movw	r2, #42192	; 0xa4d0
 8005e48:	f6c0 0200 	movt	r2, #2048	; 0x800

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005e4c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005e4e:	9200      	str	r2, [sp, #0]
 8005e50:	462b      	mov	r3, r5
 8005e52:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005e56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e5a:	1d7a      	adds	r2, r7, #5
 8005e5c:	f7fb fff0 	bl	8001e40 <chThdCreateStatic>
 8005e60:	2320      	movs	r3, #32
 8005e62:	6120      	str	r0, [r4, #16]
 8005e64:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005e68:	f7ff ff7a 	bl	8005d60 <chCondSignalI.constprop.48.4129>
  chCondSignalI(&c1);
 8005e6c:	f7ff ff78 	bl	8005d60 <chCondSignalI.constprop.48.4129>
  chCondSignalI(&c1);
 8005e70:	f7ff ff76 	bl	8005d60 <chCondSignalI.constprop.48.4129>
  chCondSignalI(&c1);
 8005e74:	f7ff ff74 	bl	8005d60 <chCondSignalI.constprop.48.4129>
  chCondSignalI(&c1);
 8005e78:	f7ff ff72 	bl	8005d60 <chCondSignalI.constprop.48.4129>
  chSchRescheduleS();
 8005e7c:	f7fb fe98 	bl	8001bb0 <chSchRescheduleS>
 8005e80:	2100      	movs	r1, #0
 8005e82:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  test_wait_threads();
 8005e86:	f7fc faeb 	bl	8002460 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005e8a:	f24a 41d4 	movw	r1, #42196	; 0xa4d4
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8005e94:	b003      	add	sp, #12
 8005e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005e9a:	f7fb bcb1 	b.w	8001800 <_test_assert_sequence>
 8005e9e:	bf00      	nop

08005ea0 <mtx7_execute.7295>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005ea0:	b530      	push	{r4, r5, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <mtx7_execute.7295+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005ea4:	4c2c      	ldr	r4, [pc, #176]	; (8005f58 <mtx7_execute.7295+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005ea6:	6998      	ldr	r0, [r3, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	6885      	ldr	r5, [r0, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005eac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005eb0:	1c6a      	adds	r2, r5, #1
 8005eb2:	9400      	str	r4, [sp, #0]
 8005eb4:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <mtx7_execute.7295+0xbc>)
 8005eb6:	482a      	ldr	r0, [pc, #168]	; (8005f60 <mtx7_execute.7295+0xc0>)
 8005eb8:	f7fb ffc2 	bl	8001e40 <chThdCreateStatic>
 8005ebc:	4c29      	ldr	r4, [pc, #164]	; (8005f64 <mtx7_execute.7295+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005ebe:	492a      	ldr	r1, [pc, #168]	; (8005f68 <mtx7_execute.7295+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005ec0:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005ec2:	1caa      	adds	r2, r5, #2
 8005ec4:	9100      	str	r1, [sp, #0]
 8005ec6:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <mtx7_execute.7295+0xbc>)
 8005ec8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ecc:	4827      	ldr	r0, [pc, #156]	; (8005f6c <mtx7_execute.7295+0xcc>)
 8005ece:	f7fb ffb7 	bl	8001e40 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005ed2:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <mtx7_execute.7295+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005ed4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005ed6:	1cea      	adds	r2, r5, #3
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <mtx7_execute.7295+0xbc>)
 8005ee0:	4824      	ldr	r0, [pc, #144]	; (8005f74 <mtx7_execute.7295+0xd4>)
 8005ee2:	f7fb ffad 	bl	8001e40 <chThdCreateStatic>
 8005ee6:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005ee8:	4823      	ldr	r0, [pc, #140]	; (8005f78 <mtx7_execute.7295+0xd8>)
 8005eea:	1d2a      	adds	r2, r5, #4
 8005eec:	9000      	str	r0, [sp, #0]
 8005eee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ef2:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <mtx7_execute.7295+0xbc>)
 8005ef4:	4821      	ldr	r0, [pc, #132]	; (8005f7c <mtx7_execute.7295+0xdc>)
 8005ef6:	f7fb ffa3 	bl	8001e40 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005efa:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <mtx7_execute.7295+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005efc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005efe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <mtx7_execute.7295+0xbc>)
 8005f06:	1d6a      	adds	r2, r5, #5
 8005f08:	481e      	ldr	r0, [pc, #120]	; (8005f84 <mtx7_execute.7295+0xe4>)
 8005f0a:	f7fb ff99 	bl	8001e40 <chThdCreateStatic>
 8005f0e:	6120      	str	r0, [r4, #16]
 8005f10:	2420      	movs	r4, #32
 8005f12:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005f16:	4c1c      	ldr	r4, [pc, #112]	; (8005f88 <mtx7_execute.7295+0xe8>)
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005f1c:	bf18      	it	ne
 8005f1e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005f22:	d009      	beq.n	8005f38 <mtx7_execute.7295+0x98>
 8005f24:	6819      	ldr	r1, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005f26:	4618      	mov	r0, r3
 8005f28:	604c      	str	r4, [r1, #4]
 8005f2a:	6021      	str	r1, [r4, #0]
 8005f2c:	f7fc f870 	bl	8002010 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005f30:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005f32:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	d1f5      	bne.n	8005f24 <mtx7_execute.7295+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8005f38:	f7fb fe3a 	bl	8001bb0 <chSchRescheduleS>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f380 8811 	msr	BASEPRI, r0
  chCondBroadcast(&c1);
  test_wait_threads();
 8005f42:	f7fc fa8d 	bl	8002460 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005f46:	4911      	ldr	r1, [pc, #68]	; (8005f8c <mtx7_execute.7295+0xec>)
 8005f48:	2001      	movs	r0, #1
}
 8005f4a:	b003      	add	sp, #12
 8005f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005f50:	f7fb bc56 	b.w	8001800 <_test_assert_sequence>
 8005f54:	20001ec0 	.word	0x20001ec0
 8005f58:	0800a4d8 	.word	0x0800a4d8
 8005f5c:	08006071 	.word	0x08006071
 8005f60:	20001850 	.word	0x20001850
 8005f64:	20002010 	.word	0x20002010
 8005f68:	0800a85c 	.word	0x0800a85c
 8005f6c:	20001998 	.word	0x20001998
 8005f70:	0800a4c8 	.word	0x0800a4c8
 8005f74:	20001ae0 	.word	0x20001ae0
 8005f78:	0800a4cc 	.word	0x0800a4cc
 8005f7c:	20001c28 	.word	0x20001c28
 8005f80:	0800a4d0 	.word	0x0800a4d0
 8005f84:	20001d70 	.word	0x20001d70
 8005f88:	20000820 	.word	0x20000820
 8005f8c:	0800a4d4 	.word	0x0800a4d4

08005f90 <chCondSignal.constprop.49.4123>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8005f90:	b508      	push	{r3, lr}
 8005f92:	2320      	movs	r3, #32
 8005f94:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <chCondSignal.constprop.49.4123+0x24>)
 8005f9a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue))
 8005f9c:	4298      	cmp	r0, r3
 8005f9e:	d005      	beq.n	8005fac <chCondSignal.constprop.49.4123+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005fa0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6053      	str	r3, [r2, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f7fb fed2 	bl	8001d50 <chSchWakeupS>
 8005fac:	2000      	movs	r0, #0
 8005fae:	f380 8811 	msr	BASEPRI, r0
 8005fb2:	bd08      	pop	{r3, pc}
 8005fb4:	20000820 	.word	0x20000820
 8005fb8:	f3af 8000 	nop.w
 8005fbc:	f3af 8000 	nop.w

08005fc0 <mtx8_execute.7281>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005fc0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005fc2:	f641 63c0 	movw	r3, #7872	; 0x1ec0
 8005fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005fca:	6998      	ldr	r0, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005fcc:	f641 0550 	movw	r5, #6224	; 0x1850
 8005fd0:	6886      	ldr	r6, [r0, #8]
 8005fd2:	f24a 44d0 	movw	r4, #42192	; 0xa4d0
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005fd6:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005fd8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005fdc:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005fe0:	f245 63a1 	movw	r3, #22177	; 0x56a1
 8005fe4:	1c72      	adds	r2, r6, #1
 8005fe6:	9400      	str	r4, [sp, #0]
 8005fe8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005fec:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f7fb ff25 	bl	8001e40 <chThdCreateStatic>
 8005ff6:	f242 0410 	movw	r4, #8208	; 0x2010
 8005ffa:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005ffe:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8006000:	f24a 40c8 	movw	r0, #42184	; 0xa4c8
 8006004:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006008:	f6c0 0000 	movt	r0, #2048	; 0x800
 800600c:	f246 0371 	movw	r3, #24689	; 0x6071
 8006010:	1cb2      	adds	r2, r6, #2
 8006012:	9000      	str	r0, [sp, #0]
 8006014:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006018:	1868      	adds	r0, r5, r1
 800601a:	f7fb ff11 	bl	8001e40 <chThdCreateStatic>
 800601e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8006020:	f24a 40cc 	movw	r0, #42188	; 0xa4cc
 8006024:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006028:	f242 23c1 	movw	r3, #8897	; 0x22c1
 800602c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006030:	1cf2      	adds	r2, r6, #3
 8006032:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006036:	9000      	str	r0, [sp, #0]
 8006038:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800603c:	f7fb ff00 	bl	8001e40 <chThdCreateStatic>
 8006040:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8006042:	f7ff ffa5 	bl	8005f90 <chCondSignal.constprop.49.4123>
  chCondSignal(&c1);
 8006046:	f7ff ffa3 	bl	8005f90 <chCondSignal.constprop.49.4123>
  test_wait_threads();
 800604a:	f7fc fa09 	bl	8002460 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800604e:	f64a 2140 	movw	r1, #43584	; 0xaa40
 8006052:	2001      	movs	r0, #1
 8006054:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8006058:	b002      	add	sp, #8
 800605a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 800605e:	f7fb bbcf 	b.w	8001800 <_test_assert_sequence>
 8006062:	bf00      	nop
 8006064:	f3af 8000 	nop.w
 8006068:	f3af 8000 	nop.w
 800606c:	f3af 8000 	nop.w

08006070 <thread10.7266.4114>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	4607      	mov	r7, r0

  chMtxLock(&m1);
 8006074:	4815      	ldr	r0, [pc, #84]	; (80060cc <thread10.7266.4114+0x5c>)
 8006076:	f7fc f8fb 	bl	8002270 <chMtxLock>
 800607a:	2320      	movs	r3, #32
 800607c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8006080:	4813      	ldr	r0, [pc, #76]	; (80060d0 <thread10.7266.4114+0x60>)
 8006082:	6984      	ldr	r4, [r0, #24]
 8006084:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8006086:	4630      	mov	r0, r6
 8006088:	f7fc f862 	bl	8002150 <chMtxUnlockS>
  ctp->p_u.wtobjp = cp;
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <thread10.7266.4114+0x64>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800608e:	461d      	mov	r5, r3
 8006090:	6223      	str	r3, [r4, #32]
  do {
    cp = cp->p_next;
 8006092:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8006094:	42ab      	cmp	r3, r5
 8006096:	d003      	beq.n	80060a0 <thread10.7266.4114+0x30>
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	68a2      	ldr	r2, [r4, #8]
 800609c:	4291      	cmp	r1, r2
 800609e:	d2f8      	bcs.n	8006092 <thread10.7266.4114+0x22>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80060a0:	6858      	ldr	r0, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80060a2:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80060a4:	6060      	str	r0, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80060a6:	6004      	str	r4, [r0, #0]
 80060a8:	605c      	str	r4, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 80060aa:	2007      	movs	r0, #7
 80060ac:	f7fb ff08 	bl	8001ec0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7fc f875 	bl	80021a0 <chMtxLockS>
 80060b6:	2400      	movs	r4, #0
 80060b8:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 80060bc:	7838      	ldrb	r0, [r7, #0]
 80060be:	f7fb fbff 	bl	80018c0 <test_emit_token>
  chMtxUnlock(&m1);
 80060c2:	4802      	ldr	r0, [pc, #8]	; (80060cc <thread10.7266.4114+0x5c>)
 80060c4:	f7fb fe74 	bl	8001db0 <chMtxUnlock>
  return 0;
}
 80060c8:	4620      	mov	r0, r4
 80060ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060cc:	20000800 	.word	0x20000800
 80060d0:	20001ec0 	.word	0x20001ec0
 80060d4:	20000820 	.word	0x20000820
 80060d8:	f3af 8000 	nop.w
 80060dc:	f3af 8000 	nop.w

080060e0 <Vector8C>:
 */
CH_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  CH_IRQ_PROLOGUE();

  CH_IRQ_EPILOGUE();
 80060e0:	f7fb bf66 	b.w	8001fb0 <_port_irq_epilogue>
 80060e4:	f3af 8000 	nop.w
 80060e8:	f3af 8000 	nop.w
 80060ec:	f3af 8000 	nop.w

080060f0 <VectorB8>:
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);
 80060f0:	f641 0030 	movw	r0, #6192	; 0x1830
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80060f4:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);
 80060f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80060fa:	f7ff fdd9 	bl	8005cb0 <gpt_lld_serve_interrupt.10064.4525>

  OSAL_IRQ_EPILOGUE();
}
 80060fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 8006102:	f7fb bf55 	b.w	8001fb0 <_port_irq_epilogue>
 8006106:	bf00      	nop
 8006108:	f3af 8000 	nop.w
 800610c:	f3af 8000 	nop.w

08006110 <VectorB4>:
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);
 8006110:	f641 0020 	movw	r0, #6176	; 0x1820
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8006114:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);
 8006116:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800611a:	f7ff fdc9 	bl	8005cb0 <gpt_lld_serve_interrupt.10064.4525>

  OSAL_IRQ_EPILOGUE();
}
 800611e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 8006122:	f7fb bf45 	b.w	8001fb0 <_port_irq_epilogue>
 8006126:	bf00      	nop
 8006128:	f3af 8000 	nop.w
 800612c:	f3af 8000 	nop.w

08006130 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8006130:	2300      	movs	r3, #0
 8006132:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006136:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8006138:	4806      	ldr	r0, [pc, #24]	; (8006154 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 800613a:	f3c1 6103 	ubfx	r1, r1, #24, #4
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 800613e:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8006140:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 8006142:	060c      	lsls	r4, r1, #24
 8006144:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8006146:	b10a      	cbz	r2, 800614c <Vector84+0x1c>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8006148:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800614a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006150:	f7fb bf2e 	b.w	8001fb0 <_port_irq_epilogue>
 8006154:	20001524 	.word	0x20001524
 8006158:	f3af 8000 	nop.w
 800615c:	f3af 8000 	nop.w

08006160 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8006160:	2300      	movs	r3, #0
 8006162:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006166:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8006168:	4806      	ldr	r0, [pc, #24]	; (8006184 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 800616a:	f3c1 5103 	ubfx	r1, r1, #20, #4
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 800616e:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8006170:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 8006172:	050c      	lsls	r4, r1, #20
 8006174:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8006176:	b10a      	cbz	r2, 800617c <Vector80+0x1c>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8006178:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800617a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800617c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006180:	f7fb bf16 	b.w	8001fb0 <_port_irq_epilogue>
 8006184:	20001524 	.word	0x20001524
 8006188:	f3af 8000 	nop.w
 800618c:	f3af 8000 	nop.w

08006190 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8006190:	2300      	movs	r3, #0
 8006192:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006196:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8006198:	4806      	ldr	r0, [pc, #24]	; (80061b4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 800619a:	f3c1 4103 	ubfx	r1, r1, #16, #4
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 800619e:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80061a0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 80061a2:	040c      	lsls	r4, r1, #16
 80061a4:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80061a6:	b10a      	cbz	r2, 80061ac <Vector7C+0x1c>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80061a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80061aa:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80061ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80061b0:	f7fb befe 	b.w	8001fb0 <_port_irq_epilogue>
 80061b4:	20001524 	.word	0x20001524
 80061b8:	f3af 8000 	nop.w
 80061bc:	f3af 8000 	nop.w

080061c0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061c6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80061c8:	4806      	ldr	r0, [pc, #24]	; (80061e4 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80061ca:	f3c1 3103 	ubfx	r1, r1, #12, #4
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80061ce:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80061d0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 80061d2:	030c      	lsls	r4, r1, #12
 80061d4:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 80061d6:	b10a      	cbz	r2, 80061dc <Vector78+0x1c>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80061d8:	69c0      	ldr	r0, [r0, #28]
 80061da:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80061dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80061e0:	f7fb bee6 	b.w	8001fb0 <_port_irq_epilogue>
 80061e4:	20001524 	.word	0x20001524
 80061e8:	f3af 8000 	nop.w
 80061ec:	f3af 8000 	nop.w

080061f0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061f6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 80061f8:	4806      	ldr	r0, [pc, #24]	; (8006214 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 80061fa:	f3c1 2103 	ubfx	r1, r1, #8, #4
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 80061fe:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8006200:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 8006202:	020c      	lsls	r4, r1, #8
 8006204:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8006206:	b10a      	cbz	r2, 800620c <Vector74+0x1c>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8006208:	6940      	ldr	r0, [r0, #20]
 800620a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006210:	f7fb bece 	b.w	8001fb0 <_port_irq_epilogue>
 8006214:	20001524 	.word	0x20001524
 8006218:	f3af 8000 	nop.w
 800621c:	f3af 8000 	nop.w

08006220 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8006220:	2300      	movs	r3, #0
 8006222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006226:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8006228:	4806      	ldr	r0, [pc, #24]	; (8006244 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 800622a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 800622e:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8006230:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 8006232:	010c      	lsls	r4, r1, #4
 8006234:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8006236:	b10a      	cbz	r2, 800623c <Vector70+0x1c>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8006238:	68c0      	ldr	r0, [r0, #12]
 800623a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800623c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006240:	f7fb beb6 	b.w	8001fb0 <_port_irq_epilogue>
 8006244:	20001524 	.word	0x20001524
 8006248:	f3af 8000 	nop.w
 800624c:	f3af 8000 	nop.w

08006250 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8006250:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8006252:	2300      	movs	r3, #0
 8006254:	f2c4 0302 	movt	r3, #16386	; 0x4002
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8006258:	4806      	ldr	r0, [pc, #24]	; (8006274 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800625a:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800625c:	6802      	ldr	r2, [r0, #0]
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800625e:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 8006262:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 8006264:	b10a      	cbz	r2, 800626a <Vector6C+0x1a>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8006266:	6840      	ldr	r0, [r0, #4]
 8006268:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800626a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800626e:	f7fb be9f 	b.w	8001fb0 <_port_irq_epilogue>
 8006272:	bf00      	nop
 8006274:	20001524 	.word	0x20001524
 8006278:	f3af 8000 	nop.w
 800627c:	f3af 8000 	nop.w

08006280 <thread8.8448>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d0b      	ldr	r5, [pc, #44]	; (80062b0 <thread8.8448+0x30>)
 8006284:	4604      	mov	r4, r0

  do {
    chThdYield();
 8006286:	f7fb fc13 	bl	8001ab0 <chThdYield>
    chThdYield();
 800628a:	f7fb fc11 	bl	8001ab0 <chThdYield>
    chThdYield();
 800628e:	f7fb fc0f 	bl	8001ab0 <chThdYield>
    chThdYield();
 8006292:	f7fb fc0d 	bl	8001ab0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8006296:	6822      	ldr	r2, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8006298:	69ab      	ldr	r3, [r5, #24]
 800629a:	1d10      	adds	r0, r2, #4
 800629c:	6020      	str	r0, [r4, #0]
 800629e:	7f59      	ldrb	r1, [r3, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 80062a0:	f001 0204 	and.w	r2, r1, #4
 80062a4:	b2d3      	uxtb	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0ed      	beq.n	8006286 <thread8.8448+0x6>
  return 0;
}
 80062aa:	2000      	movs	r0, #0
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	bf00      	nop
 80062b0:	20001ec0 	.word	0x20001ec0
 80062b4:	f3af 8000 	nop.w
 80062b8:	f3af 8000 	nop.w
 80062bc:	f3af 8000 	nop.w

080062c0 <thread3.8451>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 80062c0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80062c2:	4c07      	ldr	r4, [pc, #28]	; (80062e0 <thread3.8451+0x20>)
 80062c4:	e002      	b.n	80062cc <thread3.8451+0xc>

  (void)p;
  while (!chThdShouldTerminateX())
    chSemWait(&sem1);
 80062c6:	4807      	ldr	r0, [pc, #28]	; (80062e4 <thread3.8451+0x24>)
 80062c8:	f7fb fe32 	bl	8001f30 <chSemWait>
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 80062cc:	69a3      	ldr	r3, [r4, #24]
 80062ce:	7f58      	ldrb	r0, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 80062d0:	f000 0104 	and.w	r1, r0, #4
 80062d4:	b2ca      	uxtb	r2, r1
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d0f5      	beq.n	80062c6 <thread3.8451+0x6>
    chSemWait(&sem1);
  return 0;
}
 80062da:	2000      	movs	r0, #0
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	20001ec0 	.word	0x20001ec0
 80062e4:	2000179c 	.word	0x2000179c
 80062e8:	f3af 8000 	nop.w
 80062ec:	f3af 8000 	nop.w

080062f0 <bmk13_execute.8460>:
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 80062f0:	f64a 2044 	movw	r0, #43588	; 0xaa44
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 80062f4:	b510      	push	{r4, lr}

  test_print("--- System: ");
 80062f6:	f6c0 0000 	movt	r0, #2048	; 0x800
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 80062fa:	f64a 2454 	movw	r4, #43604	; 0xaa54
 80062fe:	f6c0 0400 	movt	r4, #2048	; 0x800
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8006302:	f7fb fb2d 	bl	8001960 <test_print>
  test_printn(sizeof(ch_system_t));
 8006306:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800630a:	f7fb fb39 	bl	8001980 <test_printn>
  test_println(" bytes");
 800630e:	4620      	mov	r0, r4
 8006310:	f7fb fb0e 	bl	8001930 <test_println>
  test_print("--- Thread: ");
 8006314:	f64a 205c 	movw	r0, #43612	; 0xaa5c
 8006318:	f6c0 0000 	movt	r0, #2048	; 0x800
 800631c:	f7fb fb20 	bl	8001960 <test_print>
  test_printn(sizeof(thread_t));
 8006320:	2044      	movs	r0, #68	; 0x44
 8006322:	f7fb fb2d 	bl	8001980 <test_printn>
  test_println(" bytes");
 8006326:	4620      	mov	r0, r4
 8006328:	f7fb fb02 	bl	8001930 <test_println>
  test_print("--- Timer : ");
 800632c:	f64a 206c 	movw	r0, #43628	; 0xaa6c
 8006330:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006334:	f7fb fb14 	bl	8001960 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8006338:	2014      	movs	r0, #20
 800633a:	f7fb fb21 	bl	8001980 <test_printn>
  test_println(" bytes");
 800633e:	4620      	mov	r0, r4
 8006340:	f7fb faf6 	bl	8001930 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 8006344:	f64a 207c 	movw	r0, #43644	; 0xaa7c
 8006348:	f6c0 0000 	movt	r0, #2048	; 0x800
 800634c:	f7fb fb08 	bl	8001960 <test_print>
  test_printn(sizeof(semaphore_t));
 8006350:	200c      	movs	r0, #12
 8006352:	f7fb fb15 	bl	8001980 <test_printn>
  test_println(" bytes");
 8006356:	4620      	mov	r0, r4
 8006358:	f7fb faea 	bl	8001930 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800635c:	f64a 208c 	movw	r0, #43660	; 0xaa8c
 8006360:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006364:	f7fb fafc 	bl	8001960 <test_print>
  test_printn(sizeof(event_source_t));
 8006368:	2004      	movs	r0, #4
 800636a:	f7fb fb09 	bl	8001980 <test_printn>
  test_println(" bytes");
 800636e:	4620      	mov	r0, r4
 8006370:	f7fb fade 	bl	8001930 <test_println>
  test_print("--- EventL: ");
 8006374:	f64a 209c 	movw	r0, #43676	; 0xaa9c
 8006378:	f6c0 0000 	movt	r0, #2048	; 0x800
 800637c:	f7fb faf0 	bl	8001960 <test_print>
  test_printn(sizeof(event_listener_t));
 8006380:	2014      	movs	r0, #20
 8006382:	f7fb fafd 	bl	8001980 <test_printn>
  test_println(" bytes");
 8006386:	4620      	mov	r0, r4
 8006388:	f7fb fad2 	bl	8001930 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 800638c:	f64a 20ac 	movw	r0, #43692	; 0xaaac
 8006390:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006394:	f7fb fae4 	bl	8001960 <test_print>
  test_printn(sizeof(mutex_t));
 8006398:	2010      	movs	r0, #16
 800639a:	f7fb faf1 	bl	8001980 <test_printn>
  test_println(" bytes");
 800639e:	4620      	mov	r0, r4
 80063a0:	f7fb fac6 	bl	8001930 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 80063a4:	f64a 20bc 	movw	r0, #43708	; 0xaabc
 80063a8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80063ac:	f7fb fad8 	bl	8001960 <test_print>
  test_printn(sizeof(condition_variable_t));
 80063b0:	2008      	movs	r0, #8
 80063b2:	f7fb fae5 	bl	8001980 <test_printn>
  test_println(" bytes");
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7fb faba 	bl	8001930 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 80063bc:	f64a 20cc 	movw	r0, #43724	; 0xaacc
 80063c0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80063c4:	f7fb facc 	bl	8001960 <test_print>
  test_printn(sizeof(io_queue_t));
 80063c8:	2024      	movs	r0, #36	; 0x24
 80063ca:	f7fb fad9 	bl	8001980 <test_printn>
  test_println(" bytes");
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7fb faae 	bl	8001930 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 80063d4:	f64a 20dc 	movw	r0, #43740	; 0xaadc
 80063d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80063dc:	f7fb fac0 	bl	8001960 <test_print>
  test_printn(sizeof(mailbox_t));
 80063e0:	2028      	movs	r0, #40	; 0x28
 80063e2:	f7fb facd 	bl	8001980 <test_printn>
  test_println(" bytes");
 80063e6:	4620      	mov	r0, r4
#endif
}
 80063e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80063ec:	f7fb baa0 	b.w	8001930 <test_println>

080063f0 <chSemSignalWait.constprop.52>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80063f0:	b510      	push	{r4, lr}
 80063f2:	2320      	movs	r3, #32
 80063f4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
 80063f8:	4c14      	ldr	r4, [pc, #80]	; (800644c <chSemSignalWait.constprop.52+0x5c>)
 80063fa:	68a0      	ldr	r0, [r4, #8]
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	60a3      	str	r3, [r4, #8]
 8006402:	dd18      	ble.n	8006436 <chSemSignalWait.constprop.52+0x46>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
 8006404:	1e58      	subs	r0, r3, #1
 8006406:	2800      	cmp	r0, #0
 8006408:	60a0      	str	r0, [r4, #8]
 800640a:	4a10      	ldr	r2, [pc, #64]	; (800644c <chSemSignalWait.constprop.52+0x5c>)
 800640c:	db06      	blt.n	800641c <chSemSignalWait.constprop.52+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800640e:	f7fb fbcf 	bl	8001bb0 <chSchRescheduleS>
    msg = MSG_OK;
 8006412:	2000      	movs	r0, #0
 8006414:	2100      	movs	r1, #0
 8006416:	f381 8811 	msr	BASEPRI, r1
  }
  chSysUnlock();
  return msg;
}
 800641a:	bd10      	pop	{r4, pc}

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 800641c:	4c0c      	ldr	r4, [pc, #48]	; (8006450 <chSemSignalWait.constprop.52+0x60>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800641e:	6853      	ldr	r3, [r2, #4]
 8006420:	69a4      	ldr	r4, [r4, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8006422:	2005      	movs	r0, #5
 8006424:	e884 000c 	stmia.w	r4, {r2, r3}
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 8006428:	6222      	str	r2, [r4, #32]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800642a:	6054      	str	r4, [r2, #4]
 800642c:	601c      	str	r4, [r3, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 800642e:	f7fb fd47 	bl	8001ec0 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8006432:	6a20      	ldr	r0, [r4, #32]
 8006434:	e7ee      	b.n	8006414 <chSemSignalWait.constprop.52+0x24>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006436:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006438:	6801      	ldr	r1, [r0, #0]
 800643a:	604c      	str	r4, [r1, #4]
 800643c:	6021      	str	r1, [r4, #0]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 800643e:	f7fb fde7 	bl	8002010 <chSchReadyI>
 8006442:	2200      	movs	r2, #0
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	6202      	str	r2, [r0, #32]
 8006448:	e7dc      	b.n	8006404 <chSemSignalWait.constprop.52+0x14>
 800644a:	bf00      	nop
 800644c:	20000c48 	.word	0x20000c48
 8006450:	20001ec0 	.word	0x20001ec0
 8006454:	f3af 8000 	nop.w
 8006458:	f3af 8000 	nop.w
 800645c:	f3af 8000 	nop.w

08006460 <chEvtGetAndClearEvents.constprop.42>:
 8006460:	2320      	movs	r3, #32
 8006462:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8006466:	f641 60c0 	movw	r0, #7872	; 0x1ec0
 800646a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800646e:	6982      	ldr	r2, [r0, #24]
  currp->p_epending &= ~events;
 8006470:	2100      	movs	r1, #0
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8006472:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8006474:	6351      	str	r1, [r2, #52]	; 0x34
 8006476:	f381 8811 	msr	BASEPRI, r1

  chSysUnlock();
  return m;
}
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <evt1_setup.7710>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8006480:	f7ff bfee 	b.w	8006460 <chEvtGetAndClearEvents.constprop.42>
 8006484:	f3af 8000 	nop.w
 8006488:	f3af 8000 	nop.w
 800648c:	f3af 8000 	nop.w

08006490 <evt2_setup.7708>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8006490:	f7ff bfe6 	b.w	8006460 <chEvtGetAndClearEvents.constprop.42>
 8006494:	f3af 8000 	nop.w
 8006498:	f3af 8000 	nop.w
 800649c:	f3af 8000 	nop.w

080064a0 <evt3_setup.7706>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80064a0:	f7ff bfde 	b.w	8006460 <chEvtGetAndClearEvents.constprop.42>
 80064a4:	f3af 8000 	nop.w
 80064a8:	f3af 8000 	nop.w
 80064ac:	f3af 8000 	nop.w

080064b0 <chEvtWaitOne.constprop.38>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <chEvtWaitOne.constprop.38+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 80064b2:	b510      	push	{r4, lr}
 80064b4:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 80064b6:	699c      	ldr	r4, [r3, #24]
 80064b8:	f380 8811 	msr	BASEPRI, r0
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80064bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80064be:	b932      	cbnz	r2, 80064ce <chEvtWaitOne.constprop.38+0x1e>
    ctp->p_u.ewmask = events;
 80064c0:	f04f 31ff 	mov.w	r1, #4294967295
 80064c4:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80064c6:	200a      	movs	r0, #10
 80064c8:	f7fb fcfa 	bl	8001ec0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80064cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 80064ce:	4250      	negs	r0, r2
 80064d0:	4010      	ands	r0, r2
  ctp->p_epending &= ~m;
 80064d2:	ea22 0200 	bic.w	r2, r2, r0
 80064d6:	6362      	str	r2, [r4, #52]	; 0x34
 80064d8:	2300      	movs	r3, #0
 80064da:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 80064de:	bd10      	pop	{r4, pc}
 80064e0:	20001ec0 	.word	0x20001ec0
 80064e4:	f3af 8000 	nop.w
 80064e8:	f3af 8000 	nop.w
 80064ec:	f3af 8000 	nop.w

080064f0 <chEvtWaitAny.constprop.37>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <chEvtWaitAny.constprop.37+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 80064f2:	b510      	push	{r4, lr}
 80064f4:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 80064f6:	699c      	ldr	r4, [r3, #24]
 80064f8:	f380 8811 	msr	BASEPRI, r0
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80064fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80064fe:	b930      	cbnz	r0, 800650e <chEvtWaitAny.constprop.37+0x1e>
    ctp->p_u.ewmask = events;
 8006500:	f04f 31ff 	mov.w	r1, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006504:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8006506:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8006508:	f7fb fcda 	bl	8001ec0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800650c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800650e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006510:	2300      	movs	r3, #0
 8006512:	ea22 0200 	bic.w	r2, r2, r0
 8006516:	6362      	str	r2, [r4, #52]	; 0x34
 8006518:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 800651c:	bd10      	pop	{r4, pc}
 800651e:	bf00      	nop
 8006520:	20001ec0 	.word	0x20001ec0
	...

08006530 <chMBPostI.constprop.29>:
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <chMBPostI.constprop.29+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8006532:	b510      	push	{r4, lr}
 8006534:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8006536:	2900      	cmp	r1, #0
 8006538:	dd10      	ble.n	800655c <chMBPostI.constprop.29+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800653a:	689a      	ldr	r2, [r3, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800653c:	3901      	subs	r1, #1
  if (mbp->mb_wrptr >= mbp->mb_top)
 800653e:	685c      	ldr	r4, [r3, #4]
 8006540:	6259      	str	r1, [r3, #36]	; 0x24
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006542:	f842 0b04 	str.w	r0, [r2], #4
  if (mbp->mb_wrptr >= mbp->mb_top)
 8006546:	42a2      	cmp	r2, r4
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8006548:	609a      	str	r2, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 800654a:	bf28      	it	cs
 800654c:	681a      	ldrcs	r2, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 800654e:	4806      	ldr	r0, [pc, #24]	; (8006568 <chMBPostI.constprop.29+0x38>)
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 8006550:	bf28      	it	cs
 8006552:	609a      	strcs	r2, [r3, #8]
  chSemSignalI(&mbp->mb_fullsem);
 8006554:	f7fc fb54 	bl	8002c00 <chSemSignalI>
  return MSG_OK;
 8006558:	2000      	movs	r0, #0
 800655a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 8006560:	bd10      	pop	{r4, pc}
 8006562:	bf00      	nop
 8006564:	20000ce0 	.word	0x20000ce0
 8006568:	20000cf0 	.word	0x20000cf0
 800656c:	f3af 8000 	nop.w

08006570 <chMBPostAheadI.constprop.27>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <chMBPostAheadI.constprop.27+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8006572:	b510      	push	{r4, lr}
 8006574:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8006576:	2900      	cmp	r1, #0
 8006578:	dd10      	ble.n	800659c <chMBPostAheadI.constprop.27+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	681c      	ldr	r4, [r3, #0]
 800657e:	3a04      	subs	r2, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8006580:	3901      	subs	r1, #1
 8006582:	42a2      	cmp	r2, r4
 8006584:	6259      	str	r1, [r3, #36]	; 0x24
 8006586:	60da      	str	r2, [r3, #12]
 8006588:	d202      	bcs.n	8006590 <chMBPostAheadI.constprop.27+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	3a04      	subs	r2, #4
 800658e:	60da      	str	r2, [r3, #12]
  *mbp->mb_rdptr = msg;
 8006590:	6010      	str	r0, [r2, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8006592:	4805      	ldr	r0, [pc, #20]	; (80065a8 <chMBPostAheadI.constprop.27+0x38>)
 8006594:	f7fc fb34 	bl	8002c00 <chSemSignalI>
  return MSG_OK;
 8006598:	2000      	movs	r0, #0
 800659a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
  if (--mbp->mb_rdptr < mbp->mb_buffer)
    mbp->mb_rdptr = mbp->mb_top - 1;
  *mbp->mb_rdptr = msg;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	bf00      	nop
 80065a4:	20000ce0 	.word	0x20000ce0
 80065a8:	20000cf0 	.word	0x20000cf0
 80065ac:	f3af 8000 	nop.w

080065b0 <chMBFetchI.constprop.25>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <chMBFetchI.constprop.25+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80065b2:	b510      	push	{r4, lr}
 80065b4:	6999      	ldr	r1, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
 80065b6:	2900      	cmp	r1, #0
 80065b8:	dd11      	ble.n	80065de <chMBFetchI.constprop.25+0x2e>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80065ba:	68da      	ldr	r2, [r3, #12]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 80065bc:	1e4c      	subs	r4, r1, #1
 80065be:	619c      	str	r4, [r3, #24]
 80065c0:	f852 4b04 	ldr.w	r4, [r2], #4
  if (mbp->mb_rdptr >= mbp->mb_top)
 80065c4:	6859      	ldr	r1, [r3, #4]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80065c6:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top)
 80065c8:	428a      	cmp	r2, r1
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80065ca:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 80065cc:	bf28      	it	cs
 80065ce:	681a      	ldrcs	r2, [r3, #0]
  chSemSignalI(&mbp->mb_emptysem);
 80065d0:	4805      	ldr	r0, [pc, #20]	; (80065e8 <chMBFetchI.constprop.25+0x38>)
  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 80065d2:	bf28      	it	cs
 80065d4:	60da      	strcs	r2, [r3, #12]
  chSemSignalI(&mbp->mb_emptysem);
 80065d6:	f7fc fb13 	bl	8002c00 <chSemSignalI>
  return MSG_OK;
 80065da:	2000      	movs	r0, #0
 80065dc:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
 80065de:	f04f 30ff 	mov.w	r0, #4294967295
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_emptysem);
  return MSG_OK;
}
 80065e2:	bd10      	pop	{r4, pc}
 80065e4:	20000ce0 	.word	0x20000ce0
 80065e8:	20000cfc 	.word	0x20000cfc
 80065ec:	00000000 	.word	0x00000000

080065f0 <dmaStreamAllocate.constprop.11>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 80065f0:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 80065f2:	7a43      	ldrb	r3, [r0, #9]
 80065f4:	2701      	movs	r7, #1
 80065f6:	fa07 f503 	lsl.w	r5, r7, r3
 80065fa:	4c21      	ldr	r4, [pc, #132]	; (8006680 <dmaStreamAllocate.constprop.11+0x90>)
 80065fc:	6826      	ldr	r6, [r4, #0]
 80065fe:	4235      	tst	r5, r6
 8006600:	d13a      	bne.n	8006678 <dmaStreamAllocate.constprop.11+0x88>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8006602:	4f20      	ldr	r7, [pc, #128]	; (8006684 <dmaStreamAllocate.constprop.11+0x94>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8006604:	4335      	orrs	r5, r6
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8006606:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800660a:	eb07 06c3 	add.w	r6, r7, r3, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800660e:	066b      	lsls	r3, r5, #25
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8006610:	6072      	str	r2, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);
 8006612:	6025      	str	r5, [r4, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8006614:	d007      	beq.n	8006626 <dmaStreamAllocate.constprop.11+0x36>
    rccEnableDMA1(FALSE);
 8006616:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800661a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800661e:	6962      	ldr	r2, [r4, #20]
 8006620:	f042 0501 	orr.w	r5, r2, #1
 8006624:	6165      	str	r5, [r4, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	6842      	ldr	r2, [r0, #4]
 800662a:	681f      	ldr	r7, [r3, #0]
 800662c:	250f      	movs	r5, #15
 800662e:	f027 040f 	bic.w	r4, r7, #15
 8006632:	601c      	str	r4, [r3, #0]
 8006634:	7a04      	ldrb	r4, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8006636:	2700      	movs	r7, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8006638:	fa05 f404 	lsl.w	r4, r5, r4
 800663c:	6014      	str	r4, [r2, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800663e:	601f      	str	r7, [r3, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8006640:	b1e1      	cbz	r1, 800667c <dmaStreamAllocate.constprop.11+0x8c>
    nvicEnableVector(dmastp->vector, priority);
 8006642:	7a80      	ldrb	r0, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8006644:	2401      	movs	r4, #1
 8006646:	f000 011f 	and.w	r1, r0, #31
 800664a:	fa04 f401 	lsl.w	r4, r4, r1
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800664e:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8006652:	0941      	lsrs	r1, r0, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8006654:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8006658:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800665c:	f505 4261 	add.w	r2, r5, #57600	; 0xe100
 8006660:	20a0      	movs	r0, #160	; 0xa0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8006662:	f101 0560 	add.w	r5, r1, #96	; 0x60
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8006666:	f882 0300 	strb.w	r0, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800666a:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800666e:	4638      	mov	r0, r7
 8006670:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

  return FALSE;
}
 8006674:	bcf0      	pop	{r4, r5, r6, r7}
 8006676:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 8006678:	4638      	mov	r0, r7
 800667a:	e7fb      	b.n	8006674 <dmaStreamAllocate.constprop.11+0x84>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800667c:	4608      	mov	r0, r1
 800667e:	e7f9      	b.n	8006674 <dmaStreamAllocate.constprop.11+0x84>
 8006680:	20000fc8 	.word	0x20000fc8
 8006684:	20001524 	.word	0x20001524
 8006688:	f3af 8000 	nop.w
 800668c:	f3af 8000 	nop.w

08006690 <_strtok.10608.constprop.4>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8006690:	b538      	push	{r3, r4, r5, lr}
  char *token;
  if (str)
 8006692:	4604      	mov	r4, r0
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8006694:	460d      	mov	r5, r1
  char *token;
  if (str)
 8006696:	b198      	cbz	r0, 80066c0 <_strtok.10608.constprop.4+0x30>
    *saveptr = str;
 8006698:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800669a:	490c      	ldr	r1, [pc, #48]	; (80066cc <_strtok.10608.constprop.4+0x3c>)
 800669c:	4620      	mov	r0, r4
 800669e:	f003 fe97 	bl	800a3d0 <strspn>
 80066a2:	1824      	adds	r4, r4, r0
  *saveptr = strpbrk(token, delim);
 80066a4:	4620      	mov	r0, r4
 80066a6:	4909      	ldr	r1, [pc, #36]	; (80066cc <_strtok.10608.constprop.4+0x3c>)
 80066a8:	f003 fe6a 	bl	800a380 <strpbrk>
 80066ac:	6028      	str	r0, [r5, #0]
  if (*saveptr)
 80066ae:	b118      	cbz	r0, 80066b8 <_strtok.10608.constprop.4+0x28>
    *(*saveptr)++ = '\0';
 80066b0:	2300      	movs	r3, #0
 80066b2:	f800 3b01 	strb.w	r3, [r0], #1
 80066b6:	6028      	str	r0, [r5, #0]

  return *token ? token : NULL;
 80066b8:	7820      	ldrb	r0, [r4, #0]
 80066ba:	b120      	cbz	r0, 80066c6 <_strtok.10608.constprop.4+0x36>
}
 80066bc:	4620      	mov	r0, r4
 80066be:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 80066c0:	680c      	ldr	r4, [r1, #0]

  if (!token)
 80066c2:	2c00      	cmp	r4, #0
 80066c4:	d1e9      	bne.n	800669a <_strtok.10608.constprop.4+0xa>
    return NULL;
 80066c6:	2400      	movs	r4, #0
  *saveptr = strpbrk(token, delim);
  if (*saveptr)
    *(*saveptr)++ = '\0';

  return *token ? token : NULL;
}
 80066c8:	4620      	mov	r0, r4
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	0800aaec 	.word	0x0800aaec

080066d0 <long_to_string_with_divisor.10737>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 80066d0:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bf08      	it	eq
 80066d6:	460b      	moveq	r3, r1
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 80066d8:	4607      	mov	r7, r0
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80066da:	f100 0c0b 	add.w	ip, r0, #11
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 80066de:	f100 050a 	add.w	r5, r0, #10
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 80066e2:	fbb1 f6f2 	udiv	r6, r1, r2
 80066e6:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 80066ea:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 80066ee:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 80066f0:	bfc8      	it	gt
 80066f2:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 80066f6:	b2e4      	uxtb	r4, r4
    l /= radix;
  } while ((ll /= radix) != 0);
 80066f8:	fbb3 f3f2 	udiv	r3, r3, r2
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 80066fc:	4628      	mov	r0, r5
    l /= radix;
 80066fe:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8006700:	f805 4901 	strb.w	r4, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ec      	bne.n	80066e2 <long_to_string_with_divisor.10737+0x12>

  i = (int)(p + MAX_FILLER - q);
 8006708:	ebc0 030c 	rsb	r3, r0, ip
 800670c:	43f9      	mvns	r1, r7
 800670e:	4602      	mov	r2, r0
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8006710:	18f8      	adds	r0, r7, r3
 8006712:	1843      	adds	r3, r0, r1
 8006714:	07d9      	lsls	r1, r3, #31
 8006716:	d50a      	bpl.n	800672e <long_to_string_with_divisor.10737+0x5e>
    l /= radix;
  } while ((ll /= radix) != 0);

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 8006718:	f807 4b01 	strb.w	r4, [r7], #1
 800671c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8006720:	e005      	b.n	800672e <long_to_string_with_divisor.10737+0x5e>
 8006722:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8006726:	707c      	strb	r4, [r7, #1]
 8006728:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800672c:	1c5f      	adds	r7, r3, #1
 800672e:	463b      	mov	r3, r7
 8006730:	f803 4b01 	strb.w	r4, [r3], #1
  while (--i);
 8006734:	4283      	cmp	r3, r0
 8006736:	d1f4      	bne.n	8006722 <long_to_string_with_divisor.10737+0x52>

  return p;
}
 8006738:	bcf0      	pop	{r4, r5, r6, r7}
 800673a:	4770      	bx	lr
 800673c:	f3af 8000 	nop.w

08006740 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8006740:	8902      	ldrh	r2, [r0, #8]
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8006742:	b470      	push	{r4, r5, r6}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8006744:	fa42 f301 	asr.w	r3, r2, r1
 8006748:	f013 0301 	ands.w	r3, r3, #1
 800674c:	d002      	beq.n	8006754 <usbStartTransmitI+0x14>
    return TRUE;
 800674e:	2001      	movs	r0, #1

  usbp->transmitting |= (1 << ep);
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 8006750:	bc70      	pop	{r4, r5, r6}
 8006752:	4770      	bx	lr
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
    return TRUE;

  usbp->transmitting |= (1 << ep);
 8006754:	2601      	movs	r6, #1
 8006756:	fa06 f601 	lsl.w	r6, r6, r1
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800675a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 800675e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8006762:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8006766:	4332      	orrs	r2, r6
 8006768:	f425 45f0 	bic.w	r5, r5, #30720	; 0x7800
 800676c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8006770:	f085 0530 	eor.w	r5, r5, #48	; 0x30
 8006774:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return FALSE;
 8006776:	4618      	mov	r0, r3
 8006778:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
 800677c:	e7e8      	b.n	8006750 <usbStartTransmitI+0x10>
 800677e:	bf00      	nop

08006780 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8006780:	8942      	ldrh	r2, [r0, #10]
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8006782:	b470      	push	{r4, r5, r6}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8006784:	fa42 f301 	asr.w	r3, r2, r1
 8006788:	f013 0301 	ands.w	r3, r3, #1
 800678c:	d002      	beq.n	8006794 <usbStartReceiveI+0x14>
    return TRUE;
 800678e:	2001      	movs	r0, #1

  usbp->receiving |= (1 << ep);
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8006790:	bc70      	pop	{r4, r5, r6}
 8006792:	4770      	bx	lr
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
    return TRUE;

  usbp->receiving |= (1 << ep);
 8006794:	2601      	movs	r6, #1
 8006796:	fa06 f601 	lsl.w	r6, r6, r1
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800679a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 800679e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80067a2:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 80067a6:	4332      	orrs	r2, r6
 80067a8:	f425 4590 	bic.w	r5, r5, #18432	; 0x4800
 80067ac:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 80067b0:	f485 5540 	eor.w	r5, r5, #12288	; 0x3000
 80067b4:	8142      	strh	r2, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return FALSE;
 80067b6:	4618      	mov	r0, r3
 80067b8:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
 80067bc:	e7e8      	b.n	8006790 <usbStartReceiveI+0x10>
 80067be:	bf00      	nop

080067c0 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80067c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067c4:	68c8      	ldr	r0, [r1, #12]
 80067c6:	6983      	ldr	r3, [r0, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	b132      	cbz	r2, 80067da <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80067cc:	8a41      	ldrh	r1, [r0, #18]
 80067ce:	1e50      	subs	r0, r2, #1
 80067d0:	1842      	adds	r2, r0, r1
 80067d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80067d6:	8219      	strh	r1, [r3, #16]
 80067d8:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 80067da:	2001      	movs	r0, #1
 80067dc:	8218      	strh	r0, [r3, #16]
 80067de:	4770      	bx	lr

080067e0 <inotify.8835>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 80067e2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80067e4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	7819      	ldrb	r1, [r3, #0]
 80067ec:	2904      	cmp	r1, #4
 80067ee:	d000      	beq.n	80067f2 <inotify.8835+0x12>
 80067f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f2:	7a20      	ldrb	r0, [r4, #8]
 80067f4:	2802      	cmp	r0, #2
 80067f6:	d1fb      	bne.n	80067f0 <inotify.8835+0x10>
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 80067f8:	7952      	ldrb	r2, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 80067fa:	8959      	ldrh	r1, [r3, #10]
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 80067fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8006800:	fa41 f002 	asr.w	r0, r1, r2
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	8a53      	ldrh	r3, [r2, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8006808:	f010 0201 	ands.w	r2, r0, #1
 800680c:	d1f0      	bne.n	80067f0 <inotify.8835+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 800680e:	f104 0514 	add.w	r5, r4, #20
 8006812:	cd23      	ldmia	r5, {r0, r1, r5}
 8006814:	1a69      	subs	r1, r5, r1
 8006816:	1a08      	subs	r0, r1, r0
 8006818:	4283      	cmp	r3, r0
 800681a:	d8e9      	bhi.n	80067f0 <inotify.8835+0x10>
 800681c:	f382 8811 	msr	BASEPRI, r2
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
    usbPrepareQueuedReceive(sdup->config->usbp,
 8006820:	f8d4 7254 	ldr.w	r7, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8006824:	fbb0 f6f3 	udiv	r6, r0, r3
    usbPrepareQueuedReceive(sdup->config->usbp,
 8006828:	7979      	ldrb	r1, [r7, #5]
 800682a:	6838      	ldr	r0, [r7, #0]
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 800682c:	fb03 f306 	mul.w	r3, r3, r6
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006830:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8006834:	68ef      	ldr	r7, [r5, #12]
    usbPrepareQueuedReceive(sdup->config->usbp,
 8006836:	f104 060c 	add.w	r6, r4, #12
 800683a:	69bd      	ldr	r5, [r7, #24]

  osp->rxqueued           = TRUE;
 800683c:	2701      	movs	r7, #1
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800683e:	60aa      	str	r2, [r5, #8]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8006840:	702f      	strb	r7, [r5, #0]
  osp->mode.queue.rxqueue = iqp;
 8006842:	60ee      	str	r6, [r5, #12]
  osp->rxsize             = n;
 8006844:	606b      	str	r3, [r5, #4]
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8006846:	f7ff ffbb 	bl	80067c0 <usb_lld_prepare_receive>
 800684a:	2220      	movs	r2, #32
 800684c:	f382 8811 	msr	BASEPRI, r2
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8006850:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 8006854:	6808      	ldr	r0, [r1, #0]
 8006856:	7949      	ldrb	r1, [r1, #5]
  }
}
 8006858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedReceive(sdup->config->usbp,
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800685c:	f7ff bf90 	b.w	8006780 <usbStartReceiveI>

08006860 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8006860:	2200      	movs	r2, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8006862:	b470      	push	{r4, r5, r6}
 8006864:	4603      	mov	r3, r0
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8006866:	6844      	ldr	r4, [r0, #4]
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
  usbp->address       = 0;
 8006868:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 800686c:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
 8006870:	68e5      	ldr	r5, [r4, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8006872:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8006876:	f2c4 0400 	movt	r4, #16384	; 0x4000
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800687a:	2602      	movs	r6, #2
  usbp->status        = 0;
 800687c:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
  usbp->address       = 0;
  usbp->configuration = 0;
  usbp->transmitting  = 0;
 8006880:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 8006882:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8006884:	6102      	str	r2, [r0, #16]
 8006886:	6142      	str	r2, [r0, #20]
 8006888:	6182      	str	r2, [r0, #24]
 800688a:	61c2      	str	r2, [r0, #28]
 800688c:	6202      	str	r2, [r0, #32]
 800688e:	6242      	str	r2, [r0, #36]	; 0x24
 8006890:	6282      	str	r2, [r0, #40]	; 0x28

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006892:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8006896:	7006      	strb	r6, [r0, #0]
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
 8006898:	4295      	cmp	r5, r2
 800689a:	bf14      	ite	ne
 800689c:	f44f 451e 	movne.w	r5, #40448	; 0x9e00
 80068a0:	f44f 451c 	moveq.w	r5, #39936	; 0x9c00
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80068a4:	6522      	str	r2, [r4, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 80068a6:	4611      	mov	r1, r2
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 80068a8:	6462      	str	r2, [r4, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	64e2      	str	r2, [r4, #76]	; 0x4c
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 80068ae:	2240      	movs	r2, #64	; 0x40
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 80068b0:	6425      	str	r5, [r4, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 80068b2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 80068b6:	4a02      	ldr	r2, [pc, #8]	; (80068c0 <_usb_reset+0x60>)
 80068b8:	60c2      	str	r2, [r0, #12]
  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
}
 80068ba:	bc70      	pop	{r4, r5, r6}
  usb_lld_init_endpoint(usbp, 0);
 80068bc:	f7ff b980 	b.w	8005bc0 <usb_lld_init_endpoint.4464>
 80068c0:	0800a680 	.word	0x0800a680
 80068c4:	f3af 8000 	nop.w
 80068c8:	f3af 8000 	nop.w
 80068cc:	f3af 8000 	nop.w

080068d0 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 80068d0:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80068d2:	b570      	push	{r4, r5, r6, lr}
 80068d4:	4614      	mov	r4, r2
 80068d6:	4606      	mov	r6, r0
 80068d8:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 80068da:	b123      	cbz	r3, 80068e6 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80068dc:	4618      	mov	r0, r3
 80068de:	2100      	movs	r1, #0
 80068e0:	2210      	movs	r2, #16
 80068e2:	f003 fbd5 	bl	800a090 <memset>
  if (epcp->out_state != NULL)
 80068e6:	69a0      	ldr	r0, [r4, #24]
 80068e8:	b118      	cbz	r0, 80068f2 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80068ea:	2100      	movs	r1, #0
 80068ec:	2214      	movs	r2, #20
 80068ee:	f003 fbcf 	bl	800a090 <memset>

  usbp->epc[ep] = epcp;
 80068f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80068f6:	60c4      	str	r4, [r0, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80068f8:	4629      	mov	r1, r5
 80068fa:	4630      	mov	r0, r6
}
 80068fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8006900:	f7ff b95e 	b.w	8005bc0 <usb_lld_init_endpoint.4464>
 8006904:	f3af 8000 	nop.w
 8006908:	f3af 8000 	nop.w
 800690c:	f3af 8000 	nop.w

08006910 <gpt_lld_start_timer>:

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8006910:	6842      	ldr	r2, [r0, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8006912:	68c3      	ldr	r3, [r0, #12]
 8006914:	3901      	subs	r1, #1

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8006916:	6850      	ldr	r0, [r2, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8006918:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 800691a:	2200      	movs	r2, #0
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 800691c:	2101      	movs	r1, #1
 800691e:	6159      	str	r1, [r3, #20]
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8006922:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
 8006924:	b110      	cbz	r0, 800692c <gpt_lld_start_timer+0x1c>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8006926:	68d8      	ldr	r0, [r3, #12]
 8006928:	4308      	orrs	r0, r1
 800692a:	60d8      	str	r0, [r3, #12]
  gptp->tim->CR1   = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800692c:	2205      	movs	r2, #5
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	f3af 8000 	nop.w
 8006938:	f3af 8000 	nop.w
 800693c:	f3af 8000 	nop.w

08006940 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8006940:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8006942:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8006944:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8006946:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8006948:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800694a:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800694c:	6838      	ldr	r0, [r7, #0]
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800694e:	f046 0680 	orr.w	r6, r6, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8006952:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8006956:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006958:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800695a:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800695c:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800695e:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8006960:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f043 0101 	orr.w	r1, r3, #1
 8006968:	6021      	str	r1, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800696a:	6802      	ldr	r2, [r0, #0]
 800696c:	f042 0301 	orr.w	r3, r2, #1
 8006970:	6003      	str	r3, [r0, #0]
}
 8006972:	bcf0      	pop	{r4, r5, r6, r7}
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	f3af 8000 	nop.w
 800697c:	f3af 8000 	nop.w

08006980 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8006980:	6843      	ldr	r3, [r0, #4]
 8006982:	2101      	movs	r1, #1
 8006984:	891a      	ldrh	r2, [r3, #8]
 8006986:	6858      	ldr	r0, [r3, #4]
 8006988:	fa01 f302 	lsl.w	r3, r1, r2
 800698c:	6103      	str	r3, [r0, #16]
 800698e:	4770      	bx	lr

08006990 <spicb.11608>:


/*
 * SPI end transfer callback.
 */
static void spicb(SPIDriver *spip) {
 8006990:	b508      	push	{r3, lr}
 8006992:	2320      	movs	r3, #32
 8006994:	f383 8811 	msr	BASEPRI, r3
  /* On transfer end just releases the slave select line.*/
  chSysLockFromISR();
  spiUnselectI(spip);
 8006998:	f7ff fff2 	bl	8006980 <spi_lld_unselect>
 800699c:	2000      	movs	r0, #0
 800699e:	f380 8811 	msr	BASEPRI, r0
 80069a2:	bd08      	pop	{r3, pc}
 80069a4:	f3af 8000 	nop.w
 80069a8:	f3af 8000 	nop.w
 80069ac:	f3af 8000 	nop.w

080069b0 <mtx8_setup.7283>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80069b0:	f640 0120 	movw	r1, #2080	; 0x820
 80069b4:	f640 0200 	movw	r2, #2048	; 0x800
 80069b8:	f640 4338 	movw	r3, #3128	; 0xc38
 80069bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80069c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80069c4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80069c8:	2000      	movs	r0, #0
 80069ca:	6049      	str	r1, [r1, #4]
 80069cc:	6009      	str	r1, [r1, #0]
 80069ce:	6052      	str	r2, [r2, #4]
 80069d0:	6012      	str	r2, [r2, #0]
 80069d2:	6090      	str	r0, [r2, #8]
 80069d4:	605b      	str	r3, [r3, #4]
 80069d6:	601b      	str	r3, [r3, #0]
 80069d8:	6098      	str	r0, [r3, #8]
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 80069e4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80069e8:	f04f 0800 	mov.w	r8, #0
 80069ec:	f8c6 8010 	str.w	r8, [r6, #16]
 80069f0:	2720      	movs	r7, #32
 80069f2:	f387 8811 	msr	BASEPRI, r7
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 80069f6:	4c20      	ldr	r4, [pc, #128]	; (8006a78 <VectorB0+0x98>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80069f8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80069fa:	8ce1      	ldrh	r1, [r4, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 80069fc:	69e3      	ldr	r3, [r4, #28]
 80069fe:	b280      	uxth	r0, r0
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8006a00:	1a45      	subs	r5, r0, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8006a02:	891a      	ldrh	r2, [r3, #8]
 8006a04:	b2ad      	uxth	r5, r5
 8006a06:	4295      	cmp	r5, r2
 8006a08:	f104 051c 	add.w	r5, r4, #28
 8006a0c:	d318      	bcc.n	8006a40 <VectorB0+0x60>
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8006a0e:	6818      	ldr	r0, [r3, #0]
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
      break;

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8006a10:	1852      	adds	r2, r2, r1
 8006a12:	84e2      	strh	r2, [r4, #38]	; 0x26

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8006a14:	68d9      	ldr	r1, [r3, #12]
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8006a16:	6045      	str	r5, [r0, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8006a18:	61e0      	str	r0, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8006a1a:	f8c3 800c 	str.w	r8, [r3, #12]
 8006a1e:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8006a22:	6918      	ldr	r0, [r3, #16]
 8006a24:	4788      	blx	r1
 8006a26:	f387 8811 	msr	BASEPRI, r7
 8006a2a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8006a2c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8006a2e:	69e3      	ldr	r3, [r4, #28]
 8006a30:	b280      	uxth	r0, r0
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8006a32:	ebc1 0c00 	rsb	ip, r1, r0

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8006a36:	891a      	ldrh	r2, [r3, #8]
 8006a38:	fa1f fc8c 	uxth.w	ip, ip
 8006a3c:	4594      	cmp	ip, r2
 8006a3e:	d2e6      	bcs.n	8006a0e <VectorB0+0x2e>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006a40:	42ab      	cmp	r3, r5
 8006a42:	d013      	beq.n	8006a6c <VectorB0+0x8c>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8006a44:	2a01      	cmp	r2, #1
 8006a46:	d00b      	beq.n	8006a60 <VectorB0+0x80>
      port_timer_set_alarm(now + vtp->vt_delta);
 8006a48:	1812      	adds	r2, r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006a4a:	b291      	uxth	r1, r2
 8006a4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006a50:	6341      	str	r1, [r0, #52]	; 0x34
 8006a52:	2100      	movs	r1, #0
 8006a54:	f381 8811 	msr	BASEPRI, r1
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8006a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8006a5c:	f7fb baa8 	b.w	8001fb0 <_port_irq_epilogue>
    else
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8006a60:	1c81      	adds	r1, r0, #2
 8006a62:	b288      	uxth	r0, r1
 8006a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a68:	6358      	str	r0, [r3, #52]	; 0x34
 8006a6a:	e7f2      	b.n	8006a52 <VectorB0+0x72>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e7ed      	b.n	8006a52 <VectorB0+0x72>
 8006a76:	bf00      	nop
 8006a78:	20001ec0 	.word	0x20001ec0
 8006a7c:	f3af 8000 	nop.w

08006a80 <thread2.8457>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	2620      	movs	r6, #32
 8006a84:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8006a86:	f7fb fa33 	bl	8001ef0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8006a8a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006a8c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8006a90:	4621      	mov	r1, r4
 8006a92:	f7fb f95d 	bl	8001d50 <chSchWakeupS>
 8006a96:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	d1f3      	bne.n	8006a86 <thread2.8457+0x6>
  return 0;
}
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
 8006aa2:	bf00      	nop
 8006aa4:	f3af 8000 	nop.w
 8006aa8:	f3af 8000 	nop.w
 8006aac:	f3af 8000 	nop.w

08006ab0 <pools1_execute.7964>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	2620      	movs	r6, #32
 8006ab4:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ab8:	4c79      	ldr	r4, [pc, #484]	; (8006ca0 <pools1_execute.7964+0x1f0>)
 8006aba:	4d7a      	ldr	r5, [pc, #488]	; (8006ca4 <pools1_execute.7964+0x1f4>)
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	602a      	str	r2, [r5, #0]
  mp->mp_next = php;
 8006ac2:	6025      	str	r5, [r4, #0]
 8006ac4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8006ac8:	6861      	ldr	r1, [r4, #4]
 8006aca:	194a      	adds	r2, r1, r5
 8006acc:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ad0:	6820      	ldr	r0, [r4, #0]
  mp->mp_next = php;
 8006ad2:	6022      	str	r2, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ad4:	5148      	str	r0, [r1, r5]
 8006ad6:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8006ada:	6860      	ldr	r0, [r4, #4]
 8006adc:	1811      	adds	r1, r2, r0
 8006ade:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ae2:	6827      	ldr	r7, [r4, #0]
  mp->mp_next = php;
 8006ae4:	6021      	str	r1, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ae6:	5017      	str	r7, [r2, r0]
 8006ae8:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8006aec:	6860      	ldr	r0, [r4, #4]
 8006aee:	180a      	adds	r2, r1, r0
 8006af0:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006af4:	6827      	ldr	r7, [r4, #0]
  mp->mp_next = php;
 8006af6:	6022      	str	r2, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006af8:	500f      	str	r7, [r1, r0]
 8006afa:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8006afe:	6861      	ldr	r1, [r4, #4]
 8006b00:	1857      	adds	r7, r2, r1
 8006b02:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006b06:	6820      	ldr	r0, [r4, #0]
  mp->mp_next = php;
 8006b08:	6027      	str	r7, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006b0a:	5050      	str	r0, [r2, r1]
 8006b0c:	f383 8811 	msr	BASEPRI, r3
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7fa ff9d 	bl	8001a50 <chPoolAlloc>
 8006b16:	1c01      	adds	r1, r0, #0
 8006b18:	bf18      	it	ne
 8006b1a:	2101      	movne	r1, #1
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	f7fa feb7 	bl	8001890 <_test_assert>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f040 80a9 	bne.w	8006c7a <pools1_execute.7964+0x1ca>
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7fa ff91 	bl	8001a50 <chPoolAlloc>
 8006b2e:	1c01      	adds	r1, r0, #0
 8006b30:	bf18      	it	ne
 8006b32:	2101      	movne	r1, #1
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fa feab 	bl	8001890 <_test_assert>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f040 809d 	bne.w	8006c7a <pools1_execute.7964+0x1ca>
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7fa ff85 	bl	8001a50 <chPoolAlloc>
 8006b46:	1c01      	adds	r1, r0, #0
 8006b48:	bf18      	it	ne
 8006b4a:	2101      	movne	r1, #1
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7fa fe9f 	bl	8001890 <_test_assert>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f040 8091 	bne.w	8006c7a <pools1_execute.7964+0x1ca>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7fa ff79 	bl	8001a50 <chPoolAlloc>
 8006b5e:	1c01      	adds	r1, r0, #0
 8006b60:	bf18      	it	ne
 8006b62:	2101      	movne	r1, #1
 8006b64:	2001      	movs	r0, #1
 8006b66:	f7fa fe93 	bl	8001890 <_test_assert>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	f040 8085 	bne.w	8006c7a <pools1_execute.7964+0x1ca>
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7fa ff6d 	bl	8001a50 <chPoolAlloc>
 8006b76:	1c01      	adds	r1, r0, #0
 8006b78:	bf18      	it	ne
 8006b7a:	2101      	movne	r1, #1
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7fa fe87 	bl	8001890 <_test_assert>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d179      	bne.n	8006c7a <pools1_execute.7964+0x1ca>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7fa ff62 	bl	8001a50 <chPoolAlloc>
 8006b8c:	f1d0 0101 	rsbs	r1, r0, #1
 8006b90:	bf38      	it	cc
 8006b92:	2100      	movcc	r1, #0
 8006b94:	2002      	movs	r0, #2
 8006b96:	f7fa fe7b 	bl	8001890 <_test_assert>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d16d      	bne.n	8006c7a <pools1_execute.7964+0x1ca>
 8006b9e:	f386 8811 	msr	BASEPRI, r6
 8006ba2:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 8006ba4:	6025      	str	r5, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f380 8811 	msr	BASEPRI, r0
 8006bac:	f386 8811 	msr	BASEPRI, r6
 8006bb0:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8006bb2:	f505 72a4 	add.w	r2, r5, #328	; 0x148
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bb6:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
  mp->mp_next = php;
 8006bba:	6022      	str	r2, [r4, #0]
 8006bbc:	f380 8811 	msr	BASEPRI, r0
 8006bc0:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bc4:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 8006bc6:	f505 7124 	add.w	r1, r5, #656	; 0x290
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bca:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
  mp->mp_next = php;
 8006bce:	6021      	str	r1, [r4, #0]
 8006bd0:	f380 8811 	msr	BASEPRI, r0
 8006bd4:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bd8:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 8006bda:	f505 7276 	add.w	r2, r5, #984	; 0x3d8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bde:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
  mp->mp_next = php;
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bec:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8006bee:	f505 63a4 	add.w	r3, r5, #1312	; 0x520
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006bf2:	f8c5 1520 	str.w	r1, [r5, #1312]	; 0x520
  mp->mp_next = php;
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7fa ff27 	bl	8001a50 <chPoolAlloc>
 8006c02:	1c01      	adds	r1, r0, #0
 8006c04:	bf18      	it	ne
 8006c06:	2101      	movne	r1, #1
 8006c08:	2003      	movs	r0, #3
 8006c0a:	f7fa fe41 	bl	8001890 <_test_assert>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d133      	bne.n	8006c7a <pools1_execute.7964+0x1ca>
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7fa ff1c 	bl	8001a50 <chPoolAlloc>
 8006c18:	1c01      	adds	r1, r0, #0
 8006c1a:	bf18      	it	ne
 8006c1c:	2101      	movne	r1, #1
 8006c1e:	2003      	movs	r0, #3
 8006c20:	f7fa fe36 	bl	8001890 <_test_assert>
 8006c24:	bb48      	cbnz	r0, 8006c7a <pools1_execute.7964+0x1ca>
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7fa ff12 	bl	8001a50 <chPoolAlloc>
 8006c2c:	1c01      	adds	r1, r0, #0
 8006c2e:	bf18      	it	ne
 8006c30:	2101      	movne	r1, #1
 8006c32:	2003      	movs	r0, #3
 8006c34:	f7fa fe2c 	bl	8001890 <_test_assert>
 8006c38:	b9f8      	cbnz	r0, 8006c7a <pools1_execute.7964+0x1ca>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7fa ff08 	bl	8001a50 <chPoolAlloc>
 8006c40:	1c01      	adds	r1, r0, #0
 8006c42:	bf18      	it	ne
 8006c44:	2101      	movne	r1, #1
 8006c46:	2003      	movs	r0, #3
 8006c48:	f7fa fe22 	bl	8001890 <_test_assert>
 8006c4c:	b9a8      	cbnz	r0, 8006c7a <pools1_execute.7964+0x1ca>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7fa fefe 	bl	8001a50 <chPoolAlloc>
 8006c54:	1c01      	adds	r1, r0, #0
 8006c56:	bf18      	it	ne
 8006c58:	2101      	movne	r1, #1
 8006c5a:	2003      	movs	r0, #3
 8006c5c:	f7fa fe18 	bl	8001890 <_test_assert>
 8006c60:	b958      	cbnz	r0, 8006c7a <pools1_execute.7964+0x1ca>

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fa fef4 	bl	8001a50 <chPoolAlloc>
 8006c68:	f1d0 0101 	rsbs	r1, r0, #1
 8006c6c:	bf38      	it	cc
 8006c6e:	2100      	movcc	r1, #0
 8006c70:	2004      	movs	r0, #4
 8006c72:	f7fa fe0d 	bl	8001890 <_test_assert>
 8006c76:	4602      	mov	r2, r0
 8006c78:	b100      	cbz	r0, 8006c7c <pools1_execute.7964+0x1cc>
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <pools1_execute.7964+0x1f8>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8006c7e:	2110      	movs	r1, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006c80:	4620      	mov	r0, r4
 8006c82:	6061      	str	r1, [r4, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8006c84:	6022      	str	r2, [r4, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	f7fa fee2 	bl	8001a50 <chPoolAlloc>
 8006c8c:	f1d0 0101 	rsbs	r1, r0, #1
 8006c90:	bf38      	it	cc
 8006c92:	2100      	movcc	r1, #0
 8006c94:	2005      	movs	r0, #5
}
 8006c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006c9a:	f7fa bdf9 	b.w	8001890 <_test_assert>
 8006c9e:	bf00      	nop
 8006ca0:	20000828 	.word	0x20000828
 8006ca4:	20001850 	.word	0x20001850
 8006ca8:	08001631 	.word	0x08001631
 8006cac:	f3af 8000 	nop.w

08006cb0 <dyn2_execute.8090>:
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006cb0:	4b4b      	ldr	r3, [pc, #300]	; (8006de0 <dyn2_execute.8090+0x130>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8006cb2:	b570      	push	{r4, r5, r6, lr}
 8006cb4:	6999      	ldr	r1, [r3, #24]
 8006cb6:	2020      	movs	r0, #32
 8006cb8:	688d      	ldr	r5, [r1, #8]
 8006cba:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006cbe:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <dyn2_execute.8090+0x134>)
 8006cc0:	4a49      	ldr	r2, [pc, #292]	; (8006de8 <dyn2_execute.8090+0x138>)
 8006cc2:	681c      	ldr	r4, [r3, #0]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6014      	str	r4, [r2, #0]
  mp->mp_next = php;
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	f381 8811 	msr	BASEPRI, r1
 8006cce:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006cd2:	681c      	ldr	r4, [r3, #0]
  mp->mp_next = php;
 8006cd4:	f502 76a4 	add.w	r6, r2, #328	; 0x148
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006cd8:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
  mp->mp_next = php;
 8006cdc:	601e      	str	r6, [r3, #0]
 8006cde:	f381 8811 	msr	BASEPRI, r1
 8006ce2:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ce6:	681c      	ldr	r4, [r3, #0]
  mp->mp_next = php;
 8006ce8:	f502 7624 	add.w	r6, r2, #656	; 0x290
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006cec:	f8c2 4290 	str.w	r4, [r2, #656]	; 0x290
  mp->mp_next = php;
 8006cf0:	601e      	str	r6, [r3, #0]
 8006cf2:	f381 8811 	msr	BASEPRI, r1
 8006cf6:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006cfa:	6818      	ldr	r0, [r3, #0]
  mp->mp_next = php;
 8006cfc:	f502 7476 	add.w	r4, r2, #984	; 0x3d8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006d00:	f8c2 03d8 	str.w	r0, [r2, #984]	; 0x3d8
  mp->mp_next = php;
 8006d04:	601c      	str	r4, [r3, #0]
 8006d06:	f381 8811 	msr	BASEPRI, r1
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006d0a:	4938      	ldr	r1, [pc, #224]	; (8006dec <dyn2_execute.8090+0x13c>)
 8006d0c:	1e68      	subs	r0, r5, #1
 8006d0e:	f7fe fef7 	bl	8005b00 <chThdCreateFromMemoryPool.constprop.54>
 8006d12:	4c37      	ldr	r4, [pc, #220]	; (8006df0 <dyn2_execute.8090+0x140>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006d14:	4937      	ldr	r1, [pc, #220]	; (8006df4 <dyn2_execute.8090+0x144>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006d16:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006d18:	1ea8      	subs	r0, r5, #2
 8006d1a:	f7fe fef1 	bl	8005b00 <chThdCreateFromMemoryPool.constprop.54>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006d1e:	4936      	ldr	r1, [pc, #216]	; (8006df8 <dyn2_execute.8090+0x148>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006d20:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006d22:	1ee8      	subs	r0, r5, #3
 8006d24:	f7fe feec 	bl	8005b00 <chThdCreateFromMemoryPool.constprop.54>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006d28:	4934      	ldr	r1, [pc, #208]	; (8006dfc <dyn2_execute.8090+0x14c>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006d2a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006d2c:	1f28      	subs	r0, r5, #4
 8006d2e:	f7fe fee7 	bl	8005b00 <chThdCreateFromMemoryPool.constprop.54>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006d32:	4933      	ldr	r1, [pc, #204]	; (8006e00 <dyn2_execute.8090+0x150>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006d34:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006d36:	1f68      	subs	r0, r5, #5
 8006d38:	f7fe fee2 	bl	8005b00 <chThdCreateFromMemoryPool.constprop.54>

  test_assert(1, (threads[0] != NULL) &&
 8006d3c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006d3e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8006d40:	b149      	cbz	r1, 8006d56 <dyn2_execute.8090+0xa6>
 8006d42:	6861      	ldr	r1, [r4, #4]
 8006d44:	b139      	cbz	r1, 8006d56 <dyn2_execute.8090+0xa6>
 8006d46:	68a1      	ldr	r1, [r4, #8]
 8006d48:	b129      	cbz	r1, 8006d56 <dyn2_execute.8090+0xa6>
 8006d4a:	68e1      	ldr	r1, [r4, #12]
 8006d4c:	b119      	cbz	r1, 8006d56 <dyn2_execute.8090+0xa6>
 8006d4e:	f1d0 0101 	rsbs	r1, r0, #1
 8006d52:	bf38      	it	cc
 8006d54:	2100      	movcc	r1, #0
 8006d56:	2001      	movs	r0, #1
 8006d58:	f7fa fd9a 	bl	8001890 <_test_assert>
 8006d5c:	b100      	cbz	r0, 8006d60 <dyn2_execute.8090+0xb0>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8006d60:	f7fb fb7e 	bl	8002460 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8006d64:	2002      	movs	r0, #2
 8006d66:	4927      	ldr	r1, [pc, #156]	; (8006e04 <dyn2_execute.8090+0x154>)
 8006d68:	f7fa fd4a 	bl	8001800 <_test_assert_sequence>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d1f6      	bne.n	8006d5e <dyn2_execute.8090+0xae>

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8006d70:	481c      	ldr	r0, [pc, #112]	; (8006de4 <dyn2_execute.8090+0x134>)
 8006d72:	f7fa fe6d 	bl	8001a50 <chPoolAlloc>
 8006d76:	1c01      	adds	r1, r0, #0
 8006d78:	bf18      	it	ne
 8006d7a:	2101      	movne	r1, #1
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f7fa fd87 	bl	8001890 <_test_assert>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d1eb      	bne.n	8006d5e <dyn2_execute.8090+0xae>
 8006d86:	4817      	ldr	r0, [pc, #92]	; (8006de4 <dyn2_execute.8090+0x134>)
 8006d88:	f7fa fe62 	bl	8001a50 <chPoolAlloc>
 8006d8c:	1c01      	adds	r1, r0, #0
 8006d8e:	bf18      	it	ne
 8006d90:	2101      	movne	r1, #1
 8006d92:	2003      	movs	r0, #3
 8006d94:	f7fa fd7c 	bl	8001890 <_test_assert>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1e0      	bne.n	8006d5e <dyn2_execute.8090+0xae>
 8006d9c:	4811      	ldr	r0, [pc, #68]	; (8006de4 <dyn2_execute.8090+0x134>)
 8006d9e:	f7fa fe57 	bl	8001a50 <chPoolAlloc>
 8006da2:	1c01      	adds	r1, r0, #0
 8006da4:	bf18      	it	ne
 8006da6:	2101      	movne	r1, #1
 8006da8:	2003      	movs	r0, #3
 8006daa:	f7fa fd71 	bl	8001890 <_test_assert>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1d5      	bne.n	8006d5e <dyn2_execute.8090+0xae>
 8006db2:	480c      	ldr	r0, [pc, #48]	; (8006de4 <dyn2_execute.8090+0x134>)
 8006db4:	f7fa fe4c 	bl	8001a50 <chPoolAlloc>
 8006db8:	1c01      	adds	r1, r0, #0
 8006dba:	bf18      	it	ne
 8006dbc:	2101      	movne	r1, #1
 8006dbe:	2003      	movs	r0, #3
 8006dc0:	f7fa fd66 	bl	8001890 <_test_assert>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d1ca      	bne.n	8006d5e <dyn2_execute.8090+0xae>
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8006dc8:	4806      	ldr	r0, [pc, #24]	; (8006de4 <dyn2_execute.8090+0x134>)
 8006dca:	f7fa fe41 	bl	8001a50 <chPoolAlloc>
 8006dce:	f1d0 0101 	rsbs	r1, r0, #1
 8006dd2:	bf38      	it	cc
 8006dd4:	2100      	movcc	r1, #0
 8006dd6:	2004      	movs	r0, #4
}
 8006dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8006ddc:	f7fa bd58 	b.w	8001890 <_test_assert>
 8006de0:	20001ec0 	.word	0x20001ec0
 8006de4:	20001748 	.word	0x20001748
 8006de8:	20001850 	.word	0x20001850
 8006dec:	0800a4d0 	.word	0x0800a4d0
 8006df0:	20002010 	.word	0x20002010
 8006df4:	0800a4cc 	.word	0x0800a4cc
 8006df8:	0800a4c8 	.word	0x0800a4c8
 8006dfc:	0800a85c 	.word	0x0800a85c
 8006e00:	0800a4d8 	.word	0x0800a4d8
 8006e04:	0800a740 	.word	0x0800a740
 8006e08:	f3af 8000 	nop.w
 8006e0c:	f3af 8000 	nop.w

08006e10 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	b091      	sub	sp, #68	; 0x44
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8006e16:	ab0a      	add	r3, sp, #40	; 0x28
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8006e18:	f10d 0429 	add.w	r4, sp, #41	; 0x29
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8006e1c:	9303      	str	r3, [sp, #12]
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8006e1e:	9402      	str	r4, [sp, #8]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006e20:	468b      	mov	fp, r1
 8006e22:	4692      	mov	sl, r2
 8006e24:	9902      	ldr	r1, [sp, #8]
 8006e26:	9a03      	ldr	r2, [sp, #12]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e28:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	1a8c      	subs	r4, r1, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8006e30:	2000      	movs	r0, #0

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e32:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8006e36:	9004      	str	r0, [sp, #16]
 8006e38:	9407      	str	r4, [sp, #28]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e3a:	9306      	str	r3, [sp, #24]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006e3c:	465c      	mov	r4, fp
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
 8006e42:	b171      	cbz	r1, 8006e62 <chvprintf+0x52>
      return n;
    if (c != '%') {
 8006e44:	2925      	cmp	r1, #37	; 0x25
 8006e46:	d010      	beq.n	8006e6a <chvprintf+0x5a>
      chSequentialStreamPut(chp, (uint8_t)c);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006e50:	46a3      	mov	fp, r4
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8006e52:	9904      	ldr	r1, [sp, #16]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006e54:	465c      	mov	r4, fp
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8006e56:	1c48      	adds	r0, r1, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006e58:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8006e5c:	9004      	str	r0, [sp, #16]
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
    if (c == 0)
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	d1f0      	bne.n	8006e44 <chvprintf+0x34>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8006e62:	9804      	ldr	r0, [sp, #16]
 8006e64:	b011      	add	sp, #68	; 0x44
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8006e6a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8006e6e:	2b2d      	cmp	r3, #45	; 0x2d
 8006e70:	bf03      	ittte	eq
 8006e72:	f89b 3002 	ldrbeq.w	r3, [fp, #2]
      fmt++;
 8006e76:	f10b 0402 	addeq.w	r4, fp, #2
      left_align = TRUE;
 8006e7a:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8006e7e:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8006e82:	2b30      	cmp	r3, #48	; 0x30
 8006e84:	f000 81d0 	beq.w	8007228 <chvprintf+0x418>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8006e88:	f04f 0820 	mov.w	r8, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 8006e8c:	46a3      	mov	fp, r4
    }
    width = 0;
 8006e8e:	2600      	movs	r6, #0
 8006e90:	e009      	b.n	8006ea6 <chvprintf+0x96>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8006e92:	f89a 5000 	ldrb.w	r5, [sl]
 8006e96:	f10a 0a04 	add.w	sl, sl, #4
      else
        break;
      width = width * 10 + c;
 8006e9a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006e9e:	f89b 3000 	ldrb.w	r3, [fp]
 8006ea2:	eb05 0646 	add.w	r6, r5, r6, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8006ea6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006eaa:	b2ed      	uxtb	r5, r5
 8006eac:	2d09      	cmp	r5, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8006eae:	f10b 0b01 	add.w	fp, fp, #1
      if (c >= '0' && c <= '9')
 8006eb2:	d9f2      	bls.n	8006e9a <chvprintf+0x8a>
        c -= '0';
      else if (c == '*')
 8006eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb6:	d0ec      	beq.n	8006e92 <chvprintf+0x82>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8006eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006eba:	f000 819f 	beq.w	80071fc <chvprintf+0x3ec>
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
 8006ebe:	2500      	movs	r5, #0
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8006ec0:	2b6c      	cmp	r3, #108	; 0x6c
 8006ec2:	f000 8192 	beq.w	80071ea <chvprintf+0x3da>
 8006ec6:	2b4c      	cmp	r3, #76	; 0x4c
 8006ec8:	f000 818f 	beq.w	80071ea <chvprintf+0x3da>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8006ecc:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8006ed0:	2934      	cmp	r1, #52	; 0x34
 8006ed2:	f200 8174 	bhi.w	80071be <chvprintf+0x3ae>
 8006ed6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006eda:	017d      	.short	0x017d
 8006edc:	01720172 	.word	0x01720172
 8006ee0:	01720172 	.word	0x01720172
 8006ee4:	0172017d 	.word	0x0172017d
 8006ee8:	01720172 	.word	0x01720172
 8006eec:	01720172 	.word	0x01720172
 8006ef0:	01720178 	.word	0x01720178
 8006ef4:	01720172 	.word	0x01720172
 8006ef8:	01720172 	.word	0x01720172
 8006efc:	01720186 	.word	0x01720186
 8006f00:	01640172 	.word	0x01640172
 8006f04:	01720172 	.word	0x01720172
 8006f08:	01720172 	.word	0x01720172
 8006f0c:	01720172 	.word	0x01720172
 8006f10:	01720172 	.word	0x01720172
 8006f14:	01720172 	.word	0x01720172
 8006f18:	017d00c6 	.word	0x017d00c6
 8006f1c:	006b0172 	.word	0x006b0172
 8006f20:	01720172 	.word	0x01720172
 8006f24:	0172017d 	.word	0x0172017d
 8006f28:	01720172 	.word	0x01720172
 8006f2c:	01720172 	.word	0x01720172
 8006f30:	01720178 	.word	0x01720178
 8006f34:	01720172 	.word	0x01720172
 8006f38:	01720035 	.word	0x01720035
 8006f3c:	01720186 	.word	0x01720186
 8006f40:	01640172 	.word	0x01640172
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8006f44:	f8da 2000 	ldr.w	r2, [sl]
        s = "(null)";
 8006f48:	48a1      	ldr	r0, [pc, #644]	; (80071d0 <chvprintf+0x3c0>)
      if (precision == 0)
        precision = 32767;
 8006f4a:	f647 73ff 	movw	r3, #32767	; 0x7fff
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
 8006f4e:	2a00      	cmp	r2, #0
 8006f50:	bf08      	it	eq
 8006f52:	4602      	moveq	r2, r0
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006f54:	7814      	ldrb	r4, [r2, #0]
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8006f56:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	bf08      	it	eq
 8006f5e:	461d      	moveq	r5, r3
      for (p = s; *p && (--precision >= 0); p++)
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	f000 8188 	beq.w	8007276 <chvprintf+0x466>
 8006f66:	7854      	ldrb	r4, [r2, #1]
 8006f68:	1e69      	subs	r1, r5, #1
 8006f6a:	f001 0001 	and.w	r0, r1, #1
 8006f6e:	18ad      	adds	r5, r5, r2
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006f70:	1c51      	adds	r1, r2, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006f72:	b1c4      	cbz	r4, 8006fa6 <chvprintf+0x196>
 8006f74:	428d      	cmp	r5, r1
 8006f76:	460b      	mov	r3, r1
 8006f78:	d006      	beq.n	8006f88 <chvprintf+0x178>
 8006f7a:	b178      	cbz	r0, 8006f9c <chvprintf+0x18c>
 8006f7c:	784c      	ldrb	r4, [r1, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006f7e:	3101      	adds	r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006f80:	b18c      	cbz	r4, 8006fa6 <chvprintf+0x196>
 8006f82:	428d      	cmp	r5, r1
 8006f84:	460b      	mov	r3, r1
 8006f86:	d109      	bne.n	8006f9c <chvprintf+0x18c>
 8006f88:	1aad      	subs	r5, r5, r2
 8006f8a:	9505      	str	r5, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8006f8c:	f04f 0820 	mov.w	r8, #32
 8006f90:	e074      	b.n	800707c <chvprintf+0x26c>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006f92:	784c      	ldrb	r4, [r1, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006f94:	3101      	adds	r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006f96:	b134      	cbz	r4, 8006fa6 <chvprintf+0x196>
 8006f98:	429d      	cmp	r5, r3
 8006f9a:	d0f5      	beq.n	8006f88 <chvprintf+0x178>
 8006f9c:	785c      	ldrb	r4, [r3, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006f9e:	1c59      	adds	r1, r3, #1
 8006fa0:	1c4b      	adds	r3, r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006fa2:	2c00      	cmp	r4, #0
 8006fa4:	d1f5      	bne.n	8006f92 <chvprintf+0x182>
 8006fa6:	1a89      	subs	r1, r1, r2
 8006fa8:	9105      	str	r1, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8006faa:	f04f 0820 	mov.w	r8, #32
 8006fae:	e065      	b.n	800707c <chvprintf+0x26c>
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8006fb0:	f10a 0a07 	add.w	sl, sl, #7
 8006fb4:	f02a 0207 	bic.w	r2, sl, #7
 8006fb8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006fbc:	f102 0a08 	add.w	sl, r2, #8
 8006fc0:	f7f9 ffc6 	bl	8000f50 <__aeabi_d2f>
      if (f < 0) {
 8006fc4:	2100      	movs	r1, #0
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8006fc6:	4604      	mov	r4, r0
      if (f < 0) {
 8006fc8:	f7fa fac0 	bl	800154c <__aeabi_fcmplt>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f040 8142 	bne.w	8007256 <chvprintf+0x446>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8006fd2:	ab0a      	add	r3, sp, #40	; 0x28
                                      10000000, 100000000, 1000000000};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8006fd4:	3d01      	subs	r5, #1
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8006fd6:	f64a 31a0 	movw	r1, #43936	; 0xaba0
 8006fda:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006fde:	2d08      	cmp	r5, #8
 8006fe0:	bf28      	it	cs
 8006fe2:	2508      	movcs	r5, #8
 8006fe4:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]

  l = (long)num;
 8006fe8:	4620      	mov	r0, r4
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8006fea:	9205      	str	r2, [sp, #20]

  l = (long)num;
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	f7fa fad7 	bl	80015a0 <__aeabi_f2iz>
  p = long_to_string_with_divisor(p, l, 10, 0);
 8006ff2:	9b01      	ldr	r3, [sp, #4]

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8006ff4:	4605      	mov	r5, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 8006ff6:	220a      	movs	r2, #10
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f7ff fb67 	bl	80066d0 <long_to_string_with_divisor.10737>
  *p++ = '.';
 8007002:	4684      	mov	ip, r0
 8007004:	202e      	movs	r0, #46	; 0x2e
 8007006:	f80c 0b01 	strb.w	r0, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800700a:	4620      	mov	r0, r4
 800700c:	f8cd c004 	str.w	ip, [sp, #4]
 8007010:	f7f9 fcea 	bl	80009e8 <__aeabi_f2d>
 8007014:	e9cd 0108 	strd	r0, r1, [sp, #32]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8007018:	4628      	mov	r0, r5
 800701a:	f7f9 fcd3 	bl	80009c4 <__aeabi_i2d>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007026:	f7f9 fb7f 	bl	8000728 <__aeabi_dsub>
 800702a:	4604      	mov	r4, r0
 800702c:	9805      	ldr	r0, [sp, #20]
 800702e:	460d      	mov	r5, r1
 8007030:	f7f9 fcb8 	bl	80009a4 <__aeabi_ui2d>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 fd28 	bl	8000a90 <__aeabi_dmul>
 8007040:	f7f9 ff3e 	bl	8000ec0 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8007044:	9a05      	ldr	r2, [sp, #20]
 8007046:	9b06      	ldr	r3, [sp, #24]
 8007048:	f8dd c004 	ldr.w	ip, [sp, #4]
 800704c:	fba3 2402 	umull	r2, r4, r3, r2
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8007050:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8007052:	220a      	movs	r2, #10
 8007054:	4660      	mov	r0, ip
 8007056:	08e3      	lsrs	r3, r4, #3
 8007058:	f7ff fb3a 	bl	80066d0 <long_to_string_with_divisor.10737>
 800705c:	9903      	ldr	r1, [sp, #12]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800705e:	aa0a      	add	r2, sp, #40	; 0x28
 8007060:	1a40      	subs	r0, r0, r1
 8007062:	9005      	str	r0, [sp, #20]
 8007064:	e00a      	b.n	800707c <chvprintf+0x26c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8007066:	f8da 2000 	ldr.w	r2, [sl]
 800706a:	9b07      	ldr	r3, [sp, #28]
 800706c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	f10a 0a04 	add.w	sl, sl, #4
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8007076:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800707a:	aa0a      	add	r2, sp, #40	; 0x28
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	1af6      	subs	r6, r6, r3
 8007080:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8007084:	f1b9 0f00 	cmp.w	r9, #0
 8007088:	d133      	bne.n	80070f2 <chvprintf+0x2e2>
      width = -width;
 800708a:	4276      	negs	r6, r6
    if (width < 0) {
 800708c:	2e00      	cmp	r6, #0
 800708e:	d030      	beq.n	80070f2 <chvprintf+0x2e2>
      if (*s == '-' && filler == '0') {
 8007090:	7811      	ldrb	r1, [r2, #0]
 8007092:	292d      	cmp	r1, #45	; 0x2d
 8007094:	f000 80cd 	beq.w	8007232 <chvprintf+0x422>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8007098:	6838      	ldr	r0, [r7, #0]
 800709a:	4641      	mov	r1, r8
 800709c:	6883      	ldr	r3, [r0, #8]
 800709e:	9201      	str	r2, [sp, #4]
 80070a0:	4638      	mov	r0, r7
 80070a2:	43f4      	mvns	r4, r6
 80070a4:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80070a6:	f116 0901 	adds.w	r9, r6, #1
 80070aa:	f004 0401 	and.w	r4, r4, #1
 80070ae:	9a01      	ldr	r2, [sp, #4]
 80070b0:	d01b      	beq.n	80070ea <chvprintf+0x2da>
 80070b2:	b14c      	cbz	r4, 80070c8 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	4638      	mov	r0, r7
 80070b8:	688b      	ldr	r3, [r1, #8]
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	4641      	mov	r1, r8
 80070be:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80070c0:	f119 0901 	adds.w	r9, r9, #1
 80070c4:	9a01      	ldr	r2, [sp, #4]
 80070c6:	d010      	beq.n	80070ea <chvprintf+0x2da>
 80070c8:	4615      	mov	r5, r2
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	4641      	mov	r1, r8
 80070ce:	6884      	ldr	r4, [r0, #8]
 80070d0:	4638      	mov	r0, r7
 80070d2:	47a0      	blx	r4
 80070d4:	6839      	ldr	r1, [r7, #0]
        n++;
      } while (++width != 0);
 80070d6:	f109 0401 	add.w	r4, r9, #1
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80070da:	688b      	ldr	r3, [r1, #8]
 80070dc:	4638      	mov	r0, r7
 80070de:	4641      	mov	r1, r8
 80070e0:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80070e2:	f114 0901 	adds.w	r9, r4, #1
 80070e6:	d1f0      	bne.n	80070ca <chvprintf+0x2ba>
 80070e8:	462a      	mov	r2, r5
 80070ea:	9804      	ldr	r0, [sp, #16]
 80070ec:	1b86      	subs	r6, r0, r6
 80070ee:	9604      	str	r6, [sp, #16]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80070f0:	2600      	movs	r6, #0
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80070f2:	9905      	ldr	r1, [sp, #20]
 80070f4:	2900      	cmp	r1, #0
 80070f6:	dd2e      	ble.n	8007156 <chvprintf+0x346>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 80070f8:	4615      	mov	r5, r2
 80070fa:	683b      	ldr	r3, [r7, #0]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80070fc:	1854      	adds	r4, r2, r1
 80070fe:	ea6f 0902 	mvn.w	r9, r2
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8007102:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007106:	eb04 0e09 	add.w	lr, r4, r9
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	4638      	mov	r0, r7
 800710e:	f00e 0901 	and.w	r9, lr, #1
 8007112:	4790      	blx	r2
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8007114:	42a5      	cmp	r5, r4
 8007116:	d01a      	beq.n	800714e <chvprintf+0x33e>
 8007118:	f1b9 0f00 	cmp.w	r9, #0
 800711c:	d007      	beq.n	800712e <chvprintf+0x31e>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007124:	6883      	ldr	r3, [r0, #8]
 8007126:	4638      	mov	r0, r7
 8007128:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800712a:	42a5      	cmp	r5, r4
 800712c:	d00f      	beq.n	800714e <chvprintf+0x33e>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	46a9      	mov	r9, r5
 8007132:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007136:	6893      	ldr	r3, [r2, #8]
 8007138:	4638      	mov	r0, r7
 800713a:	4798      	blx	r3
 800713c:	6838      	ldr	r0, [r7, #0]
 800713e:	7869      	ldrb	r1, [r5, #1]
 8007140:	6882      	ldr	r2, [r0, #8]
 8007142:	f109 0501 	add.w	r5, r9, #1
 8007146:	4638      	mov	r0, r7
 8007148:	4790      	blx	r2
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800714a:	42a5      	cmp	r5, r4
 800714c:	d1ef      	bne.n	800712e <chvprintf+0x31e>
 800714e:	9904      	ldr	r1, [sp, #16]
 8007150:	9c05      	ldr	r4, [sp, #20]
 8007152:	190b      	adds	r3, r1, r4
 8007154:	9304      	str	r3, [sp, #16]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8007156:	2e00      	cmp	r6, #0
 8007158:	f43f ae70 	beq.w	8006e3c <chvprintf+0x2c>
      chSequentialStreamPut(chp, (uint8_t)filler);
 800715c:	683d      	ldr	r5, [r7, #0]
 800715e:	1e73      	subs	r3, r6, #1
 8007160:	68aa      	ldr	r2, [r5, #8]
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8007162:	461c      	mov	r4, r3
      chSequentialStreamPut(chp, (uint8_t)filler);
 8007164:	4638      	mov	r0, r7
 8007166:	4641      	mov	r1, r8
 8007168:	f003 0501 	and.w	r5, r3, #1
 800716c:	4790      	blx	r2
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800716e:	b1a4      	cbz	r4, 800719a <chvprintf+0x38a>
 8007170:	b135      	cbz	r5, 8007180 <chvprintf+0x370>
      chSequentialStreamPut(chp, (uint8_t)filler);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	4638      	mov	r0, r7
 8007176:	688b      	ldr	r3, [r1, #8]
 8007178:	4641      	mov	r1, r8
 800717a:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800717c:	3c01      	subs	r4, #1
 800717e:	d00c      	beq.n	800719a <chvprintf+0x38a>
      chSequentialStreamPut(chp, (uint8_t)filler);
 8007180:	6838      	ldr	r0, [r7, #0]
 8007182:	4641      	mov	r1, r8
 8007184:	6882      	ldr	r2, [r0, #8]
 8007186:	4638      	mov	r0, r7
 8007188:	4790      	blx	r2
 800718a:	6839      	ldr	r1, [r7, #0]
      n++;
      width--;
 800718c:	3c01      	subs	r4, #1
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
      chSequentialStreamPut(chp, (uint8_t)filler);
 800718e:	688b      	ldr	r3, [r1, #8]
 8007190:	4638      	mov	r0, r7
 8007192:	4641      	mov	r1, r8
 8007194:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8007196:	3c01      	subs	r4, #1
 8007198:	d1f2      	bne.n	8007180 <chvprintf+0x370>
 800719a:	9804      	ldr	r0, [sp, #16]
 800719c:	1832      	adds	r2, r6, r0
 800719e:	9204      	str	r2, [sp, #16]
 80071a0:	e64c      	b.n	8006e3c <chvprintf+0x2c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80071a2:	2210      	movs	r2, #16
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80071a4:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80071a8:	a80a      	add	r0, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 80071aa:	f10a 0a04 	add.w	sl, sl, #4
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80071ae:	2300      	movs	r3, #0
 80071b0:	f7ff fa8e 	bl	80066d0 <long_to_string_with_divisor.10737>
 80071b4:	9903      	ldr	r1, [sp, #12]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80071b6:	aa0a      	add	r2, sp, #40	; 0x28
 80071b8:	1a40      	subs	r0, r0, r1
 80071ba:	9005      	str	r0, [sp, #20]
 80071bc:	e75e      	b.n	800707c <chvprintf+0x26c>
 80071be:	9a07      	ldr	r2, [sp, #28]
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80071c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80071c4:	9205      	str	r2, [sp, #20]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80071c6:	aa0a      	add	r2, sp, #40	; 0x28
 80071c8:	e758      	b.n	800707c <chvprintf+0x26c>
 80071ca:	2208      	movs	r2, #8
 80071cc:	e7ea      	b.n	80071a4 <chvprintf+0x394>
 80071ce:	bf00      	nop
 80071d0:	0800abd0 	.word	0x0800abd0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80071d4:	f8da 1000 	ldr.w	r1, [sl]
 80071d8:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 80071dc:	2900      	cmp	r1, #0
 80071de:	db42      	blt.n	8007266 <chvprintf+0x456>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80071e0:	a80a      	add	r0, sp, #40	; 0x28
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80071e2:	220a      	movs	r2, #10
 80071e4:	e7e3      	b.n	80071ae <chvprintf+0x39e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80071e6:	220a      	movs	r2, #10
 80071e8:	e7dc      	b.n	80071a4 <chvprintf+0x394>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
 80071ea:	f89b 4000 	ldrb.w	r4, [fp]
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	f43f ae6c 	beq.w	8006ecc <chvprintf+0xbc>
        c = *fmt++;
 80071f4:	f10b 0b01 	add.w	fp, fp, #1
 80071f8:	4623      	mov	r3, r4
 80071fa:	e667      	b.n	8006ecc <chvprintf+0xbc>
 80071fc:	4659      	mov	r1, fp
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80071fe:	2500      	movs	r5, #0
 8007200:	e005      	b.n	800720e <chvprintf+0x3fe>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8007202:	f89a 4000 	ldrb.w	r4, [sl]
 8007206:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 800720a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800720e:	f811 3b01 	ldrb.w	r3, [r1], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8007212:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8007216:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800721a:	b2d4      	uxtb	r4, r2
 800721c:	2c09      	cmp	r4, #9
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800721e:	468b      	mov	fp, r1
        if (c >= '0' && c <= '9')
 8007220:	d9f3      	bls.n	800720a <chvprintf+0x3fa>
          c -= '0';
        else if (c == '*')
 8007222:	2b2a      	cmp	r3, #42	; 0x2a
 8007224:	d0ed      	beq.n	8007202 <chvprintf+0x3f2>
 8007226:	e64b      	b.n	8006ec0 <chvprintf+0xb0>
 8007228:	7863      	ldrb	r3, [r4, #1]
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 800722a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 800722e:	3401      	adds	r4, #1
 8007230:	e62c      	b.n	8006e8c <chvprintf+0x7c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8007232:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8007236:	f47f af2f 	bne.w	8007098 <chvprintf+0x288>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800723a:	683c      	ldr	r4, [r7, #0]
 800723c:	4638      	mov	r0, r7
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	9201      	str	r2, [sp, #4]
 8007242:	4798      	blx	r3
 8007244:	9901      	ldr	r1, [sp, #4]
        n++;
 8007246:	9804      	ldr	r0, [sp, #16]
        i--;
 8007248:	9b05      	ldr	r3, [sp, #20]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800724a:	1c4a      	adds	r2, r1, #1
        n++;
 800724c:	1c44      	adds	r4, r0, #1
        i--;
 800724e:	1e59      	subs	r1, r3, #1
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8007250:	9404      	str	r4, [sp, #16]
        i--;
 8007252:	9105      	str	r1, [sp, #20]
 8007254:	e720      	b.n	8007098 <chvprintf+0x288>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8007256:	202d      	movs	r0, #45	; 0x2d
        f = -f;
 8007258:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800725c:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8007260:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8007264:	e6b6      	b.n	8006fd4 <chvprintf+0x1c4>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8007266:	242d      	movs	r4, #45	; 0x2d
 8007268:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        l = -l;
 800726c:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800726e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8007272:	220a      	movs	r2, #10
 8007274:	e79b      	b.n	80071ae <chvprintf+0x39e>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8007276:	9405      	str	r4, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8007278:	f04f 0820 	mov.w	r8, #32
 800727c:	e6fe      	b.n	800707c <chvprintf+0x26c>
 800727e:	bf00      	nop

08007280 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8007280:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8007282:	6803      	ldr	r3, [r0, #0]
 8007284:	4604      	mov	r4, r0

  while (queue_notempty(tqp))
 8007286:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8007288:	460d      	mov	r5, r1

  while (queue_notempty(tqp))
 800728a:	d009      	beq.n	80072a0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800728c:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  chSchReadyI(tp);
 800728e:	4618      	mov	r0, r3
 8007290:	6022      	str	r2, [r4, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8007292:	621d      	str	r5, [r3, #32]
 8007294:	6054      	str	r4, [r2, #4]
  chSchReadyI(tp);
 8007296:	f7fa febb 	bl	8002010 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	429c      	cmp	r4, r3
 800729e:	d1f5      	bne.n	800728c <chThdDequeueAllI+0xc>
 80072a0:	bd38      	pop	{r3, r4, r5, pc}
 80072a2:	bf00      	nop
 80072a4:	f3af 8000 	nop.w
 80072a8:	f3af 8000 	nop.w
 80072ac:	f3af 8000 	nop.w

080072b0 <usb_packet_write_from_queue.10326.4251>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80072b4:	6807      	ldr	r7, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80072b6:	6042      	str	r2, [r0, #4]
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80072b8:	f107 5300 	add.w	r3, r7, #536870912	; 0x20000000
 80072bc:	f503 5640 	add.w	r6, r3, #12288	; 0x3000
 80072c0:	0077      	lsls	r7, r6, #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80072c2:	0856      	lsrs	r6, r2, #1
 80072c4:	d04f      	beq.n	8007366 <usb_packet_write_from_queue.10326.4251+0xb6>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80072c6:	698b      	ldr	r3, [r1, #24]
 80072c8:	690c      	ldr	r4, [r1, #16]
 80072ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80072ce:	1e75      	subs	r5, r6, #1
    if (oqp->q_rdptr >= oqp->q_top)
 80072d0:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80072d2:	618b      	str	r3, [r1, #24]
 80072d4:	f005 0c01 	and.w	ip, r5, #1
    if (oqp->q_rdptr >= oqp->q_top)
 80072d8:	d26a      	bcs.n	80073b0 <usb_packet_write_from_queue.10326.4251+0x100>
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80072da:	f813 5b01 	ldrb.w	r5, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 80072de:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80072e0:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80072e2:	bf28      	it	cs
 80072e4:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80072e6:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 80072ea:	4638      	mov	r0, r7
    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80072ec:	bf28      	it	cs
 80072ee:	618b      	strcs	r3, [r1, #24]
    *pmap++ = w;
 80072f0:	f840 5b04 	str.w	r5, [r0], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80072f4:	1e75      	subs	r5, r6, #1
 80072f6:	d034      	beq.n	8007362 <usb_packet_write_from_queue.10326.4251+0xb2>
 80072f8:	f1bc 0f00 	cmp.w	ip, #0
 80072fc:	d013      	beq.n	8007326 <usb_packet_write_from_queue.10326.4251+0x76>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80072fe:	698b      	ldr	r3, [r1, #24]
 8007300:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8007304:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007306:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8007308:	d228      	bcs.n	800735c <usb_packet_write_from_queue.10326.4251+0xac>
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800730a:	f813 8b01 	ldrb.w	r8, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 800730e:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8007310:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007312:	bf28      	it	cs
 8007314:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8007316:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800731a:	bf28      	it	cs
 800731c:	618b      	strcs	r3, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 800731e:	3d01      	subs	r5, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8007320:	f840 cb04 	str.w	ip, [r0], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8007324:	d01d      	beq.n	8007362 <usb_packet_write_from_queue.10326.4251+0xb2>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007326:	698b      	ldr	r3, [r1, #24]
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
    nhw--;
 8007328:	3d01      	subs	r5, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800732a:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 800732e:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007330:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007332:	bf24      	itt	cs
 8007334:	68cb      	ldrcs	r3, [r1, #12]
 8007336:	618b      	strcs	r3, [r1, #24]
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8007338:	f813 8b01 	ldrb.w	r8, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 800733c:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800733e:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007340:	bf28      	it	cs
 8007342:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8007344:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007348:	bf28      	it	cs
 800734a:	618b      	strcs	r3, [r1, #24]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800734c:	698b      	ldr	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 800734e:	f840 cb04 	str.w	ip, [r0], #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007352:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8007356:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007358:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 800735a:	d3d6      	bcc.n	800730a <usb_packet_write_from_queue.10326.4251+0x5a>
      oqp->q_rdptr = oqp->q_buffer;
 800735c:	68cb      	ldr	r3, [r1, #12]
 800735e:	618b      	str	r3, [r1, #24]
 8007360:	e7d3      	b.n	800730a <usb_packet_write_from_queue.10326.4251+0x5a>
 8007362:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8007366:	07d3      	lsls	r3, r2, #31
 8007368:	d509      	bpl.n	800737e <usb_packet_write_from_queue.10326.4251+0xce>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800736a:	698b      	ldr	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 800736c:	6908      	ldr	r0, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800736e:	f813 4b01 	ldrb.w	r4, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8007372:	4283      	cmp	r3, r0
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007374:	603c      	str	r4, [r7, #0]
 8007376:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007378:	bf24      	itt	cs
 800737a:	68cb      	ldrcs	r3, [r1, #12]
 800737c:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800737e:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8007382:	b9f3      	cbnz	r3, 80073c2 <usb_packet_write_from_queue.10326.4251+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007384:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007388:	2420      	movs	r4, #32
 800738a:	f384 8811 	msr	BASEPRI, r4
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 800738e:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8007390:	4608      	mov	r0, r1
 8007392:	189a      	adds	r2, r3, r2
 8007394:	608a      	str	r2, [r1, #8]
 8007396:	2100      	movs	r1, #0
 8007398:	f7ff ff72 	bl	8007280 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739c:	f3ef 8105 	mrs	r1, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FF) != 0);
 80073a0:	05c8      	lsls	r0, r1, #23
 80073a2:	0dc4      	lsrs	r4, r0, #23
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context())
 80073a4:	b13c      	cbz	r4, 80073b6 <usb_packet_write_from_queue.10326.4251+0x106>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80073a6:	2300      	movs	r3, #0
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80073b0:	68cb      	ldr	r3, [r1, #12]
 80073b2:	618b      	str	r3, [r1, #24]
 80073b4:	e791      	b.n	80072da <usb_packet_write_from_queue.10326.4251+0x2a>
      chSysUnlockFromISR();
    else {
      chSchRescheduleS();
 80073b6:	f7fa fbfb 	bl	8001bb0 <chSchRescheduleS>
 80073ba:	f384 8811 	msr	BASEPRI, r4
 80073be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 80073c2:	688b      	ldr	r3, [r1, #8]
 80073c4:	4608      	mov	r0, r1
 80073c6:	189a      	adds	r2, r3, r2
 80073c8:	608a      	str	r2, [r1, #8]
 80073ca:	2100      	movs	r1, #0
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 80073cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	f7ff bf56 	b.w	8007280 <chThdDequeueAllI>
 80073d4:	f3af 8000 	nop.w
 80073d8:	f3af 8000 	nop.w
 80073dc:	f3af 8000 	nop.w

080073e0 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 80073e4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80073e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80073ec:	6c5c      	ldr	r4, [r3, #68]	; 0x44
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80073ee:	b083      	sub	sp, #12
  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 80073f0:	0563      	lsls	r3, r4, #21
 80073f2:	f100 823a 	bmi.w	800786a <Vector90+0x48a>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 80073f6:	0520      	lsls	r0, r4, #20
 80073f8:	d518      	bpl.n	800742c <Vector90+0x4c>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80073fa:	48ba      	ldr	r0, [pc, #744]	; (80076e4 <Vector90+0x304>)
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 80073fc:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8007400:	f2c4 0300 	movt	r3, #16384	; 0x4000
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007404:	6842      	ldr	r2, [r0, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8007406:	6c19      	ldr	r1, [r3, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007408:	6812      	ldr	r2, [r2, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 800740a:	f041 0108 	orr.w	r1, r1, #8
 800740e:	6419      	str	r1, [r3, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007410:	b10a      	cbz	r2, 8007416 <Vector90+0x36>
 8007412:	2103      	movs	r1, #3
 8007414:	4790      	blx	r2
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8007416:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 800741a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800741e:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8007420:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8007424:	f043 0204 	orr.w	r2, r3, #4
 8007428:	6402      	str	r2, [r0, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 800742a:	6441      	str	r1, [r0, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 800742c:	04e1      	lsls	r1, r4, #19
 800742e:	d512      	bpl.n	8007456 <Vector90+0x76>
    uint32_t fnr = STM32_USB->FNR;
 8007430:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8007434:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007438:	6c98      	ldr	r0, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 800743a:	0402      	lsls	r2, r0, #16
 800743c:	f140 8208 	bpl.w	8007850 <Vector90+0x470>
    }
#if STM32_USB_LOW_POWER_ON_SUSPEND
    else {
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
 8007440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007442:	f042 0104 	orr.w	r1, r2, #4
 8007446:	6419      	str	r1, [r3, #64]	; 0x40
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8007448:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800744c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007450:	f46f 5080 	mvn.w	r0, #4096	; 0x1000
 8007454:	6458      	str	r0, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8007456:	05a0      	lsls	r0, r4, #22
 8007458:	d50b      	bpl.n	8007472 <Vector90+0x92>
    _usb_isr_invoke_sof_cb(usbp);
 800745a:	48a2      	ldr	r0, [pc, #648]	; (80076e4 <Vector90+0x304>)
 800745c:	6841      	ldr	r1, [r0, #4]
 800745e:	68ca      	ldr	r2, [r1, #12]
 8007460:	b102      	cbz	r2, 8007464 <Vector90+0x84>
 8007462:	4790      	blx	r2
    STM32_USB->ISTR = ~ISTR_SOF;
 8007464:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8007468:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800746c:	f46f 7000 	mvn.w	r0, #512	; 0x200
 8007470:	6458      	str	r0, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8007472:	0421      	lsls	r1, r4, #16
 8007474:	f140 80fb 	bpl.w	800766e <Vector90+0x28e>
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8007478:	f44f 48b8 	mov.w	r8, #23552	; 0x5c00
 800747c:	f2c4 0800 	movt	r8, #16384	; 0x4000
 8007480:	f004 040f 	and.w	r4, r4, #15
 8007484:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8007488:	f640 75d0 	movw	r5, #4048	; 0xfd0
 800748c:	1ca6      	adds	r6, r4, #2
 800748e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8007492:	eb05 0186 	add.w	r1, r5, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8007496:	063a      	lsls	r2, r7, #24
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8007498:	684d      	ldr	r5, [r1, #4]

    if (epr & EPR_CTR_TX) {
 800749a:	d572      	bpl.n	8007582 <Vector90+0x1a2>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800749c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80074a0:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 80074a4:	f422 43f1 	bic.w	r3, r2, #30848	; 0x7880
 80074a8:	f023 0070 	bic.w	r0, r3, #112	; 0x70
 80074ac:	f848 0024 	str.w	r0, [r8, r4, lsl #2]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80074b0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 80074b4:	696b      	ldr	r3, [r5, #20]
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80074b6:	f101 5200 	add.w	r2, r1, #536870912	; 0x20000000
 80074ba:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 80074be:	eb00 010c 	add.w	r1, r0, ip
 80074c2:	004a      	lsls	r2, r1, #1
 80074c4:	f8d2 9004 	ldr.w	r9, [r2, #4]
      epcp->in_state->txcnt  += transmitted;
 80074c8:	6898      	ldr	r0, [r3, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 80074ca:	6859      	ldr	r1, [r3, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 80074cc:	eb09 0200 	add.w	r2, r9, r0
 80074d0:	609a      	str	r2, [r3, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 80074d2:	1a8a      	subs	r2, r1, r2
 80074d4:	f000 80f2 	beq.w	80076bc <Vector90+0x2dc>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 80074d8:	8a29      	ldrh	r1, [r5, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 80074da:	7818      	ldrb	r0, [r3, #0]
 80074dc:	428a      	cmp	r2, r1
 80074de:	bf28      	it	cs
 80074e0:	460a      	movcs	r2, r1
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f040 81a4 	bne.w	8007830 <Vector90+0x450>
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 80074e8:	68d8      	ldr	r0, [r3, #12]
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 80074ea:	1c51      	adds	r1, r2, #1
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 80074ec:	4448      	add	r0, r9
 80074ee:	60d8      	str	r0, [r3, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80074f0:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80074f4:	0849      	lsrs	r1, r1, #1
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80074f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80074fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80074fe:	449c      	add	ip, r3
 8007500:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007504:	f8dc 3000 	ldr.w	r3, [ip]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8007508:	f8cc 2004 	str.w	r2, [ip, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800750c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8007510:	f502 5c40 	add.w	ip, r2, #12288	; 0x3000
 8007514:	ea4f 0c4c 	mov.w	ip, ip, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007518:	d023      	beq.n	8007562 <Vector90+0x182>
 800751a:	3901      	subs	r1, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800751c:	f830 9b02 	ldrh.w	r9, [r0], #2
 8007520:	4663      	mov	r3, ip
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007522:	460a      	mov	r2, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007524:	f843 9b04 	str.w	r9, [r3], #4
 8007528:	f001 0101 	and.w	r1, r1, #1
 800752c:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800752e:	b1c2      	cbz	r2, 8007562 <Vector90+0x182>
 8007530:	b139      	cbz	r1, 8007542 <Vector90+0x162>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007532:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8007536:	3304      	adds	r3, #4
 8007538:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800753a:	3a01      	subs	r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800753c:	f8cc 1004 	str.w	r1, [ip, #4]
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007540:	d00f      	beq.n	8007562 <Vector90+0x182>
 8007542:	46a4      	mov	ip, r4
 8007544:	46a9      	mov	r9, r5
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007546:	f830 5c02 	ldrh.w	r5, [r0, #-2]
 800754a:	4619      	mov	r1, r3
 800754c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8007550:	f841 5b04 	str.w	r5, [r1], #4
 8007554:	3002      	adds	r0, #2
 8007556:	605c      	str	r4, [r3, #4]
 8007558:	1d0b      	adds	r3, r1, #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800755a:	3a02      	subs	r2, #2
 800755c:	d1f3      	bne.n	8007546 <Vector90+0x166>
 800755e:	4664      	mov	r4, ip
 8007560:	464d      	mov	r5, r9
 8007562:	2120      	movs	r1, #32
 8007564:	f381 8811 	msr	BASEPRI, r1
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8007568:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800756c:	f422 41f0 	bic.w	r1, r2, #30720	; 0x7800
 8007570:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8007574:	f080 0330 	eor.w	r3, r0, #48	; 0x30
 8007578:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800757c:	2200      	movs	r2, #0
 800757e:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8007582:	043b      	lsls	r3, r7, #16
 8007584:	d56e      	bpl.n	8007664 <Vector90+0x284>
      EPR_CLEAR_CTR_RX(ep);
 8007586:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800758a:	f422 4178 	bic.w	r1, r2, #63488	; 0xf800
 800758e:	f021 0070 	bic.w	r0, r1, #112	; 0x70
 8007592:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8007596:	0538      	lsls	r0, r7, #20
 8007598:	f100 8084 	bmi.w	80076a4 <Vector90+0x2c4>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800759c:	f8d8 7050 	ldr.w	r7, [r8, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80075a0:	f8d5 9018 	ldr.w	r9, [r5, #24]
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80075a4:	f107 5300 	add.w	r3, r7, #536870912	; 0x20000000
 80075a8:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 80075ac:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 80075b0:	004b      	lsls	r3, r1, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80075b2:	68d8      	ldr	r0, [r3, #12]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80075b4:	f899 2000 	ldrb.w	r2, [r9]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80075b8:	ea4f 5c80 	mov.w	ip, r0, lsl #22
 80075bc:	ea4f 579c 	mov.w	r7, ip, lsr #22

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	f040 8091 	bne.w	80076e8 <Vector90+0x308>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80075c6:	6898      	ldr	r0, [r3, #8]

  n = (n + 1) / 2;
 80075c8:	1c7b      	adds	r3, r7, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80075ca:	f100 5100 	add.w	r1, r0, #536870912	; 0x20000000
 80075ce:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
 80075d2:	0051      	lsls	r1, r2, #1

  n = (n + 1) / 2;
  while (n > 0) {
 80075d4:	085a      	lsrs	r2, r3, #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 80075d6:	f8d9 000c 	ldr.w	r0, [r9, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80075da:	d022      	beq.n	8007622 <Vector90+0x242>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80075dc:	680b      	ldr	r3, [r1, #0]
 80075de:	3a01      	subs	r2, #1
 80075e0:	f820 3b02 	strh.w	r3, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80075e4:	4613      	mov	r3, r2
 80075e6:	3002      	adds	r0, #2
 80075e8:	f002 0201 	and.w	r2, r2, #1
 80075ec:	b1bb      	cbz	r3, 800761e <Vector90+0x23e>
 80075ee:	b132      	cbz	r2, 80075fe <Vector90+0x21e>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80075f0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80075f4:	f820 2c02 	strh.w	r2, [r0, #-2]
 80075f8:	3002      	adds	r0, #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 80075fa:	3b01      	subs	r3, #1
 80075fc:	d00f      	beq.n	800761e <Vector90+0x23e>
 80075fe:	46a2      	mov	sl, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8007600:	684c      	ldr	r4, [r1, #4]
 8007602:	f101 0c04 	add.w	ip, r1, #4
 8007606:	6889      	ldr	r1, [r1, #8]
 8007608:	4602      	mov	r2, r0
 800760a:	f820 4c02 	strh.w	r4, [r0, #-2]
 800760e:	f822 1b02 	strh.w	r1, [r2], #2
 8007612:	1c90      	adds	r0, r2, #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8007614:	3b02      	subs	r3, #2
 8007616:	f10c 0104 	add.w	r1, ip, #4
 800761a:	d1f1      	bne.n	8007600 <Vector90+0x220>
 800761c:	4654      	mov	r4, sl
 800761e:	f8d9 000c 	ldr.w	r0, [r9, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8007622:	19c3      	adds	r3, r0, r7
 8007624:	f8c9 300c 	str.w	r3, [r9, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8007628:	f8b9 3010 	ldrh.w	r3, [r9, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 800762c:	8a68      	ldrh	r0, [r5, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800762e:	f8d9 1008 	ldr.w	r1, [r9, #8]
        epcp->out_state->rxsize             -= n;
 8007632:	f8d9 2004 	ldr.w	r2, [r9, #4]
        epcp->out_state->rxpkts             -= 1;
 8007636:	3b01      	subs	r3, #1
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8007638:	19c9      	adds	r1, r1, r7
        epcp->out_state->rxsize             -= n;
 800763a:	1bd2      	subs	r2, r2, r7
        epcp->out_state->rxpkts             -= 1;
 800763c:	b29b      	uxth	r3, r3

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 800763e:	4287      	cmp	r7, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8007640:	f8c9 1008 	str.w	r1, [r9, #8]
        epcp->out_state->rxsize             -= n;
 8007644:	f8c9 2004 	str.w	r2, [r9, #4]
        epcp->out_state->rxpkts             -= 1;
 8007648:	f8a9 3010 	strh.w	r3, [r9, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 800764c:	d314      	bcc.n	8007678 <Vector90+0x298>
 800764e:	b19b      	cbz	r3, 8007678 <Vector90+0x298>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8007650:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8007654:	f420 4190 	bic.w	r1, r0, #18432	; 0x4800
 8007658:	f021 0270 	bic.w	r2, r1, #112	; 0x70
 800765c:	f482 5340 	eor.w	r3, r2, #12288	; 0x3000
 8007660:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8007664:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8007668:	0422      	lsls	r2, r4, #16
 800766a:	f53f af09 	bmi.w	8007480 <Vector90+0xa0>
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
}
 800766e:	b003      	add	sp, #12
 8007670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
 8007674:	f7fa bc9c 	b.w	8001fb0 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8007678:	2001      	movs	r0, #1
 800767a:	40a0      	lsls	r0, r4
 800767c:	f640 71d0 	movw	r1, #4048	; 0xfd0
 8007680:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007684:	894a      	ldrh	r2, [r1, #10]
 8007686:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800768a:	ea22 0200 	bic.w	r2, r2, r0
 800768e:	6873      	ldr	r3, [r6, #4]
 8007690:	f640 70d0 	movw	r0, #4048	; 0xfd0
 8007694:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007698:	8142      	strh	r2, [r0, #10]
 800769a:	4621      	mov	r1, r4
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	4811      	ldr	r0, [pc, #68]	; (80076e4 <Vector90+0x304>)
 80076a0:	4790      	blx	r2
 80076a2:	e7df      	b.n	8007664 <Vector90+0x284>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 80076a4:	f640 71d0 	movw	r1, #4048	; 0xfd0
 80076a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80076ac:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80076b0:	6873      	ldr	r3, [r6, #4]
 80076b2:	480c      	ldr	r0, [pc, #48]	; (80076e4 <Vector90+0x304>)
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4790      	blx	r2
 80076ba:	e7d3      	b.n	8007664 <Vector90+0x284>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 80076bc:	2001      	movs	r0, #1
 80076be:	40a0      	lsls	r0, r4
 80076c0:	f640 73d0 	movw	r3, #4048	; 0xfd0
 80076c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076c8:	8919      	ldrh	r1, [r3, #8]
 80076ca:	68aa      	ldr	r2, [r5, #8]
 80076cc:	ea21 0100 	bic.w	r1, r1, r0
 80076d0:	f640 70d0 	movw	r0, #4048	; 0xfd0
 80076d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80076d8:	8101      	strh	r1, [r0, #8]
 80076da:	4802      	ldr	r0, [pc, #8]	; (80076e4 <Vector90+0x304>)
 80076dc:	4621      	mov	r1, r4
 80076de:	4790      	blx	r2
 80076e0:	e74f      	b.n	8007582 <Vector90+0x1a2>
 80076e2:	bf00      	nop
 80076e4:	20000fd0 	.word	0x20000fd0
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80076e8:	6899      	ldr	r1, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80076ea:	ea5f 5cdc 	movs.w	ip, ip, lsr #23
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80076ee:	f101 5e00 	add.w	lr, r1, #536870912	; 0x20000000
 80076f2:	f50e 5240 	add.w	r2, lr, #12288	; 0x3000
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 80076f6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80076fa:	ea4f 0e42 	mov.w	lr, r2, lsl #1

  nhw = n / 2;
  while (nhw > 0) {
 80076fe:	d07a      	beq.n	80077f6 <Vector90+0x416>
    stm32_usb_pma_t w;

    w = *pmap++;
 8007700:	4672      	mov	r2, lr
    *iqp->q_wrptr++ = (uint8_t)w;
 8007702:	f8d3 b014 	ldr.w	fp, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8007706:	f852 9b04 	ldr.w	r9, [r2], #4
 800770a:	f10c 3aff 	add.w	sl, ip, #4294967295
    *iqp->q_wrptr++ = (uint8_t)w;
 800770e:	f80b 9b01 	strb.w	r9, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8007712:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8007714:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8007718:	458b      	cmp	fp, r1
 800771a:	f00a 0a01 	and.w	sl, sl, #1
 800771e:	f080 8094 	bcs.w	800784a <Vector90+0x46a>
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007722:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8007726:	ea4f 2919 	mov.w	r9, r9, lsr #8
 800772a:	f80b 9b01 	strb.w	r9, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 800772e:	6919      	ldr	r1, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007730:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8007734:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8007736:	bf24      	itt	cs
 8007738:	68d9      	ldrcs	r1, [r3, #12]
 800773a:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 800773c:	f1bc 0901 	subs.w	r9, ip, #1
 8007740:	d057      	beq.n	80077f2 <Vector90+0x412>
 8007742:	f1ba 0f00 	cmp.w	sl, #0
 8007746:	d01d      	beq.n	8007784 <Vector90+0x3a4>
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8007748:	f8d3 b014 	ldr.w	fp, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 800774c:	f852 ab04 	ldr.w	sl, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8007750:	f80b ab01 	strb.w	sl, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8007754:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8007756:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 800775a:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 800775c:	bf28      	it	cs
 800775e:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007760:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8007764:	bf28      	it	cs
 8007766:	6159      	strcs	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007768:	f8d3 b014 	ldr.w	fp, [r3, #20]
 800776c:	f80b ab01 	strb.w	sl, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8007770:	6919      	ldr	r1, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007772:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8007776:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8007778:	bf24      	itt	cs
 800777a:	68d9      	ldrcs	r1, [r3, #12]
 800777c:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 800777e:	f1b9 0901 	subs.w	r9, r9, #1
 8007782:	d036      	beq.n	80077f2 <Vector90+0x412>
 8007784:	9001      	str	r0, [sp, #4]
    stm32_usb_pma_t w;

    w = *pmap++;
 8007786:	f852 0b04 	ldr.w	r0, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 800778a:	f8d3 b014 	ldr.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 800778e:	ea4f 2a10 	mov.w	sl, r0, lsr #8
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8007792:	f80b 0b01 	strb.w	r0, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8007796:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8007798:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 800779c:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 800779e:	bf28      	it	cs
 80077a0:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
 80077a2:	f109 39ff 	add.w	r9, r9, #4294967295
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 80077a6:	bf28      	it	cs
 80077a8:	6159      	strcs	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80077aa:	6959      	ldr	r1, [r3, #20]
 80077ac:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 80077b0:	6918      	ldr	r0, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80077b2:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 80077b4:	4281      	cmp	r1, r0
      iqp->q_wrptr = iqp->q_buffer;
 80077b6:	bf28      	it	cs
 80077b8:	68d9      	ldrcs	r1, [r3, #12]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 80077ba:	f852 ab04 	ldr.w	sl, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 80077be:	bf28      	it	cs
 80077c0:	6159      	strcs	r1, [r3, #20]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 80077c2:	6959      	ldr	r1, [r3, #20]
 80077c4:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 80077c8:	6918      	ldr	r0, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 80077ca:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 80077cc:	4281      	cmp	r1, r0
 80077ce:	d301      	bcc.n	80077d4 <Vector90+0x3f4>
      iqp->q_wrptr = iqp->q_buffer;
 80077d0:	68d9      	ldr	r1, [r3, #12]
 80077d2:	6159      	str	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80077d4:	6959      	ldr	r1, [r3, #20]
 80077d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80077da:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 80077de:	6918      	ldr	r0, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80077e0:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 80077e2:	4281      	cmp	r1, r0
      iqp->q_wrptr = iqp->q_buffer;
 80077e4:	bf24      	itt	cs
 80077e6:	68d9      	ldrcs	r1, [r3, #12]
 80077e8:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 80077ea:	f1b9 0901 	subs.w	r9, r9, #1
 80077ee:	d1ca      	bne.n	8007786 <Vector90+0x3a6>
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 80077f6:	07c1      	lsls	r1, r0, #31
 80077f8:	d50a      	bpl.n	8007810 <Vector90+0x430>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	f8de 1000 	ldr.w	r1, [lr]
 8007800:	f802 1b01 	strb.w	r1, [r2], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8007804:	6918      	ldr	r0, [r3, #16]
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8007806:	615a      	str	r2, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8007808:	4282      	cmp	r2, r0
      iqp->q_wrptr = iqp->q_buffer;
 800780a:	bf24      	itt	cs
 800780c:	68da      	ldrcs	r2, [r3, #12]
 800780e:	615a      	strcs	r2, [r3, #20]
 8007810:	2120      	movs	r1, #32
 8007812:	f381 8811 	msr	BASEPRI, r1
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8007816:	6899      	ldr	r1, [r3, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	19ca      	adds	r2, r1, r7
 800781c:	609a      	str	r2, [r3, #8]
 800781e:	2100      	movs	r1, #0
 8007820:	f7ff fd2e 	bl	8007280 <chThdDequeueAllI>
 8007824:	2200      	movs	r2, #0
 8007826:	f382 8811 	msr	BASEPRI, r2
 800782a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800782e:	e6fb      	b.n	8007628 <Vector90+0x248>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8007830:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 8007834:	68d9      	ldr	r1, [r3, #12]
 8007836:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800783a:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 800783e:	eb00 030c 	add.w	r3, r0, ip
 8007842:	0058      	lsls	r0, r3, #1
 8007844:	f7ff fd34 	bl	80072b0 <usb_packet_write_from_queue.10326.4251>
 8007848:	e68b      	b.n	8007562 <Vector90+0x182>
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 800784a:	68d9      	ldr	r1, [r3, #12]
 800784c:	6159      	str	r1, [r3, #20]
 800784e:	e768      	b.n	8007722 <Vector90+0x342>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8007850:	480f      	ldr	r0, [pc, #60]	; (8007890 <Vector90+0x4b0>)

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8007852:	6c19      	ldr	r1, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8007854:	6842      	ldr	r2, [r0, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8007856:	f021 0108 	bic.w	r1, r1, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800785a:	6812      	ldr	r2, [r2, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800785c:	6419      	str	r1, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800785e:	2a00      	cmp	r2, #0
 8007860:	f43f adf2 	beq.w	8007448 <Vector90+0x68>
 8007864:	2104      	movs	r1, #4
 8007866:	4790      	blx	r2
 8007868:	e5ee      	b.n	8007448 <Vector90+0x68>

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
 800786a:	4d09      	ldr	r5, [pc, #36]	; (8007890 <Vector90+0x4b0>)
 800786c:	4628      	mov	r0, r5
 800786e:	f7fe fff7 	bl	8006860 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8007872:	6868      	ldr	r0, [r5, #4]
 8007874:	6802      	ldr	r2, [r0, #0]
 8007876:	b112      	cbz	r2, 800787e <Vector90+0x49e>
 8007878:	4628      	mov	r0, r5
 800787a:	2100      	movs	r1, #0
 800787c:	4790      	blx	r2
    STM32_USB->ISTR = ~ISTR_RESET;
 800787e:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8007882:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007886:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800788a:	644b      	str	r3, [r1, #68]	; 0x44
 800788c:	e5b3      	b.n	80073f6 <Vector90+0x16>
 800788e:	bf00      	nop
 8007890:	20000fd0 	.word	0x20000fd0
 8007894:	f3af 8000 	nop.w
 8007898:	f3af 8000 	nop.w
 800789c:	f3af 8000 	nop.w

080078a0 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80078a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80078a4:	68c2      	ldr	r2, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 80078a6:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80078a8:	6953      	ldr	r3, [r2, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 80078aa:	8a10      	ldrh	r0, [r2, #16]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 80078ac:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 80078ae:	685a      	ldr	r2, [r3, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 80078b0:	7819      	ldrb	r1, [r3, #0]
 80078b2:	4290      	cmp	r0, r2
 80078b4:	bf38      	it	cc
 80078b6:	4602      	movcc	r2, r0
 80078b8:	2900      	cmp	r1, #0
 80078ba:	d136      	bne.n	800792a <usb_lld_prepare_transmit+0x8a>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80078bc:	f44f 45b8 	mov.w	r5, #23552	; 0x5c00
 80078c0:	f2c4 0500 	movt	r5, #16384	; 0x4000
 80078c4:	6d28      	ldr	r0, [r5, #80]	; 0x50
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 80078c6:	1c51      	adds	r1, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80078c8:	f100 5500 	add.w	r5, r0, #536870912	; 0x20000000
 80078cc:	f505 5040 	add.w	r0, r5, #12288	; 0x3000
 80078d0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80078d4:	0064      	lsls	r4, r4, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80078d6:	6825      	ldr	r5, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80078d8:	68d8      	ldr	r0, [r3, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80078da:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
 80078de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80078e2:	6062      	str	r2, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80078e4:	005b      	lsls	r3, r3, #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80078e6:	084a      	lsrs	r2, r1, #1
 80078e8:	d01d      	beq.n	8007926 <usb_lld_prepare_transmit+0x86>
 80078ea:	1e51      	subs	r1, r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80078ec:	f830 4b02 	ldrh.w	r4, [r0], #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80078f0:	460a      	mov	r2, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80078f2:	f843 4b04 	str.w	r4, [r3], #4
 80078f6:	f001 0101 	and.w	r1, r1, #1
 80078fa:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80078fc:	b19a      	cbz	r2, 8007926 <usb_lld_prepare_transmit+0x86>
 80078fe:	b131      	cbz	r1, 800790e <usb_lld_prepare_transmit+0x6e>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007900:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8007904:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007906:	3a01      	subs	r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007908:	f843 1b04 	str.w	r1, [r3], #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800790c:	d00b      	beq.n	8007926 <usb_lld_prepare_transmit+0x86>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800790e:	f830 5c02 	ldrh.w	r5, [r0, #-2]
 8007912:	4619      	mov	r1, r3
 8007914:	f830 4b02 	ldrh.w	r4, [r0], #2
 8007918:	f841 5b04 	str.w	r5, [r1], #4
 800791c:	3002      	adds	r0, #2
 800791e:	605c      	str	r4, [r3, #4]
 8007920:	1d0b      	adds	r3, r1, #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007922:	3a02      	subs	r2, #2
 8007924:	d1f3      	bne.n	800790e <usb_lld_prepare_transmit+0x6e>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8007926:	bc30      	pop	{r4, r5}
 8007928:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 800792a:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 800792e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8007932:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8007934:	68d9      	ldr	r1, [r3, #12]
 8007936:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800793a:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 800793e:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 8007942:	0058      	lsls	r0, r3, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8007944:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8007946:	f7ff bcb3 	b.w	80072b0 <usb_packet_write_from_queue.10326.4251>
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w

08007950 <usbPrepareTransmit.constprop.5>:
 * @param[in] buf       buffer where to fetch the data to be transmitted
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
 8007950:	b410      	push	{r4}
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007952:	68c3      	ldr	r3, [r0, #12]

  isp->txqueued           = FALSE;
 8007954:	2400      	movs	r4, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007956:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
 8007958:	60d9      	str	r1, [r3, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800795a:	4621      	mov	r1, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 800795c:	701c      	strb	r4, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
 800795e:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 8007960:	609c      	str	r4, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 8007962:	bc10      	pop	{r4}
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8007964:	f7ff bf9c 	b.w	80078a0 <usb_lld_prepare_transmit>
 8007968:	f3af 8000 	nop.w
 800796c:	f3af 8000 	nop.w

08007970 <onotify.8832>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8007972:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007974:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	7811      	ldrb	r1, [r2, #0]
 800797c:	2904      	cmp	r1, #4
 800797e:	d000      	beq.n	8007982 <onotify.8832+0x12>
 8007980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007982:	7a20      	ldrb	r0, [r4, #8]
 8007984:	2802      	cmp	r0, #2
 8007986:	d1fb      	bne.n	8007980 <onotify.8832+0x10>
      (sdup->state != SDU_READY))
    return;

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in) &&
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	8912      	ldrh	r2, [r2, #8]
 800798c:	fa42 f103 	asr.w	r1, r2, r3
 8007990:	f011 0301 	ands.w	r3, r1, #1
 8007994:	d1f4      	bne.n	8007980 <onotify.8832+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8007996:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007998:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800799a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800799c:	1a40      	subs	r0, r0, r1
 800799e:	1a82      	subs	r2, r0, r2
 80079a0:	d0ee      	beq.n	8007980 <onotify.8832+0x10>
 80079a2:	f383 8811 	msr	BASEPRI, r3
      ((n = oqGetFullI(&sdup->oqueue)) > 0)) {
    osalSysUnlock();

    usbPrepareQueuedTransmit(sdup->config->usbp,
 80079a6:	f8d4 5254 	ldr.w	r5, [r4, #596]	; 0x254
 80079aa:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80079ae:	6828      	ldr	r0, [r5, #0]
 80079b0:	7929      	ldrb	r1, [r5, #4]
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80079b2:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 80079b6:	68fd      	ldr	r5, [r7, #12]

  isp->txqueued           = TRUE;
 80079b8:	2701      	movs	r7, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80079ba:	696d      	ldr	r5, [r5, #20]

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 80079bc:	60ab      	str	r3, [r5, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 80079be:	702f      	strb	r7, [r5, #0]
  isp->mode.queue.txqueue = oqp;
 80079c0:	60ee      	str	r6, [r5, #12]
  isp->txsize             = n;
 80079c2:	606a      	str	r2, [r5, #4]
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80079c4:	f7ff ff6c 	bl	80078a0 <usb_lld_prepare_transmit>
 80079c8:	2320      	movs	r3, #32
 80079ca:	f383 8811 	msr	BASEPRI, r3
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 80079ce:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80079d2:	6808      	ldr	r0, [r1, #0]
 80079d4:	7909      	ldrb	r1, [r1, #4]
  }
}
 80079d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedTransmit(sdup->config->usbp,
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 80079da:	f7fe beb1 	b.w	8006740 <usbStartTransmitI>
 80079de:	bf00      	nop

080079e0 <dyn1_setup.8088>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80079e0:	f241 7360 	movw	r3, #5984	; 0x1760
 80079e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 80079e8:	f641 0250 	movw	r2, #6224	; 0x1850
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 80079ec:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80079ee:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 80079f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80079f4:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80079f8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80079fc:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 80079fe:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8007a00:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8007a02:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8007a04:	6054      	str	r4, [r2, #4]
 8007a06:	6158      	str	r0, [r3, #20]
 8007a08:	6118      	str	r0, [r3, #16]
 8007a0a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8007a0c:	bc10      	pop	{r4}
 8007a0e:	4770      	bx	lr

08007a10 <dyn3_setup.8086>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8007a10:	f241 7360 	movw	r3, #5984	; 0x1760
 8007a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8007a18:	f641 0250 	movw	r2, #6224	; 0x1850
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8007a1c:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8007a1e:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 8007a20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007a24:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8007a28:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8007a2c:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 8007a2e:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8007a30:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8007a32:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8007a34:	6054      	str	r4, [r2, #4]
 8007a36:	6158      	str	r0, [r3, #20]
 8007a38:	6118      	str	r0, [r3, #16]
 8007a3a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8007a3c:	bc10      	pop	{r4}
 8007a3e:	4770      	bx	lr

08007a40 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8007a40:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8007a44:	b510      	push	{r4, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8007a46:	2b03      	cmp	r3, #3
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8007a48:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 8007a4a:	d031      	beq.n	8007ab0 <_usb_ep0out+0x70>
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d01d      	beq.n	8007a8c <_usb_ep0out+0x4c>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8007a50:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8007a54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a58:	6819      	ldr	r1, [r3, #0]
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8007a5a:	6862      	ldr	r2, [r4, #4]
 8007a5c:	f421 40f0 	bic.w	r0, r1, #30720	; 0x7800
 8007a60:	f020 0140 	bic.w	r1, r0, #64	; 0x40
 8007a64:	f081 0010 	eor.w	r0, r1, #16
 8007a68:	6018      	str	r0, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8007a6a:	6819      	ldr	r1, [r3, #0]
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	f421 4090 	bic.w	r0, r1, #18432	; 0x4800
 8007a72:	f020 0170 	bic.w	r1, r0, #112	; 0x70
 8007a76:	f481 5080 	eor.w	r0, r1, #4096	; 0x1000
 8007a7a:	6018      	str	r0, [r3, #0]
 8007a7c:	b112      	cbz	r2, 8007a84 <_usb_ep0out+0x44>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	2105      	movs	r1, #5
 8007a82:	4790      	blx	r2
  usbp->ep0state = USB_EP0_ERROR;
 8007a84:	2306      	movs	r3, #6
 8007a86:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8007a8a:	bd10      	pop	{r4, pc}
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 8007a8c:	2100      	movs	r1, #0

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8007a8e:	2205      	movs	r2, #5
 8007a90:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 8007a94:	460a      	mov	r2, r1
 8007a96:	f7ff ff5b 	bl	8007950 <usbPrepareTransmit.constprop.5>
 8007a9a:	2020      	movs	r0, #32
 8007a9c:	f380 8811 	msr	BASEPRI, r0
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0);
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7fe fe4c 	bl	8006740 <usbStartTransmitI>
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	f381 8811 	msr	BASEPRI, r1
 8007aae:	bd10      	pop	{r4, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0)
 8007ab0:	68c3      	ldr	r3, [r0, #12]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	6891      	ldr	r1, [r2, #8]
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	d1ca      	bne.n	8007a50 <_usb_ep0out+0x10>
      break;
#endif
    if (usbp->ep0endcb != NULL)
 8007aba:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8007abc:	b103      	cbz	r3, 8007ac0 <_usb_ep0out+0x80>
      usbp->ep0endcb(usbp);
 8007abe:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 8007ac6:	bd10      	pop	{r4, pc}
 8007ac8:	f3af 8000 	nop.w
 8007acc:	f3af 8000 	nop.w

08007ad0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8007ad0:	b508      	push	{r3, lr}
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8007ada:	2008      	movs	r0, #8
 8007adc:	f7fd fe28 	bl	8005730 <chSchGoSleepTimeoutS>
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f380 8811 	msr	BASEPRI, r0
 8007ae6:	bd08      	pop	{r3, pc}
 8007ae8:	f3af 8000 	nop.w
 8007aec:	f3af 8000 	nop.w

08007af0 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8007af0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8007af2:	2001      	movs	r0, #1
 8007af4:	f7ff ffec 	bl	8007ad0 <chThdSleep>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8007afe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007b02:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007b04:	2200      	movs	r2, #0
 8007b06:	f382 8811 	msr	BASEPRI, r2
  return chVTGetSystemTime();
}
 8007b0a:	b288      	uxth	r0, r1
 8007b0c:	bd08      	pop	{r3, pc}
 8007b0e:	bf00      	nop

08007b10 <TestThread.4031>:
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8007b14:	4c9d      	ldr	r4, [pc, #628]	; (8007d8c <TestThread.4031+0x27c>)
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007b16:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8007b18:	6020      	str	r0, [r4, #0]
  test_println("");
 8007b1a:	489d      	ldr	r0, [pc, #628]	; (8007d90 <TestThread.4031+0x280>)
 8007b1c:	f7f9 ff08 	bl	8001930 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8007b20:	489c      	ldr	r0, [pc, #624]	; (8007d94 <TestThread.4031+0x284>)
 8007b22:	f7f9 ff05 	bl	8001930 <test_println>
 8007b26:	4d9c      	ldr	r5, [pc, #624]	; (8007d98 <TestThread.4031+0x288>)
  test_println("***");
 8007b28:	489c      	ldr	r0, [pc, #624]	; (8007d9c <TestThread.4031+0x28c>)
 8007b2a:	f7f9 ff01 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b2e:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	6803      	ldr	r3, [r0, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b38:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d1f7      	bne.n	8007b30 <TestThread.4031+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8007b40:	4897      	ldr	r0, [pc, #604]	; (8007da0 <TestThread.4031+0x290>)
 8007b42:	4e98      	ldr	r6, [pc, #608]	; (8007da4 <TestThread.4031+0x294>)
 8007b44:	f7f9 fef4 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b48:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	6807      	ldr	r7, [r0, #0]
 8007b4e:	68bd      	ldr	r5, [r7, #8]
 8007b50:	47a8      	blx	r5
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b56:	2900      	cmp	r1, #0
 8007b58:	d1f7      	bne.n	8007b4a <TestThread.4031+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 8007b5a:	4893      	ldr	r0, [pc, #588]	; (8007da8 <TestThread.4031+0x298>)
 8007b5c:	4e93      	ldr	r6, [pc, #588]	; (8007dac <TestThread.4031+0x29c>)
 8007b5e:	f7f9 fee7 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b62:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007b64:	6820      	ldr	r0, [r4, #0]
 8007b66:	6803      	ldr	r3, [r0, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b70:	2900      	cmp	r1, #0
 8007b72:	d1f7      	bne.n	8007b64 <TestThread.4031+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8007b74:	488e      	ldr	r0, [pc, #568]	; (8007db0 <TestThread.4031+0x2a0>)
 8007b76:	4f8f      	ldr	r7, [pc, #572]	; (8007db4 <TestThread.4031+0x2a4>)
 8007b78:	f7f9 feda 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b7c:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	6805      	ldr	r5, [r0, #0]
 8007b82:	68ae      	ldr	r6, [r5, #8]
 8007b84:	47b0      	blx	r6
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b86:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8007b8a:	2900      	cmp	r1, #0
 8007b8c:	d1f7      	bne.n	8007b7e <TestThread.4031+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8007b8e:	488a      	ldr	r0, [pc, #552]	; (8007db8 <TestThread.4031+0x2a8>)
 8007b90:	4f8a      	ldr	r7, [pc, #552]	; (8007dbc <TestThread.4031+0x2ac>)
 8007b92:	f7f9 fecd 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b96:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	6803      	ldr	r3, [r0, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007ba0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d1f7      	bne.n	8007b98 <TestThread.4031+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8007ba8:	4885      	ldr	r0, [pc, #532]	; (8007dc0 <TestThread.4031+0x2b0>)
 8007baa:	4d86      	ldr	r5, [pc, #536]	; (8007dc4 <TestThread.4031+0x2b4>)
 8007bac:	f7f9 fec0 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bb0:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	6806      	ldr	r6, [r0, #0]
 8007bb6:	68b7      	ldr	r7, [r6, #8]
 8007bb8:	47b8      	blx	r7
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d1f7      	bne.n	8007bb2 <TestThread.4031+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8007bc2:	4881      	ldr	r0, [pc, #516]	; (8007dc8 <TestThread.4031+0x2b8>)
 8007bc4:	4d81      	ldr	r5, [pc, #516]	; (8007dcc <TestThread.4031+0x2bc>)
 8007bc6:	f7f9 feb3 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bca:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007bcc:	6820      	ldr	r0, [r4, #0]
 8007bce:	6803      	ldr	r3, [r0, #0]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bd4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d1f7      	bne.n	8007bcc <TestThread.4031+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8007bdc:	487c      	ldr	r0, [pc, #496]	; (8007dd0 <TestThread.4031+0x2c0>)
 8007bde:	4e7d      	ldr	r6, [pc, #500]	; (8007dd4 <TestThread.4031+0x2c4>)
 8007be0:	f7f9 fea6 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007be4:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007be6:	6820      	ldr	r0, [r4, #0]
 8007be8:	6807      	ldr	r7, [r0, #0]
 8007bea:	68bd      	ldr	r5, [r7, #8]
 8007bec:	47a8      	blx	r5
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bf2:	2900      	cmp	r1, #0
 8007bf4:	d1f7      	bne.n	8007be6 <TestThread.4031+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8007bf6:	4878      	ldr	r0, [pc, #480]	; (8007dd8 <TestThread.4031+0x2c8>)
 8007bf8:	9100      	str	r1, [sp, #0]
 8007bfa:	f7f9 fe99 	bl	8001930 <test_println>
#endif
  test_println("");
 8007bfe:	4864      	ldr	r0, [pc, #400]	; (8007d90 <TestThread.4031+0x280>)
 8007c00:	f7f9 fe96 	bl	8001930 <test_println>

  global_fail = FALSE;
 8007c04:	9900      	ldr	r1, [sp, #0]
 8007c06:	4875      	ldr	r0, [pc, #468]	; (8007ddc <TestThread.4031+0x2cc>)
 8007c08:	f241 7380 	movw	r3, #6016	; 0x1780
 8007c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c10:	4f73      	ldr	r7, [pc, #460]	; (8007de0 <TestThread.4031+0x2d0>)
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8007c12:	4e74      	ldr	r6, [pc, #464]	; (8007de4 <TestThread.4031+0x2d4>)
 8007c14:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8007e18 <TestThread.4031+0x308>
 8007c18:	9001      	str	r0, [sp, #4]
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  global_fail = FALSE;
 8007c1a:	7019      	strb	r1, [r3, #0]
  i = 0;
 8007c1c:	468a      	mov	sl, r1
 8007c1e:	f10a 0a01 	add.w	sl, sl, #1
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c22:	f04f 0800 	mov.w	r8, #0

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8007c26:	f857 2b04 	ldr.w	r2, [r7], #4
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	f000 8085 	beq.w	8007d3a <TestThread.4031+0x22a>
 8007c30:	4d6d      	ldr	r5, [pc, #436]	; (8007de8 <TestThread.4031+0x2d8>)
      print_line();
 8007c32:	f7f9 feed 	bl	8001a10 <print_line.6617>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c36:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	6802      	ldr	r2, [r0, #0]
 8007c3c:	6893      	ldr	r3, [r2, #8]
 8007c3e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c40:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d1f7      	bne.n	8007c38 <TestThread.4031+0x128>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8007c48:	4650      	mov	r0, sl
 8007c4a:	f7f9 fe99 	bl	8001980 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8007c4e:	484f      	ldr	r0, [pc, #316]	; (8007d8c <TestThread.4031+0x27c>)
 8007c50:	212e      	movs	r1, #46	; 0x2e
 8007c52:	6800      	ldr	r0, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8007c54:	f108 0801 	add.w	r8, r8, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8007c58:	6805      	ldr	r5, [r0, #0]
 8007c5a:	68aa      	ldr	r2, [r5, #8]
 8007c5c:	4790      	blx	r2
 8007c5e:	4d63      	ldr	r5, [pc, #396]	; (8007dec <TestThread.4031+0x2dc>)
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8007c60:	4640      	mov	r0, r8
 8007c62:	f7f9 fe8d 	bl	8001980 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c66:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	6803      	ldr	r3, [r0, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c70:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d1f7      	bne.n	8007c68 <TestThread.4031+0x158>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8007c78:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8007c7c:	680d      	ldr	r5, [r1, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c7e:	7829      	ldrb	r1, [r5, #0]
 8007c80:	b139      	cbz	r1, 8007c92 <TestThread.4031+0x182>
    chSequentialStreamPut(chp, *msgp++);
 8007c82:	6820      	ldr	r0, [r4, #0]
 8007c84:	6803      	ldr	r3, [r0, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007c8a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d1f7      	bne.n	8007c82 <TestThread.4031+0x172>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8007c92:	4857      	ldr	r0, [pc, #348]	; (8007df0 <TestThread.4031+0x2e0>)
 8007c94:	f7f9 fe4c 	bl	8001930 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8007c98:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007c9c:	f7ff ff18 	bl	8007ad0 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8007ca0:	4854      	ldr	r0, [pc, #336]	; (8007df4 <TestThread.4031+0x2e4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8007ca2:	f857 bc04 	ldr.w	fp, [r7, #-4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007ca6:	2100      	movs	r1, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8007ca8:	6001      	str	r1, [r0, #0]
 8007caa:	6041      	str	r1, [r0, #4]
 8007cac:	6081      	str	r1, [r0, #8]
 8007cae:	60c1      	str	r1, [r0, #12]
 8007cb0:	6101      	str	r1, [r0, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007cb2:	4d51      	ldr	r5, [pc, #324]	; (8007df8 <TestThread.4031+0x2e8>)
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8007cb4:	f8db 3004 	ldr.w	r3, [fp, #4]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8007cb8:	f8c6 9000 	str.w	r9, [r6]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007cbc:	7029      	strb	r1, [r5, #0]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8007cbe:	b103      	cbz	r3, 8007cc2 <TestThread.4031+0x1b2>
    tcp->setup();
 8007cc0:	4798      	blx	r3
  tcp->execute();
 8007cc2:	f8db 200c 	ldr.w	r2, [fp, #12]
 8007cc6:	4790      	blx	r2
  if (tcp->teardown != NULL)
 8007cc8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007ccc:	b100      	cbz	r0, 8007cd0 <TestThread.4031+0x1c0>
    tcp->teardown();
 8007cce:	4780      	blx	r0

  test_wait_threads();
 8007cd0:	f7fa fbc6 	bl	8002460 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8007cd4:	7829      	ldrb	r1, [r5, #0]
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	f000 80a0 	beq.w	8007e1c <TestThread.4031+0x30c>
 8007cdc:	4d47      	ldr	r5, [pc, #284]	; (8007dfc <TestThread.4031+0x2ec>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007cde:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	6803      	ldr	r3, [r0, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007ce8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007cec:	2900      	cmp	r1, #0
 8007cee:	d1f7      	bne.n	8007ce0 <TestThread.4031+0x1d0>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8007cf0:	4843      	ldr	r0, [pc, #268]	; (8007e00 <TestThread.4031+0x2f0>)
 8007cf2:	4d44      	ldr	r5, [pc, #272]	; (8007e04 <TestThread.4031+0x2f4>)
 8007cf4:	6800      	ldr	r0, [r0, #0]
 8007cf6:	f7f9 fe43 	bl	8001980 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007cfa:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	6803      	ldr	r3, [r0, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007d04:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d1f7      	bne.n	8007cfc <TestThread.4031+0x1ec>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8007d0c:	6831      	ldr	r1, [r6, #0]
 8007d0e:	4549      	cmp	r1, r9
 8007d10:	d90b      	bls.n	8007d2a <TestThread.4031+0x21a>
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007d12:	4d3d      	ldr	r5, [pc, #244]	; (8007e08 <TestThread.4031+0x2f8>)

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
    chSequentialStreamPut(chp, *cp++);
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007d1a:	6803      	ldr	r3, [r0, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	4790      	blx	r2
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8007d20:	6830      	ldr	r0, [r6, #0]
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007d22:	4629      	mov	r1, r5
 8007d24:	3501      	adds	r5, #1
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8007d26:	4281      	cmp	r1, r0
 8007d28:	d3f4      	bcc.n	8007d14 <TestThread.4031+0x204>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8007d2a:	4838      	ldr	r0, [pc, #224]	; (8007e0c <TestThread.4031+0x2fc>)
 8007d2c:	f7f9 fe00 	bl	8001930 <test_println>

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8007d30:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	f47f af7b 	bne.w	8007c30 <TestThread.4031+0x120>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8007d3a:	9d01      	ldr	r5, [sp, #4]
 8007d3c:	f855 7f04 	ldr.w	r7, [r5, #4]!
 8007d40:	9501      	str	r5, [sp, #4]
 8007d42:	2f00      	cmp	r7, #0
 8007d44:	f47f af6b 	bne.w	8007c1e <TestThread.4031+0x10e>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8007d48:	f7f9 fe62 	bl	8001a10 <print_line.6617>
 8007d4c:	4d30      	ldr	r5, [pc, #192]	; (8007e10 <TestThread.4031+0x300>)
  test_println("");
 8007d4e:	4810      	ldr	r0, [pc, #64]	; (8007d90 <TestThread.4031+0x280>)
 8007d50:	f7f9 fdee 	bl	8001930 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007d54:	2146      	movs	r1, #70	; 0x46
    chSequentialStreamPut(chp, *msgp++);
 8007d56:	6820      	ldr	r0, [r4, #0]
 8007d58:	6803      	ldr	r3, [r0, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007d5e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007d62:	2900      	cmp	r1, #0
 8007d64:	d1f7      	bne.n	8007d56 <TestThread.4031+0x246>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 8007d66:	f241 7080 	movw	r0, #6016	; 0x1780
 8007d6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007d6e:	7801      	ldrb	r1, [r0, #0]
 8007d70:	2900      	cmp	r1, #0
 8007d72:	d157      	bne.n	8007e24 <TestThread.4031+0x314>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8007d74:	4827      	ldr	r0, [pc, #156]	; (8007e14 <TestThread.4031+0x304>)
 8007d76:	f7f9 fddb 	bl	8001930 <test_println>

  return (msg_t)global_fail;
 8007d7a:	f241 7380 	movw	r3, #6016	; 0x1780
 8007d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d82:	7818      	ldrb	r0, [r3, #0]
}
 8007d84:	b003      	add	sp, #12
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20001784 	.word	0x20001784
 8007d90:	0800b718 	.word	0x0800b718
 8007d94:	0800abe0 	.word	0x0800abe0
 8007d98:	0800ac00 	.word	0x0800ac00
 8007d9c:	0800abfc 	.word	0x0800abfc
 8007da0:	0800ac60 	.word	0x0800ac60
 8007da4:	0800ac6c 	.word	0x0800ac6c
 8007da8:	0800ac80 	.word	0x0800ac80
 8007dac:	0800ac98 	.word	0x0800ac98
 8007db0:	0800acac 	.word	0x0800acac
 8007db4:	0800acf4 	.word	0x0800acf4
 8007db8:	0800ad08 	.word	0x0800ad08
 8007dbc:	0800ad10 	.word	0x0800ad10
 8007dc0:	0800ad24 	.word	0x0800ad24
 8007dc4:	0800ad30 	.word	0x0800ad30
 8007dc8:	0800ad44 	.word	0x0800ad44
 8007dcc:	0800ad5c 	.word	0x0800ad5c
 8007dd0:	0800ad70 	.word	0x0800ad70
 8007dd4:	0800ad9c 	.word	0x0800ad9c
 8007dd8:	0800adb0 	.word	0x0800adb0
 8007ddc:	0800b4d0 	.word	0x0800b4d0
 8007de0:	0800b300 	.word	0x0800b300
 8007de4:	20001754 	.word	0x20001754
 8007de8:	0800ac14 	.word	0x0800ac14
 8007dec:	0800adc0 	.word	0x0800adc0
 8007df0:	0800ac24 	.word	0x0800ac24
 8007df4:	20002010 	.word	0x20002010
 8007df8:	20001758 	.word	0x20001758
 8007dfc:	0800ac28 	.word	0x0800ac28
 8007e00:	20001788 	.word	0x20001788
 8007e04:	0800adc4 	.word	0x0800adc4
 8007e08:	2000178d 	.word	0x2000178d
 8007e0c:	0800ac40 	.word	0x0800ac40
 8007e10:	0800adc8 	.word	0x0800adc8
 8007e14:	0800ac50 	.word	0x0800ac50
 8007e18:	2000178c 	.word	0x2000178c
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8007e1c:	4803      	ldr	r0, [pc, #12]	; (8007e2c <TestThread.4031+0x31c>)
 8007e1e:	f7f9 fd87 	bl	8001930 <test_println>
 8007e22:	e700      	b.n	8007c26 <TestThread.4031+0x116>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 8007e24:	4802      	ldr	r0, [pc, #8]	; (8007e30 <TestThread.4031+0x320>)
 8007e26:	f7f9 fd83 	bl	8001930 <test_println>
 8007e2a:	e7a6      	b.n	8007d7a <TestThread.4031+0x26a>
 8007e2c:	0800ac44 	.word	0x0800ac44
 8007e30:	0800ac58 	.word	0x0800ac58
 8007e34:	f3af 8000 	nop.w
 8007e38:	f3af 8000 	nop.w
 8007e3c:	f3af 8000 	nop.w

08007e40 <thread2.7060>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 8007e40:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8007e42:	2064      	movs	r0, #100	; 0x64
 8007e44:	f7ff fe44 	bl	8007ad0 <chThdSleep>
 8007e48:	2320      	movs	r3, #32
 8007e4a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8007e4e:	f640 4048 	movw	r0, #3144	; 0xc48
 8007e52:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007e56:	f7fa fed3 	bl	8002c00 <chSemSignalI>
  chSchRescheduleS();
 8007e5a:	f7f9 fea9 	bl	8001bb0 <chSchRescheduleS>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8007e64:	bd08      	pop	{r3, pc}
 8007e66:	bf00      	nop
 8007e68:	f3af 8000 	nop.w
 8007e6c:	f3af 8000 	nop.w

08007e70 <mtx4_execute.7303>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8007e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007e74:	4d86      	ldr	r5, [pc, #536]	; (8008090 <mtx4_execute.7303+0x220>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007e76:	4887      	ldr	r0, [pc, #540]	; (8008094 <mtx4_execute.7303+0x224>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007e78:	69ab      	ldr	r3, [r5, #24]
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	689c      	ldr	r4, [r3, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007e7e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8007e82:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007e84:	4b84      	ldr	r3, [pc, #528]	; (8008098 <mtx4_execute.7303+0x228>)
 8007e86:	463a      	mov	r2, r7
 8007e88:	9000      	str	r0, [sp, #0]
 8007e8a:	4884      	ldr	r0, [pc, #528]	; (800809c <mtx4_execute.7303+0x22c>)
 8007e8c:	f7f9 ffd8 	bl	8001e40 <chThdCreateStatic>
 8007e90:	4e83      	ldr	r6, [pc, #524]	; (80080a0 <mtx4_execute.7303+0x230>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8007e92:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007e96:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8007e98:	4882      	ldr	r0, [pc, #520]	; (80080a4 <mtx4_execute.7303+0x234>)
 8007e9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	4b81      	ldr	r3, [pc, #516]	; (80080a8 <mtx4_execute.7303+0x238>)
 8007ea2:	9000      	str	r0, [sp, #0]
 8007ea4:	4881      	ldr	r0, [pc, #516]	; (80080ac <mtx4_execute.7303+0x23c>)
 8007ea6:	f7f9 ffcb 	bl	8001e40 <chThdCreateStatic>
 8007eaa:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8007eac:	4880      	ldr	r0, [pc, #512]	; (80080b0 <mtx4_execute.7303+0x240>)
 8007eae:	f7fa f9df 	bl	8002270 <chMtxLock>
 8007eb2:	69a9      	ldr	r1, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	688a      	ldr	r2, [r1, #8]
 8007eb8:	1aa3      	subs	r3, r4, r2
 8007eba:	4259      	negs	r1, r3
 8007ebc:	4159      	adcs	r1, r3
 8007ebe:	f7f9 fce7 	bl	8001890 <_test_assert>
 8007ec2:	b110      	cbz	r0, 8007eca <mtx4_execute.7303+0x5a>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8007ec4:	b002      	add	sp, #8
 8007ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8007eca:	20c8      	movs	r0, #200	; 0xc8
 8007ecc:	f7ff fe00 	bl	8007ad0 <chThdSleep>
 8007ed0:	69aa      	ldr	r2, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8007ed2:	2002      	movs	r0, #2
 8007ed4:	6893      	ldr	r3, [r2, #8]
 8007ed6:	1afa      	subs	r2, r7, r3
 8007ed8:	4251      	negs	r1, r2
 8007eda:	4151      	adcs	r1, r2
 8007edc:	f7f9 fcd8 	bl	8001890 <_test_assert>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d1ef      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  chMtxLock(&m1);
 8007ee4:	4873      	ldr	r0, [pc, #460]	; (80080b4 <mtx4_execute.7303+0x244>)
 8007ee6:	f7fa f9c3 	bl	8002270 <chMtxLock>
 8007eea:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8007eec:	2003      	movs	r0, #3
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	ebb7 0c02 	subs.w	ip, r7, r2
 8007ef4:	f1dc 0100 	rsbs	r1, ip, #0
 8007ef8:	eb51 010c 	adcs.w	r1, r1, ip
 8007efc:	f7f9 fcc8 	bl	8001890 <_test_assert>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1df      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007f04:	20c8      	movs	r0, #200	; 0xc8
 8007f06:	f7ff fde3 	bl	8007ad0 <chThdSleep>
 8007f0a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 8007f0c:	2004      	movs	r0, #4
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8007f14:	f1de 0100 	rsbs	r1, lr, #0
 8007f18:	eb51 010e 	adcs.w	r1, r1, lr
 8007f1c:	f7f9 fcb8 	bl	8001890 <_test_assert>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1cf      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  chMtxUnlock(&m1);
 8007f24:	4863      	ldr	r0, [pc, #396]	; (80080b4 <mtx4_execute.7303+0x244>)
 8007f26:	f7f9 ff43 	bl	8001db0 <chMtxUnlock>
 8007f2a:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8007f2c:	2005      	movs	r0, #5
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	1abb      	subs	r3, r7, r2
 8007f32:	4259      	negs	r1, r3
 8007f34:	4159      	adcs	r1, r3
 8007f36:	f7f9 fcab 	bl	8001890 <_test_assert>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d1c2      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007f3e:	20c8      	movs	r0, #200	; 0xc8
 8007f40:	f7ff fdc6 	bl	8007ad0 <chThdSleep>
 8007f44:	69aa      	ldr	r2, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8007f46:	2006      	movs	r0, #6
 8007f48:	6893      	ldr	r3, [r2, #8]
 8007f4a:	1afa      	subs	r2, r7, r3
 8007f4c:	4251      	negs	r1, r2
 8007f4e:	4151      	adcs	r1, r2
 8007f50:	f7f9 fc9e 	bl	8001890 <_test_assert>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d1b5      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  chMtxUnlockAll();
 8007f58:	f7fa f8ca 	bl	80020f0 <chMtxUnlockAll>
 8007f5c:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8007f5e:	2007      	movs	r0, #7
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	ebb4 0c02 	subs.w	ip, r4, r2
 8007f66:	f1dc 0100 	rsbs	r1, ip, #0
 8007f6a:	eb51 010c 	adcs.w	r1, r1, ip
 8007f6e:	f7f9 fc8f 	bl	8001890 <_test_assert>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d1a6      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  test_wait_threads();
 8007f76:	f7fa fa73 	bl	8002460 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8007f7a:	484f      	ldr	r0, [pc, #316]	; (80080b8 <mtx4_execute.7303+0x248>)
 8007f7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f80:	463a      	mov	r2, r7
 8007f82:	4b45      	ldr	r3, [pc, #276]	; (8008098 <mtx4_execute.7303+0x228>)
 8007f84:	9000      	str	r0, [sp, #0]
 8007f86:	4845      	ldr	r0, [pc, #276]	; (800809c <mtx4_execute.7303+0x22c>)
 8007f88:	f7f9 ff5a 	bl	8001e40 <chThdCreateStatic>
 8007f8c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8007f8e:	484b      	ldr	r0, [pc, #300]	; (80080bc <mtx4_execute.7303+0x24c>)
 8007f90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f94:	4642      	mov	r2, r8
 8007f96:	4b44      	ldr	r3, [pc, #272]	; (80080a8 <mtx4_execute.7303+0x238>)
 8007f98:	9000      	str	r0, [sp, #0]
 8007f9a:	4844      	ldr	r0, [pc, #272]	; (80080ac <mtx4_execute.7303+0x23c>)
 8007f9c:	f7f9 ff50 	bl	8001e40 <chThdCreateStatic>
 8007fa0:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8007fa2:	4843      	ldr	r0, [pc, #268]	; (80080b0 <mtx4_execute.7303+0x240>)
 8007fa4:	f7fa f964 	bl	8002270 <chMtxLock>
 8007fa8:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8007faa:	2008      	movs	r0, #8
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	ebb4 0e02 	subs.w	lr, r4, r2
 8007fb2:	f1de 0100 	rsbs	r1, lr, #0
 8007fb6:	eb51 010e 	adcs.w	r1, r1, lr
 8007fba:	f7f9 fc69 	bl	8001890 <_test_assert>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d180      	bne.n	8007ec4 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007fc2:	20c8      	movs	r0, #200	; 0xc8
 8007fc4:	f7ff fd84 	bl	8007ad0 <chThdSleep>
 8007fc8:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8007fca:	2009      	movs	r0, #9
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	1abb      	subs	r3, r7, r2
 8007fd0:	4259      	negs	r1, r3
 8007fd2:	4159      	adcs	r1, r3
 8007fd4:	f7f9 fc5c 	bl	8001890 <_test_assert>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f47f af73 	bne.w	8007ec4 <mtx4_execute.7303+0x54>
  chMtxLock(&m1);
 8007fde:	4835      	ldr	r0, [pc, #212]	; (80080b4 <mtx4_execute.7303+0x244>)
 8007fe0:	f7fa f946 	bl	8002270 <chMtxLock>
 8007fe4:	69aa      	ldr	r2, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8007fe6:	200a      	movs	r0, #10
 8007fe8:	6893      	ldr	r3, [r2, #8]
 8007fea:	1afa      	subs	r2, r7, r3
 8007fec:	4251      	negs	r1, r2
 8007fee:	4151      	adcs	r1, r2
 8007ff0:	f7f9 fc4e 	bl	8001890 <_test_assert>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	f47f af65 	bne.w	8007ec4 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007ffa:	20c8      	movs	r0, #200	; 0xc8
 8007ffc:	f7ff fd68 	bl	8007ad0 <chThdSleep>
 8008000:	69ae      	ldr	r6, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8008002:	200b      	movs	r0, #11
 8008004:	68b3      	ldr	r3, [r6, #8]
 8008006:	ebb8 0c03 	subs.w	ip, r8, r3
 800800a:	f1dc 0200 	rsbs	r2, ip, #0
 800800e:	eb52 010c 	adcs.w	r1, r2, ip
 8008012:	f7f9 fc3d 	bl	8001890 <_test_assert>
 8008016:	4606      	mov	r6, r0
 8008018:	2800      	cmp	r0, #0
 800801a:	f47f af53 	bne.w	8007ec4 <mtx4_execute.7303+0x54>
 800801e:	2020      	movs	r0, #32
 8008020:	f380 8811 	msr	BASEPRI, r0
  chSysLock();
  chMtxUnlockS(&m1);
 8008024:	4823      	ldr	r0, [pc, #140]	; (80080b4 <mtx4_execute.7303+0x244>)
 8008026:	f7fa f893 	bl	8002150 <chMtxUnlockS>
  chSchRescheduleS();
 800802a:	f7f9 fdc1 	bl	8001bb0 <chSchRescheduleS>
 800802e:	f386 8811 	msr	BASEPRI, r6
 8008032:	69a9      	ldr	r1, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8008034:	200c      	movs	r0, #12
 8008036:	688b      	ldr	r3, [r1, #8]
 8008038:	ebb7 0e03 	subs.w	lr, r7, r3
 800803c:	f1de 0200 	rsbs	r2, lr, #0
 8008040:	eb52 010e 	adcs.w	r1, r2, lr
 8008044:	f7f9 fc24 	bl	8001890 <_test_assert>
 8008048:	2800      	cmp	r0, #0
 800804a:	f47f af3b 	bne.w	8007ec4 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 800804e:	20c8      	movs	r0, #200	; 0xc8
 8008050:	f7ff fd3e 	bl	8007ad0 <chThdSleep>
 8008054:	69a9      	ldr	r1, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8008056:	200d      	movs	r0, #13
 8008058:	688b      	ldr	r3, [r1, #8]
 800805a:	1afa      	subs	r2, r7, r3
 800805c:	4251      	negs	r1, r2
 800805e:	4151      	adcs	r1, r2
 8008060:	f7f9 fc16 	bl	8001890 <_test_assert>
 8008064:	2800      	cmp	r0, #0
 8008066:	f47f af2d 	bne.w	8007ec4 <mtx4_execute.7303+0x54>
  chMtxUnlockAll();
 800806a:	f7fa f841 	bl	80020f0 <chMtxUnlockAll>
 800806e:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8008070:	200e      	movs	r0, #14
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	1aa3      	subs	r3, r4, r2
 8008076:	4259      	negs	r1, r3
 8008078:	4159      	adcs	r1, r3
 800807a:	f7f9 fc09 	bl	8001890 <_test_assert>
 800807e:	2800      	cmp	r0, #0
 8008080:	f47f af20 	bne.w	8007ec4 <mtx4_execute.7303+0x54>
  test_wait_threads();
}
 8008084:	b002      	add	sp, #8
 8008086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 800808a:	f7fa b9e9 	b.w	8002460 <test_wait_threads>
 800808e:	bf00      	nop
 8008090:	20001ec0 	.word	0x20001ec0
 8008094:	0800a4cc 	.word	0x0800a4cc
 8008098:	080080f1 	.word	0x080080f1
 800809c:	20001850 	.word	0x20001850
 80080a0:	20002010 	.word	0x20002010
 80080a4:	0800a4d0 	.word	0x0800a4d0
 80080a8:	080080c1 	.word	0x080080c1
 80080ac:	20001998 	.word	0x20001998
 80080b0:	20000c38 	.word	0x20000c38
 80080b4:	20000800 	.word	0x20000800
 80080b8:	0800a85c 	.word	0x0800a85c
 80080bc:	0800a4c8 	.word	0x0800a4c8

080080c0 <thread4b.7275.4058>:
  chMtxLock(&m2);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread4b(void *p) {
 80080c0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 80080c2:	f640 0400 	movw	r4, #2048	; 0x800
 80080c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 80080ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080ce:	f7ff fcff 	bl	8007ad0 <chThdSleep>
  chMtxLock(&m1);
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7fa f8cc 	bl	8002270 <chMtxLock>
  chMtxUnlock(&m1);
 80080d8:	4620      	mov	r0, r4
 80080da:	f7f9 fe69 	bl	8001db0 <chMtxUnlock>
  return 0;
}
 80080de:	2000      	movs	r0, #0
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	f3af 8000 	nop.w
 80080e8:	f3af 8000 	nop.w
 80080ec:	f3af 8000 	nop.w

080080f0 <thread4a.7278.4055>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 80080f0:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 80080f2:	f640 4438 	movw	r4, #3128	; 0xc38
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80080f6:	2064      	movs	r0, #100	; 0x64
  chMtxLock(&m2);
 80080f8:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 80080fc:	f7ff fce8 	bl	8007ad0 <chThdSleep>
  chMtxLock(&m2);
 8008100:	4620      	mov	r0, r4
 8008102:	f7fa f8b5 	bl	8002270 <chMtxLock>
  chMtxUnlock(&m2);
 8008106:	4620      	mov	r0, r4
 8008108:	f7f9 fe52 	bl	8001db0 <chMtxUnlock>
  return 0;
}
 800810c:	2000      	movs	r0, #0
 800810e:	bd10      	pop	{r4, pc}

08008110 <thread1.7703>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8008110:	b510      	push	{r4, lr}
 8008112:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8008114:	2064      	movs	r0, #100	; 0x64
 8008116:	f7ff fcdb 	bl	8007ad0 <chThdSleep>
 800811a:	2320      	movs	r3, #32
 800811c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8008120:	2101      	movs	r1, #1
 8008122:	4620      	mov	r0, r4
 8008124:	f7f9 ffb4 	bl	8002090 <chEvtSignalI>
  chSchRescheduleS();
 8008128:	f7f9 fd42 	bl	8001bb0 <chSchRescheduleS>
 800812c:	2000      	movs	r0, #0
 800812e:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8008132:	bd10      	pop	{r4, pc}
 8008134:	f3af 8000 	nop.w
 8008138:	f3af 8000 	nop.w
 800813c:	f3af 8000 	nop.w

08008140 <dyn3_execute.8084>:

static void dyn3_execute(void) {
 8008140:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008142:	4b4c      	ldr	r3, [pc, #304]	; (8008274 <dyn3_execute.8084+0x134>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8008144:	4c4c      	ldr	r4, [pc, #304]	; (8008278 <dyn3_execute.8084+0x138>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008146:	6998      	ldr	r0, [r3, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8008148:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 800814a:	6882      	ldr	r2, [r0, #8]
 800814c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008150:	3a01      	subs	r2, #1
 8008152:	4b4a      	ldr	r3, [pc, #296]	; (800827c <dyn3_execute.8084+0x13c>)
 8008154:	9400      	str	r4, [sp, #0]
 8008156:	484a      	ldr	r0, [pc, #296]	; (8008280 <dyn3_execute.8084+0x140>)
 8008158:	f7fa fcb2 	bl	8002ac0 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 800815c:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 800815e:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8008160:	2001      	movs	r0, #1
 8008162:	1a0b      	subs	r3, r1, r0
 8008164:	425a      	negs	r2, r3
 8008166:	eb52 0103 	adcs.w	r1, r2, r3
 800816a:	f7f9 fb91 	bl	8001890 <_test_assert>
 800816e:	b108      	cbz	r0, 8008174 <dyn3_execute.8084+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8008170:	b002      	add	sp, #8
 8008172:	bd10      	pop	{r4, pc}
 8008174:	2120      	movs	r1, #32
 8008176:	f381 8811 	msr	BASEPRI, r1
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 800817a:	7fa3      	ldrb	r3, [r4, #30]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	77a2      	strb	r2, [r4, #30]
 8008180:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8008184:	7fa1      	ldrb	r1, [r4, #30]
 8008186:	2002      	movs	r0, #2
 8008188:	1a0b      	subs	r3, r1, r0
 800818a:	425a      	negs	r2, r3
 800818c:	eb52 0103 	adcs.w	r1, r2, r3
 8008190:	f7f9 fb7e 	bl	8001890 <_test_assert>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1eb      	bne.n	8008170 <dyn3_execute.8084+0x30>
  chThdRelease(tp);
 8008198:	4620      	mov	r0, r4
 800819a:	f7fa f911 	bl	80023c0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 800819e:	7fa1      	ldrb	r1, [r4, #30]
 80081a0:	2003      	movs	r0, #3
 80081a2:	f1b1 0c01 	subs.w	ip, r1, #1
 80081a6:	f1dc 0300 	rsbs	r3, ip, #0
 80081aa:	eb53 010c 	adcs.w	r1, r3, ip
 80081ae:	f7f9 fb6f 	bl	8001890 <_test_assert>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1dc      	bne.n	8008170 <dyn3_execute.8084+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 80081b6:	4620      	mov	r0, r4
 80081b8:	f7fa faf2 	bl	80027a0 <regfind.8080>
 80081bc:	4601      	mov	r1, r0
 80081be:	2004      	movs	r0, #4
 80081c0:	f7f9 fb66 	bl	8001890 <_test_assert>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d1d3      	bne.n	8008170 <dyn3_execute.8084+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 80081c8:	4620      	mov	r0, r4
 80081ca:	f7fa fae9 	bl	80027a0 <regfind.8080>
 80081ce:	4601      	mov	r1, r0
 80081d0:	2005      	movs	r0, #5
 80081d2:	f7f9 fb5d 	bl	8001890 <_test_assert>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d1ca      	bne.n	8008170 <dyn3_execute.8084+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 80081da:	4620      	mov	r0, r4
 80081dc:	f7fa f8f0 	bl	80023c0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 80081e0:	7fa2      	ldrb	r2, [r4, #30]
 80081e2:	2006      	movs	r0, #6
 80081e4:	f1d2 0101 	rsbs	r1, r2, #1
 80081e8:	bf38      	it	cc
 80081ea:	2100      	movcc	r1, #0
 80081ec:	f7f9 fb50 	bl	8001890 <_test_assert>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d1bd      	bne.n	8008170 <dyn3_execute.8084+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 80081f4:	7f21      	ldrb	r1, [r4, #28]
 80081f6:	2007      	movs	r0, #7
 80081f8:	f1d1 0101 	rsbs	r1, r1, #1
 80081fc:	bf38      	it	cc
 80081fe:	2100      	movcc	r1, #0
 8008200:	f7f9 fb46 	bl	8001890 <_test_assert>
 8008204:	2800      	cmp	r0, #0
 8008206:	d1b3      	bne.n	8008170 <dyn3_execute.8084+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8008208:	4620      	mov	r0, r4
 800820a:	f7fa fac9 	bl	80027a0 <regfind.8080>
 800820e:	4601      	mov	r1, r0
 8008210:	2008      	movs	r0, #8
 8008212:	f7f9 fb3d 	bl	8001890 <_test_assert>
 8008216:	2800      	cmp	r0, #0
 8008218:	d1aa      	bne.n	8008170 <dyn3_execute.8084+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 800821a:	4620      	mov	r0, r4
 800821c:	f7fa fac0 	bl	80027a0 <regfind.8080>
 8008220:	4601      	mov	r1, r0
 8008222:	2009      	movs	r0, #9
 8008224:	f7f9 fb34 	bl	8001890 <_test_assert>
 8008228:	2800      	cmp	r0, #0
 800822a:	d1a1      	bne.n	8008170 <dyn3_execute.8084+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 800822c:	2064      	movs	r0, #100	; 0x64
 800822e:	f7ff fc4f 	bl	8007ad0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8008232:	7f23      	ldrb	r3, [r4, #28]
 8008234:	200a      	movs	r0, #10
 8008236:	f1b3 0e0f 	subs.w	lr, r3, #15
 800823a:	f1de 0200 	rsbs	r2, lr, #0
 800823e:	eb52 010e 	adcs.w	r1, r2, lr
 8008242:	f7f9 fb25 	bl	8001890 <_test_assert>
 8008246:	2800      	cmp	r0, #0
 8008248:	d192      	bne.n	8008170 <dyn3_execute.8084+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 800824a:	4620      	mov	r0, r4
 800824c:	f7fa faa8 	bl	80027a0 <regfind.8080>
 8008250:	4601      	mov	r1, r0
 8008252:	200b      	movs	r0, #11
 8008254:	f7f9 fb1c 	bl	8001890 <_test_assert>
 8008258:	2800      	cmp	r0, #0
 800825a:	d189      	bne.n	8008170 <dyn3_execute.8084+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 800825c:	4620      	mov	r0, r4
 800825e:	f7fa fa9f 	bl	80027a0 <regfind.8080>
 8008262:	f080 0001 	eor.w	r0, r0, #1
 8008266:	b2c1      	uxtb	r1, r0
 8008268:	200c      	movs	r0, #12
}
 800826a:	b002      	add	sp, #8
 800826c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8008270:	f7f9 bb0e 	b.w	8001890 <_test_assert>
 8008274:	20001ec0 	.word	0x20001ec0
 8008278:	0800a4d0 	.word	0x0800a4d0
 800827c:	080018e1 	.word	0x080018e1
 8008280:	20001760 	.word	0x20001760
 8008284:	f3af 8000 	nop.w
 8008288:	f3af 8000 	nop.w
 800828c:	f3af 8000 	nop.w

08008290 <Thread1.11031>:
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8008290:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <Thread1.11031+0x40>)
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <Thread1.11031+0x44>)
 8008294:	6998      	ldr	r0, [r3, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 8008296:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 800829a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800829e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80082d8 <Thread1.11031+0x48>

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 80082a2:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 80082a4:	f2c4 0501 	movt	r5, #16385	; 0x4001
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 80082a8:	6182      	str	r2, [r0, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 80082aa:	4637      	mov	r7, r6
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 80082ac:	f898 4000 	ldrb.w	r4, [r8]
    palClearPad(GPIOB, GPIOB_LED);
 80082b0:	616f      	str	r7, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 80082b2:	2c04      	cmp	r4, #4
 80082b4:	bf14      	ite	ne
 80082b6:	f44f 747a 	movne.w	r4, #1000	; 0x3e8
 80082ba:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff fc06 	bl	8007ad0 <chThdSleep>
    palSetPad(GPIOB, GPIOB_LED);
 80082c4:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 80082c6:	4620      	mov	r0, r4
 80082c8:	f7ff fc02 	bl	8007ad0 <chThdSleep>
 80082cc:	e7ee      	b.n	80082ac <Thread1.11031+0x1c>
 80082ce:	bf00      	nop
 80082d0:	20001ec0 	.word	0x20001ec0
 80082d4:	0800add8 	.word	0x0800add8
 80082d8:	20000fd0 	.word	0x20000fd0
 80082dc:	f3af 8000 	nop.w

080082e0 <RF_switch.part.8.11660>:
}

/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
 80082e0:	b508      	push	{r3, lr}
 80082e2:	2320      	movs	r3, #32
 80082e4:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80082e8:	f641 0320 	movw	r3, #6176	; 0x1820
 80082ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
  gpt_lld_start_timer(gptp, interval);
 80082f0:	4618      	mov	r0, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80082f2:	2204      	movs	r2, #4
  gpt_lld_start_timer(gptp, interval);
 80082f4:	2123      	movs	r1, #35	; 0x23
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80082f6:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
 80082f8:	f7fe fb0a 	bl	8006910 <gpt_lld_start_timer>
 80082fc:	2000      	movs	r0, #0
 80082fe:	f380 8811 	msr	BASEPRI, r0
 8008302:	bd08      	pop	{r3, pc}
 8008304:	f3af 8000 	nop.w
 8008308:	f3af 8000 	nop.w
 800830c:	f3af 8000 	nop.w

08008310 <switch_output_callback.11708>:
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8008310:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008314:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008318:	2210      	movs	r2, #16
 800831a:	611a      	str	r2, [r3, #16]
  SPI_CR1_MSTR | SPI_CR1_BR_0
};

static void switch_output_callback(GPTDriver *gpt_ptr) {
	RF_switch(2);
}
 800831c:	f7ff bfe0 	b.w	80082e0 <RF_switch.part.8.11660>

08008320 <switch_off_callback.11705>:
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8008320:	f44f 6240 	mov.w	r2, #3072	; 0xc00
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8008324:	f44f 6300 	mov.w	r3, #2048	; 0x800
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8008328:	f2c4 0201 	movt	r2, #16385	; 0x4001
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 800832c:	f2c4 0301 	movt	r3, #16385	; 0x4001
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8008330:	2110      	movs	r1, #16
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8008332:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8008336:	6151      	str	r1, [r2, #20]
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8008338:	6158      	str	r0, [r3, #20]
 800833a:	4770      	bx	lr
 800833c:	f3af 8000 	nop.w

08008340 <chprintf.10588>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008340:	b40e      	push	{r1, r2, r3}
 8008342:	b500      	push	{lr}
 8008344:	b082      	sub	sp, #8
 8008346:	ab03      	add	r3, sp, #12
 8008348:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800834c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800834e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8008350:	f7fe fd5e 	bl	8006e10 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8008354:	b002      	add	sp, #8
 8008356:	f85d eb04 	ldr.w	lr, [sp], #4
 800835a:	b003      	add	sp, #12
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <chprintf.11034>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008360:	b40e      	push	{r1, r2, r3}
 8008362:	b500      	push	{lr}
 8008364:	b082      	sub	sp, #8
 8008366:	ab03      	add	r3, sp, #12
 8008368:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800836c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800836e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8008370:	f7fe fd4e 	bl	8006e10 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8008374:	b002      	add	sp, #8
 8008376:	f85d eb04 	ldr.w	lr, [sp], #4
 800837a:	b003      	add	sp, #12
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <cmd_mem.11070>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008380:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8008382:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008384:	b083      	sub	sp, #12
 8008386:	4604      	mov	r4, r0
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8008388:	dd04      	ble.n	8008394 <cmd_mem.11070+0x14>
    chprintf(chp, "Usage: mem\r\n");
 800838a:	490f      	ldr	r1, [pc, #60]	; (80083c8 <cmd_mem.11070+0x48>)
 800838c:	f7ff ffe8 	bl	8008360 <chprintf.11034>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 8008390:	b003      	add	sp, #12
 8008392:	bd30      	pop	{r4, r5, pc}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8008394:	a901      	add	r1, sp, #4
 8008396:	2000      	movs	r0, #0
 8008398:	f7f9 ffaa 	bl	80022f0 <chHeapStatus>
 *
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  return (size_t)(endmem - nextmem);
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <cmd_mem.11070+0x4c>)
 800839e:	4605      	mov	r5, r0
 80083a0:	480b      	ldr	r0, [pc, #44]	; (80083d0 <cmd_mem.11070+0x50>)
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	6803      	ldr	r3, [r0, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 80083a6:	490b      	ldr	r1, [pc, #44]	; (80083d4 <cmd_mem.11070+0x54>)
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	4620      	mov	r0, r4
 80083ac:	f7ff ffd8 	bl	8008360 <chprintf.11034>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 80083b0:	462a      	mov	r2, r5
 80083b2:	4620      	mov	r0, r4
 80083b4:	4908      	ldr	r1, [pc, #32]	; (80083d8 <cmd_mem.11070+0x58>)
 80083b6:	f7ff ffd3 	bl	8008360 <chprintf.11034>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 80083ba:	4620      	mov	r0, r4
 80083bc:	4907      	ldr	r1, [pc, #28]	; (80083dc <cmd_mem.11070+0x5c>)
 80083be:	9a01      	ldr	r2, [sp, #4]
 80083c0:	f7ff ffce 	bl	8008360 <chprintf.11034>
 80083c4:	e7e4      	b.n	8008390 <cmd_mem.11070+0x10>
 80083c6:	bf00      	nop
 80083c8:	0800ade0 	.word	0x0800ade0
 80083cc:	20000fcc 	.word	0x20000fcc
 80083d0:	200015b0 	.word	0x200015b0
 80083d4:	0800adf0 	.word	0x0800adf0
 80083d8:	0800ae10 	.word	0x0800ae10
 80083dc:	0800ae28 	.word	0x0800ae28

080083e0 <cmd_test.11054>:
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80083e0:	b510      	push	{r4, lr}
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80083e2:	2900      	cmp	r1, #0
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 80083e4:	b082      	sub	sp, #8
 80083e6:	4604      	mov	r4, r0
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80083e8:	dd05      	ble.n	80083f6 <cmd_test.11054+0x16>
    chprintf(chp, "Usage: test\r\n");
 80083ea:	490e      	ldr	r1, [pc, #56]	; (8008424 <cmd_test.11054+0x44>)
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 80083ec:	b002      	add	sp, #8
 80083ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
 80083f2:	f7ff bfb5 	b.w	8008360 <chprintf.11034>
 80083f6:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <cmd_test.11054+0x48>)
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 80083f8:	2000      	movs	r0, #0
 80083fa:	699a      	ldr	r2, [r3, #24]
 80083fc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8008400:	6892      	ldr	r2, [r2, #8]
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <cmd_test.11054+0x4c>)
 8008404:	9400      	str	r4, [sp, #0]
 8008406:	f7fa fb5b 	bl	8002ac0 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 800840a:	b120      	cbz	r0, 8008416 <cmd_test.11054+0x36>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 800840c:	b002      	add	sp, #8
 800840e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8008412:	f7fa b805 	b.w	8002420 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8008416:	4906      	ldr	r1, [pc, #24]	; (8008430 <cmd_test.11054+0x50>)
 8008418:	4620      	mov	r0, r4
    return;
  }
  chThdWait(tp);
}
 800841a:	b002      	add	sp, #8
 800841c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8008420:	f7ff bf9e 	b.w	8008360 <chprintf.11034>
 8008424:	0800ae48 	.word	0x0800ae48
 8008428:	20001ec0 	.word	0x20001ec0
 800842c:	08007b11 	.word	0x08007b11
 8008430:	0800ae58 	.word	0x0800ae58
 8008434:	f3af 8000 	nop.w
 8008438:	f3af 8000 	nop.w
 800843c:	f3af 8000 	nop.w

08008440 <cmd_write.11046>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 8008440:	2900      	cmp	r1, #0
    return;
  }
  chThdWait(tp);
}

static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008442:	b538      	push	{r3, r4, r5, lr}
 8008444:	4604      	mov	r4, r0
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 8008446:	dc15      	bgt.n	8008474 <cmd_write.11046+0x34>
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 8008448:	4d0d      	ldr	r5, [pc, #52]	; (8008480 <cmd_write.11046+0x40>)
 800844a:	e006      	b.n	800845a <cmd_write.11046+0x1a>
 800844c:	6828      	ldr	r0, [r5, #0]
 800844e:	490d      	ldr	r1, [pc, #52]	; (8008484 <cmd_write.11046+0x44>)
 8008450:	6803      	ldr	r3, [r0, #0]
 8008452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008456:	480a      	ldr	r0, [pc, #40]	; (8008480 <cmd_write.11046+0x40>)
 8008458:	4798      	blx	r3
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	2100      	movs	r1, #0
 800845e:	4620      	mov	r0, r4
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	4790      	blx	r2
 8008464:	3001      	adds	r0, #1
 8008466:	d0f1      	beq.n	800844c <cmd_write.11046+0xc>
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8008468:	4907      	ldr	r1, [pc, #28]	; (8008488 <cmd_write.11046+0x48>)
 800846a:	4620      	mov	r0, r4
}
 800846c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8008470:	f7ff bf76 	b.w	8008360 <chprintf.11034>
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 8008474:	4905      	ldr	r1, [pc, #20]	; (800848c <cmd_write.11046+0x4c>)

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
}
 8008476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 800847a:	f7ff bf71 	b.w	8008360 <chprintf.11034>
 800847e:	bf00      	nop
 8008480:	20000d0c 	.word	0x20000d0c
 8008484:	20000834 	.word	0x20000834
 8008488:	0800ae68 	.word	0x0800ae68
 800848c:	0800ae78 	.word	0x0800ae78

08008490 <cmd_help.11038>:
  chprintf(chp, "\r\n\nstopped\r\n");
}

static void cmd_help(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
 8008490:	2900      	cmp	r1, #0
 8008492:	dd02      	ble.n	800849a <cmd_help.11038+0xa>
    chprintf(chp, "Usage: \r\n 'mem' runs cmd_mem: ChibiOS self test\r\n 'threads' runs cmd_threads: ChibiOS self test\r\n \
 8008494:	4901      	ldr	r1, [pc, #4]	; (800849c <cmd_help.11038+0xc>)
 8008496:	f7ff bf63 	b.w	8008360 <chprintf.11034>
 800849a:	4770      	bx	lr
 800849c:	0800ae88 	.word	0x0800ae88

080084a0 <chprintf.11622>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b500      	push	{lr}
 80084a4:	b082      	sub	sp, #8
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80084ac:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80084ae:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80084b0:	f7fe fcae 	bl	8006e10 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80084b4:	b002      	add	sp, #8
 80084b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ba:	b003      	add	sp, #12
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop

080084c0 <silabs_get_part_id>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
 80084c0:	b931      	cbnz	r1, 80084d0 <silabs_get_part_id+0x10>
		chprintf(chp, "Gets part ID, Usage: p \r\n");
		return;
	}
	chprintf(chp, "%4X\r\n",__REV16(Silabs_Part_ID));/* Fix endianess */
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <silabs_get_part_id+0x18>)
 80084c4:	881a      	ldrh	r2, [r3, #0]
 80084c6:	b291      	uxth	r1, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80084c8:	ba4a      	rev16	r2, r1
 80084ca:	4904      	ldr	r1, [pc, #16]	; (80084dc <silabs_get_part_id+0x1c>)
 80084cc:	f7ff bfe8 	b.w	80084a0 <chprintf.11622>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
		chprintf(chp, "Gets part ID, Usage: p \r\n");
 80084d0:	4903      	ldr	r1, [pc, #12]	; (80084e0 <silabs_get_part_id+0x20>)
 80084d2:	f7ff bfe5 	b.w	80084a0 <chprintf.11622>
 80084d6:	bf00      	nop
 80084d8:	20001700 	.word	0x20001700
 80084dc:	0800b038 	.word	0x0800b038
 80084e0:	0800b01c 	.word	0x0800b01c
 80084e4:	f3af 8000 	nop.w
 80084e8:	f3af 8000 	nop.w
 80084ec:	f3af 8000 	nop.w

080084f0 <msg1_execute.7393>:

static void msg1_execute(void) {
 80084f0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80084f2:	f641 63c0 	movw	r3, #7872	; 0x1ec0
 80084f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084fa:	6998      	ldr	r0, [r3, #24]
 80084fc:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 80084fe:	6882      	ldr	r2, [r0, #8]
 8008500:	f242 0371 	movw	r3, #8305	; 0x2071
 8008504:	9000      	str	r0, [sp, #0]
 8008506:	f641 0050 	movw	r0, #6224	; 0x1850
 800850a:	3201      	adds	r2, #1
 800850c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008510:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008514:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008518:	f7f9 fc92 	bl	8001e40 <chThdCreateStatic>
 800851c:	f242 0110 	movw	r1, #8208	; 0x2010
 8008520:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008524:	6008      	str	r0, [r1, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8008526:	f7f9 fce3 	bl	8001ef0 <chMsgWait>
 800852a:	2520      	movs	r5, #32
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 800852c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800852e:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8008532:	4631      	mov	r1, r6
 8008534:	f7f9 fc0c 	bl	8001d50 <chSchWakeupS>
 8008538:	2400      	movs	r4, #0
 800853a:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 800853e:	b2f0      	uxtb	r0, r6
 8008540:	f7f9 f9be 	bl	80018c0 <test_emit_token>
  tp = chMsgWait();
 8008544:	f7f9 fcd4 	bl	8001ef0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8008548:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800854a:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 800854e:	4631      	mov	r1, r6
 8008550:	f7f9 fbfe 	bl	8001d50 <chSchWakeupS>
 8008554:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8008558:	b2f0      	uxtb	r0, r6
 800855a:	f7f9 f9b1 	bl	80018c0 <test_emit_token>
  tp = chMsgWait();
 800855e:	f7f9 fcc7 	bl	8001ef0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8008562:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8008564:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8008568:	4631      	mov	r1, r6
 800856a:	f7f9 fbf1 	bl	8001d50 <chSchWakeupS>
 800856e:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8008572:	b2f0      	uxtb	r0, r6
 8008574:	f7f9 f9a4 	bl	80018c0 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8008578:	f64a 2140 	movw	r1, #43584	; 0xaa40
 800857c:	2001      	movs	r0, #1
 800857e:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8008582:	b002      	add	sp, #8
 8008584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8008588:	f7f9 b93a 	b.w	8001800 <_test_assert_sequence>
 800858c:	f3af 8000 	nop.w

08008590 <cmd_info.10627>:
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008590:	b510      	push	{r4, lr}

  (void)argv;
  if (argc > 0) {
 8008592:	2900      	cmp	r1, #0
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008594:	b082      	sub	sp, #8
 8008596:	4604      	mov	r4, r0

  (void)argv;
  if (argc > 0) {
 8008598:	dd06      	ble.n	80085a8 <cmd_info.10627+0x18>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800859a:	4919      	ldr	r1, [pc, #100]	; (8008600 <cmd_info.10627+0x70>)
 800859c:	4a19      	ldr	r2, [pc, #100]	; (8008604 <cmd_info.10627+0x74>)
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
#endif
#endif
}
 800859e:	b002      	add	sp, #8
 80085a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80085a4:	f7ff becc 	b.w	8008340 <chprintf.10588>
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80085a8:	4917      	ldr	r1, [pc, #92]	; (8008608 <cmd_info.10627+0x78>)
 80085aa:	4a18      	ldr	r2, [pc, #96]	; (800860c <cmd_info.10627+0x7c>)
 80085ac:	f7ff fec8 	bl	8008340 <chprintf.10588>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 80085b0:	4620      	mov	r0, r4
 80085b2:	4917      	ldr	r1, [pc, #92]	; (8008610 <cmd_info.10627+0x80>)
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <cmd_info.10627+0x84>)
 80085b6:	f7ff fec3 	bl	8008340 <chprintf.10588>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 80085ba:	4620      	mov	r0, r4
 80085bc:	4916      	ldr	r1, [pc, #88]	; (8008618 <cmd_info.10627+0x88>)
 80085be:	4a17      	ldr	r2, [pc, #92]	; (800861c <cmd_info.10627+0x8c>)
 80085c0:	f7ff febe 	bl	8008340 <chprintf.10588>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 80085c4:	4620      	mov	r0, r4
 80085c6:	4916      	ldr	r1, [pc, #88]	; (8008620 <cmd_info.10627+0x90>)
 80085c8:	4a16      	ldr	r2, [pc, #88]	; (8008624 <cmd_info.10627+0x94>)
 80085ca:	f7ff feb9 	bl	8008340 <chprintf.10588>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 80085ce:	4620      	mov	r0, r4
 80085d0:	4915      	ldr	r1, [pc, #84]	; (8008628 <cmd_info.10627+0x98>)
 80085d2:	4a16      	ldr	r2, [pc, #88]	; (800862c <cmd_info.10627+0x9c>)
 80085d4:	f7ff feb4 	bl	8008340 <chprintf.10588>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 80085d8:	4620      	mov	r0, r4
 80085da:	4915      	ldr	r1, [pc, #84]	; (8008630 <cmd_info.10627+0xa0>)
 80085dc:	4a15      	ldr	r2, [pc, #84]	; (8008634 <cmd_info.10627+0xa4>)
 80085de:	f7ff feaf 	bl	8008340 <chprintf.10588>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 80085e2:	4620      	mov	r0, r4
 80085e4:	4914      	ldr	r1, [pc, #80]	; (8008638 <cmd_info.10627+0xa8>)
 80085e6:	4a15      	ldr	r2, [pc, #84]	; (800863c <cmd_info.10627+0xac>)
 80085e8:	f7ff feaa 	bl	8008340 <chprintf.10588>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 80085ec:	4b14      	ldr	r3, [pc, #80]	; (8008640 <cmd_info.10627+0xb0>)
 80085ee:	4620      	mov	r0, r4
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4914      	ldr	r1, [pc, #80]	; (8008644 <cmd_info.10627+0xb4>)
 80085f4:	4a14      	ldr	r2, [pc, #80]	; (8008648 <cmd_info.10627+0xb8>)
 80085f6:	4b15      	ldr	r3, [pc, #84]	; (800864c <cmd_info.10627+0xbc>)
 80085f8:	f7ff fea2 	bl	8008340 <chprintf.10588>
#endif
#endif
}
 80085fc:	b002      	add	sp, #8
 80085fe:	bd10      	pop	{r4, pc}
 8008600:	0800b050 	.word	0x0800b050
 8008604:	0800b05c 	.word	0x0800b05c
 8008608:	0800b064 	.word	0x0800b064
 800860c:	0800ac60 	.word	0x0800ac60
 8008610:	0800b078 	.word	0x0800b078
 8008614:	0800acac 	.word	0x0800acac
 8008618:	0800b08c 	.word	0x0800b08c
 800861c:	0800ad08 	.word	0x0800ad08
 8008620:	0800b0a0 	.word	0x0800b0a0
 8008624:	0800ad24 	.word	0x0800ad24
 8008628:	0800b0b4 	.word	0x0800b0b4
 800862c:	0800ad44 	.word	0x0800ad44
 8008630:	0800b0c8 	.word	0x0800b0c8
 8008634:	0800ad70 	.word	0x0800ad70
 8008638:	0800b0dc 	.word	0x0800b0dc
 800863c:	0800adb0 	.word	0x0800adb0
 8008640:	0800b118 	.word	0x0800b118
 8008644:	0800b0f0 	.word	0x0800b0f0
 8008648:	0800b108 	.word	0x0800b108
 800864c:	0800b114 	.word	0x0800b114

08008650 <cmd_systime.10619>:

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8008650:	2900      	cmp	r1, #0
 8008652:	dd03      	ble.n	800865c <cmd_systime.10619+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008654:	4908      	ldr	r1, [pc, #32]	; (8008678 <cmd_systime.10619+0x28>)
 8008656:	4a09      	ldr	r2, [pc, #36]	; (800867c <cmd_systime.10619+0x2c>)
 8008658:	f7ff be72 	b.w	8008340 <chprintf.10588>
 800865c:	2320      	movs	r3, #32
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008666:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8008668:	2300      	movs	r3, #0
 800866a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 800866e:	4904      	ldr	r1, [pc, #16]	; (8008680 <cmd_systime.10619+0x30>)
 8008670:	b292      	uxth	r2, r2
 8008672:	f7ff be65 	b.w	8008340 <chprintf.10588>
 8008676:	bf00      	nop
 8008678:	0800b050 	.word	0x0800b050
 800867c:	0800b124 	.word	0x0800b124
 8008680:	0800b12c 	.word	0x0800b12c
 8008684:	f3af 8000 	nop.w
 8008688:	f3af 8000 	nop.w
 800868c:	f3af 8000 	nop.w

08008690 <evt1_execute.7722>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8008690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008694:	4c31      	ldr	r4, [pc, #196]	; (800875c <evt1_execute.7722+0xcc>)
 8008696:	b08a      	sub	sp, #40	; 0x28
 8008698:	2020      	movs	r0, #32
 800869a:	6024      	str	r4, [r4, #0]
 800869c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80086a0:	492f      	ldr	r1, [pc, #188]	; (8008760 <evt1_execute.7722+0xd0>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 80086a6:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80086a8:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 80086ac:	2701      	movs	r7, #1
  elp->el_flags    = 0;
 80086ae:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80086b4:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
 80086b6:	9601      	str	r6, [sp, #4]
  elp->el_events   = events;
 80086b8:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 80086ba:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 80086bc:	9204      	str	r2, [sp, #16]
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80086c6:	6820      	ldr	r0, [r4, #0]
 80086c8:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 80086ca:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80086cc:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 80086d0:	f04f 0802 	mov.w	r8, #2

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80086d4:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
 80086d6:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
 80086d8:	f8cd 801c 	str.w	r8, [sp, #28]
  elp->el_flags    = 0;
 80086dc:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 80086de:	9209      	str	r2, [sp, #36]	; 0x24
 80086e0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 80086e4:	6823      	ldr	r3, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 80086e6:	4638      	mov	r0, r7
 80086e8:	1b19      	subs	r1, r3, r4
 80086ea:	bf18      	it	ne
 80086ec:	2101      	movne	r1, #1
 80086ee:	f7f9 f8cf 	bl	8001890 <_test_assert>
 80086f2:	b110      	cbz	r0, 80086fa <evt1_execute.7722+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 80086f4:	b00a      	add	sp, #40	; 0x28
 80086f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 80086fa:	4620      	mov	r0, r4
 80086fc:	4669      	mov	r1, sp
 80086fe:	f7f9 f9bf 	bl	8001a80 <chEvtUnregister>
 8008702:	6822      	ldr	r2, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8008704:	4640      	mov	r0, r8
 8008706:	1b11      	subs	r1, r2, r4
 8008708:	bf18      	it	ne
 800870a:	2101      	movne	r1, #1
 800870c:	f7f9 f8c0 	bl	8001890 <_test_assert>
 8008710:	2800      	cmp	r0, #0
 8008712:	d1ef      	bne.n	80086f4 <evt1_execute.7722+0x64>
  chEvtUnregister(&es1, &el2);
 8008714:	4620      	mov	r0, r4
 8008716:	4631      	mov	r1, r6
 8008718:	f7f9 f9b2 	bl	8001a80 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 800871c:	6821      	ldr	r1, [r4, #0]
 800871e:	2003      	movs	r0, #3
 8008720:	1b0b      	subs	r3, r1, r4
 8008722:	425a      	negs	r2, r3
 8008724:	eb52 0103 	adcs.w	r1, r2, r3
 8008728:	f7f9 f8b2 	bl	8001890 <_test_assert>
 800872c:	2800      	cmp	r0, #0
 800872e:	d1e1      	bne.n	80086f4 <evt1_execute.7722+0x64>
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8008730:	4e0c      	ldr	r6, [pc, #48]	; (8008764 <evt1_execute.7722+0xd4>)
 8008732:	2507      	movs	r5, #7
 8008734:	4604      	mov	r4, r0
 8008736:	e001      	b.n	800873c <evt1_execute.7722+0xac>
    }
    eid++;
 8008738:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 800873a:	b155      	cbz	r5, 8008752 <evt1_execute.7722+0xc2>
    if (events & EVENT_MASK(eid)) {
 800873c:	fa07 f104 	lsl.w	r1, r7, r4
 8008740:	4229      	tst	r1, r5
 8008742:	d0f9      	beq.n	8008738 <evt1_execute.7722+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8008744:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8008748:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 800874a:	ea25 0501 	bic.w	r5, r5, r1
      handlers[eid](eid);
 800874e:	4798      	blx	r3
 8008750:	e7f2      	b.n	8008738 <evt1_execute.7722+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8008752:	2004      	movs	r0, #4
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <evt1_execute.7722+0xd8>)
 8008756:	f7f9 f853 	bl	8001800 <_test_assert_sequence>
 800875a:	e7cb      	b.n	80086f4 <evt1_execute.7722+0x64>
 800875c:	20000c58 	.word	0x20000c58
 8008760:	20001ec0 	.word	0x20001ec0
 8008764:	0800b040 	.word	0x0800b040
 8008768:	0800aa40 	.word	0x0800aa40
 800876c:	f3af 8000 	nop.w

08008770 <thd4_execute.6832>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8008772:	f7ff f9bd 	bl	8007af0 <test_wait_tick>
 8008776:	2620      	movs	r6, #32
 8008778:	f386 8811 	msr	BASEPRI, r6
 800877c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8008780:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8008782:	2300      	movs	r3, #0
 8008784:	b2a4      	uxth	r4, r4
 8008786:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 800878a:	20c8      	movs	r0, #200	; 0xc8
 800878c:	f7ff f9a0 	bl	8007ad0 <chThdSleep>
  test_assert_time_window(1,
 8008790:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8008794:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8008798:	2001      	movs	r0, #1
 800879a:	b289      	uxth	r1, r1
 800879c:	b292      	uxth	r2, r2
 800879e:	f7f9 f807 	bl	80017b0 <_test_assert_time_window>
 80087a2:	b100      	cbz	r0, 80087a6 <thd4_execute.6832+0x36>
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	f386 8811 	msr	BASEPRI, r6
 80087aa:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80087ac:	b2a4      	uxth	r4, r4
 80087ae:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 80087b2:	20c8      	movs	r0, #200	; 0xc8
 80087b4:	f7ff f98c 	bl	8007ad0 <chThdSleep>
  test_assert_time_window(2,
 80087b8:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 80087bc:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 80087c0:	2002      	movs	r0, #2
 80087c2:	b299      	uxth	r1, r3
 80087c4:	b292      	uxth	r2, r2
 80087c6:	f7f8 fff3 	bl	80017b0 <_test_assert_time_window>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d1ea      	bne.n	80087a4 <thd4_execute.6832+0x34>
 80087ce:	f386 8811 	msr	BASEPRI, r6
 80087d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80087d4:	b28c      	uxth	r4, r1
 80087d6:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 80087da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80087de:	f7ff f977 	bl	8007ad0 <chThdSleep>
  test_assert_time_window(3,
 80087e2:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 80087e6:	f204 72d2 	addw	r2, r4, #2002	; 0x7d2
 80087ea:	2003      	movs	r0, #3
 80087ec:	b299      	uxth	r1, r3
 80087ee:	b292      	uxth	r2, r2
 80087f0:	f7f8 ffde 	bl	80017b0 <_test_assert_time_window>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d1d5      	bne.n	80087a4 <thd4_execute.6832+0x34>
 80087f8:	f386 8811 	msr	BASEPRI, r6
 80087fc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80087fe:	b2bf      	uxth	r7, r7
 8008800:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8008804:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8008808:	b284      	uxth	r4, r0
 800880a:	f386 8811 	msr	BASEPRI, r6
 800880e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0)
 8008810:	1a63      	subs	r3, r4, r1
 8008812:	b299      	uxth	r1, r3
 8008814:	b959      	cbnz	r1, 800882e <thd4_execute.6832+0xbe>
 8008816:	2200      	movs	r2, #0
 8008818:	f382 8811 	msr	BASEPRI, r2
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800881c:	f107 03ca 	add.w	r3, r7, #202	; 0xca
 8008820:	2004      	movs	r0, #4
 8008822:	4621      	mov	r1, r4
 8008824:	b29a      	uxth	r2, r3
                          time,
                          time + CH_CFG_ST_TIMEDELTA);
}
 8008826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800882a:	f7f8 bfc1 	b.w	80017b0 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800882e:	2008      	movs	r0, #8
 8008830:	f7fc ff7e 	bl	8005730 <chSchGoSleepTimeoutS>
 8008834:	e7ef      	b.n	8008816 <thd4_execute.6832+0xa6>
 8008836:	bf00      	nop
 8008838:	f3af 8000 	nop.w
 800883c:	f3af 8000 	nop.w

08008840 <sem2_execute.7099>:

static void sem2_execute(void) {
 8008840:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8008842:	4ca2      	ldr	r4, [pc, #648]	; (8008acc <sem2_execute.7099+0x28c>)
 8008844:	2100      	movs	r1, #0
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 8008846:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8008848:	4620      	mov	r0, r4
 800884a:	f7fd f929 	bl	8005aa0 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 800884e:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 8008852:	f1dc 0100 	rsbs	r1, ip, #0
 8008856:	eb51 010c 	adcs.w	r1, r1, ip
 800885a:	2001      	movs	r0, #1
 800885c:	f7f9 f818 	bl	8001890 <_test_assert>
 8008860:	b108      	cbz	r0, 8008866 <sem2_execute.7099+0x26>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8008862:	b002      	add	sp, #8
 8008864:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8008866:	6822      	ldr	r2, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8008868:	2002      	movs	r0, #2
 800886a:	ebb2 0e04 	subs.w	lr, r2, r4
 800886e:	f1de 0300 	rsbs	r3, lr, #0
 8008872:	eb53 010e 	adcs.w	r1, r3, lr
 8008876:	f7f9 f80b 	bl	8001890 <_test_assert>
 800887a:	2800      	cmp	r0, #0
 800887c:	d1f1      	bne.n	8008862 <sem2_execute.7099+0x22>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 800887e:	68a5      	ldr	r5, [r4, #8]
 8008880:	2003      	movs	r0, #3
 8008882:	f1d5 0101 	rsbs	r1, r5, #1
 8008886:	bf38      	it	cc
 8008888:	2100      	movcc	r1, #0
 800888a:	f7f9 f801 	bl	8001890 <_test_assert>
 800888e:	4605      	mov	r5, r0
 8008890:	2800      	cmp	r0, #0
 8008892:	d1e6      	bne.n	8008862 <sem2_execute.7099+0x22>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008894:	488e      	ldr	r0, [pc, #568]	; (8008ad0 <sem2_execute.7099+0x290>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008896:	4b8f      	ldr	r3, [pc, #572]	; (8008ad4 <sem2_execute.7099+0x294>)
 8008898:	6982      	ldr	r2, [r0, #24]
 800889a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800889e:	6892      	ldr	r2, [r2, #8]
 80088a0:	488d      	ldr	r0, [pc, #564]	; (8008ad8 <sem2_execute.7099+0x298>)
 80088a2:	3a01      	subs	r2, #1
 80088a4:	9500      	str	r5, [sp, #0]
 80088a6:	f7f9 facb 	bl	8001e40 <chThdCreateStatic>
 80088aa:	4b8c      	ldr	r3, [pc, #560]	; (8008adc <sem2_execute.7099+0x29c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 80088ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80088b0:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7fd f8f4 	bl	8005aa0 <chSemWaitTimeout>
 80088b8:	4605      	mov	r5, r0
  test_wait_threads();
 80088ba:	f7f9 fdd1 	bl	8002460 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 80088be:	2004      	movs	r0, #4
 80088c0:	f1d5 0101 	rsbs	r1, r5, #1
 80088c4:	bf38      	it	cc
 80088c6:	2100      	movcc	r1, #0
 80088c8:	f7f8 ffe2 	bl	8001890 <_test_assert>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d1c8      	bne.n	8008862 <sem2_execute.7099+0x22>
 80088d0:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 80088d2:	2005      	movs	r0, #5
 80088d4:	1b0a      	subs	r2, r1, r4
 80088d6:	4253      	negs	r3, r2
 80088d8:	eb53 0102 	adcs.w	r1, r3, r2
 80088dc:	f7f8 ffd8 	bl	8001890 <_test_assert>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d1be      	bne.n	8008862 <sem2_execute.7099+0x22>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 80088e4:	68a5      	ldr	r5, [r4, #8]
 80088e6:	2006      	movs	r0, #6
 80088e8:	f1d5 0101 	rsbs	r1, r5, #1
 80088ec:	bf38      	it	cc
 80088ee:	2100      	movcc	r1, #0
 80088f0:	f7f8 ffce 	bl	8001890 <_test_assert>
 80088f4:	4605      	mov	r5, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1b3      	bne.n	8008862 <sem2_execute.7099+0x22>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 80088fa:	f7ff f8f9 	bl	8007af0 <test_wait_tick>
 80088fe:	2620      	movs	r6, #32
 8008900:	f386 8811 	msr	BASEPRI, r6
 8008904:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008908:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800890a:	f385 8811 	msr	BASEPRI, r5
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 800890e:	2041      	movs	r0, #65	; 0x41
 8008910:	f7f8 ffd6 	bl	80018c0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008914:	2164      	movs	r1, #100	; 0x64
 8008916:	4620      	mov	r0, r4
 8008918:	f7fd f8c2 	bl	8005aa0 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 800891c:	f1b0 32ff 	subs.w	r2, r0, #4294967295
 8008920:	4251      	negs	r1, r2
 8008922:	4151      	adcs	r1, r2
 8008924:	2007      	movs	r0, #7
 8008926:	f7f8 ffb3 	bl	8001890 <_test_assert>
 800892a:	2800      	cmp	r0, #0
 800892c:	d199      	bne.n	8008862 <sem2_execute.7099+0x22>
 800892e:	6823      	ldr	r3, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008930:	2008      	movs	r0, #8
 8008932:	ebb3 0c04 	subs.w	ip, r3, r4
 8008936:	f1dc 0200 	rsbs	r2, ip, #0
 800893a:	eb52 010c 	adcs.w	r1, r2, ip
 800893e:	f7f8 ffa7 	bl	8001890 <_test_assert>
 8008942:	2800      	cmp	r0, #0
 8008944:	d18d      	bne.n	8008862 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8008946:	68a1      	ldr	r1, [r4, #8]
 8008948:	2009      	movs	r0, #9
 800894a:	f1d1 0101 	rsbs	r1, r1, #1
 800894e:	bf38      	it	cc
 8008950:	2100      	movcc	r1, #0
 8008952:	f7f8 ff9d 	bl	8001890 <_test_assert>
 8008956:	2800      	cmp	r0, #0
 8008958:	d183      	bne.n	8008862 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 800895a:	2042      	movs	r0, #66	; 0x42
 800895c:	f7f8 ffb0 	bl	80018c0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008960:	2164      	movs	r1, #100	; 0x64
 8008962:	4620      	mov	r0, r4
 8008964:	f7fd f89c 	bl	8005aa0 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8008968:	f1b0 3eff 	subs.w	lr, r0, #4294967295
 800896c:	f1de 0000 	rsbs	r0, lr, #0
 8008970:	eb50 010e 	adcs.w	r1, r0, lr
 8008974:	2007      	movs	r0, #7
 8008976:	f7f8 ff8b 	bl	8001890 <_test_assert>
 800897a:	2800      	cmp	r0, #0
 800897c:	f47f af71 	bne.w	8008862 <sem2_execute.7099+0x22>
 8008980:	6825      	ldr	r5, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008982:	2008      	movs	r0, #8
 8008984:	1b2b      	subs	r3, r5, r4
 8008986:	425a      	negs	r2, r3
 8008988:	eb52 0103 	adcs.w	r1, r2, r3
 800898c:	4625      	mov	r5, r4
 800898e:	f7f8 ff7f 	bl	8001890 <_test_assert>
 8008992:	2800      	cmp	r0, #0
 8008994:	f47f af65 	bne.w	8008862 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8008998:	68a1      	ldr	r1, [r4, #8]
 800899a:	2009      	movs	r0, #9
 800899c:	f1d1 0101 	rsbs	r1, r1, #1
 80089a0:	bf38      	it	cc
 80089a2:	2100      	movcc	r1, #0
 80089a4:	f7f8 ff74 	bl	8001890 <_test_assert>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	f47f af5a 	bne.w	8008862 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 80089ae:	2043      	movs	r0, #67	; 0x43
 80089b0:	f7f8 ff86 	bl	80018c0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 80089b4:	2164      	movs	r1, #100	; 0x64
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7fd f872 	bl	8005aa0 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 80089bc:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 80089c0:	4243      	negs	r3, r0
 80089c2:	eb53 0100 	adcs.w	r1, r3, r0
 80089c6:	2007      	movs	r0, #7
 80089c8:	f7f8 ff62 	bl	8001890 <_test_assert>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f47f af48 	bne.w	8008862 <sem2_execute.7099+0x22>
 80089d2:	6822      	ldr	r2, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80089d4:	2008      	movs	r0, #8
 80089d6:	1b13      	subs	r3, r2, r4
 80089d8:	4259      	negs	r1, r3
 80089da:	4159      	adcs	r1, r3
 80089dc:	f7f8 ff58 	bl	8001890 <_test_assert>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f47f af3e 	bne.w	8008862 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80089e6:	68a2      	ldr	r2, [r4, #8]
 80089e8:	2009      	movs	r0, #9
 80089ea:	f1d2 0101 	rsbs	r1, r2, #1
 80089ee:	bf38      	it	cc
 80089f0:	2100      	movcc	r1, #0
 80089f2:	f7f8 ff4d 	bl	8001890 <_test_assert>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f47f af33 	bne.w	8008862 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 80089fc:	2044      	movs	r0, #68	; 0x44
 80089fe:	f7f8 ff5f 	bl	80018c0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008a02:	2164      	movs	r1, #100	; 0x64
 8008a04:	4620      	mov	r0, r4
 8008a06:	f7fd f84b 	bl	8005aa0 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8008a0a:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 8008a0e:	f1dc 0000 	rsbs	r0, ip, #0
 8008a12:	eb50 010c 	adcs.w	r1, r0, ip
 8008a16:	2007      	movs	r0, #7
 8008a18:	f7f8 ff3a 	bl	8001890 <_test_assert>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f47f af20 	bne.w	8008862 <sem2_execute.7099+0x22>
 8008a22:	6823      	ldr	r3, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008a24:	2008      	movs	r0, #8
 8008a26:	ebb3 0e04 	subs.w	lr, r3, r4
 8008a2a:	f1de 0100 	rsbs	r1, lr, #0
 8008a2e:	eb51 010e 	adcs.w	r1, r1, lr
 8008a32:	f7f8 ff2d 	bl	8001890 <_test_assert>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f47f af13 	bne.w	8008862 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8008a3c:	68a2      	ldr	r2, [r4, #8]
 8008a3e:	2009      	movs	r0, #9
 8008a40:	f1d2 0101 	rsbs	r1, r2, #1
 8008a44:	bf38      	it	cc
 8008a46:	2100      	movcc	r1, #0
 8008a48:	f7f8 ff22 	bl	8001890 <_test_assert>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	f47f af08 	bne.w	8008862 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8008a52:	2045      	movs	r0, #69	; 0x45
 8008a54:	f7f8 ff34 	bl	80018c0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008a58:	2164      	movs	r1, #100	; 0x64
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f7fd f820 	bl	8005aa0 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8008a60:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 8008a64:	4243      	negs	r3, r0
 8008a66:	eb53 0100 	adcs.w	r1, r3, r0
 8008a6a:	2007      	movs	r0, #7
 8008a6c:	f7f8 ff10 	bl	8001890 <_test_assert>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f47f aef6 	bne.w	8008862 <sem2_execute.7099+0x22>
 8008a76:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008a78:	2008      	movs	r0, #8
 8008a7a:	1b0a      	subs	r2, r1, r4
 8008a7c:	4253      	negs	r3, r2
 8008a7e:	eb53 0102 	adcs.w	r1, r3, r2
 8008a82:	f7f8 ff05 	bl	8001890 <_test_assert>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f47f aeeb 	bne.w	8008862 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8008a8c:	68a1      	ldr	r1, [r4, #8]
 8008a8e:	2009      	movs	r0, #9
 8008a90:	f1d1 0101 	rsbs	r1, r1, #1
 8008a94:	bf38      	it	cc
 8008a96:	2100      	movcc	r1, #0
 8008a98:	f7f8 fefa 	bl	8001890 <_test_assert>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	f47f aee0 	bne.w	8008862 <sem2_execute.7099+0x22>
  }
  test_assert_sequence(10, "ABCDE");
 8008aa2:	200a      	movs	r0, #10
 8008aa4:	490e      	ldr	r1, [pc, #56]	; (8008ae0 <sem2_execute.7099+0x2a0>)
 8008aa6:	f7f8 feab 	bl	8001800 <_test_assert_sequence>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	f47f aed9 	bne.w	8008862 <sem2_execute.7099+0x22>
 8008ab0:	b2b6      	uxth	r6, r6

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8008ab2:	f506 73fa 	add.w	r3, r6, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8008ab6:	f506 72fc 	add.w	r2, r6, #504	; 0x1f8
 8008aba:	200b      	movs	r0, #11
 8008abc:	b299      	uxth	r1, r3
 8008abe:	b292      	uxth	r2, r2
}
 8008ac0:	b002      	add	sp, #8
 8008ac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8008ac6:	f7f8 be73 	b.w	80017b0 <_test_assert_time_window>
 8008aca:	bf00      	nop
 8008acc:	20000c48 	.word	0x20000c48
 8008ad0:	20001ec0 	.word	0x20001ec0
 8008ad4:	08007e41 	.word	0x08007e41
 8008ad8:	20001850 	.word	0x20001850
 8008adc:	20002010 	.word	0x20002010
 8008ae0:	0800a4d4 	.word	0x0800a4d4
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	f3af 8000 	nop.w
 8008aec:	f3af 8000 	nop.w

08008af0 <bmk12_execute.8462>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8008af0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008af2:	f7fe fffd 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008af6:	f7fc ffe3 	bl	8005ac0 <test_start_timer.constprop.19>
 8008afa:	4d14      	ldr	r5, [pc, #80]	; (8008b4c <bmk12_execute.8462+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 8008afc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 8008afe:	4814      	ldr	r0, [pc, #80]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b00:	f7f9 fbb6 	bl	8002270 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008b04:	4812      	ldr	r0, [pc, #72]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b06:	f7f9 f953 	bl	8001db0 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008b0a:	4811      	ldr	r0, [pc, #68]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b0c:	f7f9 fbb0 	bl	8002270 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008b10:	480f      	ldr	r0, [pc, #60]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b12:	f7f9 f94d 	bl	8001db0 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008b16:	480e      	ldr	r0, [pc, #56]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b18:	f7f9 fbaa 	bl	8002270 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008b1c:	480c      	ldr	r0, [pc, #48]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b1e:	f7f9 f947 	bl	8001db0 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008b22:	480b      	ldr	r0, [pc, #44]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b24:	f7f9 fba4 	bl	8002270 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008b28:	4809      	ldr	r0, [pc, #36]	; (8008b50 <bmk12_execute.8462+0x60>)
 8008b2a:	f7f9 f941 	bl	8001db0 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008b2e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8008b30:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0e3      	beq.n	8008afe <bmk12_execute.8462+0xe>
  test_print("--- Score : ");
 8008b36:	4807      	ldr	r0, [pc, #28]	; (8008b54 <bmk12_execute.8462+0x64>)
 8008b38:	f7f8 ff12 	bl	8001960 <test_print>
  test_printn(n * 4);
 8008b3c:	00a0      	lsls	r0, r4, #2
 8008b3e:	f7f8 ff1f 	bl	8001980 <test_printn>
  test_println(" lock+unlock/S");
 8008b42:	4805      	ldr	r0, [pc, #20]	; (8008b58 <bmk12_execute.8462+0x68>)
}
 8008b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8008b48:	f7f8 bef2 	b.w	8001930 <test_println>
 8008b4c:	20001522 	.word	0x20001522
 8008b50:	200017a8 	.word	0x200017a8
 8008b54:	0800a748 	.word	0x0800a748
 8008b58:	0800b134 	.word	0x0800b134
 8008b5c:	f3af 8000 	nop.w

08008b60 <bmk6_execute.8479>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8008b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b62:	4b12      	ldr	r3, [pc, #72]	; (8008bac <bmk6_execute.8479+0x4c>)
 8008b64:	b083      	sub	sp, #12
 8008b66:	6998      	ldr	r0, [r3, #24]

  uint32_t n = 0;
 8008b68:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8008b6a:	6885      	ldr	r5, [r0, #8]
 8008b6c:	4f10      	ldr	r7, [pc, #64]	; (8008bb0 <bmk6_execute.8479+0x50>)
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8008b6e:	4626      	mov	r6, r4

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8008b70:	3501      	adds	r5, #1
  test_wait_tick();
 8008b72:	f7fe ffbd 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008b76:	f7fc ffa3 	bl	8005ac0 <test_start_timer.constprop.19>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 8008b7a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008b7e:	9600      	str	r6, [sp, #0]
 8008b80:	480c      	ldr	r0, [pc, #48]	; (8008bb4 <bmk6_execute.8479+0x54>)
 8008b82:	462a      	mov	r2, r5
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <bmk6_execute.8479+0x58>)
 8008b86:	f7f9 f95b 	bl	8001e40 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008b8a:	7839      	ldrb	r1, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 8008b8c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008b8e:	2900      	cmp	r1, #0
 8008b90:	d0f3      	beq.n	8008b7a <bmk6_execute.8479+0x1a>
  test_print("--- Score : ");
 8008b92:	480a      	ldr	r0, [pc, #40]	; (8008bbc <bmk6_execute.8479+0x5c>)
 8008b94:	f7f8 fee4 	bl	8001960 <test_print>
  test_printn(n);
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7f8 fef1 	bl	8001980 <test_printn>
  test_println(" threads/S");
 8008b9e:	4808      	ldr	r0, [pc, #32]	; (8008bc0 <bmk6_execute.8479+0x60>)
}
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8008ba6:	f7f8 bec3 	b.w	8001930 <test_println>
 8008baa:	bf00      	nop
 8008bac:	20001ec0 	.word	0x20001ec0
 8008bb0:	20001522 	.word	0x20001522
 8008bb4:	20001850 	.word	0x20001850
 8008bb8:	08005d41 	.word	0x08005d41
 8008bbc:	0800a748 	.word	0x0800a748
 8008bc0:	0800b144 	.word	0x0800b144
 8008bc4:	f3af 8000 	nop.w
 8008bc8:	f3af 8000 	nop.w
 8008bcc:	f3af 8000 	nop.w

08008bd0 <bmk4_execute.8487>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 8008bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd4:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <bmk4_execute.8487+0x98>)
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	6998      	ldr	r0, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008bda:	2500      	movs	r5, #0
 8008bdc:	6882      	ldr	r2, [r0, #8]
 8008bde:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <bmk4_execute.8487+0x9c>)
 8008be0:	3201      	adds	r2, #1
 8008be2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008be6:	9500      	str	r5, [sp, #0]
 8008be8:	4821      	ldr	r0, [pc, #132]	; (8008c70 <bmk4_execute.8487+0xa0>)
 8008bea:	f7f9 f929 	bl	8001e40 <chThdCreateStatic>
 8008bee:	4921      	ldr	r1, [pc, #132]	; (8008c74 <bmk4_execute.8487+0xa4>)
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	6008      	str	r0, [r1, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8008bf4:	f7fe ff7c 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008bf8:	f7fc ff62 	bl	8005ac0 <test_start_timer.constprop.19>
 8008bfc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008c80 <bmk4_execute.8487+0xb0>
 8008c00:	2720      	movs	r7, #32
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8008c02:	462e      	mov	r6, r5
 8008c04:	f387 8811 	msr	BASEPRI, r7
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7f9 f8a0 	bl	8001d50 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008c10:	4620      	mov	r0, r4
 8008c12:	2100      	movs	r1, #0
 8008c14:	f7f9 f89c 	bl	8001d50 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008c18:	4620      	mov	r0, r4
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	f7f9 f898 	bl	8001d50 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008c20:	4620      	mov	r0, r4
 8008c22:	2100      	movs	r1, #0
 8008c24:	f7f9 f894 	bl	8001d50 <chSchWakeupS>
 8008c28:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008c2c:	f898 3000 	ldrb.w	r3, [r8]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8008c30:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0e6      	beq.n	8008c04 <bmk4_execute.8487+0x34>
 8008c36:	2020      	movs	r0, #32
 8008c38:	f380 8811 	msr	BASEPRI, r0
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8008c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c40:	4620      	mov	r0, r4
 8008c42:	f7f9 f885 	bl	8001d50 <chSchWakeupS>
 8008c46:	2200      	movs	r2, #0
 8008c48:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  test_wait_threads();
 8008c4c:	f7f9 fc08 	bl	8002460 <test_wait_threads>
  test_print("--- Score : ");
 8008c50:	4809      	ldr	r0, [pc, #36]	; (8008c78 <bmk4_execute.8487+0xa8>)
 8008c52:	f7f8 fe85 	bl	8001960 <test_print>
  test_printn(n * 2);
 8008c56:	0068      	lsls	r0, r5, #1
 8008c58:	f7f8 fe92 	bl	8001980 <test_printn>
  test_println(" ctxswc/S");
 8008c5c:	4807      	ldr	r0, [pc, #28]	; (8008c7c <bmk4_execute.8487+0xac>)
}
 8008c5e:	b002      	add	sp, #8
 8008c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8008c64:	f7f8 be64 	b.w	8001930 <test_println>
 8008c68:	20001ec0 	.word	0x20001ec0
 8008c6c:	08005d81 	.word	0x08005d81
 8008c70:	20001850 	.word	0x20001850
 8008c74:	20002010 	.word	0x20002010
 8008c78:	0800a748 	.word	0x0800a748
 8008c7c:	0800b150 	.word	0x0800b150
 8008c80:	20001522 	.word	0x20001522
 8008c84:	f3af 8000 	nop.w
 8008c88:	f3af 8000 	nop.w
 8008c8c:	f3af 8000 	nop.w

08008c90 <bmk11_execute.8466>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8008c90:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008c92:	f7fe ff2d 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008c96:	f7fc ff13 	bl	8005ac0 <test_start_timer.constprop.19>
 8008c9a:	4d14      	ldr	r5, [pc, #80]	; (8008cec <bmk11_execute.8466+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 8008c9c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 8008c9e:	4814      	ldr	r0, [pc, #80]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008ca0:	f7f9 f946 	bl	8001f30 <chSemWait>
    chSemSignal(&sem1);
 8008ca4:	4812      	ldr	r0, [pc, #72]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008ca6:	f7f9 f8b3 	bl	8001e10 <chSemSignal>
    chSemWait(&sem1);
 8008caa:	4811      	ldr	r0, [pc, #68]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008cac:	f7f9 f940 	bl	8001f30 <chSemWait>
    chSemSignal(&sem1);
 8008cb0:	480f      	ldr	r0, [pc, #60]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008cb2:	f7f9 f8ad 	bl	8001e10 <chSemSignal>
    chSemWait(&sem1);
 8008cb6:	480e      	ldr	r0, [pc, #56]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008cb8:	f7f9 f93a 	bl	8001f30 <chSemWait>
    chSemSignal(&sem1);
 8008cbc:	480c      	ldr	r0, [pc, #48]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008cbe:	f7f9 f8a7 	bl	8001e10 <chSemSignal>
    chSemWait(&sem1);
 8008cc2:	480b      	ldr	r0, [pc, #44]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008cc4:	f7f9 f934 	bl	8001f30 <chSemWait>
    chSemSignal(&sem1);
 8008cc8:	4809      	ldr	r0, [pc, #36]	; (8008cf0 <bmk11_execute.8466+0x60>)
 8008cca:	f7f9 f8a1 	bl	8001e10 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008cce:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8008cd0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0e3      	beq.n	8008c9e <bmk11_execute.8466+0xe>
  test_print("--- Score : ");
 8008cd6:	4807      	ldr	r0, [pc, #28]	; (8008cf4 <bmk11_execute.8466+0x64>)
 8008cd8:	f7f8 fe42 	bl	8001960 <test_print>
  test_printn(n * 4);
 8008cdc:	00a0      	lsls	r0, r4, #2
 8008cde:	f7f8 fe4f 	bl	8001980 <test_printn>
  test_println(" wait+signal/S");
 8008ce2:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <bmk11_execute.8466+0x68>)
}
 8008ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8008ce8:	f7f8 be22 	b.w	8001930 <test_println>
 8008cec:	20001522 	.word	0x20001522
 8008cf0:	2000179c 	.word	0x2000179c
 8008cf4:	0800a748 	.word	0x0800a748
 8008cf8:	0800b15c 	.word	0x0800b15c
 8008cfc:	f3af 8000 	nop.w

08008d00 <bmk10_execute.8472>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8008d02:	f7fe fef5 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008d06:	f7fc fedb 	bl	8005ac0 <test_start_timer.constprop.19>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 8008d0a:	2400      	movs	r4, #0
 8008d0c:	4f14      	ldr	r7, [pc, #80]	; (8008d60 <bmk10_execute.8472+0x60>)
 8008d0e:	2620      	movs	r6, #32

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8008d10:	4625      	mov	r5, r4
 8008d12:	f386 8811 	msr	BASEPRI, r6
 8008d16:	2101      	movs	r1, #1
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4812      	ldr	r0, [pc, #72]	; (8008d64 <bmk10_execute.8472+0x64>)
 8008d1c:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <bmk10_execute.8472+0x68>)
 8008d1e:	f7fc fc77 	bl	8005610 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008d22:	f242 7110 	movw	r1, #10000	; 0x2710
 8008d26:	4a10      	ldr	r2, [pc, #64]	; (8008d68 <bmk10_execute.8472+0x68>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4810      	ldr	r0, [pc, #64]	; (8008d6c <bmk10_execute.8472+0x6c>)
 8008d2c:	f7fc fc70 	bl	8005610 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8008d30:	480c      	ldr	r0, [pc, #48]	; (8008d64 <bmk10_execute.8472+0x64>)
 8008d32:	f7fc fc3d 	bl	80055b0 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8008d36:	480d      	ldr	r0, [pc, #52]	; (8008d6c <bmk10_execute.8472+0x6c>)
 8008d38:	f7fc fc3a 	bl	80055b0 <chVTDoResetI>
 8008d3c:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d40:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8008d42:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0e4      	beq.n	8008d12 <bmk10_execute.8472+0x12>
  test_print("--- Score : ");
 8008d48:	4809      	ldr	r0, [pc, #36]	; (8008d70 <bmk10_execute.8472+0x70>)
 8008d4a:	f7f8 fe09 	bl	8001960 <test_print>
  test_printn(n * 2);
 8008d4e:	0060      	lsls	r0, r4, #1
 8008d50:	f7f8 fe16 	bl	8001980 <test_printn>
  test_println(" timers/S");
 8008d54:	4807      	ldr	r0, [pc, #28]	; (8008d74 <bmk10_execute.8472+0x74>)
}
 8008d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8008d5a:	f7f8 bde9 	b.w	8001930 <test_println>
 8008d5e:	bf00      	nop
 8008d60:	20001522 	.word	0x20001522
 8008d64:	200017b8 	.word	0x200017b8
 8008d68:	08005d31 	.word	0x08005d31
 8008d6c:	200017cc 	.word	0x200017cc
 8008d70:	0800a748 	.word	0x0800a748
 8008d74:	0800b16c 	.word	0x0800b16c
 8008d78:	f3af 8000 	nop.w
 8008d7c:	f3af 8000 	nop.w

08008d80 <bmk8_execute.8481>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 8008d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008d84:	f641 68c0 	movw	r8, #7872	; 0x1ec0
 8008d88:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8008d8a:	ac04      	add	r4, sp, #16
 8008d8c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8008d90:	2300      	movs	r3, #0
 8008d92:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8008d96:	f7fe feab 	bl	8007af0 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008d9a:	f8d8 0018 	ldr.w	r0, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008d9e:	f641 0650 	movw	r6, #6224	; 0x1850
 8008da2:	6882      	ldr	r2, [r0, #8]
 8008da4:	f246 2781 	movw	r7, #25217	; 0x6281
 8008da8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8008dac:	f6c0 0700 	movt	r7, #2048	; 0x800
 8008db0:	3a01      	subs	r2, #1
 8008db2:	463b      	mov	r3, r7
 8008db4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008db8:	9400      	str	r4, [sp, #0]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7f9 f840 	bl	8001e40 <chThdCreateStatic>
 8008dc0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008dc4:	f242 0510 	movw	r5, #8208	; 0x2010
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008dc8:	688b      	ldr	r3, [r1, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008dca:	f2c2 0500 	movt	r5, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008dce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008dd2:	1e5a      	subs	r2, r3, #1
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008dd4:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	1870      	adds	r0, r6, r1
 8008dda:	9400      	str	r4, [sp, #0]
 8008ddc:	f7f9 f830 	bl	8001e40 <chThdCreateStatic>
 8008de0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008de4:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008de6:	6890      	ldr	r0, [r2, #8]
 8008de8:	463b      	mov	r3, r7
 8008dea:	1e42      	subs	r2, r0, #1
 8008dec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008df0:	9400      	str	r4, [sp, #0]
 8008df2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8008df6:	f7f9 f823 	bl	8001e40 <chThdCreateStatic>
 8008dfa:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008dfe:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008e00:	688b      	ldr	r3, [r1, #8]
 8008e02:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8008e06:	1e5a      	subs	r2, r3, #1
 8008e08:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	9400      	str	r4, [sp, #0]
 8008e10:	f7f9 f816 	bl	8001e40 <chThdCreateStatic>
 8008e14:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008e18:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e1c:	6892      	ldr	r2, [r2, #8]
 8008e1e:	463b      	mov	r3, r7
 8008e20:	3a01      	subs	r2, #1
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008e22:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008e24:	9400      	str	r4, [sp, #0]
 8008e26:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8008e2a:	f7f9 f809 	bl	8001e40 <chThdCreateStatic>
 8008e2e:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8008e30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008e34:	f7fe fe4c 	bl	8007ad0 <chThdSleep>
  test_terminate_threads();
 8008e38:	f7f8 fc7a 	bl	8001730 <test_terminate_threads>
  test_wait_threads();
 8008e3c:	f7f9 fb10 	bl	8002460 <test_wait_threads>

  test_print("--- Score : ");
 8008e40:	f24a 7048 	movw	r0, #42824	; 0xa748
 8008e44:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008e48:	f7f8 fd8a 	bl	8001960 <test_print>
  test_printn(n);
 8008e4c:	9803      	ldr	r0, [sp, #12]
 8008e4e:	f7f8 fd97 	bl	8001980 <test_printn>
  test_println(" ctxswc/S");
 8008e52:	f24b 1050 	movw	r0, #45392	; 0xb150
 8008e56:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008e5a:	f7f8 fd69 	bl	8001930 <test_println>
}
 8008e5e:	b004      	add	sp, #16
 8008e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e64:	f3af 8000 	nop.w
 8008e68:	f3af 8000 	nop.w
 8008e6c:	f3af 8000 	nop.w

08008e70 <bmk7_execute.8483>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008e74:	4e3a      	ldr	r6, [pc, #232]	; (8008f60 <bmk7_execute.8483+0xf0>)
 8008e76:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008e78:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008e7a:	2400      	movs	r4, #0
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e82:	4b38      	ldr	r3, [pc, #224]	; (8008f64 <bmk7_execute.8483+0xf4>)
 8008e84:	3205      	adds	r2, #5
 8008e86:	9400      	str	r4, [sp, #0]
 8008e88:	4837      	ldr	r0, [pc, #220]	; (8008f68 <bmk7_execute.8483+0xf8>)
 8008e8a:	f7f8 ffd9 	bl	8001e40 <chThdCreateStatic>
 8008e8e:	69b1      	ldr	r1, [r6, #24]
 8008e90:	4d36      	ldr	r5, [pc, #216]	; (8008f6c <bmk7_execute.8483+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008e92:	688f      	ldr	r7, [r1, #8]
 8008e94:	4b33      	ldr	r3, [pc, #204]	; (8008f64 <bmk7_execute.8483+0xf4>)
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008e96:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008e98:	1d3a      	adds	r2, r7, #4
 8008e9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e9e:	9400      	str	r4, [sp, #0]
 8008ea0:	4833      	ldr	r0, [pc, #204]	; (8008f70 <bmk7_execute.8483+0x100>)
 8008ea2:	f7f8 ffcd 	bl	8001e40 <chThdCreateStatic>
 8008ea6:	69b3      	ldr	r3, [r6, #24]
 8008ea8:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8008eaa:	6898      	ldr	r0, [r3, #8]
 8008eac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008eb0:	1cc2      	adds	r2, r0, #3
 8008eb2:	4b2c      	ldr	r3, [pc, #176]	; (8008f64 <bmk7_execute.8483+0xf4>)
 8008eb4:	9400      	str	r4, [sp, #0]
 8008eb6:	482f      	ldr	r0, [pc, #188]	; (8008f74 <bmk7_execute.8483+0x104>)
 8008eb8:	f7f8 ffc2 	bl	8001e40 <chThdCreateStatic>
 8008ebc:	69b2      	ldr	r2, [r6, #24]
 8008ebe:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008ec0:	6897      	ldr	r7, [r2, #8]
 8008ec2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ec6:	1cba      	adds	r2, r7, #2
 8008ec8:	4b26      	ldr	r3, [pc, #152]	; (8008f64 <bmk7_execute.8483+0xf4>)
 8008eca:	9400      	str	r4, [sp, #0]
 8008ecc:	482a      	ldr	r0, [pc, #168]	; (8008f78 <bmk7_execute.8483+0x108>)
 8008ece:	f7f8 ffb7 	bl	8001e40 <chThdCreateStatic>
 8008ed2:	69b6      	ldr	r6, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8008ed4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ed8:	68b2      	ldr	r2, [r6, #8]
 8008eda:	4b22      	ldr	r3, [pc, #136]	; (8008f64 <bmk7_execute.8483+0xf4>)
 8008edc:	3201      	adds	r2, #1
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008ede:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8008ee0:	9400      	str	r4, [sp, #0]
 8008ee2:	4826      	ldr	r0, [pc, #152]	; (8008f7c <bmk7_execute.8483+0x10c>)
 8008ee4:	f7f8 ffac 	bl	8001e40 <chThdCreateStatic>
 8008ee8:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 8008eea:	f7fe fe01 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008eee:	f7fc fde7 	bl	8005ac0 <test_start_timer.constprop.19>
 8008ef2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008f90 <bmk7_execute.8483+0x120>
 8008ef6:	2720      	movs	r7, #32
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8008ef8:	4626      	mov	r6, r4
 8008efa:	f387 8811 	msr	BASEPRI, r7
 8008efe:	4820      	ldr	r0, [pc, #128]	; (8008f80 <bmk7_execute.8483+0x110>)
 8008f00:	2100      	movs	r1, #0
 8008f02:	f7f9 fe8d 	bl	8002c20 <chSemResetI>
 8008f06:	2500      	movs	r5, #0
  chSchRescheduleS();
 8008f08:	f7f8 fe52 	bl	8001bb0 <chSchRescheduleS>
 8008f0c:	f386 8811 	msr	BASEPRI, r6
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008f10:	f898 1000 	ldrb.w	r1, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8008f14:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d0ef      	beq.n	8008efa <bmk7_execute.8483+0x8a>
  test_terminate_threads();
 8008f1a:	f7f8 fc09 	bl	8001730 <test_terminate_threads>
 8008f1e:	2320      	movs	r3, #32
 8008f20:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8008f24:	4816      	ldr	r0, [pc, #88]	; (8008f80 <bmk7_execute.8483+0x110>)
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f9 fe7a 	bl	8002c20 <chSemResetI>
  chSchRescheduleS();
 8008f2c:	f7f8 fe40 	bl	8001bb0 <chSchRescheduleS>
 8008f30:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8008f34:	f7f9 fa94 	bl	8002460 <test_wait_threads>

  test_print("--- Score : ");
 8008f38:	4812      	ldr	r0, [pc, #72]	; (8008f84 <bmk7_execute.8483+0x114>)
 8008f3a:	f7f8 fd11 	bl	8001960 <test_print>
  test_printn(n);
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7f8 fd1e 	bl	8001980 <test_printn>
  test_print(" reschedules/S, ");
 8008f44:	4810      	ldr	r0, [pc, #64]	; (8008f88 <bmk7_execute.8483+0x118>)
 8008f46:	f7f8 fd0b 	bl	8001960 <test_print>
  test_printn(n * 6);
 8008f4a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008f4e:	0040      	lsls	r0, r0, #1
 8008f50:	f7f8 fd16 	bl	8001980 <test_printn>
  test_println(" ctxswc/S");
 8008f54:	480d      	ldr	r0, [pc, #52]	; (8008f8c <bmk7_execute.8483+0x11c>)
}
 8008f56:	b002      	add	sp, #8
 8008f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 8008f5c:	f7f8 bce8 	b.w	8001930 <test_println>
 8008f60:	20001ec0 	.word	0x20001ec0
 8008f64:	080062c1 	.word	0x080062c1
 8008f68:	20001850 	.word	0x20001850
 8008f6c:	20002010 	.word	0x20002010
 8008f70:	20001998 	.word	0x20001998
 8008f74:	20001ae0 	.word	0x20001ae0
 8008f78:	20001c28 	.word	0x20001c28
 8008f7c:	20001d70 	.word	0x20001d70
 8008f80:	2000179c 	.word	0x2000179c
 8008f84:	0800a748 	.word	0x0800a748
 8008f88:	0800b178 	.word	0x0800b178
 8008f8c:	0800b150 	.word	0x0800b150
 8008f90:	20001522 	.word	0x20001522
 8008f94:	f3af 8000 	nop.w
 8008f98:	f3af 8000 	nop.w
 8008f9c:	f3af 8000 	nop.w

08008fa0 <bmk5_execute.8485>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8008fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fa2:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <bmk5_execute.8485+0x50>)
 8008fa4:	b083      	sub	sp, #12
 8008fa6:	6998      	ldr	r0, [r3, #24]

  uint32_t n = 0;
 8008fa8:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8008faa:	6885      	ldr	r5, [r0, #8]
 8008fac:	4f11      	ldr	r7, [pc, #68]	; (8008ff4 <bmk5_execute.8485+0x54>)
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8008fae:	4626      	mov	r6, r4

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8008fb0:	3d01      	subs	r5, #1
  test_wait_tick();
 8008fb2:	f7fe fd9d 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8008fb6:	f7fc fd83 	bl	8005ac0 <test_start_timer.constprop.19>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8008fba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <bmk5_execute.8485+0x58>)
 8008fc2:	9600      	str	r6, [sp, #0]
 8008fc4:	480d      	ldr	r0, [pc, #52]	; (8008ffc <bmk5_execute.8485+0x5c>)
 8008fc6:	f7f8 ff3b 	bl	8001e40 <chThdCreateStatic>
 8008fca:	f7f9 fa29 	bl	8002420 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008fce:	7839      	ldrb	r1, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8008fd0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	d0f1      	beq.n	8008fba <bmk5_execute.8485+0x1a>
  test_print("--- Score : ");
 8008fd6:	480a      	ldr	r0, [pc, #40]	; (8009000 <bmk5_execute.8485+0x60>)
 8008fd8:	f7f8 fcc2 	bl	8001960 <test_print>
  test_printn(n);
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7f8 fccf 	bl	8001980 <test_printn>
  test_println(" threads/S");
 8008fe2:	4808      	ldr	r0, [pc, #32]	; (8009004 <bmk5_execute.8485+0x64>)
}
 8008fe4:	b003      	add	sp, #12
 8008fe6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8008fea:	f7f8 bca1 	b.w	8001930 <test_println>
 8008fee:	bf00      	nop
 8008ff0:	20001ec0 	.word	0x20001ec0
 8008ff4:	20001522 	.word	0x20001522
 8008ff8:	08005d41 	.word	0x08005d41
 8008ffc:	20001850 	.word	0x20001850
 8009000:	0800a748 	.word	0x0800a748
 8009004:	0800b144 	.word	0x0800b144
 8009008:	f3af 8000 	nop.w
 800900c:	f3af 8000 	nop.w

08009010 <msg_loop_test.8489.4223>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8009014:	f7fe fd6c 	bl	8007af0 <test_wait_tick>
  test_start_timer(1000);
 8009018:	f7fc fd52 	bl	8005ac0 <test_start_timer.constprop.19>
 800901c:	4e07      	ldr	r6, [pc, #28]	; (800903c <msg_loop_test.8489.4223+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 800901e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8009020:	4628      	mov	r0, r5
 8009022:	2101      	movs	r1, #1
 8009024:	f7f9 f804 	bl	8002030 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8009028:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800902a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0f7      	beq.n	8009020 <msg_loop_test.8489.4223+0x10>
  (void)chMsgSend(tp, 0);
 8009030:	4628      	mov	r0, r5
 8009032:	2100      	movs	r1, #0
 8009034:	f7f8 fffc 	bl	8002030 <chMsgSend>
  return n;
}
 8009038:	4620      	mov	r0, r4
 800903a:	bd70      	pop	{r4, r5, r6, pc}
 800903c:	20001522 	.word	0x20001522

08009040 <bmk1_execute.8496>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8009040:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8009042:	f641 63c0 	movw	r3, #7872	; 0x1ec0
 8009046:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800904a:	6998      	ldr	r0, [r3, #24]
 800904c:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 800904e:	6882      	ldr	r2, [r0, #8]
 8009050:	2400      	movs	r4, #0
 8009052:	f646 2381 	movw	r3, #27265	; 0x6a81
 8009056:	f641 0050 	movw	r0, #6224	; 0x1850
 800905a:	3a01      	subs	r2, #1
 800905c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009060:	9400      	str	r4, [sp, #0]
 8009062:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009066:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800906a:	f7f8 fee9 	bl	8001e40 <chThdCreateStatic>
 800906e:	f242 0110 	movw	r1, #8208	; 0x2010
 8009072:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009076:	6008      	str	r0, [r1, #0]
  n = msg_loop_test(threads[0]);
 8009078:	f7ff ffca 	bl	8009010 <msg_loop_test.8489.4223>
 800907c:	4604      	mov	r4, r0
  test_wait_threads();
 800907e:	f7f9 f9ef 	bl	8002460 <test_wait_threads>
  test_print("--- Score : ");
 8009082:	f24a 7048 	movw	r0, #42824	; 0xa748
 8009086:	f6c0 0000 	movt	r0, #2048	; 0x800
 800908a:	f7f8 fc69 	bl	8001960 <test_print>
  test_printn(n);
 800908e:	4620      	mov	r0, r4
 8009090:	f7f8 fc76 	bl	8001980 <test_printn>
  test_print(" msgs/S, ");
 8009094:	f24b 108c 	movw	r0, #45452	; 0xb18c
 8009098:	f6c0 0000 	movt	r0, #2048	; 0x800
 800909c:	f7f8 fc60 	bl	8001960 <test_print>
  test_printn(n << 1);
 80090a0:	0060      	lsls	r0, r4, #1
 80090a2:	f7f8 fc6d 	bl	8001980 <test_printn>
  test_println(" ctxswc/S");
 80090a6:	f24b 1050 	movw	r0, #45392	; 0xb150
 80090aa:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 80090ae:	b002      	add	sp, #8
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80090b4:	f7f8 bc3c 	b.w	8001930 <test_println>
 80090b8:	f3af 8000 	nop.w
 80090bc:	f3af 8000 	nop.w

080090c0 <bmk2_execute.8494>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 80090c0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80090c2:	f641 63c0 	movw	r3, #7872	; 0x1ec0
 80090c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80090ca:	6998      	ldr	r0, [r3, #24]
 80090cc:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 80090ce:	6882      	ldr	r2, [r0, #8]
 80090d0:	2400      	movs	r4, #0
 80090d2:	f646 2381 	movw	r3, #27265	; 0x6a81
 80090d6:	f641 0050 	movw	r0, #6224	; 0x1850
 80090da:	3201      	adds	r2, #1
 80090dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80090e0:	9400      	str	r4, [sp, #0]
 80090e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80090e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80090ea:	f7f8 fea9 	bl	8001e40 <chThdCreateStatic>
 80090ee:	f242 0110 	movw	r1, #8208	; 0x2010
 80090f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80090f6:	6008      	str	r0, [r1, #0]
  n = msg_loop_test(threads[0]);
 80090f8:	f7ff ff8a 	bl	8009010 <msg_loop_test.8489.4223>
 80090fc:	4604      	mov	r4, r0
  test_wait_threads();
 80090fe:	f7f9 f9af 	bl	8002460 <test_wait_threads>
  test_print("--- Score : ");
 8009102:	f24a 7048 	movw	r0, #42824	; 0xa748
 8009106:	f6c0 0000 	movt	r0, #2048	; 0x800
 800910a:	f7f8 fc29 	bl	8001960 <test_print>
  test_printn(n);
 800910e:	4620      	mov	r0, r4
 8009110:	f7f8 fc36 	bl	8001980 <test_printn>
  test_print(" msgs/S, ");
 8009114:	f24b 108c 	movw	r0, #45452	; 0xb18c
 8009118:	f6c0 0000 	movt	r0, #2048	; 0x800
 800911c:	f7f8 fc20 	bl	8001960 <test_print>
  test_printn(n << 1);
 8009120:	0060      	lsls	r0, r4, #1
 8009122:	f7f8 fc2d 	bl	8001980 <test_printn>
  test_println(" ctxswc/S");
 8009126:	f24b 1050 	movw	r0, #45392	; 0xb150
 800912a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 800912e:	b002      	add	sp, #8
 8009130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8009134:	f7f8 bbfc 	b.w	8001930 <test_println>
 8009138:	f3af 8000 	nop.w
 800913c:	f3af 8000 	nop.w

08009140 <bmk3_execute.8492>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8009144:	f641 66c0 	movw	r6, #7872	; 0x1ec0
 8009148:	f2c2 0600 	movt	r6, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800914c:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800914e:	f641 0550 	movw	r5, #6224	; 0x1850
 8009152:	689a      	ldr	r2, [r3, #8]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8009154:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8009156:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800915a:	f04f 0800 	mov.w	r8, #0
 800915e:	f646 2381 	movw	r3, #27265	; 0x6a81
 8009162:	3201      	adds	r2, #1
 8009164:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009168:	f6c0 0300 	movt	r3, #2048	; 0x800
 800916c:	f8cd 8000 	str.w	r8, [sp]
 8009170:	4628      	mov	r0, r5
 8009172:	f7f8 fe65 	bl	8001e40 <chThdCreateStatic>
 8009176:	69b1      	ldr	r1, [r6, #24]
 8009178:	f242 0410 	movw	r4, #8208	; 0x2010
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 800917c:	688b      	ldr	r3, [r1, #8]
 800917e:	f645 5741 	movw	r7, #23873	; 0x5d41
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8009182:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8009186:	f6c0 0700 	movt	r7, #2048	; 0x800
 800918a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800918e:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8009190:	1e9a      	subs	r2, r3, #2
 8009192:	1868      	adds	r0, r5, r1
 8009194:	463b      	mov	r3, r7
 8009196:	f8cd 8000 	str.w	r8, [sp]
 800919a:	f7f8 fe51 	bl	8001e40 <chThdCreateStatic>
 800919e:	69b2      	ldr	r2, [r6, #24]
 80091a0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 80091a2:	6890      	ldr	r0, [r2, #8]
 80091a4:	463b      	mov	r3, r7
 80091a6:	1ec2      	subs	r2, r0, #3
 80091a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80091ac:	f8cd 8000 	str.w	r8, [sp]
 80091b0:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80091b4:	f7f8 fe44 	bl	8001e40 <chThdCreateStatic>
 80091b8:	69b1      	ldr	r1, [r6, #24]
 80091ba:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 80091bc:	688b      	ldr	r3, [r1, #8]
 80091be:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80091c2:	1f1a      	subs	r2, r3, #4
 80091c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80091c8:	463b      	mov	r3, r7
 80091ca:	f8cd 8000 	str.w	r8, [sp]
 80091ce:	f7f8 fe37 	bl	8001e40 <chThdCreateStatic>
 80091d2:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 80091d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80091d8:	6892      	ldr	r2, [r2, #8]
 80091da:	463b      	mov	r3, r7
 80091dc:	3a05      	subs	r2, #5
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 80091de:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 80091e0:	f8cd 8000 	str.w	r8, [sp]
 80091e4:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80091e8:	f7f8 fe2a 	bl	8001e40 <chThdCreateStatic>
 80091ec:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	f7ff ff0e 	bl	8009010 <msg_loop_test.8489.4223>
 80091f4:	4604      	mov	r4, r0
  test_wait_threads();
 80091f6:	f7f9 f933 	bl	8002460 <test_wait_threads>
  test_print("--- Score : ");
 80091fa:	f24a 7048 	movw	r0, #42824	; 0xa748
 80091fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009202:	f7f8 fbad 	bl	8001960 <test_print>
  test_printn(n);
 8009206:	4620      	mov	r0, r4
 8009208:	f7f8 fbba 	bl	8001980 <test_printn>
  test_print(" msgs/S, ");
 800920c:	f24b 108c 	movw	r0, #45452	; 0xb18c
 8009210:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009214:	f7f8 fba4 	bl	8001960 <test_print>
  test_printn(n << 1);
 8009218:	0060      	lsls	r0, r4, #1
 800921a:	f7f8 fbb1 	bl	8001980 <test_printn>
  test_println(" ctxswc/S");
 800921e:	f24b 1050 	movw	r0, #45392	; 0xb150
 8009222:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8009226:	b002      	add	sp, #8
 8009228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800922c:	f7f8 bb80 	b.w	8001930 <test_println>

08009230 <evt2_execute.7717>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	2520      	movs	r5, #32
 8009236:	b08d      	sub	sp, #52	; 0x34
 8009238:	f385 8811 	msr	BASEPRI, r5
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();

  events = (currp->p_epending |= events);
 800923c:	4cb1      	ldr	r4, [pc, #708]	; (8009504 <evt2_execute.7717+0x2d4>)
 800923e:	2100      	movs	r1, #0
 8009240:	69a3      	ldr	r3, [r4, #24]
 8009242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009244:	f042 0007 	orr.w	r0, r2, #7
 8009248:	6358      	str	r0, [r3, #52]	; 0x34
 800924a:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 800924e:	f7fd f92f 	bl	80064b0 <chEvtWaitOne.constprop.38>
  test_assert(1, m == 1, "single event error");
 8009252:	f1b0 0e01 	subs.w	lr, r0, #1
 8009256:	f1de 0300 	rsbs	r3, lr, #0
 800925a:	eb53 010e 	adcs.w	r1, r3, lr
 800925e:	2001      	movs	r0, #1
 8009260:	f7f8 fb16 	bl	8001890 <_test_assert>
 8009264:	b110      	cbz	r0, 800926c <evt2_execute.7717+0x3c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8009266:	b00d      	add	sp, #52	; 0x34
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800926c:	f7fd f920 	bl	80064b0 <chEvtWaitOne.constprop.38>
  test_assert(2, m == 2, "single event error");
 8009270:	1e82      	subs	r2, r0, #2
 8009272:	4250      	negs	r0, r2
 8009274:	eb50 0102 	adcs.w	r1, r0, r2
 8009278:	2002      	movs	r0, #2
 800927a:	f7f8 fb09 	bl	8001890 <_test_assert>
 800927e:	2800      	cmp	r0, #0
 8009280:	d1f1      	bne.n	8009266 <evt2_execute.7717+0x36>
  m = chEvtWaitOne(ALL_EVENTS);
 8009282:	f7fd f915 	bl	80064b0 <chEvtWaitOne.constprop.38>
  test_assert(3, m == 4, "single event error");
 8009286:	1f03      	subs	r3, r0, #4
 8009288:	4259      	negs	r1, r3
 800928a:	4159      	adcs	r1, r3
 800928c:	2003      	movs	r0, #3
 800928e:	f7f8 faff 	bl	8001890 <_test_assert>
 8009292:	2800      	cmp	r0, #0
 8009294:	d1e7      	bne.n	8009266 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8009296:	f7fd f8e3 	bl	8006460 <chEvtGetAndClearEvents.constprop.42>
  test_assert(4, m == 0, "stuck event");
 800929a:	f1d0 0101 	rsbs	r1, r0, #1
 800929e:	bf38      	it	cc
 80092a0:	2100      	movcc	r1, #0
 80092a2:	2004      	movs	r0, #4
 80092a4:	f7f8 faf4 	bl	8001890 <_test_assert>
 80092a8:	4606      	mov	r6, r0
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d1db      	bne.n	8009266 <evt2_execute.7717+0x36>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 80092ae:	f7fe fc1f 	bl	8007af0 <test_wait_tick>
 80092b2:	f385 8811 	msr	BASEPRI, r5
 80092b6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 80092ba:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 80092be:	b2bf      	uxth	r7, r7
 80092c0:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80092c4:	69a6      	ldr	r6, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80092c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80092ca:	68b2      	ldr	r2, [r6, #8]
 80092cc:	4b8e      	ldr	r3, [pc, #568]	; (8009508 <evt2_execute.7717+0x2d8>)
 80092ce:	3a01      	subs	r2, #1
 80092d0:	9600      	str	r6, [sp, #0]
 80092d2:	488e      	ldr	r0, [pc, #568]	; (800950c <evt2_execute.7717+0x2dc>)
 80092d4:	f7f8 fdb4 	bl	8001e40 <chThdCreateStatic>
 80092d8:	4e8d      	ldr	r6, [pc, #564]	; (8009510 <evt2_execute.7717+0x2e0>)
 80092da:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 80092dc:	f7fd f8e8 	bl	80064b0 <chEvtWaitOne.constprop.38>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80092e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 80092e4:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 80092e8:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 80092ea:	b299      	uxth	r1, r3
 80092ec:	2005      	movs	r0, #5
 80092ee:	b292      	uxth	r2, r2
 80092f0:	f7f8 fa5e 	bl	80017b0 <_test_assert_time_window>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d1b6      	bne.n	8009266 <evt2_execute.7717+0x36>
  test_assert(6, m == 1, "single event error");
 80092f8:	2006      	movs	r0, #6
 80092fa:	f1b9 0301 	subs.w	r3, r9, #1
 80092fe:	4259      	negs	r1, r3
 8009300:	4159      	adcs	r1, r3
 8009302:	f7f8 fac5 	bl	8001890 <_test_assert>
 8009306:	2800      	cmp	r0, #0
 8009308:	d1ad      	bne.n	8009266 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800930a:	f7fd f8a9 	bl	8006460 <chEvtGetAndClearEvents.constprop.42>
  test_assert(7, m == 0, "stuck event");
 800930e:	f1d0 0101 	rsbs	r1, r0, #1
 8009312:	bf38      	it	cc
 8009314:	2100      	movcc	r1, #0
 8009316:	2007      	movs	r0, #7
 8009318:	f7f8 faba 	bl	8001890 <_test_assert>
 800931c:	4607      	mov	r7, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d1a1      	bne.n	8009266 <evt2_execute.7717+0x36>
  test_wait_threads();
 8009322:	f7f9 f89d 	bl	8002460 <test_wait_threads>
 8009326:	f385 8811 	msr	BASEPRI, r5
 800932a:	69a0      	ldr	r0, [r4, #24]
 800932c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800932e:	f042 0305 	orr.w	r3, r2, #5
 8009332:	6343      	str	r3, [r0, #52]	; 0x34
 8009334:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8009338:	f7fd f8da 	bl	80064f0 <chEvtWaitAny.constprop.37>
  test_assert(8, m == 5, "unexpected pending bit");
 800933c:	f1b0 0c05 	subs.w	ip, r0, #5
 8009340:	f1dc 0100 	rsbs	r1, ip, #0
 8009344:	eb51 010c 	adcs.w	r1, r1, ip
 8009348:	2008      	movs	r0, #8
 800934a:	f7f8 faa1 	bl	8001890 <_test_assert>
 800934e:	2800      	cmp	r0, #0
 8009350:	d189      	bne.n	8009266 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8009352:	f7fd f885 	bl	8006460 <chEvtGetAndClearEvents.constprop.42>
  test_assert(9, m == 0, "stuck event");
 8009356:	f1d0 0101 	rsbs	r1, r0, #1
 800935a:	bf38      	it	cc
 800935c:	2100      	movcc	r1, #0
 800935e:	2009      	movs	r0, #9
 8009360:	f7f8 fa96 	bl	8001890 <_test_assert>
 8009364:	4607      	mov	r7, r0
 8009366:	2800      	cmp	r0, #0
 8009368:	f47f af7d 	bne.w	8009266 <evt2_execute.7717+0x36>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 800936c:	f7fe fbc0 	bl	8007af0 <test_wait_tick>
 8009370:	f385 8811 	msr	BASEPRI, r5
 8009374:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8009378:	b2ad      	uxth	r5, r5
 800937a:	f387 8811 	msr	BASEPRI, r7
 800937e:	69a7      	ldr	r7, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009380:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009384:	68b8      	ldr	r0, [r7, #8]
 8009386:	4b60      	ldr	r3, [pc, #384]	; (8009508 <evt2_execute.7717+0x2d8>)
 8009388:	1e42      	subs	r2, r0, #1
 800938a:	9700      	str	r7, [sp, #0]
 800938c:	485f      	ldr	r0, [pc, #380]	; (800950c <evt2_execute.7717+0x2dc>)
 800938e:	f7f8 fd57 	bl	8001e40 <chThdCreateStatic>
 8009392:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8009394:	f7fd f8ac 	bl	80064f0 <chEvtWaitAny.constprop.37>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8009398:	f105 0364 	add.w	r3, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800939c:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80093a0:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80093a2:	b299      	uxth	r1, r3
 80093a4:	200a      	movs	r0, #10
 80093a6:	b292      	uxth	r2, r2
 80093a8:	f7f8 fa02 	bl	80017b0 <_test_assert_time_window>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f47f af5a 	bne.w	8009266 <evt2_execute.7717+0x36>
  test_assert(11, m == 1, "single event error");
 80093b2:	200b      	movs	r0, #11
 80093b4:	f1b7 0e01 	subs.w	lr, r7, #1
 80093b8:	f1de 0100 	rsbs	r1, lr, #0
 80093bc:	eb51 010e 	adcs.w	r1, r1, lr
 80093c0:	f7f8 fa66 	bl	8001890 <_test_assert>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f47f af4e 	bne.w	8009266 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80093ca:	f7fd f849 	bl	8006460 <chEvtGetAndClearEvents.constprop.42>
  test_assert(12, m == 0, "stuck event");
 80093ce:	f1d0 0101 	rsbs	r1, r0, #1
 80093d2:	bf38      	it	cc
 80093d4:	2100      	movcc	r1, #0
 80093d6:	200c      	movs	r0, #12
 80093d8:	f7f8 fa5a 	bl	8001890 <_test_assert>
 80093dc:	4607      	mov	r7, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	f47f af41 	bne.w	8009266 <evt2_execute.7717+0x36>
  test_wait_threads();
 80093e4:	f7f9 f83c 	bl	8002460 <test_wait_threads>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 80093e8:	4d4a      	ldr	r5, [pc, #296]	; (8009514 <evt2_execute.7717+0x2e4>)
 80093ea:	4b4b      	ldr	r3, [pc, #300]	; (8009518 <evt2_execute.7717+0x2e8>)
 80093ec:	602d      	str	r5, [r5, #0]
 80093ee:	601b      	str	r3, [r3, #0]
 80093f0:	f04f 0a20 	mov.w	sl, #32
 80093f4:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80093f8:	6828      	ldr	r0, [r5, #0]
 80093fa:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80093fe:	69a2      	ldr	r2, [r4, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8009400:	f849 0d28 	str.w	r0, [r9, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8009404:	2101      	movs	r1, #1
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 800940a:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 800940c:	9104      	str	r1, [sp, #16]
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 800940e:	9006      	str	r0, [sp, #24]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8009410:	f8c5 9000 	str.w	r9, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8009414:	9705      	str	r7, [sp, #20]
 8009416:	f387 8811 	msr	BASEPRI, r7
 800941a:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8009424:	69a2      	ldr	r2, [r4, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8009426:	f848 1d14 	str.w	r1, [r8, #-20]!
  esp->es_next     = elp;
 800942a:	f8c3 8000 	str.w	r8, [r3]
  elp->el_listener = currp;
  elp->el_events   = events;
 800942e:	2304      	movs	r3, #4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8009430:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 8009432:	9309      	str	r3, [sp, #36]	; 0x24
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8009434:	900b      	str	r0, [sp, #44]	; 0x2c
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8009436:	970a      	str	r7, [sp, #40]	; 0x28
 8009438:	f387 8811 	msr	BASEPRI, r7
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 800943c:	f7fe fb58 	bl	8007af0 <test_wait_tick>
 8009440:	f38a 8811 	msr	BASEPRI, sl
 8009444:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8009448:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800944a:	fa1f fb81 	uxth.w	fp, r1
 800944e:	f387 8811 	msr	BASEPRI, r7
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8009452:	69a7      	ldr	r7, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009454:	4b31      	ldr	r3, [pc, #196]	; (800951c <evt2_execute.7717+0x2ec>)
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	3a01      	subs	r2, #1
 8009460:	4b2f      	ldr	r3, [pc, #188]	; (8009520 <evt2_execute.7717+0x2f0>)
 8009462:	482a      	ldr	r0, [pc, #168]	; (800950c <evt2_execute.7717+0x2dc>)
 8009464:	f7f8 fcec 	bl	8001e40 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8009468:	f10b 0764 	add.w	r7, fp, #100	; 0x64
 800946c:	b2bf      	uxth	r7, r7
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 800946e:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009470:	6030      	str	r0, [r6, #0]
 8009472:	f38a 8811 	msr	BASEPRI, sl

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8009476:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009478:	f002 0005 	and.w	r0, r2, #5
 800947c:	2805      	cmp	r0, #5
 800947e:	d005      	beq.n	800948c <evt2_execute.7717+0x25c>
    ctp->p_u.ewmask = events;
 8009480:	2105      	movs	r1, #5
 8009482:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8009484:	200b      	movs	r0, #11
 8009486:	f7f8 fd1b 	bl	8001ec0 <chSchGoSleepS>
 800948a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 800948c:	f022 0305 	bic.w	r3, r2, #5
 8009490:	6363      	str	r3, [r4, #52]	; 0x34
 8009492:	2000      	movs	r0, #0
 8009494:	f380 8811 	msr	BASEPRI, r0
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8009498:	f10b 026e 	add.w	r2, fp, #110	; 0x6e
 800949c:	200d      	movs	r0, #13
 800949e:	4639      	mov	r1, r7
 80094a0:	b292      	uxth	r2, r2
 80094a2:	f7f8 f985 	bl	80017b0 <_test_assert_time_window>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f47f aedd 	bne.w	8009266 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80094ac:	f7fc ffd8 	bl	8006460 <chEvtGetAndClearEvents.constprop.42>
  test_assert(14, m == 0, "stuck event");
 80094b0:	f1d0 0101 	rsbs	r1, r0, #1
 80094b4:	bf38      	it	cc
 80094b6:	2100      	movcc	r1, #0
 80094b8:	200e      	movs	r0, #14
 80094ba:	f7f8 f9e9 	bl	8001890 <_test_assert>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f47f aed1 	bne.w	8009266 <evt2_execute.7717+0x36>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 80094c4:	4c14      	ldr	r4, [pc, #80]	; (8009518 <evt2_execute.7717+0x2e8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 80094c6:	f7f8 ffcb 	bl	8002460 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 80094ca:	4812      	ldr	r0, [pc, #72]	; (8009514 <evt2_execute.7717+0x2e4>)
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f8 fad7 	bl	8001a80 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 80094d2:	4620      	mov	r0, r4
 80094d4:	4641      	mov	r1, r8
 80094d6:	f7f8 fad3 	bl	8001a80 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 80094da:	6829      	ldr	r1, [r5, #0]
 80094dc:	200f      	movs	r0, #15
 80094de:	1b4b      	subs	r3, r1, r5
 80094e0:	425a      	negs	r2, r3
 80094e2:	eb52 0103 	adcs.w	r1, r2, r3
 80094e6:	f7f8 f9d3 	bl	8001890 <_test_assert>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f47f aebb 	bne.w	8009266 <evt2_execute.7717+0x36>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 80094f0:	6821      	ldr	r1, [r4, #0]
 80094f2:	2010      	movs	r0, #16
 80094f4:	1b0b      	subs	r3, r1, r4
 80094f6:	425a      	negs	r2, r3
 80094f8:	eb52 0103 	adcs.w	r1, r2, r3
 80094fc:	f7f8 f9c8 	bl	8001890 <_test_assert>
 8009500:	e6b1      	b.n	8009266 <evt2_execute.7717+0x36>
 8009502:	bf00      	nop
 8009504:	20001ec0 	.word	0x20001ec0
 8009508:	08008111 	.word	0x08008111
 800950c:	20001850 	.word	0x20001850
 8009510:	20002010 	.word	0x20002010
 8009514:	20000c58 	.word	0x20000c58
 8009518:	20000c7c 	.word	0x20000c7c
 800951c:	0800a4d0 	.word	0x0800a4d0
 8009520:	080042f1 	.word	0x080042f1
 8009524:	f3af 8000 	nop.w
 8009528:	f3af 8000 	nop.w
 800952c:	f3af 8000 	nop.w

08009530 <silabs_set_header>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8009530:	2901      	cmp	r1, #1
	Command=7;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009532:	b538      	push	{r3, r4, r5, lr}
 8009534:	4605      	mov	r5, r0
	if (argc != 1) {
 8009536:	d126      	bne.n	8009586 <silabs_set_header+0x56>
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
		return;
	}
	if (strlen(argv[0]) != 5) {
 8009538:	6814      	ldr	r4, [r2, #0]
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fe68 	bl	800a210 <strlen>
 8009540:	2805      	cmp	r0, #5
 8009542:	d005      	beq.n	8009550 <silabs_set_header+0x20>
		chprintf(chp, "<packet_header> must be exactly 5 characters\r\n");
 8009544:	4914      	ldr	r1, [pc, #80]	; (8009598 <silabs_set_header+0x68>)
 8009546:	4628      	mov	r0, r5
	}
	strncpy(Command_string,argv[0],5);
	Command=6;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8009548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
		return;
	}
	if (strlen(argv[0]) != 5) {
		chprintf(chp, "<packet_header> must be exactly 5 characters\r\n");
 800954c:	f7fe bfa8 	b.w	80084a0 <chprintf.11622>
		return;
	}
	strncpy(Command_string,argv[0],5);
 8009550:	4602      	mov	r2, r0
 8009552:	4621      	mov	r1, r4
 8009554:	4811      	ldr	r0, [pc, #68]	; (800959c <silabs_set_header+0x6c>)
 8009556:	f000 fe8b 	bl	800a270 <strncpy>
	Command=6;	
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <silabs_set_header+0x70>)
 800955c:	2206      	movs	r2, #6
 800955e:	701a      	strb	r2, [r3, #0]
 8009560:	2020      	movs	r0, #32
 8009562:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009566:	480f      	ldr	r0, [pc, #60]	; (80095a4 <silabs_set_header+0x74>)
 8009568:	6881      	ldr	r1, [r0, #8]
 800956a:	2900      	cmp	r1, #0
 800956c:	dd10      	ble.n	8009590 <silabs_set_header+0x60>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800956e:	f7f8 fb1f 	bl	8001bb0 <chSchRescheduleS>
 8009572:	2200      	movs	r2, #0
 8009574:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8009578:	480b      	ldr	r0, [pc, #44]	; (80095a8 <silabs_set_header+0x78>)
 800957a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800957e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009582:	f7fc ba8d 	b.w	8005aa0 <chSemWaitTimeout>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
 8009586:	4909      	ldr	r1, [pc, #36]	; (80095ac <silabs_set_header+0x7c>)
	}
	strncpy(Command_string,argv[0],5);
	Command=6;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8009588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
 800958c:	f7fe bf88 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8009590:	f7f9 fb36 	bl	8002c00 <chSemSignalI>
 8009594:	e7eb      	b.n	800956e <silabs_set_header+0x3e>
 8009596:	bf00      	nop
 8009598:	0800b1ec 	.word	0x0800b1ec
 800959c:	20000fc0 	.word	0x20000fc0
 80095a0:	20000f78 	.word	0x20000f78
 80095a4:	20000fa0 	.word	0x20000fa0
 80095a8:	20000fb4 	.word	0x20000fb4
 80095ac:	0800b1a0 	.word	0x0800b1a0

080095b0 <silabs_tune_reset>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_reset(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 80095b0:	2900      	cmp	r1, #0
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_reset(BaseSequentialStream *chp, int argc, char *argv[]) {
 80095b2:	b510      	push	{r4, lr}
 80095b4:	4604      	mov	r4, r0
	if (argc > 0) {
 80095b6:	dd04      	ble.n	80095c2 <silabs_tune_reset+0x12>
		chprintf(chp, "Tunes to default frequency, Usage: r\r\n");
 80095b8:	4912      	ldr	r1, [pc, #72]	; (8009604 <silabs_tune_reset+0x54>)
	Command=4;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}
 80095ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
}

void silabs_tune_reset(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes to default frequency, Usage: r\r\n");
 80095be:	f7fe bf6f 	b.w	80084a0 <chprintf.11622>
		return;
	}
	Command=4;
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <silabs_tune_reset+0x58>)
 80095c4:	2204      	movs	r2, #4
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	2020      	movs	r0, #32
 80095ca:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80095ce:	480f      	ldr	r0, [pc, #60]	; (800960c <silabs_tune_reset+0x5c>)
 80095d0:	6881      	ldr	r1, [r0, #8]
 80095d2:	2900      	cmp	r1, #0
 80095d4:	dd13      	ble.n	80095fe <silabs_tune_reset+0x4e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80095d6:	f7f8 faeb 	bl	8001bb0 <chSchRescheduleS>
 80095da:	2200      	movs	r2, #0
 80095dc:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80095e0:	480b      	ldr	r0, [pc, #44]	; (8009610 <silabs_tune_reset+0x60>)
 80095e2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80095e6:	f7fc fa5b 	bl	8005aa0 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80095ea:	b100      	cbz	r0, 80095ee <silabs_tune_reset+0x3e>
 80095ec:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <silabs_tune_reset+0x64>)
 80095f0:	4909      	ldr	r1, [pc, #36]	; (8009618 <silabs_tune_reset+0x68>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4620      	mov	r0, r4
	}
}
 80095f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=4;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80095fa:	f7fe bf51 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80095fe:	f7f9 faff 	bl	8002c00 <chSemSignalI>
 8009602:	e7e8      	b.n	80095d6 <silabs_tune_reset+0x26>
 8009604:	0800b21c 	.word	0x0800b21c
 8009608:	20000f78 	.word	0x20000f78
 800960c:	20000fa0 	.word	0x20000fa0
 8009610:	20000fb4 	.word	0x20000fb4
 8009614:	20000c54 	.word	0x20000c54
 8009618:	0800b244 	.word	0x0800b244
 800961c:	f3af 8000 	nop.w

08009620 <silabs_tune_down>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8009620:	2900      	cmp	r1, #0
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
	if (argc > 0) {
 8009626:	dd04      	ble.n	8009632 <silabs_tune_down+0x12>
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 8009628:	4912      	ldr	r1, [pc, #72]	; (8009674 <silabs_tune_down+0x54>)
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}
 800962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 800962e:	f7fe bf37 	b.w	80084a0 <chprintf.11622>
		return;
	}
	Command=2;
 8009632:	4b11      	ldr	r3, [pc, #68]	; (8009678 <silabs_tune_down+0x58>)
 8009634:	2202      	movs	r2, #2
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	2020      	movs	r0, #32
 800963a:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800963e:	480f      	ldr	r0, [pc, #60]	; (800967c <silabs_tune_down+0x5c>)
 8009640:	6881      	ldr	r1, [r0, #8]
 8009642:	2900      	cmp	r1, #0
 8009644:	dd13      	ble.n	800966e <silabs_tune_down+0x4e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009646:	f7f8 fab3 	bl	8001bb0 <chSchRescheduleS>
 800964a:	2200      	movs	r2, #0
 800964c:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8009650:	480b      	ldr	r0, [pc, #44]	; (8009680 <silabs_tune_down+0x60>)
 8009652:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009656:	f7fc fa23 	bl	8005aa0 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 800965a:	b100      	cbz	r0, 800965e <silabs_tune_down+0x3e>
 800965c:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <silabs_tune_down+0x64>)
 8009660:	4909      	ldr	r1, [pc, #36]	; (8009688 <silabs_tune_down+0x68>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	4620      	mov	r0, r4
	}
}
 8009666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800966a:	f7fe bf19 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800966e:	f7f9 fac7 	bl	8002c00 <chSemSignalI>
 8009672:	e7e8      	b.n	8009646 <silabs_tune_down+0x26>
 8009674:	0800b258 	.word	0x0800b258
 8009678:	20000f78 	.word	0x20000f78
 800967c:	20000fa0 	.word	0x20000fa0
 8009680:	20000fb4 	.word	0x20000fb4
 8009684:	20000c54 	.word	0x20000c54
 8009688:	0800b244 	.word	0x0800b244
 800968c:	f3af 8000 	nop.w

08009690 <silabs_tune_up>:
#define DEFAULT_HEADER "$$ROK"

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8009690:	2900      	cmp	r1, #0
#define RSSI_THRESH -100
#define DEFAULT_HEADER "$$ROK"

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009692:	b510      	push	{r4, lr}
 8009694:	4604      	mov	r4, r0
	if (argc > 0) {
 8009696:	dd04      	ble.n	80096a2 <silabs_tune_up+0x12>
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 8009698:	4912      	ldr	r1, [pc, #72]	; (80096e4 <silabs_tune_up+0x54>)
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}
 800969a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 800969e:	f7fe beff 	b.w	80084a0 <chprintf.11622>
		return;
	}
	Command=1;
 80096a2:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <silabs_tune_up+0x58>)
 80096a4:	2201      	movs	r2, #1
 80096a6:	701a      	strb	r2, [r3, #0]
 80096a8:	2020      	movs	r0, #32
 80096aa:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80096ae:	480f      	ldr	r0, [pc, #60]	; (80096ec <silabs_tune_up+0x5c>)
 80096b0:	6881      	ldr	r1, [r0, #8]
 80096b2:	2900      	cmp	r1, #0
 80096b4:	dd13      	ble.n	80096de <silabs_tune_up+0x4e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80096b6:	f7f8 fa7b 	bl	8001bb0 <chSchRescheduleS>
 80096ba:	2200      	movs	r2, #0
 80096bc:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80096c0:	480b      	ldr	r0, [pc, #44]	; (80096f0 <silabs_tune_up+0x60>)
 80096c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80096c6:	f7fc f9eb 	bl	8005aa0 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80096ca:	b100      	cbz	r0, 80096ce <silabs_tune_up+0x3e>
 80096cc:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <silabs_tune_up+0x64>)
 80096d0:	4909      	ldr	r1, [pc, #36]	; (80096f8 <silabs_tune_up+0x68>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	4620      	mov	r0, r4
	}
}
 80096d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80096da:	f7fe bee1 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80096de:	f7f9 fa8f 	bl	8002c00 <chSemSignalI>
 80096e2:	e7e8      	b.n	80096b6 <silabs_tune_up+0x26>
 80096e4:	0800b278 	.word	0x0800b278
 80096e8:	20000f78 	.word	0x20000f78
 80096ec:	20000fa0 	.word	0x20000fa0
 80096f0:	20000fb4 	.word	0x20000fb4
 80096f4:	20000c54 	.word	0x20000c54
 80096f8:	0800b244 	.word	0x0800b244
 80096fc:	f3af 8000 	nop.w

08009700 <silabs_send_command>:
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8009700:	2901      	cmp	r1, #1
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009702:	b538      	push	{r3, r4, r5, lr}
 8009704:	4605      	mov	r5, r0
	if (argc != 1) {
 8009706:	d126      	bne.n	8009756 <silabs_send_command+0x56>
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
 8009708:	6814      	ldr	r4, [r2, #0]
 800970a:	4620      	mov	r0, r4
 800970c:	f000 fd80 	bl	800a210 <strlen>
 8009710:	2806      	cmp	r0, #6
 8009712:	d005      	beq.n	8009720 <silabs_send_command+0x20>
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8009714:	4914      	ldr	r1, [pc, #80]	; (8009768 <silabs_send_command+0x68>)
 8009716:	4628      	mov	r0, r5
	}
	strncpy(Command_string,argv[0],6);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8009718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 800971c:	f7fe bec0 	b.w	80084a0 <chprintf.11622>
		return;
	}
	strncpy(Command_string,argv[0],6);
 8009720:	4602      	mov	r2, r0
 8009722:	4621      	mov	r1, r4
 8009724:	4811      	ldr	r0, [pc, #68]	; (800976c <silabs_send_command+0x6c>)
 8009726:	f000 fda3 	bl	800a270 <strncpy>
	Command=3;	
 800972a:	4b11      	ldr	r3, [pc, #68]	; (8009770 <silabs_send_command+0x70>)
 800972c:	2203      	movs	r2, #3
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	2020      	movs	r0, #32
 8009732:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009736:	480f      	ldr	r0, [pc, #60]	; (8009774 <silabs_send_command+0x74>)
 8009738:	6881      	ldr	r1, [r0, #8]
 800973a:	2900      	cmp	r1, #0
 800973c:	dd10      	ble.n	8009760 <silabs_send_command+0x60>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800973e:	f7f8 fa37 	bl	8001bb0 <chSchRescheduleS>
 8009742:	2200      	movs	r2, #0
 8009744:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8009748:	480b      	ldr	r0, [pc, #44]	; (8009778 <silabs_send_command+0x78>)
 800974a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800974e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009752:	f7fc b9a5 	b.w	8005aa0 <chSemWaitTimeout>
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8009756:	4909      	ldr	r1, [pc, #36]	; (800977c <silabs_send_command+0x7c>)
	}
	strncpy(Command_string,argv[0],6);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8009758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 800975c:	f7fe bea0 	b.w	80084a0 <chprintf.11622>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8009760:	f7f9 fa4e 	bl	8002c00 <chSemSignalI>
 8009764:	e7eb      	b.n	800973e <silabs_send_command+0x3e>
 8009766:	bf00      	nop
 8009768:	0800b2bc 	.word	0x0800b2bc
 800976c:	20000fc0 	.word	0x20000fc0
 8009770:	20000f78 	.word	0x20000f78
 8009774:	20000fa0 	.word	0x20000fa0
 8009778:	20000fb4 	.word	0x20000fb4
 800977c:	0800b298 	.word	0x0800b298

08009780 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];
 8009782:	f101 0311 	add.w	r3, r1, #17
 8009786:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800978a:	460d      	mov	r5, r1
 800978c:	4606      	mov	r6, r0
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];

  if (sdup == NULL)
 800978e:	b1bc      	cbz	r4, 80097c0 <sduDataReceived+0x40>
 8009790:	2720      	movs	r7, #32
 8009792:	f387 8811 	msr	BASEPRI, r7
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8009796:	2104      	movs	r1, #4
 8009798:	1860      	adds	r0, r4, r1
 800979a:	f7f8 fc91 	bl	80020c0 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 800979e:	f105 0c02 	add.w	ip, r5, #2
 80097a2:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 80097a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 80097aa:	69a3      	ldr	r3, [r4, #24]
 80097ac:	69e0      	ldr	r0, [r4, #28]
 80097ae:	6962      	ldr	r2, [r4, #20]
 80097b0:	1ac0      	subs	r0, r0, r3
 80097b2:	8a4b      	ldrh	r3, [r1, #18]
 80097b4:	1a81      	subs	r1, r0, r2
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 80097b6:	428b      	cmp	r3, r1
 80097b8:	d903      	bls.n	80097c2 <sduDataReceived+0x42>
 80097ba:	2000      	movs	r0, #0
 80097bc:	f380 8811 	msr	BASEPRI, r0
 80097c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c2:	2000      	movs	r0, #0
 80097c4:	f380 8811 	msr	BASEPRI, r0
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 80097c8:	fbb1 f2f3 	udiv	r2, r1, r3
 80097cc:	fb03 f302 	mul.w	r3, r3, r2
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80097d0:	f8dc 1004 	ldr.w	r1, [ip, #4]

  osp->rxqueued           = TRUE;
 80097d4:	2201      	movs	r2, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80097d6:	6989      	ldr	r1, [r1, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 80097d8:	340c      	adds	r4, #12

  osp->rxqueued           = TRUE;
 80097da:	700a      	strb	r2, [r1, #0]
  osp->mode.queue.rxqueue = iqp;
 80097dc:	60cc      	str	r4, [r1, #12]
  osp->rxsize             = n;
 80097de:	604b      	str	r3, [r1, #4]
  osp->rxcnt              = 0;
 80097e0:	6088      	str	r0, [r1, #8]

  usb_lld_prepare_receive(usbp, ep);
 80097e2:	4630      	mov	r0, r6
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7fc ffeb 	bl	80067c0 <usb_lld_prepare_receive>
 80097ea:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    usbStartReceiveI(usbp, ep);
 80097ee:	4630      	mov	r0, r6
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7fc ffc5 	bl	8006780 <usbStartReceiveI>
 80097f6:	e7e0      	b.n	80097ba <sduDataReceived+0x3a>
 80097f8:	f3af 8000 	nop.w
 80097fc:	f3af 8000 	nop.w

08009800 <SI_Thread.11601>:

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 8009800:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  (void)arg;
  chRegSetThreadName("si4432");
 8009804:	4bb4      	ldr	r3, [pc, #720]	; (8009ad8 <SI_Thread.11601+0x2d8>)
 8009806:	49b5      	ldr	r1, [pc, #724]	; (8009adc <SI_Thread.11601+0x2dc>)
 8009808:	699a      	ldr	r2, [r3, #24]
	uint8_t si446x_failure=0;
	uint8_t channel=0;
	uint8_t packet_header[]=DEFAULT_HEADER;
 800980a:	48b5      	ldr	r0, [pc, #724]	; (8009ae0 <SI_Thread.11601+0x2e0>)

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 800980c:	b085      	sub	sp, #20

  (void)arg;
  chRegSetThreadName("si4432");
 800980e:	6191      	str	r1, [r2, #24]
 8009810:	2420      	movs	r4, #32
	uint8_t si446x_failure=0;
	uint8_t channel=0;
	uint8_t packet_header[]=DEFAULT_HEADER;
 8009812:	c803      	ldmia	r0, {r0, r1}
 8009814:	9002      	str	r0, [sp, #8]
 8009816:	f8ad 100c 	strh.w	r1, [sp, #12]
 800981a:	f384 8811 	msr	BASEPRI, r4
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800981e:	4eb1      	ldr	r6, [pc, #708]	; (8009ae4 <SI_Thread.11601+0x2e4>)
 8009820:	4fb1      	ldr	r7, [pc, #708]	; (8009ae8 <SI_Thread.11601+0x2e8>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8009822:	7835      	ldrb	r5, [r6, #0]
 8009824:	6077      	str	r7, [r6, #4]
 8009826:	2d01      	cmp	r5, #1
 8009828:	d11a      	bne.n	8009860 <SI_Thread.11601+0x60>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 800982a:	49b0      	ldr	r1, [pc, #704]	; (8009aec <SI_Thread.11601+0x2ec>)
 800982c:	4632      	mov	r2, r6
 800982e:	6a30      	ldr	r0, [r6, #32]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8009830:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8009834:	f7fc fedc 	bl	80065f0 <dmaStreamAllocate.constprop.11>
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8009838:	f2c4 0702 	movt	r7, #16386	; 0x4002
      b = dmaStreamAllocate(spip->dmarx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 800983c:	49ac      	ldr	r1, [pc, #688]	; (8009af0 <SI_Thread.11601+0x2f0>)
 800983e:	4632      	mov	r2, r6
 8009840:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8009842:	f7fc fed5 	bl	80065f0 <dmaStreamAllocate.constprop.11>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8009846:	69bc      	ldr	r4, [r7, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8009848:	6a33      	ldr	r3, [r6, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800984a:	6a71      	ldr	r1, [r6, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800984c:	69f2      	ldr	r2, [r6, #28]
 800984e:	6818      	ldr	r0, [r3, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8009850:	6809      	ldr	r1, [r1, #0]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8009852:	f444 5580 	orr.w	r5, r4, #4096	; 0x1000
 8009856:	61bd      	str	r5, [r7, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8009858:	320c      	adds	r2, #12
 800985a:	6877      	ldr	r7, [r6, #4]
 800985c:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800985e:	608a      	str	r2, [r1, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8009860:	897c      	ldrh	r4, [r7, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009862:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8009864:	f404 6300 	and.w	r3, r4, #2048	; 0x800
 8009868:	b29a      	uxth	r2, r3
 800986a:	2a00      	cmp	r2, #0
 800986c:	f000 812c 	beq.w	8009ac8 <SI_Thread.11601+0x2c8>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009870:	6af5      	ldr	r5, [r6, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009872:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009876:	f425 6770 	bic.w	r7, r5, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800987a:	f441 62a0 	orr.w	r2, r1, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800987e:	f447 63a0 	orr.w	r3, r7, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009882:	62b2      	str	r2, [r6, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009884:	62f3      	str	r3, [r6, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8009886:	69f7      	ldr	r7, [r6, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8009888:	f444 7441 	orr.w	r4, r4, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800988c:	f04f 0b00 	mov.w	fp, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8009890:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8009892:	f8a7 b000 	strh.w	fp, [r7]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8009896:	803c      	strh	r4, [r7, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8009898:	80ba      	strh	r2, [r7, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 800989a:	883b      	ldrh	r3, [r7, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 800989c:	2502      	movs	r5, #2
 800989e:	b298      	uxth	r0, r3
 80098a0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80098a4:	8039      	strh	r1, [r7, #0]
 80098a6:	7035      	strb	r5, [r6, #0]
 80098a8:	f38b 8811 	msr	BASEPRI, fp
  /* Configuration goes here - setup the PLL carrier, TX modem settings and the Packet handler Tx functionality*/
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	si446x_initialise();
 80098ac:	f7fb f8b8 	bl	8004a20 <si446x_initialise>
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80098b0:	4f90      	ldr	r7, [pc, #576]	; (8009af4 <SI_Thread.11601+0x2f4>)
 80098b2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80098b6:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80098ba:	f641 0130 	movw	r1, #6192	; 0x1830
 80098be:	f2c2 0100 	movt	r1, #8192	; 0x2000
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80098c2:	2201      	movs	r2, #1
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80098c4:	f2c4 0600 	movt	r6, #16384	; 0x4000
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80098c8:	f2c4 0400 	movt	r4, #16384	; 0x4000
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80098cc:	60fe      	str	r6, [r7, #12]
 80098ce:	703a      	strb	r2, [r7, #0]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80098d0:	60cc      	str	r4, [r1, #12]
 80098d2:	700a      	strb	r2, [r1, #0]
  gptp->config = NULL;
 80098d4:	f8c7 b004 	str.w	fp, [r7, #4]
 80098d8:	f8c1 b004 	str.w	fp, [r1, #4]
 80098dc:	2620      	movs	r6, #32
 80098de:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 80098e2:	4b85      	ldr	r3, [pc, #532]	; (8009af8 <SI_Thread.11601+0x2f8>)
  gpt_lld_start(gptp);
 80098e4:	4885      	ldr	r0, [pc, #532]	; (8009afc <SI_Thread.11601+0x2fc>)
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 80098e6:	604b      	str	r3, [r1, #4]
  gpt_lld_start(gptp);
 80098e8:	f7fb fdfa 	bl	80054e0 <gpt_lld_start>
  gptp->state = GPT_READY;
 80098ec:	f641 0030 	movw	r0, #6192	; 0x1830
 80098f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80098f4:	7005      	strb	r5, [r0, #0]
 80098f6:	f38b 8811 	msr	BASEPRI, fp
 80098fa:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 80098fe:	4c80      	ldr	r4, [pc, #512]	; (8009b00 <SI_Thread.11601+0x300>)
  gpt_lld_start(gptp);
 8009900:	4638      	mov	r0, r7
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8009902:	607c      	str	r4, [r7, #4]
  gpt_lld_start(gptp);
 8009904:	f7fb fdec 	bl	80054e0 <gpt_lld_start>
  gptp->state = GPT_READY;
 8009908:	703d      	strb	r5, [r7, #0]
 800990a:	f38b 8811 	msr	BASEPRI, fp
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 800990e:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8009912:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8009916:	2710      	movs	r7, #16
 8009918:	612f      	str	r7, [r5, #16]
 800991a:	f7fe fce1 	bl	80082e0 <RF_switch.part.8.11660>
 800991e:	4d79      	ldr	r5, [pc, #484]	; (8009b04 <SI_Thread.11601+0x304>)
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 8009920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009924:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009928:	4e77      	ldr	r6, [pc, #476]	; (8009b08 <SI_Thread.11601+0x308>)
 800992a:	4f78      	ldr	r7, [pc, #480]	; (8009b0c <SI_Thread.11601+0x30c>)
 800992c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8009b14 <SI_Thread.11601+0x314>
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 8009930:	462c      	mov	r4, r5
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 8009932:	9201      	str	r2, [sp, #4]
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8009934:	4876      	ldr	r0, [pc, #472]	; (8009b10 <SI_Thread.11601+0x310>)
 8009936:	21c8      	movs	r1, #200	; 0xc8
 8009938:	f7fc f8b2 	bl	8005aa0 <chSemWaitTimeout>
	gptInit();
	gptStart(&GPTD4, &gpt4cfg);
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
 800993c:	4603      	mov	r3, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	d1f8      	bne.n	8009934 <SI_Thread.11601+0x134>
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 8009942:	7829      	ldrb	r1, [r5, #0]
 8009944:	2901      	cmp	r1, #1
 8009946:	d048      	beq.n	80099da <SI_Thread.11601+0x1da>
			Active_Frequency+=50;
		else if(Command==2)
 8009948:	7820      	ldrb	r0, [r4, #0]
 800994a:	2802      	cmp	r0, #2
 800994c:	d04b      	beq.n	80099e6 <SI_Thread.11601+0x1e6>
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
 800994e:	7822      	ldrb	r2, [r4, #0]
 8009950:	2a03      	cmp	r2, #3
 8009952:	d04e      	beq.n	80099f2 <SI_Thread.11601+0x1f2>
 8009954:	7821      	ldrb	r1, [r4, #0]
 8009956:	2907      	cmp	r1, #7
 8009958:	d04b      	beq.n	80099f2 <SI_Thread.11601+0x1f2>
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		else if(Command==4)
 800995a:	7820      	ldrb	r0, [r4, #0]
 800995c:	2804      	cmp	r0, #4
 800995e:	f000 8090 	beq.w	8009a82 <SI_Thread.11601+0x282>
			Active_Frequency=ACTIVE_FREQUENCY;
		else if(Command==5) /*Load a new channel*/
 8009962:	7822      	ldrb	r2, [r4, #0]
 8009964:	2a05      	cmp	r2, #5
 8009966:	f000 8093 	beq.w	8009a90 <SI_Thread.11601+0x290>
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
 800996a:	7821      	ldrb	r1, [r4, #0]
 800996c:	2906      	cmp	r1, #6
 800996e:	f000 80a2 	beq.w	8009ab6 <SI_Thread.11601+0x2b6>
 8009972:	4699      	mov	r9, r3
			strncpy(packet_header,Command_string,5);
		if(Command && (Command<3 || Command==4) ) /*Load the frequency into the PLL*/
 8009974:	7829      	ldrb	r1, [r5, #0]
 8009976:	b129      	cbz	r1, 8009984 <SI_Thread.11601+0x184>
 8009978:	7823      	ldrb	r3, [r4, #0]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d912      	bls.n	80099a4 <SI_Thread.11601+0x1a4>
 800997e:	7820      	ldrb	r0, [r4, #0]
 8009980:	2804      	cmp	r0, #4
 8009982:	d00f      	beq.n	80099a4 <SI_Thread.11601+0x1a4>
			si446x_failure|=si446x_set_frequency(Active_Frequency);
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 8009984:	f1b9 0f00 	cmp.w	r9, #0
 8009988:	d116      	bne.n	80099b8 <SI_Thread.11601+0x1b8>
 800998a:	2120      	movs	r1, #32
 800998c:	f381 8811 	msr	BASEPRI, r1
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009990:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	dd1c      	ble.n	80099d2 <SI_Thread.11601+0x1d2>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009998:	f7f8 f90a 	bl	8001bb0 <chSchRescheduleS>
 800999c:	2000      	movs	r0, #0
 800999e:	f380 8811 	msr	BASEPRI, r0
 80099a2:	e7c7      	b.n	8009934 <SI_Thread.11601+0x134>
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
			strncpy(packet_header,Command_string,5);
		if(Command && (Command<3 || Command==4) ) /*Load the frequency into the PLL*/
			si446x_failure|=si446x_set_frequency(Active_Frequency);
 80099a4:	6830      	ldr	r0, [r6, #0]
 80099a6:	f7fa ff5b 	bl	8004860 <si446x_set_frequency>
 80099aa:	ea40 0209 	orr.w	r2, r0, r9
 80099ae:	fa5f f982 	uxtb.w	r9, r2
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 80099b2:	f1b9 0f00 	cmp.w	r9, #0
 80099b6:	d0e8      	beq.n	800998a <SI_Thread.11601+0x18a>
			chThdSleepMilliseconds(400);/*Wait in case radio can finish what it was doing*/
 80099b8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80099bc:	f7fe f888 	bl	8007ad0 <chThdSleep>
			si446x_initialise();
 80099c0:	f7fb f82e 	bl	8004a20 <si446x_initialise>
 80099c4:	2120      	movs	r1, #32
 80099c6:	f381 8811 	msr	BASEPRI, r1
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80099ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	dce2      	bgt.n	8009998 <SI_Thread.11601+0x198>
    chSemSignalI(&bsp->bs_sem);
 80099d2:	4850      	ldr	r0, [pc, #320]	; (8009b14 <SI_Thread.11601+0x314>)
 80099d4:	f7f9 f914 	bl	8002c00 <chSemSignalI>
 80099d8:	e7de      	b.n	8009998 <SI_Thread.11601+0x198>
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
			Active_Frequency+=50;
 80099da:	6830      	ldr	r0, [r6, #0]
 80099dc:	4699      	mov	r9, r3
 80099de:	f100 0232 	add.w	r2, r0, #50	; 0x32
 80099e2:	6032      	str	r2, [r6, #0]
 80099e4:	e7c6      	b.n	8009974 <SI_Thread.11601+0x174>
		else if(Command==2)
			Active_Frequency-=50;
 80099e6:	6831      	ldr	r1, [r6, #0]
 80099e8:	4699      	mov	r9, r3
 80099ea:	f1a1 0332 	sub.w	r3, r1, #50	; 0x32
 80099ee:	6033      	str	r3, [r6, #0]
 80099f0:	e7c0      	b.n	8009974 <SI_Thread.11601+0x174>
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 80099f2:	9901      	ldr	r1, [sp, #4]
 80099f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f8:	610b      	str	r3, [r1, #16]
 80099fa:	f7fe fc71 	bl	80082e0 <RF_switch.part.8.11660>
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
 80099fe:	2050      	movs	r0, #80	; 0x50
 8009a00:	f7fe f866 	bl	8007ad0 <chThdSleep>
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			if(Command!=3)
 8009a04:	7828      	ldrb	r0, [r5, #0]
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8009a06:	2266      	movs	r2, #102	; 0x66
			if(Command!=3)
 8009a08:	2803      	cmp	r0, #3
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8009a0a:	703a      	strb	r2, [r7, #0]
			if(Command!=3)
 8009a0c:	d048      	beq.n	8009aa0 <SI_Thread.11601+0x2a0>
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 8009a0e:	4942      	ldr	r1, [pc, #264]	; (8009b18 <SI_Thread.11601+0x318>)
 8009a10:	2206      	movs	r2, #6
 8009a12:	4842      	ldr	r0, [pc, #264]	; (8009b1c <SI_Thread.11601+0x31c>)
 8009a14:	f000 fc2c 	bl	800a270 <strncpy>
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8009a18:	483f      	ldr	r0, [pc, #252]	; (8009b18 <SI_Thread.11601+0x318>)
 8009a1a:	f000 fbf9 	bl	800a210 <strlen>
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8009a1e:	f04f 0a00 	mov.w	sl, #0
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8009a22:	1c43      	adds	r3, r0, #1
 8009a24:	4652      	mov	r2, sl
 8009a26:	b2d8      	uxtb	r0, r3
 8009a28:	4938      	ldr	r1, [pc, #224]	; (8009b0c <SI_Thread.11601+0x30c>)
 8009a2a:	4b3d      	ldr	r3, [pc, #244]	; (8009b20 <SI_Thread.11601+0x320>)
 8009a2c:	f7fa fe58 	bl	80046e0 <si446x_spi>
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8009a30:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8009a34:	f04f 0c30 	mov.w	ip, #48	; 0x30
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8009a38:	4681      	mov	r9, r0
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8009a3a:	4934      	ldr	r1, [pc, #208]	; (8009b0c <SI_Thread.11601+0x30c>)
 8009a3c:	4652      	mov	r2, sl
 8009a3e:	4b38      	ldr	r3, [pc, #224]	; (8009b20 <SI_Thread.11601+0x320>)
 8009a40:	2005      	movs	r0, #5
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8009a42:	f887 e000 	strb.w	lr, [r7]
 8009a46:	f887 b001 	strb.w	fp, [r7, #1]
 8009a4a:	f887 c002 	strb.w	ip, [r7, #2]
 8009a4e:	f887 a003 	strb.w	sl, [r7, #3]
 8009a52:	f887 a004 	strb.w	sl, [r7, #4]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8009a56:	f7fa fe43 	bl	80046e0 <si446x_spi>
 8009a5a:	ea40 0109 	orr.w	r1, r0, r9
 8009a5e:	fa5f f981 	uxtb.w	r9, r1
 8009a62:	2020      	movs	r0, #32
 8009a64:	f380 8811 	msr	BASEPRI, r0
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8009a68:	f641 0030 	movw	r0, #6192	; 0x1830
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  gpt_lld_start_timer(gptp, interval);
 8009a72:	f44f 7161 	mov.w	r1, #900	; 0x384
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8009a76:	7002      	strb	r2, [r0, #0]
  gpt_lld_start_timer(gptp, interval);
 8009a78:	f7fc ff4a 	bl	8006910 <gpt_lld_start_timer>
 8009a7c:	f38a 8811 	msr	BASEPRI, sl
 8009a80:	e778      	b.n	8009974 <SI_Thread.11601+0x174>
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		else if(Command==4)
			Active_Frequency=ACTIVE_FREQUENCY;
 8009a82:	f247 5278 	movw	r2, #30072	; 0x7578
 8009a86:	f6c1 12df 	movt	r2, #6623	; 0x19df
 8009a8a:	6032      	str	r2, [r6, #0]
 8009a8c:	4699      	mov	r9, r3
 8009a8e:	e771      	b.n	8009974 <SI_Thread.11601+0x174>
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
 8009a90:	f641 0040 	movw	r0, #6208	; 0x1840
 8009a94:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009a98:	f890 b000 	ldrb.w	fp, [r0]
 8009a9c:	4699      	mov	r9, r3
 8009a9e:	e769      	b.n	8009974 <SI_Thread.11601+0x174>
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			if(Command!=3)
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
 8009aa0:	a902      	add	r1, sp, #8
 8009aa2:	2205      	movs	r2, #5
 8009aa4:	481d      	ldr	r0, [pc, #116]	; (8009b1c <SI_Thread.11601+0x31c>)
 8009aa6:	f000 fbe3 	bl	800a270 <strncpy>
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
 8009aaa:	491b      	ldr	r1, [pc, #108]	; (8009b18 <SI_Thread.11601+0x318>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	481d      	ldr	r0, [pc, #116]	; (8009b24 <SI_Thread.11601+0x324>)
 8009ab0:	f000 fbde 	bl	800a270 <strncpy>
 8009ab4:	e7b0      	b.n	8009a18 <SI_Thread.11601+0x218>
		else if(Command==4)
			Active_Frequency=ACTIVE_FREQUENCY;
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
			strncpy(packet_header,Command_string,5);
 8009ab6:	a802      	add	r0, sp, #8
 8009ab8:	4917      	ldr	r1, [pc, #92]	; (8009b18 <SI_Thread.11601+0x318>)
 8009aba:	2205      	movs	r2, #5
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	f000 fbd7 	bl	800a270 <strncpy>
 8009ac2:	9b00      	ldr	r3, [sp, #0]
 8009ac4:	4699      	mov	r9, r3
 8009ac6:	e755      	b.n	8009974 <SI_Thread.11601+0x174>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009ac8:	6af5      	ldr	r5, [r6, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009aca:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009ace:	f425 6170 	bic.w	r1, r5, #3840	; 0xf00
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009ad2:	62b0      	str	r0, [r6, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009ad4:	62f1      	str	r1, [r6, #44]	; 0x2c
 8009ad6:	e6d6      	b.n	8009886 <SI_Thread.11601+0x86>
 8009ad8:	20001ec0 	.word	0x20001ec0
 8009adc:	0800b2e4 	.word	0x0800b2e4
 8009ae0:	0800a61c 	.word	0x0800a61c
 8009ae4:	200017f0 	.word	0x200017f0
 8009ae8:	0800b2f0 	.word	0x0800b2f0
 8009aec:	08005241 	.word	0x08005241
 8009af0:	080050d1 	.word	0x080050d1
 8009af4:	20001820 	.word	0x20001820
 8009af8:	20000c6c 	.word	0x20000c6c
 8009afc:	20001830 	.word	0x20001830
 8009b00:	20000c5c 	.word	0x20000c5c
 8009b04:	20000f78 	.word	0x20000f78
 8009b08:	20000c54 	.word	0x20000c54
 8009b0c:	200017e0 	.word	0x200017e0
 8009b10:	20000fa0 	.word	0x20000fa0
 8009b14:	20000fb4 	.word	0x20000fb4
 8009b18:	20000fc0 	.word	0x20000fc0
 8009b1c:	200017e1 	.word	0x200017e1
 8009b20:	20001844 	.word	0x20001844
 8009b24:	200017e6 	.word	0x200017e6
 8009b28:	f3af 8000 	nop.w
 8009b2c:	f3af 8000 	nop.w

08009b30 <shell_thread.10585>:
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8009b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009b34:	4b8d      	ldr	r3, [pc, #564]	; (8009d6c <shell_thread.10585+0x23c>)
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8009b36:	6804      	ldr	r4, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009b38:	6999      	ldr	r1, [r3, #24]
 8009b3a:	4a8d      	ldr	r2, [pc, #564]	; (8009d70 <shell_thread.10585+0x240>)
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8009b3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8009b40:	b098      	sub	sp, #96	; 0x60
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009b42:	618a      	str	r2, [r1, #24]
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8009b44:	4620      	mov	r0, r4
 8009b46:	498b      	ldr	r1, [pc, #556]	; (8009d74 <shell_thread.10585+0x244>)
 8009b48:	f7fe fbfa 	bl	8008340 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009b4c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009d9c <shell_thread.10585+0x26c>
 8009b50:	ae08      	add	r6, sp, #32
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
 8009b52:	4620      	mov	r0, r4
 8009b54:	4988      	ldr	r1, [pc, #544]	; (8009d78 <shell_thread.10585+0x248>)
 8009b56:	f7fe fbf3 	bl	8008340 <chprintf.10588>
    if (shellGetLine(chp, line, sizeof(line))) {
 8009b5a:	4635      	mov	r5, r6
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8009b5c:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *p = line;

  while (TRUE) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	2201      	movs	r2, #1
 8009b64:	6843      	ldr	r3, [r0, #4]
 8009b66:	f10d 0107 	add.w	r1, sp, #7
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4798      	blx	r3
 8009b6e:	b368      	cbz	r0, 8009bcc <shell_thread.10585+0x9c>
      return TRUE;
    if (c == 4) {
 8009b70:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009b74:	2904      	cmp	r1, #4
 8009b76:	d025      	beq.n	8009bc4 <shell_thread.10585+0x94>
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
 8009b78:	2908      	cmp	r1, #8
 8009b7a:	d010      	beq.n	8009b9e <shell_thread.10585+0x6e>
 8009b7c:	297f      	cmp	r1, #127	; 0x7f
 8009b7e:	d00e      	beq.n	8009b9e <shell_thread.10585+0x6e>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8009b80:	290d      	cmp	r1, #13
 8009b82:	d035      	beq.n	8009bf0 <shell_thread.10585+0xc0>
      chprintf(chp, "\r\n");
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
 8009b84:	291f      	cmp	r1, #31
 8009b86:	d9eb      	bls.n	8009b60 <shell_thread.10585+0x30>
      continue;
    if (p < line + size - 1) {
 8009b88:	42bd      	cmp	r5, r7
 8009b8a:	d2e9      	bcs.n	8009b60 <shell_thread.10585+0x30>
      chSequentialStreamPut(chp, c);
 8009b8c:	6822      	ldr	r2, [r4, #0]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	6893      	ldr	r3, [r2, #8]
 8009b92:	4798      	blx	r3
      *p++ = (char)c;
 8009b94:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009b98:	f805 1b01 	strb.w	r1, [r5], #1
 8009b9c:	e7e0      	b.n	8009b60 <shell_thread.10585+0x30>
    if (c == 4) {
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8009b9e:	42b5      	cmp	r5, r6
 8009ba0:	d0de      	beq.n	8009b60 <shell_thread.10585+0x30>
        chSequentialStreamPut(chp, c);
 8009ba2:	6820      	ldr	r0, [r4, #0]
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
        p--;
 8009ba4:	3d01      	subs	r5, #1
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
 8009ba6:	6882      	ldr	r2, [r0, #8]
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4790      	blx	r2
        chSequentialStreamPut(chp, 0x20);
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	2120      	movs	r1, #32
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4790      	blx	r2
        chSequentialStreamPut(chp, c);
 8009bb6:	6821      	ldr	r1, [r4, #0]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	688b      	ldr	r3, [r1, #8]
 8009bbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009bc0:	4798      	blx	r3
 8009bc2:	e7cd      	b.n	8009b60 <shell_thread.10585+0x30>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return TRUE;
    if (c == 4) {
      chprintf(chp, "^D");
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	496d      	ldr	r1, [pc, #436]	; (8009d7c <shell_thread.10585+0x24c>)
 8009bc8:	f7fe fbba 	bl	8008340 <chprintf.10588>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8009bcc:	4620      	mov	r0, r4
 8009bce:	496c      	ldr	r1, [pc, #432]	; (8009d80 <shell_thread.10585+0x250>)
 8009bd0:	f7fe fbb6 	bl	8008340 <chprintf.10588>
 8009bd4:	2020      	movs	r0, #32
 8009bd6:	f380 8811 	msr	BASEPRI, r0
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, 0);
 8009bda:	2100      	movs	r1, #0
 8009bdc:	4869      	ldr	r0, [pc, #420]	; (8009d84 <shell_thread.10585+0x254>)
 8009bde:	f7f8 fa6f 	bl	80020c0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8009be2:	2000      	movs	r0, #0
 8009be4:	f7f9 f854 	bl	8002c90 <chThdExitS>
    }
  }
  shellExit(MSG_OK);
  /* Never executed, silencing a warning.*/
  return 0;
}
 8009be8:	2000      	movs	r0, #0
 8009bea:	b018      	add	sp, #96	; 0x60
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8009bf0:	4965      	ldr	r1, [pc, #404]	; (8009d88 <shell_thread.10585+0x258>)
      *p = 0;
 8009bf2:	2700      	movs	r7, #0
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7fe fba3 	bl	8008340 <chprintf.10588>
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8009bfa:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8009bfc:	702f      	strb	r7, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7fc fd46 	bl	8006690 <_strtok.10608.constprop.4>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009c04:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8009c06:	4605      	mov	r5, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7fc fd41 	bl	8006690 <_strtok.10608.constprop.4>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	b338      	cbz	r0, 8009c62 <shell_thread.10585+0x132>
 8009c12:	4638      	mov	r0, r7
 8009c14:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009c16:	9203      	str	r2, [sp, #12]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009c18:	f7fc fd3a 	bl	8006690 <_strtok.10608.constprop.4>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	f000 808e 	beq.w	8009d40 <shell_thread.10585+0x210>
 8009c24:	4638      	mov	r0, r7
 8009c26:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009c28:	9304      	str	r3, [sp, #16]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009c2a:	f7fc fd31 	bl	8006690 <_strtok.10608.constprop.4>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f000 808e 	beq.w	8009d52 <shell_thread.10585+0x222>
 8009c36:	4638      	mov	r0, r7
 8009c38:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009c3a:	9205      	str	r2, [sp, #20]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009c3c:	f7fc fd28 	bl	8006690 <_strtok.10608.constprop.4>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d07f      	beq.n	8009d46 <shell_thread.10585+0x216>
 8009c46:	4638      	mov	r0, r7
 8009c48:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009c4a:	9306      	str	r3, [sp, #24]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009c4c:	f7fc fd20 	bl	8006690 <_strtok.10608.constprop.4>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d07b      	beq.n	8009d4c <shell_thread.10585+0x21c>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8009c54:	4620      	mov	r0, r4
 8009c56:	494d      	ldr	r1, [pc, #308]	; (8009d8c <shell_thread.10585+0x25c>)
 8009c58:	f7fe fb72 	bl	8008340 <chprintf.10588>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	e777      	b.n	8009b52 <shell_thread.10585+0x22>
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
 8009c62:	4682      	mov	sl, r0
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8009c64:	a818      	add	r0, sp, #96	; 0x60
 8009c66:	eb00 018a 	add.w	r1, r0, sl, lsl #2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f841 2c54 	str.w	r2, [r1, #-84]
    if (cmd != NULL) {
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	f43f af6e 	beq.w	8009b52 <shell_thread.10585+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 8009c76:	4628      	mov	r0, r5
 8009c78:	4945      	ldr	r1, [pc, #276]	; (8009d90 <shell_thread.10585+0x260>)
 8009c7a:	f000 faa1 	bl	800a1c0 <strcasecmp>
 8009c7e:	b940      	cbnz	r0, 8009c92 <shell_thread.10585+0x162>
        if (n > 0) {
 8009c80:	f1ba 0f00 	cmp.w	sl, #0
 8009c84:	d0a6      	beq.n	8009bd4 <shell_thread.10585+0xa4>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8009c86:	4620      	mov	r0, r4
 8009c88:	4942      	ldr	r1, [pc, #264]	; (8009d94 <shell_thread.10585+0x264>)
 8009c8a:	4a41      	ldr	r2, [pc, #260]	; (8009d90 <shell_thread.10585+0x260>)
 8009c8c:	f7fe fb58 	bl	8008340 <chprintf.10588>
 8009c90:	e75f      	b.n	8009b52 <shell_thread.10585+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8009c92:	4628      	mov	r0, r5
 8009c94:	4940      	ldr	r1, [pc, #256]	; (8009d98 <shell_thread.10585+0x268>)
 8009c96:	f000 fa93 	bl	800a1c0 <strcasecmp>
 8009c9a:	b940      	cbnz	r0, 8009cae <shell_thread.10585+0x17e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8009c9c:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 8009c9e:	f1ba 0f00 	cmp.w	sl, #0
 8009ca2:	d019      	beq.n	8009cd8 <shell_thread.10585+0x1a8>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8009ca4:	493b      	ldr	r1, [pc, #236]	; (8009d94 <shell_thread.10585+0x264>)
 8009ca6:	4a3c      	ldr	r2, [pc, #240]	; (8009d98 <shell_thread.10585+0x268>)
 8009ca8:	f7fe fb4a 	bl	8008340 <chprintf.10588>
 8009cac:	e751      	b.n	8009b52 <shell_thread.10585+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8009cae:	f8d9 0000 	ldr.w	r0, [r9]
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d033      	beq.n	8009d1e <shell_thread.10585+0x1ee>
 8009cb6:	4f39      	ldr	r7, [pc, #228]	; (8009d9c <shell_thread.10585+0x26c>)
 8009cb8:	e003      	b.n	8009cc2 <shell_thread.10585+0x192>
 8009cba:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d02d      	beq.n	8009d1e <shell_thread.10585+0x1ee>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f000 fa7c 	bl	800a1c0 <strcasecmp>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1f6      	bne.n	8009cba <shell_thread.10585+0x18a>
      scp->sc_function(chp, argc, argv);
 8009ccc:	687d      	ldr	r5, [r7, #4]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4651      	mov	r1, sl
 8009cd2:	aa03      	add	r2, sp, #12
 8009cd4:	47a8      	blx	r5
 8009cd6:	e73c      	b.n	8009b52 <shell_thread.10585+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 8009cd8:	4931      	ldr	r1, [pc, #196]	; (8009da0 <shell_thread.10585+0x270>)
 8009cda:	f7fe fb31 	bl	8008340 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009cde:	f8d9 2000 	ldr.w	r2, [r9]
 8009ce2:	b142      	cbz	r2, 8009cf6 <shell_thread.10585+0x1c6>
 8009ce4:	4f2d      	ldr	r7, [pc, #180]	; (8009d9c <shell_thread.10585+0x26c>)
    chprintf(chp, "%s ", scp->sc_name);
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	492e      	ldr	r1, [pc, #184]	; (8009da4 <shell_thread.10585+0x274>)
 8009cea:	f7fe fb29 	bl	8008340 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009cee:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	d1f7      	bne.n	8009ce6 <shell_thread.10585+0x1b6>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d00b      	beq.n	8009d14 <shell_thread.10585+0x1e4>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009cfc:	f8d8 2000 	ldr.w	r2, [r8]
 8009d00:	b142      	cbz	r2, 8009d14 <shell_thread.10585+0x1e4>
 8009d02:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8009d04:	4620      	mov	r0, r4
 8009d06:	4927      	ldr	r1, [pc, #156]	; (8009da4 <shell_thread.10585+0x274>)
 8009d08:	f7fe fb1a 	bl	8008340 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009d0c:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	d1f7      	bne.n	8009d04 <shell_thread.10585+0x1d4>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8009d14:	4620      	mov	r0, r4
 8009d16:	491c      	ldr	r1, [pc, #112]	; (8009d88 <shell_thread.10585+0x258>)
 8009d18:	f7fe fb12 	bl	8008340 <chprintf.10588>
 8009d1c:	e719      	b.n	8009b52 <shell_thread.10585+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8009d1e:	f1b8 0f00 	cmp.w	r8, #0
 8009d22:	d019      	beq.n	8009d58 <shell_thread.10585+0x228>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8009d24:	f8d8 0000 	ldr.w	r0, [r8]
 8009d28:	b1b0      	cbz	r0, 8009d58 <shell_thread.10585+0x228>
 8009d2a:	4647      	mov	r7, r8
 8009d2c:	e002      	b.n	8009d34 <shell_thread.10585+0x204>
 8009d2e:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009d32:	b188      	cbz	r0, 8009d58 <shell_thread.10585+0x228>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8009d34:	4629      	mov	r1, r5
 8009d36:	f000 fa43 	bl	800a1c0 <strcasecmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1f7      	bne.n	8009d2e <shell_thread.10585+0x1fe>
 8009d3e:	e7c5      	b.n	8009ccc <shell_thread.10585+0x19c>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009d40:	f04f 0a01 	mov.w	sl, #1
 8009d44:	e78e      	b.n	8009c64 <shell_thread.10585+0x134>
 8009d46:	f04f 0a03 	mov.w	sl, #3
 8009d4a:	e78b      	b.n	8009c64 <shell_thread.10585+0x134>
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009d4c:	f04f 0a04 	mov.w	sl, #4
 8009d50:	e788      	b.n	8009c64 <shell_thread.10585+0x134>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009d52:	f04f 0a02 	mov.w	sl, #2
 8009d56:	e785      	b.n	8009c64 <shell_thread.10585+0x134>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4913      	ldr	r1, [pc, #76]	; (8009da8 <shell_thread.10585+0x278>)
 8009d5c:	462a      	mov	r2, r5
 8009d5e:	f7fe faef 	bl	8008340 <chprintf.10588>
        chprintf(chp, " ?\r\n");
 8009d62:	4620      	mov	r0, r4
 8009d64:	4911      	ldr	r1, [pc, #68]	; (8009dac <shell_thread.10585+0x27c>)
 8009d66:	f7fe faeb 	bl	8008340 <chprintf.10588>
 8009d6a:	e6f2      	b.n	8009b52 <shell_thread.10585+0x22>
 8009d6c:	20001ec0 	.word	0x20001ec0
 8009d70:	0800b6a0 	.word	0x0800b6a0
 8009d74:	0800b6a8 	.word	0x0800b6a8
 8009d78:	0800b6c0 	.word	0x0800b6c0
 8009d7c:	0800b6c8 	.word	0x0800b6c8
 8009d80:	0800b71c 	.word	0x0800b71c
 8009d84:	20001eb8 	.word	0x20001eb8
 8009d88:	0800b274 	.word	0x0800b274
 8009d8c:	0800b6cc 	.word	0x0800b6cc
 8009d90:	0800b6e4 	.word	0x0800b6e4
 8009d94:	0800b050 	.word	0x0800b050
 8009d98:	0800b6ec 	.word	0x0800b6ec
 8009d9c:	20000c80 	.word	0x20000c80
 8009da0:	0800b6f4 	.word	0x0800b6f4
 8009da4:	0800b70c 	.word	0x0800b70c
 8009da8:	0800b710 	.word	0x0800b710
 8009dac:	0800b714 	.word	0x0800b714

08009db0 <evt3_execute.7735.4141>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8009db0:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009db2:	4c55      	ldr	r4, [pc, #340]	; (8009f08 <evt3_execute.7735.4141+0x158>)
 8009db4:	2320      	movs	r3, #32
 8009db6:	69a2      	ldr	r2, [r4, #24]
 8009db8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009dbc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009dbe:	b938      	cbnz	r0, 8009dd0 <evt3_execute.7735.4141+0x20>
 8009dc0:	f380 8811 	msr	BASEPRI, r0
 8009dc4:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	f7f7 fd62 	bl	8001890 <_test_assert>
 8009dcc:	b188      	cbz	r0, 8009df2 <evt3_execute.7735.4141+0x42>
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 8009dd0:	4241      	negs	r1, r0
 8009dd2:	4001      	ands	r1, r0
  ctp->p_epending &= ~m;
 8009dd4:	ea20 0001 	bic.w	r0, r0, r1
 8009dd8:	6350      	str	r0, [r2, #52]	; 0x34
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f382 8811 	msr	BASEPRI, r2
 8009de0:	1a8b      	subs	r3, r1, r2
 8009de2:	4258      	negs	r0, r3
 8009de4:	eb50 0103 	adcs.w	r1, r0, r3
 8009de8:	2001      	movs	r0, #1
 8009dea:	f7f7 fd51 	bl	8001890 <_test_assert>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d1ed      	bne.n	8009dce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009df2:	69a1      	ldr	r1, [r4, #24]
 8009df4:	2220      	movs	r2, #32
 8009df6:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009dfa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d06d      	beq.n	8009edc <evt3_execute.7735.4141+0x12c>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8009e00:	6348      	str	r0, [r1, #52]	; 0x34
 8009e02:	f380 8811 	msr	BASEPRI, r0
 8009e06:	4601      	mov	r1, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8009e08:	2002      	movs	r0, #2
 8009e0a:	f7f7 fd41 	bl	8001890 <_test_assert>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d1dd      	bne.n	8009dce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009e12:	69a1      	ldr	r1, [r4, #24]
 8009e14:	2220      	movs	r2, #32
 8009e16:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8009e1a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	d061      	beq.n	8009ee4 <evt3_execute.7735.4141+0x134>
 8009e20:	f380 8811 	msr	BASEPRI, r0
 8009e24:	2101      	movs	r1, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8009e26:	2003      	movs	r0, #3
 8009e28:	f7f7 fd32 	bl	8001890 <_test_assert>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d1ce      	bne.n	8009dce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009e30:	69a6      	ldr	r6, [r4, #24]
 8009e32:	2520      	movs	r5, #32
 8009e34:	f385 8811 	msr	BASEPRI, r5
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009e38:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8009e3a:	b94d      	cbnz	r5, 8009e50 <evt3_execute.7735.4141+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009e3c:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8009e42:	6231      	str	r1, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009e44:	4601      	mov	r1, r0
 8009e46:	f7fb fc73 	bl	8005730 <chSchGoSleepTimeoutS>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	db4f      	blt.n	8009eee <evt3_execute.7735.4141+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8009e4e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8009e50:	4268      	negs	r0, r5
 8009e52:	4028      	ands	r0, r5
  ctp->p_epending &= ~m;
 8009e54:	ea25 0500 	bic.w	r5, r5, r0
 8009e58:	6375      	str	r5, [r6, #52]	; 0x34
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f382 8811 	msr	BASEPRI, r2
 8009e60:	1a83      	subs	r3, r0, r2
 8009e62:	4259      	negs	r1, r3
 8009e64:	4159      	adcs	r1, r3
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8009e66:	2004      	movs	r0, #4
 8009e68:	f7f7 fd12 	bl	8001890 <_test_assert>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d1ae      	bne.n	8009dce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009e70:	69a5      	ldr	r5, [r4, #24]
 8009e72:	2620      	movs	r6, #32
 8009e74:	f386 8811 	msr	BASEPRI, r6
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009e78:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8009e7a:	b94e      	cbnz	r6, 8009e90 <evt3_execute.7735.4141+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009e7c:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e82:	622a      	str	r2, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009e84:	4601      	mov	r1, r0
 8009e86:	f7fb fc53 	bl	8005730 <chSchGoSleepTimeoutS>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	db33      	blt.n	8009ef6 <evt3_execute.7735.4141+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8009e8e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8009e90:	2000      	movs	r0, #0
 8009e92:	6368      	str	r0, [r5, #52]	; 0x34
 8009e94:	f380 8811 	msr	BASEPRI, r0
 8009e98:	1a33      	subs	r3, r6, r0
 8009e9a:	4259      	negs	r1, r3
 8009e9c:	4159      	adcs	r1, r3
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8009e9e:	2005      	movs	r0, #5
 8009ea0:	f7f7 fcf6 	bl	8001890 <_test_assert>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d191      	bne.n	8009dce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009eaa:	69a4      	ldr	r4, [r4, #24]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8009eb2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d008      	beq.n	8009eca <evt3_execute.7735.4141+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009eb8:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8009ebc:	200b      	movs	r0, #11
 8009ebe:	210a      	movs	r1, #10
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009ec0:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8009ec2:	f7fb fc35 	bl	8005730 <chSchGoSleepTimeoutS>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	db19      	blt.n	8009efe <evt3_execute.7735.4141+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6361      	str	r1, [r4, #52]	; 0x34
 8009ece:	f381 8811 	msr	BASEPRI, r1
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8009ed2:	2006      	movs	r0, #6
}
 8009ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8009ed8:	f7f7 bcda 	b.w	8001890 <_test_assert>
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	e791      	b.n	8009e08 <evt3_execute.7735.4141+0x58>
 8009ee4:	6348      	str	r0, [r1, #52]	; 0x34
 8009ee6:	f380 8811 	msr	BASEPRI, r0
 8009eea:	4601      	mov	r1, r0
 8009eec:	e79b      	b.n	8009e26 <evt3_execute.7735.4141+0x76>
 8009eee:	f385 8811 	msr	BASEPRI, r5
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	e7b7      	b.n	8009e66 <evt3_execute.7735.4141+0xb6>
 8009ef6:	f386 8811 	msr	BASEPRI, r6
 8009efa:	2101      	movs	r1, #1
 8009efc:	e7cf      	b.n	8009e9e <evt3_execute.7735.4141+0xee>
 8009efe:	f385 8811 	msr	BASEPRI, r5
 8009f02:	2101      	movs	r1, #1
 8009f04:	e7e5      	b.n	8009ed2 <evt3_execute.7735.4141+0x122>
 8009f06:	bf00      	nop
 8009f08:	20001ec0 	.word	0x20001ec0
 8009f0c:	f3af 8000 	nop.w

08009f10 <sem4_execute.7089.4163>:

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}

static void sem4_execute(void) {
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8009f14:	ad03      	add	r5, sp, #12
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8009f16:	2400      	movs	r4, #0
 8009f18:	9504      	str	r5, [sp, #16]
 8009f1a:	9503      	str	r5, [sp, #12]
 8009f1c:	9405      	str	r4, [sp, #20]
 8009f1e:	2620      	movs	r6, #32
 8009f20:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8009f24:	4628      	mov	r0, r5
 8009f26:	4621      	mov	r1, r4
 8009f28:	f7f8 fe7a 	bl	8002c20 <chSemResetI>
  chSchRescheduleS();
 8009f2c:	f7f7 fe40 	bl	8001bb0 <chSchRescheduleS>
 8009f30:	f384 8811 	msr	BASEPRI, r4
 8009f34:	f386 8811 	msr	BASEPRI, r6
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8009f38:	9905      	ldr	r1, [sp, #20]
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	42a1      	cmp	r1, r4
 8009f3e:	bfcc      	ite	gt
 8009f40:	2100      	movgt	r1, #0
 8009f42:	2101      	movle	r1, #1
 8009f44:	f7f7 fca4 	bl	8001890 <_test_assert>
 8009f48:	4607      	mov	r7, r0
 8009f4a:	b118      	cbz	r0, 8009f54 <sem4_execute.7089.4163+0x44>
 8009f4c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8009f50:	b007      	add	sp, #28
 8009f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f54:	f380 8811 	msr	BASEPRI, r0
 8009f58:	4b40      	ldr	r3, [pc, #256]	; (800a05c <sem4_execute.7089.4163+0x14c>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009f5a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009f5e:	699a      	ldr	r2, [r3, #24]
 8009f60:	483f      	ldr	r0, [pc, #252]	; (800a060 <sem4_execute.7089.4163+0x150>)
 8009f62:	6892      	ldr	r2, [r2, #8]
 8009f64:	4b3f      	ldr	r3, [pc, #252]	; (800a064 <sem4_execute.7089.4163+0x154>)
 8009f66:	3a01      	subs	r2, #1
 8009f68:	9500      	str	r5, [sp, #0]
 8009f6a:	f7f7 ff69 	bl	8001e40 <chThdCreateStatic>
 8009f6e:	493e      	ldr	r1, [pc, #248]	; (800a068 <sem4_execute.7089.4163+0x158>)
 8009f70:	6008      	str	r0, [r1, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8009f72:	4628      	mov	r0, r5
 8009f74:	f7f7 ffdc 	bl	8001f30 <chSemWait>
 8009f78:	f386 8811 	msr	BASEPRI, r6
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8009f7c:	9905      	ldr	r1, [sp, #20]
 8009f7e:	2002      	movs	r0, #2
 8009f80:	2900      	cmp	r1, #0
 8009f82:	bfcc      	ite	gt
 8009f84:	2100      	movgt	r1, #0
 8009f86:	2101      	movle	r1, #1
 8009f88:	f7f7 fc82 	bl	8001890 <_test_assert>
 8009f8c:	b110      	cbz	r0, 8009f94 <sem4_execute.7089.4163+0x84>
 8009f8e:	f387 8811 	msr	BASEPRI, r7
 8009f92:	e7dd      	b.n	8009f50 <sem4_execute.7089.4163+0x40>
 8009f94:	f380 8811 	msr	BASEPRI, r0
 8009f98:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009f9c:	9805      	ldr	r0, [sp, #20]
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	dd24      	ble.n	8009fec <sem4_execute.7089.4163+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009fa2:	f7f7 fe05 	bl	8001bb0 <chSchRescheduleS>
 8009fa6:	2400      	movs	r4, #0
 8009fa8:	f384 8811 	msr	BASEPRI, r4
 8009fac:	2720      	movs	r7, #32
 8009fae:	f387 8811 	msr	BASEPRI, r7

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8009fb2:	9905      	ldr	r1, [sp, #20]
 8009fb4:	2003      	movs	r0, #3
 8009fb6:	42a1      	cmp	r1, r4
 8009fb8:	bfd4      	ite	le
 8009fba:	2100      	movle	r1, #0
 8009fbc:	2101      	movgt	r1, #1
 8009fbe:	f7f7 fc67 	bl	8001890 <_test_assert>
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d1c1      	bne.n	8009f4c <sem4_execute.7089.4163+0x3c>
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8009fd0:	9b05      	ldr	r3, [sp, #20]
 8009fd2:	2004      	movs	r0, #4
 8009fd4:	f1b3 0c01 	subs.w	ip, r3, #1
 8009fd8:	f1dc 0200 	rsbs	r2, ip, #0
 8009fdc:	eb52 010c 	adcs.w	r1, r2, ip
 8009fe0:	f7f7 fc56 	bl	8001890 <_test_assert>
 8009fe4:	b130      	cbz	r0, 8009ff4 <sem4_execute.7089.4163+0xe4>
 8009fe6:	f386 8811 	msr	BASEPRI, r6
 8009fea:	e7b1      	b.n	8009f50 <sem4_execute.7089.4163+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8009fec:	4628      	mov	r0, r5
 8009fee:	f7f8 fe07 	bl	8002c00 <chSemSignalI>
 8009ff2:	e7d6      	b.n	8009fa2 <sem4_execute.7089.4163+0x92>
 8009ff4:	f380 8811 	msr	BASEPRI, r0
 8009ff8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009ffc:	9c05      	ldr	r4, [sp, #20]
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	dd24      	ble.n	800a04c <sem4_execute.7089.4163+0x13c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800a002:	f7f7 fdd5 	bl	8001bb0 <chSchRescheduleS>
 800a006:	2400      	movs	r4, #0
 800a008:	f384 8811 	msr	BASEPRI, r4
 800a00c:	2620      	movs	r6, #32
 800a00e:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 800a012:	9905      	ldr	r1, [sp, #20]
 800a014:	2003      	movs	r0, #3
 800a016:	42a1      	cmp	r1, r4
 800a018:	bfd4      	ite	le
 800a01a:	2100      	movle	r1, #0
 800a01c:	2101      	movgt	r1, #1
 800a01e:	f7f7 fc37 	bl	8001890 <_test_assert>
 800a022:	4605      	mov	r5, r0
 800a024:	2800      	cmp	r0, #0
 800a026:	d191      	bne.n	8009f4c <sem4_execute.7089.4163+0x3c>
 800a028:	f380 8811 	msr	BASEPRI, r0
 800a02c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 800a030:	9905      	ldr	r1, [sp, #20]
 800a032:	2005      	movs	r0, #5
 800a034:	f1b1 0e01 	subs.w	lr, r1, #1
 800a038:	f1de 0300 	rsbs	r3, lr, #0
 800a03c:	eb53 010e 	adcs.w	r1, r3, lr
 800a040:	f7f7 fc26 	bl	8001890 <_test_assert>
 800a044:	b130      	cbz	r0, 800a054 <sem4_execute.7089.4163+0x144>
 800a046:	f385 8811 	msr	BASEPRI, r5
 800a04a:	e781      	b.n	8009f50 <sem4_execute.7089.4163+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7f8 fdd7 	bl	8002c00 <chSemSignalI>
 800a052:	e7d6      	b.n	800a002 <sem4_execute.7089.4163+0xf2>
 800a054:	f380 8811 	msr	BASEPRI, r0
 800a058:	e77a      	b.n	8009f50 <sem4_execute.7089.4163+0x40>
 800a05a:	bf00      	nop
 800a05c:	20001ec0 	.word	0x20001ec0
 800a060:	20001850 	.word	0x20001850
 800a064:	080042d1 	.word	0x080042d1
 800a068:	20002010 	.word	0x20002010
 800a06c:	f3af 8000 	nop.w

0800a070 <chThdExit>:
 800a070:	2320      	movs	r3, #32
 800a072:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 800a076:	f7f8 be0b 	b.w	8002c90 <chThdExitS>
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w

0800a080 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 800a080:	f7f7 bd76 	b.w	8001b70 <chSchDoRescheduleAhead>
 800a084:	f3af 8000 	nop.w
 800a088:	f3af 8000 	nop.w
 800a08c:	f3af 8000 	nop.w

0800a090 <memset>:
 800a090:	b4f0      	push	{r4, r5, r6, r7}
 800a092:	0784      	lsls	r4, r0, #30
 800a094:	4603      	mov	r3, r0
 800a096:	f000 808d 	beq.w	800a1b4 <memset+0x124>
 800a09a:	1e54      	subs	r4, r2, #1
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	f000 8087 	beq.w	800a1b0 <memset+0x120>
 800a0a2:	07e5      	lsls	r5, r4, #31
 800a0a4:	b2ce      	uxtb	r6, r1
 800a0a6:	d411      	bmi.n	800a0cc <memset+0x3c>
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f802 6b01 	strb.w	r6, [r2], #1
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	0792      	lsls	r2, r2, #30
 800a0b4:	d010      	beq.n	800a0d8 <memset+0x48>
 800a0b6:	1e62      	subs	r2, r4, #1
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	d079      	beq.n	800a1b0 <memset+0x120>
 800a0bc:	f803 6b01 	strb.w	r6, [r3], #1
 800a0c0:	4614      	mov	r4, r2
 800a0c2:	079a      	lsls	r2, r3, #30
 800a0c4:	461d      	mov	r5, r3
 800a0c6:	d007      	beq.n	800a0d8 <memset+0x48>
 800a0c8:	3c01      	subs	r4, #1
 800a0ca:	e7ed      	b.n	800a0a8 <memset+0x18>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f803 6b01 	strb.w	r6, [r3], #1
 800a0d2:	079a      	lsls	r2, r3, #30
 800a0d4:	461d      	mov	r5, r3
 800a0d6:	d1f7      	bne.n	800a0c8 <memset+0x38>
 800a0d8:	2c03      	cmp	r4, #3
 800a0da:	d952      	bls.n	800a182 <memset+0xf2>
 800a0dc:	b2ce      	uxtb	r6, r1
 800a0de:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 800a0e2:	2c0f      	cmp	r4, #15
 800a0e4:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 800a0e8:	d92d      	bls.n	800a146 <memset+0xb6>
 800a0ea:	f1a4 0210 	sub.w	r2, r4, #16
 800a0ee:	4617      	mov	r7, r2
 800a0f0:	2f0f      	cmp	r7, #15
 800a0f2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	606b      	str	r3, [r5, #4]
 800a0fa:	60ab      	str	r3, [r5, #8]
 800a0fc:	60eb      	str	r3, [r5, #12]
 800a0fe:	f105 0210 	add.w	r2, r5, #16
 800a102:	d916      	bls.n	800a132 <memset+0xa2>
 800a104:	b13e      	cbz	r6, 800a116 <memset+0x86>
 800a106:	3f10      	subs	r7, #16
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	6053      	str	r3, [r2, #4]
 800a10c:	6093      	str	r3, [r2, #8]
 800a10e:	60d3      	str	r3, [r2, #12]
 800a110:	3210      	adds	r2, #16
 800a112:	2f0f      	cmp	r7, #15
 800a114:	d90d      	bls.n	800a132 <memset+0xa2>
 800a116:	3f20      	subs	r7, #32
 800a118:	f102 0610 	add.w	r6, r2, #16
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	6053      	str	r3, [r2, #4]
 800a120:	6093      	str	r3, [r2, #8]
 800a122:	60d3      	str	r3, [r2, #12]
 800a124:	6113      	str	r3, [r2, #16]
 800a126:	6153      	str	r3, [r2, #20]
 800a128:	6193      	str	r3, [r2, #24]
 800a12a:	61d3      	str	r3, [r2, #28]
 800a12c:	3220      	adds	r2, #32
 800a12e:	2f0f      	cmp	r7, #15
 800a130:	d8f1      	bhi.n	800a116 <memset+0x86>
 800a132:	f1a4 0210 	sub.w	r2, r4, #16
 800a136:	f022 020f 	bic.w	r2, r2, #15
 800a13a:	f004 040f 	and.w	r4, r4, #15
 800a13e:	3210      	adds	r2, #16
 800a140:	2c03      	cmp	r4, #3
 800a142:	4415      	add	r5, r2
 800a144:	d91d      	bls.n	800a182 <memset+0xf2>
 800a146:	1f27      	subs	r7, r4, #4
 800a148:	463e      	mov	r6, r7
 800a14a:	462a      	mov	r2, r5
 800a14c:	2e03      	cmp	r6, #3
 800a14e:	f842 3b04 	str.w	r3, [r2], #4
 800a152:	f3c7 0780 	ubfx	r7, r7, #2, #1
 800a156:	d90d      	bls.n	800a174 <memset+0xe4>
 800a158:	b127      	cbz	r7, 800a164 <memset+0xd4>
 800a15a:	3e04      	subs	r6, #4
 800a15c:	2e03      	cmp	r6, #3
 800a15e:	f842 3b04 	str.w	r3, [r2], #4
 800a162:	d907      	bls.n	800a174 <memset+0xe4>
 800a164:	4617      	mov	r7, r2
 800a166:	f847 3b04 	str.w	r3, [r7], #4
 800a16a:	3e08      	subs	r6, #8
 800a16c:	6053      	str	r3, [r2, #4]
 800a16e:	1d3a      	adds	r2, r7, #4
 800a170:	2e03      	cmp	r6, #3
 800a172:	d8f7      	bhi.n	800a164 <memset+0xd4>
 800a174:	1f23      	subs	r3, r4, #4
 800a176:	f023 0203 	bic.w	r2, r3, #3
 800a17a:	1d13      	adds	r3, r2, #4
 800a17c:	f004 0403 	and.w	r4, r4, #3
 800a180:	18ed      	adds	r5, r5, r3
 800a182:	b1ac      	cbz	r4, 800a1b0 <memset+0x120>
 800a184:	b2c9      	uxtb	r1, r1
 800a186:	43ea      	mvns	r2, r5
 800a188:	192c      	adds	r4, r5, r4
 800a18a:	f805 1b01 	strb.w	r1, [r5], #1
 800a18e:	18a3      	adds	r3, r4, r2
 800a190:	42a5      	cmp	r5, r4
 800a192:	f003 0201 	and.w	r2, r3, #1
 800a196:	d00b      	beq.n	800a1b0 <memset+0x120>
 800a198:	b11a      	cbz	r2, 800a1a2 <memset+0x112>
 800a19a:	f805 1b01 	strb.w	r1, [r5], #1
 800a19e:	42a5      	cmp	r5, r4
 800a1a0:	d006      	beq.n	800a1b0 <memset+0x120>
 800a1a2:	462b      	mov	r3, r5
 800a1a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a1a8:	7069      	strb	r1, [r5, #1]
 800a1aa:	1c5d      	adds	r5, r3, #1
 800a1ac:	42a5      	cmp	r5, r4
 800a1ae:	d1f8      	bne.n	800a1a2 <memset+0x112>
 800a1b0:	bcf0      	pop	{r4, r5, r6, r7}
 800a1b2:	4770      	bx	lr
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	4614      	mov	r4, r2
 800a1b8:	e78e      	b.n	800a0d8 <memset+0x48>
 800a1ba:	bf00      	nop
 800a1bc:	0000      	movs	r0, r0
	...

0800a1c0 <strcasecmp>:
 800a1c0:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <strcasecmp+0x40>)
 800a1c2:	b470      	push	{r4, r5, r6}
 800a1c4:	681d      	ldr	r5, [r3, #0]
 800a1c6:	f810 6b01 	ldrb.w	r6, [r0], #1
 800a1ca:	19aa      	adds	r2, r5, r6
 800a1cc:	7854      	ldrb	r4, [r2, #1]
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	f004 0303 	and.w	r3, r4, #3
 800a1d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	bf08      	it	eq
 800a1dc:	f106 0220 	addeq.w	r2, r6, #32
 800a1e0:	192e      	adds	r6, r5, r4
 800a1e2:	7876      	ldrb	r6, [r6, #1]
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	f006 0603 	and.w	r6, r6, #3
 800a1ea:	2e01      	cmp	r6, #1
 800a1ec:	bf08      	it	eq
 800a1ee:	f104 0320 	addeq.w	r3, r4, #32
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	d101      	bne.n	800a1fa <strcasecmp+0x3a>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e5      	bne.n	800a1c6 <strcasecmp+0x6>
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	bc70      	pop	{r4, r5, r6}
 800a1fe:	4770      	bx	lr
 800a200:	20000d08 	.word	0x20000d08
	...

0800a210 <strlen>:
 800a210:	f020 0103 	bic.w	r1, r0, #3
 800a214:	f010 0003 	ands.w	r0, r0, #3
 800a218:	f1c0 0000 	rsb	r0, r0, #0
 800a21c:	f851 3b04 	ldr.w	r3, [r1], #4
 800a220:	f100 0c04 	add.w	ip, r0, #4
 800a224:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a228:	f06f 0200 	mvn.w	r2, #0
 800a22c:	bf1c      	itt	ne
 800a22e:	fa22 f20c 	lsrne.w	r2, r2, ip
 800a232:	4313      	orrne	r3, r2
 800a234:	f04f 0c01 	mov.w	ip, #1
 800a238:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800a23c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800a240:	eba3 020c 	sub.w	r2, r3, ip
 800a244:	ea22 0203 	bic.w	r2, r2, r3
 800a248:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800a24c:	bf04      	itt	eq
 800a24e:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a252:	3004      	addeq	r0, #4
 800a254:	d0f4      	beq.n	800a240 <strlen+0x30>
 800a256:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a25a:	bf1f      	itttt	ne
 800a25c:	3001      	addne	r0, #1
 800a25e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800a262:	3001      	addne	r0, #1
 800a264:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800a268:	bf18      	it	ne
 800a26a:	3001      	addne	r0, #1
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop

0800a270 <strncpy>:
 800a270:	ea41 0300 	orr.w	r3, r1, r0
 800a274:	079b      	lsls	r3, r3, #30
 800a276:	b4f0      	push	{r4, r5, r6, r7}
 800a278:	d174      	bne.n	800a364 <strncpy+0xf4>
 800a27a:	2a03      	cmp	r2, #3
 800a27c:	d972      	bls.n	800a364 <strncpy+0xf4>
 800a27e:	460c      	mov	r4, r1
 800a280:	f854 5b04 	ldr.w	r5, [r4], #4
 800a284:	1f16      	subs	r6, r2, #4
 800a286:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 800a28a:	ea27 0705 	bic.w	r7, r7, r5
 800a28e:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800a292:	4603      	mov	r3, r0
 800a294:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 800a298:	d131      	bne.n	800a2fe <strncpy+0x8e>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2e03      	cmp	r6, #3
 800a29e:	4632      	mov	r2, r6
 800a2a0:	f843 5b04 	str.w	r5, [r3], #4
 800a2a4:	d92a      	bls.n	800a2fc <strncpy+0x8c>
 800a2a6:	f1bc 0f00 	cmp.w	ip, #0
 800a2aa:	d00a      	beq.n	800a2c2 <strncpy+0x52>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f854 5b04 	ldr.w	r5, [r4], #4
 800a2b2:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800a2b6:	ea26 0605 	bic.w	r6, r6, r5
 800a2ba:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800a2be:	d018      	beq.n	800a2f2 <strncpy+0x82>
 800a2c0:	e01d      	b.n	800a2fe <strncpy+0x8e>
 800a2c2:	4626      	mov	r6, r4
 800a2c4:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 800a2ce:	ea27 0705 	bic.w	r7, r7, r5
 800a2d2:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800a2d6:	d112      	bne.n	800a2fe <strncpy+0x8e>
 800a2d8:	f843 5b04 	str.w	r5, [r3], #4
 800a2dc:	6865      	ldr	r5, [r4, #4]
 800a2de:	4631      	mov	r1, r6
 800a2e0:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800a2e4:	ea26 0605 	bic.w	r6, r6, r5
 800a2e8:	3a04      	subs	r2, #4
 800a2ea:	1d0c      	adds	r4, r1, #4
 800a2ec:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800a2f0:	d105      	bne.n	800a2fe <strncpy+0x8e>
 800a2f2:	3a04      	subs	r2, #4
 800a2f4:	2a03      	cmp	r2, #3
 800a2f6:	f843 5b04 	str.w	r5, [r3], #4
 800a2fa:	d8e2      	bhi.n	800a2c2 <strncpy+0x52>
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	b37a      	cbz	r2, 800a360 <strncpy+0xf0>
 800a300:	780d      	ldrb	r5, [r1, #0]
 800a302:	3a01      	subs	r2, #1
 800a304:	f803 5b01 	strb.w	r5, [r3], #1
 800a308:	b19d      	cbz	r5, 800a332 <strncpy+0xc2>
 800a30a:	f012 0f01 	tst.w	r2, #1
 800a30e:	461c      	mov	r4, r3
 800a310:	d12a      	bne.n	800a368 <strncpy+0xf8>
 800a312:	4623      	mov	r3, r4
 800a314:	b322      	cbz	r2, 800a360 <strncpy+0xf0>
 800a316:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a31a:	3a01      	subs	r2, #1
 800a31c:	f803 5b01 	strb.w	r5, [r3], #1
 800a320:	b13d      	cbz	r5, 800a332 <strncpy+0xc2>
 800a322:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a326:	3a01      	subs	r2, #1
 800a328:	7065      	strb	r5, [r4, #1]
 800a32a:	1c5c      	adds	r4, r3, #1
 800a32c:	4623      	mov	r3, r4
 800a32e:	2d00      	cmp	r5, #0
 800a330:	d1ef      	bne.n	800a312 <strncpy+0xa2>
 800a332:	b1aa      	cbz	r2, 800a360 <strncpy+0xf0>
 800a334:	2100      	movs	r1, #0
 800a336:	189c      	adds	r4, r3, r2
 800a338:	43da      	mvns	r2, r3
 800a33a:	f803 1b01 	strb.w	r1, [r3], #1
 800a33e:	18a2      	adds	r2, r4, r2
 800a340:	42a3      	cmp	r3, r4
 800a342:	f002 0201 	and.w	r2, r2, #1
 800a346:	d00b      	beq.n	800a360 <strncpy+0xf0>
 800a348:	b11a      	cbz	r2, 800a352 <strncpy+0xe2>
 800a34a:	f803 1b01 	strb.w	r1, [r3], #1
 800a34e:	42a3      	cmp	r3, r4
 800a350:	d006      	beq.n	800a360 <strncpy+0xf0>
 800a352:	461a      	mov	r2, r3
 800a354:	f802 1b01 	strb.w	r1, [r2], #1
 800a358:	7059      	strb	r1, [r3, #1]
 800a35a:	1c53      	adds	r3, r2, #1
 800a35c:	42a3      	cmp	r3, r4
 800a35e:	d1f8      	bne.n	800a352 <strncpy+0xe2>
 800a360:	bcf0      	pop	{r4, r5, r6, r7}
 800a362:	4770      	bx	lr
 800a364:	4603      	mov	r3, r0
 800a366:	e7ca      	b.n	800a2fe <strncpy+0x8e>
 800a368:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a36c:	461c      	mov	r4, r3
 800a36e:	f804 5b01 	strb.w	r5, [r4], #1
 800a372:	3a01      	subs	r2, #1
 800a374:	4623      	mov	r3, r4
 800a376:	2d00      	cmp	r5, #0
 800a378:	d1cb      	bne.n	800a312 <strncpy+0xa2>
 800a37a:	e7da      	b.n	800a332 <strncpy+0xc2>
 800a37c:	0000      	movs	r0, r0
	...

0800a380 <strpbrk>:
 800a380:	b4f0      	push	{r4, r5, r6, r7}
 800a382:	7804      	ldrb	r4, [r0, #0]
 800a384:	2c00      	cmp	r4, #0
 800a386:	d01f      	beq.n	800a3c8 <strpbrk+0x48>
 800a388:	780e      	ldrb	r6, [r1, #0]
 800a38a:	4607      	mov	r7, r0
 800a38c:	b1a6      	cbz	r6, 800a3b8 <strpbrk+0x38>
 800a38e:	42a6      	cmp	r6, r4
 800a390:	d018      	beq.n	800a3c4 <strpbrk+0x44>
 800a392:	1c4b      	adds	r3, r1, #1
 800a394:	e001      	b.n	800a39a <strpbrk+0x1a>
 800a396:	4294      	cmp	r4, r2
 800a398:	d009      	beq.n	800a3ae <strpbrk+0x2e>
 800a39a:	461d      	mov	r5, r3
 800a39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a0:	2a00      	cmp	r2, #0
 800a3a2:	d1f8      	bne.n	800a396 <strpbrk+0x16>
 800a3a4:	787c      	ldrb	r4, [r7, #1]
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	d1ee      	bne.n	800a38a <strpbrk+0xa>
 800a3ac:	782a      	ldrb	r2, [r5, #0]
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	bf08      	it	eq
 800a3b2:	2000      	moveq	r0, #0
 800a3b4:	bcf0      	pop	{r4, r5, r6, r7}
 800a3b6:	4770      	bx	lr
 800a3b8:	787c      	ldrb	r4, [r7, #1]
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	3001      	adds	r0, #1
 800a3be:	2c00      	cmp	r4, #0
 800a3c0:	d1e3      	bne.n	800a38a <strpbrk+0xa>
 800a3c2:	e7f3      	b.n	800a3ac <strpbrk+0x2c>
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	e7f2      	b.n	800a3ae <strpbrk+0x2e>
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	e7f3      	b.n	800a3b4 <strpbrk+0x34>
 800a3cc:	0000      	movs	r0, r0
	...

0800a3d0 <strspn>:
 800a3d0:	b4f0      	push	{r4, r5, r6, r7}
 800a3d2:	7804      	ldrb	r4, [r0, #0]
 800a3d4:	b1d4      	cbz	r4, 800a40c <strspn+0x3c>
 800a3d6:	780f      	ldrb	r7, [r1, #0]
 800a3d8:	4606      	mov	r6, r0
 800a3da:	b19f      	cbz	r7, 800a404 <strspn+0x34>
 800a3dc:	4605      	mov	r5, r0
 800a3de:	42bc      	cmp	r4, r7
 800a3e0:	bf18      	it	ne
 800a3e2:	460a      	movne	r2, r1
 800a3e4:	d102      	bne.n	800a3ec <strspn+0x1c>
 800a3e6:	e008      	b.n	800a3fa <strspn+0x2a>
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	d006      	beq.n	800a3fa <strspn+0x2a>
 800a3ec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f9      	bne.n	800a3e8 <strspn+0x18>
 800a3f4:	1a28      	subs	r0, r5, r0
 800a3f6:	bcf0      	pop	{r4, r5, r6, r7}
 800a3f8:	4770      	bx	lr
 800a3fa:	786c      	ldrb	r4, [r5, #1]
 800a3fc:	3601      	adds	r6, #1
 800a3fe:	b11c      	cbz	r4, 800a408 <strspn+0x38>
 800a400:	4635      	mov	r5, r6
 800a402:	e7ec      	b.n	800a3de <strspn+0xe>
 800a404:	4638      	mov	r0, r7
 800a406:	e7f6      	b.n	800a3f6 <strspn+0x26>
 800a408:	1a30      	subs	r0, r6, r0
 800a40a:	e7f4      	b.n	800a3f6 <strspn+0x26>
 800a40c:	4620      	mov	r0, r4
 800a40e:	e7f2      	b.n	800a3f6 <strspn+0x26>
 800a410:	00000101 	.word	0x00000101
 800a414:	00020111 	.word	0x00020111
 800a418:	00001001 	.word	0x00001001
 800a41c:	00022011 	.word	0x00022011
 800a420:	00000002 	.word	0x00000002
 800a424:	0e031211 	.word	0x0e031211
 800a428:	00aa0006 	.word	0x00aa0006
 800a42c:	190b2011 	.word	0x190b2011
 800a430:	80030880 	.word	0x80030880
 800a434:	7410f000 	.word	0x7410f000
 800a438:	005500e8 	.word	0x005500e8
 800a43c:	240c2011 	.word	0x240c2011
 800a440:	03ab0c06 	.word	0x03ab0c06
 800a444:	00c20203 	.word	0x00c20203
 800a448:	01c03204 	.word	0x01c03204
 800a44c:	30032011 	.word	0x30032011
 800a450:	00c06403 	.word	0x00c06403
 800a454:	50022011 	.word	0x50022011
 800a458:	00000a84 	.word	0x00000a84
 800a45c:	54022011 	.word	0x54022011
 800a460:	0000070f 	.word	0x0000070f
 800a464:	5b052011 	.word	0x5b052011
 800a468:	78210440 	.word	0x78210440
 800a46c:	00000020 	.word	0x00000020
 800a470:	000c2111 	.word	0x000c2111
 800a474:	510fbaff 	.word	0x510fbaff
 800a478:	fcc9a9cf 	.word	0xfcc9a9cf
 800a47c:	010f1e1b 	.word	0x010f1e1b
 800a480:	0c0c2111 	.word	0x0c0c2111
 800a484:	ff15fdfc 	.word	0xff15fdfc
 800a488:	baff0f00 	.word	0xbaff0f00
 800a48c:	a9cf510f 	.word	0xa9cf510f
 800a490:	180c2111 	.word	0x180c2111
 800a494:	1e1bfcc9 	.word	0x1e1bfcc9
 800a498:	fdfc010f 	.word	0xfdfc010f
 800a49c:	0f00ff15 	.word	0x0f00ff15
 800a4a0:	06011211 	.word	0x06011211
 800a4a4:	00000000 	.word	0x00000000
 800a4a8:	00011211 	.word	0x00011211
 800a4ac:	00000085 	.word	0x00000085
 800a4b0:	04011011 	.word	0x04011011
 800a4b4:	00000031 	.word	0x00000031
 800a4b8:	01021111 	.word	0x01021111
 800a4bc:	000091d3 	.word	0x000091d3
 800a4c0:	656c6469 	.word	0x656c6469
 800a4c4:	00000000 	.word	0x00000000
 800a4c8:	00000043 	.word	0x00000043
 800a4cc:	00000042 	.word	0x00000042
 800a4d0:	00000041 	.word	0x00000041
 800a4d4:	44434241 	.word	0x44434241
 800a4d8:	00000045 	.word	0x00000045
 800a4dc:	00004241 	.word	0x00004241

0800a4e0 <active_status.9577.4492>:
	...

0800a4f0 <commands.11110>:
 800a4f0:	0800a64c 08008381 0800a650 08003ec1     L.......P....>..
 800a500:	0800b818 080083e1 0800a658 08008441     ........X...A...
 800a510:	0800a660 08009691 0800a664 08009621     `.......d...!...
 800a520:	0800bad4 08009701 0800a668 080034e1     ........h....4..
 800a530:	0800b8e0 08009531 0800a66c 080084c1     ....1...l.......
 800a540:	0800a670 080095b1 0800a674 08003f41     p.......t...A?..
 800a550:	0800a678 08008491 00000000 00000000     x...............

0800a560 <zero_status.9575.4490>:
	...

0800a570 <CSWTCH.32.10428.10428.4493>:
 800a570:	02020200 02020202 02020202 02020202     ................
 800a580:	00000001 00000000 00000000 00000000     ................

0800a590 <shell_cfg1.11109>:
 800a590:	20000d0c 0800a4f0 00000000 00000000     ... ............

0800a5a0 <halted_status.9576.4491>:
 800a5a0:	00000001 00000000 00000000 00000000     ................
 800a5b0:	646e6553 20612073 6b636170 202c7465     Sends a packet, 
 800a5c0:	67617355 77203a65 61703c20 74656b63     Usage: w <packet
 800a5d0:	200a0d3e 6b636150 69207465 72702073     >.. Packet is pr
 800a5e0:	6565636f 20646564 70207962 656b6361     oceeded by packe
 800a5f0:	65682074 72656461 65732820 68742074     t header (set th
 800a600:	66207369 74737269 6564202c 6c756166     is first, defaul
 800a610:	25272074 0d292773 0000000a 4f522424     t '%s').....$$RO
 800a620:	0000004b 6361703c 3e74656b 73756d20     K...<packet> mus
 800a630:	65622074 61786520 796c7463 63203120     t be exactly 1 c
 800a640:	61726168 72657463 00000a0d 006d656d     haracter....mem.
 800a650:	65726874 00736461 74697277 00000065     threads.write...
 800a660:	00000075 00000064 00000077 00000070     u...d...w...p...
 800a670:	00000072 00000063 0000003f 00000000     r...c...?.......

0800a680 <ep0config.10422>:
 800a680:	00000000 08003601 08004201 08007a41     .....6...B..Az..
 800a690:	00400040 20000f8c 20000f8c 00000001     @.@.... ... ....
 800a6a0:	20000fac 00000000 00000000 00000000     ... ............

0800a6b0 <ep1config.11398>:
 800a6b0:	00000002 00000000 08003571 08009781     ........q5......
 800a6c0:	00400040 20000f7c 20000f64 00000002     @.@.|.. d.. ....
	...

0800a6e0 <ch_debug.5042>:
 800a6e0:	6e69616d 18001600 08440204 1814100c     main......D.....
 800a6f0:	1e1d1c00 00000000 00000000 00000000     ................

0800a700 <states.8533.11152.5019>:
 800a700:	0800a83c 0800a844 0800a84c 0800a854     <...D...L...T...
 800a710:	0800a860 0800a868 0800a870 0800a878     `...h...p...x...
 800a720:	0800a880 0800a88c 0800a894 0800a89c     ................
 800a730:	0800a8a8 0800a8b0 0800a8b8 0800a8c0     ................
 800a740:	44434241 00000000 202d2d2d 726f6353     ABCD....--- Scor
 800a750:	203a2065 00000000 74796220 532f7365     e : .... bytes/S
 800a760:	00000000 67617355 74203a65 61657268     ....Usage: threa
 800a770:	0a0d7364 00000000 20202020 72646461     ds......    addr
 800a780:	20202020 63617473 7270206b 72206f69         stack prio r
 800a790:	20736665 20202020 74617473 000a0d65     efs     state...
 800a7a0:	6c383025 30252078 20786c38 756c3425     %08lx %08lx %4lu
 800a7b0:	6c342520 39252075 000a0d73 656e7554      %4lu %9s...Tune
 800a7c0:	6f742073 63206120 6e6e6168 202c6c65     s to a channel, 
 800a7d0:	67617355 63203a65 68633c20 656e6e61     Usage: c <channe
 800a7e0:	2030206c 38206f74 000a0d3e 6168633c     l 0 to 8>...<cha
 800a7f0:	6c656e6e 756d203e 62207473 78652065     nnel> must be ex
 800a800:	6c746361 20312079 72616863 65746361     actly 1 characte
 800a810:	6e612072 6e692064 382d3020 6e617220     r and in 0-8 ran
 800a820:	0a0d6567 00000000 6e616843 206c656e     ge......Channel 
 800a830:	203a7369 0a0d7525 00000000 44414552     is: %u......READ
 800a840:	00000059 52525543 00544e45 54535457     Y...CURRENT.WTST
 800a850:	00545241 50535553 45444e45 00000044     ART.SUSPENDED...
 800a860:	55455551 00004445 45535457 0000004d     QUEUED..WTSEM...
 800a870:	544d5457 00000058 4f435457 0000444e     WTMTX...WTCOND..
 800a880:	45454c53 474e4950 00000000 58455457     SLEEPING....WTEX
 800a890:	00005449 524f5457 00545645 4e415457     IT..WTOREVT.WTAN
 800a8a0:	54564544 00000000 4d444e53 00514753     DEVT....SNDMSGQ.
 800a8b0:	4d444e53 00004753 534d5457 00000047     SNDMSG..WTMSG...
 800a8c0:	414e4946 0000004c 00000000 00000000     FINAL...........

0800a8d0 <vmt.9039.5041>:
 800a8d0:	08005a01 080058d1 08005961 08005831     .Z...X..aY..1X..
 800a8e0:	08005951 08005821 080059f1 080058c1     QY..!X...Y...X..

0800a8f0 <_stm32_dma_streams.5084>:
 800a8f0:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 800a900:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 800a910:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 800a920:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 800a930:	40020004 00100514 40020080 40020004     ...@.......@...@
 800a940:	00110618 00000000 00000000 00000000     ................

0800a950 <serusbcfg>:
 800a950:	20000fd0 00020101 00000000 00000000     ... ............

0800a960 <usbcfg>:
 800a960:	08004341 08005b81 08005cf1 00000000     AC...[...\......

0800a970 <ep2config.11401.4656>:
 800a970:	00000003 00000000 08005ce1 00000000     .........\......
 800a980:	00000010 20001704 00000000 00000001     ....... ........
	...
 800a9a0:	20414d44 6c696166 00657275 00000000     DMA failure.....

0800a9b0 <vcom_device_descriptor_data.11410.4721>:
 800a9b0:	01100112 40000002 00041eaf 02010200     .......@........
 800a9c0:	00000103 00000000 00000000 00000000     ................

0800a9d0 <vcom_string0.11405.4716>:
 800a9d0:	04090304 00000000 00000000 00000000     ................

0800a9e0 <vcom_strings.11404.4715>:
 800a9e0:	00000004 0800a9d0 00000012 0800aa20     ............ ...
 800a9f0:	00000038 0800ab60 00000008 0800aa10     8...`...........

0800aa00 <vcom_device_descriptor.11409.4720>:
 800aa00:	00000012 0800a9b0 00000000 00000000     ................

0800aa10 <vcom_string3.11408.4719>:
 800aa10:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800aa20 <vcom_string1.11406.4717>:
 800aa20:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 800aa30:	00000073 00000000 00000000 00000000     s...............
 800aa40:	00434241 202d2d2d 74737953 203a6d65     ABC.--- System: 
 800aa50:	00000000 74796220 00007365 202d2d2d     .... bytes..--- 
 800aa60:	65726854 203a6461 00000000 202d2d2d     Thread: ....--- 
 800aa70:	656d6954 203a2072 00000000 202d2d2d     Timer : ....--- 
 800aa80:	616d6553 203a6870 00000000 202d2d2d     Semaph: ....--- 
 800aa90:	6e657645 203a5374 00000000 202d2d2d     EventS: ....--- 
 800aaa0:	6e657645 203a4c74 00000000 202d2d2d     EventL: ....--- 
 800aab0:	6574754d 203a2078 00000000 202d2d2d     Mutex : ....--- 
 800aac0:	646e6f43 203a2e56 00000000 202d2d2d     CondV.: ....--- 
 800aad0:	75657551 203a2065 00000000 202d2d2d     Queue : ....--- 
 800aae0:	6c69614d 203a2e42 00000000 00000920     MailB.: .... ...

0800aaf0 <vcom_configuration_descriptor_data.11412.4723>:
 800aaf0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800ab00:	24050001 05011000 01000124 02022404     ...$....$....$..
 800ab10:	00062405 82050701 ff000803 00010409     .$..............
 800ab20:	00000a02 01050700 00004002 02810507     .........@......
 800ab30:	00000040 00000000 00000000 00000000     @...............

0800ab40 <vcom_configuration_descriptor.11411.4722>:
 800ab40:	00000043 0800aaf0 00000000 00000000     C...............

0800ab50 <CSWTCH.26.10421.10421.4730>:
 800ab50:	00000400 00000600 00000000 00000000     ................

0800ab60 <vcom_string2.11407.4718>:
 800ab60:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800ab70:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800ab80:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800ab90:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800aba0 <pow10.10791.4387>:
 800aba0:	0000000a 00000064 000003e8 00002710     ....d........'..
 800abb0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 800abc0:	3b9aca00 00000000 00000000 00000000     ...;............
 800abd0:	6c756e28 0000296c 00000000 00000000     (null)..........
 800abe0:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 800abf0:	20747365 74697573 00000065 002a2a2a     est suite...***.
 800ac00:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 800ac10:	00002020 202d2d2d 74736554 73614320       ..--- Test Cas
 800ac20:	00002065 00000029 202d2d2d 75736552     e ..)...--- Resu
 800ac30:	203a746c 4c494146 20455255 00002328     lt: FAILURE (#..
 800ac40:	0000295d 202d2d2d 75736552 203a746c     ])..--- Result: 
 800ac50:	43435553 00535345 4c494146 00455255     SUCCESS.FAILURE.
 800ac60:	2e302e33 76656430 00000000 202a2a2a     3.0.0dev....*** 
 800ac70:	706d6f43 64656c69 2020203a 00002020     Compiled:     ..
 800ac80:	20626546 32203220 20353130 3332202d     Feb  2 2015 - 23
 800ac90:	3a39303a 00003832 202a2a2a 706d6f43     :09:28..*** Comp
 800aca0:	72656c69 2020203a 00002020 20434347     iler:     ..GCC 
 800acb0:	2e372e34 30322034 39303331 28203331     4.7.4 20130913 (
 800acc0:	656c6572 29657361 52415b20 6d652f4d     release) [ARM/em
 800acd0:	64646562 342d6465 622d375f 636e6172     bedded-4_7-branc
 800ace0:	65722068 69736976 32206e6f 30363230     h revision 20260
 800acf0:	00005d31 202a2a2a 68637241 63657469     1]..*** Architec
 800ad00:	65727574 0000203a 764d5241 004d2d37     ture: ..ARMv7-M.
 800ad10:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 800ad20:	0000203a 74726f43 4d2d7865 00000033     : ..Cortex-M3...
 800ad30:	202a2a2a 74726f50 666e4920 20203a6f     *** Port Info:  
 800ad40:	00002020 61766441 6465636e 72656b20       ..Advanced ker
 800ad50:	206c656e 65646f6d 00000000 202a2a2a     nel mode....*** 
 800ad60:	74616c50 6d726f66 2020203a 00002020     Platform:     ..
 800ad70:	334d5453 30314632 65502078 726f6672     STM32F10x Perfor
 800ad80:	636e616d 694c2065 4d20656e 75696465     mance Line Mediu
 800ad90:	6544206d 7469736e 00000079 202a2a2a     m Density...*** 
 800ada0:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 800adb0:	55207854 6e696c70 6f62206b 00647261     Tx Uplink board.
 800adc0:	00002820 00005b20 616e6946 6572206c      (.. [..Final re
 800add0:	746c7573 0000203a 6e696c62 0072656b     sult: ..blinker.
 800ade0:	67617355 6d203a65 0a0d6d65 00000000     Usage: mem......
 800adf0:	65726f63 65726620 656d2065 79726f6d     core free memory
 800ae00:	25203a20 79622075 0d736574 0000000a      : %u bytes.....
 800ae10:	70616568 61726620 6e656d67 20207374     heap fragments  
 800ae20:	25203a20 000a0d75 70616568 65726620      : %u...heap fre
 800ae30:	6f742065 206c6174 25203a20 79622075     e total  : %u by
 800ae40:	0d736574 0000000a 67617355 74203a65     tes.....Usage: t
 800ae50:	0d747365 0000000a 2074756f 6d20666f     est.....out of m
 800ae60:	726f6d65 000a0d79 730a0a0d 70706f74     emory......stopp
 800ae70:	0a0d6465 00000000 67617355 77203a65     ed......Usage: w
 800ae80:	65746972 00000a0d 67617355 0d203a65     rite....Usage: .
 800ae90:	6d27200a 20276d65 736e7572 646d6320     . 'mem' runs cmd
 800aea0:	6d656d5f 6843203a 4f696269 65732053     _mem: ChibiOS se
 800aeb0:	7420666c 0d747365 7427200a 61657268     lf test.. 'threa
 800aec0:	20277364 736e7572 646d6320 7268745f     ds' runs cmd_thr
 800aed0:	73646165 6843203a 4f696269 65732053     eads: ChibiOS se
 800aee0:	7420666c 0d747365 2720200a 74736574     lf test..  'test
 800aef0:	75722027 6320736e 745f646d 3a747365     ' runs cmd_test:
 800af00:	69684320 534f6962 6c657320 65742066      ChibiOS self te
 800af10:	0a0d7473 7727202c 65746972 75722027     st.., 'write' ru
 800af20:	6320736e 775f646d 65746972 6843203a     ns cmd_write: Ch
 800af30:	4f696269 44432053 4d434143 6c657320     ibiOS CDCACM sel
 800af40:	65742066 0a0d7473 27752720 6e757420     f test.. 'u' tun
 800af50:	75207365 30352070 0d7a6820 2720200a     es up 50 hz..  '
 800af60:	74202764 73656e75 776f6420 3035206e     d' tunes down 50
 800af70:	0a0d7a68 27722720 73657220 20737465     hz.. 'r' resets 
 800af80:	696e7574 0a0d676e 27732720 6e657320     tuning.. 's' sen
 800af90:	70207364 656b6361 200a0d74 20277727     ds packet.. 'w' 
 800afa0:	646e6573 61702073 74656b63 74697720     sends packet wit
 800afb0:	65682068 72656461 27200a0d 73202763     h header.. 'c' s
 800afc0:	20737465 6e616863 206c656e 626d756e     ets channel numb
 800afd0:	0a0d7265 68272020 65732027 70207374     er..  'h' sets p
 800afe0:	656b6361 65682074 72656461 27200a0d     acket header.. '
 800aff0:	67202770 73657669 72617020 756e2074     p' gives part nu
 800b000:	7265626d 27200a0d 6420273f 6c707369     mber.. '?' displ
 800b010:	20737961 706c6568 00000a0d 73746547     ays help....Gets
 800b020:	72617020 44492074 7355202c 3a656761      part ID, Usage:
 800b030:	0d207020 0000000a 0d583425 0000000a      p .....%4X.....

0800b040 <evhndl.7763.4350>:
 800b040:	080018f1 08001901 08001911 00000000     ................
 800b050:	67617355 25203a65 000a0d73 6f666e69     Usage: %s...info
 800b060:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 800b070:	73252020 00000a0d 706d6f43 72656c69       %s....Compiler
 800b080:	2020203a 73252020 00000a0d 68637241     :     %s....Arch
 800b090:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 800b0a0:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 800b0b0:	00000a0d 74726f50 666e4920 20203a6f     ....Port Info:  
 800b0c0:	73252020 00000a0d 74616c50 6d726f66       %s....Platform
 800b0d0:	2020203a 73252020 00000a0d 72616f42     :     %s....Boar
 800b0e0:	20203a64 20202020 73252020 00000a0d     d:        %s....
 800b0f0:	6c697542 69742064 203a656d 73252020     Build time:   %s
 800b100:	73257325 00000a0d 20626546 32203220     %s%s....Feb  2 2
 800b110:	00353130 00202d20 303a3332 35353a39     015. - .23:09:55
 800b120:	00000000 74737973 00656d69 0d756c25     ....systime.%lu.
 800b130:	0000000a 636f6c20 6e752b6b 6b636f6c     .... lock+unlock
 800b140:	0000532f 72687420 73646165 0000532f     /S.. threads/S..
 800b150:	78746320 2f637773 00000053 69617720      ctxswc/S... wai
 800b160:	69732b74 6c616e67 0000532f 6d697420     t+signal/S.. tim
 800b170:	2f737265 00000053 73657220 64656863     ers/S... resched
 800b180:	73656c75 202c532f 00000000 67736d20     ules/S, .... msg
 800b190:	2c532f73 00000020 00000000 00000000     s/S, ...........
 800b1a0:	73746553 70206120 656b6361 65682074     Sets a packet he
 800b1b0:	72656461 726f6620 65737520 74697720     ader for use wit
 800b1c0:	77272068 6f632027 6e616d6d 55202c64     h 'w' command, U
 800b1d0:	65676173 2068203a 6361703c 5f74656b     sage: h <packet_
 800b1e0:	64616568 0d3e7265 0000000a 6361703c     header>.....<pac
 800b1f0:	5f74656b 64616568 203e7265 7473756d     ket_header> must
 800b200:	20656220 63617865 20796c74 68632035      be exactly 5 ch
 800b210:	63617261 73726574 00000a0d 656e7554     aracters....Tune
 800b220:	6f742073 66656420 746c7561 65726620     s to default fre
 800b230:	6e657571 202c7963 67617355 72203a65     quency, Usage: r
 800b240:	00000a0d 71657246 636e6575 73692079     ....Frequency is
 800b250:	7525203a 00000a0d 656e7554 6f642073     : %u....Tunes do
 800b260:	62206e77 30352079 202c7a68 67617355     wn by 50hz, Usag
 800b270:	64203a65 00000a0d 656e7554 70752073     e: d....Tunes up
 800b280:	20796220 7a683035 7355202c 3a656761      by 50hz, Usage:
 800b290:	0a0d7520 00000000 646e6553 20612073      u......Sends a 
 800b2a0:	6b636170 202c7465 67617355 73203a65     packet, Usage: s
 800b2b0:	61703c20 74656b63 000a0d3e 6361703c      <packet>...<pac
 800b2c0:	3e74656b 73756d20 65622074 61786520     ket> must be exa
 800b2d0:	796c7463 63203620 61726168 72657463     ctly 6 character
 800b2e0:	000a0d73 34346973 00003233 00000000     s...si4432......

0800b2f0 <spicfg.11762.4557>:
 800b2f0:	08006991 40010800 000c0004 00000000     .i.....@........

0800b300 <patternthd>:
 800b300:	0800b5d0 0800b390 0800b480 0800b680     ................
	...

0800b320 <testmtx4.4498>:
 800b320:	0800b820 08005031 00000000 08007e71      ...1P......q~..

0800b330 <patternmsg>:
 800b330:	0800b590 00000000 00000000 00000000     ................

0800b340 <testbmk1.4543>:
 800b340:	0800ba0c 00000000 00000000 08009041     ............A...

0800b350 <patternbmk>:
 800b350:	0800b340 0800b3b0 0800b4a0 0800b3e0     @...............
 800b360:	0800b560 0800b690 0800b440 0800b510     `.......@.......
 800b370:	0800b5e0 0800b500 0800b630 0800b3d0     ........0.......
 800b380:	0800b550 00000000 00000000 00000000     P...............

0800b390 <testthd2.4480>:
 800b390:	0800b744 00000000 00000000 08002671     D...........q&..

0800b3a0 <testsem2.4489>:
 800b3a0:	0800b7a4 08005181 00000000 08008841     .....Q......A...

0800b3b0 <testbmk2.4548>:
 800b3b0:	0800ba24 00000000 00000000 080090c1     $...............

0800b3c0 <patterndyn>:
 800b3c0:	0800b3f0 0800b450 0800b5a0 00000000     ....P...........

0800b3d0 <testbmk12.4558>:
 800b3d0:	0800bb70 08005071 00000000 08008af1     p...qP..........

0800b3e0 <testbmk4.4550>:
 800b3e0:	0800ba54 00000000 00000000 08008bd1     T...............

0800b3f0 <testdyn1.4528>:
 800b3f0:	0800b958 080079e1 00000000 08002b01     X....y.......+..

0800b400 <testsem4.4491>:
 800b400:	0800b7d8 00000000 00000000 08009f11     ................

0800b410 <testsem1.4484>:
 800b410:	0800b78c 080051a1 00000000 080052c1     .....Q.......R..

0800b420 <patternevt>:
 800b420:	0800b640 0800b540 0800b470 00000000     @...@...p.......

0800b430 <testmtx6.4500>:
 800b430:	0800b84c 08004ff1 00000000 08005db1     L....O.......]..

0800b440 <testbmk7.4553>:
 800b440:	0800bab0 080051e1 00000000 08008e71     .....Q......q...

0800b450 <testdyn2.4533>:
 800b450:	0800b984 08005201 00000000 08006cb1     .....R.......l..

0800b460 <patternpools>:
 800b460:	0800b4c0 00000000 00000000 00000000     ................

0800b470 <testevt3.4460>:
 800b470:	0800b900 080064a1 00000000 08009db1     .....d..........

0800b480 <testthd3.4481>:
 800b480:	0800b760 00000000 00000000 08001c01     `...............

0800b490 <testqueues2.4541>:
 800b490:	0800b9f4 08005091 00000000 08004441     .....P......AD..

0800b4a0 <testbmk3.4549>:
 800b4a0:	0800ba3c 00000000 00000000 08009141     <...........A...

0800b4b0 <testmtx5.4499>:
 800b4b0:	0800b83c 08005011 00000000 080039f1     <....P.......9..

0800b4c0 <testpools1.4522>:
 800b4c0:	0800b93c 08005221 00000000 08006ab1     <...!R.......j..

0800b4d0 <patterns.6764>:
 800b4d0:	0800b300 0800b5f0 0800b610 0800b330     ............0...
 800b4e0:	0800b5c0 0800b420 0800b570 0800b460     .... ...p...`...
 800b4f0:	0800b3c0 0800b580 0800b350 00000000     ........P.......

0800b500 <testbmk10.4556>:
 800b500:	0800bb28 00000000 00000000 08008d01     (...............

0800b510 <testbmk8.4554>:
 800b510:	0800bad8 00000000 00000000 08008d81     ................

0800b520 <testmtx7.4501>:
 800b520:	0800b864 08004fd1 00000000 08005ea1     d....O.......^..

0800b530 <testmbox1.4510>:
 800b530:	0800b8a0 08005121 00000000 08002d41     ....!Q......A-..

0800b540 <testevt2.4472>:
 800b540:	0800b8e4 08006491 00000000 08009231     .....d......1...

0800b550 <testbmk13.4559>:
 800b550:	0800bb90 00000000 00000000 080062f1     .............b..

0800b560 <testbmk5.4551>:
 800b560:	0800ba70 00000000 00000000 08008fa1     p...............

0800b570 <patternheap>:
 800b570:	0800b650 00000000 00000000 00000000     P...............

0800b580 <patternqueues>:
 800b580:	0800b5b0 0800b490 00000000 00000000     ................

0800b590 <testmsg1.4504>:
 800b590:	0800b890 00000000 00000000 080084f1     ................

0800b5a0 <testdyn3.4534>:
 800b5a0:	0800b9b4 08007a11 00000000 08008141     .....z......A...

0800b5b0 <testqueues1.4536>:
 800b5b0:	0800b9dc 080050f1 00000000 08003b41     .....P......A;..

0800b5c0 <patternmbox>:
 800b5c0:	0800b530 00000000 00000000 00000000     0...............

0800b5d0 <testthd1.4475>:
 800b5d0:	0800b728 00000000 00000000 08002591     (............%..

0800b5e0 <testbmk9.4555>:
 800b5e0:	0800bb04 00000000 00000000 08003e11     .............>..

0800b5f0 <patternsem>:
 800b5f0:	0800b410 0800b3a0 0800b660 0800b400     ........`.......
	...

0800b610 <patternmtx>:
 800b610:	0800bbb0 0800b320 0800b4b0 0800b430     .... .......0...
 800b620:	0800b520 0800b670 00000000 00000000      ...p...........

0800b630 <testbmk11.4557>:
 800b630:	0800bb4c 080051c1 00000000 08008c91     L....Q..........

0800b640 <testevt1.4471>:
 800b640:	0800b8c0 08006481 00000000 08008691     .....d..........

0800b650 <testheap1.4516>:
 800b650:	0800b914 08005b51 00000000 08002871     ....Q[......q(..

0800b660 <testsem3.4490>:
 800b660:	0800b7b8 08005161 00000000 08005441     ....aQ......AT..

0800b670 <testmtx8.4502>:
 800b670:	0800b87c 080069b1 00000000 08005fc1     |....i......._..

0800b680 <testthd4.4482>:
 800b680:	0800b77c 00000000 00000000 08008771     |...........q...

0800b690 <testbmk6.4552>:
 800b690:	0800ba90 00000000 00000000 08008b61     ............a...
 800b6a0:	6c656873 0000006c 68430a0d 4f696269     shell.....ChibiO
 800b6b0:	54522f53 65685320 0a0d6c6c 00000000     S/RT Shell......
 800b6c0:	203e6863 00000000 0000445e 206f6f74     ch> ....^D..too 
 800b6d0:	796e616d 67726120 6e656d75 0a0d7374     many arguments..
 800b6e0:	00000000 74697865 00000000 706c6568     ....exit....help
 800b6f0:	00000000 6d6d6f43 73646e61 6568203a     ....Commands: he
 800b700:	6520706c 20746978 00000000 00207325     lp exit ....%s .
 800b710:	00007325 0a0d3f20 00000000 6f6c0a0d     %s.. ?........lo
 800b720:	74756f67 00000000 65726854 2c736461     gout....Threads,
 800b730:	716e6520 69756575 7420676e 20747365      enqueuing test 
 800b740:	00003123 65726854 2c736461 716e6520     #1..Threads, enq
 800b750:	69756575 7420676e 20747365 00003223     ueuing test #2..
 800b760:	65726854 2c736461 69727020 7469726f     Threads, priorit
 800b770:	68632079 65676e61 00000000 65726854     y change....Thre
 800b780:	2c736461 6c656420 00737961 616d6553     ads, delays.Sema
 800b790:	726f6870 202c7365 75716e65 6e697565     phores, enqueuin
 800b7a0:	00000067 616d6553 726f6870 202c7365     g...Semaphores, 
 800b7b0:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 800b7c0:	202c7365 6d6f7461 73206369 616e6769     es, atomic signa
 800b7d0:	61772d6c 00007469 616e6942 53207972     l-wait..Binary S
 800b7e0:	70616d65 65726f68 66202c73 74636e75     emaphores, funct
 800b7f0:	616e6f69 7974696c 00000000 6574754d     ionality....Mute
 800b800:	2c736578 69727020 7469726f 6e652079     xes, priority en
 800b810:	75657571 20676e69 74736574 00000000     queuing test....
 800b820:	6574754d 2c736578 69727020 7469726f     Mutexes, priorit
 800b830:	65722079 6e727574 00000000 6574754d     y return....Mute
 800b840:	2c736578 61747320 00737574 646e6f43     xes, status.Cond
 800b850:	2c726156 67697320 206c616e 74736574     Var, signal test
 800b860:	00000000 646e6f43 2c726156 6f726220     ....CondVar, bro
 800b870:	61636461 74207473 00747365 646e6f43     adcast test.Cond
 800b880:	2c726156 6f6f6220 74207473 00747365     Var, boost test.
 800b890:	7373654d 73656761 6f6c202c 0000706f     Messages, loop..
 800b8a0:	6c69614d 65786f62 71202c73 69756575     Mailboxes, queui
 800b8b0:	6120676e 7420646e 6f656d69 00737475     ng and timeouts.
 800b8c0:	6e657645 202c7374 69676572 61727473     Events, registra
 800b8d0:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 800b8e0:	00000068 6e657645 202c7374 74696177     h...Events, wait
 800b8f0:	646e6120 6f726220 61636461 00007473      and broadcast..
 800b900:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 800b910:	00000000 70616548 6c61202c 61636f6c     ....Heap, alloca
 800b920:	6e6f6974 646e6120 61726620 6e656d67     tion and fragmen
 800b930:	69746174 74206e6f 00747365 6f6d654d     tation test.Memo
 800b940:	50207972 736c6f6f 7571202c 2f657565     ry Pools, queue/
 800b950:	75716564 00657565 616e7944 2063696d     dequeue.Dynamic 
 800b960:	73495041 6874202c 64616572 72632073     APIs, threads cr
 800b970:	69746165 66206e6f 206d6f72 70616568     eation from heap
 800b980:	00000000 616e7944 2063696d 73495041     ....Dynamic APIs
 800b990:	6874202c 64616572 72632073 69746165     , threads creati
 800b9a0:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 800b9b0:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 800b9c0:	6572202c 74736967 61207972 7220646e     , registry and r
 800b9d0:	72656665 65636e65 00000073 75657551     eferences...Queu
 800b9e0:	202c7365 75706e69 75712074 73657565     es, input queues
 800b9f0:	00000000 75657551 202c7365 7074756f     ....Queues, outp
 800ba00:	71207475 65756575 00000073 636e6542     ut queues...Benc
 800ba10:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 800ba20:	00003123 636e6542 72616d68 6d202c6b     #1..Benchmark, m
 800ba30:	61737365 20736567 00003223 636e6542     essages #2..Benc
 800ba40:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 800ba50:	00003323 636e6542 72616d68 63202c6b     #3..Benchmark, c
 800ba60:	65746e6f 73207478 63746977 00000068     ontext switch...
 800ba70:	636e6542 72616d68 74202c6b 61657268     Benchmark, threa
 800ba80:	202c7364 6c6c7566 63796320 0000656c     ds, full cycle..
 800ba90:	636e6542 72616d68 74202c6b 61657268     Benchmark, threa
 800baa0:	202c7364 61657263 6f206574 00796c6e     ds, create only.
 800bab0:	636e6542 72616d68 6d202c6b 20737361     Benchmark, mass 
 800bac0:	63736572 75646568 202c656c 68742035     reschedule, 5 th
 800bad0:	64616572 00000073 636e6542 72616d68     reads...Benchmar
 800bae0:	72202c6b 646e756f 626f7220 63206e69     k, round robin c
 800baf0:	65746e6f 73207478 63746977 676e6968     ontext switching
 800bb00:	00000000 636e6542 72616d68 49202c6b     ....Benchmark, I
 800bb10:	51204f2f 65756575 68742073 67756f72     /O Queues throug
 800bb20:	74757068 00000000 636e6542 72616d68     hput....Benchmar
 800bb30:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 800bb40:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 800bb50:	72616d68 73202c6b 70616d65 65726f68     hmark, semaphore
 800bb60:	61772073 732f7469 616e6769 0000006c     s wait/signal...
 800bb70:	636e6542 72616d68 6d202c6b 78657475     Benchmark, mutex
 800bb80:	6c207365 2f6b636f 6f6c6e75 00006b63     es lock/unlock..
 800bb90:	636e6542 72616d68 52202c6b 66204d41     Benchmark, RAM f
 800bba0:	70746f6f 746e6972 00000000 00000000     ootprint........

0800bbb0 <testmtx1.4493>:
 800bbb0:	0800b7fc 08005051 00000000 080024b1     ....QP.......$..

0800bbc0 <_ctype_>:
 800bbc0:	20202000 20202020 28282020 20282828     .         ((((( 
 800bbd0:	20202020 20202020 20202020 20202020                     
 800bbe0:	10108820 10101010 10101010 10101010      ...............
 800bbf0:	04040410 04040404 10040404 10101010     ................
 800bc00:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800bc10:	01010101 01010101 01010101 10101010     ................
 800bc20:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800bc30:	02020202 02020202 02020202 10101010     ................
 800bc40:	00000020 00000000 00000000 00000000      ...............
	...
