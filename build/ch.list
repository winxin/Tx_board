
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000140:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8000142:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000144:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8000146:	460e      	mov	r6, r1
 8000148:	4bbc      	ldr	r3, [pc, #752]	; (800043c <__init_array_end+0x2fc>)
 800014a:	f04f 34ff 	mov.w	r4, #4294967295
 800014e:	691d      	ldr	r5, [r3, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8000150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000154:	611c      	str	r4, [r3, #16]
 8000156:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000158:	68dd      	ldr	r5, [r3, #12]
 800015a:	60dc      	str	r4, [r3, #12]
 800015c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800015e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000160:	4db7      	ldr	r5, [pc, #732]	; (8000440 <__init_array_end+0x300>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000162:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000166:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8000168:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800016a:	4fb6      	ldr	r7, [pc, #728]	; (8000444 <__init_array_end+0x304>)
 800016c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8000170:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000172:	682b      	ldr	r3, [r5, #0]
 8000174:	f8df e340 	ldr.w	lr, [pc, #832]	; 80004b8 <__init_array_end+0x378>
 8000178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800017c:	4cb2      	ldr	r4, [pc, #712]	; (8000448 <__init_array_end+0x308>)
 800017e:	602b      	str	r3, [r5, #0]
 8000180:	b089      	sub	sp, #36	; 0x24
 8000182:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000184:	f85e 3002 	ldr.w	r3, [lr, r2]
 8000188:	2100      	movs	r1, #0
 800018a:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 800018c:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000190:	3001      	adds	r0, #1
 8000192:	2807      	cmp	r0, #7
 8000194:	f102 020c 	add.w	r2, r2, #12
 8000198:	d1f4      	bne.n	8000184 <main+0x44>
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800019a:	f241 080a 	movw	r8, #4106	; 0x100a
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800019e:	f241 0c18 	movw	ip, #4120	; 0x1018
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80001a2:	468e      	mov	lr, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001a4:	4ba9      	ldr	r3, [pc, #676]	; (800044c <__init_array_end+0x30c>)
 80001a6:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001aa:	f8df a290 	ldr.w	sl, [pc, #656]	; 800043c <__init_array_end+0x2fc>
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	f8da 4018 	ldr.w	r4, [sl, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001b4:	4da6      	ldr	r5, [pc, #664]	; (8000450 <__init_array_end+0x310>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001b6:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 80001ba:	f8ca 4018 	str.w	r4, [sl, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80001be:	4ea5      	ldr	r6, [pc, #660]	; (8000454 <__init_array_end+0x314>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001c0:	f46f 4400 	mvn.w	r4, #32768	; 0x8000
 80001c4:	60ec      	str	r4, [r5, #12]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80001c6:	48a4      	ldr	r0, [pc, #656]	; (8000458 <__init_array_end+0x318>)
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80001c8:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 80004bc <__init_array_end+0x37c>
  GPIOB->ODR = config->PBData.odr;
 80001cc:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 80004c0 <__init_array_end+0x380>
  GPIOB->CRH = config->PBData.crh;
 80001d0:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80004c4 <__init_array_end+0x384>
  GPIOB->CRL = config->PBData.crl;
 80001d4:	4ca1      	ldr	r4, [pc, #644]	; (800045c <__init_array_end+0x31c>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80001d6:	606e      	str	r6, [r5, #4]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80001d8:	4ba1      	ldr	r3, [pc, #644]	; (8000460 <__init_array_end+0x320>)
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80001da:	4ea2      	ldr	r6, [pc, #648]	; (8000464 <__init_array_end+0x324>)
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80001dc:	f8c5 9000 	str.w	r9, [r5]
  GPIOB->ODR = config->PBData.odr;
 80001e0:	f8c0 b00c 	str.w	fp, [r0, #12]
  GPIOB->CRH = config->PBData.crh;
 80001e4:	f8c0 a004 	str.w	sl, [r0, #4]
  GPIOB->CRL = config->PBData.crl;
 80001e8:	6004      	str	r4, [r0, #0]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80001ea:	f04f 3088 	mov.w	r0, #2290649224	; 0x88888888

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80001ee:	4c9e      	ldr	r4, [pc, #632]	; (8000468 <__init_array_end+0x328>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80001f0:	60f2      	str	r2, [r6, #12]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001f2:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 80004c8 <__init_array_end+0x388>
  spip->config = NULL;
 80001f6:	6059      	str	r1, [r3, #4]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80001f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80004cc <__init_array_end+0x38c>
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80001fc:	6070      	str	r0, [r6, #4]
#if SPI_USE_WAIT
  spip->thread = NULL;
 80001fe:	6099      	str	r1, [r3, #8]
  GPIOC->CRL = config->PCData.crl;
 8000200:	6030      	str	r0, [r6, #0]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8000202:	4e9a      	ldr	r6, [pc, #616]	; (800046c <__init_array_end+0x32c>)
  GPIOD->ODR = config->PDData.odr;
 8000204:	f8c5 2c0c 	str.w	r2, [r5, #3084]	; 0xc0c
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8000208:	4f99      	ldr	r7, [pc, #612]	; (8000470 <__init_array_end+0x330>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800020a:	6159      	str	r1, [r3, #20]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800020c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 80004d0 <__init_array_end+0x390>
  GPIOD->CRH = config->PDData.crh;
 8000210:	f8c5 0c04 	str.w	r0, [r5, #3076]	; 0xc04

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8000214:	61dc      	str	r4, [r3, #28]
 8000216:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
  GPIOD->CRL = config->PDData.crl;
 800021a:	f8c5 9c00 	str.w	r9, [r5, #3072]	; 0xc00
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800021e:	f8cb 200c 	str.w	r2, [fp, #12]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8000222:	4d94      	ldr	r5, [pc, #592]	; (8000474 <__init_array_end+0x334>)
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  gptp->config = NULL;
 8000224:	6071      	str	r1, [r6, #4]
 8000226:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80004d4 <__init_array_end+0x394>
  GPIOE->CRH = config->PEData.crh;
 800022a:	f8cb 0004 	str.w	r0, [fp, #4]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 800022e:	60f4      	str	r4, [r6, #12]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8000230:	4c91      	ldr	r4, [pc, #580]	; (8000478 <__init_array_end+0x338>)
  GPIOE->CRL = config->PEData.crl;
 8000232:	f8cb 0000 	str.w	r0, [fp]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8000236:	2001      	movs	r0, #1
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8000238:	f8aa 2000 	strh.w	r2, [sl]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800023c:	f103 0b0c 	add.w	fp, r3, #12

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8000240:	f107 0a0c 	add.w	sl, r7, #12
 8000244:	7028      	strb	r0, [r5, #0]
  gptp->config = NULL;
 8000246:	6069      	str	r1, [r5, #4]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8000248:	f8c5 900c 	str.w	r9, [r5, #12]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800024c:	7018      	strb	r0, [r3, #0]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800024e:	7030      	strb	r0, [r6, #0]
 8000250:	f8c3 b010 	str.w	fp, [r3, #16]
 8000254:	f8c3 b00c 	str.w	fp, [r3, #12]
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8000258:	621f      	str	r7, [r3, #32]
 800025a:	f104 0228 	add.w	r2, r4, #40	; 0x28
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800025e:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
 8000262:	f104 0544 	add.w	r5, r4, #68	; 0x44
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8000266:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800026a:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800026e:	7020      	strb	r0, [r4, #0]
  usbp->config       = NULL;
 8000270:	6061      	str	r1, [r4, #4]
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000272:	f842 ef04 	str.w	lr, [r2, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
 8000276:	42aa      	cmp	r2, r5
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 8000278:	f8c2 e01c 	str.w	lr, [r2, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800027c:	f04f 0700 	mov.w	r7, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
 8000280:	d1f7      	bne.n	8000272 <main+0x132>

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000282:	f645 5cbf 	movw	ip, #23999	; 0x5dbf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000286:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800028a:	f64f 01ff 	movw	r1, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800028e:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 800043c <__init_array_end+0x2fc>
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000292:	4a7a      	ldr	r2, [pc, #488]	; (800047c <__init_array_end+0x33c>)
 8000294:	f8de 601c 	ldr.w	r6, [lr, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000298:	4d79      	ldr	r5, [pc, #484]	; (8000480 <__init_array_end+0x340>)
 800029a:	f046 0601 	orr.w	r6, r6, #1
 800029e:	f8ce 601c 	str.w	r6, [lr, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80002a6:	f04f 0801 	mov.w	r8, #1
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80002aa:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80002ae:	f04f 0980 	mov.w	r9, #128	; 0x80

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80002b2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80002b6:	62d8      	str	r0, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80002b8:	619f      	str	r7, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80002ba:	635f      	str	r7, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80002bc:	60df      	str	r7, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80002be:	605f      	str	r7, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80002c0:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80002c4:	f8c3 8000 	str.w	r8, [r3]
 80002c8:	f885 931c 	strb.w	r9, [r5, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80002cc:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80002d0:	602e      	str	r6, [r5, #0]
 80002d2:	6097      	str	r7, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d4:	68d5      	ldr	r5, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80002d6:	4b6b      	ldr	r3, [pc, #428]	; (8000484 <__init_array_end+0x344>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80002d8:	4029      	ands	r1, r5
  reg_value  =  (reg_value                                 |
 80002da:	430b      	orrs	r3, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002dc:	4d6a      	ldr	r5, [pc, #424]	; (8000488 <__init_array_end+0x348>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002de:	60d3      	str	r3, [r2, #12]
 80002e0:	68eb      	ldr	r3, [r5, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80002e2:	496a      	ldr	r1, [pc, #424]	; (800048c <__init_array_end+0x34c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e8:	60eb      	str	r3, [r5, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80002ea:	680b      	ldr	r3, [r1, #0]
 80002ec:	4e68      	ldr	r6, [pc, #416]	; (8000490 <__init_array_end+0x350>)
 80002ee:	ea43 0308 	orr.w	r3, r3, r8
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 80002f2:	84b0      	strh	r0, [r6, #36]	; 0x24
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80002f4:	8127      	strh	r7, [r4, #8]
  usbp->receiving    = 0;
 80002f6:	8167      	strh	r7, [r4, #10]
 80002f8:	6076      	str	r6, [r6, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80002fa:	60b7      	str	r7, [r6, #8]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80002fc:	6176      	str	r6, [r6, #20]
 80002fe:	6136      	str	r6, [r6, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 8000300:	84f7      	strh	r7, [r6, #38]	; 0x26
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000302:	f04f 0e10 	mov.w	lr, #16
 8000306:	600b      	str	r3, [r1, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 8000308:	f106 051c 	add.w	r5, r6, #28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800030c:	f04f 33ff 	mov.w	r3, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000310:	a802      	add	r0, sp, #8

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000312:	f04f 0a00 	mov.w	sl, #0
 8000316:	f04f 0b00 	mov.w	fp, #0
 800031a:	f04f 0920 	mov.w	r9, #32
 800031e:	f882 e01f 	strb.w	lr, [r2, #31]
 8000322:	6235      	str	r5, [r6, #32]
 8000324:	f882 9022 	strb.w	r9, [r2, #34]	; 0x22
 8000328:	61f5      	str	r5, [r6, #28]
 800032a:	6036      	str	r6, [r6, #0]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 800032c:	6737      	str	r7, [r6, #112]	; 0x70

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800032e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000332:	9302      	str	r3, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
 8000334:	9703      	str	r7, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8000336:	9704      	str	r7, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8000338:	9705      	str	r7, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800033a:	f008 fde9 	bl	8008f10 <chTMStartMeasurementX.constprop.66>
  chTMStopMeasurementX(&tm);
 800033e:	a802      	add	r0, sp, #8
 8000340:	f007 f826 	bl	8007390 <chTMStopMeasurementX>
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 8000344:	4b53      	ldr	r3, [pc, #332]	; (8000494 <__init_array_end+0x354>)
  ch.tm.offset = tm.last;
 8000346:	9904      	ldr	r1, [sp, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000348:	f8d6 e014 	ldr.w	lr, [r6, #20]
 800034c:	6731      	str	r1, [r6, #112]	; 0x70
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800034e:	4852      	ldr	r0, [pc, #328]	; (8000498 <__init_array_end+0x358>)
 8000350:	f103 0110 	add.w	r1, r3, #16
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000354:	4a51      	ldr	r2, [pc, #324]	; (800049c <__init_array_end+0x35c>)
 8000356:	f106 052c 	add.w	r5, r6, #44	; 0x2c
 800035a:	6159      	str	r1, [r3, #20]
 800035c:	6119      	str	r1, [r3, #16]
 800035e:	f8df b178 	ldr.w	fp, [pc, #376]	; 80004d8 <__init_array_end+0x398>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000362:	2140      	movs	r1, #64	; 0x40
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000364:	f8df a174 	ldr.w	sl, [pc, #372]	; 80004dc <__init_array_end+0x39c>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000368:	f8df c174 	ldr.w	ip, [pc, #372]	; 80004e0 <__init_array_end+0x3a0>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800036c:	f8c6 e040 	str.w	lr, [r6, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000370:	6371      	str	r1, [r6, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8000372:	66b1      	str	r1, [r6, #104]	; 0x68
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000374:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000378:	f022 0207 	bic.w	r2, r2, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800037c:	f886 7049 	strb.w	r7, [r6, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000380:	6677      	str	r7, [r6, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8000382:	6637      	str	r7, [r6, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8000384:	f886 804a 	strb.w	r8, [r6, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8000388:	6477      	str	r7, [r6, #68]	; 0x44
  REG_INSERT(tp);
 800038a:	63f6      	str	r6, [r6, #60]	; 0x3c
 800038c:	6175      	str	r5, [r6, #20]
 800038e:	619f      	str	r7, [r3, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000390:	f106 0150 	add.w	r1, r6, #80	; 0x50
 8000394:	f8ce 5010 	str.w	r5, [lr, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000398:	f106 0e54 	add.w	lr, r6, #84	; 0x54
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800039c:	f8ca 0000 	str.w	r0, [sl]
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 80003a0:	609f      	str	r7, [r3, #8]
  default_heap.h_free.h.size = 0;
 80003a2:	60df      	str	r7, [r3, #12]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80003a4:	61b5      	str	r5, [r6, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80003a6:	f886 8048 	strb.w	r8, [r6, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80003aa:	6531      	str	r1, [r6, #80]	; 0x50
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 80003ac:	f8c3 b000 	str.w	fp, [r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80003b0:	f8c6 e058 	str.w	lr, [r6, #88]	; 0x58
 80003b4:	f8c6 e054 	str.w	lr, [r6, #84]	; 0x54
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80003b8:	f8cc 2000 	str.w	r2, [ip]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80003bc:	f04f 0a02 	mov.w	sl, #2

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003c0:	f387 8811 	msr	BASEPRI, r7
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80003c4:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80003c6:	4a36      	ldr	r2, [pc, #216]	; (80004a0 <__init_array_end+0x360>)
 80003c8:	69b3      	ldr	r3, [r6, #24]
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80003ca:	4d36      	ldr	r5, [pc, #216]	; (80004a4 <__init_array_end+0x364>)
 80003cc:	619a      	str	r2, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80003ce:	f106 0078 	add.w	r0, r6, #120	; 0x78
 80003d2:	4642      	mov	r2, r8
 80003d4:	9700      	str	r7, [sp, #0]
 80003d6:	21d8      	movs	r1, #216	; 0xd8
 80003d8:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <__init_array_end+0x368>)
 80003da:	f006 fd61 	bl	8006ea0 <chThdCreateStatic>
 80003de:	4629      	mov	r1, r5
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;/* Disable the JTAG but keep SWD in operation */
 80003e0:	4832      	ldr	r0, [pc, #200]	; (80004ac <__init_array_end+0x36c>)
 80003e2:	4a33      	ldr	r2, [pc, #204]	; (80004b0 <__init_array_end+0x370>)
 80003e4:	6843      	ldr	r3, [r0, #4]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80003e6:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 80004e4 <__init_array_end+0x3a4>

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80003ea:	4e32      	ldr	r6, [pc, #200]	; (80004b4 <__init_array_end+0x374>)
 80003ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f0:	6043      	str	r3, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80003f2:	f44f 7c80 	mov.w	ip, #256	; 0x100
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80003f6:	f505 73aa 	add.w	r3, r5, #340	; 0x154
 80003fa:	f841 2b04 	str.w	r2, [r1], #4
 80003fe:	f105 000c 	add.w	r0, r5, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000402:	f105 0254 	add.w	r2, r5, #84	; 0x54
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000406:	f505 7b15 	add.w	fp, r5, #596	; 0x254
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800040a:	f885 8008 	strb.w	r8, [r5, #8]
 800040e:	f105 0830 	add.w	r8, r5, #48	; 0x30
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000412:	616f      	str	r7, [r5, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 8000414:	62ed      	str	r5, [r5, #44]	; 0x2c
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 8000416:	652d      	str	r5, [r5, #80]	; 0x50

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8000418:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800041c:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000420:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
  oqp->q_notify = onfy;
 8000424:	64ee      	str	r6, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8000426:	6069      	str	r1, [r5, #4]
 8000428:	6128      	str	r0, [r5, #16]
 800042a:	60e8      	str	r0, [r5, #12]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 800042c:	622a      	str	r2, [r5, #32]
 800042e:	626a      	str	r2, [r5, #36]	; 0x24
 8000430:	61aa      	str	r2, [r5, #24]
  iqp->q_top = bp + size;
 8000432:	61eb      	str	r3, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8000434:	646b      	str	r3, [r5, #68]	; 0x44
 8000436:	64ab      	str	r3, [r5, #72]	; 0x48
 8000438:	e056      	b.n	80004e8 <__init_array_end+0x3a8>
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40007000 	.word	0x40007000
 8000444:	20002020 	.word	0x20002020
 8000448:	20001fe8 	.word	0x20001fe8
 800044c:	40020000 	.word	0x40020000
 8000450:	40010800 	.word	0x40010800
 8000454:	288884b8 	.word	0x288884b8
 8000458:	40010c00 	.word	0x40010c00
 800045c:	88228888 	.word	0x88228888
 8000460:	20001fa4 	.word	0x20001fa4
 8000464:	40011000 	.word	0x40011000
 8000468:	40013000 	.word	0x40013000
 800046c:	20001f94 	.word	0x20001f94
 8000470:	0800991c 	.word	0x0800991c
 8000474:	20001794 	.word	0x20001794
 8000478:	20001200 	.word	0x20001200
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	e000e100 	.word	0xe000e100
 8000484:	05fa0300 	.word	0x05fa0300
 8000488:	e000edf0 	.word	0xe000edf0
 800048c:	e0001000 	.word	0xe0001000
 8000490:	20001e40 	.word	0x20001e40
 8000494:	20001508 	.word	0x20001508
 8000498:	2000202b 	.word	0x2000202b
 800049c:	20005000 	.word	0x20005000
 80004a0:	08009980 	.word	0x08009980
 80004a4:	2000128c 	.word	0x2000128c
 80004a8:	08006891 	.word	0x08006891
 80004ac:	40010000 	.word	0x40010000
 80004b0:	08009890 	.word	0x08009890
 80004b4:	08002aa1 	.word	0x08002aa1
 80004b8:	08009910 	.word	0x08009910
 80004bc:	b8b34b88 	.word	0xb8b34b88
 80004c0:	ffffedef 	.word	0xffffedef
 80004c4:	88828838 	.word	0x88828838
 80004c8:	40011800 	.word	0x40011800
 80004cc:	88888844 	.word	0x88888844
 80004d0:	20001288 	.word	0x20001288
 80004d4:	40000800 	.word	0x40000800
 80004d8:	08005bf1 	.word	0x08005bf1
 80004dc:	20000d34 	.word	0x20000d34
 80004e0:	20000d30 	.word	0x20000d30
 80004e4:	080033e1 	.word	0x080033e1
 80004e8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80004ea:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
 80004ee:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004f2:	f389 8811 	msr	BASEPRI, r9
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 80004f6:	4b53      	ldr	r3, [pc, #332]	; (8000644 <__init_array_end+0x504>)
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
 80004f8:	62e5      	str	r5, [r4, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1] = sdup;
 80004fa:	64a5      	str	r5, [r4, #72]	; 0x48
  usbp->in_params[config->int_in - 1]    = sdup;
 80004fc:	6325      	str	r5, [r4, #48]	; 0x30
  sdup->config = config;
  sdup->state = SDU_READY;
 80004fe:	f885 a008 	strb.w	sl, [r5, #8]
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 8000502:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
 8000506:	f387 8811 	msr	BASEPRI, r7
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800050a:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <__init_array_end+0x508>)
 800050c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000510:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8000512:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000516:	f006 fdd3 	bl	80070c0 <chThdSleep>
 800051a:	f389 8811 	msr	BASEPRI, r9
 800051e:	484b      	ldr	r0, [pc, #300]	; (800064c <__init_array_end+0x50c>)
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8000520:	463b      	mov	r3, r7
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8000522:	4601      	mov	r1, r0
 8000524:	4a4a      	ldr	r2, [pc, #296]	; (8000650 <__init_array_end+0x510>)
 8000526:	eb00 0809 	add.w	r8, r0, r9
 800052a:	6062      	str	r2, [r4, #4]
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 800052c:	f841 3f04 	str.w	r3, [r1, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000530:	4541      	cmp	r1, r8
    usbp->epc[i] = NULL;
 8000532:	f04f 0200 	mov.w	r2, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000536:	d1f9      	bne.n	800052c <__init_array_end+0x3ec>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8000538:	f894 c000 	ldrb.w	ip, [r4]
 800053c:	4b45      	ldr	r3, [pc, #276]	; (8000654 <__init_array_end+0x514>)
 800053e:	f1bc 0f01 	cmp.w	ip, #1
 8000542:	d046      	beq.n	80005d2 <__init_array_end+0x492>
    usbp->epc[i] = NULL;
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8000544:	2302      	movs	r3, #2
 8000546:	7023      	strb	r3, [r4, #0]
 8000548:	2400      	movs	r4, #0
 800054a:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <__init_array_end+0x508>)
 8000550:	4e41      	ldr	r6, [pc, #260]	; (8000658 <__init_array_end+0x518>)
 8000552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4f40      	ldr	r7, [pc, #256]	; (800065c <__init_array_end+0x51c>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800055a:	9400      	str	r4, [sp, #0]
 800055c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000560:	2240      	movs	r2, #64	; 0x40
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <__init_array_end+0x520>)
 8000564:	6036      	str	r6, [r6, #0]
 8000566:	483f      	ldr	r0, [pc, #252]	; (8000664 <__init_array_end+0x524>)
 8000568:	4e3f      	ldr	r6, [pc, #252]	; (8000668 <__init_array_end+0x528>)
 800056a:	f006 fc99 	bl	8006ea0 <chThdCreateStatic>
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 800056e:	f04f 0e01 	mov.w	lr, #1
	chBSemObjectInit(&Silabs_busy,FALSE);/*Init it as not taken*/
	chBSemObjectInit(&Silabs_callback,FALSE);/*Init it as not taken*/
	/*
	* Creates the thread. Thread has priority slightly above normal and takes no argument
	*/
	return chThdCreateStatic(waThreadSI, sizeof(waThreadSI), NORMALPRIO+1, SI_Thread, (void*)NULL);
 8000572:	9400      	str	r4, [sp, #0]
 8000574:	483d      	ldr	r0, [pc, #244]	; (800066c <__init_array_end+0x52c>)
 8000576:	f8c6 e008 	str.w	lr, [r6, #8]
 800057a:	6076      	str	r6, [r6, #4]
 800057c:	6036      	str	r6, [r6, #0]
 800057e:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000582:	2241      	movs	r2, #65	; 0x41
 8000584:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <__init_array_end+0x530>)
 8000586:	607f      	str	r7, [r7, #4]
 8000588:	603f      	str	r7, [r7, #0]
 800058a:	f8c7 e008 	str.w	lr, [r7, #8]
 800058e:	f006 fc87 	bl	8006ea0 <chThdCreateStatic>
 8000592:	4e38      	ldr	r6, [pc, #224]	; (8000674 <__init_array_end+0x534>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000594:	b144      	cbz	r4, 80005a8 <__init_array_end+0x468>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8000596:	7f23      	ldrb	r3, [r4, #28]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d015      	beq.n	80005c8 <__init_array_end+0x488>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 800059c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a0:	f006 fd8e 	bl	80070c0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80005a4:	2c00      	cmp	r4, #0
 80005a6:	d1f6      	bne.n	8000596 <__init_array_end+0x456>
 80005a8:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d1f0      	bne.n	8000596 <__init_array_end+0x456>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 80005b4:	4620      	mov	r0, r4
 80005b6:	9600      	str	r6, [sp, #0]
 80005b8:	f640 01c8 	movw	r1, #2248	; 0x8c8
 80005bc:	2240      	movs	r2, #64	; 0x40
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <__init_array_end+0x538>)
 80005c0:	f006 fc26 	bl	8006e10 <chThdCreateFromHeap>
 80005c4:	4604      	mov	r4, r0
 80005c6:	e7e9      	b.n	800059c <__init_array_end+0x45c>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 80005c8:	4620      	mov	r0, r4
 80005ca:	f006 fa89 	bl	8006ae0 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80005ce:	2400      	movs	r4, #0
 80005d0:	e7e4      	b.n	800059c <__init_array_end+0x45c>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80005d2:	4692      	mov	sl, r2
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005d4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000684 <__init_array_end+0x544>
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80005d8:	4f28      	ldr	r7, [pc, #160]	; (800067c <__init_array_end+0x53c>)
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005da:	f8d9 601c 	ldr.w	r6, [r9, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005de:	4928      	ldr	r1, [pc, #160]	; (8000680 <__init_array_end+0x540>)
 80005e0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 80005e4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  usbp->address       = 0;
 80005e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 80005ec:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  usbp->transmitting  = 0;
 80005f0:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 80005f2:	815a      	strh	r2, [r3, #10]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005f4:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80005f8:	f8c9 601c 	str.w	r6, [r9, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005fc:	f04f 0bd0 	mov.w	fp, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8000600:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000604:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000608:	f04f 09e0 	mov.w	r9, #224	; 0xe0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800060c:	f04f 0c02 	mov.w	ip, #2
 8000610:	f881 b313 	strb.w	fp, [r1, #787]	; 0x313
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000614:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000618:	f8c1 e000 	str.w	lr, [r1]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800061c:	f881 9314 	strb.w	r9, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000620:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000624:	600e      	str	r6, [r1, #0]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8000626:	643a      	str	r2, [r7, #64]	; 0x40
 8000628:	f883 c000 	strb.w	ip, [r3]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 800062c:	f840 af04 	str.w	sl, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000630:	4540      	cmp	r0, r8
    usbp->epc[i] = NULL;
 8000632:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000636:	d1f9      	bne.n	800062c <__init_array_end+0x4ec>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <__init_array_end+0x514>)
  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800063a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800063e:	f007 f9bf 	bl	80079c0 <usb_lld_reset>
 8000642:	e77f      	b.n	8000544 <__init_array_end+0x404>
 8000644:	08009e20 	.word	0x08009e20
 8000648:	40010c00 	.word	0x40010c00
 800064c:	20001208 	.word	0x20001208
 8000650:	08009970 	.word	0x08009970
 8000654:	20001200 	.word	0x20001200
 8000658:	20001284 	.word	0x20001284
 800065c:	200017a4 	.word	0x200017a4
 8000660:	08002121 	.word	0x08002121
 8000664:	20001540 	.word	0x20001540
 8000668:	200017b4 	.word	0x200017b4
 800066c:	20000d38 	.word	0x20000d38
 8000670:	08008c51 	.word	0x08008c51
 8000674:	08009ef0 	.word	0x08009ef0
 8000678:	08007f31 	.word	0x08007f31
 800067c:	40005c00 	.word	0x40005c00
 8000680:	e000e100 	.word	0xe000e100
 8000684:	40021000 	.word	0x40021000
 8000688:	f3af 8000 	nop.w
 800068c:	f3af 8000 	nop.w

08000690 <_port_switch>:
 8000690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000694:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000698:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006a0 <_port_thread_start>:
 80006a0:	2300      	movs	r3, #0
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	4628      	mov	r0, r5
 80006a8:	47a0      	blx	r4
 80006aa:	f006 fe69 	bl	8007380 <chThdExit>

080006ae <_port_switch_from_isr>:
 80006ae:	f006 faff 	bl	8006cb0 <chSchDoReschedule>

080006b2 <_port_exit_from_isr>:
 80006b2:	df00      	svc	0
 80006b4:	e7fe      	b.n	80006b4 <_port_exit_from_isr+0x2>
	...

080006c0 <__aeabi_drsub>:
 80006c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	e002      	b.n	80006cc <__adddf3>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dsub>:
 80006c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006cc <__adddf3>:
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006d6:	ea94 0f05 	teq	r4, r5
 80006da:	bf08      	it	eq
 80006dc:	ea90 0f02 	teqeq	r0, r2
 80006e0:	bf1f      	itttt	ne
 80006e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f2:	f000 80e2 	beq.w	80008ba <__adddf3+0x1ee>
 80006f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80006fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80006fe:	bfb8      	it	lt
 8000700:	426d      	neglt	r5, r5
 8000702:	dd0c      	ble.n	800071e <__adddf3+0x52>
 8000704:	442c      	add	r4, r5
 8000706:	ea80 0202 	eor.w	r2, r0, r2
 800070a:	ea81 0303 	eor.w	r3, r1, r3
 800070e:	ea82 0000 	eor.w	r0, r2, r0
 8000712:	ea83 0101 	eor.w	r1, r3, r1
 8000716:	ea80 0202 	eor.w	r2, r0, r2
 800071a:	ea81 0303 	eor.w	r3, r1, r3
 800071e:	2d36      	cmp	r5, #54	; 0x36
 8000720:	bf88      	it	hi
 8000722:	bd30      	pophi	{r4, r5, pc}
 8000724:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000728:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800072c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000730:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000734:	d002      	beq.n	800073c <__adddf3+0x70>
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000740:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000744:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000748:	d002      	beq.n	8000750 <__adddf3+0x84>
 800074a:	4252      	negs	r2, r2
 800074c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000750:	ea94 0f05 	teq	r4, r5
 8000754:	f000 80a7 	beq.w	80008a6 <__adddf3+0x1da>
 8000758:	f1a4 0401 	sub.w	r4, r4, #1
 800075c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000760:	db0d      	blt.n	800077e <__adddf3+0xb2>
 8000762:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000766:	fa22 f205 	lsr.w	r2, r2, r5
 800076a:	1880      	adds	r0, r0, r2
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	fa03 f20e 	lsl.w	r2, r3, lr
 8000774:	1880      	adds	r0, r0, r2
 8000776:	fa43 f305 	asr.w	r3, r3, r5
 800077a:	4159      	adcs	r1, r3
 800077c:	e00e      	b.n	800079c <__adddf3+0xd0>
 800077e:	f1a5 0520 	sub.w	r5, r5, #32
 8000782:	f10e 0e20 	add.w	lr, lr, #32
 8000786:	2a01      	cmp	r2, #1
 8000788:	fa03 fc0e 	lsl.w	ip, r3, lr
 800078c:	bf28      	it	cs
 800078e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000792:	fa43 f305 	asr.w	r3, r3, r5
 8000796:	18c0      	adds	r0, r0, r3
 8000798:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800079c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a0:	d507      	bpl.n	80007b2 <__adddf3+0xe6>
 80007a2:	f04f 0e00 	mov.w	lr, #0
 80007a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80007aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80007ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80007b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007b6:	d31b      	bcc.n	80007f0 <__adddf3+0x124>
 80007b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007bc:	d30c      	bcc.n	80007d8 <__adddf3+0x10c>
 80007be:	0849      	lsrs	r1, r1, #1
 80007c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80007c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007c8:	f104 0401 	add.w	r4, r4, #1
 80007cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007d4:	f080 809a 	bcs.w	800090c <__adddf3+0x240>
 80007d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007e2:	f150 0000 	adcs.w	r0, r0, #0
 80007e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ea:	ea41 0105 	orr.w	r1, r1, r5
 80007ee:	bd30      	pop	{r4, r5, pc}
 80007f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80007f4:	4140      	adcs	r0, r0
 80007f6:	eb41 0101 	adc.w	r1, r1, r1
 80007fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000802:	d1e9      	bne.n	80007d8 <__adddf3+0x10c>
 8000804:	f091 0f00 	teq	r1, #0
 8000808:	bf04      	itt	eq
 800080a:	4601      	moveq	r1, r0
 800080c:	2000      	moveq	r0, #0
 800080e:	fab1 f381 	clz	r3, r1
 8000812:	bf08      	it	eq
 8000814:	3320      	addeq	r3, #32
 8000816:	f1a3 030b 	sub.w	r3, r3, #11
 800081a:	f1b3 0220 	subs.w	r2, r3, #32
 800081e:	da0c      	bge.n	800083a <__adddf3+0x16e>
 8000820:	320c      	adds	r2, #12
 8000822:	dd08      	ble.n	8000836 <__adddf3+0x16a>
 8000824:	f102 0c14 	add.w	ip, r2, #20
 8000828:	f1c2 020c 	rsb	r2, r2, #12
 800082c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000830:	fa21 f102 	lsr.w	r1, r1, r2
 8000834:	e00c      	b.n	8000850 <__adddf3+0x184>
 8000836:	f102 0214 	add.w	r2, r2, #20
 800083a:	bfd8      	it	le
 800083c:	f1c2 0c20 	rsble	ip, r2, #32
 8000840:	fa01 f102 	lsl.w	r1, r1, r2
 8000844:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000848:	bfdc      	itt	le
 800084a:	ea41 010c 	orrle.w	r1, r1, ip
 800084e:	4090      	lslle	r0, r2
 8000850:	1ae4      	subs	r4, r4, r3
 8000852:	bfa2      	ittt	ge
 8000854:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000858:	4329      	orrge	r1, r5
 800085a:	bd30      	popge	{r4, r5, pc}
 800085c:	ea6f 0404 	mvn.w	r4, r4
 8000860:	3c1f      	subs	r4, #31
 8000862:	da1c      	bge.n	800089e <__adddf3+0x1d2>
 8000864:	340c      	adds	r4, #12
 8000866:	dc0e      	bgt.n	8000886 <__adddf3+0x1ba>
 8000868:	f104 0414 	add.w	r4, r4, #20
 800086c:	f1c4 0220 	rsb	r2, r4, #32
 8000870:	fa20 f004 	lsr.w	r0, r0, r4
 8000874:	fa01 f302 	lsl.w	r3, r1, r2
 8000878:	ea40 0003 	orr.w	r0, r0, r3
 800087c:	fa21 f304 	lsr.w	r3, r1, r4
 8000880:	ea45 0103 	orr.w	r1, r5, r3
 8000884:	bd30      	pop	{r4, r5, pc}
 8000886:	f1c4 040c 	rsb	r4, r4, #12
 800088a:	f1c4 0220 	rsb	r2, r4, #32
 800088e:	fa20 f002 	lsr.w	r0, r0, r2
 8000892:	fa01 f304 	lsl.w	r3, r1, r4
 8000896:	ea40 0003 	orr.w	r0, r0, r3
 800089a:	4629      	mov	r1, r5
 800089c:	bd30      	pop	{r4, r5, pc}
 800089e:	fa21 f004 	lsr.w	r0, r1, r4
 80008a2:	4629      	mov	r1, r5
 80008a4:	bd30      	pop	{r4, r5, pc}
 80008a6:	f094 0f00 	teq	r4, #0
 80008aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008ae:	bf06      	itte	eq
 80008b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80008b4:	3401      	addeq	r4, #1
 80008b6:	3d01      	subne	r5, #1
 80008b8:	e74e      	b.n	8000758 <__adddf3+0x8c>
 80008ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008be:	bf18      	it	ne
 80008c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008c4:	d029      	beq.n	800091a <__adddf3+0x24e>
 80008c6:	ea94 0f05 	teq	r4, r5
 80008ca:	bf08      	it	eq
 80008cc:	ea90 0f02 	teqeq	r0, r2
 80008d0:	d005      	beq.n	80008de <__adddf3+0x212>
 80008d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80008d6:	bf04      	itt	eq
 80008d8:	4619      	moveq	r1, r3
 80008da:	4610      	moveq	r0, r2
 80008dc:	bd30      	pop	{r4, r5, pc}
 80008de:	ea91 0f03 	teq	r1, r3
 80008e2:	bf1e      	ittt	ne
 80008e4:	2100      	movne	r1, #0
 80008e6:	2000      	movne	r0, #0
 80008e8:	bd30      	popne	{r4, r5, pc}
 80008ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008ee:	d105      	bne.n	80008fc <__adddf3+0x230>
 80008f0:	0040      	lsls	r0, r0, #1
 80008f2:	4149      	adcs	r1, r1
 80008f4:	bf28      	it	cs
 80008f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80008fa:	bd30      	pop	{r4, r5, pc}
 80008fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000900:	bf3c      	itt	cc
 8000902:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000906:	bd30      	popcc	{r4, r5, pc}
 8000908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800090c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000910:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800091e:	bf1a      	itte	ne
 8000920:	4619      	movne	r1, r3
 8000922:	4610      	movne	r0, r2
 8000924:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000928:	bf1c      	itt	ne
 800092a:	460b      	movne	r3, r1
 800092c:	4602      	movne	r2, r0
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	bf06      	itte	eq
 8000934:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000938:	ea91 0f03 	teqeq	r1, r3
 800093c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000940:	bd30      	pop	{r4, r5, pc}
 8000942:	bf00      	nop

08000944 <__aeabi_ui2d>:
 8000944:	f090 0f00 	teq	r0, #0
 8000948:	bf04      	itt	eq
 800094a:	2100      	moveq	r1, #0
 800094c:	4770      	bxeq	lr
 800094e:	b530      	push	{r4, r5, lr}
 8000950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000958:	f04f 0500 	mov.w	r5, #0
 800095c:	f04f 0100 	mov.w	r1, #0
 8000960:	e750      	b.n	8000804 <__adddf3+0x138>
 8000962:	bf00      	nop

08000964 <__aeabi_i2d>:
 8000964:	f090 0f00 	teq	r0, #0
 8000968:	bf04      	itt	eq
 800096a:	2100      	moveq	r1, #0
 800096c:	4770      	bxeq	lr
 800096e:	b530      	push	{r4, r5, lr}
 8000970:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000974:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000978:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800097c:	bf48      	it	mi
 800097e:	4240      	negmi	r0, r0
 8000980:	f04f 0100 	mov.w	r1, #0
 8000984:	e73e      	b.n	8000804 <__adddf3+0x138>
 8000986:	bf00      	nop

08000988 <__aeabi_f2d>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800098e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000992:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000996:	bf1f      	itttt	ne
 8000998:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800099c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80009a4:	4770      	bxne	lr
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	bf14      	ite	ne
 80009ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009b0:	4770      	bxeq	lr
 80009b2:	b530      	push	{r4, r5, lr}
 80009b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80009b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009c0:	e720      	b.n	8000804 <__adddf3+0x138>
 80009c2:	bf00      	nop

080009c4 <__aeabi_ul2d>:
 80009c4:	ea50 0201 	orrs.w	r2, r0, r1
 80009c8:	bf08      	it	eq
 80009ca:	4770      	bxeq	lr
 80009cc:	b530      	push	{r4, r5, lr}
 80009ce:	f04f 0500 	mov.w	r5, #0
 80009d2:	e00a      	b.n	80009ea <__aeabi_l2d+0x16>

080009d4 <__aeabi_l2d>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	b530      	push	{r4, r5, lr}
 80009de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009e2:	d502      	bpl.n	80009ea <__aeabi_l2d+0x16>
 80009e4:	4240      	negs	r0, r0
 80009e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80009f6:	f43f aedc 	beq.w	80007b2 <__adddf3+0xe6>
 80009fa:	f04f 0203 	mov.w	r2, #3
 80009fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a02:	bf18      	it	ne
 8000a04:	3203      	addne	r2, #3
 8000a06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a0a:	bf18      	it	ne
 8000a0c:	3203      	addne	r2, #3
 8000a0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a22:	ea40 000e 	orr.w	r0, r0, lr
 8000a26:	fa21 f102 	lsr.w	r1, r1, r2
 8000a2a:	4414      	add	r4, r2
 8000a2c:	e6c1      	b.n	80007b2 <__adddf3+0xe6>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dmul>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a3e:	bf1d      	ittte	ne
 8000a40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a44:	ea94 0f0c 	teqne	r4, ip
 8000a48:	ea95 0f0c 	teqne	r5, ip
 8000a4c:	f000 f8de 	bleq	8000c0c <__aeabi_dmul+0x1dc>
 8000a50:	442c      	add	r4, r5
 8000a52:	ea81 0603 	eor.w	r6, r1, r3
 8000a56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a62:	bf18      	it	ne
 8000a64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a70:	d038      	beq.n	8000ae4 <__aeabi_dmul+0xb4>
 8000a72:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a76:	f04f 0500 	mov.w	r5, #0
 8000a7a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000a82:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a86:	f04f 0600 	mov.w	r6, #0
 8000a8a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a8e:	f09c 0f00 	teq	ip, #0
 8000a92:	bf18      	it	ne
 8000a94:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000aa0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000aa4:	d204      	bcs.n	8000ab0 <__aeabi_dmul+0x80>
 8000aa6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000aaa:	416d      	adcs	r5, r5
 8000aac:	eb46 0606 	adc.w	r6, r6, r6
 8000ab0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000ab4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000ab8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000abc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000ac0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ac4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ac8:	bf88      	it	hi
 8000aca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ace:	d81e      	bhi.n	8000b0e <__aeabi_dmul+0xde>
 8000ad0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ada:	f150 0000 	adcs.w	r0, r0, #0
 8000ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ae8:	ea46 0101 	orr.w	r1, r6, r1
 8000aec:	ea40 0002 	orr.w	r0, r0, r2
 8000af0:	ea81 0103 	eor.w	r1, r1, r3
 8000af4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000af8:	bfc2      	ittt	gt
 8000afa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000afe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b02:	bd70      	popgt	{r4, r5, r6, pc}
 8000b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b08:	f04f 0e00 	mov.w	lr, #0
 8000b0c:	3c01      	subs	r4, #1
 8000b0e:	f300 80ab 	bgt.w	8000c68 <__aeabi_dmul+0x238>
 8000b12:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b16:	bfde      	ittt	le
 8000b18:	2000      	movle	r0, #0
 8000b1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000b1e:	bd70      	pople	{r4, r5, r6, pc}
 8000b20:	f1c4 0400 	rsb	r4, r4, #0
 8000b24:	3c20      	subs	r4, #32
 8000b26:	da35      	bge.n	8000b94 <__aeabi_dmul+0x164>
 8000b28:	340c      	adds	r4, #12
 8000b2a:	dc1b      	bgt.n	8000b64 <__aeabi_dmul+0x134>
 8000b2c:	f104 0414 	add.w	r4, r4, #20
 8000b30:	f1c4 0520 	rsb	r5, r4, #32
 8000b34:	fa00 f305 	lsl.w	r3, r0, r5
 8000b38:	fa20 f004 	lsr.w	r0, r0, r4
 8000b3c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b40:	ea40 0002 	orr.w	r0, r0, r2
 8000b44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000b48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b50:	fa21 f604 	lsr.w	r6, r1, r4
 8000b54:	eb42 0106 	adc.w	r1, r2, r6
 8000b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b5c:	bf08      	it	eq
 8000b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f1c4 040c 	rsb	r4, r4, #12
 8000b68:	f1c4 0520 	rsb	r5, r4, #32
 8000b6c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b70:	fa20 f005 	lsr.w	r0, r0, r5
 8000b74:	fa01 f204 	lsl.w	r2, r1, r4
 8000b78:	ea40 0002 	orr.w	r0, r0, r2
 8000b7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b84:	f141 0100 	adc.w	r1, r1, #0
 8000b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b8c:	bf08      	it	eq
 8000b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f1c4 0520 	rsb	r5, r4, #32
 8000b98:	fa00 f205 	lsl.w	r2, r0, r5
 8000b9c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ba0:	fa20 f304 	lsr.w	r3, r0, r4
 8000ba4:	fa01 f205 	lsl.w	r2, r1, r5
 8000ba8:	ea43 0302 	orr.w	r3, r3, r2
 8000bac:	fa21 f004 	lsr.w	r0, r1, r4
 8000bb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000bb4:	fa21 f204 	lsr.w	r2, r1, r4
 8000bb8:	ea20 0002 	bic.w	r0, r0, r2
 8000bbc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bc4:	bf08      	it	eq
 8000bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f094 0f00 	teq	r4, #0
 8000bd0:	d10f      	bne.n	8000bf2 <__aeabi_dmul+0x1c2>
 8000bd2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000bd6:	0040      	lsls	r0, r0, #1
 8000bd8:	eb41 0101 	adc.w	r1, r1, r1
 8000bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be0:	bf08      	it	eq
 8000be2:	3c01      	subeq	r4, #1
 8000be4:	d0f7      	beq.n	8000bd6 <__aeabi_dmul+0x1a6>
 8000be6:	ea41 0106 	orr.w	r1, r1, r6
 8000bea:	f095 0f00 	teq	r5, #0
 8000bee:	bf18      	it	ne
 8000bf0:	4770      	bxne	lr
 8000bf2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000bf6:	0052      	lsls	r2, r2, #1
 8000bf8:	eb43 0303 	adc.w	r3, r3, r3
 8000bfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c00:	bf08      	it	eq
 8000c02:	3d01      	subeq	r5, #1
 8000c04:	d0f7      	beq.n	8000bf6 <__aeabi_dmul+0x1c6>
 8000c06:	ea43 0306 	orr.w	r3, r3, r6
 8000c0a:	4770      	bx	lr
 8000c0c:	ea94 0f0c 	teq	r4, ip
 8000c10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c14:	bf18      	it	ne
 8000c16:	ea95 0f0c 	teqne	r5, ip
 8000c1a:	d00c      	beq.n	8000c36 <__aeabi_dmul+0x206>
 8000c1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c20:	bf18      	it	ne
 8000c22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c26:	d1d1      	bne.n	8000bcc <__aeabi_dmul+0x19c>
 8000c28:	ea81 0103 	eor.w	r1, r1, r3
 8000c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
 8000c36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c3a:	bf06      	itte	eq
 8000c3c:	4610      	moveq	r0, r2
 8000c3e:	4619      	moveq	r1, r3
 8000c40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c44:	d019      	beq.n	8000c7a <__aeabi_dmul+0x24a>
 8000c46:	ea94 0f0c 	teq	r4, ip
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dmul+0x222>
 8000c4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c50:	d113      	bne.n	8000c7a <__aeabi_dmul+0x24a>
 8000c52:	ea95 0f0c 	teq	r5, ip
 8000c56:	d105      	bne.n	8000c64 <__aeabi_dmul+0x234>
 8000c58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c5c:	bf1c      	itt	ne
 8000c5e:	4610      	movne	r0, r2
 8000c60:	4619      	movne	r1, r3
 8000c62:	d10a      	bne.n	8000c7a <__aeabi_dmul+0x24a>
 8000c64:	ea81 0103 	eor.w	r1, r1, r3
 8000c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c74:	f04f 0000 	mov.w	r0, #0
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
 8000c7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000c82:	bd70      	pop	{r4, r5, r6, pc}

08000c84 <__aeabi_ddiv>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c92:	bf1d      	ittte	ne
 8000c94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c98:	ea94 0f0c 	teqne	r4, ip
 8000c9c:	ea95 0f0c 	teqne	r5, ip
 8000ca0:	f000 f8a7 	bleq	8000df2 <__aeabi_ddiv+0x16e>
 8000ca4:	eba4 0405 	sub.w	r4, r4, r5
 8000ca8:	ea81 0e03 	eor.w	lr, r1, r3
 8000cac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000cb4:	f000 8088 	beq.w	8000dc8 <__aeabi_ddiv+0x144>
 8000cb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000cbc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000cc0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000cc4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000cc8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ccc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000cd0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000cd4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000cd8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000cdc:	429d      	cmp	r5, r3
 8000cde:	bf08      	it	eq
 8000ce0:	4296      	cmpeq	r6, r2
 8000ce2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ce6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000cea:	d202      	bcs.n	8000cf2 <__aeabi_ddiv+0x6e>
 8000cec:	085b      	lsrs	r3, r3, #1
 8000cee:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cf2:	1ab6      	subs	r6, r6, r2
 8000cf4:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000d06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d0e:	bf22      	ittt	cs
 8000d10:	1ab6      	subcs	r6, r6, r2
 8000d12:	4675      	movcs	r5, lr
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d26:	bf22      	ittt	cs
 8000d28:	1ab6      	subcs	r6, r6, r2
 8000d2a:	4675      	movcs	r5, lr
 8000d2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d3e:	bf22      	ittt	cs
 8000d40:	1ab6      	subcs	r6, r6, r2
 8000d42:	4675      	movcs	r5, lr
 8000d44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d48:	085b      	lsrs	r3, r3, #1
 8000d4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d56:	bf22      	ittt	cs
 8000d58:	1ab6      	subcs	r6, r6, r2
 8000d5a:	4675      	movcs	r5, lr
 8000d5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d60:	ea55 0e06 	orrs.w	lr, r5, r6
 8000d64:	d018      	beq.n	8000d98 <__aeabi_ddiv+0x114>
 8000d66:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000d6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000d6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000d72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000d7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000d7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000d82:	d1c0      	bne.n	8000d06 <__aeabi_ddiv+0x82>
 8000d84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d88:	d10b      	bne.n	8000da2 <__aeabi_ddiv+0x11e>
 8000d8a:	ea41 0100 	orr.w	r1, r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000d96:	e7b6      	b.n	8000d06 <__aeabi_ddiv+0x82>
 8000d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d9c:	bf04      	itt	eq
 8000d9e:	4301      	orreq	r1, r0
 8000da0:	2000      	moveq	r0, #0
 8000da2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000da6:	bf88      	it	hi
 8000da8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000dac:	f63f aeaf 	bhi.w	8000b0e <__aeabi_dmul+0xde>
 8000db0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000db4:	bf04      	itt	eq
 8000db6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000dba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000dbe:	f150 0000 	adcs.w	r0, r0, #0
 8000dc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000dc6:	bd70      	pop	{r4, r5, r6, pc}
 8000dc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000dcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000dd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000dda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000dde:	bd70      	popgt	{r4, r5, r6, pc}
 8000de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000de4:	f04f 0e00 	mov.w	lr, #0
 8000de8:	3c01      	subs	r4, #1
 8000dea:	e690      	b.n	8000b0e <__aeabi_dmul+0xde>
 8000dec:	ea45 0e06 	orr.w	lr, r5, r6
 8000df0:	e68d      	b.n	8000b0e <__aeabi_dmul+0xde>
 8000df2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000df6:	ea94 0f0c 	teq	r4, ip
 8000dfa:	bf08      	it	eq
 8000dfc:	ea95 0f0c 	teqeq	r5, ip
 8000e00:	f43f af3b 	beq.w	8000c7a <__aeabi_dmul+0x24a>
 8000e04:	ea94 0f0c 	teq	r4, ip
 8000e08:	d10a      	bne.n	8000e20 <__aeabi_ddiv+0x19c>
 8000e0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e0e:	f47f af34 	bne.w	8000c7a <__aeabi_dmul+0x24a>
 8000e12:	ea95 0f0c 	teq	r5, ip
 8000e16:	f47f af25 	bne.w	8000c64 <__aeabi_dmul+0x234>
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	e72c      	b.n	8000c7a <__aeabi_dmul+0x24a>
 8000e20:	ea95 0f0c 	teq	r5, ip
 8000e24:	d106      	bne.n	8000e34 <__aeabi_ddiv+0x1b0>
 8000e26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e2a:	f43f aefd 	beq.w	8000c28 <__aeabi_dmul+0x1f8>
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	e722      	b.n	8000c7a <__aeabi_dmul+0x24a>
 8000e34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e38:	bf18      	it	ne
 8000e3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e3e:	f47f aec5 	bne.w	8000bcc <__aeabi_dmul+0x19c>
 8000e42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000e46:	f47f af0d 	bne.w	8000c64 <__aeabi_dmul+0x234>
 8000e4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000e4e:	f47f aeeb 	bne.w	8000c28 <__aeabi_dmul+0x1f8>
 8000e52:	e712      	b.n	8000c7a <__aeabi_dmul+0x24a>
	...

08000e60 <__aeabi_d2iz>:
 8000e60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e68:	d215      	bcs.n	8000e96 <__aeabi_d2iz+0x36>
 8000e6a:	d511      	bpl.n	8000e90 <__aeabi_d2iz+0x30>
 8000e6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e74:	d912      	bls.n	8000e9c <__aeabi_d2iz+0x3c>
 8000e76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e86:	fa23 f002 	lsr.w	r0, r3, r2
 8000e8a:	bf18      	it	ne
 8000e8c:	4240      	negne	r0, r0
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e9a:	d105      	bne.n	8000ea8 <__aeabi_d2iz+0x48>
 8000e9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ea0:	bf08      	it	eq
 8000ea2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ea6:	4770      	bx	lr
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__aeabi_d2uiz>:
 8000eb0:	004a      	lsls	r2, r1, #1
 8000eb2:	d211      	bcs.n	8000ed8 <__aeabi_d2uiz+0x28>
 8000eb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb8:	d211      	bcs.n	8000ede <__aeabi_d2uiz+0x2e>
 8000eba:	d50d      	bpl.n	8000ed8 <__aeabi_d2uiz+0x28>
 8000ebc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ec0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec4:	d40e      	bmi.n	8000ee4 <__aeabi_d2uiz+0x34>
 8000ec6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ece:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ed2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee2:	d102      	bne.n	8000eea <__aeabi_d2uiz+0x3a>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	4770      	bx	lr
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_d2f>:
 8000ef0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ef4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ef8:	bf24      	itt	cs
 8000efa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000efe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_d2f+0x30>
 8000f04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000f0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000f10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f18:	bf08      	it	eq
 8000f1a:	f020 0001 	biceq.w	r0, r0, #1
 8000f1e:	4770      	bx	lr
 8000f20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f24:	d121      	bne.n	8000f6a <__aeabi_d2f+0x7a>
 8000f26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f2a:	bfbc      	itt	lt
 8000f2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f30:	4770      	bxlt	lr
 8000f32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f3a:	f1c2 0218 	rsb	r2, r2, #24
 8000f3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000f42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f46:	fa20 f002 	lsr.w	r0, r0, r2
 8000f4a:	bf18      	it	ne
 8000f4c:	f040 0001 	orrne.w	r0, r0, #1
 8000f50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f5c:	ea40 000c 	orr.w	r0, r0, ip
 8000f60:	fa23 f302 	lsr.w	r3, r3, r2
 8000f64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f68:	e7cc      	b.n	8000f04 <__aeabi_d2f+0x14>
 8000f6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f6e:	d107      	bne.n	8000f80 <__aeabi_d2f+0x90>
 8000f70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f74:	bf1e      	ittt	ne
 8000f76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f7e:	4770      	bxne	lr
 8000f80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_frsub>:
 8000f90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	e002      	b.n	8000f9c <__addsf3>
 8000f96:	bf00      	nop

08000f98 <__aeabi_fsub>:
 8000f98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000f9c <__addsf3>:
 8000f9c:	0042      	lsls	r2, r0, #1
 8000f9e:	bf1f      	itttt	ne
 8000fa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000fa4:	ea92 0f03 	teqne	r2, r3
 8000fa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000fac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fb0:	d06a      	beq.n	8001088 <__addsf3+0xec>
 8000fb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000fb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000fba:	bfc1      	itttt	gt
 8000fbc:	18d2      	addgt	r2, r2, r3
 8000fbe:	4041      	eorgt	r1, r0
 8000fc0:	4048      	eorgt	r0, r1
 8000fc2:	4041      	eorgt	r1, r0
 8000fc4:	bfb8      	it	lt
 8000fc6:	425b      	neglt	r3, r3
 8000fc8:	2b19      	cmp	r3, #25
 8000fca:	bf88      	it	hi
 8000fcc:	4770      	bxhi	lr
 8000fce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000fda:	bf18      	it	ne
 8000fdc:	4240      	negne	r0, r0
 8000fde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000fe2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000fe6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000fea:	bf18      	it	ne
 8000fec:	4249      	negne	r1, r1
 8000fee:	ea92 0f03 	teq	r2, r3
 8000ff2:	d03f      	beq.n	8001074 <__addsf3+0xd8>
 8000ff4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ff8:	fa41 fc03 	asr.w	ip, r1, r3
 8000ffc:	eb10 000c 	adds.w	r0, r0, ip
 8001000:	f1c3 0320 	rsb	r3, r3, #32
 8001004:	fa01 f103 	lsl.w	r1, r1, r3
 8001008:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800100c:	d502      	bpl.n	8001014 <__addsf3+0x78>
 800100e:	4249      	negs	r1, r1
 8001010:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8001014:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001018:	d313      	bcc.n	8001042 <__addsf3+0xa6>
 800101a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800101e:	d306      	bcc.n	800102e <__addsf3+0x92>
 8001020:	0840      	lsrs	r0, r0, #1
 8001022:	ea4f 0131 	mov.w	r1, r1, rrx
 8001026:	f102 0201 	add.w	r2, r2, #1
 800102a:	2afe      	cmp	r2, #254	; 0xfe
 800102c:	d251      	bcs.n	80010d2 <__addsf3+0x136>
 800102e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8001032:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001036:	bf08      	it	eq
 8001038:	f020 0001 	biceq.w	r0, r0, #1
 800103c:	ea40 0003 	orr.w	r0, r0, r3
 8001040:	4770      	bx	lr
 8001042:	0049      	lsls	r1, r1, #1
 8001044:	eb40 0000 	adc.w	r0, r0, r0
 8001048:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800104c:	f1a2 0201 	sub.w	r2, r2, #1
 8001050:	d1ed      	bne.n	800102e <__addsf3+0x92>
 8001052:	fab0 fc80 	clz	ip, r0
 8001056:	f1ac 0c08 	sub.w	ip, ip, #8
 800105a:	ebb2 020c 	subs.w	r2, r2, ip
 800105e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001062:	bfaa      	itet	ge
 8001064:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001068:	4252      	neglt	r2, r2
 800106a:	4318      	orrge	r0, r3
 800106c:	bfbc      	itt	lt
 800106e:	40d0      	lsrlt	r0, r2
 8001070:	4318      	orrlt	r0, r3
 8001072:	4770      	bx	lr
 8001074:	f092 0f00 	teq	r2, #0
 8001078:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800107c:	bf06      	itte	eq
 800107e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8001082:	3201      	addeq	r2, #1
 8001084:	3b01      	subne	r3, #1
 8001086:	e7b5      	b.n	8000ff4 <__addsf3+0x58>
 8001088:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800108c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001090:	bf18      	it	ne
 8001092:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001096:	d021      	beq.n	80010dc <__addsf3+0x140>
 8001098:	ea92 0f03 	teq	r2, r3
 800109c:	d004      	beq.n	80010a8 <__addsf3+0x10c>
 800109e:	f092 0f00 	teq	r2, #0
 80010a2:	bf08      	it	eq
 80010a4:	4608      	moveq	r0, r1
 80010a6:	4770      	bx	lr
 80010a8:	ea90 0f01 	teq	r0, r1
 80010ac:	bf1c      	itt	ne
 80010ae:	2000      	movne	r0, #0
 80010b0:	4770      	bxne	lr
 80010b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80010b6:	d104      	bne.n	80010c2 <__addsf3+0x126>
 80010b8:	0040      	lsls	r0, r0, #1
 80010ba:	bf28      	it	cs
 80010bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80010c0:	4770      	bx	lr
 80010c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80010c6:	bf3c      	itt	cc
 80010c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80010cc:	4770      	bxcc	lr
 80010ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80010d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80010d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010da:	4770      	bx	lr
 80010dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80010e0:	bf16      	itet	ne
 80010e2:	4608      	movne	r0, r1
 80010e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80010e8:	4601      	movne	r1, r0
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	bf06      	itte	eq
 80010ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80010f2:	ea90 0f01 	teqeq	r0, r1
 80010f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80010fa:	4770      	bx	lr

080010fc <__aeabi_ui2f>:
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e004      	b.n	800110c <__aeabi_i2f+0x8>
 8001102:	bf00      	nop

08001104 <__aeabi_i2f>:
 8001104:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001108:	bf48      	it	mi
 800110a:	4240      	negmi	r0, r0
 800110c:	ea5f 0c00 	movs.w	ip, r0
 8001110:	bf08      	it	eq
 8001112:	4770      	bxeq	lr
 8001114:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001118:	4601      	mov	r1, r0
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	e01c      	b.n	800115a <__aeabi_l2f+0x2a>

08001120 <__aeabi_ul2f>:
 8001120:	ea50 0201 	orrs.w	r2, r0, r1
 8001124:	bf08      	it	eq
 8001126:	4770      	bxeq	lr
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e00a      	b.n	8001144 <__aeabi_l2f+0x14>
 800112e:	bf00      	nop

08001130 <__aeabi_l2f>:
 8001130:	ea50 0201 	orrs.w	r2, r0, r1
 8001134:	bf08      	it	eq
 8001136:	4770      	bxeq	lr
 8001138:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800113c:	d502      	bpl.n	8001144 <__aeabi_l2f+0x14>
 800113e:	4240      	negs	r0, r0
 8001140:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001144:	ea5f 0c01 	movs.w	ip, r1
 8001148:	bf02      	ittt	eq
 800114a:	4684      	moveq	ip, r0
 800114c:	4601      	moveq	r1, r0
 800114e:	2000      	moveq	r0, #0
 8001150:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001154:	bf08      	it	eq
 8001156:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800115a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800115e:	fabc f28c 	clz	r2, ip
 8001162:	3a08      	subs	r2, #8
 8001164:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001168:	db10      	blt.n	800118c <__aeabi_l2f+0x5c>
 800116a:	fa01 fc02 	lsl.w	ip, r1, r2
 800116e:	4463      	add	r3, ip
 8001170:	fa00 fc02 	lsl.w	ip, r0, r2
 8001174:	f1c2 0220 	rsb	r2, r2, #32
 8001178:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800117c:	fa20 f202 	lsr.w	r2, r0, r2
 8001180:	eb43 0002 	adc.w	r0, r3, r2
 8001184:	bf08      	it	eq
 8001186:	f020 0001 	biceq.w	r0, r0, #1
 800118a:	4770      	bx	lr
 800118c:	f102 0220 	add.w	r2, r2, #32
 8001190:	fa01 fc02 	lsl.w	ip, r1, r2
 8001194:	f1c2 0220 	rsb	r2, r2, #32
 8001198:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800119c:	fa21 f202 	lsr.w	r2, r1, r2
 80011a0:	eb43 0002 	adc.w	r0, r3, r2
 80011a4:	bf08      	it	eq
 80011a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80011aa:	4770      	bx	lr
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <__aeabi_fmul>:
 80011b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80011b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80011b8:	bf1e      	ittt	ne
 80011ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80011be:	ea92 0f0c 	teqne	r2, ip
 80011c2:	ea93 0f0c 	teqne	r3, ip
 80011c6:	d06f      	beq.n	80012a8 <__aeabi_fmul+0xf8>
 80011c8:	441a      	add	r2, r3
 80011ca:	ea80 0c01 	eor.w	ip, r0, r1
 80011ce:	0240      	lsls	r0, r0, #9
 80011d0:	bf18      	it	ne
 80011d2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80011d6:	d01e      	beq.n	8001216 <__aeabi_fmul+0x66>
 80011d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011dc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80011e0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80011e4:	fba0 3101 	umull	r3, r1, r0, r1
 80011e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80011ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80011f0:	bf3e      	ittt	cc
 80011f2:	0049      	lslcc	r1, r1, #1
 80011f4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80011f8:	005b      	lslcc	r3, r3, #1
 80011fa:	ea40 0001 	orr.w	r0, r0, r1
 80011fe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001202:	2afd      	cmp	r2, #253	; 0xfd
 8001204:	d81d      	bhi.n	8001242 <__aeabi_fmul+0x92>
 8001206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800120a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800120e:	bf08      	it	eq
 8001210:	f020 0001 	biceq.w	r0, r0, #1
 8001214:	4770      	bx	lr
 8001216:	f090 0f00 	teq	r0, #0
 800121a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800121e:	bf08      	it	eq
 8001220:	0249      	lsleq	r1, r1, #9
 8001222:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001226:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800122a:	3a7f      	subs	r2, #127	; 0x7f
 800122c:	bfc2      	ittt	gt
 800122e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001232:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001236:	4770      	bxgt	lr
 8001238:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	3a01      	subs	r2, #1
 8001242:	dc5d      	bgt.n	8001300 <__aeabi_fmul+0x150>
 8001244:	f112 0f19 	cmn.w	r2, #25
 8001248:	bfdc      	itt	le
 800124a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800124e:	4770      	bxle	lr
 8001250:	f1c2 0200 	rsb	r2, r2, #0
 8001254:	0041      	lsls	r1, r0, #1
 8001256:	fa21 f102 	lsr.w	r1, r1, r2
 800125a:	f1c2 0220 	rsb	r2, r2, #32
 800125e:	fa00 fc02 	lsl.w	ip, r0, r2
 8001262:	ea5f 0031 	movs.w	r0, r1, rrx
 8001266:	f140 0000 	adc.w	r0, r0, #0
 800126a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800126e:	bf08      	it	eq
 8001270:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001274:	4770      	bx	lr
 8001276:	f092 0f00 	teq	r2, #0
 800127a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800127e:	bf02      	ittt	eq
 8001280:	0040      	lsleq	r0, r0, #1
 8001282:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001286:	3a01      	subeq	r2, #1
 8001288:	d0f9      	beq.n	800127e <__aeabi_fmul+0xce>
 800128a:	ea40 000c 	orr.w	r0, r0, ip
 800128e:	f093 0f00 	teq	r3, #0
 8001292:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001296:	bf02      	ittt	eq
 8001298:	0049      	lsleq	r1, r1, #1
 800129a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800129e:	3b01      	subeq	r3, #1
 80012a0:	d0f9      	beq.n	8001296 <__aeabi_fmul+0xe6>
 80012a2:	ea41 010c 	orr.w	r1, r1, ip
 80012a6:	e78f      	b.n	80011c8 <__aeabi_fmul+0x18>
 80012a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80012ac:	ea92 0f0c 	teq	r2, ip
 80012b0:	bf18      	it	ne
 80012b2:	ea93 0f0c 	teqne	r3, ip
 80012b6:	d00a      	beq.n	80012ce <__aeabi_fmul+0x11e>
 80012b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80012bc:	bf18      	it	ne
 80012be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80012c2:	d1d8      	bne.n	8001276 <__aeabi_fmul+0xc6>
 80012c4:	ea80 0001 	eor.w	r0, r0, r1
 80012c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012cc:	4770      	bx	lr
 80012ce:	f090 0f00 	teq	r0, #0
 80012d2:	bf17      	itett	ne
 80012d4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80012d8:	4608      	moveq	r0, r1
 80012da:	f091 0f00 	teqne	r1, #0
 80012de:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80012e2:	d014      	beq.n	800130e <__aeabi_fmul+0x15e>
 80012e4:	ea92 0f0c 	teq	r2, ip
 80012e8:	d101      	bne.n	80012ee <__aeabi_fmul+0x13e>
 80012ea:	0242      	lsls	r2, r0, #9
 80012ec:	d10f      	bne.n	800130e <__aeabi_fmul+0x15e>
 80012ee:	ea93 0f0c 	teq	r3, ip
 80012f2:	d103      	bne.n	80012fc <__aeabi_fmul+0x14c>
 80012f4:	024b      	lsls	r3, r1, #9
 80012f6:	bf18      	it	ne
 80012f8:	4608      	movne	r0, r1
 80012fa:	d108      	bne.n	800130e <__aeabi_fmul+0x15e>
 80012fc:	ea80 0001 	eor.w	r0, r0, r1
 8001300:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001304:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001308:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800130c:	4770      	bx	lr
 800130e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001312:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001316:	4770      	bx	lr

08001318 <__aeabi_fdiv>:
 8001318:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800131c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001320:	bf1e      	ittt	ne
 8001322:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001326:	ea92 0f0c 	teqne	r2, ip
 800132a:	ea93 0f0c 	teqne	r3, ip
 800132e:	d069      	beq.n	8001404 <__aeabi_fdiv+0xec>
 8001330:	eba2 0203 	sub.w	r2, r2, r3
 8001334:	ea80 0c01 	eor.w	ip, r0, r1
 8001338:	0249      	lsls	r1, r1, #9
 800133a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800133e:	d037      	beq.n	80013b0 <__aeabi_fdiv+0x98>
 8001340:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001344:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001348:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800134c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001350:	428b      	cmp	r3, r1
 8001352:	bf38      	it	cc
 8001354:	005b      	lslcc	r3, r3, #1
 8001356:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800135a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800135e:	428b      	cmp	r3, r1
 8001360:	bf24      	itt	cs
 8001362:	1a5b      	subcs	r3, r3, r1
 8001364:	ea40 000c 	orrcs.w	r0, r0, ip
 8001368:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800136c:	bf24      	itt	cs
 800136e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001372:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001376:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800137a:	bf24      	itt	cs
 800137c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001380:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001384:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001388:	bf24      	itt	cs
 800138a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800138e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	bf18      	it	ne
 8001396:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800139a:	d1e0      	bne.n	800135e <__aeabi_fdiv+0x46>
 800139c:	2afd      	cmp	r2, #253	; 0xfd
 800139e:	f63f af50 	bhi.w	8001242 <__aeabi_fmul+0x92>
 80013a2:	428b      	cmp	r3, r1
 80013a4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80013a8:	bf08      	it	eq
 80013aa:	f020 0001 	biceq.w	r0, r0, #1
 80013ae:	4770      	bx	lr
 80013b0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80013b4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80013b8:	327f      	adds	r2, #127	; 0x7f
 80013ba:	bfc2      	ittt	gt
 80013bc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80013c0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80013c4:	4770      	bxgt	lr
 80013c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	3a01      	subs	r2, #1
 80013d0:	e737      	b.n	8001242 <__aeabi_fmul+0x92>
 80013d2:	f092 0f00 	teq	r2, #0
 80013d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80013da:	bf02      	ittt	eq
 80013dc:	0040      	lsleq	r0, r0, #1
 80013de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80013e2:	3a01      	subeq	r2, #1
 80013e4:	d0f9      	beq.n	80013da <__aeabi_fdiv+0xc2>
 80013e6:	ea40 000c 	orr.w	r0, r0, ip
 80013ea:	f093 0f00 	teq	r3, #0
 80013ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80013f2:	bf02      	ittt	eq
 80013f4:	0049      	lsleq	r1, r1, #1
 80013f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80013fa:	3b01      	subeq	r3, #1
 80013fc:	d0f9      	beq.n	80013f2 <__aeabi_fdiv+0xda>
 80013fe:	ea41 010c 	orr.w	r1, r1, ip
 8001402:	e795      	b.n	8001330 <__aeabi_fdiv+0x18>
 8001404:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001408:	ea92 0f0c 	teq	r2, ip
 800140c:	d108      	bne.n	8001420 <__aeabi_fdiv+0x108>
 800140e:	0242      	lsls	r2, r0, #9
 8001410:	f47f af7d 	bne.w	800130e <__aeabi_fmul+0x15e>
 8001414:	ea93 0f0c 	teq	r3, ip
 8001418:	f47f af70 	bne.w	80012fc <__aeabi_fmul+0x14c>
 800141c:	4608      	mov	r0, r1
 800141e:	e776      	b.n	800130e <__aeabi_fmul+0x15e>
 8001420:	ea93 0f0c 	teq	r3, ip
 8001424:	d104      	bne.n	8001430 <__aeabi_fdiv+0x118>
 8001426:	024b      	lsls	r3, r1, #9
 8001428:	f43f af4c 	beq.w	80012c4 <__aeabi_fmul+0x114>
 800142c:	4608      	mov	r0, r1
 800142e:	e76e      	b.n	800130e <__aeabi_fmul+0x15e>
 8001430:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001434:	bf18      	it	ne
 8001436:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800143a:	d1ca      	bne.n	80013d2 <__aeabi_fdiv+0xba>
 800143c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001440:	f47f af5c 	bne.w	80012fc <__aeabi_fmul+0x14c>
 8001444:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001448:	f47f af3c 	bne.w	80012c4 <__aeabi_fmul+0x114>
 800144c:	e75f      	b.n	800130e <__aeabi_fmul+0x15e>
 800144e:	bf00      	nop

08001450 <__gesf2>:
 8001450:	f04f 3cff 	mov.w	ip, #4294967295
 8001454:	e006      	b.n	8001464 <__cmpsf2+0x4>
 8001456:	bf00      	nop

08001458 <__lesf2>:
 8001458:	f04f 0c01 	mov.w	ip, #1
 800145c:	e002      	b.n	8001464 <__cmpsf2+0x4>
 800145e:	bf00      	nop

08001460 <__cmpsf2>:
 8001460:	f04f 0c01 	mov.w	ip, #1
 8001464:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001468:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800146c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001474:	bf18      	it	ne
 8001476:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800147a:	d011      	beq.n	80014a0 <__cmpsf2+0x40>
 800147c:	b001      	add	sp, #4
 800147e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001482:	bf18      	it	ne
 8001484:	ea90 0f01 	teqne	r0, r1
 8001488:	bf58      	it	pl
 800148a:	ebb2 0003 	subspl.w	r0, r2, r3
 800148e:	bf88      	it	hi
 8001490:	17c8      	asrhi	r0, r1, #31
 8001492:	bf38      	it	cc
 8001494:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001498:	bf18      	it	ne
 800149a:	f040 0001 	orrne.w	r0, r0, #1
 800149e:	4770      	bx	lr
 80014a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80014a4:	d102      	bne.n	80014ac <__cmpsf2+0x4c>
 80014a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80014aa:	d105      	bne.n	80014b8 <__cmpsf2+0x58>
 80014ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80014b0:	d1e4      	bne.n	800147c <__cmpsf2+0x1c>
 80014b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80014b6:	d0e1      	beq.n	800147c <__cmpsf2+0x1c>
 80014b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <__aeabi_cfrcmple>:
 80014c0:	4684      	mov	ip, r0
 80014c2:	4608      	mov	r0, r1
 80014c4:	4661      	mov	r1, ip
 80014c6:	e7ff      	b.n	80014c8 <__aeabi_cfcmpeq>

080014c8 <__aeabi_cfcmpeq>:
 80014c8:	b50f      	push	{r0, r1, r2, r3, lr}
 80014ca:	f7ff ffc9 	bl	8001460 <__cmpsf2>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	bf48      	it	mi
 80014d2:	f110 0f00 	cmnmi.w	r0, #0
 80014d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080014d8 <__aeabi_fcmpeq>:
 80014d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014dc:	f7ff fff4 	bl	80014c8 <__aeabi_cfcmpeq>
 80014e0:	bf0c      	ite	eq
 80014e2:	2001      	moveq	r0, #1
 80014e4:	2000      	movne	r0, #0
 80014e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014ea:	bf00      	nop

080014ec <__aeabi_fcmplt>:
 80014ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014f0:	f7ff ffea 	bl	80014c8 <__aeabi_cfcmpeq>
 80014f4:	bf34      	ite	cc
 80014f6:	2001      	movcc	r0, #1
 80014f8:	2000      	movcs	r0, #0
 80014fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80014fe:	bf00      	nop

08001500 <__aeabi_fcmple>:
 8001500:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001504:	f7ff ffe0 	bl	80014c8 <__aeabi_cfcmpeq>
 8001508:	bf94      	ite	ls
 800150a:	2001      	movls	r0, #1
 800150c:	2000      	movhi	r0, #0
 800150e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001512:	bf00      	nop

08001514 <__aeabi_fcmpge>:
 8001514:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001518:	f7ff ffd2 	bl	80014c0 <__aeabi_cfrcmple>
 800151c:	bf94      	ite	ls
 800151e:	2001      	movls	r0, #1
 8001520:	2000      	movhi	r0, #0
 8001522:	f85d fb08 	ldr.w	pc, [sp], #8
 8001526:	bf00      	nop

08001528 <__aeabi_fcmpgt>:
 8001528:	f84d ed08 	str.w	lr, [sp, #-8]!
 800152c:	f7ff ffc8 	bl	80014c0 <__aeabi_cfrcmple>
 8001530:	bf34      	ite	cc
 8001532:	2001      	movcc	r0, #1
 8001534:	2000      	movcs	r0, #0
 8001536:	f85d fb08 	ldr.w	pc, [sp], #8
 800153a:	bf00      	nop
 800153c:	0000      	movs	r0, r0
	...

08001540 <__aeabi_f2iz>:
 8001540:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001544:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001548:	d30f      	bcc.n	800156a <__aeabi_f2iz+0x2a>
 800154a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800154e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001552:	d90d      	bls.n	8001570 <__aeabi_f2iz+0x30>
 8001554:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001560:	fa23 f002 	lsr.w	r0, r3, r2
 8001564:	bf18      	it	ne
 8001566:	4240      	negne	r0, r0
 8001568:	4770      	bx	lr
 800156a:	f04f 0000 	mov.w	r0, #0
 800156e:	4770      	bx	lr
 8001570:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001574:	d101      	bne.n	800157a <__aeabi_f2iz+0x3a>
 8001576:	0242      	lsls	r2, r0, #9
 8001578:	d105      	bne.n	8001586 <__aeabi_f2iz+0x46>
 800157a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800157e:	bf08      	it	eq
 8001580:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001584:	4770      	bx	lr
 8001586:	f04f 0000 	mov.w	r0, #0
 800158a:	4770      	bx	lr
 800158c:	0000      	movs	r0, r0
	...

08001590 <__aeabi_f2uiz>:
 8001590:	0042      	lsls	r2, r0, #1
 8001592:	d20e      	bcs.n	80015b2 <__aeabi_f2uiz+0x22>
 8001594:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001598:	d30b      	bcc.n	80015b2 <__aeabi_f2uiz+0x22>
 800159a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800159e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80015a2:	d409      	bmi.n	80015b8 <__aeabi_f2uiz+0x28>
 80015a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80015a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015ac:	fa23 f002 	lsr.w	r0, r3, r2
 80015b0:	4770      	bx	lr
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	4770      	bx	lr
 80015b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80015bc:	d101      	bne.n	80015c2 <__aeabi_f2uiz+0x32>
 80015be:	0242      	lsls	r2, r0, #9
 80015c0:	d102      	bne.n	80015c8 <__aeabi_f2uiz+0x38>
 80015c2:	f04f 30ff 	mov.w	r0, #4294967295
 80015c6:	4770      	bx	lr
 80015c8:	f04f 0000 	mov.w	r0, #0
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <dyn3_setup.lto_priv.164>:
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 80015d0:	4909      	ldr	r1, [pc, #36]	; (80015f8 <dyn3_setup.lto_priv.164+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 80015d2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80015d4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80015d6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <dyn3_setup.lto_priv.164+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80015dc:	e881 0014 	stmia.w	r1, {r2, r4}
 80015e0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 80015e4:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 80015e6:	6099      	str	r1, [r3, #8]
 80015e8:	6158      	str	r0, [r3, #20]
 80015ea:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 80015f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200017c8 	.word	0x200017c8
 80015fc:	200016f0 	.word	0x200016f0

08001600 <dyn2_setup.lto_priv.162>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <dyn2_setup.lto_priv.162+0x10>)
 8001602:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8001604:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001608:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800160a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	4770      	bx	lr
 8001610:	20001e30 	.word	0x20001e30
 8001614:	f3af 8000 	nop.w
 8001618:	f3af 8000 	nop.w
 800161c:	f3af 8000 	nop.w

08001620 <dyn1_setup.lto_priv.160>:
  heapp->h_free.h.u.next = hp = buf;
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <dyn1_setup.lto_priv.160+0x28>)
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8001622:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8001624:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001626:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <dyn1_setup.lto_priv.160+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800162c:	e881 0014 	stmia.w	r1, {r2, r4}
 8001630:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 8001634:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8001636:	6099      	str	r1, [r3, #8]
 8001638:	6158      	str	r0, [r3, #20]
 800163a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8001640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200017c8 	.word	0x200017c8
 800164c:	200016f0 	.word	0x200016f0

08001650 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8001650:	2000      	movs	r0, #0
 8001652:	4770      	bx	lr
 8001654:	f3af 8000 	nop.w
 8001658:	f3af 8000 	nop.w
 800165c:	f3af 8000 	nop.w

08001660 <pools1_setup.lto_priv.158>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <pools1_setup.lto_priv.158+0x10>)
 8001662:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8001664:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001668:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800166a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	4770      	bx	lr
 8001670:	20000804 	.word	0x20000804
 8001674:	f3af 8000 	nop.w
 8001678:	f3af 8000 	nop.w
 800167c:	f3af 8000 	nop.w

08001680 <heap1_setup.lto_priv.156>:
  heapp->h_free.h.u.next = hp = buf;
 8001680:	4909      	ldr	r1, [pc, #36]	; (80016a8 <heap1_setup.lto_priv.156+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 8001682:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8001684:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8001686:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <heap1_setup.lto_priv.156+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800168c:	e881 0014 	stmia.w	r1, {r2, r4}
 8001690:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 8001694:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8001696:	6099      	str	r1, [r3, #8]
 8001698:	6158      	str	r0, [r3, #20]
 800169a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 80016a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200017c8 	.word	0x200017c8
 80016ac:	20000d10 	.word	0x20000d10

080016b0 <pools1_execute.lto_priv.159>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <pools1_execute.lto_priv.159+0xc0>)
 80016b4:	4c2f      	ldr	r4, [pc, #188]	; (8001774 <pools1_execute.lto_priv.159+0xc4>)
 80016b6:	2205      	movs	r2, #5
 80016b8:	2520      	movs	r5, #32
 80016ba:	2000      	movs	r0, #0
 80016bc:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80016c0:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 80016c2:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80016c4:	6019      	str	r1, [r3, #0]
 80016c6:	f380 8811 	msr	BASEPRI, r0

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 80016ca:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 80016cc:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 80016ce:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 80016d0:	d1f4      	bne.n	80016bc <pools1_execute.lto_priv.159+0xc>
 80016d2:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 80016d4:	4827      	ldr	r0, [pc, #156]	; (8001774 <pools1_execute.lto_priv.159+0xc4>)
 80016d6:	f004 fe73 	bl	80063c0 <chPoolAlloc>
 80016da:	1c01      	adds	r1, r0, #0
 80016dc:	bf18      	it	ne
 80016de:	2101      	movne	r1, #1
 80016e0:	2001      	movs	r0, #1
 80016e2:	f004 fc3d 	bl	8005f60 <_test_assert>
 80016e6:	bb90      	cbnz	r0, 800174e <pools1_execute.lto_priv.159+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 80016e8:	3d01      	subs	r5, #1
 80016ea:	d1f3      	bne.n	80016d4 <pools1_execute.lto_priv.159+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 80016ec:	4821      	ldr	r0, [pc, #132]	; (8001774 <pools1_execute.lto_priv.159+0xc4>)
 80016ee:	f004 fe67 	bl	80063c0 <chPoolAlloc>
 80016f2:	fab0 f180 	clz	r1, r0
 80016f6:	2002      	movs	r0, #2
 80016f8:	0949      	lsrs	r1, r1, #5
 80016fa:	f004 fc31 	bl	8005f60 <_test_assert>
 80016fe:	bb30      	cbnz	r0, 800174e <pools1_execute.lto_priv.159+0x9e>
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <pools1_execute.lto_priv.159+0xc8>)
 8001702:	2620      	movs	r6, #32
 8001704:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8001708:	f853 2b04 	ldr.w	r2, [r3], #4
 800170c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8001710:	6821      	ldr	r1, [r4, #0]
 8001712:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8001714:	6022      	str	r2, [r4, #0]
 8001716:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 800171a:	4283      	cmp	r3, r0
 800171c:	d1f4      	bne.n	8001708 <pools1_execute.lto_priv.159+0x58>
 800171e:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8001720:	4d14      	ldr	r5, [pc, #80]	; (8001774 <pools1_execute.lto_priv.159+0xc4>)
 8001722:	4628      	mov	r0, r5
 8001724:	f004 fe4c 	bl	80063c0 <chPoolAlloc>
 8001728:	1c01      	adds	r1, r0, #0
 800172a:	bf18      	it	ne
 800172c:	2101      	movne	r1, #1
 800172e:	2003      	movs	r0, #3
 8001730:	f004 fc16 	bl	8005f60 <_test_assert>
 8001734:	b958      	cbnz	r0, 800174e <pools1_execute.lto_priv.159+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8001736:	3c01      	subs	r4, #1
 8001738:	d1f2      	bne.n	8001720 <pools1_execute.lto_priv.159+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 800173a:	4628      	mov	r0, r5
 800173c:	f004 fe40 	bl	80063c0 <chPoolAlloc>
 8001740:	fab0 f180 	clz	r1, r0
 8001744:	2004      	movs	r0, #4
 8001746:	0949      	lsrs	r1, r1, #5
 8001748:	f004 fc0a 	bl	8005f60 <_test_assert>
 800174c:	b100      	cbz	r0, 8001750 <pools1_execute.lto_priv.159+0xa0>
 800174e:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <pools1_execute.lto_priv.159+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8001752:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001754:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8001756:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8001758:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 800175a:	606b      	str	r3, [r5, #4]
 800175c:	f004 fe30 	bl	80063c0 <chPoolAlloc>
}
 8001760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8001764:	fab0 f180 	clz	r1, r0
 8001768:	2005      	movs	r0, #5
 800176a:	0949      	lsrs	r1, r1, #5
 800176c:	f004 bbf8 	b.w	8005f60 <_test_assert>
 8001770:	200017c8 	.word	0x200017c8
 8001774:	20000804 	.word	0x20000804
 8001778:	0800a050 	.word	0x0800a050
 800177c:	08001651 	.word	0x08001651

08001780 <dyn2_execute.lto_priv.163>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001780:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <dyn2_execute.lto_priv.163+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8001782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001784:	6992      	ldr	r2, [r2, #24]
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <dyn2_execute.lto_priv.163+0xc4>)
 8001788:	492f      	ldr	r1, [pc, #188]	; (8001848 <dyn2_execute.lto_priv.163+0xc8>)
 800178a:	6895      	ldr	r5, [r2, #8]
 800178c:	f103 0710 	add.w	r7, r3, #16
 8001790:	2620      	movs	r6, #32
 8001792:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8001794:	f853 2b04 	ldr.w	r2, [r3], #4
 8001798:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800179c:	6808      	ldr	r0, [r1, #0]
 800179e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 80017a0:	600a      	str	r2, [r1, #0]
 80017a2:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 80017a6:	42bb      	cmp	r3, r7
 80017a8:	d1f4      	bne.n	8001794 <dyn2_execute.lto_priv.163+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 80017aa:	4928      	ldr	r1, [pc, #160]	; (800184c <dyn2_execute.lto_priv.163+0xcc>)
 80017ac:	1e68      	subs	r0, r5, #1
 80017ae:	f007 fbb7 	bl	8008f20 <chThdCreateFromMemoryPool.constprop.59>
 80017b2:	4c27      	ldr	r4, [pc, #156]	; (8001850 <dyn2_execute.lto_priv.163+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 80017b4:	4927      	ldr	r1, [pc, #156]	; (8001854 <dyn2_execute.lto_priv.163+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 80017b6:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 80017b8:	1ea8      	subs	r0, r5, #2
 80017ba:	f007 fbb1 	bl	8008f20 <chThdCreateFromMemoryPool.constprop.59>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 80017be:	4926      	ldr	r1, [pc, #152]	; (8001858 <dyn2_execute.lto_priv.163+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 80017c0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 80017c2:	1ee8      	subs	r0, r5, #3
 80017c4:	f007 fbac 	bl	8008f20 <chThdCreateFromMemoryPool.constprop.59>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 80017c8:	4924      	ldr	r1, [pc, #144]	; (800185c <dyn2_execute.lto_priv.163+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 80017ca:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 80017cc:	1f28      	subs	r0, r5, #4
 80017ce:	f007 fba7 	bl	8008f20 <chThdCreateFromMemoryPool.constprop.59>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 80017d2:	4923      	ldr	r1, [pc, #140]	; (8001860 <dyn2_execute.lto_priv.163+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 80017d4:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 80017d6:	1f68      	subs	r0, r5, #5
 80017d8:	f007 fba2 	bl	8008f20 <chThdCreateFromMemoryPool.constprop.59>

  test_assert(1, (threads[0] != NULL) &&
 80017dc:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 80017de:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 80017e0:	b141      	cbz	r1, 80017f4 <dyn2_execute.lto_priv.163+0x74>
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	b131      	cbz	r1, 80017f4 <dyn2_execute.lto_priv.163+0x74>
 80017e6:	68a1      	ldr	r1, [r4, #8]
 80017e8:	b121      	cbz	r1, 80017f4 <dyn2_execute.lto_priv.163+0x74>
 80017ea:	68e1      	ldr	r1, [r4, #12]
 80017ec:	b111      	cbz	r1, 80017f4 <dyn2_execute.lto_priv.163+0x74>
 80017ee:	fab0 f180 	clz	r1, r0
 80017f2:	0949      	lsrs	r1, r1, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	f004 fbb3 	bl	8005f60 <_test_assert>
 80017fa:	b100      	cbz	r0, 80017fe <dyn2_execute.lto_priv.163+0x7e>
 80017fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 80017fe:	f004 fa27 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8001802:	2002      	movs	r0, #2
 8001804:	4917      	ldr	r1, [pc, #92]	; (8001864 <dyn2_execute.lto_priv.163+0xe4>)
 8001806:	f004 fa73 	bl	8005cf0 <_test_assert_sequence>
 800180a:	2800      	cmp	r0, #0
 800180c:	d1f6      	bne.n	80017fc <dyn2_execute.lto_priv.163+0x7c>
 800180e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <dyn2_execute.lto_priv.163+0xc8>)
 8001812:	f004 fdd5 	bl	80063c0 <chPoolAlloc>
 8001816:	1c01      	adds	r1, r0, #0
 8001818:	bf18      	it	ne
 800181a:	2101      	movne	r1, #1
 800181c:	2003      	movs	r0, #3
 800181e:	f004 fb9f 	bl	8005f60 <_test_assert>
 8001822:	2800      	cmp	r0, #0
 8001824:	d1ea      	bne.n	80017fc <dyn2_execute.lto_priv.163+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8001826:	3c01      	subs	r4, #1
 8001828:	d1f2      	bne.n	8001810 <dyn2_execute.lto_priv.163+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <dyn2_execute.lto_priv.163+0xc8>)
 800182c:	f004 fdc8 	bl	80063c0 <chPoolAlloc>
}
 8001830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8001834:	fab0 f180 	clz	r1, r0
 8001838:	2004      	movs	r0, #4
 800183a:	0949      	lsrs	r1, r1, #5
 800183c:	f004 bb90 	b.w	8005f60 <_test_assert>
 8001840:	20001e40 	.word	0x20001e40
 8001844:	0800a050 	.word	0x0800a050
 8001848:	20001e30 	.word	0x20001e30
 800184c:	080097f0 	.word	0x080097f0
 8001850:	20001710 	.word	0x20001710
 8001854:	080097f4 	.word	0x080097f4
 8001858:	080097f8 	.word	0x080097f8
 800185c:	0800ae44 	.word	0x0800ae44
 8001860:	0800a0c8 	.word	0x0800a0c8
 8001864:	080097fc 	.word	0x080097fc
 8001868:	f3af 8000 	nop.w
 800186c:	f3af 8000 	nop.w

08001870 <thread.lto_priv.72>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 8001870:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8001872:	7800      	ldrb	r0, [r0, #0]
 8001874:	f004 fb8c 	bl	8005f90 <test_emit_token>
  return 0;
}
 8001878:	2000      	movs	r0, #0
 800187a:	bd08      	pop	{r3, pc}
 800187c:	f3af 8000 	nop.w

08001880 <dyn1_execute.lto_priv.161>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8001880:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <dyn1_execute.lto_priv.161+0xd4>)
 8001884:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001886:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8001888:	a903      	add	r1, sp, #12
 800188a:	4833      	ldr	r0, [pc, #204]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 800188c:	689d      	ldr	r5, [r3, #8]
 800188e:	f004 fdaf 	bl	80063f0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <dyn1_execute.lto_priv.161+0xdc>)
 8001894:	1e6a      	subs	r2, r5, #1
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <dyn1_execute.lto_priv.161+0xe0>)
 800189e:	482e      	ldr	r0, [pc, #184]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 80018a0:	f005 fab6 	bl	8006e10 <chThdCreateFromHeap>
 80018a4:	4c2f      	ldr	r4, [pc, #188]	; (8001964 <dyn1_execute.lto_priv.161+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <dyn1_execute.lto_priv.161+0xe8>)
 80018a8:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80018aa:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <dyn1_execute.lto_priv.161+0xe0>)
 80018b4:	4828      	ldr	r0, [pc, #160]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 80018b6:	f005 faab 	bl	8006e10 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80018ba:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80018bc:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80018be:	4826      	ldr	r0, [pc, #152]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 80018c0:	f004 fd96 	bl	80063f0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 80018c4:	9902      	ldr	r1, [sp, #8]
 80018c6:	4824      	ldr	r0, [pc, #144]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 80018c8:	f004 fe02 	bl	80064d0 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <dyn1_execute.lto_priv.161+0xec>)
 80018ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 80018d2:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 80018d4:	1eea      	subs	r2, r5, #3
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	481f      	ldr	r0, [pc, #124]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <dyn1_execute.lto_priv.161+0xe0>)
 80018dc:	f005 fa98 	bl	8006e10 <chThdCreateFromHeap>
 80018e0:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 80018e2:	4630      	mov	r0, r6
 80018e4:	f004 fdac 	bl	8006440 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 80018e8:	6821      	ldr	r1, [r4, #0]
 80018ea:	b121      	cbz	r1, 80018f6 <dyn1_execute.lto_priv.161+0x76>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	b111      	cbz	r1, 80018f6 <dyn1_execute.lto_priv.161+0x76>
 80018f0:	68a1      	ldr	r1, [r4, #8]
 80018f2:	b331      	cbz	r1, 8001942 <dyn1_execute.lto_priv.161+0xc2>
 80018f4:	2100      	movs	r1, #0
 80018f6:	2001      	movs	r0, #1
 80018f8:	f004 fb32 	bl	8005f60 <_test_assert>
 80018fc:	b108      	cbz	r0, 8001902 <dyn1_execute.lto_priv.161+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 80018fe:	b004      	add	sp, #16
 8001900:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8001902:	f004 f9a5 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8001906:	2002      	movs	r0, #2
 8001908:	4919      	ldr	r1, [pc, #100]	; (8001970 <dyn1_execute.lto_priv.161+0xf0>)
 800190a:	f004 f9f1 	bl	8005cf0 <_test_assert_sequence>
 800190e:	2800      	cmp	r0, #0
 8001910:	d1f5      	bne.n	80018fe <dyn1_execute.lto_priv.161+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8001912:	a902      	add	r1, sp, #8
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <dyn1_execute.lto_priv.161+0xd8>)
 8001916:	f004 fd6b 	bl	80063f0 <chHeapStatus>
 800191a:	f1a0 0101 	sub.w	r1, r0, #1
 800191e:	fab1 f181 	clz	r1, r1
 8001922:	2003      	movs	r0, #3
 8001924:	0949      	lsrs	r1, r1, #5
 8001926:	f004 fb1b 	bl	8005f60 <_test_assert>
 800192a:	2800      	cmp	r0, #0
 800192c:	d1e7      	bne.n	80018fe <dyn1_execute.lto_priv.161+0x7e>
  test_assert(4, n == sz, "heap size changed");
 800192e:	9902      	ldr	r1, [sp, #8]
 8001930:	9b03      	ldr	r3, [sp, #12]
 8001932:	2004      	movs	r0, #4
 8001934:	1ac9      	subs	r1, r1, r3
 8001936:	fab1 f181 	clz	r1, r1
 800193a:	0949      	lsrs	r1, r1, #5
 800193c:	f004 fb10 	bl	8005f60 <_test_assert>
 8001940:	e7dd      	b.n	80018fe <dyn1_execute.lto_priv.161+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8001942:	68e3      	ldr	r3, [r4, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1d6      	bne.n	80018f6 <dyn1_execute.lto_priv.161+0x76>
 8001948:	6921      	ldr	r1, [r4, #16]
 800194a:	fab1 f181 	clz	r1, r1
 800194e:	0949      	lsrs	r1, r1, #5
 8001950:	e7d1      	b.n	80018f6 <dyn1_execute.lto_priv.161+0x76>
 8001952:	bf00      	nop
 8001954:	20001e40 	.word	0x20001e40
 8001958:	200016f0 	.word	0x200016f0
 800195c:	080097f0 	.word	0x080097f0
 8001960:	08001871 	.word	0x08001871
 8001964:	20001710 	.word	0x20001710
 8001968:	080097f4 	.word	0x080097f4
 800196c:	080097f8 	.word	0x080097f8
 8001970:	08009804 	.word	0x08009804
 8001974:	f3af 8000 	nop.w
 8001978:	f3af 8000 	nop.w
 800197c:	f3af 8000 	nop.w

08001980 <heap1_execute.lto_priv.157>:

static void heap1_execute(void) {
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8001984:	a901      	add	r1, sp, #4
 8001986:	2000      	movs	r0, #0
 8001988:	f004 fd32 	bl	80063f0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800198c:	2110      	movs	r1, #16
 800198e:	2000      	movs	r0, #0
 8001990:	f004 fd9e 	bl	80064d0 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8001994:	1c01      	adds	r1, r0, #0
 8001996:	4605      	mov	r5, r0
 8001998:	bf18      	it	ne
 800199a:	2101      	movne	r1, #1
 800199c:	2001      	movs	r0, #1
 800199e:	f004 fadf 	bl	8005f60 <_test_assert>
 80019a2:	4604      	mov	r4, r0
 80019a4:	b108      	cbz	r0, 80019aa <heap1_execute.lto_priv.157+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 80019a6:	b002      	add	sp, #8
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 80019aa:	4628      	mov	r0, r5
 80019ac:	f004 fd48 	bl	8006440 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 80019b0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80019b4:	4620      	mov	r0, r4
 80019b6:	f004 fd8b 	bl	80064d0 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 80019ba:	fab0 f180 	clz	r1, r0
 80019be:	2002      	movs	r0, #2
 80019c0:	0949      	lsrs	r1, r1, #5
 80019c2:	f004 facd 	bl	8005f60 <_test_assert>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d1ed      	bne.n	80019a6 <heap1_execute.lto_priv.157+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 80019ca:	a901      	add	r1, sp, #4
 80019cc:	487b      	ldr	r0, [pc, #492]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 80019ce:	f004 fd0f 	bl	80063f0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80019d2:	2110      	movs	r1, #16
 80019d4:	4879      	ldr	r0, [pc, #484]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 80019d6:	f004 fd7b 	bl	80064d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80019da:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80019dc:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80019de:	4877      	ldr	r0, [pc, #476]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 80019e0:	f004 fd76 	bl	80064d0 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80019e4:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80019e6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80019e8:	4874      	ldr	r0, [pc, #464]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 80019ea:	f004 fd71 	bl	80064d0 <chHeapAlloc>
 80019ee:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 80019f0:	4630      	mov	r0, r6
 80019f2:	f004 fd25 	bl	8006440 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 80019f6:	4628      	mov	r0, r5
 80019f8:	f004 fd22 	bl	8006440 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 80019fc:	4620      	mov	r0, r4
 80019fe:	f004 fd1f 	bl	8006440 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8001a02:	4669      	mov	r1, sp
 8001a04:	486d      	ldr	r0, [pc, #436]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a06:	f004 fcf3 	bl	80063f0 <chHeapStatus>
 8001a0a:	f1a0 0101 	sub.w	r1, r0, #1
 8001a0e:	fab1 f181 	clz	r1, r1
 8001a12:	2003      	movs	r0, #3
 8001a14:	0949      	lsrs	r1, r1, #5
 8001a16:	f004 faa3 	bl	8005f60 <_test_assert>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d1c3      	bne.n	80019a6 <heap1_execute.lto_priv.157+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8001a1e:	2110      	movs	r1, #16
 8001a20:	4866      	ldr	r0, [pc, #408]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a22:	f004 fd55 	bl	80064d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8001a26:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8001a28:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8001a2a:	4864      	ldr	r0, [pc, #400]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a2c:	f004 fd50 	bl	80064d0 <chHeapAlloc>
 8001a30:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8001a32:	2110      	movs	r1, #16
 8001a34:	4861      	ldr	r0, [pc, #388]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a36:	f004 fd4b 	bl	80064d0 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8001a3a:	f004 fd01 	bl	8006440 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f004 fcfe 	bl	8006440 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8001a44:	4620      	mov	r0, r4
 8001a46:	f004 fcfb 	bl	8006440 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8001a4a:	4669      	mov	r1, sp
 8001a4c:	485b      	ldr	r0, [pc, #364]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a4e:	f004 fccf 	bl	80063f0 <chHeapStatus>
 8001a52:	f1a0 0101 	sub.w	r1, r0, #1
 8001a56:	fab1 f181 	clz	r1, r1
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	0949      	lsrs	r1, r1, #5
 8001a5e:	f004 fa7f 	bl	8005f60 <_test_assert>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	d19f      	bne.n	80019a6 <heap1_execute.lto_priv.157+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8001a66:	2111      	movs	r1, #17
 8001a68:	4854      	ldr	r0, [pc, #336]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a6a:	f004 fd31 	bl	80064d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8001a6e:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8001a70:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8001a72:	4852      	ldr	r0, [pc, #328]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a74:	f004 fd2c 	bl	80064d0 <chHeapAlloc>
 8001a78:	4605      	mov	r5, r0
  chHeapFree(p1);
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f004 fce0 	bl	8006440 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8001a80:	4669      	mov	r1, sp
 8001a82:	484e      	ldr	r0, [pc, #312]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001a84:	f004 fcb4 	bl	80063f0 <chHeapStatus>
 8001a88:	f1a0 0102 	sub.w	r1, r0, #2
 8001a8c:	fab1 f181 	clz	r1, r1
 8001a90:	2005      	movs	r0, #5
 8001a92:	0949      	lsrs	r1, r1, #5
 8001a94:	f004 fa64 	bl	8005f60 <_test_assert>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d184      	bne.n	80019a6 <heap1_execute.lto_priv.157+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4847      	ldr	r0, [pc, #284]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001aa0:	f004 fd16 	bl	80064d0 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8001aa4:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8001aa6:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8001aa8:	4844      	ldr	r0, [pc, #272]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001aaa:	f004 fca1 	bl	80063f0 <chHeapStatus>
 8001aae:	2801      	cmp	r0, #1
 8001ab0:	f000 8081 	beq.w	8001bb6 <heap1_execute.lto_priv.157+0x236>
 8001ab4:	4669      	mov	r1, sp
 8001ab6:	4841      	ldr	r0, [pc, #260]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001ab8:	f004 fc9a 	bl	80063f0 <chHeapStatus>
 8001abc:	f1a0 0102 	sub.w	r1, r0, #2
 8001ac0:	fab1 f181 	clz	r1, r1
 8001ac4:	0949      	lsrs	r1, r1, #5
 8001ac6:	2006      	movs	r0, #6
 8001ac8:	f004 fa4a 	bl	8005f60 <_test_assert>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	f47f af6a 	bne.w	80019a6 <heap1_execute.lto_priv.157+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	f004 fcb4 	bl	8006440 <chHeapFree>
  chHeapFree(p1);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f004 fcb1 	bl	8006440 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8001ade:	4669      	mov	r1, sp
 8001ae0:	4836      	ldr	r0, [pc, #216]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001ae2:	f004 fc85 	bl	80063f0 <chHeapStatus>
 8001ae6:	1e46      	subs	r6, r0, #1
 8001ae8:	4271      	negs	r1, r6
 8001aea:	4171      	adcs	r1, r6
 8001aec:	2007      	movs	r0, #7
 8001aee:	f004 fa37 	bl	8005f60 <_test_assert>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	f47f af57 	bne.w	80019a6 <heap1_execute.lto_priv.157+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8001af8:	2110      	movs	r1, #16
 8001afa:	4830      	ldr	r0, [pc, #192]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001afc:	f004 fce8 	bl	80064d0 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8001b00:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8001b02:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8001b04:	482d      	ldr	r0, [pc, #180]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b06:	f004 fce3 	bl	80064d0 <chHeapAlloc>
 8001b0a:	4604      	mov	r4, r0
  chHeapFree(p1);
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f004 fc97 	bl	8006440 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8001b12:	4669      	mov	r1, sp
 8001b14:	4829      	ldr	r0, [pc, #164]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b16:	f004 fc6b 	bl	80063f0 <chHeapStatus>
 8001b1a:	1e85      	subs	r5, r0, #2
 8001b1c:	4269      	negs	r1, r5
 8001b1e:	4169      	adcs	r1, r5
 8001b20:	2008      	movs	r0, #8
 8001b22:	f004 fa1d 	bl	8005f60 <_test_assert>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	f47f af3d 	bne.w	80019a6 <heap1_execute.lto_priv.157+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	4823      	ldr	r0, [pc, #140]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b30:	f004 fcce 	bl	80064d0 <chHeapAlloc>
  chHeapFree(p1);
 8001b34:	f004 fc84 	bl	8006440 <chHeapFree>
  chHeapFree(p2);
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f004 fc81 	bl	8006440 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8001b3e:	4669      	mov	r1, sp
 8001b40:	481e      	ldr	r0, [pc, #120]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b42:	f004 fc55 	bl	80063f0 <chHeapStatus>
 8001b46:	3801      	subs	r0, #1
 8001b48:	4241      	negs	r1, r0
 8001b4a:	4141      	adcs	r1, r0
 8001b4c:	2009      	movs	r0, #9
 8001b4e:	f004 fa07 	bl	8005f60 <_test_assert>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	f47f af27 	bne.w	80019a6 <heap1_execute.lto_priv.157+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8001b58:	4669      	mov	r1, sp
 8001b5a:	4818      	ldr	r0, [pc, #96]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b5c:	f004 fc48 	bl	80063f0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8001b60:	9900      	ldr	r1, [sp, #0]
 8001b62:	4816      	ldr	r0, [pc, #88]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b64:	f004 fcb4 	bl	80064d0 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8001b68:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8001b6a:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8001b6c:	4813      	ldr	r0, [pc, #76]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b6e:	f004 fc3f 	bl	80063f0 <chHeapStatus>
 8001b72:	fab0 f180 	clz	r1, r0
 8001b76:	200a      	movs	r0, #10
 8001b78:	0949      	lsrs	r1, r1, #5
 8001b7a:	f004 f9f1 	bl	8005f60 <_test_assert>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	f47f af11 	bne.w	80019a6 <heap1_execute.lto_priv.157+0x26>
  chHeapFree(p1);
 8001b84:	4620      	mov	r0, r4
 8001b86:	f004 fc5b 	bl	8006440 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8001b8a:	4669      	mov	r1, sp
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <heap1_execute.lto_priv.157+0x23c>)
 8001b8e:	f004 fc2f 	bl	80063f0 <chHeapStatus>
 8001b92:	1e42      	subs	r2, r0, #1
 8001b94:	4251      	negs	r1, r2
 8001b96:	4151      	adcs	r1, r2
 8001b98:	200b      	movs	r0, #11
 8001b9a:	f004 f9e1 	bl	8005f60 <_test_assert>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	f47f af01 	bne.w	80019a6 <heap1_execute.lto_priv.157+0x26>
  test_assert(12, n == sz, "size changed");
 8001ba4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8001ba8:	1acb      	subs	r3, r1, r3
 8001baa:	4259      	negs	r1, r3
 8001bac:	4159      	adcs	r1, r3
 8001bae:	200c      	movs	r0, #12
 8001bb0:	f004 f9d6 	bl	8005f60 <_test_assert>
 8001bb4:	e6f7      	b.n	80019a6 <heap1_execute.lto_priv.157+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	e785      	b.n	8001ac6 <heap1_execute.lto_priv.157+0x146>
 8001bba:	bf00      	nop
 8001bbc:	20000d10 	.word	0x20000d10

08001bc0 <evt3_execute.lto_priv.155>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001bc2:	4c55      	ldr	r4, [pc, #340]	; (8001d18 <evt3_execute.lto_priv.155+0x158>)
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	69a2      	ldr	r2, [r4, #24]
 8001bc8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8001bcc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001bce:	b93b      	cbnz	r3, 8001be0 <evt3_execute.lto_priv.155+0x20>
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f004 f9c2 	bl	8005f60 <_test_assert>
 8001bdc:	b180      	cbz	r0, 8001c00 <evt3_execute.lto_priv.155+0x40>
 8001bde:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 8001be0:	4259      	negs	r1, r3
 8001be2:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8001be4:	ea23 0301 	bic.w	r3, r3, r1
 8001be8:	6353      	str	r3, [r2, #52]	; 0x34
 8001bea:	2300      	movs	r3, #0
 8001bec:	f383 8811 	msr	BASEPRI, r3
 8001bf0:	fab1 f181 	clz	r1, r1
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	0949      	lsrs	r1, r1, #5
 8001bf8:	f004 f9b2 	bl	8005f60 <_test_assert>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d1ee      	bne.n	8001bde <evt3_execute.lto_priv.155+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001c00:	69a3      	ldr	r3, [r4, #24]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8001c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d06f      	beq.n	8001cee <evt3_execute.lto_priv.155+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8001c0e:	6358      	str	r0, [r3, #52]	; 0x34
 8001c10:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8001c14:	4601      	mov	r1, r0
 8001c16:	2002      	movs	r0, #2
 8001c18:	f004 f9a2 	bl	8005f60 <_test_assert>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d1de      	bne.n	8001bde <evt3_execute.lto_priv.155+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001c20:	69a3      	ldr	r3, [r4, #24]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	3201      	adds	r2, #1
 8001c2c:	d063      	beq.n	8001cf6 <evt3_execute.lto_priv.155+0x136>
 8001c2e:	f380 8811 	msr	BASEPRI, r0
 8001c32:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8001c34:	4601      	mov	r1, r0
 8001c36:	2003      	movs	r0, #3
 8001c38:	f004 f992 	bl	8005f60 <_test_assert>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d1ce      	bne.n	8001bde <evt3_execute.lto_priv.155+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001c40:	69a6      	ldr	r6, [r4, #24]
 8001c42:	2320      	movs	r3, #32
 8001c44:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8001c48:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8001c4a:	b94d      	cbnz	r5, 8001c60 <evt3_execute.lto_priv.155+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001c50:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8001c52:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001c54:	4601      	mov	r1, r0
 8001c56:	f005 f9c3 	bl	8006fe0 <chSchGoSleepTimeoutS>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	db4f      	blt.n	8001cfe <evt3_execute.lto_priv.155+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8001c5e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8001c60:	4269      	negs	r1, r5
 8001c62:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8001c64:	ea25 0501 	bic.w	r5, r5, r1
 8001c68:	6375      	str	r5, [r6, #52]	; 0x34
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	fab1 f181 	clz	r1, r1
 8001c74:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8001c76:	2004      	movs	r0, #4
 8001c78:	f004 f972 	bl	8005f60 <_test_assert>
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d1ae      	bne.n	8001bde <evt3_execute.lto_priv.155+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001c80:	69a6      	ldr	r6, [r4, #24]
 8001c82:	2320      	movs	r3, #32
 8001c84:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8001c88:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8001c8a:	b94d      	cbnz	r5, 8001ca0 <evt3_execute.lto_priv.155+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001c90:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8001c92:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8001c94:	4601      	mov	r1, r0
 8001c96:	f005 f9a3 	bl	8006fe0 <chSchGoSleepTimeoutS>
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	db33      	blt.n	8001d06 <evt3_execute.lto_priv.155+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8001c9e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6373      	str	r3, [r6, #52]	; 0x34
 8001ca4:	f383 8811 	msr	BASEPRI, r3
 8001ca8:	fab5 f185 	clz	r1, r5
 8001cac:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f004 f956 	bl	8005f60 <_test_assert>
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d191      	bne.n	8001bde <evt3_execute.lto_priv.155+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8001cba:	69a4      	ldr	r4, [r4, #24]
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8001cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	d008      	beq.n	8001cda <evt3_execute.lto_priv.155+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8001cce:	200b      	movs	r0, #11
 8001cd0:	210a      	movs	r1, #10
 8001cd2:	f005 f985 	bl	8006fe0 <chSchGoSleepTimeoutS>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	db19      	blt.n	8001d0e <evt3_execute.lto_priv.155+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8001cde:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8001ce2:	4629      	mov	r1, r5
}
 8001ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8001ce8:	2006      	movs	r0, #6
 8001cea:	f004 b939 	b.w	8005f60 <_test_assert>
 8001cee:	f380 8811 	msr	BASEPRI, r0
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e78e      	b.n	8001c14 <evt3_execute.lto_priv.155+0x54>
 8001cf6:	6358      	str	r0, [r3, #52]	; 0x34
 8001cf8:	f380 8811 	msr	BASEPRI, r0
 8001cfc:	e79a      	b.n	8001c34 <evt3_execute.lto_priv.155+0x74>
 8001cfe:	f385 8811 	msr	BASEPRI, r5
 8001d02:	2101      	movs	r1, #1
 8001d04:	e7b7      	b.n	8001c76 <evt3_execute.lto_priv.155+0xb6>
 8001d06:	f385 8811 	msr	BASEPRI, r5
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	e7cf      	b.n	8001cae <evt3_execute.lto_priv.155+0xee>
 8001d0e:	f385 8811 	msr	BASEPRI, r5
 8001d12:	2501      	movs	r5, #1
 8001d14:	e7e5      	b.n	8001ce2 <evt3_execute.lto_priv.155+0x122>
 8001d16:	bf00      	nop
 8001d18:	20001e40 	.word	0x20001e40
 8001d1c:	f3af 8000 	nop.w

08001d20 <evt3_setup.lto_priv.154>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8001d20:	f007 b9b6 	b.w	8009090 <chEvtGetAndClearEvents.constprop.43>
 8001d24:	f3af 8000 	nop.w
 8001d28:	f3af 8000 	nop.w
 8001d2c:	f3af 8000 	nop.w

08001d30 <evt2_execute.lto_priv.153>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 8001d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d34:	2520      	movs	r5, #32
 8001d36:	b08d      	sub	sp, #52	; 0x34
 8001d38:	f385 8811 	msr	BASEPRI, r5
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();

  events = (currp->p_epending |= events);
 8001d3c:	4cad      	ldr	r4, [pc, #692]	; (8001ff4 <evt2_execute.lto_priv.153+0x2c4>)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	69a2      	ldr	r2, [r4, #24]
 8001d42:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d44:	f043 0307 	orr.w	r3, r3, #7
 8001d48:	6353      	str	r3, [r2, #52]	; 0x34
 8001d4a:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 8001d4e:	f007 f9af 	bl	80090b0 <chEvtWaitOne.constprop.39>
  test_assert(1, m == 1, "single event error");
 8001d52:	f1a0 0101 	sub.w	r1, r0, #1
 8001d56:	fab1 f181 	clz	r1, r1
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	0949      	lsrs	r1, r1, #5
 8001d5e:	f004 f8ff 	bl	8005f60 <_test_assert>
 8001d62:	b110      	cbz	r0, 8001d6a <evt2_execute.lto_priv.153+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8001d64:	b00d      	add	sp, #52	; 0x34
 8001d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 8001d6a:	f007 f9a1 	bl	80090b0 <chEvtWaitOne.constprop.39>
  test_assert(2, m == 2, "single event error");
 8001d6e:	f1a0 0102 	sub.w	r1, r0, #2
 8001d72:	fab1 f181 	clz	r1, r1
 8001d76:	2002      	movs	r0, #2
 8001d78:	0949      	lsrs	r1, r1, #5
 8001d7a:	f004 f8f1 	bl	8005f60 <_test_assert>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d1f0      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8001d82:	f007 f995 	bl	80090b0 <chEvtWaitOne.constprop.39>
  test_assert(3, m == 4, "single event error");
 8001d86:	f1a0 0104 	sub.w	r1, r0, #4
 8001d8a:	fab1 f181 	clz	r1, r1
 8001d8e:	2003      	movs	r0, #3
 8001d90:	0949      	lsrs	r1, r1, #5
 8001d92:	f004 f8e5 	bl	8005f60 <_test_assert>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d1e4      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001d9a:	f007 f979 	bl	8009090 <chEvtGetAndClearEvents.constprop.43>
  test_assert(4, m == 0, "stuck event");
 8001d9e:	fab0 f180 	clz	r1, r0
 8001da2:	2004      	movs	r0, #4
 8001da4:	0949      	lsrs	r1, r1, #5
 8001da6:	f004 f8db 	bl	8005f60 <_test_assert>
 8001daa:	4606      	mov	r6, r0
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1d9      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8001db0:	f003 ff3e 	bl	8005c30 <test_wait_tick>
 8001db4:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001db8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8001dbc:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8001dc0:	b2bf      	uxth	r7, r7
 8001dc2:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001dc6:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001dc8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	488a      	ldr	r0, [pc, #552]	; (8001ff8 <evt2_execute.lto_priv.153+0x2c8>)
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4b89      	ldr	r3, [pc, #548]	; (8001ffc <evt2_execute.lto_priv.153+0x2cc>)
 8001dd6:	f005 f863 	bl	8006ea0 <chThdCreateStatic>
 8001dda:	4e89      	ldr	r6, [pc, #548]	; (8002000 <evt2_execute.lto_priv.153+0x2d0>)
 8001ddc:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8001dde:	f007 f967 	bl	80090b0 <chEvtWaitOne.constprop.39>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8001de2:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8001de6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8001dea:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8001dec:	b289      	uxth	r1, r1
 8001dee:	b292      	uxth	r2, r2
 8001df0:	2005      	movs	r0, #5
 8001df2:	f003 ff5d 	bl	8005cb0 <_test_assert_time_window>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1b4      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>
  test_assert(6, m == 1, "single event error");
 8001dfa:	f1a9 0101 	sub.w	r1, r9, #1
 8001dfe:	fab1 f181 	clz	r1, r1
 8001e02:	2006      	movs	r0, #6
 8001e04:	0949      	lsrs	r1, r1, #5
 8001e06:	f004 f8ab 	bl	8005f60 <_test_assert>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d1aa      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001e0e:	f007 f93f 	bl	8009090 <chEvtGetAndClearEvents.constprop.43>
  test_assert(7, m == 0, "stuck event");
 8001e12:	fab0 f180 	clz	r1, r0
 8001e16:	2007      	movs	r0, #7
 8001e18:	0949      	lsrs	r1, r1, #5
 8001e1a:	f004 f8a1 	bl	8005f60 <_test_assert>
 8001e1e:	4607      	mov	r7, r0
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d19f      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>
  test_wait_threads();
 8001e24:	f003 ff14 	bl	8005c50 <test_wait_threads>
 8001e28:	f385 8811 	msr	BASEPRI, r5
 8001e2c:	69a2      	ldr	r2, [r4, #24]
 8001e2e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e30:	f043 0305 	orr.w	r3, r3, #5
 8001e34:	6353      	str	r3, [r2, #52]	; 0x34
 8001e36:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8001e3a:	f007 f959 	bl	80090f0 <chEvtWaitAny.constprop.38>
  test_assert(8, m == 5, "unexpected pending bit");
 8001e3e:	1f47      	subs	r7, r0, #5
 8001e40:	4279      	negs	r1, r7
 8001e42:	4179      	adcs	r1, r7
 8001e44:	2008      	movs	r0, #8
 8001e46:	f004 f88b 	bl	8005f60 <_test_assert>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d18a      	bne.n	8001d64 <evt2_execute.lto_priv.153+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001e4e:	f007 f91f 	bl	8009090 <chEvtGetAndClearEvents.constprop.43>
  test_assert(9, m == 0, "stuck event");
 8001e52:	fab0 f180 	clz	r1, r0
 8001e56:	2009      	movs	r0, #9
 8001e58:	0949      	lsrs	r1, r1, #5
 8001e5a:	f004 f881 	bl	8005f60 <_test_assert>
 8001e5e:	4607      	mov	r7, r0
 8001e60:	2800      	cmp	r0, #0
 8001e62:	f47f af7f 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8001e66:	f003 fee3 	bl	8005c30 <test_wait_tick>
 8001e6a:	f385 8811 	msr	BASEPRI, r5
 8001e6e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8001e72:	b2ad      	uxth	r5, r5
 8001e74:	f387 8811 	msr	BASEPRI, r7
 8001e78:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001e7a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	485d      	ldr	r0, [pc, #372]	; (8001ff8 <evt2_execute.lto_priv.153+0x2c8>)
 8001e82:	3a01      	subs	r2, #1
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <evt2_execute.lto_priv.153+0x2cc>)
 8001e88:	f005 f80a 	bl	8006ea0 <chThdCreateStatic>
 8001e8c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8001e8e:	f007 f92f 	bl	80090f0 <chEvtWaitAny.constprop.38>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8001e92:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8001e96:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8001e9a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8001e9c:	b289      	uxth	r1, r1
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f003 ff05 	bl	8005cb0 <_test_assert_time_window>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	f47f af5c 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>
  test_assert(11, m == 1, "single event error");
 8001eac:	1e78      	subs	r0, r7, #1
 8001eae:	4241      	negs	r1, r0
 8001eb0:	4141      	adcs	r1, r0
 8001eb2:	200b      	movs	r0, #11
 8001eb4:	f004 f854 	bl	8005f60 <_test_assert>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	f47f af53 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001ebe:	f007 f8e7 	bl	8009090 <chEvtGetAndClearEvents.constprop.43>
  test_assert(12, m == 0, "stuck event");
 8001ec2:	fab0 f180 	clz	r1, r0
 8001ec6:	200c      	movs	r0, #12
 8001ec8:	0949      	lsrs	r1, r1, #5
 8001eca:	f004 f849 	bl	8005f60 <_test_assert>
 8001ece:	4680      	mov	r8, r0
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	f47f af47 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>
  test_wait_threads();
 8001ed6:	f003 febb 	bl	8005c50 <test_wait_threads>
 8001eda:	4d4a      	ldr	r5, [pc, #296]	; (8002004 <evt2_execute.lto_priv.153+0x2d4>)
 8001edc:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <evt2_execute.lto_priv.153+0x2d8>)
 8001ede:	602d      	str	r5, [r5, #0]
 8001ee0:	601b      	str	r3, [r3, #0]
 8001ee2:	f04f 0b20 	mov.w	fp, #32
 8001ee6:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001eea:	6829      	ldr	r1, [r5, #0]
 8001eec:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001ef0:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8001ef2:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001ef4:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8001efc:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001f00:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 8001f02:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8001f04:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8001f08:	9006      	str	r0, [sp, #24]
 8001f0a:	f388 8811 	msr	BASEPRI, r8
 8001f0e:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001f18:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 8001f1a:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8001f1c:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8001f20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 8001f24:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8001f26:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 8001f28:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8001f2a:	f8c3 9000 	str.w	r9, [r3]
 8001f2e:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 8001f32:	f003 fe7d 	bl	8005c30 <test_wait_tick>
 8001f36:	f38b 8811 	msr	BASEPRI, fp
 8001f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8001f40:	b2bf      	uxth	r7, r7
 8001f42:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001f46:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <evt2_execute.lto_priv.153+0x2dc>)
 8001f4a:	6892      	ldr	r2, [r2, #8]
 8001f4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	3a01      	subs	r2, #1
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <evt2_execute.lto_priv.153+0x2e0>)
 8001f56:	4828      	ldr	r0, [pc, #160]	; (8001ff8 <evt2_execute.lto_priv.153+0x2c8>)
 8001f58:	f004 ffa2 	bl	8006ea0 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8001f5c:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8001f60:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8001f64:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8001f66:	6030      	str	r0, [r6, #0]
 8001f68:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8001f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f6e:	f003 0205 	and.w	r2, r3, #5
 8001f72:	2a05      	cmp	r2, #5
 8001f74:	d005      	beq.n	8001f82 <evt2_execute.lto_priv.153+0x252>
    ctp->p_u.ewmask = events;
 8001f76:	2305      	movs	r3, #5
 8001f78:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8001f7a:	200b      	movs	r0, #11
 8001f7c:	f004 ffd0 	bl	8006f20 <chSchGoSleepS>
 8001f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8001f82:	f023 0305 	bic.w	r3, r3, #5
 8001f86:	6363      	str	r3, [r4, #52]	; 0x34
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8001f8e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8001f92:	b292      	uxth	r2, r2
 8001f94:	4641      	mov	r1, r8
 8001f96:	200d      	movs	r0, #13
 8001f98:	f003 fe8a 	bl	8005cb0 <_test_assert_time_window>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	f47f aee1 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8001fa2:	f007 f875 	bl	8009090 <chEvtGetAndClearEvents.constprop.43>
  test_assert(14, m == 0, "stuck event");
 8001fa6:	fab0 f180 	clz	r1, r0
 8001faa:	200e      	movs	r0, #14
 8001fac:	0949      	lsrs	r1, r1, #5
 8001fae:	f003 ffd7 	bl	8005f60 <_test_assert>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	f47f aed6 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8001fb8:	4c13      	ldr	r4, [pc, #76]	; (8002008 <evt2_execute.lto_priv.153+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8001fba:	f003 fe49 	bl	8005c50 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	4810      	ldr	r0, [pc, #64]	; (8002004 <evt2_execute.lto_priv.153+0x2d4>)
 8001fc2:	f004 fd75 	bl	8006ab0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f004 fd71 	bl	8006ab0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 8001fce:	6829      	ldr	r1, [r5, #0]
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	1b4a      	subs	r2, r1, r5
 8001fd4:	4251      	negs	r1, r2
 8001fd6:	4151      	adcs	r1, r2
 8001fd8:	f003 ffc2 	bl	8005f60 <_test_assert>
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	f47f aec1 	bne.w	8001d64 <evt2_execute.lto_priv.153+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8001fe2:	6821      	ldr	r1, [r4, #0]
 8001fe4:	2010      	movs	r0, #16
 8001fe6:	1b0b      	subs	r3, r1, r4
 8001fe8:	4259      	negs	r1, r3
 8001fea:	4159      	adcs	r1, r3
 8001fec:	f003 ffb8 	bl	8005f60 <_test_assert>
 8001ff0:	e6b8      	b.n	8001d64 <evt2_execute.lto_priv.153+0x34>
 8001ff2:	bf00      	nop
 8001ff4:	20001e40 	.word	0x20001e40
 8001ff8:	200017c8 	.word	0x200017c8
 8001ffc:	08002061 	.word	0x08002061
 8002000:	20001710 	.word	0x20001710
 8002004:	20000800 	.word	0x20000800
 8002008:	20000810 	.word	0x20000810
 800200c:	080097f0 	.word	0x080097f0
 8002010:	08002021 	.word	0x08002021
 8002014:	f3af 8000 	nop.w
 8002018:	f3af 8000 	nop.w
 800201c:	f3af 8000 	nop.w

08002020 <thread2>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	2520      	movs	r5, #32
 8002024:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <thread2+0x38>)
 800202a:	2100      	movs	r1, #0
 800202c:	f004 fd28 	bl	8006a80 <chEvtBroadcastFlagsI>
 8002030:	2400      	movs	r4, #0
  chSchRescheduleS();
 8002032:	f004 fe45 	bl	8006cc0 <chSchRescheduleS>
 8002036:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 800203a:	2064      	movs	r0, #100	; 0x64
 800203c:	f005 f840 	bl	80070c0 <chThdSleep>
 8002040:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <thread2+0x3c>)
 8002046:	4621      	mov	r1, r4
 8002048:	f004 fd1a 	bl	8006a80 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800204c:	f004 fe38 	bl	8006cc0 <chSchRescheduleS>
 8002050:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 8002054:	4620      	mov	r0, r4
 8002056:	bd38      	pop	{r3, r4, r5, pc}
 8002058:	20000800 	.word	0x20000800
 800205c:	20000810 	.word	0x20000810

08002060 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8002064:	2064      	movs	r0, #100	; 0x64
 8002066:	f005 f82b 	bl	80070c0 <chThdSleep>
 800206a:	2320      	movs	r3, #32
 800206c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8002070:	2101      	movs	r1, #1
 8002072:	4620      	mov	r0, r4
 8002074:	f004 fbbc 	bl	80067f0 <chEvtSignalI>
  chSchRescheduleS();
 8002078:	f004 fe22 	bl	8006cc0 <chSchRescheduleS>
 800207c:	2000      	movs	r0, #0
 800207e:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8002082:	bd10      	pop	{r4, pc}
 8002084:	f3af 8000 	nop.w
 8002088:	f3af 8000 	nop.w
 800208c:	f3af 8000 	nop.w

08002090 <regfind.lto_priv.112>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4605      	mov	r5, r0
 8002094:	2320      	movs	r3, #32
 8002096:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <regfind.lto_priv.112+0x34>)
 800209c:	2400      	movs	r4, #0
 800209e:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 80020a0:	7f9a      	ldrb	r2, [r3, #30]
 80020a2:	3201      	adds	r2, #1
 80020a4:	779a      	strb	r2, [r3, #30]
 80020a6:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 80020aa:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 80020ac:	42ab      	cmp	r3, r5
 80020ae:	bf08      	it	eq
 80020b0:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 80020b4:	f004 fd44 	bl	8006b40 <chRegNextThread>
  } while (ftp != NULL);
 80020b8:	4603      	mov	r3, r0
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d1f5      	bne.n	80020aa <regfind.lto_priv.112+0x1a>
  return found;
}
 80020be:	4620      	mov	r0, r4
 80020c0:	bd38      	pop	{r3, r4, r5, pc}
 80020c2:	bf00      	nop
 80020c4:	20001e40 	.word	0x20001e40
 80020c8:	f3af 8000 	nop.w
 80020cc:	f3af 8000 	nop.w

080020d0 <spicb.lto_priv.77>:
 80020d0:	2320      	movs	r3, #32
 80020d2:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80020d6:	6842      	ldr	r2, [r0, #4]
 80020d8:	2301      	movs	r3, #1
 80020da:	8911      	ldrh	r1, [r2, #8]
 80020dc:	6852      	ldr	r2, [r2, #4]
 80020de:	408b      	lsls	r3, r1
 80020e0:	6113      	str	r3, [r2, #16]
 80020e2:	2300      	movs	r3, #0
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w

080020f0 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 80020f0:	2902      	cmp	r1, #2
 80020f2:	d006      	beq.n	8002102 <get_descriptor+0x12>
 80020f4:	2903      	cmp	r1, #3
 80020f6:	d006      	beq.n	8002106 <get_descriptor+0x16>
 80020f8:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <get_descriptor+0x24>)
 80020fc:	bf18      	it	ne
 80020fe:	2000      	movne	r0, #0
 8002100:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <get_descriptor+0x28>)
 8002104:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8002106:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8002108:	bf9a      	itte	ls
 800210a:	4b04      	ldrls	r3, [pc, #16]	; (800211c <get_descriptor+0x2c>)
 800210c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8002110:	2000      	movhi	r0, #0
}
 8002112:	4770      	bx	lr
 8002114:	08009880 	.word	0x08009880
 8002118:	080099c0 	.word	0x080099c0
 800211c:	080098f0 	.word	0x080098f0

08002120 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 8002120:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8002124:	46b0      	mov	r8, r6
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <Thread1+0x38>)
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <Thread1+0x3c>)
 800212a:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 800212c:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 800212e:	4d0c      	ldr	r5, [pc, #48]	; (8002160 <Thread1+0x40>)
 8002130:	4f0c      	ldr	r7, [pc, #48]	; (8002164 <Thread1+0x44>)
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8002132:	619a      	str	r2, [r3, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8002134:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOB, GPIOB_LED);
 8002136:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf0c      	ite	eq
 800213e:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 8002142:	f44f 747a 	movne.w	r4, #1000	; 0x3e8
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 8002146:	4620      	mov	r0, r4
 8002148:	f004 ffba 	bl	80070c0 <chThdSleep>
    palSetPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 800214c:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOB, GPIOB_LED);
 800214e:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8002150:	f004 ffb6 	bl	80070c0 <chThdSleep>
 8002154:	e7ee      	b.n	8002134 <Thread1+0x14>
 8002156:	bf00      	nop
 8002158:	20001e40 	.word	0x20001e40
 800215c:	080099d0 	.word	0x080099d0
 8002160:	40010c00 	.word	0x40010c00
 8002164:	20001200 	.word	0x20001200
 8002168:	f3af 8000 	nop.w
 800216c:	f3af 8000 	nop.w

08002170 <switch_off_callback.lto_priv.79>:
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8002170:	4903      	ldr	r1, [pc, #12]	; (8002180 <switch_off_callback.lto_priv.79+0x10>)
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <switch_off_callback.lto_priv.79+0x14>)
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8002174:	2010      	movs	r0, #16
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 8002176:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 800217a:	6148      	str	r0, [r1, #20]
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	4770      	bx	lr
 8002180:	40010c00 	.word	0x40010c00
 8002184:	40010800 	.word	0x40010800
 8002188:	f3af 8000 	nop.w
 800218c:	f3af 8000 	nop.w

08002190 <switch_output_callback.lto_priv.78>:
  GPIOA,
  GPIOA_NSEL,
  SPI_CR1_MSTR | SPI_CR1_BR_0
};

static void switch_output_callback(GPTDriver *gpt_ptr) {
 8002190:	b508      	push	{r3, lr}
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <switch_output_callback.lto_priv.78+0x24>)
 8002194:	2210      	movs	r2, #16
 8002196:	611a      	str	r2, [r3, #16]
 8002198:	2320      	movs	r3, #32
 800219a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <switch_output_callback.lto_priv.78+0x28>)
 80021a0:	2204      	movs	r2, #4
  gpt_lld_start_timer(gptp, interval);
 80021a2:	4618      	mov	r0, r3
 80021a4:	2123      	movs	r1, #35	; 0x23
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80021a6:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
 80021a8:	f005 fe02 	bl	8007db0 <gpt_lld_start_timer>
 80021ac:	2300      	movs	r3, #0
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	bd08      	pop	{r3, pc}
 80021b4:	40010c00 	.word	0x40010c00
 80021b8:	20001f94 	.word	0x20001f94
 80021bc:	f3af 8000 	nop.w

080021c0 <chprintf.lto_priv.82>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80021c0:	b40e      	push	{r1, r2, r3}
 80021c2:	b500      	push	{lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	ab03      	add	r3, sp, #12
 80021c8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80021cc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80021ce:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80021d0:	f005 ffce 	bl	8008170 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80021d4:	b002      	add	sp, #8
 80021d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80021da:	b003      	add	sp, #12
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <silabs_get_part_id>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
 80021e0:	b931      	cbnz	r1, 80021f0 <silabs_get_part_id+0x10>
		chprintf(chp, "Gets part ID, Usage: p \r\n");
		return;
	}
	chprintf(chp, "%4X\r\n",__REV16(Silabs_Part_ID));/* Fix endianess */
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <silabs_get_part_id+0x18>)
 80021e4:	881a      	ldrh	r2, [r3, #0]
 80021e6:	b292      	uxth	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80021e8:	ba52      	rev16	r2, r2
 80021ea:	4904      	ldr	r1, [pc, #16]	; (80021fc <silabs_get_part_id+0x1c>)
 80021ec:	f7ff bfe8 	b.w	80021c0 <chprintf.lto_priv.82>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
		chprintf(chp, "Gets part ID, Usage: p \r\n");
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <silabs_get_part_id+0x20>)
 80021f2:	f7ff bfe5 	b.w	80021c0 <chprintf.lto_priv.82>
 80021f6:	bf00      	nop
 80021f8:	200017b0 	.word	0x200017b0
 80021fc:	080099f4 	.word	0x080099f4
 8002200:	080099d8 	.word	0x080099d8
 8002204:	f3af 8000 	nop.w
 8002208:	f3af 8000 	nop.w
 800220c:	f3af 8000 	nop.w

08002210 <silabs_set_header>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8002210:	2901      	cmp	r1, #1
 8002212:	d128      	bne.n	8002266 <silabs_set_header+0x56>
	Command=7;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002214:	b538      	push	{r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
		return;
	}
	if (strlen(argv[0]) != 5) {
 8002216:	6815      	ldr	r5, [r2, #0]
 8002218:	4604      	mov	r4, r0
 800221a:	4628      	mov	r0, r5
 800221c:	f007 f9e0 	bl	80095e0 <strlen>
 8002220:	2805      	cmp	r0, #5
 8002222:	d005      	beq.n	8002230 <silabs_set_header+0x20>
		chprintf(chp, "<packet_header> must be exactly 5 characters\r\n");
 8002224:	4620      	mov	r0, r4
	}
	strncpy(Command_string,argv[0],5);
	Command=6;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8002226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
		return;
	}
	if (strlen(argv[0]) != 5) {
		chprintf(chp, "<packet_header> must be exactly 5 characters\r\n");
 800222a:	4912      	ldr	r1, [pc, #72]	; (8002274 <silabs_set_header+0x64>)
 800222c:	f7ff bfc8 	b.w	80021c0 <chprintf.lto_priv.82>
		return;
	}
	strncpy(Command_string,argv[0],5);
 8002230:	4602      	mov	r2, r0
 8002232:	4629      	mov	r1, r5
 8002234:	4810      	ldr	r0, [pc, #64]	; (8002278 <silabs_set_header+0x68>)
 8002236:	f007 fa03 	bl	8009640 <strncpy>
	Command=6;	
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <silabs_set_header+0x6c>)
 800223c:	2206      	movs	r2, #6
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	2320      	movs	r3, #32
 8002242:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8002246:	480e      	ldr	r0, [pc, #56]	; (8002280 <silabs_set_header+0x70>)
 8002248:	6883      	ldr	r3, [r0, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	dd0e      	ble.n	800226c <silabs_set_header+0x5c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800224e:	f004 fd37 	bl	8006cc0 <chSchRescheduleS>
 8002252:	2300      	movs	r3, #0
 8002254:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8002258:	480a      	ldr	r0, [pc, #40]	; (8002284 <silabs_set_header+0x74>)
 800225a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800225e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002262:	f004 bf05 	b.w	8007070 <chSemWaitTimeout>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_set_header(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sets a packet header for use with 'w' command, Usage: h <packet_header>\r\n");
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <silabs_set_header+0x78>)
 8002268:	f7ff bfaa 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800226c:	f005 f820 	bl	80072b0 <chSemSignalI>
 8002270:	e7ed      	b.n	800224e <silabs_set_header+0x3e>
 8002272:	bf00      	nop
 8002274:	08009a48 	.word	0x08009a48
 8002278:	200017c0 	.word	0x200017c0
 800227c:	20001780 	.word	0x20001780
 8002280:	200017a4 	.word	0x200017a4
 8002284:	200017b4 	.word	0x200017b4
 8002288:	080099fc 	.word	0x080099fc
 800228c:	f3af 8000 	nop.w

08002290 <silabs_send_packet>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8002290:	2901      	cmp	r1, #1
 8002292:	d128      	bne.n	80022e6 <silabs_send_packet+0x56>
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002294:	b538      	push	{r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
		return;
	}
	if (strlen(argv[0]) != 1) {
 8002296:	6815      	ldr	r5, [r2, #0]
 8002298:	4604      	mov	r4, r0
 800229a:	4628      	mov	r0, r5
 800229c:	f007 f9a0 	bl	80095e0 <strlen>
 80022a0:	2801      	cmp	r0, #1
 80022a2:	d005      	beq.n	80022b0 <silabs_send_packet+0x20>
		chprintf(chp, "<packet> must be exactly 1 character\r\n");
 80022a4:	4620      	mov	r0, r4
	}
	strncpy(Command_string,argv[0],1);
	Command=7;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 80022a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
		return;
	}
	if (strlen(argv[0]) != 1) {
		chprintf(chp, "<packet> must be exactly 1 character\r\n");
 80022aa:	4912      	ldr	r1, [pc, #72]	; (80022f4 <silabs_send_packet+0x64>)
 80022ac:	f7ff bf88 	b.w	80021c0 <chprintf.lto_priv.82>
		return;
	}
	strncpy(Command_string,argv[0],1);
 80022b0:	4602      	mov	r2, r0
 80022b2:	4629      	mov	r1, r5
 80022b4:	4810      	ldr	r0, [pc, #64]	; (80022f8 <silabs_send_packet+0x68>)
 80022b6:	f007 f9c3 	bl	8009640 <strncpy>
	Command=7;	
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <silabs_send_packet+0x6c>)
 80022bc:	2207      	movs	r2, #7
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	2320      	movs	r3, #32
 80022c2:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <silabs_send_packet+0x70>)
 80022c8:	6883      	ldr	r3, [r0, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dd0f      	ble.n	80022ee <silabs_send_packet+0x5e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80022ce:	f004 fcf7 	bl	8006cc0 <chSchRescheduleS>
 80022d2:	2300      	movs	r3, #0
 80022d4:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <silabs_send_packet+0x74>)
 80022da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 80022de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022e2:	f004 bec5 	b.w	8007070 <chSemWaitTimeout>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_send_packet(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: w <packet>\r\n Packet is proceeded by packet header (set this first, default '%s')\r\n",DEFAULT_HEADER);
 80022e6:	4908      	ldr	r1, [pc, #32]	; (8002308 <silabs_send_packet+0x78>)
 80022e8:	4a08      	ldr	r2, [pc, #32]	; (800230c <silabs_send_packet+0x7c>)
 80022ea:	f7ff bf69 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80022ee:	f004 ffdf 	bl	80072b0 <chSemSignalI>
 80022f2:	e7ec      	b.n	80022ce <silabs_send_packet+0x3e>
 80022f4:	08009aec 	.word	0x08009aec
 80022f8:	200017c0 	.word	0x200017c0
 80022fc:	20001780 	.word	0x20001780
 8002300:	200017a4 	.word	0x200017a4
 8002304:	200017b4 	.word	0x200017b4
 8002308:	08009a78 	.word	0x08009a78
 800230c:	08009ae4 	.word	0x08009ae4

08002310 <silabs_send_command>:
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8002310:	2901      	cmp	r1, #1
 8002312:	d128      	bne.n	8002366 <silabs_send_command+0x56>
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002314:	b538      	push	{r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
 8002316:	6815      	ldr	r5, [r2, #0]
 8002318:	4604      	mov	r4, r0
 800231a:	4628      	mov	r0, r5
 800231c:	f007 f960 	bl	80095e0 <strlen>
 8002320:	2806      	cmp	r0, #6
 8002322:	d005      	beq.n	8002330 <silabs_send_command+0x20>
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8002324:	4620      	mov	r0, r4
	}
	strncpy(Command_string,argv[0],6);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8002326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 800232a:	4912      	ldr	r1, [pc, #72]	; (8002374 <silabs_send_command+0x64>)
 800232c:	f7ff bf48 	b.w	80021c0 <chprintf.lto_priv.82>
		return;
	}
	strncpy(Command_string,argv[0],6);
 8002330:	4602      	mov	r2, r0
 8002332:	4629      	mov	r1, r5
 8002334:	4810      	ldr	r0, [pc, #64]	; (8002378 <silabs_send_command+0x68>)
 8002336:	f007 f983 	bl	8009640 <strncpy>
	Command=3;	
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <silabs_send_command+0x6c>)
 800233c:	2203      	movs	r2, #3
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	2320      	movs	r3, #32
 8002342:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <silabs_send_command+0x70>)
 8002348:	6883      	ldr	r3, [r0, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	dd0e      	ble.n	800236c <silabs_send_command+0x5c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800234e:	f004 fcb7 	bl	8006cc0 <chSchRescheduleS>
 8002352:	2300      	movs	r3, #0
 8002354:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8002358:	480a      	ldr	r0, [pc, #40]	; (8002384 <silabs_send_command+0x74>)
 800235a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800235e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002362:	f004 be85 	b.w	8007070 <chSemWaitTimeout>
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <silabs_send_command+0x78>)
 8002368:	f7ff bf2a 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800236c:	f004 ffa0 	bl	80072b0 <chSemSignalI>
 8002370:	e7ed      	b.n	800234e <silabs_send_command+0x3e>
 8002372:	bf00      	nop
 8002374:	08009b38 	.word	0x08009b38
 8002378:	200017c0 	.word	0x200017c0
 800237c:	20001780 	.word	0x20001780
 8002380:	200017a4 	.word	0x200017a4
 8002384:	200017b4 	.word	0x200017b4
 8002388:	08009b14 	.word	0x08009b14
 800238c:	f3af 8000 	nop.w

08002390 <silabs_set_channel>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8002390:	2900      	cmp	r1, #0
 8002392:	dc10      	bgt.n	80023b6 <silabs_set_channel+0x26>
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002394:	b538      	push	{r3, r4, r5, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
		return;
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
 8002396:	6815      	ldr	r5, [r2, #0]
 8002398:	4604      	mov	r4, r0
 800239a:	4628      	mov	r0, r5
 800239c:	f007 f920 	bl	80095e0 <strlen>
 80023a0:	2801      	cmp	r0, #1
 80023a2:	d102      	bne.n	80023aa <silabs_set_channel+0x1a>
 80023a4:	782b      	ldrb	r3, [r5, #0]
 80023a6:	2b38      	cmp	r3, #56	; 0x38
 80023a8:	dd08      	ble.n	80023bc <silabs_set_channel+0x2c>
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
 80023aa:	4620      	mov	r0, r4
	Command=5;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
	}
}
 80023ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
		return;
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
 80023b0:	4914      	ldr	r1, [pc, #80]	; (8002404 <silabs_set_channel+0x74>)
 80023b2:	f7ff bf05 	b.w	80021c0 <chprintf.lto_priv.82>
	}
}

void silabs_set_channel(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes to a channel, Usage: c <channel 0 to 8>\r\n");
 80023b6:	4914      	ldr	r1, [pc, #80]	; (8002408 <silabs_set_channel+0x78>)
 80023b8:	f7ff bf02 	b.w	80021c0 <chprintf.lto_priv.82>
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
		return;
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
 80023bc:	4d13      	ldr	r5, [pc, #76]	; (800240c <silabs_set_channel+0x7c>)
	Command=5;
 80023be:	4a14      	ldr	r2, [pc, #80]	; (8002410 <silabs_set_channel+0x80>)
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
		return;
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
 80023c0:	3b30      	subs	r3, #48	; 0x30
 80023c2:	b2db      	uxtb	r3, r3
	Command=5;
 80023c4:	2105      	movs	r1, #5
	}
	if (strlen(argv[0]) != 1 || ((uint8_t*)(argv[0]))[0]-48>8) {
		chprintf(chp, "<channel> must be exactly 1 character and in 0-8 range\r\n");
		return;
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
 80023c6:	702b      	strb	r3, [r5, #0]
 80023c8:	2320      	movs	r3, #32
	Command=5;
 80023ca:	7011      	strb	r1, [r2, #0]
 80023cc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80023d0:	4810      	ldr	r0, [pc, #64]	; (8002414 <silabs_set_channel+0x84>)
 80023d2:	6883      	ldr	r3, [r0, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	dd12      	ble.n	80023fe <silabs_set_channel+0x6e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80023d8:	f004 fc72 	bl	8006cc0 <chSchRescheduleS>
 80023dc:	2300      	movs	r3, #0
 80023de:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80023e2:	480d      	ldr	r0, [pc, #52]	; (8002418 <silabs_set_channel+0x88>)
 80023e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023e8:	f004 fe42 	bl	8007070 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80023ec:	b100      	cbz	r0, 80023f0 <silabs_set_channel+0x60>
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
 80023f0:	782a      	ldrb	r2, [r5, #0]
 80023f2:	4620      	mov	r0, r4
	}
}
 80023f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
	Active_channel=((uint8_t*)(argv[0]))[0]-48;
	Command=5;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Channel is: %u\r\n",Active_channel);
 80023f8:	4908      	ldr	r1, [pc, #32]	; (800241c <silabs_set_channel+0x8c>)
 80023fa:	f7ff bee1 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80023fe:	f004 ff57 	bl	80072b0 <chSemSignalI>
 8002402:	e7e9      	b.n	80023d8 <silabs_set_channel+0x48>
 8002404:	08009b90 	.word	0x08009b90
 8002408:	08009b60 	.word	0x08009b60
 800240c:	20001790 	.word	0x20001790
 8002410:	20001780 	.word	0x20001780
 8002414:	200017a4 	.word	0x200017a4
 8002418:	200017b4 	.word	0x200017b4
 800241c:	08009bcc 	.word	0x08009bcc

08002420 <silabs_tune_reset>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_reset(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8002420:	2900      	cmp	r1, #0
 8002422:	dd02      	ble.n	800242a <silabs_tune_reset+0xa>
		chprintf(chp, "Tunes to default frequency, Usage: r\r\n");
 8002424:	4912      	ldr	r1, [pc, #72]	; (8002470 <silabs_tune_reset+0x50>)
 8002426:	f7ff becb 	b.w	80021c0 <chprintf.lto_priv.82>
		return;
	}
	Command=4;
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <silabs_tune_reset+0x54>)
 800242c:	2204      	movs	r2, #4
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_reset(BaseSequentialStream *chp, int argc, char *argv[]) {
 800242e:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes to default frequency, Usage: r\r\n");
		return;
	}
	Command=4;
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	4604      	mov	r4, r0
 8002434:	2320      	movs	r3, #32
 8002436:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800243a:	480f      	ldr	r0, [pc, #60]	; (8002478 <silabs_tune_reset+0x58>)
 800243c:	6883      	ldr	r3, [r0, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	dd13      	ble.n	800246a <silabs_tune_reset+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002442:	f004 fc3d 	bl	8006cc0 <chSchRescheduleS>
 8002446:	2300      	movs	r3, #0
 8002448:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <silabs_tune_reset+0x5c>)
 800244e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002452:	f004 fe0d 	bl	8007070 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 8002456:	b100      	cbz	r0, 800245a <silabs_tune_reset+0x3a>
 8002458:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <silabs_tune_reset+0x60>)
 800245c:	4620      	mov	r0, r4
	}
}
 800245e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=4;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <silabs_tune_reset+0x64>)
 8002466:	f7ff beab 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800246a:	f004 ff21 	bl	80072b0 <chSemSignalI>
 800246e:	e7e8      	b.n	8002442 <silabs_tune_reset+0x22>
 8002470:	08009be0 	.word	0x08009be0
 8002474:	20001780 	.word	0x20001780
 8002478:	200017a4 	.word	0x200017a4
 800247c:	200017b4 	.word	0x200017b4
 8002480:	20000ca8 	.word	0x20000ca8
 8002484:	08009c08 	.word	0x08009c08
 8002488:	f3af 8000 	nop.w
 800248c:	f3af 8000 	nop.w

08002490 <silabs_tune_down>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8002490:	2900      	cmp	r1, #0
 8002492:	dd02      	ble.n	800249a <silabs_tune_down+0xa>
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 8002494:	4912      	ldr	r1, [pc, #72]	; (80024e0 <silabs_tune_down+0x50>)
 8002496:	f7ff be93 	b.w	80021c0 <chprintf.lto_priv.82>
		return;
	}
	Command=2;
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <silabs_tune_down+0x54>)
 800249c:	2202      	movs	r2, #2
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
 800249e:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
		return;
	}
	Command=2;
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	4604      	mov	r4, r0
 80024a4:	2320      	movs	r3, #32
 80024a6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <silabs_tune_down+0x58>)
 80024ac:	6883      	ldr	r3, [r0, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	dd13      	ble.n	80024da <silabs_tune_down+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80024b2:	f004 fc05 	bl	8006cc0 <chSchRescheduleS>
 80024b6:	2300      	movs	r3, #0
 80024b8:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <silabs_tune_down+0x5c>)
 80024be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024c2:	f004 fdd5 	bl	8007070 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80024c6:	b100      	cbz	r0, 80024ca <silabs_tune_down+0x3a>
 80024c8:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <silabs_tune_down+0x60>)
 80024cc:	4620      	mov	r0, r4
	}
}
 80024ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <silabs_tune_down+0x64>)
 80024d6:	f7ff be73 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80024da:	f004 fee9 	bl	80072b0 <chSemSignalI>
 80024de:	e7e8      	b.n	80024b2 <silabs_tune_down+0x22>
 80024e0:	08009c1c 	.word	0x08009c1c
 80024e4:	20001780 	.word	0x20001780
 80024e8:	200017a4 	.word	0x200017a4
 80024ec:	200017b4 	.word	0x200017b4
 80024f0:	20000ca8 	.word	0x20000ca8
 80024f4:	08009c08 	.word	0x08009c08
 80024f8:	f3af 8000 	nop.w
 80024fc:	f3af 8000 	nop.w

08002500 <silabs_tune_up>:
#define DEFAULT_HEADER "$$ROK"

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8002500:	2900      	cmp	r1, #0
 8002502:	dd02      	ble.n	800250a <silabs_tune_up+0xa>
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 8002504:	4912      	ldr	r1, [pc, #72]	; (8002550 <silabs_tune_up+0x50>)
 8002506:	f7ff be5b 	b.w	80021c0 <chprintf.lto_priv.82>
		return;
	}
	Command=1;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <silabs_tune_up+0x54>)
 800250c:	2201      	movs	r2, #1
#define RSSI_THRESH -100
#define DEFAULT_HEADER "$$ROK"

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
 800250e:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
		return;
	}
	Command=1;
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	4604      	mov	r4, r0
 8002514:	2320      	movs	r3, #32
 8002516:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800251a:	480f      	ldr	r0, [pc, #60]	; (8002558 <silabs_tune_up+0x58>)
 800251c:	6883      	ldr	r3, [r0, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	dd13      	ble.n	800254a <silabs_tune_up+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002522:	f004 fbcd 	bl	8006cc0 <chSchRescheduleS>
 8002526:	2300      	movs	r3, #0
 8002528:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 800252c:	480b      	ldr	r0, [pc, #44]	; (800255c <silabs_tune_up+0x5c>)
 800252e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002532:	f004 fd9d 	bl	8007070 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 8002536:	b100      	cbz	r0, 800253a <silabs_tune_up+0x3a>
 8002538:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <silabs_tune_up+0x60>)
 800253c:	4620      	mov	r0, r4
	}
}
 800253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <silabs_tune_up+0x64>)
 8002546:	f7ff be3b 	b.w	80021c0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800254a:	f004 feb1 	bl	80072b0 <chSemSignalI>
 800254e:	e7e8      	b.n	8002522 <silabs_tune_up+0x22>
 8002550:	08009c3c 	.word	0x08009c3c
 8002554:	20001780 	.word	0x20001780
 8002558:	200017a4 	.word	0x200017a4
 800255c:	200017b4 	.word	0x200017b4
 8002560:	20000ca8 	.word	0x20000ca8
 8002564:	08009c08 	.word	0x08009c08
 8002568:	f3af 8000 	nop.w
 800256c:	f3af 8000 	nop.w

08002570 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8002570:	2902      	cmp	r1, #2
 8002572:	d149      	bne.n	8002608 <usb_event+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	4606      	mov	r6, r0
 8002578:	460d      	mov	r5, r1
 800257a:	2320      	movs	r3, #32
 800257c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8002580:	4c22      	ldr	r4, [pc, #136]	; (800260c <usb_event+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8002582:	2101      	movs	r1, #1
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <usb_event+0xa0>)
 8002586:	f000 ff6b 	bl	8003460 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800258a:	4630      	mov	r0, r6
 800258c:	4629      	mov	r1, r5
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <usb_event+0xa4>)
 8002590:	f000 ff66 	bl	8003460 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8002594:	69a3      	ldr	r3, [r4, #24]
 8002596:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800259a:	f104 070c 	add.w	r7, r4, #12
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800259e:	2500      	movs	r5, #0
 80025a0:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80025a2:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 80025a4:	6223      	str	r3, [r4, #32]
 80025a6:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80025a8:	f06f 0101 	mvn.w	r1, #1
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80025ac:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80025ae:	f004 feaf 	bl	8007310 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80025b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_counter = chQSizeI(oqp);
 80025b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80025b6:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeI(oqp);
 80025b8:	1a9b      	subs	r3, r3, r2
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80025ba:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_counter = chQSizeI(oqp);
 80025bc:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 80025be:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80025c2:	f06f 0101 	mvn.w	r1, #1
 80025c6:	f004 fea3 	bl	8007310 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80025ca:	1d20      	adds	r0, r4, #4
 80025cc:	2101      	movs	r1, #1
 80025ce:	f004 fa57 	bl	8006a80 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 80025d2:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80025d6:	2201      	movs	r2, #1
 80025d8:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80025da:	4630      	mov	r0, r6
 80025dc:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 80025e0:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 80025e2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80025e6:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80025e8:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80025ec:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 80025ee:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80025f0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80025f2:	f005 f96d 	bl	80078d0 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  usbStartReceiveI(usbp, sdup->config->bulk_out);
 80025f6:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 80025fa:	4630      	mov	r0, r6
 80025fc:	7959      	ldrb	r1, [r3, #5]
 80025fe:	f000 fc37 	bl	8002e70 <usbStartReceiveI>
 8002602:	f385 8811 	msr	BASEPRI, r5
 8002606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000128c 	.word	0x2000128c
 8002610:	08009f00 	.word	0x08009f00
 8002614:	08009820 	.word	0x08009820
 8002618:	f3af 8000 	nop.w
 800261c:	f3af 8000 	nop.w

08002620 <cmd_help>:
  chprintf(chp, "\r\n\nstopped\r\n");
}

static void cmd_help(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
 8002620:	2900      	cmp	r1, #0
 8002622:	dd02      	ble.n	800262a <cmd_help+0xa>
    chprintf(chp, "Usage: \r\n 'mem' runs cmd_mem: ChibiOS self test\r\n 'threads' runs cmd_threads: ChibiOS self test\r\n \
 8002624:	4901      	ldr	r1, [pc, #4]	; (800262c <cmd_help+0xc>)
 8002626:	f005 bfb3 	b.w	8008590 <chprintf.lto_priv.81>
 800262a:	4770      	bx	lr
 800262c:	08009c5c 	.word	0x08009c5c

08002630 <si446x_spi>:
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 8002630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 8002634:	2500      	movs	r5, #0
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 8002636:	b086      	sub	sp, #24
 8002638:	4617      	mov	r7, r2
 800263a:	4699      	mov	r9, r3
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 800263c:	9501      	str	r5, [sp, #4]
 800263e:	9502      	str	r5, [sp, #8]
 8002640:	9503      	str	r5, [sp, #12]
 8002642:	9504      	str	r5, [sp, #16]
 8002644:	9505      	str	r5, [sp, #20]
 8002646:	2620      	movs	r6, #32
 8002648:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 800264c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002744 <si446x_spi+0x114>
 8002650:	2401      	movs	r4, #1
 8002652:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002656:	891a      	ldrh	r2, [r3, #8]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	fa04 f202 	lsl.w	r2, r4, r2
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	f385 8811 	msr	BASEPRI, r5
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
 8002664:	aa01      	add	r2, sp, #4
 8002666:	f006 fed3 	bl	8009410 <spiExchange.constprop.4>
 800266a:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 800266e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002672:	891a      	ldrh	r2, [r3, #8]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4094      	lsls	r4, r2
 8002678:	611c      	str	r4, [r3, #16]
 800267a:	f385 8811 	msr	BASEPRI, r5
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 800267e:	2344      	movs	r3, #68	; 0x44
 8002680:	f88d 3004 	strb.w	r3, [sp, #4]
 8002684:	f386 8811 	msr	BASEPRI, r6
 8002688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800268c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800268e:	f385 8811 	msr	BASEPRI, r5
	uint32_t millis = MS2ST(chVTGetSystemTime());
 8002692:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002696:	b2a4      	uxth	r4, r4
 8002698:	fb03 f404 	mul.w	r4, r3, r4
 800269c:	4d27      	ldr	r5, [pc, #156]	; (800273c <si446x_spi+0x10c>)
 800269e:	3c01      	subs	r4, #1
 80026a0:	fba5 3404 	umull	r3, r4, r5, r4
 80026a4:	09a4      	lsrs	r4, r4, #6
 80026a6:	3401      	adds	r4, #1
 80026a8:	b2a4      	uxth	r4, r4
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80026aa:	4e25      	ldr	r6, [pc, #148]	; (8002740 <si446x_spi+0x110>)
 80026ac:	e017      	b.n	80026de <si446x_spi+0xae>
		chThdSleepMicroseconds(20);
 80026ae:	f004 fd07 	bl	80070c0 <chThdSleep>
 80026b2:	2320      	movs	r3, #32
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f38a 8811 	msr	BASEPRI, sl
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
 80026c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	fba5 2303 	umull	r2, r3, r5, r3
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	1b1b      	subs	r3, r3, r4
 80026da:	2b0a      	cmp	r3, #10
 80026dc:	d809      	bhi.n	80026f2 <si446x_spi+0xc2>
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80026de:	68b3      	ldr	r3, [r6, #8]
		chThdSleepMicroseconds(20);
 80026e0:	2001      	movs	r0, #1
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80026e2:	f413 6a00 	ands.w	sl, r3, #2048	; 0x800
 80026e6:	d0e2      	beq.n	80026ae <si446x_spi+0x7e>
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
 80026e8:	b93f      	cbnz	r7, 80026fa <si446x_spi+0xca>
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 80026ea:	4638      	mov	r0, r7
}
 80026ec:	b006      	add	sp, #24
 80026ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
 80026f2:	2001      	movs	r0, #1
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
}
 80026f4:	b006      	add	sp, #24
 80026f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026fa:	2620      	movs	r6, #32
 80026fc:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8002700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002704:	4604      	mov	r4, r0
 8002706:	891a      	ldrh	r2, [r3, #8]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	2500      	movs	r5, #0
 8002712:	f385 8811 	msr	BASEPRI, r5
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
 8002716:	4638      	mov	r0, r7
 8002718:	a901      	add	r1, sp, #4
 800271a:	464a      	mov	r2, r9
 800271c:	f006 fe78 	bl	8009410 <spiExchange.constprop.4>
 8002720:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8002724:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002728:	891a      	ldrh	r2, [r3, #8]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4094      	lsls	r4, r2
 800272e:	611c      	str	r4, [r3, #16]
 8002730:	f385 8811 	msr	BASEPRI, r5
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 8002734:	4628      	mov	r0, r5
}
 8002736:	b006      	add	sp, #24
 8002738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273c:	10624dd3 	.word	0x10624dd3
 8002740:	40010c00 	.word	0x40010c00
 8002744:	20001fa4 	.word	0x20001fa4
 8002748:	f3af 8000 	nop.w
 800274c:	f3af 8000 	nop.w

08002750 <si446x_set_frequency>:
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8002750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8002754:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <si446x_set_frequency+0x198>)
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8002756:	b087      	sub	sp, #28
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8002758:	4298      	cmp	r0, r3
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 800275a:	4604      	mov	r4, r0
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 800275c:	f200 8096 	bhi.w	800288c <si446x_set_frequency+0x13c>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8002760:	4b62      	ldr	r3, [pc, #392]	; (80028ec <si446x_set_frequency+0x19c>)
 8002762:	4298      	cmp	r0, r3
 8002764:	f200 80a0 	bhi.w	80028a8 <si446x_set_frequency+0x158>
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8002768:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <si446x_set_frequency+0x1a0>)
 800276a:	4298      	cmp	r0, r3
 800276c:	f200 80b4 	bhi.w	80028d8 <si446x_set_frequency+0x188>
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8002770:	4b60      	ldr	r3, [pc, #384]	; (80028f4 <si446x_set_frequency+0x1a4>)
 8002772:	4298      	cmp	r0, r3
 8002774:	f200 80a8 	bhi.w	80028c8 <si446x_set_frequency+0x178>
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
 8002778:	4b5f      	ldr	r3, [pc, #380]	; (80028f8 <si446x_set_frequency+0x1a8>)
 800277a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8002920 <si446x_set_frequency+0x1d0>
 800277e:	4298      	cmp	r0, r3
 8002780:	f200 809a 	bhi.w	80028b8 <si446x_set_frequency+0x168>
 8002784:	2318      	movs	r3, #24
 8002786:	4e5d      	ldr	r6, [pc, #372]	; (80028fc <si446x_set_frequency+0x1ac>)
 8002788:	4d5d      	ldr	r5, [pc, #372]	; (8002900 <si446x_set_frequency+0x1b0>)
 800278a:	f88a 3000 	strb.w	r3, [sl]
 800278e:	f04f 0b0d 	mov.w	fp, #13
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
 8002792:	4620      	mov	r0, r4
 8002794:	f7fe fcb2 	bl	80010fc <__aeabi_ui2f>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8002798:	fbb4 f8f5 	udiv	r8, r4, r5
	float ratio = (float)freq / (float)f_pfd;
 800279c:	4631      	mov	r1, r6
 800279e:	f7fe fdbb 	bl	8001318 <__aeabi_fdiv>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 80027a2:	f108 38ff 	add.w	r8, r8, #4294967295
	float ratio = (float)freq / (float)f_pfd;
 80027a6:	4604      	mov	r4, r0
	float rest = ratio - (float)n;
 80027a8:	4640      	mov	r0, r8
 80027aa:	f7fe fca7 	bl	80010fc <__aeabi_ui2f>
 80027ae:	4601      	mov	r1, r0
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7fe fbf1 	bl	8000f98 <__aeabi_fsub>
	uint32_t m = (unsigned long)(rest * 524288UL);
 80027b6:	f04f 4192 	mov.w	r1, #1224736768	; 0x49000000
 80027ba:	f7fe fcf9 	bl	80011b0 <__aeabi_fmul>
 80027be:	f7fe fee7 	bl	8001590 <__aeabi_f2uiz>
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 80027c2:	4a50      	ldr	r2, [pc, #320]	; (8002904 <si446x_set_frequency+0x1b4>)
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
 80027c4:	4681      	mov	r9, r0
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80027c6:	2711      	movs	r7, #17
 80027c8:	2601      	movs	r6, #1
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80027ca:	a902      	add	r1, sp, #8
 80027cc:	ab01      	add	r3, sp, #4
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 80027ce:	f882 b000 	strb.w	fp, [r2]
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80027d2:	2520      	movs	r5, #32
 80027d4:	2451      	movs	r4, #81	; 0x51
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2005      	movs	r0, #5
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80027da:	f88d 5009 	strb.w	r5, [sp, #9]
 80027de:	f88d 400b 	strb.w	r4, [sp, #11]
 80027e2:	f88d b00c 	strb.w	fp, [sp, #12]
 80027e6:	f88d 7008 	strb.w	r7, [sp, #8]
 80027ea:	f88d 600a 	strb.w	r6, [sp, #10]
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80027ee:	f7ff ff1f 	bl	8002630 <si446x_spi>
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 80027f2:	4b45      	ldr	r3, [pc, #276]	; (8002908 <si446x_set_frequency+0x1b8>)
 80027f4:	f99a 5000 	ldrsb.w	r5, [sl]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	04ed      	lsls	r5, r5, #19
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	fb03 f505 	mul.w	r5, r3, r5
 8002802:	4b42      	ldr	r3, [pc, #264]	; (800290c <si446x_set_frequency+0x1bc>)
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
 8002804:	ea4f 4e19 	mov.w	lr, r9, lsr #16
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 8002808:	fba3 3505 	umull	r3, r5, r3, r5
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 800280c:	eba9 490e 	sub.w	r9, r9, lr, lsl #16
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8002810:	f04f 0a00 	mov.w	sl, #0
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
 8002814:	0e6d      	lsrs	r5, r5, #25
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8002816:	ea4f 2c19 	mov.w	ip, r9, lsr #8
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 800281a:	a902      	add	r1, sp, #8
 800281c:	ab01      	add	r3, sp, #4
 800281e:	4652      	mov	r2, sl
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8002820:	f88d 800c 	strb.w	r8, [sp, #12]
 8002824:	f88d 5011 	strb.w	r5, [sp, #17]
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8002828:	4604      	mov	r4, r0
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 800282a:	f04f 0840 	mov.w	r8, #64	; 0x40
 800282e:	2506      	movs	r5, #6
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8002830:	200a      	movs	r0, #10
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8002832:	f88d c00e 	strb.w	ip, [sp, #14]
 8002836:	f88d e00d 	strb.w	lr, [sp, #13]
 800283a:	f88d 500a 	strb.w	r5, [sp, #10]
 800283e:	f88d 7008 	strb.w	r7, [sp, #8]
 8002842:	f88d 900f 	strb.w	r9, [sp, #15]
 8002846:	f88d a00b 	strb.w	sl, [sp, #11]
 800284a:	f88d a010 	strb.w	sl, [sp, #16]
 800284e:	f88d 8009 	strb.w	r8, [sp, #9]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8002852:	f7ff feed 	bl	8002630 <si446x_spi>
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <si446x_set_frequency+0x1c0>)
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8002858:	4304      	orrs	r4, r0
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 800285a:	f893 e000 	ldrb.w	lr, [r3]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800285e:	a902      	add	r1, sp, #8
 8002860:	4652      	mov	r2, sl
 8002862:	ab01      	add	r3, sp, #4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8002864:	2522      	movs	r5, #34	; 0x22
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8002866:	2005      	movs	r0, #5
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8002868:	f88d 7008 	strb.w	r7, [sp, #8]
 800286c:	f88d 600a 	strb.w	r6, [sp, #10]
 8002870:	f88d 600b 	strb.w	r6, [sp, #11]
 8002874:	f88d e00c 	strb.w	lr, [sp, #12]
 8002878:	f88d 5009 	strb.w	r5, [sp, #9]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800287c:	f7ff fed8 	bl	8002630 <si446x_spi>
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8002880:	b2e4      	uxtb	r4, r4
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8002882:	4320      	orrs	r0, r4
	return failure;
 8002884:	b2c0      	uxtb	r0, r0
}
 8002886:	b007      	add	sp, #28
 8002888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800288c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8002920 <si446x_set_frequency+0x1d0>
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8002890:	f04f 0b08 	mov.w	fp, #8
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <si446x_set_frequency+0x1c4>)
 8002896:	f99a 5000 	ldrsb.w	r5, [sl]
 800289a:	fbb3 f5f5 	udiv	r5, r3, r5
 800289e:	4628      	mov	r0, r5
 80028a0:	f7fe fc2c 	bl	80010fc <__aeabi_ui2f>
 80028a4:	4606      	mov	r6, r0
 80028a6:	e774      	b.n	8002792 <si446x_set_frequency+0x42>
 80028a8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8002920 <si446x_set_frequency+0x1d0>
 80028ac:	2306      	movs	r3, #6
 80028ae:	f88a 3000 	strb.w	r3, [sl]
 80028b2:	f04f 0b09 	mov.w	fp, #9
 80028b6:	e7ed      	b.n	8002894 <si446x_set_frequency+0x144>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 80028b8:	2310      	movs	r3, #16
 80028ba:	f88a 3000 	strb.w	r3, [sl]
 80028be:	f04f 0b0c 	mov.w	fp, #12
 80028c2:	4e15      	ldr	r6, [pc, #84]	; (8002918 <si446x_set_frequency+0x1c8>)
 80028c4:	4d15      	ldr	r5, [pc, #84]	; (800291c <si446x_set_frequency+0x1cc>)
 80028c6:	e764      	b.n	8002792 <si446x_set_frequency+0x42>
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 80028c8:	f8df a054 	ldr.w	sl, [pc, #84]	; 8002920 <si446x_set_frequency+0x1d0>
 80028cc:	230c      	movs	r3, #12
 80028ce:	f88a 3000 	strb.w	r3, [sl]
 80028d2:	f04f 0b0b 	mov.w	fp, #11
 80028d6:	e7dd      	b.n	8002894 <si446x_set_frequency+0x144>
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 80028d8:	f8df a044 	ldr.w	sl, [pc, #68]	; 8002920 <si446x_set_frequency+0x1d0>
 80028dc:	2308      	movs	r3, #8
 80028de:	f88a 3000 	strb.w	r3, [sl]
 80028e2:	f04f 0b0a 	mov.w	fp, #10
 80028e6:	e7d5      	b.n	8002894 <si446x_set_frequency+0x144>
 80028e8:	2a05723f 	.word	0x2a05723f
 80028ec:	1f4add3f 	.word	0x1f4add3f
 80028f0:	150a5a3f 	.word	0x150a5a3f
 80028f4:	0e3ed9bf 	.word	0x0e3ed9bf
 80028f8:	0a8cce3f 	.word	0x0a8cce3f
 80028fc:	4a043e28 	.word	0x4a043e28
 8002900:	00210f8a 	.word	0x00210f8a
 8002904:	20000c80 	.word	0x20000c80
 8002908:	20000814 	.word	0x20000814
 800290c:	a530e8a5 	.word	0xa530e8a5
 8002910:	20000816 	.word	0x20000816
 8002914:	03197500 	.word	0x03197500
 8002918:	4a465d40 	.word	0x4a465d40
 800291c:	00319750 	.word	0x00319750
 8002920:	20000ca4 	.word	0x20000ca4
 8002924:	f3af 8000 	nop.w
 8002928:	f3af 8000 	nop.w
 800292c:	f3af 8000 	nop.w

08002930 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8002930:	8902      	ldrh	r2, [r0, #8]
 8002932:	fa42 f301 	asr.w	r3, r2, r1
 8002936:	f013 0301 	ands.w	r3, r3, #1
 800293a:	d002      	beq.n	8002942 <usbStartTransmitI+0x12>
    return TRUE;
 800293c:	2301      	movs	r3, #1

  usbp->transmitting |= (1 << ep);
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 800293e:	4618      	mov	r0, r3
 8002940:	4770      	bx	lr
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8002942:	b470      	push	{r4, r5, r6}
 8002944:	008d      	lsls	r5, r1, #2
 8002946:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800294a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800294e:	682c      	ldr	r4, [r5, #0]
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
    return TRUE;

  usbp->transmitting |= (1 << ep);
 8002950:	2601      	movs	r6, #1
 8002952:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 8002956:	fa06 f101 	lsl.w	r1, r6, r1
 800295a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800295e:	f084 0430 	eor.w	r4, r4, #48	; 0x30
 8002962:	430a      	orrs	r2, r1
 8002964:	8102      	strh	r2, [r0, #8]
 8002966:	602c      	str	r4, [r5, #0]
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 8002968:	4618      	mov	r0, r3
 800296a:	bc70      	pop	{r4, r5, r6}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8002970:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8002974:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8002976:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800297a:	4906      	ldr	r1, [pc, #24]	; (8002994 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8002982:	b510      	push	{r4, lr}
 8002984:	4604      	mov	r4, r0
 8002986:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8002988:	b10a      	cbz	r2, 800298e <set_address+0x1e>
 800298a:	2101      	movs	r1, #1
 800298c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800298e:	2303      	movs	r3, #3
 8002990:	7023      	strb	r3, [r4, #0]
 8002992:	bd10      	pop	{r4, pc}
 8002994:	40005c00 	.word	0x40005c00
 8002998:	f3af 8000 	nop.w
 800299c:	f3af 8000 	nop.w

080029a0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	f3af 8000 	nop.w
 80029a8:	f3af 8000 	nop.w
 80029ac:	f3af 8000 	nop.w

080029b0 <sduRequestsHook>:
 * @retval TRUE         Message handled internally.
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80029b0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80029b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d001      	beq.n	80029c0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return TRUE;
    default:
      return FALSE;
 80029bc:	2000      	movs	r0, #0
    }
  }
  return FALSE;
}
 80029be:	4770      	bx	lr
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80029c0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80029c4:	2b21      	cmp	r3, #33	; 0x21
 80029c6:	d003      	beq.n	80029d0 <sduRequestsHook+0x20>
 80029c8:	2b22      	cmp	r3, #34	; 0x22
 80029ca:	d009      	beq.n	80029e0 <sduRequestsHook+0x30>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d1f5      	bne.n	80029bc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return TRUE;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80029d0:	4906      	ldr	r1, [pc, #24]	; (80029ec <sduRequestsHook+0x3c>)
 80029d2:	2207      	movs	r2, #7
 80029d4:	2300      	movs	r3, #0
 80029d6:	6681      	str	r1, [r0, #104]	; 0x68
 80029d8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80029da:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 80029dc:	2001      	movs	r0, #1
 80029de:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80029e0:	2300      	movs	r3, #0
 80029e2:	6683      	str	r3, [r0, #104]	; 0x68
 80029e4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80029e6:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 80029e8:	2001      	movs	r0, #1
 80029ea:	4770      	bx	lr
 80029ec:	20000818 	.word	0x20000818

080029f0 <bmk12_setup.lto_priv.183>:
 80029f0:	4b02      	ldr	r3, [pc, #8]	; (80029fc <bmk12_setup.lto_priv.183+0xc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	605b      	str	r3, [r3, #4]
 80029f6:	601b      	str	r3, [r3, #0]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	4770      	bx	lr
 80029fc:	200016b0 	.word	0x200016b0

08002a00 <bmk11_setup.lto_priv.181>:
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <bmk11_setup.lto_priv.181+0xc>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	605b      	str	r3, [r3, #4]
 8002a06:	601b      	str	r3, [r3, #0]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	4770      	bx	lr
 8002a0c:	200016c0 	.word	0x200016c0

08002a10 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002a10:	b538      	push	{r3, r4, r5, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8002a12:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002a16:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d033      	beq.n	8002a84 <_usb_ep0out+0x74>
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d01a      	beq.n	8002a56 <_usb_ep0out+0x46>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <_usb_ep0out+0x8c>)
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002a22:	6861      	ldr	r1, [r4, #4]
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	680d      	ldr	r5, [r1, #0]
 8002a28:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a30:	f083 0310 	eor.w	r3, r3, #16
 8002a34:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	b115      	cbz	r5, 8002a4e <_usb_ep0out+0x3e>
 8002a48:	4620      	mov	r0, r4
 8002a4a:	2105      	movs	r1, #5
 8002a4c:	47a8      	blx	r5
  usbp->ep0state = USB_EP0_ERROR;
 8002a4e:	2306      	movs	r3, #6
 8002a50:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002a56:	68c3      	ldr	r3, [r0, #12]

  isp->txqueued           = FALSE;
 8002a58:	2500      	movs	r5, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002a5a:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002a62:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8002a64:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8002a66:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8002a68:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8002a6a:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002a6c:	f004 fef0 	bl	8007850 <usb_lld_prepare_transmit>
 8002a70:	2320      	movs	r3, #32
 8002a72:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0);
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f7ff ff59 	bl	8002930 <usbStartTransmitI>
 8002a7e:	f385 8811 	msr	BASEPRI, r5
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0)
 8002a84:	68c3      	ldr	r3, [r0, #12]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1c8      	bne.n	8002a20 <_usb_ep0out+0x10>
      break;
#endif
    if (usbp->ep0endcb != NULL)
 8002a8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002a90:	b103      	cbz	r3, 8002a94 <_usb_ep0out+0x84>
      usbp->ep0endcb(usbp);
 8002a92:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	40005c00 	.word	0x40005c00

08002aa0 <onotify.lto_priv.86>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8002aa2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002aa4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	7811      	ldrb	r1, [r2, #0]
 8002aac:	2904      	cmp	r1, #4
 8002aae:	d000      	beq.n	8002ab2 <onotify.lto_priv.86+0x12>
 8002ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab2:	7a21      	ldrb	r1, [r4, #8]
 8002ab4:	2902      	cmp	r1, #2
 8002ab6:	d1fb      	bne.n	8002ab0 <onotify.lto_priv.86+0x10>
      (sdup->state != SDU_READY))
    return;

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in) &&
 8002ab8:	8912      	ldrh	r2, [r2, #8]
 8002aba:	791b      	ldrb	r3, [r3, #4]
 8002abc:	fa42 f303 	asr.w	r3, r2, r3
 8002ac0:	f013 0301 	ands.w	r3, r3, #1
 8002ac4:	d1f4      	bne.n	8002ab0 <onotify.lto_priv.86+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8002ac6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002ac8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002aca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002acc:	1a8a      	subs	r2, r1, r2
 8002ace:	1a12      	subs	r2, r2, r0
 8002ad0:	d0ee      	beq.n	8002ab0 <onotify.lto_priv.86+0x10>
 8002ad2:	f383 8811 	msr	BASEPRI, r3
      ((n = oqGetFullI(&sdup->oqueue)) > 0)) {
    osalSysUnlock();

    usbPrepareQueuedTransmit(sdup->config->usbp,
 8002ad6:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8002ada:	2701      	movs	r7, #1
 8002adc:	6808      	ldr	r0, [r1, #0]
 8002ade:	7909      	ldrb	r1, [r1, #4]
 8002ae0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002ae4:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8002ae8:	68ed      	ldr	r5, [r5, #12]
 8002aea:	696d      	ldr	r5, [r5, #20]

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8002aec:	60ab      	str	r3, [r5, #8]
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8002aee:	606a      	str	r2, [r5, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8002af0:	702f      	strb	r7, [r5, #0]
  isp->mode.queue.txqueue = oqp;
 8002af2:	60ee      	str	r6, [r5, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002af4:	f004 feac 	bl	8007850 <usb_lld_prepare_transmit>
 8002af8:	2320      	movs	r3, #32
 8002afa:	f383 8811 	msr	BASEPRI, r3
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8002afe:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	7919      	ldrb	r1, [r3, #4]
  }
}
 8002b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedTransmit(sdup->config->usbp,
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8002b0a:	f7ff bf11 	b.w	8002930 <usbStartTransmitI>
 8002b0e:	bf00      	nop

08002b10 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b14:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];
 8002b18:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28

  if (sdup == NULL)
 8002b1c:	b1b4      	cbz	r4, 8002b4c <sduDataTransmitted+0x3c>
 8002b1e:	460d      	mov	r5, r1
 8002b20:	4606      	mov	r6, r0
 8002b22:	2720      	movs	r7, #32
 8002b24:	f387 8811 	msr	BASEPRI, r7
 8002b28:	2108      	movs	r1, #8
 8002b2a:	1d20      	adds	r0, r4, #4
 8002b2c:	f003 ffa8 	bl	8006a80 <chEvtBroadcastFlagsI>
 8002b30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002b36:	1ad3      	subs	r3, r2, r3
    return;

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
 8002b38:	1a5b      	subs	r3, r3, r1
 8002b3a:	d119      	bne.n	8002b70 <sduDataTransmitted+0x60>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8002b3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	6852      	ldr	r2, [r2, #4]
 8002b44:	b922      	cbnz	r2, 8002b50 <sduDataTransmitted+0x40>
 8002b46:	2300      	movs	r3, #0
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           !(usbp->epc[ep]->in_state->txsize &
             (usbp->epc[ep]->in_maxsize - 1))) {
 8002b50:	8a1b      	ldrh	r3, [r3, #16]
 8002b52:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8002b54:	4013      	ands	r3, r2
 8002b56:	d1f6      	bne.n	8002b46 <sduDataTransmitted+0x36>
 8002b58:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002b5c:	f8d8 200c 	ldr.w	r2, [r8, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 8002b60:	3430      	adds	r4, #48	; 0x30
 8002b62:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = TRUE;
 8002b64:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8002b66:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8002b68:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
 8002b6a:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8002b6c:	7011      	strb	r1, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <sduDataTransmitted+0x78>
 8002b70:	2100      	movs	r1, #0
 8002b72:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002b76:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8002b7a:	3430      	adds	r4, #48	; 0x30
 8002b7c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = TRUE;
 8002b7e:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8002b80:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8002b82:	6091      	str	r1, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
 8002b84:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8002b86:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002b88:	4630      	mov	r0, r6
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	f004 fe60 	bl	8007850 <usb_lld_prepare_transmit>
 8002b90:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
 8002b94:	4630      	mov	r0, r6
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7ff feca 	bl	8002930 <usbStartTransmitI>
 8002b9c:	e7d3      	b.n	8002b46 <sduDataTransmitted+0x36>
 8002b9e:	bf00      	nop

08002ba0 <readt.lto_priv.97>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, time);
 8002ba0:	300c      	adds	r0, #12
 8002ba2:	f003 bd4d 	b.w	8006640 <chIQReadTimeout>
 8002ba6:	bf00      	nop
 8002ba8:	f3af 8000 	nop.w
 8002bac:	f3af 8000 	nop.w

08002bb0 <read.lto_priv.91>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8002bb0:	300c      	adds	r0, #12
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	f003 bd43 	b.w	8006640 <chIQReadTimeout>
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w

08002bc0 <writet.lto_priv.96>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
 8002bc0:	3030      	adds	r0, #48	; 0x30
 8002bc2:	f003 bccd 	b.w	8006560 <chOQWriteTimeout>
 8002bc6:	bf00      	nop
 8002bc8:	f3af 8000 	nop.w
 8002bcc:	f3af 8000 	nop.w

08002bd0 <write.lto_priv.90>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8002bd0:	3030      	adds	r0, #48	; 0x30
 8002bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd6:	f003 bcc3 	b.w	8006560 <chOQWriteTimeout>
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w

08002be0 <gett.lto_priv.95>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8002be0:	300c      	adds	r0, #12
 8002be2:	f003 bd6d 	b.w	80066c0 <chIQGetTimeout>
 8002be6:	bf00      	nop
 8002be8:	f3af 8000 	nop.w
 8002bec:	f3af 8000 	nop.w

08002bf0 <get.lto_priv.93>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8002bf0:	300c      	adds	r0, #12
 8002bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bf6:	f003 bd63 	b.w	80066c0 <chIQGetTimeout>
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w

08002c00 <putt.lto_priv.94>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8002c00:	3030      	adds	r0, #48	; 0x30
 8002c02:	f003 bcf5 	b.w	80065f0 <chOQPutTimeout>
 8002c06:	bf00      	nop
 8002c08:	f3af 8000 	nop.w
 8002c0c:	f3af 8000 	nop.w

08002c10 <put.lto_priv.92>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002c10:	3030      	adds	r0, #48	; 0x30
 8002c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c16:	f003 bceb 	b.w	80065f0 <chOQPutTimeout>
 8002c1a:	bf00      	nop
 8002c1c:	f3af 8000 	nop.w

08002c20 <bmk13_execute.lto_priv.185>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8002c20:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8002c22:	482f      	ldr	r0, [pc, #188]	; (8002ce0 <bmk13_execute.lto_priv.185+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8002c24:	4c2f      	ldr	r4, [pc, #188]	; (8002ce4 <bmk13_execute.lto_priv.185+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8002c26:	f003 f9f3 	bl	8006010 <test_print>
  test_printn(sizeof(ch_system_t));
 8002c2a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8002c2e:	f003 f9ff 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c32:	4620      	mov	r0, r4
 8002c34:	f003 f9cc 	bl	8005fd0 <test_println>
  test_print("--- Thread: ");
 8002c38:	482b      	ldr	r0, [pc, #172]	; (8002ce8 <bmk13_execute.lto_priv.185+0xc8>)
 8002c3a:	f003 f9e9 	bl	8006010 <test_print>
  test_printn(sizeof(thread_t));
 8002c3e:	2044      	movs	r0, #68	; 0x44
 8002c40:	f003 f9f6 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c44:	4620      	mov	r0, r4
 8002c46:	f003 f9c3 	bl	8005fd0 <test_println>
  test_print("--- Timer : ");
 8002c4a:	4828      	ldr	r0, [pc, #160]	; (8002cec <bmk13_execute.lto_priv.185+0xcc>)
 8002c4c:	f003 f9e0 	bl	8006010 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8002c50:	2014      	movs	r0, #20
 8002c52:	f003 f9ed 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c56:	4620      	mov	r0, r4
 8002c58:	f003 f9ba 	bl	8005fd0 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 8002c5c:	4824      	ldr	r0, [pc, #144]	; (8002cf0 <bmk13_execute.lto_priv.185+0xd0>)
 8002c5e:	f003 f9d7 	bl	8006010 <test_print>
  test_printn(sizeof(semaphore_t));
 8002c62:	200c      	movs	r0, #12
 8002c64:	f003 f9e4 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f003 f9b1 	bl	8005fd0 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 8002c6e:	4821      	ldr	r0, [pc, #132]	; (8002cf4 <bmk13_execute.lto_priv.185+0xd4>)
 8002c70:	f003 f9ce 	bl	8006010 <test_print>
  test_printn(sizeof(event_source_t));
 8002c74:	2004      	movs	r0, #4
 8002c76:	f003 f9db 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f003 f9a8 	bl	8005fd0 <test_println>
  test_print("--- EventL: ");
 8002c80:	481d      	ldr	r0, [pc, #116]	; (8002cf8 <bmk13_execute.lto_priv.185+0xd8>)
 8002c82:	f003 f9c5 	bl	8006010 <test_print>
  test_printn(sizeof(event_listener_t));
 8002c86:	2014      	movs	r0, #20
 8002c88:	f003 f9d2 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f003 f99f 	bl	8005fd0 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8002c92:	481a      	ldr	r0, [pc, #104]	; (8002cfc <bmk13_execute.lto_priv.185+0xdc>)
 8002c94:	f003 f9bc 	bl	8006010 <test_print>
  test_printn(sizeof(mutex_t));
 8002c98:	2010      	movs	r0, #16
 8002c9a:	f003 f9c9 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f003 f996 	bl	8005fd0 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8002ca4:	4816      	ldr	r0, [pc, #88]	; (8002d00 <bmk13_execute.lto_priv.185+0xe0>)
 8002ca6:	f003 f9b3 	bl	8006010 <test_print>
  test_printn(sizeof(condition_variable_t));
 8002caa:	2008      	movs	r0, #8
 8002cac:	f003 f9c0 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f003 f98d 	bl	8005fd0 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8002cb6:	4813      	ldr	r0, [pc, #76]	; (8002d04 <bmk13_execute.lto_priv.185+0xe4>)
 8002cb8:	f003 f9aa 	bl	8006010 <test_print>
  test_printn(sizeof(io_queue_t));
 8002cbc:	2024      	movs	r0, #36	; 0x24
 8002cbe:	f003 f9b7 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f003 f984 	bl	8005fd0 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8002cc8:	480f      	ldr	r0, [pc, #60]	; (8002d08 <bmk13_execute.lto_priv.185+0xe8>)
 8002cca:	f003 f9a1 	bl	8006010 <test_print>
  test_printn(sizeof(mailbox_t));
 8002cce:	2028      	movs	r0, #40	; 0x28
 8002cd0:	f003 f9ae 	bl	8006030 <test_printn>
  test_println(" bytes");
 8002cd4:	4620      	mov	r0, r4
#endif
}
 8002cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 8002cda:	f003 b979 	b.w	8005fd0 <test_println>
 8002cde:	bf00      	nop
 8002ce0:	08009f50 	.word	0x08009f50
 8002ce4:	08009f60 	.word	0x08009f60
 8002ce8:	08009f68 	.word	0x08009f68
 8002cec:	08009f78 	.word	0x08009f78
 8002cf0:	08009f88 	.word	0x08009f88
 8002cf4:	08009f98 	.word	0x08009f98
 8002cf8:	08009fa8 	.word	0x08009fa8
 8002cfc:	08009fb8 	.word	0x08009fb8
 8002d00:	08009fc8 	.word	0x08009fc8
 8002d04:	08009fd8 	.word	0x08009fd8
 8002d08:	08009fe8 	.word	0x08009fe8
 8002d0c:	f3af 8000 	nop.w

08002d10 <bmk12_execute.lto_priv.184>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8002d10:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002d12:	f002 ff8d 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8002d16:	f006 fb0b 	bl	8009330 <test_start_timer.constprop.14>
 8002d1a:	4d14      	ldr	r5, [pc, #80]	; (8002d6c <bmk12_execute.lto_priv.184+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 8002d1c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d20:	f004 fab6 	bl	8007290 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002d24:	4812      	ldr	r0, [pc, #72]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d26:	f004 f823 	bl	8006d70 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002d2a:	4811      	ldr	r0, [pc, #68]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d2c:	f004 fab0 	bl	8007290 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002d30:	480f      	ldr	r0, [pc, #60]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d32:	f004 f81d 	bl	8006d70 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002d36:	480e      	ldr	r0, [pc, #56]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d38:	f004 faaa 	bl	8007290 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d3e:	f004 f817 	bl	8006d70 <chMtxUnlock>
    chMtxLock(&mtx1);
 8002d42:	480b      	ldr	r0, [pc, #44]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d44:	f004 faa4 	bl	8007290 <chMtxLock>
    chMtxUnlock(&mtx1);
 8002d48:	4809      	ldr	r0, [pc, #36]	; (8002d70 <bmk12_execute.lto_priv.184+0x60>)
 8002d4a:	f004 f811 	bl	8006d70 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002d4e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8002d50:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0e3      	beq.n	8002d1e <bmk12_execute.lto_priv.184+0xe>
  test_print("--- Score : ");
 8002d56:	4807      	ldr	r0, [pc, #28]	; (8002d74 <bmk12_execute.lto_priv.184+0x64>)
 8002d58:	f003 f95a 	bl	8006010 <test_print>
  test_printn(n * 4);
 8002d5c:	00a0      	lsls	r0, r4, #2
 8002d5e:	f003 f967 	bl	8006030 <test_printn>
  test_println(" lock+unlock/S");
}
 8002d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 8002d66:	4804      	ldr	r0, [pc, #16]	; (8002d78 <bmk12_execute.lto_priv.184+0x68>)
 8002d68:	f003 b932 	b.w	8005fd0 <test_println>
 8002d6c:	20001f90 	.word	0x20001f90
 8002d70:	200016b0 	.word	0x200016b0
 8002d74:	08009ff8 	.word	0x08009ff8
 8002d78:	0800a008 	.word	0x0800a008
 8002d7c:	f3af 8000 	nop.w

08002d80 <bmk11_execute.lto_priv.182>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8002d80:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8002d82:	f002 ff55 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8002d86:	f006 fad3 	bl	8009330 <test_start_timer.constprop.14>
 8002d8a:	4d14      	ldr	r5, [pc, #80]	; (8002ddc <bmk11_execute.lto_priv.182+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 8002d8c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 8002d8e:	4814      	ldr	r0, [pc, #80]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002d90:	f004 f8de 	bl	8006f50 <chSemWait>
    chSemSignal(&sem1);
 8002d94:	4812      	ldr	r0, [pc, #72]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002d96:	f004 f81b 	bl	8006dd0 <chSemSignal>
    chSemWait(&sem1);
 8002d9a:	4811      	ldr	r0, [pc, #68]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002d9c:	f004 f8d8 	bl	8006f50 <chSemWait>
    chSemSignal(&sem1);
 8002da0:	480f      	ldr	r0, [pc, #60]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002da2:	f004 f815 	bl	8006dd0 <chSemSignal>
    chSemWait(&sem1);
 8002da6:	480e      	ldr	r0, [pc, #56]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002da8:	f004 f8d2 	bl	8006f50 <chSemWait>
    chSemSignal(&sem1);
 8002dac:	480c      	ldr	r0, [pc, #48]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002dae:	f004 f80f 	bl	8006dd0 <chSemSignal>
    chSemWait(&sem1);
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002db4:	f004 f8cc 	bl	8006f50 <chSemWait>
    chSemSignal(&sem1);
 8002db8:	4809      	ldr	r0, [pc, #36]	; (8002de0 <bmk11_execute.lto_priv.182+0x60>)
 8002dba:	f004 f809 	bl	8006dd0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002dbe:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8002dc0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0e3      	beq.n	8002d8e <bmk11_execute.lto_priv.182+0xe>
  test_print("--- Score : ");
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <bmk11_execute.lto_priv.182+0x64>)
 8002dc8:	f003 f922 	bl	8006010 <test_print>
  test_printn(n * 4);
 8002dcc:	00a0      	lsls	r0, r4, #2
 8002dce:	f003 f92f 	bl	8006030 <test_printn>
  test_println(" wait+signal/S");
}
 8002dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8002dd6:	4804      	ldr	r0, [pc, #16]	; (8002de8 <bmk11_execute.lto_priv.182+0x68>)
 8002dd8:	f003 b8fa 	b.w	8005fd0 <test_println>
 8002ddc:	20001f90 	.word	0x20001f90
 8002de0:	200016c0 	.word	0x200016c0
 8002de4:	08009ff8 	.word	0x08009ff8
 8002de8:	0800a018 	.word	0x0800a018
 8002dec:	f3af 8000 	nop.w

08002df0 <bmk10_execute.lto_priv.180>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8002df0:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8002df2:	f002 ff1d 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8002df6:	f006 fa9b 	bl	8009330 <test_start_timer.constprop.14>
 8002dfa:	4d15      	ldr	r5, [pc, #84]	; (8002e50 <bmk10_execute.lto_priv.180+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	2320      	movs	r3, #32
 8002e00:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8002e04:	4813      	ldr	r0, [pc, #76]	; (8002e54 <bmk10_execute.lto_priv.180+0x64>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <bmk10_execute.lto_priv.180+0x68>)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f003 ff10 	bl	8006c30 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8002e10:	f242 7110 	movw	r1, #10000	; 0x2710
 8002e14:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <bmk10_execute.lto_priv.180+0x68>)
 8002e16:	2300      	movs	r3, #0
 8002e18:	4810      	ldr	r0, [pc, #64]	; (8002e5c <bmk10_execute.lto_priv.180+0x6c>)
 8002e1a:	f003 ff09 	bl	8006c30 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8002e1e:	480d      	ldr	r0, [pc, #52]	; (8002e54 <bmk10_execute.lto_priv.180+0x64>)
 8002e20:	f003 fed6 	bl	8006bd0 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8002e24:	480d      	ldr	r0, [pc, #52]	; (8002e5c <bmk10_execute.lto_priv.180+0x6c>)
 8002e26:	f003 fed3 	bl	8006bd0 <chVTDoResetI>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002e30:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8002e32:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0e2      	beq.n	8002dfe <bmk10_execute.lto_priv.180+0xe>
  test_print("--- Score : ");
 8002e38:	4809      	ldr	r0, [pc, #36]	; (8002e60 <bmk10_execute.lto_priv.180+0x70>)
 8002e3a:	f003 f8e9 	bl	8006010 <test_print>
  test_printn(n * 2);
 8002e3e:	0060      	lsls	r0, r4, #1
 8002e40:	f003 f8f6 	bl	8006030 <test_printn>
  test_println(" timers/S");
}
 8002e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8002e48:	4806      	ldr	r0, [pc, #24]	; (8002e64 <bmk10_execute.lto_priv.180+0x74>)
 8002e4a:	f003 b8c1 	b.w	8005fd0 <test_println>
 8002e4e:	bf00      	nop
 8002e50:	20001f90 	.word	0x20001f90
 8002e54:	20001688 	.word	0x20001688
 8002e58:	08003561 	.word	0x08003561
 8002e5c:	2000169c 	.word	0x2000169c
 8002e60:	08009ff8 	.word	0x08009ff8
 8002e64:	0800a028 	.word	0x0800a028
 8002e68:	f3af 8000 	nop.w
 8002e6c:	f3af 8000 	nop.w

08002e70 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8002e70:	8942      	ldrh	r2, [r0, #10]
 8002e72:	fa42 f301 	asr.w	r3, r2, r1
 8002e76:	f013 0301 	ands.w	r3, r3, #1
 8002e7a:	d002      	beq.n	8002e82 <usbStartReceiveI+0x12>
    return TRUE;
 8002e7c:	2301      	movs	r3, #1

  usbp->receiving |= (1 << ep);
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4770      	bx	lr
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8002e82:	b470      	push	{r4, r5, r6}
 8002e84:	008d      	lsls	r5, r1, #2
 8002e86:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002e8a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8002e8e:	682c      	ldr	r4, [r5, #0]
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
    return TRUE;

  usbp->receiving |= (1 << ep);
 8002e90:	2601      	movs	r6, #1
 8002e92:	f424 4490 	bic.w	r4, r4, #18432	; 0x4800
 8002e96:	fa06 f101 	lsl.w	r1, r6, r1
 8002e9a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002e9e:	f484 5440 	eor.w	r4, r4, #12288	; 0x3000
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	8142      	strh	r2, [r0, #10]
 8002ea6:	602c      	str	r4, [r5, #0]
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bc70      	pop	{r4, r5, r6}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop

08002eb0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002eb0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002eb2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002eb6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d04b      	beq.n	8002f54 <_usb_ep0in+0xa4>
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d042      	beq.n	8002f46 <_usb_ep0in+0x96>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d019      	beq.n	8002ef8 <_usb_ep0in+0x48>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8002ec4:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <_usb_ep0in+0xd4>)
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002ec6:	6841      	ldr	r1, [r0, #4]
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	680d      	ldr	r5, [r1, #0]
 8002ecc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8002ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed4:	f083 0310 	eor.w	r3, r3, #16
 8002ed8:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	b10d      	cbz	r5, 8002ef0 <_usb_ep0in+0x40>
 8002eec:	2105      	movs	r1, #5
 8002eee:	47a8      	blx	r5
  usbp->ep0state = USB_EP0_ERROR;
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8002ef8:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8002efc:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8002f00:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8002f02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8002f06:	428b      	cmp	r3, r1
 8002f08:	68c3      	ldr	r3, [r0, #12]
 8002f0a:	d905      	bls.n	8002f18 <_usb_ep0in+0x68>
 8002f0c:	8a1d      	ldrh	r5, [r3, #16]
 8002f0e:	fbb1 f2f5 	udiv	r2, r1, r5
 8002f12:	fb05 1512 	mls	r5, r5, r2, r1
 8002f16:	b1fd      	cbz	r5, 8002f58 <_usb_ep0in+0xa8>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002f18:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = FALSE;
 8002f1a:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8002f22:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8002f24:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8002f26:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8002f28:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8002f2a:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f004 fccf 	bl	80078d0 <usb_lld_prepare_receive>
 8002f32:	2320      	movs	r3, #32
 8002f34:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0);
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7ff ff98 	bl	8002e70 <usbStartReceiveI>
 8002f40:	f385 8811 	msr	BASEPRI, r5
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL)
 8002f46:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002f48:	b103      	cbz	r3, 8002f4c <_usb_ep0in+0x9c>
      usbp->ep0endcb(usbp);
 8002f4a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	68c3      	ldr	r3, [r0, #12]
 8002f56:	e7df      	b.n	8002f18 <_usb_ep0in+0x68>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002f58:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8002f5a:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8002f5c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8002f5e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8002f60:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8002f62:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8002f64:	f004 fc74 	bl	8007850 <usb_lld_prepare_transmit>
 8002f68:	2320      	movs	r3, #32
 8002f6a:	f383 8811 	msr	BASEPRI, r3
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7ff fcdd 	bl	8002930 <usbStartTransmitI>
 8002f76:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002f80:	bd38      	pop	{r3, r4, r5, pc}
 8002f82:	bf00      	nop
 8002f84:	40005c00 	.word	0x40005c00
 8002f88:	f3af 8000 	nop.w
 8002f8c:	f3af 8000 	nop.w

08002f90 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8002f94:	4bc1      	ldr	r3, [pc, #772]	; (800329c <_usb_ep0setup+0x30c>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002f96:	2200      	movs	r2, #0
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8002f9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002fa2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002fa6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002faa:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8002fac:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 8002fae:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8002fb2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002fb6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	f100 057c 	add.w	r5, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8002fc0:	f853 1b04 	ldr.w	r1, [r3], #4
 8002fc4:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8002fc8:	42aa      	cmp	r2, r5
 8002fca:	d1f9      	bne.n	8002fc0 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 8002fcc:	6863      	ldr	r3, [r4, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	b36b      	cbz	r3, 800302e <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	4798      	blx	r3
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 8002fd6:	b350      	cbz	r0, 800302e <_usb_ep0setup+0x9e>
 8002fd8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002fda:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
 8002fde:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8002fe2:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8002fe6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
 8002fea:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8002fec:	bf3c      	itt	cc
 8002fee:	4615      	movcc	r5, r2
 8002ff0:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002ff2:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002ff6:	68e3      	ldr	r3, [r4, #12]
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8002ff8:	f040 80a8 	bne.w	800314c <_usb_ep0setup+0x1bc>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
 8002ffc:	2d00      	cmp	r5, #0
 8002ffe:	f040 808d 	bne.w	800311c <_usb_ep0setup+0x18c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8003002:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8003004:	2205      	movs	r2, #5
 8003006:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800300a:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 800300c:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800300e:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8003010:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8003012:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8003014:	4629      	mov	r1, r5
 8003016:	f004 fc1b 	bl	8007850 <usb_lld_prepare_transmit>
 800301a:	2320      	movs	r3, #32
 800301c:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8003020:	4620      	mov	r0, r4
 8003022:	4629      	mov	r1, r5
 8003024:	f7ff fc84 	bl	8002930 <usbStartTransmitI>
 8003028:	f385 8811 	msr	BASEPRI, r5
 800302c:	bd70      	pop	{r4, r5, r6, pc}
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
      !(usbp->config->requests_hook_cb(usbp))) {
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800302e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003032:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8003036:	d01a      	beq.n	800306e <_usb_ep0setup+0xde>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8003038:	4a98      	ldr	r2, [pc, #608]	; (800329c <_usb_ep0setup+0x30c>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800303a:	6861      	ldr	r1, [r4, #4]
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	680d      	ldr	r5, [r1, #0]
 8003040:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	f083 0310 	eor.w	r3, r3, #16
 800304c:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800304e:	6813      	ldr	r3, [r2, #0]
 8003050:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	b115      	cbz	r5, 8003066 <_usb_ep0setup+0xd6>
 8003060:	4620      	mov	r0, r4
 8003062:	2105      	movs	r1, #5
 8003064:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8003066:	2306      	movs	r3, #6
 8003068:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800306c:	bd70      	pop	{r4, r5, r6, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
 800306e:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                              USB_RTYPE_TYPE_MASK)) |
 8003076:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800307a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800307e:	f000 8113 	beq.w	80032a8 <_usb_ep0setup+0x318>
 8003082:	dd18      	ble.n	80030b6 <_usb_ep0setup+0x126>
 8003084:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8003088:	f000 80ee 	beq.w	8003268 <_usb_ep0setup+0x2d8>
 800308c:	f340 808d 	ble.w	80031aa <_usb_ep0setup+0x21a>
 8003090:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8003094:	f000 8097 	beq.w	80031c6 <_usb_ep0setup+0x236>
 8003098:	f640 4102 	movw	r1, #3074	; 0xc02
 800309c:	428a      	cmp	r2, r1
 800309e:	f000 80dc 	beq.w	800325a <_usb_ep0setup+0x2ca>
 80030a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80030a6:	d1c7      	bne.n	8003038 <_usb_ep0setup+0xa8>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80030a8:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80030ac:	2501      	movs	r5, #1
 80030ae:	6726      	str	r6, [r4, #112]	; 0x70
 80030b0:	66a2      	str	r2, [r4, #104]	; 0x68
 80030b2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80030b4:	e793      	b.n	8002fde <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80030b6:	2a02      	cmp	r2, #2
 80030b8:	f000 8106 	beq.w	80032c8 <_usb_ep0setup+0x338>
 80030bc:	f340 80c3 	ble.w	8003246 <_usb_ep0setup+0x2b6>
 80030c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80030c4:	f000 8092 	beq.w	80031ec <_usb_ep0setup+0x25c>
 80030c8:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80030cc:	d1b4      	bne.n	8003038 <_usb_ep0setup+0xa8>
        return FALSE;
      }
    }
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 80030ce:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	d1b0      	bne.n	8003038 <_usb_ep0setup+0xa8>
      return FALSE;
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 80030d6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80030da:	f011 020f 	ands.w	r2, r1, #15
 80030de:	d018      	beq.n	8003112 <_usb_ep0setup+0x182>
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80030e6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if (usbp->setup[4] & 0x80)
 80030ea:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80030ee:	6811      	ldr	r1, [r2, #0]
 80030f0:	f040 811a 	bne.w	8003328 <_usb_ep0setup+0x398>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 80030f4:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 80030f8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80030fc:	d009      	beq.n	8003112 <_usb_ep0setup+0x182>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003108:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      if (usbp->setup[4] & 0x80)
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0F);
      else
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0F);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8003112:	2500      	movs	r5, #0
 8003114:	66a5      	str	r5, [r4, #104]	; 0x68
 8003116:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003118:	6725      	str	r5, [r4, #112]	; 0x70
 800311a:	e760      	b.n	8002fde <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800311c:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800311e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8003120:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8003122:	2104      	movs	r1, #4
 8003124:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8003128:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
 800312a:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 800312c:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800312e:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8003130:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003132:	4631      	mov	r1, r6
 8003134:	f004 fbcc 	bl	80078d0 <usb_lld_prepare_receive>
 8003138:	2320      	movs	r3, #32
 800313a:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 800313e:	4620      	mov	r0, r4
 8003140:	4631      	mov	r1, r6
 8003142:	f7ff fe95 	bl	8002e70 <usbStartReceiveI>
 8003146:	f386 8811 	msr	BASEPRI, r6
 800314a:	bd70      	pop	{r4, r5, r6, pc}
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
 800314c:	b1bd      	cbz	r5, 800317e <_usb_ep0setup+0x1ee>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800314e:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 8003150:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8003152:	2600      	movs	r6, #0
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8003154:	2101      	movs	r1, #1
 8003156:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 800315a:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
 800315c:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 800315e:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8003160:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8003162:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8003164:	4631      	mov	r1, r6
 8003166:	f004 fb73 	bl	8007850 <usb_lld_prepare_transmit>
 800316a:	2320      	movs	r3, #32
 800316c:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8003170:	4620      	mov	r0, r4
 8003172:	4631      	mov	r1, r6
 8003174:	f7ff fbdc 	bl	8002930 <usbStartTransmitI>
 8003178:	f386 8811 	msr	BASEPRI, r6
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800317e:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8003180:	2203      	movs	r2, #3
 8003182:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8003186:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8003188:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800318a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800318c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800318e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003190:	4629      	mov	r1, r5
 8003192:	f004 fb9d 	bl	80078d0 <usb_lld_prepare_receive>
 8003196:	2320      	movs	r3, #32
 8003198:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7ff fe66 	bl	8002e70 <usbStartReceiveI>
 80031a4:	f385 8811 	msr	BASEPRI, r5
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80031aa:	f240 3102 	movw	r1, #770	; 0x302
 80031ae:	428a      	cmp	r2, r1
 80031b0:	d02c      	beq.n	800320c <_usb_ep0setup+0x27c>
 80031b2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80031b6:	f47f af3f 	bne.w	8003038 <_usb_ep0setup+0xa8>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
        (usbp->setup[1] == USB_REQ_SET_ADDRESS))
      set_address(usbp);
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80031ba:	4a39      	ldr	r2, [pc, #228]	; (80032a0 <_usb_ep0setup+0x310>)
 80031bc:	66a6      	str	r6, [r4, #104]	; 0x68
 80031be:	66e6      	str	r6, [r4, #108]	; 0x6c
 80031c0:	4635      	mov	r5, r6
 80031c2:	6722      	str	r2, [r4, #112]	; 0x70
 80031c4:	e70b      	b.n	8002fde <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 80031c6:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80031ca:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0)
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	f040 8091 	bne.w	80032f6 <_usb_ep0setup+0x366>
      usbp->state = USB_SELECTED;
 80031d4:	2203      	movs	r2, #3
 80031d6:	7022      	strb	r2, [r4, #0]
    else
      usbp->state = USB_ACTIVE;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80031d8:	6862      	ldr	r2, [r4, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d098      	beq.n	8003112 <_usb_ep0setup+0x182>
 80031e0:	4620      	mov	r0, r4
 80031e2:	2102      	movs	r1, #2
 80031e4:	4790      	blx	r2
 80031e6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80031ea:	e792      	b.n	8003112 <_usb_ep0setup+0x182>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80031ec:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80031f0:	2a01      	cmp	r2, #1
 80031f2:	f47f af21 	bne.w	8003038 <_usb_ep0setup+0xa8>
      usbp->status &= ~2;
 80031f6:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80031fa:	66a6      	str	r6, [r4, #104]	; 0x68
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 80031fc:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003200:	66e6      	str	r6, [r4, #108]	; 0x6c
 8003202:	6726      	str	r6, [r4, #112]	; 0x70
 8003204:	4635      	mov	r5, r6
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 8003206:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 800320a:	e6e8      	b.n	8002fde <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 800320c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8003210:	2a00      	cmp	r2, #0
 8003212:	f47f af11 	bne.w	8003038 <_usb_ep0setup+0xa8>
      return FALSE;
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8003216:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800321a:	f011 020f 	ands.w	r2, r1, #15
 800321e:	f43f af78 	beq.w	8003112 <_usb_ep0setup+0x182>
 8003222:	0093      	lsls	r3, r2, #2
 8003224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003228:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if (usbp->setup[4] & 0x80)
 800322c:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	d470      	bmi.n	8003314 <_usb_ep0setup+0x384>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8003232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003236:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800323a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003244:	e765      	b.n	8003112 <_usb_ep0setup+0x182>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003246:	b92a      	cbnz	r2, 8003254 <_usb_ep0setup+0x2c4>
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8003248:	2102      	movs	r1, #2
 800324a:	66a5      	str	r5, [r4, #104]	; 0x68
 800324c:	6722      	str	r2, [r4, #112]	; 0x70
 800324e:	66e1      	str	r1, [r4, #108]	; 0x6c
 8003250:	460d      	mov	r5, r1
 8003252:	e6c4      	b.n	8002fde <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8003254:	2a01      	cmp	r2, #1
 8003256:	f47f aeef 	bne.w	8003038 <_usb_ep0setup+0xa8>
    return TRUE;
  case USB_RTYPE_RECIPIENT_INTERFACE | (USB_REQ_GET_STATUS << 8):
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800325a:	4912      	ldr	r1, [pc, #72]	; (80032a4 <_usb_ep0setup+0x314>)
 800325c:	2502      	movs	r5, #2
 800325e:	2200      	movs	r2, #0
 8003260:	66a1      	str	r1, [r4, #104]	; 0x68
 8003262:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003264:	6722      	str	r2, [r4, #112]	; 0x70
 8003266:	e6ba      	b.n	8002fde <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 8003268:	6861      	ldr	r1, [r4, #4]
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
 800326a:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 800326e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8003272:	684d      	ldr	r5, [r1, #4]
 8003274:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003278:	4620      	mov	r0, r4
 800327a:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800327e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8003282:	47a8      	blx	r5
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
    if (dp == NULL)
 8003284:	2800      	cmp	r0, #0
 8003286:	f43f aed7 	beq.w	8003038 <_usb_ep0setup+0xa8>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800328a:	6843      	ldr	r3, [r0, #4]
 800328c:	6805      	ldr	r5, [r0, #0]
 800328e:	66a3      	str	r3, [r4, #104]	; 0x68
 8003290:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003292:	6726      	str	r6, [r4, #112]	; 0x70
 8003294:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003298:	e6a1      	b.n	8002fde <_usb_ep0setup+0x4e>
 800329a:	bf00      	nop
 800329c:	40005c00 	.word	0x40005c00
 80032a0:	08002971 	.word	0x08002971
 80032a4:	08009f30 	.word	0x08009f30
    }
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80032a8:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80032ac:	2a01      	cmp	r2, #1
 80032ae:	f47f aec3 	bne.w	8003038 <_usb_ep0setup+0xa8>
      usbp->status |= 2;
 80032b2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80032b6:	66a6      	str	r6, [r4, #104]	; 0x68
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 80032b8:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80032bc:	66e6      	str	r6, [r4, #108]	; 0x6c
 80032be:	6726      	str	r6, [r4, #112]	; 0x70
 80032c0:	4635      	mov	r5, r6
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 80032c2:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 80032c6:	e68a      	b.n	8002fde <_usb_ep0setup+0x4e>
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
 80032c8:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80032cc:	481e      	ldr	r0, [pc, #120]	; (8003348 <_usb_ep0setup+0x3b8>)
 80032ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032d2:	f001 010f 	and.w	r1, r1, #15
 80032d6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80032da:	d10f      	bne.n	80032fc <_usb_ep0setup+0x36c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 80032dc:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 80032e0:	f43f aeaa 	beq.w	8003038 <_usb_ep0setup+0xa8>
 80032e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80032e8:	d10e      	bne.n	8003308 <_usb_ep0setup+0x378>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80032ea:	4918      	ldr	r1, [pc, #96]	; (800334c <_usb_ep0setup+0x3bc>)
 80032ec:	66e2      	str	r2, [r4, #108]	; 0x6c
 80032ee:	6726      	str	r6, [r4, #112]	; 0x70
 80032f0:	4615      	mov	r5, r2
 80032f2:	66a1      	str	r1, [r4, #104]	; 0x68
 80032f4:	e673      	b.n	8002fde <_usb_ep0setup+0x4e>
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0)
      usbp->state = USB_SELECTED;
    else
      usbp->state = USB_ACTIVE;
 80032f6:	2204      	movs	r2, #4
 80032f8:	7022      	strb	r2, [r4, #0]
 80032fa:	e76d      	b.n	80031d8 <_usb_ep0setup+0x248>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80032fc:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 8003300:	f43f ae9a 	beq.w	8003038 <_usb_ep0setup+0xa8>
 8003304:	2910      	cmp	r1, #16
 8003306:	d0f0      	beq.n	80032ea <_usb_ep0setup+0x35a>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8003308:	4911      	ldr	r1, [pc, #68]	; (8003350 <_usb_ep0setup+0x3c0>)
 800330a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800330c:	6726      	str	r6, [r4, #112]	; 0x70
 800330e:	4615      	mov	r5, r2
 8003310:	66a1      	str	r1, [r4, #104]	; 0x68
 8003312:	e664      	b.n	8002fde <_usb_ep0setup+0x4e>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8003314:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8003318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331c:	f082 0210 	eor.w	r2, r2, #16
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003326:	e6f4      	b.n	8003112 <_usb_ep0setup+0x182>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8003328:	f001 0130 	and.w	r1, r1, #48	; 0x30
 800332c:	2930      	cmp	r1, #48	; 0x30
 800332e:	f43f aef0 	beq.w	8003112 <_usb_ep0setup+0x182>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333c:	f083 0320 	eor.w	r3, r3, #32
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8003346:	e6e4      	b.n	8003112 <_usb_ep0setup+0x182>
 8003348:	40005c00 	.word	0x40005c00
 800334c:	0800a040 	.word	0x0800a040
 8003350:	08009f40 	.word	0x08009f40
 8003354:	f3af 8000 	nop.w
 8003358:	f3af 8000 	nop.w
 800335c:	f3af 8000 	nop.w

08003360 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8003360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003364:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];
 8003368:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44

  if (sdup == NULL)
 800336c:	b1ac      	cbz	r4, 800339a <sduDataReceived+0x3a>
 800336e:	460d      	mov	r5, r1
 8003370:	4606      	mov	r6, r0
 8003372:	2720      	movs	r7, #32
 8003374:	f387 8811 	msr	BASEPRI, r7
 8003378:	2104      	movs	r1, #4
 800337a:	1860      	adds	r0, r4, r1
 800337c:	f003 fb80 	bl	8006a80 <chEvtBroadcastFlagsI>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 8003380:	69a3      	ldr	r3, [r4, #24]
 8003382:	69e2      	ldr	r2, [r4, #28]
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8003384:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003388:	6961      	ldr	r1, [r4, #20]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	8a40      	ldrh	r0, [r0, #18]
 800338e:	1a53      	subs	r3, r2, r1
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8003390:	4298      	cmp	r0, r3
 8003392:	d904      	bls.n	800339e <sduDataReceived+0x3e>
 8003394:	2300      	movs	r3, #0
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800339e:	2100      	movs	r1, #0
 80033a0:	f381 8811 	msr	BASEPRI, r1
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 80033a4:	fbb3 f3f0 	udiv	r3, r3, r0
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80033a8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80033ac:	fb00 f303 	mul.w	r3, r0, r3
 80033b0:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 80033b2:	340c      	adds	r4, #12

  osp->rxqueued           = TRUE;
 80033b4:	2001      	movs	r0, #1
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80033b6:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80033b8:	7010      	strb	r0, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80033ba:	6053      	str	r3, [r2, #4]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
 80033bc:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80033be:	4630      	mov	r0, r6
 80033c0:	4629      	mov	r1, r5
 80033c2:	f004 fa85 	bl	80078d0 <usb_lld_prepare_receive>
 80033c6:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    usbStartReceiveI(usbp, ep);
 80033ca:	4630      	mov	r0, r6
 80033cc:	4629      	mov	r1, r5
 80033ce:	f7ff fd4f 	bl	8002e70 <usbStartReceiveI>
 80033d2:	e7df      	b.n	8003394 <sduDataReceived+0x34>
 80033d4:	f3af 8000 	nop.w
 80033d8:	f3af 8000 	nop.w
 80033dc:	f3af 8000 	nop.w

080033e0 <inotify.lto_priv.85>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 80033e2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80033e4:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	7819      	ldrb	r1, [r3, #0]
 80033ec:	2904      	cmp	r1, #4
 80033ee:	d000      	beq.n	80033f2 <inotify.lto_priv.85+0x12>
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f2:	7a21      	ldrb	r1, [r4, #8]
 80033f4:	2902      	cmp	r1, #2
 80033f6:	d1fb      	bne.n	80033f0 <inotify.lto_priv.85+0x10>
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 80033f8:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 80033fa:	895a      	ldrh	r2, [r3, #10]
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 80033fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003400:	68d8      	ldr	r0, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8003402:	fa42 f301 	asr.w	r3, r2, r1
 8003406:	f013 0301 	ands.w	r3, r3, #1
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800340a:	8a40      	ldrh	r0, [r0, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 800340c:	d1f0      	bne.n	80033f0 <inotify.lto_priv.85+0x10>
 800340e:	69a2      	ldr	r2, [r4, #24]
 8003410:	69e1      	ldr	r1, [r4, #28]
 8003412:	6965      	ldr	r5, [r4, #20]
 8003414:	1a89      	subs	r1, r1, r2
 8003416:	1b4a      	subs	r2, r1, r5
 8003418:	4290      	cmp	r0, r2
 800341a:	d8e9      	bhi.n	80033f0 <inotify.lto_priv.85+0x10>
 800341c:	f383 8811 	msr	BASEPRI, r3
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8003420:	fbb2 f2f0 	udiv	r2, r2, r0
    usbPrepareQueuedReceive(sdup->config->usbp,
 8003424:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8003428:	fb00 f202 	mul.w	r2, r0, r2
    usbPrepareQueuedReceive(sdup->config->usbp,
 800342c:	6808      	ldr	r0, [r1, #0]
 800342e:	7949      	ldrb	r1, [r1, #5]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8003430:	2701      	movs	r7, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003432:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8003436:	68ed      	ldr	r5, [r5, #12]
 8003438:	f104 060c 	add.w	r6, r4, #12
 800343c:	69ad      	ldr	r5, [r5, #24]

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 800343e:	60ab      	str	r3, [r5, #8]
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8003440:	606a      	str	r2, [r5, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8003442:	702f      	strb	r7, [r5, #0]
  osp->mode.queue.rxqueue = iqp;
 8003444:	60ee      	str	r6, [r5, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8003446:	f004 fa43 	bl	80078d0 <usb_lld_prepare_receive>
 800344a:	2320      	movs	r3, #32
 800344c:	f383 8811 	msr	BASEPRI, r3
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8003450:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	7959      	ldrb	r1, [r3, #5]
  }
}
 8003458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedReceive(sdup->config->usbp,
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 800345c:	f7ff bd08 	b.w	8002e70 <usbStartReceiveI>

08003460 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8003460:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8003462:	b570      	push	{r4, r5, r6, lr}
 8003464:	4614      	mov	r4, r2
 8003466:	4606      	mov	r6, r0
 8003468:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 800346a:	b123      	cbz	r3, 8003476 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800346c:	4618      	mov	r0, r3
 800346e:	2100      	movs	r1, #0
 8003470:	2210      	movs	r2, #16
 8003472:	f006 f845 	bl	8009500 <memset>
  if (epcp->out_state != NULL)
 8003476:	69a0      	ldr	r0, [r4, #24]
 8003478:	b118      	cbz	r0, 8003482 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800347a:	2100      	movs	r1, #0
 800347c:	2214      	movs	r2, #20
 800347e:	f006 f83f 	bl	8009500 <memset>

  usbp->epc[ep] = epcp;
 8003482:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8003486:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8003488:	4630      	mov	r0, r6
 800348a:	4629      	mov	r1, r5
}
 800348c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8003490:	f004 ba2e 	b.w	80078f0 <usb_lld_init_endpoint>
 8003494:	f3af 8000 	nop.w
 8003498:	f3af 8000 	nop.w
 800349c:	f3af 8000 	nop.w

080034a0 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 80034a0:	b4f0      	push	{r4, r5, r6, r7}
 80034a2:	2320      	movs	r3, #32
 80034a4:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 80034a8:	7803      	ldrb	r3, [r0, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 80034aa:	6041      	str	r1, [r0, #4]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d017      	beq.n	80034e0 <gptStart+0x40>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80034b0:	6842      	ldr	r2, [r0, #4]
 80034b2:	6883      	ldr	r3, [r0, #8]
 80034b4:	6811      	ldr	r1, [r2, #0]
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80034b6:	68d4      	ldr	r4, [r2, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80034b8:	fbb3 f3f1 	udiv	r3, r3, r1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
 80034bc:	6896      	ldr	r6, [r2, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80034be:	3b01      	subs	r3, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80034c0:	68c2      	ldr	r2, [r0, #12]
 80034c2:	2100      	movs	r1, #0
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80034c4:	b29b      	uxth	r3, r3
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80034c6:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 80034ca:	2502      	movs	r5, #2
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80034cc:	6011      	str	r1, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 80034ce:	6056      	str	r6, [r2, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80034d0:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 80034d2:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80034d4:	60d4      	str	r4, [r2, #12]
 80034d6:	7005      	strb	r5, [r0, #0]
 80034d8:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 80034dc:	bcf0      	pop	{r4, r5, r6, r7}
 80034de:	4770      	bx	lr
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <gptStart+0xa8>)
 80034e2:	4298      	cmp	r0, r3
 80034e4:	d019      	beq.n	800351a <gptStart+0x7a>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 80034e6:	4b19      	ldr	r3, [pc, #100]	; (800354c <gptStart+0xac>)
 80034e8:	4298      	cmp	r0, r3
 80034ea:	d1e1      	bne.n	80034b0 <gptStart+0x10>
      rccEnableTIM4(FALSE);
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <gptStart+0xb0>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <gptStart+0xb4>)
 80034f0:	69d9      	ldr	r1, [r3, #28]
      rccResetTIM4();
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 80034f2:	4d19      	ldr	r5, [pc, #100]	; (8003558 <gptStart+0xb8>)
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 80034f4:	f041 0104 	orr.w	r1, r1, #4
 80034f8:	61d9      	str	r1, [r3, #28]
      rccResetTIM4();
 80034fa:	6919      	ldr	r1, [r3, #16]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80034fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003500:	2700      	movs	r7, #0
 8003502:	f041 0104 	orr.w	r1, r1, #4
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8003506:	2670      	movs	r6, #112	; 0x70
 8003508:	6119      	str	r1, [r3, #16]
 800350a:	611f      	str	r7, [r3, #16]
 800350c:	f882 631e 	strb.w	r6, [r2, #798]	; 0x31e
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8003510:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8003514:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8003516:	6085      	str	r5, [r0, #8]
 8003518:	e7ca      	b.n	80034b0 <gptStart+0x10>
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <gptStart+0xb0>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <gptStart+0xb4>)
 800351e:	69d9      	ldr	r1, [r3, #28]
      rccResetTIM3();
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8003520:	4d0d      	ldr	r5, [pc, #52]	; (8003558 <gptStart+0xb8>)
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 8003522:	f041 0102 	orr.w	r1, r1, #2
 8003526:	61d9      	str	r1, [r3, #28]
      rccResetTIM3();
 8003528:	6919      	ldr	r1, [r3, #16]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800352a:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 800352e:	2700      	movs	r7, #0
 8003530:	f041 0102 	orr.w	r1, r1, #2
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8003534:	2670      	movs	r6, #112	; 0x70
 8003536:	6119      	str	r1, [r3, #16]
 8003538:	611f      	str	r7, [r3, #16]
 800353a:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800353e:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8003542:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8003544:	6085      	str	r5, [r0, #8]
 8003546:	e7b3      	b.n	80034b0 <gptStart+0x10>
 8003548:	20001f94 	.word	0x20001f94
 800354c:	20001794 	.word	0x20001794
 8003550:	40021000 	.word	0x40021000
 8003554:	e000e100 	.word	0xe000e100
 8003558:	02dc6c00 	.word	0x02dc6c00
 800355c:	f3af 8000 	nop.w

08003560 <tmo.lto_priv.105>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	f3af 8000 	nop.w
 8003568:	f3af 8000 	nop.w
 800356c:	f3af 8000 	nop.w

08003570 <bmk7_setup.lto_priv.176>:
 8003570:	4b02      	ldr	r3, [pc, #8]	; (800357c <bmk7_setup.lto_priv.176+0xc>)
 8003572:	2200      	movs	r2, #0
 8003574:	605b      	str	r3, [r3, #4]
 8003576:	601b      	str	r3, [r3, #0]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	4770      	bx	lr
 800357c:	200016c0 	.word	0x200016c0

08003580 <thread1.lto_priv.108>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	f3af 8000 	nop.w
 8003588:	f3af 8000 	nop.w
 800358c:	f3af 8000 	nop.w

08003590 <notify.lto_priv.74>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	f3af 8000 	nop.w
 800359c:	f3af 8000 	nop.w

080035a0 <queues2_setup.lto_priv.168>:
 * This test case tests sysnchronos and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 80035a0:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <queues2_setup.lto_priv.168+0x24>)
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <queues2_setup.lto_priv.168+0x28>)
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80035a6:	4809      	ldr	r0, [pc, #36]	; (80035cc <queues2_setup.lto_priv.168+0x2c>)
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80035a8:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80035aa:	2404      	movs	r4, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 80035ac:	2100      	movs	r1, #0
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80035ae:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80035b0:	609c      	str	r4, [r3, #8]
 80035b2:	605b      	str	r3, [r3, #4]
 80035b4:	601b      	str	r3, [r3, #0]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80035b6:	615a      	str	r2, [r3, #20]
 80035b8:	619a      	str	r2, [r3, #24]
 80035ba:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80035bc:	61d8      	str	r0, [r3, #28]
  oqp->q_link = link;
 80035be:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80035c0:	bc30      	pop	{r4, r5}
 80035c2:	4770      	bx	lr
 80035c4:	200017c8 	.word	0x200017c8
 80035c8:	20000ce8 	.word	0x20000ce8
 80035cc:	08003591 	.word	0x08003591

080035d0 <queues1_setup.lto_priv.166>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <queues1_setup.lto_priv.166+0x24>)
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <queues1_setup.lto_priv.166+0x28>)
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80035d4:	4809      	ldr	r0, [pc, #36]	; (80035fc <queues1_setup.lto_priv.166+0x2c>)
 * This test case tests sysnchronos and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 80035d6:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80035d8:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80035da:	1d14      	adds	r4, r2, #4
 80035dc:	611c      	str	r4, [r3, #16]
 80035de:	605b      	str	r3, [r3, #4]
 80035e0:	601b      	str	r3, [r3, #0]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	619a      	str	r2, [r3, #24]
 80035e6:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80035e8:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80035ea:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 80035ec:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 80035ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	200017c8 	.word	0x200017c8
 80035f8:	20000820 	.word	0x20000820
 80035fc:	08003591 	.word	0x08003591

08003600 <thread1.lto_priv.107>:

static msg_t thread1(void *p) {
 8003600:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8003602:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003606:	4802      	ldr	r0, [pc, #8]	; (8003610 <thread1.lto_priv.107+0x10>)
 8003608:	f003 f85a 	bl	80066c0 <chIQGetTimeout>
  return 0;
}
 800360c:	2000      	movs	r0, #0
 800360e:	bd08      	pop	{r3, pc}
 8003610:	20000820 	.word	0x20000820
 8003614:	f3af 8000 	nop.w
 8003618:	f3af 8000 	nop.w
 800361c:	f3af 8000 	nop.w

08003620 <bmk9_execute.lto_priv.179>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8003622:	4926      	ldr	r1, [pc, #152]	; (80036bc <bmk9_execute.lto_priv.179+0x9c>)
 8003624:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003626:	2200      	movs	r2, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8003628:	f101 0010 	add.w	r0, r1, #16
 800362c:	605b      	str	r3, [r3, #4]
 800362e:	601b      	str	r3, [r3, #0]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 8003630:	4614      	mov	r4, r2
 8003632:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8003634:	6159      	str	r1, [r3, #20]
 8003636:	6199      	str	r1, [r3, #24]
 8003638:	60d9      	str	r1, [r3, #12]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800363a:	609a      	str	r2, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 800363c:	61da      	str	r2, [r3, #28]
  iqp->q_link = link;
 800363e:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8003640:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8003642:	f002 faf5 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8003646:	f005 fe73 	bl	8009330 <test_start_timer.constprop.14>
 800364a:	4e1e      	ldr	r6, [pc, #120]	; (80036c4 <bmk9_execute.lto_priv.179+0xa4>)
 800364c:	2520      	movs	r5, #32
 800364e:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8003652:	2100      	movs	r1, #0
 8003654:	481a      	ldr	r0, [pc, #104]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 8003656:	f003 f85b 	bl	8006710 <chIQPutI>
    chIQPutI(&iq, 1);
 800365a:	2101      	movs	r1, #1
 800365c:	4818      	ldr	r0, [pc, #96]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 800365e:	f003 f857 	bl	8006710 <chIQPutI>
    chIQPutI(&iq, 2);
 8003662:	2102      	movs	r1, #2
 8003664:	4816      	ldr	r0, [pc, #88]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 8003666:	f003 f853 	bl	8006710 <chIQPutI>
    chIQPutI(&iq, 3);
 800366a:	2103      	movs	r1, #3
 800366c:	4814      	ldr	r0, [pc, #80]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 800366e:	f003 f84f 	bl	8006710 <chIQPutI>
 8003672:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8003676:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800367a:	4811      	ldr	r0, [pc, #68]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 800367c:	f003 f820 	bl	80066c0 <chIQGetTimeout>
 8003680:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003684:	480e      	ldr	r0, [pc, #56]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 8003686:	f003 f81b 	bl	80066c0 <chIQGetTimeout>
 800368a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800368e:	480c      	ldr	r0, [pc, #48]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 8003690:	f003 f816 	bl	80066c0 <chIQGetTimeout>
 8003694:	480a      	ldr	r0, [pc, #40]	; (80036c0 <bmk9_execute.lto_priv.179+0xa0>)
 8003696:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800369a:	f003 f811 	bl	80066c0 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800369e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 80036a0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0d3      	beq.n	800364e <bmk9_execute.lto_priv.179+0x2e>
  test_print("--- Score : ");
 80036a6:	4808      	ldr	r0, [pc, #32]	; (80036c8 <bmk9_execute.lto_priv.179+0xa8>)
 80036a8:	f002 fcb2 	bl	8006010 <test_print>
  test_printn(n * 4);
 80036ac:	00a0      	lsls	r0, r4, #2
 80036ae:	f002 fcbf 	bl	8006030 <test_printn>
  test_println(" bytes/S");
}
 80036b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 80036b6:	4805      	ldr	r0, [pc, #20]	; (80036cc <bmk9_execute.lto_priv.179+0xac>)
 80036b8:	f002 bc8a 	b.w	8005fd0 <test_println>
 80036bc:	20001724 	.word	0x20001724
 80036c0:	200016cc 	.word	0x200016cc
 80036c4:	20001f90 	.word	0x20001f90
 80036c8:	08009ff8 	.word	0x08009ff8
 80036cc:	0800a070 	.word	0x0800a070

080036d0 <bmk8_execute.lto_priv.178>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 80036d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80036d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037a8 <bmk8_execute.lto_priv.178+0xd8>
 80036d8:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 80036da:	ac04      	add	r4, sp, #16
 80036dc:	2300      	movs	r3, #0
 80036de:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 80036e2:	f002 faa5 	bl	8005c30 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80036e6:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80036ea:	4f2a      	ldr	r7, [pc, #168]	; (8003794 <bmk8_execute.lto_priv.178+0xc4>)
 80036ec:	4e2a      	ldr	r6, [pc, #168]	; (8003798 <bmk8_execute.lto_priv.178+0xc8>)
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4638      	mov	r0, r7
 80036f2:	4633      	mov	r3, r6
 80036f4:	3a01      	subs	r2, #1
 80036f6:	9400      	str	r4, [sp, #0]
 80036f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80036fc:	f003 fbd0 	bl	8006ea0 <chThdCreateStatic>
 8003700:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003704:	4d25      	ldr	r5, [pc, #148]	; (800379c <bmk8_execute.lto_priv.178+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800370c:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800370e:	4633      	mov	r3, r6
 8003710:	3a01      	subs	r2, #1
 8003712:	9400      	str	r4, [sp, #0]
 8003714:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8003718:	f003 fbc2 	bl	8006ea0 <chThdCreateStatic>
 800371c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003720:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8003728:	4633      	mov	r3, r6
 800372a:	3a01      	subs	r2, #1
 800372c:	9400      	str	r4, [sp, #0]
 800372e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003732:	f003 fbb5 	bl	8006ea0 <chThdCreateStatic>
 8003736:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800373a:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8003742:	4633      	mov	r3, r6
 8003744:	3a01      	subs	r2, #1
 8003746:	9400      	str	r4, [sp, #0]
 8003748:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800374c:	f003 fba8 	bl	8006ea0 <chThdCreateStatic>
 8003750:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003754:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003758:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800375a:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800375c:	3a01      	subs	r2, #1
 800375e:	4633      	mov	r3, r6
 8003760:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8003764:	9400      	str	r4, [sp, #0]
 8003766:	f003 fb9b 	bl	8006ea0 <chThdCreateStatic>
 800376a:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 800376c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003770:	f003 fca6 	bl	80070c0 <chThdSleep>
  test_terminate_threads();
 8003774:	f002 fa84 	bl	8005c80 <test_terminate_threads>
  test_wait_threads();
 8003778:	f002 fa6a 	bl	8005c50 <test_wait_threads>

  test_print("--- Score : ");
 800377c:	4808      	ldr	r0, [pc, #32]	; (80037a0 <bmk8_execute.lto_priv.178+0xd0>)
 800377e:	f002 fc47 	bl	8006010 <test_print>
  test_printn(n);
 8003782:	9803      	ldr	r0, [sp, #12]
 8003784:	f002 fc54 	bl	8006030 <test_printn>
  test_println(" ctxswc/S");
 8003788:	4806      	ldr	r0, [pc, #24]	; (80037a4 <bmk8_execute.lto_priv.178+0xd4>)
 800378a:	f002 fc21 	bl	8005fd0 <test_println>
}
 800378e:	b004      	add	sp, #16
 8003790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003794:	200017c8 	.word	0x200017c8
 8003798:	08003821 	.word	0x08003821
 800379c:	20001710 	.word	0x20001710
 80037a0:	08009ff8 	.word	0x08009ff8
 80037a4:	0800a07c 	.word	0x0800a07c
 80037a8:	20001e40 	.word	0x20001e40
 80037ac:	f3af 8000 	nop.w

080037b0 <bmk6_execute.lto_priv.175>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <bmk6_execute.lto_priv.175+0x4c>)
 80037b4:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80037b6:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 80037b8:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 80037ba:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 80037bc:	4627      	mov	r7, r4
 80037be:	4e10      	ldr	r6, [pc, #64]	; (8003800 <bmk6_execute.lto_priv.175+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 80037c0:	3501      	adds	r5, #1
  test_wait_tick();
 80037c2:	f002 fa35 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 80037c6:	f005 fdb3 	bl	8009330 <test_start_timer.constprop.14>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <bmk6_execute.lto_priv.175+0x54>)
 80037cc:	9700      	str	r7, [sp, #0]
 80037ce:	480e      	ldr	r0, [pc, #56]	; (8003808 <bmk6_execute.lto_priv.175+0x58>)
 80037d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80037d4:	462a      	mov	r2, r5
 80037d6:	f003 fb63 	bl	8006ea0 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80037da:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 80037dc:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f3      	beq.n	80037ca <bmk6_execute.lto_priv.175+0x1a>
  test_print("--- Score : ");
 80037e2:	480a      	ldr	r0, [pc, #40]	; (800380c <bmk6_execute.lto_priv.175+0x5c>)
 80037e4:	f002 fc14 	bl	8006010 <test_print>
  test_printn(n);
 80037e8:	4620      	mov	r0, r4
 80037ea:	f002 fc21 	bl	8006030 <test_printn>
  test_println(" threads/S");
 80037ee:	4808      	ldr	r0, [pc, #32]	; (8003810 <bmk6_execute.lto_priv.175+0x60>)
}
 80037f0:	b003      	add	sp, #12
 80037f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80037f6:	f002 bbeb 	b.w	8005fd0 <test_println>
 80037fa:	bf00      	nop
 80037fc:	20001e40 	.word	0x20001e40
 8003800:	20001f90 	.word	0x20001f90
 8003804:	08003581 	.word	0x08003581
 8003808:	200017c8 	.word	0x200017c8
 800380c:	08009ff8 	.word	0x08009ff8
 8003810:	0800a088 	.word	0x0800a088
 8003814:	f3af 8000 	nop.w
 8003818:	f3af 8000 	nop.w
 800381c:	f3af 8000 	nop.w

08003820 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4604      	mov	r4, r0
 8003824:	4d08      	ldr	r5, [pc, #32]	; (8003848 <thread8+0x28>)

  do {
    chThdYield();
 8003826:	f003 f9a3 	bl	8006b70 <chThdYield>
    chThdYield();
 800382a:	f003 f9a1 	bl	8006b70 <chThdYield>
    chThdYield();
 800382e:	f003 f99f 	bl	8006b70 <chThdYield>
    chThdYield();
 8003832:	f003 f99d 	bl	8006b70 <chThdYield>
    (*(uint32_t *)p) += 4;
 8003836:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8003838:	69aa      	ldr	r2, [r5, #24]
 800383a:	3304      	adds	r3, #4
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8003840:	075b      	lsls	r3, r3, #29
 8003842:	d5f0      	bpl.n	8003826 <thread8+0x6>
  return 0;
}
 8003844:	2000      	movs	r0, #0
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	20001e40 	.word	0x20001e40
 800384c:	f3af 8000 	nop.w

08003850 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 8003850:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003852:	4c07      	ldr	r4, [pc, #28]	; (8003870 <thread3+0x20>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8003854:	69a3      	ldr	r3, [r4, #24]
 8003856:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8003858:	075a      	lsls	r2, r3, #29
 800385a:	d406      	bmi.n	800386a <thread3+0x1a>
    chSemWait(&sem1);
 800385c:	4805      	ldr	r0, [pc, #20]	; (8003874 <thread3+0x24>)
 800385e:	f003 fb77 	bl	8006f50 <chSemWait>
 8003862:	69a3      	ldr	r3, [r4, #24]
 8003864:	7f5b      	ldrb	r3, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8003866:	075b      	lsls	r3, r3, #29
 8003868:	d5f8      	bpl.n	800385c <thread3+0xc>
    chSemWait(&sem1);
  return 0;
}
 800386a:	2000      	movs	r0, #0
 800386c:	bd10      	pop	{r4, pc}
 800386e:	bf00      	nop
 8003870:	20001e40 	.word	0x20001e40
 8003874:	200016c0 	.word	0x200016c0
 8003878:	f3af 8000 	nop.w
 800387c:	f3af 8000 	nop.w

08003880 <bmk7_execute.lto_priv.177>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8003880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003884:	4e3a      	ldr	r6, [pc, #232]	; (8003970 <bmk7_execute.lto_priv.177+0xf0>)
 8003886:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003888:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 800388a:	2400      	movs	r4, #0
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003892:	3205      	adds	r2, #5
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <bmk7_execute.lto_priv.177+0xf4>)
 8003896:	4838      	ldr	r0, [pc, #224]	; (8003978 <bmk7_execute.lto_priv.177+0xf8>)
 8003898:	9400      	str	r4, [sp, #0]
 800389a:	f003 fb01 	bl	8006ea0 <chThdCreateStatic>
 800389e:	69b3      	ldr	r3, [r6, #24]
 80038a0:	4d36      	ldr	r5, [pc, #216]	; (800397c <bmk7_execute.lto_priv.177+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 80038a8:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 80038aa:	3204      	adds	r2, #4
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <bmk7_execute.lto_priv.177+0xf4>)
 80038ae:	9400      	str	r4, [sp, #0]
 80038b0:	4833      	ldr	r0, [pc, #204]	; (8003980 <bmk7_execute.lto_priv.177+0x100>)
 80038b2:	f003 faf5 	bl	8006ea0 <chThdCreateStatic>
 80038b6:	69b3      	ldr	r3, [r6, #24]
 80038b8:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038c0:	3203      	adds	r2, #3
 80038c2:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <bmk7_execute.lto_priv.177+0xf4>)
 80038c4:	482f      	ldr	r0, [pc, #188]	; (8003984 <bmk7_execute.lto_priv.177+0x104>)
 80038c6:	9400      	str	r4, [sp, #0]
 80038c8:	f003 faea 	bl	8006ea0 <chThdCreateStatic>
 80038cc:	69b3      	ldr	r3, [r6, #24]
 80038ce:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038d6:	3202      	adds	r2, #2
 80038d8:	4b26      	ldr	r3, [pc, #152]	; (8003974 <bmk7_execute.lto_priv.177+0xf4>)
 80038da:	482b      	ldr	r0, [pc, #172]	; (8003988 <bmk7_execute.lto_priv.177+0x108>)
 80038dc:	9400      	str	r4, [sp, #0]
 80038de:	f003 fadf 	bl	8006ea0 <chThdCreateStatic>
 80038e2:	69b3      	ldr	r3, [r6, #24]
 80038e4:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038ec:	3201      	adds	r2, #1
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <bmk7_execute.lto_priv.177+0xf4>)
 80038f0:	4826      	ldr	r0, [pc, #152]	; (800398c <bmk7_execute.lto_priv.177+0x10c>)
 80038f2:	9400      	str	r4, [sp, #0]
 80038f4:	f003 fad4 	bl	8006ea0 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80038f8:	46a1      	mov	r9, r4
 80038fa:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 80038fc:	f002 f998 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8003900:	f005 fd16 	bl	8009330 <test_start_timer.constprop.14>
 8003904:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80039a0 <bmk7_execute.lto_priv.177+0x120>
 8003908:	2720      	movs	r7, #32
 800390a:	2620      	movs	r6, #32
 800390c:	f387 8811 	msr	BASEPRI, r7
 8003910:	481f      	ldr	r0, [pc, #124]	; (8003990 <bmk7_execute.lto_priv.177+0x110>)
 8003912:	2100      	movs	r1, #0
 8003914:	f003 fce4 	bl	80072e0 <chSemResetI>
 8003918:	2500      	movs	r5, #0
  chSchRescheduleS();
 800391a:	f003 f9d1 	bl	8006cc0 <chSchRescheduleS>
 800391e:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003922:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8003926:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0ee      	beq.n	800390a <bmk7_execute.lto_priv.177+0x8a>
  test_terminate_threads();
 800392c:	f002 f9a8 	bl	8005c80 <test_terminate_threads>
 8003930:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8003934:	4816      	ldr	r0, [pc, #88]	; (8003990 <bmk7_execute.lto_priv.177+0x110>)
 8003936:	4629      	mov	r1, r5
 8003938:	f003 fcd2 	bl	80072e0 <chSemResetI>
  chSchRescheduleS();
 800393c:	f003 f9c0 	bl	8006cc0 <chSchRescheduleS>
 8003940:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8003944:	f002 f984 	bl	8005c50 <test_wait_threads>

  test_print("--- Score : ");
 8003948:	4812      	ldr	r0, [pc, #72]	; (8003994 <bmk7_execute.lto_priv.177+0x114>)
 800394a:	f002 fb61 	bl	8006010 <test_print>
  test_printn(n);
 800394e:	4620      	mov	r0, r4
 8003950:	f002 fb6e 	bl	8006030 <test_printn>
  test_print(" reschedules/S, ");
 8003954:	4810      	ldr	r0, [pc, #64]	; (8003998 <bmk7_execute.lto_priv.177+0x118>)
 8003956:	f002 fb5b 	bl	8006010 <test_print>
  test_printn(n * 6);
 800395a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800395e:	0040      	lsls	r0, r0, #1
 8003960:	f002 fb66 	bl	8006030 <test_printn>
  test_println(" ctxswc/S");
 8003964:	480d      	ldr	r0, [pc, #52]	; (800399c <bmk7_execute.lto_priv.177+0x11c>)
}
 8003966:	b003      	add	sp, #12
 8003968:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 800396c:	f002 bb30 	b.w	8005fd0 <test_println>
 8003970:	20001e40 	.word	0x20001e40
 8003974:	08003851 	.word	0x08003851
 8003978:	200017c8 	.word	0x200017c8
 800397c:	20001710 	.word	0x20001710
 8003980:	20001910 	.word	0x20001910
 8003984:	20001a58 	.word	0x20001a58
 8003988:	20001ba0 	.word	0x20001ba0
 800398c:	20001ce8 	.word	0x20001ce8
 8003990:	200016c0 	.word	0x200016c0
 8003994:	08009ff8 	.word	0x08009ff8
 8003998:	0800a094 	.word	0x0800a094
 800399c:	0800a07c 	.word	0x0800a07c
 80039a0:	20001f90 	.word	0x20001f90
 80039a4:	f3af 8000 	nop.w
 80039a8:	f3af 8000 	nop.w
 80039ac:	f3af 8000 	nop.w

080039b0 <bmk5_execute.lto_priv.174>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <bmk5_execute.lto_priv.174+0x50>)
 80039b4:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80039b6:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 80039b8:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80039ba:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 80039bc:	4627      	mov	r7, r4
 80039be:	4e11      	ldr	r6, [pc, #68]	; (8003a04 <bmk5_execute.lto_priv.174+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 80039c0:	3d01      	subs	r5, #1
  test_wait_tick();
 80039c2:	f002 f935 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 80039c6:	f005 fcb3 	bl	8009330 <test_start_timer.constprop.14>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <bmk5_execute.lto_priv.174+0x58>)
 80039cc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80039d0:	462a      	mov	r2, r5
 80039d2:	9700      	str	r7, [sp, #0]
 80039d4:	480d      	ldr	r0, [pc, #52]	; (8003a0c <bmk5_execute.lto_priv.174+0x5c>)
 80039d6:	f003 fa63 	bl	8006ea0 <chThdCreateStatic>
 80039da:	f003 fae1 	bl	8006fa0 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80039de:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 80039e0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f1      	beq.n	80039ca <bmk5_execute.lto_priv.174+0x1a>
  test_print("--- Score : ");
 80039e6:	480a      	ldr	r0, [pc, #40]	; (8003a10 <bmk5_execute.lto_priv.174+0x60>)
 80039e8:	f002 fb12 	bl	8006010 <test_print>
  test_printn(n);
 80039ec:	4620      	mov	r0, r4
 80039ee:	f002 fb1f 	bl	8006030 <test_printn>
  test_println(" threads/S");
 80039f2:	4808      	ldr	r0, [pc, #32]	; (8003a14 <bmk5_execute.lto_priv.174+0x64>)
}
 80039f4:	b003      	add	sp, #12
 80039f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80039fa:	f002 bae9 	b.w	8005fd0 <test_println>
 80039fe:	bf00      	nop
 8003a00:	20001e40 	.word	0x20001e40
 8003a04:	20001f90 	.word	0x20001f90
 8003a08:	08003581 	.word	0x08003581
 8003a0c:	200017c8 	.word	0x200017c8
 8003a10:	08009ff8 	.word	0x08009ff8
 8003a14:	0800a088 	.word	0x0800a088
 8003a18:	f3af 8000 	nop.w
 8003a1c:	f3af 8000 	nop.w

08003a20 <bmk4_execute.lto_priv.173>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 8003a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <bmk4_execute.lto_priv.173+0x9c>)
 8003a26:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003a28:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a32:	3201      	adds	r2, #1
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <bmk4_execute.lto_priv.173+0xa0>)
 8003a36:	4823      	ldr	r0, [pc, #140]	; (8003ac4 <bmk4_execute.lto_priv.173+0xa4>)
 8003a38:	9500      	str	r5, [sp, #0]
 8003a3a:	f003 fa31 	bl	8006ea0 <chThdCreateStatic>
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <bmk4_execute.lto_priv.173+0xa8>)
 8003a40:	4604      	mov	r4, r0
 8003a42:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8003a44:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8003a46:	f002 f8f3 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8003a4a:	f005 fc71 	bl	8009330 <test_start_timer.constprop.14>
 8003a4e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003ad4 <bmk4_execute.lto_priv.173+0xb4>
 8003a52:	f04f 0820 	mov.w	r8, #32
 8003a56:	2720      	movs	r7, #32
 8003a58:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f003 f956 	bl	8006d10 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8003a64:	4620      	mov	r0, r4
 8003a66:	2100      	movs	r1, #0
 8003a68:	f003 f952 	bl	8006d10 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f003 f94e 	bl	8006d10 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8003a74:	4620      	mov	r0, r4
 8003a76:	2100      	movs	r1, #0
 8003a78:	f003 f94a 	bl	8006d10 <chSchWakeupS>
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003a82:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8003a86:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0e4      	beq.n	8003a56 <bmk4_execute.lto_priv.173+0x36>
 8003a8c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	4620      	mov	r0, r4
 8003a96:	f003 f93b 	bl	8006d10 <chSchWakeupS>
 8003a9a:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 8003a9e:	f002 f8d7 	bl	8005c50 <test_wait_threads>
  test_print("--- Score : ");
 8003aa2:	480a      	ldr	r0, [pc, #40]	; (8003acc <bmk4_execute.lto_priv.173+0xac>)
 8003aa4:	f002 fab4 	bl	8006010 <test_print>
  test_printn(n * 2);
 8003aa8:	0068      	lsls	r0, r5, #1
 8003aaa:	f002 fac1 	bl	8006030 <test_printn>
  test_println(" ctxswc/S");
 8003aae:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <bmk4_execute.lto_priv.173+0xb0>)
}
 8003ab0:	b002      	add	sp, #8
 8003ab2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8003ab6:	f002 ba8b 	b.w	8005fd0 <test_println>
 8003aba:	bf00      	nop
 8003abc:	20001e40 	.word	0x20001e40
 8003ac0:	08003ae1 	.word	0x08003ae1
 8003ac4:	200017c8 	.word	0x200017c8
 8003ac8:	20001710 	.word	0x20001710
 8003acc:	08009ff8 	.word	0x08009ff8
 8003ad0:	0800a07c 	.word	0x0800a07c
 8003ad4:	20001f90 	.word	0x20001f90
 8003ad8:	f3af 8000 	nop.w
 8003adc:	f3af 8000 	nop.w

08003ae0 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003ae0:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	6994      	ldr	r4, [r2, #24]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8003aec:	2003      	movs	r0, #3
 8003aee:	f003 fa17 	bl	8006f20 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8003af2:	6a23      	ldr	r3, [r4, #32]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f9      	beq.n	8003aec <thread4+0xc>
 8003af8:	2000      	movs	r0, #0
 8003afa:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8003afe:	bd10      	pop	{r4, pc}
 8003b00:	20001e40 	.word	0x20001e40
 8003b04:	f3af 8000 	nop.w
 8003b08:	f3af 8000 	nop.w
 8003b0c:	f3af 8000 	nop.w

08003b10 <thread2.lto_priv.110>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	2620      	movs	r6, #32
 8003b14:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 8003b16:	f002 fe2b 	bl	8006770 <chMsgWait>
 8003b1a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003b1c:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003b20:	4621      	mov	r1, r4
 8003b22:	f003 f8f5 	bl	8006d10 <chSchWakeupS>
 8003b26:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 8003b2a:	2c00      	cmp	r4, #0
 8003b2c:	d1f3      	bne.n	8003b16 <thread2.lto_priv.110+0x6>
  return 0;
}
 8003b2e:	4620      	mov	r0, r4
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	bf00      	nop
 8003b34:	f3af 8000 	nop.w
 8003b38:	f3af 8000 	nop.w
 8003b3c:	f3af 8000 	nop.w

08003b40 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8003b44:	f002 f874 	bl	8005c30 <test_wait_tick>
  test_start_timer(1000);
 8003b48:	f005 fbf2 	bl	8009330 <test_start_timer.constprop.14>
 8003b4c:	4e07      	ldr	r6, [pc, #28]	; (8003b6c <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8003b4e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8003b50:	4628      	mov	r0, r5
 8003b52:	2101      	movs	r1, #1
 8003b54:	f002 fe2c 	bl	80067b0 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003b58:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 8003b5a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f7      	beq.n	8003b50 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 8003b60:	4628      	mov	r0, r5
 8003b62:	2100      	movs	r1, #0
 8003b64:	f002 fe24 	bl	80067b0 <chMsgSend>
  return n;
}
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	20001f90 	.word	0x20001f90

08003b70 <bmk3_execute.lto_priv.172>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	4f2c      	ldr	r7, [pc, #176]	; (8003c28 <bmk3_execute.lto_priv.172+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003b76:	4e2d      	ldr	r6, [pc, #180]	; (8003c2c <bmk3_execute.lto_priv.172+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8003b7a:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	2500      	movs	r5, #0
 8003b80:	4630      	mov	r0, r6
 8003b82:	3201      	adds	r2, #1
 8003b84:	9500      	str	r5, [sp, #0]
 8003b86:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003b8a:	4b29      	ldr	r3, [pc, #164]	; (8003c30 <bmk3_execute.lto_priv.172+0xc0>)
 8003b8c:	f003 f988 	bl	8006ea0 <chThdCreateStatic>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	4c28      	ldr	r4, [pc, #160]	; (8003c34 <bmk3_execute.lto_priv.172+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003c44 <bmk3_execute.lto_priv.172+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003b9a:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	3a02      	subs	r2, #2
 8003ba0:	9500      	str	r5, [sp, #0]
 8003ba2:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8003ba6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003baa:	f003 f979 	bl	8006ea0 <chThdCreateStatic>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8003bb8:	4643      	mov	r3, r8
 8003bba:	3a03      	subs	r2, #3
 8003bbc:	9500      	str	r5, [sp, #0]
 8003bbe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003bc2:	f003 f96d 	bl	8006ea0 <chThdCreateStatic>
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8003bd0:	4643      	mov	r3, r8
 8003bd2:	3a04      	subs	r2, #4
 8003bd4:	9500      	str	r5, [sp, #0]
 8003bd6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003bda:	f003 f961 	bl	8006ea0 <chThdCreateStatic>
 8003bde:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8003be0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003be4:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 8003be6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8003be8:	3a05      	subs	r2, #5
 8003bea:	4643      	mov	r3, r8
 8003bec:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003bf0:	9500      	str	r5, [sp, #0]
 8003bf2:	f003 f955 	bl	8006ea0 <chThdCreateStatic>
 8003bf6:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 8003bf8:	6820      	ldr	r0, [r4, #0]
 8003bfa:	f7ff ffa1 	bl	8003b40 <msg_loop_test>
 8003bfe:	4604      	mov	r4, r0
  test_wait_threads();
 8003c00:	f002 f826 	bl	8005c50 <test_wait_threads>
  test_print("--- Score : ");
 8003c04:	480c      	ldr	r0, [pc, #48]	; (8003c38 <bmk3_execute.lto_priv.172+0xc8>)
 8003c06:	f002 fa03 	bl	8006010 <test_print>
  test_printn(n);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f002 fa10 	bl	8006030 <test_printn>
  test_print(" msgs/S, ");
 8003c10:	480a      	ldr	r0, [pc, #40]	; (8003c3c <bmk3_execute.lto_priv.172+0xcc>)
 8003c12:	f002 f9fd 	bl	8006010 <test_print>
  test_printn(n << 1);
 8003c16:	0060      	lsls	r0, r4, #1
 8003c18:	f002 fa0a 	bl	8006030 <test_printn>
  test_println(" ctxswc/S");
 8003c1c:	4808      	ldr	r0, [pc, #32]	; (8003c40 <bmk3_execute.lto_priv.172+0xd0>)
}
 8003c1e:	b002      	add	sp, #8
 8003c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8003c24:	f002 b9d4 	b.w	8005fd0 <test_println>
 8003c28:	20001e40 	.word	0x20001e40
 8003c2c:	200017c8 	.word	0x200017c8
 8003c30:	08003b11 	.word	0x08003b11
 8003c34:	20001710 	.word	0x20001710
 8003c38:	08009ff8 	.word	0x08009ff8
 8003c3c:	0800a0a8 	.word	0x0800a0a8
 8003c40:	0800a07c 	.word	0x0800a07c
 8003c44:	08003581 	.word	0x08003581
 8003c48:	f3af 8000 	nop.w
 8003c4c:	f3af 8000 	nop.w

08003c50 <bmk2_execute.lto_priv.171>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8003c50:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <bmk2_execute.lto_priv.171+0x50>)
 8003c54:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003c56:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003c60:	3201      	adds	r2, #1
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	480f      	ldr	r0, [pc, #60]	; (8003ca4 <bmk2_execute.lto_priv.171+0x54>)
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <bmk2_execute.lto_priv.171+0x58>)
 8003c68:	f003 f91a 	bl	8006ea0 <chThdCreateStatic>
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <bmk2_execute.lto_priv.171+0x5c>)
 8003c6e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8003c70:	f7ff ff66 	bl	8003b40 <msg_loop_test>
 8003c74:	4604      	mov	r4, r0
  test_wait_threads();
 8003c76:	f001 ffeb 	bl	8005c50 <test_wait_threads>
  test_print("--- Score : ");
 8003c7a:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <bmk2_execute.lto_priv.171+0x60>)
 8003c7c:	f002 f9c8 	bl	8006010 <test_print>
  test_printn(n);
 8003c80:	4620      	mov	r0, r4
 8003c82:	f002 f9d5 	bl	8006030 <test_printn>
  test_print(" msgs/S, ");
 8003c86:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <bmk2_execute.lto_priv.171+0x64>)
 8003c88:	f002 f9c2 	bl	8006010 <test_print>
  test_printn(n << 1);
 8003c8c:	0060      	lsls	r0, r4, #1
 8003c8e:	f002 f9cf 	bl	8006030 <test_printn>
  test_println(" ctxswc/S");
 8003c92:	4809      	ldr	r0, [pc, #36]	; (8003cb8 <bmk2_execute.lto_priv.171+0x68>)
}
 8003c94:	b002      	add	sp, #8
 8003c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8003c9a:	f002 b999 	b.w	8005fd0 <test_println>
 8003c9e:	bf00      	nop
 8003ca0:	20001e40 	.word	0x20001e40
 8003ca4:	200017c8 	.word	0x200017c8
 8003ca8:	08003b11 	.word	0x08003b11
 8003cac:	20001710 	.word	0x20001710
 8003cb0:	08009ff8 	.word	0x08009ff8
 8003cb4:	0800a0a8 	.word	0x0800a0a8
 8003cb8:	0800a07c 	.word	0x0800a07c
 8003cbc:	f3af 8000 	nop.w

08003cc0 <bmk1_execute.lto_priv.170>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8003cc0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003cc2:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <bmk1_execute.lto_priv.170+0x50>)
 8003cc4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003cc6:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	480f      	ldr	r0, [pc, #60]	; (8003d14 <bmk1_execute.lto_priv.170+0x54>)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <bmk1_execute.lto_priv.170+0x58>)
 8003cd8:	f003 f8e2 	bl	8006ea0 <chThdCreateStatic>
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <bmk1_execute.lto_priv.170+0x5c>)
 8003cde:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8003ce0:	f7ff ff2e 	bl	8003b40 <msg_loop_test>
 8003ce4:	4604      	mov	r4, r0
  test_wait_threads();
 8003ce6:	f001 ffb3 	bl	8005c50 <test_wait_threads>
  test_print("--- Score : ");
 8003cea:	480d      	ldr	r0, [pc, #52]	; (8003d20 <bmk1_execute.lto_priv.170+0x60>)
 8003cec:	f002 f990 	bl	8006010 <test_print>
  test_printn(n);
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f002 f99d 	bl	8006030 <test_printn>
  test_print(" msgs/S, ");
 8003cf6:	480b      	ldr	r0, [pc, #44]	; (8003d24 <bmk1_execute.lto_priv.170+0x64>)
 8003cf8:	f002 f98a 	bl	8006010 <test_print>
  test_printn(n << 1);
 8003cfc:	0060      	lsls	r0, r4, #1
 8003cfe:	f002 f997 	bl	8006030 <test_printn>
  test_println(" ctxswc/S");
 8003d02:	4809      	ldr	r0, [pc, #36]	; (8003d28 <bmk1_execute.lto_priv.170+0x68>)
}
 8003d04:	b002      	add	sp, #8
 8003d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8003d0a:	f002 b961 	b.w	8005fd0 <test_println>
 8003d0e:	bf00      	nop
 8003d10:	20001e40 	.word	0x20001e40
 8003d14:	200017c8 	.word	0x200017c8
 8003d18:	08003b11 	.word	0x08003b11
 8003d1c:	20001710 	.word	0x20001710
 8003d20:	08009ff8 	.word	0x08009ff8
 8003d24:	0800a0a8 	.word	0x0800a0a8
 8003d28:	0800a07c 	.word	0x0800a07c
 8003d2c:	f3af 8000 	nop.w

08003d30 <thread2.lto_priv.109>:
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 8003d30:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8003d32:	2100      	movs	r1, #0
 8003d34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <thread2.lto_priv.109+0x14>)
 8003d3a:	f002 fc59 	bl	80065f0 <chOQPutTimeout>
  return 0;
}
 8003d3e:	2000      	movs	r0, #0
 8003d40:	bd08      	pop	{r3, pc}
 8003d42:	bf00      	nop
 8003d44:	20000ce8 	.word	0x20000ce8
 8003d48:	f3af 8000 	nop.w
 8003d4c:	f3af 8000 	nop.w

08003d50 <queues2_execute.lto_priv.169>:

static void queues2_execute(void) {
 8003d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d54:	2320      	movs	r3, #32
 8003d56:	b083      	sub	sp, #12
 8003d58:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8003d5c:	4e86      	ldr	r6, [pc, #536]	; (8003f78 <queues2_execute.lto_priv.169+0x228>)
 8003d5e:	6972      	ldr	r2, [r6, #20]
 8003d60:	69b3      	ldr	r3, [r6, #24]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d05b      	beq.n	8003e1e <queues2_execute.lto_priv.169+0xce>
 8003d66:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f002 f8f9 	bl	8005f60 <_test_assert>
 8003d6e:	bbb8      	cbnz	r0, 8003de0 <queues2_execute.lto_priv.169+0x90>
 8003d70:	f380 8811 	msr	BASEPRI, r0
 8003d74:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8003d76:	4d80      	ldr	r5, [pc, #512]	; (8003f78 <queues2_execute.lto_priv.169+0x228>)
 8003d78:	4621      	mov	r1, r4
 8003d7a:	3401      	adds	r4, #1
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d82:	b2e4      	uxtb	r4, r4
 8003d84:	f002 fc34 	bl	80065f0 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003d88:	2c45      	cmp	r4, #69	; 0x45
 8003d8a:	d1f4      	bne.n	8003d76 <queues2_execute.lto_priv.169+0x26>
 8003d8c:	2420      	movs	r4, #32
 8003d8e:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003d92:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8003d94:	2002      	movs	r0, #2
 8003d96:	fab1 f181 	clz	r1, r1
 8003d9a:	0949      	lsrs	r1, r1, #5
 8003d9c:	f002 f8e0 	bl	8005f60 <_test_assert>
 8003da0:	4607      	mov	r7, r0
 8003da2:	b9e8      	cbnz	r0, 8003de0 <queues2_execute.lto_priv.169+0x90>
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	4681      	mov	r9, r0
 8003daa:	4625      	mov	r5, r4
 8003dac:	2404      	movs	r4, #4
 8003dae:	f04f 0820 	mov.w	r8, #32
 8003db2:	f385 8811 	msr	BASEPRI, r5
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8003db6:	f005 fa93 	bl	80092e0 <chOQGetI.constprop.18>
 8003dba:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 8003dbe:	b2c0      	uxtb	r0, r0
 8003dc0:	f002 f8e6 	bl	8005f90 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8003dc4:	3c01      	subs	r4, #1
 8003dc6:	d1f2      	bne.n	8003dae <queues2_execute.lto_priv.169+0x5e>
 8003dc8:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8003dcc:	6972      	ldr	r2, [r6, #20]
 8003dce:	69b3      	ldr	r3, [r6, #24]
 8003dd0:	4969      	ldr	r1, [pc, #420]	; (8003f78 <queues2_execute.lto_priv.169+0x228>)
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d028      	beq.n	8003e28 <queues2_execute.lto_priv.169+0xd8>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	2003      	movs	r0, #3
 8003dda:	f002 f8c1 	bl	8005f60 <_test_assert>
 8003dde:	b128      	cbz	r0, 8003dec <queues2_execute.lto_priv.169+0x9c>
 8003de0:	2300      	movs	r3, #0
 8003de2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8003de6:	b003      	add	sp, #12
 8003de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dec:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8003df0:	2004      	movs	r0, #4
 8003df2:	4962      	ldr	r1, [pc, #392]	; (8003f7c <queues2_execute.lto_priv.169+0x22c>)
 8003df4:	f001 ff7c 	bl	8005cf0 <_test_assert_sequence>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d1f3      	bne.n	8003de6 <queues2_execute.lto_priv.169+0x96>
 8003dfe:	2520      	movs	r5, #32
 8003e00:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8003e04:	f005 fa6c 	bl	80092e0 <chOQGetI.constprop.18>
 8003e08:	3003      	adds	r0, #3
 8003e0a:	bf14      	ite	ne
 8003e0c:	2100      	movne	r1, #0
 8003e0e:	2101      	moveq	r1, #1
 8003e10:	2005      	movs	r0, #5
 8003e12:	f002 f8a5 	bl	8005f60 <_test_assert>
 8003e16:	b160      	cbz	r0, 8003e32 <queues2_execute.lto_priv.169+0xe2>
 8003e18:	f384 8811 	msr	BASEPRI, r4
 8003e1c:	e7e3      	b.n	8003de6 <queues2_execute.lto_priv.169+0x96>
 8003e1e:	68b1      	ldr	r1, [r6, #8]
 8003e20:	3100      	adds	r1, #0
 8003e22:	bf18      	it	ne
 8003e24:	2101      	movne	r1, #1
 8003e26:	e79f      	b.n	8003d68 <queues2_execute.lto_priv.169+0x18>
 8003e28:	688f      	ldr	r7, [r1, #8]
 8003e2a:	3700      	adds	r7, #0
 8003e2c:	bf18      	it	ne
 8003e2e:	2701      	movne	r7, #1
 8003e30:	e7d1      	b.n	8003dd6 <queues2_execute.lto_priv.169+0x86>
 8003e32:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8003e36:	4c50      	ldr	r4, [pc, #320]	; (8003f78 <queues2_execute.lto_priv.169+0x228>)
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4951      	ldr	r1, [pc, #324]	; (8003f80 <queues2_execute.lto_priv.169+0x230>)
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f002 fb8e 	bl	8006560 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8003e44:	f1a0 0104 	sub.w	r1, r0, #4
 8003e48:	fab1 f181 	clz	r1, r1
 8003e4c:	2006      	movs	r0, #6
 8003e4e:	0949      	lsrs	r1, r1, #5
 8003e50:	f002 f886 	bl	8005f60 <_test_assert>
 8003e54:	4606      	mov	r6, r0
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d1c5      	bne.n	8003de6 <queues2_execute.lto_priv.169+0x96>
 8003e5a:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003e5e:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8003e60:	2007      	movs	r0, #7
 8003e62:	fab1 f181 	clz	r1, r1
 8003e66:	0949      	lsrs	r1, r1, #5
 8003e68:	f002 f87a 	bl	8005f60 <_test_assert>
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	b110      	cbz	r0, 8003e76 <queues2_execute.lto_priv.169+0x126>
 8003e70:	f386 8811 	msr	BASEPRI, r6
 8003e74:	e7b7      	b.n	8003de6 <queues2_execute.lto_priv.169+0x96>
 8003e76:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <queues2_execute.lto_priv.169+0x234>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003e7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	4841      	ldr	r0, [pc, #260]	; (8003f88 <queues2_execute.lto_priv.169+0x238>)
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <queues2_execute.lto_priv.169+0x23c>)
 8003e88:	3201      	adds	r2, #1
 8003e8a:	9700      	str	r7, [sp, #0]
 8003e8c:	f003 f808 	bl	8006ea0 <chThdCreateStatic>
 8003e90:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <queues2_execute.lto_priv.169+0x240>)
 8003e92:	6018      	str	r0, [r3, #0]
 8003e94:	f385 8811 	msr	BASEPRI, r5
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8003e98:	68e1      	ldr	r1, [r4, #12]
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	68a2      	ldr	r2, [r4, #8]
 8003e9e:	1a5b      	subs	r3, r3, r1
 8003ea0:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8003ea2:	f1a1 0104 	sub.w	r1, r1, #4
 8003ea6:	fab1 f181 	clz	r1, r1
 8003eaa:	2008      	movs	r0, #8
 8003eac:	0949      	lsrs	r1, r1, #5
 8003eae:	f002 f857 	bl	8005f60 <_test_assert>
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	b110      	cbz	r0, 8003ebc <queues2_execute.lto_priv.169+0x16c>
 8003eb6:	f387 8811 	msr	BASEPRI, r7
 8003eba:	e794      	b.n	8003de6 <queues2_execute.lto_priv.169+0x96>
 8003ebc:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8003ec0:	f001 fec6 	bl	8005c50 <test_wait_threads>
 8003ec4:	f385 8811 	msr	BASEPRI, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8003ec8:	68e2      	ldr	r2, [r4, #12]
  oqp->q_counter = chQSizeI(oqp);
 8003eca:	6923      	ldr	r3, [r4, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003ecc:	4620      	mov	r0, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 8003ece:	1a9b      	subs	r3, r3, r2
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003ed0:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8003ed4:	6162      	str	r2, [r4, #20]
 8003ed6:	61a2      	str	r2, [r4, #24]
  oqp->q_counter = chQSizeI(oqp);
 8003ed8:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003eda:	f003 fa19 	bl	8007310 <chThdDequeueAllI>
 8003ede:	f386 8811 	msr	BASEPRI, r6
 8003ee2:	f385 8811 	msr	BASEPRI, r5

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8003ee6:	f104 0108 	add.w	r1, r4, #8
 8003eea:	c90e      	ldmia	r1, {r1, r2, r3}
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	1a59      	subs	r1, r3, r1
 8003ef0:	fab1 f181 	clz	r1, r1
 8003ef4:	2009      	movs	r0, #9
 8003ef6:	0949      	lsrs	r1, r1, #5
 8003ef8:	f002 f832 	bl	8005f60 <_test_assert>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d1b6      	bne.n	8003e70 <queues2_execute.lto_priv.169+0x120>
 8003f02:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003f06:	491e      	ldr	r1, [pc, #120]	; (8003f80 <queues2_execute.lto_priv.169+0x230>)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f002 fb28 	bl	8006560 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8003f10:	3802      	subs	r0, #2
 8003f12:	4241      	negs	r1, r0
 8003f14:	4141      	adcs	r1, r0
 8003f16:	200a      	movs	r0, #10
 8003f18:	f002 f822 	bl	8005f60 <_test_assert>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f47f af61 	bne.w	8003de6 <queues2_execute.lto_priv.169+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003f24:	4916      	ldr	r1, [pc, #88]	; (8003f80 <queues2_execute.lto_priv.169+0x230>)
 8003f26:	2202      	movs	r2, #2
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f002 fb19 	bl	8006560 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8003f2e:	1e82      	subs	r2, r0, #2
 8003f30:	4251      	negs	r1, r2
 8003f32:	4151      	adcs	r1, r2
 8003f34:	200b      	movs	r0, #11
 8003f36:	f002 f813 	bl	8005f60 <_test_assert>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	f47f af53 	bne.w	8003de6 <queues2_execute.lto_priv.169+0x96>
 8003f40:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003f44:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8003f46:	200c      	movs	r0, #12
 8003f48:	fab1 f181 	clz	r1, r1
 8003f4c:	0949      	lsrs	r1, r1, #5
 8003f4e:	f002 f807 	bl	8005f60 <_test_assert>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	f47f af44 	bne.w	8003de0 <queues2_execute.lto_priv.169+0x90>
 8003f58:	2100      	movs	r1, #0
 8003f5a:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8003f5e:	220a      	movs	r2, #10
 8003f60:	4805      	ldr	r0, [pc, #20]	; (8003f78 <queues2_execute.lto_priv.169+0x228>)
 8003f62:	f002 fb45 	bl	80065f0 <chOQPutTimeout>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	4259      	negs	r1, r3
 8003f6a:	4159      	adcs	r1, r3
 8003f6c:	200d      	movs	r0, #13
}
 8003f6e:	b003      	add	sp, #12
 8003f70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8003f74:	f001 bff4 	b.w	8005f60 <_test_assert>
 8003f78:	20000ce8 	.word	0x20000ce8
 8003f7c:	080097fc 	.word	0x080097fc
 8003f80:	20001910 	.word	0x20001910
 8003f84:	20001e40 	.word	0x20001e40
 8003f88:	200017c8 	.word	0x200017c8
 8003f8c:	08003d31 	.word	0x08003d31
 8003f90:	20001710 	.word	0x20001710
 8003f94:	f3af 8000 	nop.w
 8003f98:	f3af 8000 	nop.w
 8003f9c:	f3af 8000 	nop.w

08003fa0 <queues1_execute.lto_priv.167>:
  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
  return 0;
}

static void queues1_execute(void) {
 8003fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa2:	2420      	movs	r4, #32
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	f384 8811 	msr	BASEPRI, r4
 8003faa:	4b90      	ldr	r3, [pc, #576]	; (80041ec <queues1_execute.lto_priv.167+0x24c>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8003fac:	2001      	movs	r0, #1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8003fae:	6899      	ldr	r1, [r3, #8]
 8003fb0:	fab1 f181 	clz	r1, r1
 8003fb4:	0949      	lsrs	r1, r1, #5
 8003fb6:	f001 ffd3 	bl	8005f60 <_test_assert>
 8003fba:	4606      	mov	r6, r0
 8003fbc:	b9e8      	cbnz	r0, 8003ffa <queues1_execute.lto_priv.167+0x5a>
 8003fbe:	f380 8811 	msr	BASEPRI, r0
 8003fc2:	f384 8811 	msr	BASEPRI, r4
 8003fc6:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8003fc8:	4d88      	ldr	r5, [pc, #544]	; (80041ec <queues1_execute.lto_priv.167+0x24c>)
 8003fca:	4621      	mov	r1, r4
 8003fcc:	3401      	adds	r4, #1
 8003fce:	4628      	mov	r0, r5
 8003fd0:	b2e4      	uxtb	r4, r4
 8003fd2:	f002 fb9d 	bl	8006710 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8003fd6:	2c45      	cmp	r4, #69	; 0x45
 8003fd8:	d1f6      	bne.n	8003fc8 <queues1_execute.lto_priv.167+0x28>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003fe6:	69aa      	ldr	r2, [r5, #24]
 8003fe8:	696b      	ldr	r3, [r5, #20]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d038      	beq.n	8004060 <queues1_execute.lto_priv.167+0xc0>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8003fee:	4631      	mov	r1, r6
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	f001 ffb5 	bl	8005f60 <_test_assert>
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	b120      	cbz	r0, 8004004 <queues1_execute.lto_priv.167+0x64>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8004000:	b003      	add	sp, #12
 8004002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004004:	f380 8811 	msr	BASEPRI, r0
 8004008:	2320      	movs	r3, #32
 800400a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 800400e:	4877      	ldr	r0, [pc, #476]	; (80041ec <queues1_execute.lto_priv.167+0x24c>)
 8004010:	4621      	mov	r1, r4
 8004012:	f002 fb7d 	bl	8006710 <chIQPutI>
 8004016:	3004      	adds	r0, #4
 8004018:	bf14      	ite	ne
 800401a:	2100      	movne	r1, #0
 800401c:	2101      	moveq	r1, #1
 800401e:	2003      	movs	r0, #3
 8004020:	f001 ff9e 	bl	8005f60 <_test_assert>
 8004024:	b9c0      	cbnz	r0, 8004058 <queues1_execute.lto_priv.167+0xb8>
 8004026:	f380 8811 	msr	BASEPRI, r0
 800402a:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 800402c:	4d6f      	ldr	r5, [pc, #444]	; (80041ec <queues1_execute.lto_priv.167+0x24c>)
 800402e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004032:	4628      	mov	r0, r5
 8004034:	f002 fb44 	bl	80066c0 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8004038:	b2c0      	uxtb	r0, r0
 800403a:	f001 ffa9 	bl	8005f90 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800403e:	3c01      	subs	r4, #1
 8004040:	d1f4      	bne.n	800402c <queues1_execute.lto_priv.167+0x8c>
 8004042:	2620      	movs	r6, #32
 8004044:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8004048:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 800404a:	2004      	movs	r0, #4
 800404c:	fab1 f181 	clz	r1, r1
 8004050:	0949      	lsrs	r1, r1, #5
 8004052:	f001 ff85 	bl	8005f60 <_test_assert>
 8004056:	b140      	cbz	r0, 800406a <queues1_execute.lto_priv.167+0xca>
 8004058:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 800405c:	b003      	add	sp, #12
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8004060:	68ae      	ldr	r6, [r5, #8]
 8004062:	3600      	adds	r6, #0
 8004064:	bf18      	it	ne
 8004066:	2601      	movne	r6, #1
 8004068:	e7c1      	b.n	8003fee <queues1_execute.lto_priv.167+0x4e>
 800406a:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 800406e:	2005      	movs	r0, #5
 8004070:	495f      	ldr	r1, [pc, #380]	; (80041f0 <queues1_execute.lto_priv.167+0x250>)
 8004072:	f001 fe3d 	bl	8005cf0 <_test_assert_sequence>
 8004076:	2800      	cmp	r0, #0
 8004078:	d1c2      	bne.n	8004000 <queues1_execute.lto_priv.167+0x60>
 800407a:	f386 8811 	msr	BASEPRI, r6
 800407e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8004080:	4d5a      	ldr	r5, [pc, #360]	; (80041ec <queues1_execute.lto_priv.167+0x24c>)
 8004082:	4621      	mov	r1, r4
 8004084:	3401      	adds	r4, #1
 8004086:	4628      	mov	r0, r5
 8004088:	b2e4      	uxtb	r4, r4
 800408a:	f002 fb41 	bl	8006710 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800408e:	2c45      	cmp	r4, #69	; 0x45
 8004090:	d1f6      	bne.n	8004080 <queues1_execute.lto_priv.167+0xe0>
 8004092:	2300      	movs	r3, #0
 8004094:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8004098:	4956      	ldr	r1, [pc, #344]	; (80041f4 <queues1_execute.lto_priv.167+0x254>)
 800409a:	2208      	movs	r2, #8
 800409c:	4628      	mov	r0, r5
 800409e:	f002 facf 	bl	8006640 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 80040a2:	f1a0 0104 	sub.w	r1, r0, #4
 80040a6:	fab1 f181 	clz	r1, r1
 80040aa:	2006      	movs	r0, #6
 80040ac:	0949      	lsrs	r1, r1, #5
 80040ae:	f001 ff57 	bl	8005f60 <_test_assert>
 80040b2:	4604      	mov	r4, r0
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d1a3      	bne.n	8004000 <queues1_execute.lto_priv.167+0x60>
 80040b8:	2620      	movs	r6, #32
 80040ba:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 80040be:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 80040c0:	2007      	movs	r0, #7
 80040c2:	fab1 f181 	clz	r1, r1
 80040c6:	0949      	lsrs	r1, r1, #5
 80040c8:	f001 ff4a 	bl	8005f60 <_test_assert>
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d1c3      	bne.n	8004058 <queues1_execute.lto_priv.167+0xb8>
 80040d0:	f380 8811 	msr	BASEPRI, r0
 80040d4:	f386 8811 	msr	BASEPRI, r6
 80040d8:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 80040da:	4d44      	ldr	r5, [pc, #272]	; (80041ec <queues1_execute.lto_priv.167+0x24c>)
 80040dc:	4621      	mov	r1, r4
 80040de:	3401      	adds	r4, #1
 80040e0:	4628      	mov	r0, r5
 80040e2:	b2e4      	uxtb	r4, r4
 80040e4:	f002 fb14 	bl	8006710 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80040e8:	2c45      	cmp	r4, #69	; 0x45
 80040ea:	d1f6      	bne.n	80040da <queues1_execute.lto_priv.167+0x13a>
 80040ec:	2300      	movs	r3, #0
 80040ee:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80040f2:	4940      	ldr	r1, [pc, #256]	; (80041f4 <queues1_execute.lto_priv.167+0x254>)
 80040f4:	4628      	mov	r0, r5
 80040f6:	2202      	movs	r2, #2
 80040f8:	f002 faa2 	bl	8006640 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80040fc:	f1a0 0102 	sub.w	r1, r0, #2
 8004100:	fab1 f181 	clz	r1, r1
 8004104:	2008      	movs	r0, #8
 8004106:	0949      	lsrs	r1, r1, #5
 8004108:	f001 ff2a 	bl	8005f60 <_test_assert>
 800410c:	2800      	cmp	r0, #0
 800410e:	f47f af77 	bne.w	8004000 <queues1_execute.lto_priv.167+0x60>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8004112:	4603      	mov	r3, r0
 8004114:	4937      	ldr	r1, [pc, #220]	; (80041f4 <queues1_execute.lto_priv.167+0x254>)
 8004116:	2202      	movs	r2, #2
 8004118:	4628      	mov	r0, r5
 800411a:	f002 fa91 	bl	8006640 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800411e:	f1a0 0102 	sub.w	r1, r0, #2
 8004122:	fab1 f181 	clz	r1, r1
 8004126:	2009      	movs	r0, #9
 8004128:	0949      	lsrs	r1, r1, #5
 800412a:	f001 ff19 	bl	8005f60 <_test_assert>
 800412e:	4606      	mov	r6, r0
 8004130:	2800      	cmp	r0, #0
 8004132:	f47f af65 	bne.w	8004000 <queues1_execute.lto_priv.167+0x60>
 8004136:	2720      	movs	r7, #32
 8004138:	f387 8811 	msr	BASEPRI, r7
 800413c:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 800413e:	200a      	movs	r0, #10
 8004140:	fab1 f181 	clz	r1, r1
 8004144:	0949      	lsrs	r1, r1, #5
 8004146:	f001 ff0b 	bl	8005f60 <_test_assert>
 800414a:	4604      	mov	r4, r0
 800414c:	b110      	cbz	r0, 8004154 <queues1_execute.lto_priv.167+0x1b4>
 800414e:	f386 8811 	msr	BASEPRI, r6
 8004152:	e755      	b.n	8004000 <queues1_execute.lto_priv.167+0x60>
 8004154:	f380 8811 	msr	BASEPRI, r0
 8004158:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 800415c:	4621      	mov	r1, r4
 800415e:	4628      	mov	r0, r5
 8004160:	f002 fad6 	bl	8006710 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8004164:	68eb      	ldr	r3, [r5, #12]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8004166:	4628      	mov	r0, r5
 8004168:	f06f 0101 	mvn.w	r1, #1
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800416c:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 800416e:	616b      	str	r3, [r5, #20]
 8004170:	61ab      	str	r3, [r5, #24]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8004172:	f003 f8cd 	bl	8007310 <chThdDequeueAllI>
 8004176:	f384 8811 	msr	BASEPRI, r4
 800417a:	f387 8811 	msr	BASEPRI, r7
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 800417e:	68a9      	ldr	r1, [r5, #8]
 8004180:	200b      	movs	r0, #11
 8004182:	fab1 f181 	clz	r1, r1
 8004186:	0949      	lsrs	r1, r1, #5
 8004188:	f001 feea 	bl	8005f60 <_test_assert>
 800418c:	4606      	mov	r6, r0
 800418e:	2800      	cmp	r0, #0
 8004190:	f47f af62 	bne.w	8004058 <queues1_execute.lto_priv.167+0xb8>
 8004194:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004198:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <queues1_execute.lto_priv.167+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 800419a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	4816      	ldr	r0, [pc, #88]	; (80041fc <queues1_execute.lto_priv.167+0x25c>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <queues1_execute.lto_priv.167+0x260>)
 80041a6:	3201      	adds	r2, #1
 80041a8:	9600      	str	r6, [sp, #0]
 80041aa:	f002 fe79 	bl	8006ea0 <chThdCreateStatic>
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <queues1_execute.lto_priv.167+0x264>)
 80041b0:	6018      	str	r0, [r3, #0]
 80041b2:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 80041b6:	68a9      	ldr	r1, [r5, #8]
 80041b8:	200c      	movs	r0, #12
 80041ba:	fab1 f181 	clz	r1, r1
 80041be:	0949      	lsrs	r1, r1, #5
 80041c0:	f001 fece 	bl	8005f60 <_test_assert>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d1c2      	bne.n	800414e <queues1_execute.lto_priv.167+0x1ae>
 80041c8:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80041cc:	f001 fd40 	bl	8005c50 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 80041d0:	4628      	mov	r0, r5
 80041d2:	210a      	movs	r1, #10
 80041d4:	f002 fa74 	bl	80066c0 <chIQGetTimeout>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	4259      	negs	r1, r3
 80041dc:	4159      	adcs	r1, r3
 80041de:	200d      	movs	r0, #13
}
 80041e0:	b003      	add	sp, #12
 80041e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 80041e6:	f001 bebb 	b.w	8005f60 <_test_assert>
 80041ea:	bf00      	nop
 80041ec:	20000820 	.word	0x20000820
 80041f0:	080097fc 	.word	0x080097fc
 80041f4:	20001910 	.word	0x20001910
 80041f8:	20001e40 	.word	0x20001e40
 80041fc:	200017c8 	.word	0x200017c8
 8004200:	08003601 	.word	0x08003601
 8004204:	20001710 	.word	0x20001710
 8004208:	f3af 8000 	nop.w
 800420c:	f3af 8000 	nop.w

08004210 <dyn3_execute.lto_priv.165>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8004210:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004212:	4a4a      	ldr	r2, [pc, #296]	; (800433c <dyn3_execute.lto_priv.165+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8004214:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <dyn3_execute.lto_priv.165+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004216:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8004218:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 800421a:	6892      	ldr	r2, [r2, #8]
 800421c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	4848      	ldr	r0, [pc, #288]	; (8004344 <dyn3_execute.lto_priv.165+0x134>)
 8004224:	3a01      	subs	r2, #1
 8004226:	4b48      	ldr	r3, [pc, #288]	; (8004348 <dyn3_execute.lto_priv.165+0x138>)
 8004228:	f002 fdf2 	bl	8006e10 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 800422c:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 800422e:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8004230:	2001      	movs	r0, #1
 8004232:	1a09      	subs	r1, r1, r0
 8004234:	fab1 f181 	clz	r1, r1
 8004238:	0949      	lsrs	r1, r1, #5
 800423a:	f001 fe91 	bl	8005f60 <_test_assert>
 800423e:	b108      	cbz	r0, 8004244 <dyn3_execute.lto_priv.165+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8004240:	b002      	add	sp, #8
 8004242:	bd10      	pop	{r4, pc}
 8004244:	2320      	movs	r3, #32
 8004246:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 800424a:	7fa3      	ldrb	r3, [r4, #30]
 800424c:	3301      	adds	r3, #1
 800424e:	77a3      	strb	r3, [r4, #30]
 8004250:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8004254:	7fa1      	ldrb	r1, [r4, #30]
 8004256:	2002      	movs	r0, #2
 8004258:	1a09      	subs	r1, r1, r0
 800425a:	fab1 f181 	clz	r1, r1
 800425e:	0949      	lsrs	r1, r1, #5
 8004260:	f001 fe7e 	bl	8005f60 <_test_assert>
 8004264:	2800      	cmp	r0, #0
 8004266:	d1eb      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  chThdRelease(tp);
 8004268:	4620      	mov	r0, r4
 800426a:	f002 fc39 	bl	8006ae0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 800426e:	7fa1      	ldrb	r1, [r4, #30]
 8004270:	2003      	movs	r0, #3
 8004272:	f1a1 0101 	sub.w	r1, r1, #1
 8004276:	fab1 f181 	clz	r1, r1
 800427a:	0949      	lsrs	r1, r1, #5
 800427c:	f001 fe70 	bl	8005f60 <_test_assert>
 8004280:	2800      	cmp	r0, #0
 8004282:	d1dd      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8004284:	4620      	mov	r0, r4
 8004286:	f7fd ff03 	bl	8002090 <regfind.lto_priv.112>
 800428a:	4601      	mov	r1, r0
 800428c:	2004      	movs	r0, #4
 800428e:	f001 fe67 	bl	8005f60 <_test_assert>
 8004292:	2800      	cmp	r0, #0
 8004294:	d1d4      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8004296:	4620      	mov	r0, r4
 8004298:	f7fd fefa 	bl	8002090 <regfind.lto_priv.112>
 800429c:	4601      	mov	r1, r0
 800429e:	2005      	movs	r0, #5
 80042a0:	f001 fe5e 	bl	8005f60 <_test_assert>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d1cb      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 80042a8:	4620      	mov	r0, r4
 80042aa:	f002 fc19 	bl	8006ae0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 80042ae:	7fa1      	ldrb	r1, [r4, #30]
 80042b0:	2006      	movs	r0, #6
 80042b2:	fab1 f181 	clz	r1, r1
 80042b6:	0949      	lsrs	r1, r1, #5
 80042b8:	f001 fe52 	bl	8005f60 <_test_assert>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1bf      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 80042c0:	7f21      	ldrb	r1, [r4, #28]
 80042c2:	2007      	movs	r0, #7
 80042c4:	fab1 f181 	clz	r1, r1
 80042c8:	0949      	lsrs	r1, r1, #5
 80042ca:	f001 fe49 	bl	8005f60 <_test_assert>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d1b6      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7fd fedc 	bl	8002090 <regfind.lto_priv.112>
 80042d8:	4601      	mov	r1, r0
 80042da:	2008      	movs	r0, #8
 80042dc:	f001 fe40 	bl	8005f60 <_test_assert>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d1ad      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7fd fed3 	bl	8002090 <regfind.lto_priv.112>
 80042ea:	4601      	mov	r1, r0
 80042ec:	2009      	movs	r0, #9
 80042ee:	f001 fe37 	bl	8005f60 <_test_assert>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1a4      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 80042f6:	2064      	movs	r0, #100	; 0x64
 80042f8:	f002 fee2 	bl	80070c0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 80042fc:	7f21      	ldrb	r1, [r4, #28]
 80042fe:	200a      	movs	r0, #10
 8004300:	f1a1 030f 	sub.w	r3, r1, #15
 8004304:	4259      	negs	r1, r3
 8004306:	4159      	adcs	r1, r3
 8004308:	f001 fe2a 	bl	8005f60 <_test_assert>
 800430c:	2800      	cmp	r0, #0
 800430e:	d197      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8004310:	4620      	mov	r0, r4
 8004312:	f7fd febd 	bl	8002090 <regfind.lto_priv.112>
 8004316:	4601      	mov	r1, r0
 8004318:	200b      	movs	r0, #11
 800431a:	f001 fe21 	bl	8005f60 <_test_assert>
 800431e:	2800      	cmp	r0, #0
 8004320:	d18e      	bne.n	8004240 <dyn3_execute.lto_priv.165+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8004322:	4620      	mov	r0, r4
 8004324:	f7fd feb4 	bl	8002090 <regfind.lto_priv.112>
 8004328:	f080 0101 	eor.w	r1, r0, #1
 800432c:	b2c9      	uxtb	r1, r1
 800432e:	200c      	movs	r0, #12
}
 8004330:	b002      	add	sp, #8
 8004332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8004336:	f001 be13 	b.w	8005f60 <_test_assert>
 800433a:	bf00      	nop
 800433c:	20001e40 	.word	0x20001e40
 8004340:	080097f0 	.word	0x080097f0
 8004344:	200016f0 	.word	0x200016f0
 8004348:	08001871 	.word	0x08001871
 800434c:	f3af 8000 	nop.w

08004350 <mbox1_setup.lto_priv.148>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8004350:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <mbox1_setup.lto_priv.148+0x30>)
 8004354:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <mbox1_setup.lto_priv.148+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8004356:	2505      	movs	r5, #5
  mbp->mb_top = &buf[n];
 8004358:	f102 0614 	add.w	r6, r2, #20
 800435c:	2400      	movs	r4, #0
 800435e:	f103 001c 	add.w	r0, r3, #28
 8004362:	f103 0110 	add.w	r1, r3, #16
 8004366:	e883 0044 	stmia.w	r3, {r2, r6}
 800436a:	625d      	str	r5, [r3, #36]	; 0x24
 800436c:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 800436e:	60da      	str	r2, [r3, #12]
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	6218      	str	r0, [r3, #32]
 8004374:	61d8      	str	r0, [r3, #28]
 8004376:	6159      	str	r1, [r3, #20]
 8004378:	6119      	str	r1, [r3, #16]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 800437a:	bc70      	pop	{r4, r5, r6}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000cac 	.word	0x20000cac
 8004384:	200017c8 	.word	0x200017c8
 8004388:	f3af 8000 	nop.w
 800438c:	f3af 8000 	nop.w

08004390 <mtx8_setup.lto_priv.145>:
 8004390:	4a06      	ldr	r2, [pc, #24]	; (80043ac <mtx8_setup.lto_priv.145+0x1c>)
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <mtx8_setup.lto_priv.145+0x20>)
 8004394:	4907      	ldr	r1, [pc, #28]	; (80043b4 <mtx8_setup.lto_priv.145+0x24>)
 8004396:	2000      	movs	r0, #0
 8004398:	6049      	str	r1, [r1, #4]
 800439a:	6009      	str	r1, [r1, #0]
 800439c:	6052      	str	r2, [r2, #4]
 800439e:	6012      	str	r2, [r2, #0]
 80043a0:	6090      	str	r0, [r2, #8]
 80043a2:	6098      	str	r0, [r3, #8]
 80043a4:	605b      	str	r3, [r3, #4]
 80043a6:	601b      	str	r3, [r3, #0]
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000844 	.word	0x20000844
 80043b0:	20000854 	.word	0x20000854
 80043b4:	20000cd4 	.word	0x20000cd4
 80043b8:	f3af 8000 	nop.w
 80043bc:	f3af 8000 	nop.w

080043c0 <mtx7_setup.lto_priv.143>:
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <mtx7_setup.lto_priv.143+0x14>)
 80043c2:	4a05      	ldr	r2, [pc, #20]	; (80043d8 <mtx7_setup.lto_priv.143+0x18>)
 80043c4:	2100      	movs	r1, #0
 80043c6:	6052      	str	r2, [r2, #4]
 80043c8:	6012      	str	r2, [r2, #0]
 80043ca:	605b      	str	r3, [r3, #4]
 80043cc:	601b      	str	r3, [r3, #0]
 80043ce:	6099      	str	r1, [r3, #8]
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000844 	.word	0x20000844
 80043d8:	20000cd4 	.word	0x20000cd4
 80043dc:	f3af 8000 	nop.w

080043e0 <mtx6_setup.lto_priv.141>:
 80043e0:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <mtx6_setup.lto_priv.141+0x14>)
 80043e2:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <mtx6_setup.lto_priv.141+0x18>)
 80043e4:	2100      	movs	r1, #0
 80043e6:	6052      	str	r2, [r2, #4]
 80043e8:	6012      	str	r2, [r2, #0]
 80043ea:	605b      	str	r3, [r3, #4]
 80043ec:	601b      	str	r3, [r3, #0]
 80043ee:	6099      	str	r1, [r3, #8]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000844 	.word	0x20000844
 80043f8:	20000cd4 	.word	0x20000cd4
 80043fc:	f3af 8000 	nop.w

08004400 <evt2_setup.lto_priv.152>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8004400:	f004 be46 	b.w	8009090 <chEvtGetAndClearEvents.constprop.43>
 8004404:	f3af 8000 	nop.w
 8004408:	f3af 8000 	nop.w
 800440c:	f3af 8000 	nop.w

08004410 <evt1_setup.lto_priv.150>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8004410:	f004 be3e 	b.w	8009090 <chEvtGetAndClearEvents.constprop.43>
 8004414:	f3af 8000 	nop.w
 8004418:	f3af 8000 	nop.w
 800441c:	f3af 8000 	nop.w

08004420 <evt1_execute.lto_priv.151>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8004420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004424:	4c31      	ldr	r4, [pc, #196]	; (80044ec <evt1_execute.lto_priv.151+0xcc>)
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	2020      	movs	r0, #32
 800442a:	6024      	str	r4, [r4, #0]
 800442c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004430:	492f      	ldr	r1, [pc, #188]	; (80044f0 <evt1_execute.lto_priv.151+0xd0>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004436:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004438:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800443c:	2701      	movs	r7, #1
  elp->el_flags    = 0;
 800443e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004444:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8004446:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8004448:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 800444a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800444c:	9204      	str	r2, [sp, #16]
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 800445a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800445c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8004460:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8004464:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = 0;
 8004466:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8004468:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 800446a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 800446c:	f8cd 801c 	str.w	r8, [sp, #28]
 8004470:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 8004474:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8004476:	4638      	mov	r0, r7
 8004478:	1b09      	subs	r1, r1, r4
 800447a:	bf18      	it	ne
 800447c:	2101      	movne	r1, #1
 800447e:	f001 fd6f 	bl	8005f60 <_test_assert>
 8004482:	b110      	cbz	r0, 800448a <evt1_execute.lto_priv.151+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8004484:	b00a      	add	sp, #40	; 0x28
 8004486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 800448a:	4629      	mov	r1, r5
 800448c:	4620      	mov	r0, r4
 800448e:	f002 fb0f 	bl	8006ab0 <chEvtUnregister>
 8004492:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8004494:	4640      	mov	r0, r8
 8004496:	1b09      	subs	r1, r1, r4
 8004498:	bf18      	it	ne
 800449a:	2101      	movne	r1, #1
 800449c:	f001 fd60 	bl	8005f60 <_test_assert>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1ef      	bne.n	8004484 <evt1_execute.lto_priv.151+0x64>
  chEvtUnregister(&es1, &el2);
 80044a4:	4631      	mov	r1, r6
 80044a6:	4620      	mov	r0, r4
 80044a8:	f002 fb02 	bl	8006ab0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 80044ac:	6821      	ldr	r1, [r4, #0]
 80044ae:	2003      	movs	r0, #3
 80044b0:	1b09      	subs	r1, r1, r4
 80044b2:	fab1 f181 	clz	r1, r1
 80044b6:	0949      	lsrs	r1, r1, #5
 80044b8:	f001 fd52 	bl	8005f60 <_test_assert>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d1e1      	bne.n	8004484 <evt1_execute.lto_priv.151+0x64>
 80044c0:	4604      	mov	r4, r0
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80044c2:	4e0c      	ldr	r6, [pc, #48]	; (80044f4 <evt1_execute.lto_priv.151+0xd4>)
 80044c4:	2507      	movs	r5, #7
 80044c6:	e001      	b.n	80044cc <evt1_execute.lto_priv.151+0xac>
    }
    eid++;
 80044c8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 80044ca:	b155      	cbz	r5, 80044e2 <evt1_execute.lto_priv.151+0xc2>
    if (events & EVENT_MASK(eid)) {
 80044cc:	fa07 f304 	lsl.w	r3, r7, r4
 80044d0:	422b      	tst	r3, r5
 80044d2:	d0f9      	beq.n	80044c8 <evt1_execute.lto_priv.151+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80044d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80044d8:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80044da:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 80044de:	4790      	blx	r2
 80044e0:	e7f2      	b.n	80044c8 <evt1_execute.lto_priv.151+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 80044e2:	4905      	ldr	r1, [pc, #20]	; (80044f8 <evt1_execute.lto_priv.151+0xd8>)
 80044e4:	2004      	movs	r0, #4
 80044e6:	f001 fc03 	bl	8005cf0 <_test_assert_sequence>
 80044ea:	e7cb      	b.n	8004484 <evt1_execute.lto_priv.151+0x64>
 80044ec:	20000800 	.word	0x20000800
 80044f0:	20001e40 	.word	0x20001e40
 80044f4:	0800a0d0 	.word	0x0800a0d0
 80044f8:	0800a0c0 	.word	0x0800a0c0
 80044fc:	f3af 8000 	nop.w

08004500 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8004500:	2043      	movs	r0, #67	; 0x43
 8004502:	f001 bd45 	b.w	8005f90 <test_emit_token>
 8004506:	bf00      	nop
 8004508:	f3af 8000 	nop.w
 800450c:	f3af 8000 	nop.w

08004510 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8004510:	2042      	movs	r0, #66	; 0x42
 8004512:	f001 bd3d 	b.w	8005f90 <test_emit_token>
 8004516:	bf00      	nop
 8004518:	f3af 8000 	nop.w
 800451c:	f3af 8000 	nop.w

08004520 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8004520:	2041      	movs	r0, #65	; 0x41
 8004522:	f001 bd35 	b.w	8005f90 <test_emit_token>
 8004526:	bf00      	nop
 8004528:	f3af 8000 	nop.w
 800452c:	f3af 8000 	nop.w

08004530 <mbox1_execute.lto_priv.149>:

static void mbox1_execute(void) {
 8004530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004534:	2320      	movs	r3, #32
 8004536:	b082      	sub	sp, #8
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	4d95      	ldr	r5, [pc, #596]	; (8004794 <mbox1_execute.lto_priv.149+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800453e:	2001      	movs	r0, #1
 8004540:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004542:	f1a1 0105 	sub.w	r1, r1, #5
 8004546:	fab1 f181 	clz	r1, r1
 800454a:	0949      	lsrs	r1, r1, #5
 800454c:	f001 fd08 	bl	8005f60 <_test_assert>
 8004550:	2800      	cmp	r0, #0
 8004552:	f040 8089 	bne.w	8004668 <mbox1_execute.lto_priv.149+0x138>
 8004556:	f380 8811 	msr	BASEPRI, r0
 800455a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800455c:	4620      	mov	r0, r4
 800455e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004562:	f004 fde5 	bl	8009130 <chMBPost.constprop.24>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8004566:	fab0 f180 	clz	r1, r0
 800456a:	2002      	movs	r0, #2
 800456c:	0949      	lsrs	r1, r1, #5
 800456e:	f001 fcf7 	bl	8005f60 <_test_assert>
 8004572:	3401      	adds	r4, #1
 8004574:	b970      	cbnz	r0, 8004594 <mbox1_execute.lto_priv.149+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8004576:	2c46      	cmp	r4, #70	; 0x46
 8004578:	d1f0      	bne.n	800455c <mbox1_execute.lto_priv.149+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 800457a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800457e:	2041      	movs	r0, #65	; 0x41
 8004580:	f004 fe1e 	bl	80091c0 <chMBPostAhead.constprop.22>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8004584:	fab0 f180 	clz	r1, r0
 8004588:	2003      	movs	r0, #3
 800458a:	0949      	lsrs	r1, r1, #5
 800458c:	f001 fce8 	bl	8005f60 <_test_assert>
 8004590:	2800      	cmp	r0, #0
 8004592:	d06f      	beq.n	8004674 <mbox1_execute.lto_priv.149+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8004594:	b002      	add	sp, #8
 8004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800459a:	f386 8811 	msr	BASEPRI, r6
 800459e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 80045a2:	69a1      	ldr	r1, [r4, #24]
 80045a4:	202a      	movs	r0, #42	; 0x2a
 80045a6:	fab1 f181 	clz	r1, r1
 80045aa:	0949      	lsrs	r1, r1, #5
 80045ac:	f001 fcd8 	bl	8005f60 <_test_assert>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f040 8299 	bne.w	8004ae8 <mbox1_execute.lto_priv.149+0x5b8>
 80045b6:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80045ba:	68e1      	ldr	r1, [r4, #12]
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	202b      	movs	r0, #43	; 0x2b
 80045c0:	ebc3 0e01 	rsb	lr, r3, r1
 80045c4:	f1de 0100 	rsbs	r1, lr, #0
 80045c8:	eb41 010e 	adc.w	r1, r1, lr
 80045cc:	f001 fcc8 	bl	8005f60 <_test_assert>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d1df      	bne.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 80045d4:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 80045d8:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 80045da:	6862      	ldr	r2, [r4, #4]
 80045dc:	f104 001c 	add.w	r0, r4, #28
 80045e0:	1ad1      	subs	r1, r2, r3
 80045e2:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 80045e4:	60e3      	str	r3, [r4, #12]
 80045e6:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 80045e8:	f002 fe7a 	bl	80072e0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 80045ec:	f104 0010 	add.w	r0, r4, #16
 80045f0:	4631      	mov	r1, r6
 80045f2:	f002 fe75 	bl	80072e0 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 80045f6:	f002 fb63 	bl	8006cc0 <chSchRescheduleS>
 80045fa:	f386 8811 	msr	BASEPRI, r6
 80045fe:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004602:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004604:	202c      	movs	r0, #44	; 0x2c
 8004606:	1f4d      	subs	r5, r1, #5
 8004608:	4269      	negs	r1, r5
 800460a:	4169      	adcs	r1, r5
 800460c:	f001 fca8 	bl	8005f60 <_test_assert>
 8004610:	2800      	cmp	r0, #0
 8004612:	f040 8269 	bne.w	8004ae8 <mbox1_execute.lto_priv.149+0x5b8>
 8004616:	f386 8811 	msr	BASEPRI, r6
 800461a:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 800461e:	69a1      	ldr	r1, [r4, #24]
 8004620:	202d      	movs	r0, #45	; 0x2d
 8004622:	fab1 f181 	clz	r1, r1
 8004626:	0949      	lsrs	r1, r1, #5
 8004628:	f001 fc9a 	bl	8005f60 <_test_assert>
 800462c:	2800      	cmp	r0, #0
 800462e:	f040 825b 	bne.w	8004ae8 <mbox1_execute.lto_priv.149+0x5b8>
 8004632:	f386 8811 	msr	BASEPRI, r6
 8004636:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	202e      	movs	r0, #46	; 0x2e
 8004640:	1aca      	subs	r2, r1, r3
 8004642:	4251      	negs	r1, r2
 8004644:	4151      	adcs	r1, r2
 8004646:	f001 fc8b 	bl	8005f60 <_test_assert>
 800464a:	2800      	cmp	r0, #0
 800464c:	f040 824c 	bne.w	8004ae8 <mbox1_execute.lto_priv.149+0x5b8>
 8004650:	f386 8811 	msr	BASEPRI, r6
 8004654:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8004658:	6821      	ldr	r1, [r4, #0]
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	202f      	movs	r0, #47	; 0x2f
 800465e:	1acb      	subs	r3, r1, r3
 8004660:	4259      	negs	r1, r3
 8004662:	4159      	adcs	r1, r3
 8004664:	f001 fc7c 	bl	8005f60 <_test_assert>
 8004668:	2300      	movs	r3, #0
 800466a:	f383 8811 	msr	BASEPRI, r3
}
 800466e:	b002      	add	sp, #8
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8004674:	2101      	movs	r1, #1
 8004676:	2058      	movs	r0, #88	; 0x58
 8004678:	f004 fd5a 	bl	8009130 <chMBPost.constprop.24>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800467c:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8004680:	fab1 f181 	clz	r1, r1
 8004684:	2004      	movs	r0, #4
 8004686:	0949      	lsrs	r1, r1, #5
 8004688:	f001 fc6a 	bl	8005f60 <_test_assert>
 800468c:	4604      	mov	r4, r0
 800468e:	2800      	cmp	r0, #0
 8004690:	d180      	bne.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004692:	2620      	movs	r6, #32
 8004694:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8004698:	2058      	movs	r0, #88	; 0x58
 800469a:	f004 fd71 	bl	8009180 <chMBPostI.constprop.23>
 800469e:	4601      	mov	r1, r0
 80046a0:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046a4:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80046a8:	fab1 f181 	clz	r1, r1
 80046ac:	2005      	movs	r0, #5
 80046ae:	0949      	lsrs	r1, r1, #5
 80046b0:	f001 fc56 	bl	8005f60 <_test_assert>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f47f af6d 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 80046ba:	2101      	movs	r1, #1
 80046bc:	2058      	movs	r0, #88	; 0x58
 80046be:	f004 fd7f 	bl	80091c0 <chMBPostAhead.constprop.22>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046c2:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 80046c6:	fab1 f181 	clz	r1, r1
 80046ca:	2006      	movs	r0, #6
 80046cc:	0949      	lsrs	r1, r1, #5
 80046ce:	f001 fc47 	bl	8005f60 <_test_assert>
 80046d2:	4604      	mov	r4, r0
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f47f af5d 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 80046da:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 80046de:	2058      	movs	r0, #88	; 0x58
 80046e0:	f004 fd96 	bl	8009210 <chMBPostAheadI.constprop.21>
 80046e4:	4601      	mov	r1, r0
 80046e6:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80046ea:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80046ee:	fab1 f181 	clz	r1, r1
 80046f2:	2007      	movs	r0, #7
 80046f4:	0949      	lsrs	r1, r1, #5
 80046f6:	f001 fc33 	bl	8005f60 <_test_assert>
 80046fa:	4680      	mov	r8, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f47f af49 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004702:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 8004706:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004708:	2008      	movs	r0, #8
 800470a:	fab1 f181 	clz	r1, r1
 800470e:	0949      	lsrs	r1, r1, #5
 8004710:	f001 fc26 	bl	8005f60 <_test_assert>
 8004714:	4c1f      	ldr	r4, [pc, #124]	; (8004794 <mbox1_execute.lto_priv.149+0x264>)
 8004716:	4607      	mov	r7, r0
 8004718:	b110      	cbz	r0, 8004720 <mbox1_execute.lto_priv.149+0x1f0>
 800471a:	f388 8811 	msr	BASEPRI, r8
 800471e:	e739      	b.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004720:	f380 8811 	msr	BASEPRI, r0
 8004724:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8004728:	69a1      	ldr	r1, [r4, #24]
 800472a:	2009      	movs	r0, #9
 800472c:	f1a1 0e05 	sub.w	lr, r1, #5
 8004730:	f1de 0100 	rsbs	r1, lr, #0
 8004734:	eb41 010e 	adc.w	r1, r1, lr
 8004738:	f001 fc12 	bl	8005f60 <_test_assert>
 800473c:	b110      	cbz	r0, 8004744 <mbox1_execute.lto_priv.149+0x214>
 800473e:	f387 8811 	msr	BASEPRI, r7
 8004742:	e727      	b.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004744:	f380 8811 	msr	BASEPRI, r0
 8004748:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800474c:	68e1      	ldr	r1, [r4, #12]
 800474e:	68a3      	ldr	r3, [r4, #8]
 8004750:	200a      	movs	r0, #10
 8004752:	1acf      	subs	r7, r1, r3
 8004754:	4279      	negs	r1, r7
 8004756:	4179      	adcs	r1, r7
 8004758:	f001 fc02 	bl	8005f60 <_test_assert>
 800475c:	2300      	movs	r3, #0
 800475e:	2800      	cmp	r0, #0
 8004760:	d183      	bne.n	800466a <mbox1_execute.lto_priv.149+0x13a>
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	2405      	movs	r4, #5
 8004768:	e005      	b.n	8004776 <mbox1_execute.lto_priv.149+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 800476a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800476e:	f001 fc0f 	bl	8005f90 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8004772:	3c01      	subs	r4, #1
 8004774:	d010      	beq.n	8004798 <mbox1_execute.lto_priv.149+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8004776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800477a:	a801      	add	r0, sp, #4
 800477c:	f004 fd68 	bl	8009250 <chMBFetch.constprop.20>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8004780:	fab0 f180 	clz	r1, r0
 8004784:	200b      	movs	r0, #11
 8004786:	0949      	lsrs	r1, r1, #5
 8004788:	f001 fbea 	bl	8005f60 <_test_assert>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0ec      	beq.n	800476a <mbox1_execute.lto_priv.149+0x23a>
 8004790:	e700      	b.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004792:	bf00      	nop
 8004794:	20000cac 	.word	0x20000cac
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8004798:	200c      	movs	r0, #12
 800479a:	49d5      	ldr	r1, [pc, #852]	; (8004af0 <mbox1_execute.lto_priv.149+0x5c0>)
 800479c:	f001 faa8 	bl	8005cf0 <_test_assert_sequence>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f47f aef7 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 80047a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047aa:	2047      	movs	r0, #71	; 0x47
 80047ac:	f004 fcc0 	bl	8009130 <chMBPost.constprop.24>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 80047b0:	fab0 f180 	clz	r1, r0
 80047b4:	200d      	movs	r0, #13
 80047b6:	0949      	lsrs	r1, r1, #5
 80047b8:	f001 fbd2 	bl	8005f60 <_test_assert>
 80047bc:	2800      	cmp	r0, #0
 80047be:	f47f aee9 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80047c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047c6:	a801      	add	r0, sp, #4
 80047c8:	f004 fd42 	bl	8009250 <chMBFetch.constprop.20>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 80047cc:	fab0 f180 	clz	r1, r0
 80047d0:	200e      	movs	r0, #14
 80047d2:	0949      	lsrs	r1, r1, #5
 80047d4:	f001 fbc4 	bl	8005f60 <_test_assert>
 80047d8:	2800      	cmp	r0, #0
 80047da:	f47f aedb 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80047de:	6829      	ldr	r1, [r5, #0]
 80047e0:	68ab      	ldr	r3, [r5, #8]
 80047e2:	200f      	movs	r0, #15
 80047e4:	1ace      	subs	r6, r1, r3
 80047e6:	4271      	negs	r1, r6
 80047e8:	4171      	adcs	r1, r6
 80047ea:	4ec2      	ldr	r6, [pc, #776]	; (8004af4 <mbox1_execute.lto_priv.149+0x5c4>)
 80047ec:	f001 fbb8 	bl	8005f60 <_test_assert>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f47f aecf 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80047f6:	6831      	ldr	r1, [r6, #0]
 80047f8:	68f3      	ldr	r3, [r6, #12]
 80047fa:	2010      	movs	r0, #16
 80047fc:	1aca      	subs	r2, r1, r3
 80047fe:	4251      	negs	r1, r2
 8004800:	4151      	adcs	r1, r2
 8004802:	f001 fbad 	bl	8005f60 <_test_assert>
 8004806:	2800      	cmp	r0, #0
 8004808:	f47f aec4 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 800480c:	2101      	movs	r1, #1
 800480e:	a801      	add	r0, sp, #4
 8004810:	f004 fd1e 	bl	8009250 <chMBFetch.constprop.20>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	4259      	negs	r1, r3
 8004818:	4159      	adcs	r1, r3
 800481a:	2011      	movs	r0, #17
 800481c:	f001 fba0 	bl	8005f60 <_test_assert>
 8004820:	2800      	cmp	r0, #0
 8004822:	f47f aeb7 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004826:	2720      	movs	r7, #32
 8004828:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 800482c:	a801      	add	r0, sp, #4
 800482e:	f004 fd37 	bl	80092a0 <chMBFetchI.constprop.19>
 8004832:	4601      	mov	r1, r0
 8004834:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8004838:	f101 0801 	add.w	r8, r1, #1
 800483c:	f1d8 0100 	rsbs	r1, r8, #0
 8004840:	eb41 0108 	adc.w	r1, r1, r8
 8004844:	2012      	movs	r0, #18
 8004846:	f001 fb8b 	bl	8005f60 <_test_assert>
 800484a:	2800      	cmp	r0, #0
 800484c:	f47f aea2 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004850:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004854:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8004856:	2013      	movs	r0, #19
 8004858:	f1a1 0c05 	sub.w	ip, r1, #5
 800485c:	f1dc 0100 	rsbs	r1, ip, #0
 8004860:	eb41 010c 	adc.w	r1, r1, ip
 8004864:	f001 fb7c 	bl	8005f60 <_test_assert>
 8004868:	2800      	cmp	r0, #0
 800486a:	f47f aefd 	bne.w	8004668 <mbox1_execute.lto_priv.149+0x138>
 800486e:	f04f 0800 	mov.w	r8, #0
 8004872:	f388 8811 	msr	BASEPRI, r8
 8004876:	2420      	movs	r4, #32
 8004878:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800487c:	69a9      	ldr	r1, [r5, #24]
 800487e:	2014      	movs	r0, #20
 8004880:	fab1 f181 	clz	r1, r1
 8004884:	0949      	lsrs	r1, r1, #5
 8004886:	f001 fb6b 	bl	8005f60 <_test_assert>
 800488a:	4e9a      	ldr	r6, [pc, #616]	; (8004af4 <mbox1_execute.lto_priv.149+0x5c4>)
 800488c:	4607      	mov	r7, r0
 800488e:	2800      	cmp	r0, #0
 8004890:	f47f af43 	bne.w	800471a <mbox1_execute.lto_priv.149+0x1ea>
 8004894:	f380 8811 	msr	BASEPRI, r0
 8004898:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800489c:	68f1      	ldr	r1, [r6, #12]
 800489e:	68b3      	ldr	r3, [r6, #8]
 80048a0:	2015      	movs	r0, #21
 80048a2:	ebc3 0e01 	rsb	lr, r3, r1
 80048a6:	f1de 0100 	rsbs	r1, lr, #0
 80048aa:	eb41 010e 	adc.w	r1, r1, lr
 80048ae:	f001 fb57 	bl	8005f60 <_test_assert>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f47f af43 	bne.w	800473e <mbox1_execute.lto_priv.149+0x20e>
 80048b8:	f380 8811 	msr	BASEPRI, r0
 80048bc:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 80048c0:	2041      	movs	r0, #65	; 0x41
 80048c2:	f004 fc5d 	bl	8009180 <chMBPostI.constprop.23>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 80048c6:	fab0 f180 	clz	r1, r0
 80048ca:	2016      	movs	r0, #22
 80048cc:	0949      	lsrs	r1, r1, #5
 80048ce:	f001 fb47 	bl	8005f60 <_test_assert>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	f47f ae5e 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 80048d8:	2042      	movs	r0, #66	; 0x42
 80048da:	f004 fc51 	bl	8009180 <chMBPostI.constprop.23>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 80048de:	fab0 f180 	clz	r1, r0
 80048e2:	2017      	movs	r0, #23
 80048e4:	0949      	lsrs	r1, r1, #5
 80048e6:	f001 fb3b 	bl	8005f60 <_test_assert>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	f47f ae52 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 80048f0:	2043      	movs	r0, #67	; 0x43
 80048f2:	f004 fc45 	bl	8009180 <chMBPostI.constprop.23>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80048f6:	fab0 f180 	clz	r1, r0
 80048fa:	2018      	movs	r0, #24
 80048fc:	0949      	lsrs	r1, r1, #5
 80048fe:	f001 fb2f 	bl	8005f60 <_test_assert>
 8004902:	2800      	cmp	r0, #0
 8004904:	f47f ae46 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 8004908:	2044      	movs	r0, #68	; 0x44
 800490a:	f004 fc39 	bl	8009180 <chMBPostI.constprop.23>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 800490e:	fab0 f180 	clz	r1, r0
 8004912:	2019      	movs	r0, #25
 8004914:	0949      	lsrs	r1, r1, #5
 8004916:	f001 fb23 	bl	8005f60 <_test_assert>
 800491a:	4607      	mov	r7, r0
 800491c:	2800      	cmp	r0, #0
 800491e:	f47f ae39 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 8004922:	2045      	movs	r0, #69	; 0x45
 8004924:	f004 fc2c 	bl	8009180 <chMBPostI.constprop.23>
 8004928:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 800492c:	fab0 f180 	clz	r1, r0
 8004930:	201a      	movs	r0, #26
 8004932:	0949      	lsrs	r1, r1, #5
 8004934:	f001 fb14 	bl	8005f60 <_test_assert>
 8004938:	2800      	cmp	r0, #0
 800493a:	f47f ae2b 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800493e:	68f1      	ldr	r1, [r6, #12]
 8004940:	68b3      	ldr	r3, [r6, #8]
 8004942:	201b      	movs	r0, #27
 8004944:	1ace      	subs	r6, r1, r3
 8004946:	4271      	negs	r1, r6
 8004948:	4171      	adcs	r1, r6
 800494a:	f001 fb09 	bl	8005f60 <_test_assert>
 800494e:	2800      	cmp	r0, #0
 8004950:	f47f ae20 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004954:	4680      	mov	r8, r0
 8004956:	4626      	mov	r6, r4
 8004958:	2405      	movs	r4, #5
 800495a:	2720      	movs	r7, #32
 800495c:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004960:	a801      	add	r0, sp, #4
 8004962:	f004 fc9d 	bl	80092a0 <chMBFetchI.constprop.19>
 8004966:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 800496a:	fab0 f180 	clz	r1, r0
 800496e:	201c      	movs	r0, #28
 8004970:	0949      	lsrs	r1, r1, #5
 8004972:	f001 faf5 	bl	8005f60 <_test_assert>
 8004976:	2800      	cmp	r0, #0
 8004978:	f47f ae0c 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
    test_emit_token(msg2);
 800497c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004980:	f001 fb06 	bl	8005f90 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004984:	3c01      	subs	r4, #1
 8004986:	d1e8      	bne.n	800495a <mbox1_execute.lto_priv.149+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8004988:	201d      	movs	r0, #29
 800498a:	4959      	ldr	r1, [pc, #356]	; (8004af0 <mbox1_execute.lto_priv.149+0x5c0>)
 800498c:	f001 f9b0 	bl	8005cf0 <_test_assert_sequence>
 8004990:	2800      	cmp	r0, #0
 8004992:	f47f adff 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004996:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800499a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800499c:	201e      	movs	r0, #30
 800499e:	1f4a      	subs	r2, r1, #5
 80049a0:	4251      	negs	r1, r2
 80049a2:	4151      	adcs	r1, r2
 80049a4:	4e53      	ldr	r6, [pc, #332]	; (8004af4 <mbox1_execute.lto_priv.149+0x5c4>)
 80049a6:	f001 fadb 	bl	8005f60 <_test_assert>
 80049aa:	b110      	cbz	r0, 80049b2 <mbox1_execute.lto_priv.149+0x482>
 80049ac:	f384 8811 	msr	BASEPRI, r4
 80049b0:	e5f0      	b.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 80049b2:	f384 8811 	msr	BASEPRI, r4
 80049b6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 80049ba:	69b1      	ldr	r1, [r6, #24]
 80049bc:	201f      	movs	r0, #31
 80049be:	fab1 f181 	clz	r1, r1
 80049c2:	0949      	lsrs	r1, r1, #5
 80049c4:	f001 facc 	bl	8005f60 <_test_assert>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d1ef      	bne.n	80049ac <mbox1_execute.lto_priv.149+0x47c>
 80049cc:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80049d0:	68f1      	ldr	r1, [r6, #12]
 80049d2:	68b3      	ldr	r3, [r6, #8]
 80049d4:	4638      	mov	r0, r7
 80049d6:	1acb      	subs	r3, r1, r3
 80049d8:	4259      	negs	r1, r3
 80049da:	4159      	adcs	r1, r3
 80049dc:	f001 fac0 	bl	8005f60 <_test_assert>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f47f add7 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 80049e6:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 80049ea:	2045      	movs	r0, #69	; 0x45
 80049ec:	f004 fc10 	bl	8009210 <chMBPostAheadI.constprop.21>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 80049f0:	fab0 f180 	clz	r1, r0
 80049f4:	2021      	movs	r0, #33	; 0x21
 80049f6:	0949      	lsrs	r1, r1, #5
 80049f8:	f001 fab2 	bl	8005f60 <_test_assert>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	f47f adc9 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 8004a02:	2044      	movs	r0, #68	; 0x44
 8004a04:	f004 fc04 	bl	8009210 <chMBPostAheadI.constprop.21>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8004a08:	fab0 f180 	clz	r1, r0
 8004a0c:	2022      	movs	r0, #34	; 0x22
 8004a0e:	0949      	lsrs	r1, r1, #5
 8004a10:	f001 faa6 	bl	8005f60 <_test_assert>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f47f adbd 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8004a1a:	2043      	movs	r0, #67	; 0x43
 8004a1c:	f004 fbf8 	bl	8009210 <chMBPostAheadI.constprop.21>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 8004a20:	fab0 f180 	clz	r1, r0
 8004a24:	2023      	movs	r0, #35	; 0x23
 8004a26:	0949      	lsrs	r1, r1, #5
 8004a28:	f001 fa9a 	bl	8005f60 <_test_assert>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	f47f adb1 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8004a32:	2042      	movs	r0, #66	; 0x42
 8004a34:	f004 fbec 	bl	8009210 <chMBPostAheadI.constprop.21>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8004a38:	fab0 f180 	clz	r1, r0
 8004a3c:	2024      	movs	r0, #36	; 0x24
 8004a3e:	0949      	lsrs	r1, r1, #5
 8004a40:	f001 fa8e 	bl	8005f60 <_test_assert>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	f47f ada5 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8004a4a:	2041      	movs	r0, #65	; 0x41
 8004a4c:	f004 fbe0 	bl	8009210 <chMBPostAheadI.constprop.21>
 8004a50:	2300      	movs	r3, #0
 8004a52:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8004a56:	fab0 f180 	clz	r1, r0
 8004a5a:	2025      	movs	r0, #37	; 0x25
 8004a5c:	0949      	lsrs	r1, r1, #5
 8004a5e:	f001 fa7f 	bl	8005f60 <_test_assert>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f47f ad96 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8004a68:	68e9      	ldr	r1, [r5, #12]
 8004a6a:	68ab      	ldr	r3, [r5, #8]
 8004a6c:	2026      	movs	r0, #38	; 0x26
 8004a6e:	ebc3 0801 	rsb	r8, r3, r1
 8004a72:	f1d8 0100 	rsbs	r1, r8, #0
 8004a76:	eb41 0108 	adc.w	r1, r1, r8
 8004a7a:	f001 fa71 	bl	8005f60 <_test_assert>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	f47f ad88 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004a84:	4604      	mov	r4, r0
 8004a86:	2605      	movs	r6, #5
 8004a88:	f04f 0820 	mov.w	r8, #32
 8004a8c:	2720      	movs	r7, #32
 8004a8e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8004a92:	a801      	add	r0, sp, #4
 8004a94:	f004 fc04 	bl	80092a0 <chMBFetchI.constprop.19>
 8004a98:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8004a9c:	fab0 f180 	clz	r1, r0
 8004aa0:	2027      	movs	r0, #39	; 0x27
 8004aa2:	0949      	lsrs	r1, r1, #5
 8004aa4:	f001 fa5c 	bl	8005f60 <_test_assert>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f47f ad73 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
    test_emit_token(msg2);
 8004aae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8004ab2:	f001 fa6d 	bl	8005f90 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8004ab6:	3e01      	subs	r6, #1
 8004ab8:	d1e8      	bne.n	8004a8c <mbox1_execute.lto_priv.149+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8004aba:	2028      	movs	r0, #40	; 0x28
 8004abc:	490c      	ldr	r1, [pc, #48]	; (8004af0 <mbox1_execute.lto_priv.149+0x5c0>)
 8004abe:	f001 f917 	bl	8005cf0 <_test_assert_sequence>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	f47f ad66 	bne.w	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004ac8:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8004acc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004ace:	2029      	movs	r0, #41	; 0x29
 8004ad0:	f1a1 0c05 	sub.w	ip, r1, #5
 8004ad4:	f1dc 0100 	rsbs	r1, ip, #0
 8004ad8:	eb41 010c 	adc.w	r1, r1, ip
 8004adc:	4c05      	ldr	r4, [pc, #20]	; (8004af4 <mbox1_execute.lto_priv.149+0x5c4>)
 8004ade:	f001 fa3f 	bl	8005f60 <_test_assert>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	f43f ad59 	beq.w	800459a <mbox1_execute.lto_priv.149+0x6a>
 8004ae8:	f386 8811 	msr	BASEPRI, r6
 8004aec:	e552      	b.n	8004594 <mbox1_execute.lto_priv.149+0x64>
 8004aee:	bf00      	nop
 8004af0:	0800a0c4 	.word	0x0800a0c4
 8004af4:	20000cac 	.word	0x20000cac
 8004af8:	f3af 8000 	nop.w
 8004afc:	f3af 8000 	nop.w

08004b00 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8004b00:	b510      	push	{r4, lr}
 8004b02:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8004b04:	2141      	movs	r1, #65	; 0x41
 8004b06:	f001 fe53 	bl	80067b0 <chMsgSend>
  chMsgSend(p, 'B');
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	2142      	movs	r1, #66	; 0x42
 8004b0e:	f001 fe4f 	bl	80067b0 <chMsgSend>
  chMsgSend(p, 'C');
 8004b12:	4620      	mov	r0, r4
 8004b14:	2143      	movs	r1, #67	; 0x43
 8004b16:	f001 fe4b 	bl	80067b0 <chMsgSend>
  return 0;
}
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	bf00      	nop

08004b20 <msg1_execute.lto_priv.147>:

static void msg1_execute(void) {
 8004b20:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004b22:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <msg1_execute.lto_priv.147+0x80>)
 8004b24:	b082      	sub	sp, #8
 8004b26:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8004b28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004b2c:	68a2      	ldr	r2, [r4, #8]
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <msg1_execute.lto_priv.147+0x84>)
 8004b30:	3201      	adds	r2, #1
 8004b32:	9400      	str	r4, [sp, #0]
 8004b34:	481c      	ldr	r0, [pc, #112]	; (8004ba8 <msg1_execute.lto_priv.147+0x88>)
 8004b36:	f002 f9b3 	bl	8006ea0 <chThdCreateStatic>
 8004b3a:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <msg1_execute.lto_priv.147+0x8c>)
 8004b3c:	2520      	movs	r5, #32
 8004b3e:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8004b40:	f001 fe16 	bl	8006770 <chMsgWait>
 8004b44:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004b46:	f385 8811 	msr	BASEPRI, r5
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	f002 f8e0 	bl	8006d10 <chSchWakeupS>
 8004b50:	2400      	movs	r4, #0
 8004b52:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004b56:	b2f0      	uxtb	r0, r6
 8004b58:	f001 fa1a 	bl	8005f90 <test_emit_token>
  tp = chMsgWait();
 8004b5c:	f001 fe08 	bl	8006770 <chMsgWait>
 8004b60:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004b62:	f385 8811 	msr	BASEPRI, r5
 8004b66:	4631      	mov	r1, r6
 8004b68:	f002 f8d2 	bl	8006d10 <chSchWakeupS>
 8004b6c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004b70:	b2f0      	uxtb	r0, r6
 8004b72:	f001 fa0d 	bl	8005f90 <test_emit_token>
  tp = chMsgWait();
 8004b76:	f001 fdfb 	bl	8006770 <chMsgWait>
 8004b7a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8004b7c:	f385 8811 	msr	BASEPRI, r5
 8004b80:	4631      	mov	r1, r6
 8004b82:	f002 f8c5 	bl	8006d10 <chSchWakeupS>
 8004b86:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8004b8a:	b2f0      	uxtb	r0, r6
 8004b8c:	f001 fa00 	bl	8005f90 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8004b90:	4907      	ldr	r1, [pc, #28]	; (8004bb0 <msg1_execute.lto_priv.147+0x90>)
 8004b92:	2001      	movs	r0, #1
}
 8004b94:	b002      	add	sp, #8
 8004b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8004b9a:	f001 b8a9 	b.w	8005cf0 <_test_assert_sequence>
 8004b9e:	bf00      	nop
 8004ba0:	20001e40 	.word	0x20001e40
 8004ba4:	08004b01 	.word	0x08004b01
 8004ba8:	200017c8 	.word	0x200017c8
 8004bac:	20001710 	.word	0x20001710
 8004bb0:	0800a0c0 	.word	0x0800a0c0
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	f3af 8000 	nop.w
 8004bbc:	f3af 8000 	nop.w

08004bc0 <mtx8_execute.lto_priv.146>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <mtx8_execute.lto_priv.146+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004bc4:	4d19      	ldr	r5, [pc, #100]	; (8004c2c <mtx8_execute.lto_priv.146+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <mtx8_execute.lto_priv.146+0x70>)
 8004bca:	6896      	ldr	r6, [r2, #8]
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8004bcc:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004bce:	1c72      	adds	r2, r6, #1
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004bd8:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <mtx8_execute.lto_priv.146+0x74>)
 8004bda:	f002 f961 	bl	8006ea0 <chThdCreateStatic>
 8004bde:	4c16      	ldr	r4, [pc, #88]	; (8004c38 <mtx8_execute.lto_priv.146+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <mtx8_execute.lto_priv.146+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8004be2:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8004be4:	1cb2      	adds	r2, r6, #2
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8004bec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004bf0:	4b13      	ldr	r3, [pc, #76]	; (8004c40 <mtx8_execute.lto_priv.146+0x80>)
 8004bf2:	f002 f955 	bl	8006ea0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <mtx8_execute.lto_priv.146+0x84>)
 8004bf8:	1cf2      	adds	r2, r6, #3
 8004bfa:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8004bfe:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <mtx8_execute.lto_priv.146+0x88>)
 8004c08:	f002 f94a 	bl	8006ea0 <chThdCreateStatic>
 8004c0c:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8004c0e:	f004 fa0f 	bl	8009030 <chCondSignal.constprop.52>
  chCondSignal(&c1);
 8004c12:	f004 fa0d 	bl	8009030 <chCondSignal.constprop.52>
  test_wait_threads();
 8004c16:	f001 f81b 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8004c1a:	490c      	ldr	r1, [pc, #48]	; (8004c4c <mtx8_execute.lto_priv.146+0x8c>)
 8004c1c:	2001      	movs	r0, #1
}
 8004c1e:	b002      	add	sp, #8
 8004c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8004c24:	f001 b864 	b.w	8005cf0 <_test_assert_sequence>
 8004c28:	20001e40 	.word	0x20001e40
 8004c2c:	200017c8 	.word	0x200017c8
 8004c30:	080097f0 	.word	0x080097f0
 8004c34:	08004c71 	.word	0x08004c71
 8004c38:	20001710 	.word	0x20001710
 8004c3c:	080097f8 	.word	0x080097f8
 8004c40:	08004d01 	.word	0x08004d01
 8004c44:	080097f4 	.word	0x080097f4
 8004c48:	08004c51 	.word	0x08004c51
 8004c4c:	0800a0c0 	.word	0x0800a0c0

08004c50 <thread12>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8004c54:	4c05      	ldr	r4, [pc, #20]	; (8004c6c <thread12+0x1c>)
 8004c56:	4620      	mov	r0, r4
 8004c58:	f002 fb1a 	bl	8007290 <chMtxLock>
  test_emit_token(*(char *)p);
 8004c5c:	7828      	ldrb	r0, [r5, #0]
 8004c5e:	f001 f997 	bl	8005f90 <test_emit_token>
  chMtxUnlock(&m2);
 8004c62:	4620      	mov	r0, r4
 8004c64:	f002 f884 	bl	8006d70 <chMtxUnlock>
  return 0;
}
 8004c68:	2000      	movs	r0, #0
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20000854 	.word	0x20000854

08004c70 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	4606      	mov	r6, r0

  chMtxLock(&m2);
 8004c74:	481c      	ldr	r0, [pc, #112]	; (8004ce8 <thread11+0x78>)
 8004c76:	f002 fb0b 	bl	8007290 <chMtxLock>
  chMtxLock(&m1);
 8004c7a:	481c      	ldr	r0, [pc, #112]	; (8004cec <thread11+0x7c>)
 8004c7c:	f002 fb08 	bl	8007290 <chMtxLock>
 8004c80:	2320      	movs	r3, #32
 8004c82:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004c86:	4d1a      	ldr	r5, [pc, #104]	; (8004cf0 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8004c88:	69ab      	ldr	r3, [r5, #24]
 8004c8a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f002 fa6f 	bl	8007170 <chMtxUnlockS>
  currp->p_u.wtobjp = cp;
 8004c92:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <thread11+0x84>)
 8004c94:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004c96:	4610      	mov	r0, r2
 8004c98:	4613      	mov	r3, r2
 8004c9a:	6222      	str	r2, [r4, #32]
 8004c9c:	e003      	b.n	8004ca6 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	68a2      	ldr	r2, [r4, #8]
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	d302      	bcc.n	8004cac <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8004ca6:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004ca8:	4283      	cmp	r3, r0
 8004caa:	d1f8      	bne.n	8004c9e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004cac:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8004cae:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004cb0:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8004cb2:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8004cb4:	605c      	str	r4, [r3, #4]
 8004cb6:	6014      	str	r4, [r2, #0]
 8004cb8:	f002 f932 	bl	8006f20 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8004cbc:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	d002      	beq.n	8004cca <thread11+0x5a>
    chMtxLockS(mp);
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f002 fa7b 	bl	80071c0 <chMtxLockS>
 8004cca:	2400      	movs	r4, #0
 8004ccc:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8004cd0:	7830      	ldrb	r0, [r6, #0]
 8004cd2:	f001 f95d 	bl	8005f90 <test_emit_token>
  chMtxUnlock(&m1);
 8004cd6:	4805      	ldr	r0, [pc, #20]	; (8004cec <thread11+0x7c>)
 8004cd8:	f002 f84a 	bl	8006d70 <chMtxUnlock>
  chMtxUnlock(&m2);
 8004cdc:	4802      	ldr	r0, [pc, #8]	; (8004ce8 <thread11+0x78>)
 8004cde:	f002 f847 	bl	8006d70 <chMtxUnlock>
  return 0;
}
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000854 	.word	0x20000854
 8004cec:	20000844 	.word	0x20000844
 8004cf0:	20001e40 	.word	0x20001e40
 8004cf4:	20000cd4 	.word	0x20000cd4
 8004cf8:	f3af 8000 	nop.w
 8004cfc:	f3af 8000 	nop.w

08004d00 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8004d04:	4816      	ldr	r0, [pc, #88]	; (8004d60 <thread10+0x60>)
 8004d06:	f002 fac3 	bl	8007290 <chMtxLock>
 8004d0a:	2320      	movs	r3, #32
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8004d10:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <thread10+0x64>)
 8004d12:	699c      	ldr	r4, [r3, #24]
 8004d14:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8004d16:	4628      	mov	r0, r5
 8004d18:	f002 fa2a 	bl	8007170 <chMtxUnlockS>
  ctp->p_u.wtobjp = cp;
 8004d1c:	4a12      	ldr	r2, [pc, #72]	; (8004d68 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4613      	mov	r3, r2
 8004d22:	6222      	str	r2, [r4, #32]
 8004d24:	e003      	b.n	8004d2e <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004d26:	6899      	ldr	r1, [r3, #8]
 8004d28:	68a2      	ldr	r2, [r4, #8]
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	d302      	bcc.n	8004d34 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8004d2e:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8004d30:	4283      	cmp	r3, r0
 8004d32:	d1f8      	bne.n	8004d26 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004d34:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8004d36:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8004d38:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8004d3a:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8004d3c:	605c      	str	r4, [r3, #4]
 8004d3e:	6014      	str	r4, [r2, #0]
 8004d40:	f002 f8ee 	bl	8006f20 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8004d44:	4628      	mov	r0, r5
 8004d46:	f002 fa3b 	bl	80071c0 <chMtxLockS>
 8004d4a:	2400      	movs	r4, #0
 8004d4c:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8004d50:	7830      	ldrb	r0, [r6, #0]
 8004d52:	f001 f91d 	bl	8005f90 <test_emit_token>
  chMtxUnlock(&m1);
 8004d56:	4802      	ldr	r0, [pc, #8]	; (8004d60 <thread10+0x60>)
 8004d58:	f002 f80a 	bl	8006d70 <chMtxUnlock>
  return 0;
}
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	20000844 	.word	0x20000844
 8004d64:	20001e40 	.word	0x20001e40
 8004d68:	20000cd4 	.word	0x20000cd4
 8004d6c:	f3af 8000 	nop.w

08004d70 <mtx7_execute.lto_priv.144>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8004d70:	b530      	push	{r4, r5, lr}
 8004d72:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <mtx7_execute.lto_priv.144+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004d74:	4b2c      	ldr	r3, [pc, #176]	; (8004e28 <mtx7_execute.lto_priv.144+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004d76:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8004d78:	b083      	sub	sp, #12
 8004d7a:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004d7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d80:	1c6a      	adds	r2, r5, #1
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	4829      	ldr	r0, [pc, #164]	; (8004e2c <mtx7_execute.lto_priv.144+0xbc>)
 8004d86:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <mtx7_execute.lto_priv.144+0xc0>)
 8004d88:	f002 f88a 	bl	8006ea0 <chThdCreateStatic>
 8004d8c:	4c29      	ldr	r4, [pc, #164]	; (8004e34 <mtx7_execute.lto_priv.144+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <mtx7_execute.lto_priv.144+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004d90:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004d92:	1caa      	adds	r2, r5, #2
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d9a:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <mtx7_execute.lto_priv.144+0xc0>)
 8004d9c:	4827      	ldr	r0, [pc, #156]	; (8004e3c <mtx7_execute.lto_priv.144+0xcc>)
 8004d9e:	f002 f87f 	bl	8006ea0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004da2:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <mtx7_execute.lto_priv.144+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004da4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004da6:	1cea      	adds	r2, r5, #3
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <mtx7_execute.lto_priv.144+0xc0>)
 8004db0:	4824      	ldr	r0, [pc, #144]	; (8004e44 <mtx7_execute.lto_priv.144+0xd4>)
 8004db2:	f002 f875 	bl	8006ea0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <mtx7_execute.lto_priv.144+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004db8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004dba:	1d2a      	adds	r2, r5, #4
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <mtx7_execute.lto_priv.144+0xc0>)
 8004dc4:	4821      	ldr	r0, [pc, #132]	; (8004e4c <mtx7_execute.lto_priv.144+0xdc>)
 8004dc6:	f002 f86b 	bl	8006ea0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <mtx7_execute.lto_priv.144+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004dcc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004dce:	1d6a      	adds	r2, r5, #5
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004dd6:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <mtx7_execute.lto_priv.144+0xc0>)
 8004dd8:	481e      	ldr	r0, [pc, #120]	; (8004e54 <mtx7_execute.lto_priv.144+0xe4>)
 8004dda:	f002 f861 	bl	8006ea0 <chThdCreateStatic>
 8004dde:	2320      	movs	r3, #32
 8004de0:	6120      	str	r0, [r4, #16]
 8004de2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8004de6:	4c1c      	ldr	r4, [pc, #112]	; (8004e58 <mtx7_execute.lto_priv.144+0xe8>)
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8004dec:	bf18      	it	ne
 8004dee:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8004df2:	d009      	beq.n	8004e08 <mtx7_execute.lto_priv.144+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8004df4:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8004df6:	4618      	mov	r0, r3
 8004df8:	6054      	str	r4, [r2, #4]
 8004dfa:	6022      	str	r2, [r4, #0]
 8004dfc:	f002 f970 	bl	80070e0 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8004e00:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8004e02:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d1f5      	bne.n	8004df4 <mtx7_execute.lto_priv.144+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8004e08:	f001 ff5a 	bl	8006cc0 <chSchRescheduleS>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8004e12:	f000 ff1d 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004e16:	4911      	ldr	r1, [pc, #68]	; (8004e5c <mtx7_execute.lto_priv.144+0xec>)
 8004e18:	2001      	movs	r0, #1
}
 8004e1a:	b003      	add	sp, #12
 8004e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004e20:	f000 bf66 	b.w	8005cf0 <_test_assert_sequence>
 8004e24:	20001e40 	.word	0x20001e40
 8004e28:	0800a0c8 	.word	0x0800a0c8
 8004e2c:	200017c8 	.word	0x200017c8
 8004e30:	08004d01 	.word	0x08004d01
 8004e34:	20001710 	.word	0x20001710
 8004e38:	0800ae44 	.word	0x0800ae44
 8004e3c:	20001910 	.word	0x20001910
 8004e40:	080097f8 	.word	0x080097f8
 8004e44:	20001a58 	.word	0x20001a58
 8004e48:	080097f4 	.word	0x080097f4
 8004e4c:	20001ba0 	.word	0x20001ba0
 8004e50:	080097f0 	.word	0x080097f0
 8004e54:	20001ce8 	.word	0x20001ce8
 8004e58:	20000cd4 	.word	0x20000cd4
 8004e5c:	0800a0c4 	.word	0x0800a0c4

08004e60 <mtx6_execute.lto_priv.142>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8004e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <mtx6_execute.lto_priv.142+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004e64:	4e2c      	ldr	r6, [pc, #176]	; (8004f18 <mtx6_execute.lto_priv.142+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4d2c      	ldr	r5, [pc, #176]	; (8004f1c <mtx6_execute.lto_priv.142+0xbc>)
 8004e6a:	689f      	ldr	r7, [r3, #8]
 8004e6c:	492c      	ldr	r1, [pc, #176]	; (8004f20 <mtx6_execute.lto_priv.142+0xc0>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8004e6e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004e70:	1c7a      	adds	r2, r7, #1
 8004e72:	462b      	mov	r3, r5
 8004e74:	9100      	str	r1, [sp, #0]
 8004e76:	4630      	mov	r0, r6
 8004e78:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e7c:	f002 f810 	bl	8006ea0 <chThdCreateStatic>
 8004e80:	4c28      	ldr	r4, [pc, #160]	; (8004f24 <mtx6_execute.lto_priv.142+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004e82:	4929      	ldr	r1, [pc, #164]	; (8004f28 <mtx6_execute.lto_priv.142+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8004e84:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004e86:	1cba      	adds	r2, r7, #2
 8004e88:	462b      	mov	r3, r5
 8004e8a:	9100      	str	r1, [sp, #0]
 8004e8c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8004e90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004e94:	f002 f804 	bl	8006ea0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004e98:	4924      	ldr	r1, [pc, #144]	; (8004f2c <mtx6_execute.lto_priv.142+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8004e9a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004e9c:	1cfa      	adds	r2, r7, #3
 8004e9e:	462b      	mov	r3, r5
 8004ea0:	9100      	str	r1, [sp, #0]
 8004ea2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8004ea6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004eaa:	f001 fff9 	bl	8006ea0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004eae:	4920      	ldr	r1, [pc, #128]	; (8004f30 <mtx6_execute.lto_priv.142+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8004eb0:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004eb2:	1d3a      	adds	r2, r7, #4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	9100      	str	r1, [sp, #0]
 8004eb8:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8004ebc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004ec0:	f001 ffee 	bl	8006ea0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004ec4:	491b      	ldr	r1, [pc, #108]	; (8004f34 <mtx6_execute.lto_priv.142+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8004ec6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8004ec8:	462b      	mov	r3, r5
 8004eca:	9100      	str	r1, [sp, #0]
 8004ecc:	1d7a      	adds	r2, r7, #5
 8004ece:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8004ed2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004ed6:	f001 ffe3 	bl	8006ea0 <chThdCreateStatic>
 8004eda:	2320      	movs	r3, #32
 8004edc:	6120      	str	r0, [r4, #16]
 8004ede:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8004ee2:	f004 f8bd 	bl	8009060 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8004ee6:	f004 f8bb 	bl	8009060 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8004eea:	f004 f8b9 	bl	8009060 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8004eee:	f004 f8b7 	bl	8009060 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8004ef2:	f004 f8b5 	bl	8009060 <chCondSignalI.constprop.51>
  chSchRescheduleS();
 8004ef6:	f001 fee3 	bl	8006cc0 <chSchRescheduleS>
 8004efa:	2300      	movs	r3, #0
 8004efc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8004f00:	f000 fea6 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8004f04:	490c      	ldr	r1, [pc, #48]	; (8004f38 <mtx6_execute.lto_priv.142+0xd8>)
 8004f06:	2001      	movs	r0, #1
}
 8004f08:	b003      	add	sp, #12
 8004f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8004f0e:	f000 beef 	b.w	8005cf0 <_test_assert_sequence>
 8004f12:	bf00      	nop
 8004f14:	20001e40 	.word	0x20001e40
 8004f18:	200017c8 	.word	0x200017c8
 8004f1c:	08004d01 	.word	0x08004d01
 8004f20:	0800a0c8 	.word	0x0800a0c8
 8004f24:	20001710 	.word	0x20001710
 8004f28:	0800ae44 	.word	0x0800ae44
 8004f2c:	080097f8 	.word	0x080097f8
 8004f30:	080097f4 	.word	0x080097f4
 8004f34:	080097f0 	.word	0x080097f0
 8004f38:	0800a0c4 	.word	0x0800a0c4
 8004f3c:	f3af 8000 	nop.w

08004f40 <mtx5_setup.lto_priv.139>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8004f40:	4b02      	ldr	r3, [pc, #8]	; (8004f4c <mtx5_setup.lto_priv.139+0xc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	605b      	str	r3, [r3, #4]
 8004f46:	601b      	str	r3, [r3, #0]
 8004f48:	609a      	str	r2, [r3, #8]
 8004f4a:	4770      	bx	lr
 8004f4c:	20000844 	.word	0x20000844

08004f50 <mtx4_setup.lto_priv.137>:
 8004f50:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <mtx4_setup.lto_priv.137+0x14>)
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <mtx4_setup.lto_priv.137+0x18>)
 8004f54:	2100      	movs	r1, #0
 8004f56:	6052      	str	r2, [r2, #4]
 8004f58:	6012      	str	r2, [r2, #0]
 8004f5a:	6091      	str	r1, [r2, #8]
 8004f5c:	6099      	str	r1, [r3, #8]
 8004f5e:	605b      	str	r3, [r3, #4]
 8004f60:	601b      	str	r3, [r3, #0]
 8004f62:	4770      	bx	lr
 8004f64:	20000844 	.word	0x20000844
 8004f68:	20000854 	.word	0x20000854
 8004f6c:	f3af 8000 	nop.w

08004f70 <mtx1_setup.lto_priv.135>:
 8004f70:	4b02      	ldr	r3, [pc, #8]	; (8004f7c <mtx1_setup.lto_priv.135+0xc>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	605b      	str	r3, [r3, #4]
 8004f76:	601b      	str	r3, [r3, #0]
 8004f78:	609a      	str	r2, [r3, #8]
 8004f7a:	4770      	bx	lr
 8004f7c:	20000844 	.word	0x20000844

08004f80 <sem3_setup.lto_priv.132>:
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <sem3_setup.lto_priv.132+0xc>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	605b      	str	r3, [r3, #4]
 8004f86:	601b      	str	r3, [r3, #0]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	4770      	bx	lr
 8004f8c:	20000cdc 	.word	0x20000cdc

08004f90 <sem2_setup.lto_priv.130>:
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <sem2_setup.lto_priv.130+0xc>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	605b      	str	r3, [r3, #4]
 8004f96:	601b      	str	r3, [r3, #0]
 8004f98:	609a      	str	r2, [r3, #8]
 8004f9a:	4770      	bx	lr
 8004f9c:	20000cdc 	.word	0x20000cdc

08004fa0 <sem1_setup.lto_priv.128>:
 8004fa0:	4b02      	ldr	r3, [pc, #8]	; (8004fac <sem1_setup.lto_priv.128+0xc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605b      	str	r3, [r3, #4]
 8004fa6:	601b      	str	r3, [r3, #0]
 8004fa8:	609a      	str	r2, [r3, #8]
 8004faa:	4770      	bx	lr
 8004fac:	20000cdc 	.word	0x20000cdc

08004fb0 <mtx5_execute.lto_priv.140>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8004fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004fb4:	4d3b      	ldr	r5, [pc, #236]	; (80050a4 <mtx5_execute.lto_priv.140+0xf4>)
 8004fb6:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004fb8:	69aa      	ldr	r2, [r5, #24]
 8004fba:	6896      	ldr	r6, [r2, #8]
 8004fbc:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8004fc0:	4c39      	ldr	r4, [pc, #228]	; (80050a8 <mtx5_execute.lto_priv.140+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8004fc2:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8004fc4:	68a3      	ldr	r3, [r4, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d05e      	beq.n	8005088 <mtx5_execute.lto_priv.140+0xd8>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f000 ffc5 	bl	8005f60 <_test_assert>
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	b108      	cbz	r0, 8004fde <mtx5_execute.lto_priv.140+0x2e>
 8004fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fde:	2320      	movs	r3, #32
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	68a3      	ldr	r3, [r4, #8]
 8004fe6:	4a30      	ldr	r2, [pc, #192]	; (80050a8 <mtx5_execute.lto_priv.140+0xf8>)
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d054      	beq.n	8005096 <mtx5_execute.lto_priv.140+0xe6>
 8004fec:	2101      	movs	r1, #1
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8004ff4:	2002      	movs	r0, #2
 8004ff6:	f000 ffb3 	bl	8005f60 <_test_assert>
 8004ffa:	4607      	mov	r7, r0
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1ec      	bne.n	8004fda <mtx5_execute.lto_priv.140+0x2a>
 8005000:	2320      	movs	r3, #32
 8005002:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8005006:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80050a8 <mtx5_execute.lto_priv.140+0xf8>
 800500a:	4640      	mov	r0, r8
 800500c:	f002 f8b0 	bl	8007170 <chMtxUnlockS>
 8005010:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8005014:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8005016:	2003      	movs	r0, #3
 8005018:	1b09      	subs	r1, r1, r4
 800501a:	fab1 f181 	clz	r1, r1
 800501e:	0949      	lsrs	r1, r1, #5
 8005020:	f000 ff9e 	bl	8005f60 <_test_assert>
 8005024:	2800      	cmp	r0, #0
 8005026:	d1d8      	bne.n	8004fda <mtx5_execute.lto_priv.140+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8005028:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800502c:	2004      	movs	r0, #4
 800502e:	fab1 f181 	clz	r1, r1
 8005032:	0949      	lsrs	r1, r1, #5
 8005034:	f000 ff94 	bl	8005f60 <_test_assert>
 8005038:	2800      	cmp	r0, #0
 800503a:	d1ce      	bne.n	8004fda <mtx5_execute.lto_priv.140+0x2a>
 800503c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 800503e:	2005      	movs	r0, #5
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	1a71      	subs	r1, r6, r1
 8005044:	fab1 f181 	clz	r1, r1
 8005048:	0949      	lsrs	r1, r1, #5
 800504a:	f000 ff89 	bl	8005f60 <_test_assert>
 800504e:	2800      	cmp	r0, #0
 8005050:	d1c3      	bne.n	8004fda <mtx5_execute.lto_priv.140+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8005052:	4640      	mov	r0, r8
 8005054:	f002 f91c 	bl	8007290 <chMtxLock>
  chMtxUnlockAll();
 8005058:	f002 f85a 	bl	8007110 <chMtxUnlockAll>
 800505c:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8005060:	2006      	movs	r0, #6
 8005062:	ebc8 0101 	rsb	r1, r8, r1
 8005066:	fab1 f181 	clz	r1, r1
 800506a:	0949      	lsrs	r1, r1, #5
 800506c:	f000 ff78 	bl	8005f60 <_test_assert>
 8005070:	2800      	cmp	r0, #0
 8005072:	d1b2      	bne.n	8004fda <mtx5_execute.lto_priv.140+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8005074:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8005078:	2007      	movs	r0, #7
 800507a:	fab1 f181 	clz	r1, r1
}
 800507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8005082:	0949      	lsrs	r1, r1, #5
 8005084:	f000 bf6c 	b.w	8005f60 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8005088:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 800508a:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 800508c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800508e:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8005090:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8005092:	639c      	str	r4, [r3, #56]	; 0x38
 8005094:	e799      	b.n	8004fca <mtx5_execute.lto_priv.140+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8005096:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8005098:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 800509a:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 800509c:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
 80050a0:	e7a5      	b.n	8004fee <mtx5_execute.lto_priv.140+0x3e>
 80050a2:	bf00      	nop
 80050a4:	20001e40 	.word	0x20001e40
 80050a8:	20000844 	.word	0x20000844
 80050ac:	f3af 8000 	nop.w

080050b0 <mtx4_execute.lto_priv.138>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80050b4:	4d84      	ldr	r5, [pc, #528]	; (80052c8 <mtx4_execute.lto_priv.138+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80050b6:	4b85      	ldr	r3, [pc, #532]	; (80052cc <mtx4_execute.lto_priv.138+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80050b8:	69aa      	ldr	r2, [r5, #24]
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 80050ba:	b082      	sub	sp, #8
 80050bc:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80050be:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 80050c2:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80050c4:	463a      	mov	r2, r7
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4881      	ldr	r0, [pc, #516]	; (80052d0 <mtx4_execute.lto_priv.138+0x220>)
 80050ca:	4b82      	ldr	r3, [pc, #520]	; (80052d4 <mtx4_execute.lto_priv.138+0x224>)
 80050cc:	f001 fee8 	bl	8006ea0 <chThdCreateStatic>
 80050d0:	4e81      	ldr	r6, [pc, #516]	; (80052d8 <mtx4_execute.lto_priv.138+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80050d2:	4b82      	ldr	r3, [pc, #520]	; (80052dc <mtx4_execute.lto_priv.138+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 80050d4:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 80050d8:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 80050da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80050de:	4642      	mov	r2, r8
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	487f      	ldr	r0, [pc, #508]	; (80052e0 <mtx4_execute.lto_priv.138+0x230>)
 80050e4:	4b7f      	ldr	r3, [pc, #508]	; (80052e4 <mtx4_execute.lto_priv.138+0x234>)
 80050e6:	f001 fedb 	bl	8006ea0 <chThdCreateStatic>
 80050ea:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80050ec:	487e      	ldr	r0, [pc, #504]	; (80052e8 <mtx4_execute.lto_priv.138+0x238>)
 80050ee:	f002 f8cf 	bl	8007290 <chMtxLock>
 80050f2:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 80050f4:	2001      	movs	r0, #1
 80050f6:	6899      	ldr	r1, [r3, #8]
 80050f8:	1a61      	subs	r1, r4, r1
 80050fa:	fab1 f181 	clz	r1, r1
 80050fe:	0949      	lsrs	r1, r1, #5
 8005100:	f000 ff2e 	bl	8005f60 <_test_assert>
 8005104:	b110      	cbz	r0, 800510c <mtx4_execute.lto_priv.138+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8005106:	b002      	add	sp, #8
 8005108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 800510c:	20c8      	movs	r0, #200	; 0xc8
 800510e:	f001 ffd7 	bl	80070c0 <chThdSleep>
 8005112:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8005114:	2002      	movs	r0, #2
 8005116:	6899      	ldr	r1, [r3, #8]
 8005118:	1a79      	subs	r1, r7, r1
 800511a:	fab1 f181 	clz	r1, r1
 800511e:	0949      	lsrs	r1, r1, #5
 8005120:	f000 ff1e 	bl	8005f60 <_test_assert>
 8005124:	2800      	cmp	r0, #0
 8005126:	d1ee      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  chMtxLock(&m1);
 8005128:	4870      	ldr	r0, [pc, #448]	; (80052ec <mtx4_execute.lto_priv.138+0x23c>)
 800512a:	f002 f8b1 	bl	8007290 <chMtxLock>
 800512e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8005130:	2003      	movs	r0, #3
 8005132:	6899      	ldr	r1, [r3, #8]
 8005134:	1a79      	subs	r1, r7, r1
 8005136:	fab1 f181 	clz	r1, r1
 800513a:	0949      	lsrs	r1, r1, #5
 800513c:	f000 ff10 	bl	8005f60 <_test_assert>
 8005140:	2800      	cmp	r0, #0
 8005142:	d1e0      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  chThdSleepMilliseconds(100);
 8005144:	20c8      	movs	r0, #200	; 0xc8
 8005146:	f001 ffbb 	bl	80070c0 <chThdSleep>
 800514a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 800514c:	2004      	movs	r0, #4
 800514e:	6899      	ldr	r1, [r3, #8]
 8005150:	ebc1 0108 	rsb	r1, r1, r8
 8005154:	fab1 f181 	clz	r1, r1
 8005158:	0949      	lsrs	r1, r1, #5
 800515a:	f000 ff01 	bl	8005f60 <_test_assert>
 800515e:	2800      	cmp	r0, #0
 8005160:	d1d1      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  chMtxUnlock(&m1);
 8005162:	4862      	ldr	r0, [pc, #392]	; (80052ec <mtx4_execute.lto_priv.138+0x23c>)
 8005164:	f001 fe04 	bl	8006d70 <chMtxUnlock>
 8005168:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 800516a:	2005      	movs	r0, #5
 800516c:	6899      	ldr	r1, [r3, #8]
 800516e:	1a79      	subs	r1, r7, r1
 8005170:	fab1 f181 	clz	r1, r1
 8005174:	0949      	lsrs	r1, r1, #5
 8005176:	f000 fef3 	bl	8005f60 <_test_assert>
 800517a:	2800      	cmp	r0, #0
 800517c:	d1c3      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  chThdSleepMilliseconds(100);
 800517e:	20c8      	movs	r0, #200	; 0xc8
 8005180:	f001 ff9e 	bl	80070c0 <chThdSleep>
 8005184:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8005186:	2006      	movs	r0, #6
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	1a79      	subs	r1, r7, r1
 800518c:	fab1 f181 	clz	r1, r1
 8005190:	0949      	lsrs	r1, r1, #5
 8005192:	f000 fee5 	bl	8005f60 <_test_assert>
 8005196:	2800      	cmp	r0, #0
 8005198:	d1b5      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  chMtxUnlockAll();
 800519a:	f001 ffb9 	bl	8007110 <chMtxUnlockAll>
 800519e:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80051a0:	2007      	movs	r0, #7
 80051a2:	6899      	ldr	r1, [r3, #8]
 80051a4:	1a61      	subs	r1, r4, r1
 80051a6:	fab1 f181 	clz	r1, r1
 80051aa:	0949      	lsrs	r1, r1, #5
 80051ac:	f000 fed8 	bl	8005f60 <_test_assert>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d1a8      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  test_wait_threads();
 80051b4:	f000 fd4c 	bl	8005c50 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80051b8:	4b4d      	ldr	r3, [pc, #308]	; (80052f0 <mtx4_execute.lto_priv.138+0x240>)
 80051ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	463a      	mov	r2, r7
 80051c2:	4b44      	ldr	r3, [pc, #272]	; (80052d4 <mtx4_execute.lto_priv.138+0x224>)
 80051c4:	4842      	ldr	r0, [pc, #264]	; (80052d0 <mtx4_execute.lto_priv.138+0x220>)
 80051c6:	f001 fe6b 	bl	8006ea0 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <mtx4_execute.lto_priv.138+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 80051cc:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 80051ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4642      	mov	r2, r8
 80051d6:	4b43      	ldr	r3, [pc, #268]	; (80052e4 <mtx4_execute.lto_priv.138+0x234>)
 80051d8:	4841      	ldr	r0, [pc, #260]	; (80052e0 <mtx4_execute.lto_priv.138+0x230>)
 80051da:	f001 fe61 	bl	8006ea0 <chThdCreateStatic>
 80051de:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 80051e0:	4841      	ldr	r0, [pc, #260]	; (80052e8 <mtx4_execute.lto_priv.138+0x238>)
 80051e2:	f002 f855 	bl	8007290 <chMtxLock>
 80051e6:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 80051e8:	2008      	movs	r0, #8
 80051ea:	6899      	ldr	r1, [r3, #8]
 80051ec:	1a61      	subs	r1, r4, r1
 80051ee:	fab1 f181 	clz	r1, r1
 80051f2:	0949      	lsrs	r1, r1, #5
 80051f4:	f000 feb4 	bl	8005f60 <_test_assert>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d184      	bne.n	8005106 <mtx4_execute.lto_priv.138+0x56>
  chThdSleepMilliseconds(100);
 80051fc:	20c8      	movs	r0, #200	; 0xc8
 80051fe:	f001 ff5f 	bl	80070c0 <chThdSleep>
 8005202:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8005204:	2009      	movs	r0, #9
 8005206:	6899      	ldr	r1, [r3, #8]
 8005208:	1a7b      	subs	r3, r7, r1
 800520a:	4259      	negs	r1, r3
 800520c:	4159      	adcs	r1, r3
 800520e:	f000 fea7 	bl	8005f60 <_test_assert>
 8005212:	2800      	cmp	r0, #0
 8005214:	f47f af77 	bne.w	8005106 <mtx4_execute.lto_priv.138+0x56>
  chMtxLock(&m1);
 8005218:	4834      	ldr	r0, [pc, #208]	; (80052ec <mtx4_execute.lto_priv.138+0x23c>)
 800521a:	f002 f839 	bl	8007290 <chMtxLock>
 800521e:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8005220:	200a      	movs	r0, #10
 8005222:	6899      	ldr	r1, [r3, #8]
 8005224:	ebc1 0c07 	rsb	ip, r1, r7
 8005228:	f1dc 0100 	rsbs	r1, ip, #0
 800522c:	eb41 010c 	adc.w	r1, r1, ip
 8005230:	f000 fe96 	bl	8005f60 <_test_assert>
 8005234:	2800      	cmp	r0, #0
 8005236:	f47f af66 	bne.w	8005106 <mtx4_execute.lto_priv.138+0x56>
  chThdSleepMilliseconds(100);
 800523a:	20c8      	movs	r0, #200	; 0xc8
 800523c:	f001 ff40 	bl	80070c0 <chThdSleep>
 8005240:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8005242:	200b      	movs	r0, #11
 8005244:	6899      	ldr	r1, [r3, #8]
 8005246:	ebc1 0e08 	rsb	lr, r1, r8
 800524a:	f1de 0100 	rsbs	r1, lr, #0
 800524e:	eb41 010e 	adc.w	r1, r1, lr
 8005252:	f000 fe85 	bl	8005f60 <_test_assert>
 8005256:	4606      	mov	r6, r0
 8005258:	2800      	cmp	r0, #0
 800525a:	f47f af54 	bne.w	8005106 <mtx4_execute.lto_priv.138+0x56>
 800525e:	2320      	movs	r3, #32
 8005260:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8005264:	4821      	ldr	r0, [pc, #132]	; (80052ec <mtx4_execute.lto_priv.138+0x23c>)
 8005266:	f001 ff83 	bl	8007170 <chMtxUnlockS>
  chSchRescheduleS();
 800526a:	f001 fd29 	bl	8006cc0 <chSchRescheduleS>
 800526e:	f386 8811 	msr	BASEPRI, r6
 8005272:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8005274:	200c      	movs	r0, #12
 8005276:	6899      	ldr	r1, [r3, #8]
 8005278:	1a7e      	subs	r6, r7, r1
 800527a:	4271      	negs	r1, r6
 800527c:	4171      	adcs	r1, r6
 800527e:	f000 fe6f 	bl	8005f60 <_test_assert>
 8005282:	2800      	cmp	r0, #0
 8005284:	f47f af3f 	bne.w	8005106 <mtx4_execute.lto_priv.138+0x56>
  chThdSleepMilliseconds(100);
 8005288:	20c8      	movs	r0, #200	; 0xc8
 800528a:	f001 ff19 	bl	80070c0 <chThdSleep>
 800528e:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8005290:	200d      	movs	r0, #13
 8005292:	6899      	ldr	r1, [r3, #8]
 8005294:	1a7a      	subs	r2, r7, r1
 8005296:	4251      	negs	r1, r2
 8005298:	4151      	adcs	r1, r2
 800529a:	f000 fe61 	bl	8005f60 <_test_assert>
 800529e:	2800      	cmp	r0, #0
 80052a0:	f47f af31 	bne.w	8005106 <mtx4_execute.lto_priv.138+0x56>
  chMtxUnlockAll();
 80052a4:	f001 ff34 	bl	8007110 <chMtxUnlockAll>
 80052a8:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 80052aa:	200e      	movs	r0, #14
 80052ac:	6899      	ldr	r1, [r3, #8]
 80052ae:	1a63      	subs	r3, r4, r1
 80052b0:	4259      	negs	r1, r3
 80052b2:	4159      	adcs	r1, r3
 80052b4:	f000 fe54 	bl	8005f60 <_test_assert>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f47f af24 	bne.w	8005106 <mtx4_execute.lto_priv.138+0x56>
  test_wait_threads();
}
 80052be:	b002      	add	sp, #8
 80052c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 80052c4:	f000 bcc4 	b.w	8005c50 <test_wait_threads>
 80052c8:	20001e40 	.word	0x20001e40
 80052cc:	080097f4 	.word	0x080097f4
 80052d0:	200017c8 	.word	0x200017c8
 80052d4:	08005301 	.word	0x08005301
 80052d8:	20001710 	.word	0x20001710
 80052dc:	080097f0 	.word	0x080097f0
 80052e0:	20001910 	.word	0x20001910
 80052e4:	08005321 	.word	0x08005321
 80052e8:	20000854 	.word	0x20000854
 80052ec:	20000844 	.word	0x20000844
 80052f0:	0800ae44 	.word	0x0800ae44
 80052f4:	080097f8 	.word	0x080097f8
 80052f8:	f3af 8000 	nop.w
 80052fc:	f3af 8000 	nop.w

08005300 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 8005300:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8005302:	4c06      	ldr	r4, [pc, #24]	; (800531c <thread4a+0x1c>)
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8005304:	2064      	movs	r0, #100	; 0x64
 8005306:	f001 fedb 	bl	80070c0 <chThdSleep>
  chMtxLock(&m2);
 800530a:	4620      	mov	r0, r4
 800530c:	f001 ffc0 	bl	8007290 <chMtxLock>
  chMtxUnlock(&m2);
 8005310:	4620      	mov	r0, r4
 8005312:	f001 fd2d 	bl	8006d70 <chMtxUnlock>
  return 0;
}
 8005316:	2000      	movs	r0, #0
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	20000854 	.word	0x20000854

08005320 <thread4b>:

static msg_t thread4b(void *p) {
 8005320:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8005322:	4c06      	ldr	r4, [pc, #24]	; (800533c <thread4b+0x1c>)
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8005324:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005328:	f001 feca 	bl	80070c0 <chThdSleep>
  chMtxLock(&m1);
 800532c:	4620      	mov	r0, r4
 800532e:	f001 ffaf 	bl	8007290 <chMtxLock>
  chMtxUnlock(&m1);
 8005332:	4620      	mov	r0, r4
 8005334:	f001 fd1c 	bl	8006d70 <chMtxUnlock>
  return 0;
}
 8005338:	2000      	movs	r0, #0
 800533a:	bd10      	pop	{r4, pc}
 800533c:	20000844 	.word	0x20000844

08005340 <mtx1_execute.lto_priv.136>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 8005340:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005342:	4e29      	ldr	r6, [pc, #164]	; (80053e8 <mtx1_execute.lto_priv.136+0xa8>)
 8005344:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005346:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8005348:	4828      	ldr	r0, [pc, #160]	; (80053ec <mtx1_execute.lto_priv.136+0xac>)
 800534a:	689c      	ldr	r4, [r3, #8]
 800534c:	f001 ffa0 	bl	8007290 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005350:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <mtx1_execute.lto_priv.136+0xb0>)
 8005352:	1c62      	adds	r2, r4, #1
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800535a:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <mtx1_execute.lto_priv.136+0xb4>)
 800535c:	4826      	ldr	r0, [pc, #152]	; (80053f8 <mtx1_execute.lto_priv.136+0xb8>)
 800535e:	f001 fd9f 	bl	8006ea0 <chThdCreateStatic>
 8005362:	4d26      	ldr	r5, [pc, #152]	; (80053fc <mtx1_execute.lto_priv.136+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <mtx1_execute.lto_priv.136+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005366:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005368:	1ca2      	adds	r2, r4, #2
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <mtx1_execute.lto_priv.136+0xb4>)
 8005372:	4824      	ldr	r0, [pc, #144]	; (8005404 <mtx1_execute.lto_priv.136+0xc4>)
 8005374:	f001 fd94 	bl	8006ea0 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <mtx1_execute.lto_priv.136+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800537a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800537c:	1ce2      	adds	r2, r4, #3
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <mtx1_execute.lto_priv.136+0xb4>)
 8005386:	4821      	ldr	r0, [pc, #132]	; (800540c <mtx1_execute.lto_priv.136+0xcc>)
 8005388:	f001 fd8a 	bl	8006ea0 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 800538c:	4b20      	ldr	r3, [pc, #128]	; (8005410 <mtx1_execute.lto_priv.136+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 800538e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005390:	1d22      	adds	r2, r4, #4
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <mtx1_execute.lto_priv.136+0xb4>)
 800539a:	481e      	ldr	r0, [pc, #120]	; (8005414 <mtx1_execute.lto_priv.136+0xd4>)
 800539c:	f001 fd80 	bl	8006ea0 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <mtx1_execute.lto_priv.136+0xd8>)
 80053a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80053a6:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80053a8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	481b      	ldr	r0, [pc, #108]	; (800541c <mtx1_execute.lto_priv.136+0xdc>)
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <mtx1_execute.lto_priv.136+0xb4>)
 80053b0:	f001 fd76 	bl	8006ea0 <chThdCreateStatic>
 80053b4:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 80053b6:	480d      	ldr	r0, [pc, #52]	; (80053ec <mtx1_execute.lto_priv.136+0xac>)
 80053b8:	f001 fcda 	bl	8006d70 <chMtxUnlock>
  test_wait_threads();
 80053bc:	f000 fc48 	bl	8005c50 <test_wait_threads>
 80053c0:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 80053c2:	2001      	movs	r0, #1
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	1a61      	subs	r1, r4, r1
 80053c8:	fab1 f181 	clz	r1, r1
 80053cc:	0949      	lsrs	r1, r1, #5
 80053ce:	f000 fdc7 	bl	8005f60 <_test_assert>
 80053d2:	b108      	cbz	r0, 80053d8 <mtx1_execute.lto_priv.136+0x98>
  test_assert_sequence(2, "ABCDE");
}
 80053d4:	b002      	add	sp, #8
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80053d8:	4911      	ldr	r1, [pc, #68]	; (8005420 <mtx1_execute.lto_priv.136+0xe0>)
 80053da:	2002      	movs	r0, #2
}
 80053dc:	b002      	add	sp, #8
 80053de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 80053e2:	f000 bc85 	b.w	8005cf0 <_test_assert_sequence>
 80053e6:	bf00      	nop
 80053e8:	20001e40 	.word	0x20001e40
 80053ec:	20000844 	.word	0x20000844
 80053f0:	0800a0c8 	.word	0x0800a0c8
 80053f4:	08005431 	.word	0x08005431
 80053f8:	200017c8 	.word	0x200017c8
 80053fc:	20001710 	.word	0x20001710
 8005400:	0800ae44 	.word	0x0800ae44
 8005404:	20001910 	.word	0x20001910
 8005408:	080097f8 	.word	0x080097f8
 800540c:	20001a58 	.word	0x20001a58
 8005410:	080097f4 	.word	0x080097f4
 8005414:	20001ba0 	.word	0x20001ba0
 8005418:	080097f0 	.word	0x080097f0
 800541c:	20001ce8 	.word	0x20001ce8
 8005420:	0800a0c4 	.word	0x0800a0c4
 8005424:	f3af 8000 	nop.w
 8005428:	f3af 8000 	nop.w
 800542c:	f3af 8000 	nop.w

08005430 <thread1.lto_priv.123>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8005434:	4c05      	ldr	r4, [pc, #20]	; (800544c <thread1.lto_priv.123+0x1c>)
 8005436:	4620      	mov	r0, r4
 8005438:	f001 ff2a 	bl	8007290 <chMtxLock>
  test_emit_token(*(char *)p);
 800543c:	7828      	ldrb	r0, [r5, #0]
 800543e:	f000 fda7 	bl	8005f90 <test_emit_token>
  chMtxUnlock(&m1);
 8005442:	4620      	mov	r0, r4
 8005444:	f001 fc94 	bl	8006d70 <chMtxUnlock>
  return 0;
}
 8005448:	2000      	movs	r0, #0
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	20000844 	.word	0x20000844

08005450 <thread1.lto_priv.122>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 8005450:	b510      	push	{r4, lr}
 8005452:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8005454:	4803      	ldr	r0, [pc, #12]	; (8005464 <thread1.lto_priv.122+0x14>)
 8005456:	f001 fd7b 	bl	8006f50 <chSemWait>
  test_emit_token(*(char *)p);
 800545a:	7820      	ldrb	r0, [r4, #0]
 800545c:	f000 fd98 	bl	8005f90 <test_emit_token>
  return 0;
}
 8005460:	2000      	movs	r0, #0
 8005462:	bd10      	pop	{r4, pc}
 8005464:	20000cdc 	.word	0x20000cdc
 8005468:	f3af 8000 	nop.w
 800546c:	f3af 8000 	nop.w

08005470 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 8005470:	b508      	push	{r3, lr}
 8005472:	2220      	movs	r2, #32
 8005474:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8005478:	6883      	ldr	r3, [r0, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	dd05      	ble.n	800548a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800547e:	f001 fc1f 	bl	8006cc0 <chSchRescheduleS>
 8005482:	2000      	movs	r0, #0
 8005484:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 8005488:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800548a:	f001 ff11 	bl	80072b0 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800548e:	f001 fc17 	bl	8006cc0 <chSchRescheduleS>
 8005492:	2000      	movs	r0, #0
 8005494:	f380 8811 	msr	BASEPRI, r0
 8005498:	bd08      	pop	{r3, pc}
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 80054a0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 80054a2:	2064      	movs	r0, #100	; 0x64
 80054a4:	f001 fe0c 	bl	80070c0 <chThdSleep>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 80054ae:	4804      	ldr	r0, [pc, #16]	; (80054c0 <thread2+0x20>)
 80054b0:	f001 fefe 	bl	80072b0 <chSemSignalI>
  chSchRescheduleS();
 80054b4:	f001 fc04 	bl	8006cc0 <chSchRescheduleS>
 80054b8:	2000      	movs	r0, #0
 80054ba:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 80054be:	bd08      	pop	{r3, pc}
 80054c0:	20000cdc 	.word	0x20000cdc
 80054c4:	f3af 8000 	nop.w
 80054c8:	f3af 8000 	nop.w
 80054cc:	f3af 8000 	nop.w

080054d0 <sem4_execute.lto_priv.134>:

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}

static void sem4_execute(void) {
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80054d4:	ad03      	add	r5, sp, #12
 80054d6:	2400      	movs	r4, #0
 80054d8:	9504      	str	r5, [sp, #16]
 80054da:	9503      	str	r5, [sp, #12]
 80054dc:	9405      	str	r4, [sp, #20]
 80054de:	2620      	movs	r6, #32
 80054e0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80054e4:	4628      	mov	r0, r5
 80054e6:	4621      	mov	r1, r4
 80054e8:	f001 fefa 	bl	80072e0 <chSemResetI>
  chSchRescheduleS();
 80054ec:	f001 fbe8 	bl	8006cc0 <chSchRescheduleS>
 80054f0:	f384 8811 	msr	BASEPRI, r4
 80054f4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 80054f8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80054fa:	2001      	movs	r0, #1
 80054fc:	42a1      	cmp	r1, r4
 80054fe:	bfcc      	ite	gt
 8005500:	2100      	movgt	r1, #0
 8005502:	2101      	movle	r1, #1
 8005504:	f000 fd2c 	bl	8005f60 <_test_assert>
 8005508:	4607      	mov	r7, r0
 800550a:	b118      	cbz	r0, 8005514 <sem4_execute.lto_priv.134+0x44>
 800550c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8005510:	b007      	add	sp, #28
 8005512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005514:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005518:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <sem4_execute.lto_priv.134+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800551a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	483e      	ldr	r0, [pc, #248]	; (800561c <sem4_execute.lto_priv.134+0x14c>)
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	4b3e      	ldr	r3, [pc, #248]	; (8005620 <sem4_execute.lto_priv.134+0x150>)
 8005526:	3a01      	subs	r2, #1
 8005528:	9500      	str	r5, [sp, #0]
 800552a:	f001 fcb9 	bl	8006ea0 <chThdCreateStatic>
 800552e:	4b3d      	ldr	r3, [pc, #244]	; (8005624 <sem4_execute.lto_priv.134+0x154>)
 8005530:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8005532:	4628      	mov	r0, r5
 8005534:	f001 fd0c 	bl	8006f50 <chSemWait>
 8005538:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 800553c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800553e:	2002      	movs	r0, #2
 8005540:	2900      	cmp	r1, #0
 8005542:	bfcc      	ite	gt
 8005544:	2100      	movgt	r1, #0
 8005546:	2101      	movle	r1, #1
 8005548:	f000 fd0a 	bl	8005f60 <_test_assert>
 800554c:	b118      	cbz	r0, 8005556 <sem4_execute.lto_priv.134+0x86>
 800554e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8005552:	b007      	add	sp, #28
 8005554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005556:	f380 8811 	msr	BASEPRI, r0
 800555a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dd23      	ble.n	80055ac <sem4_execute.lto_priv.134+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8005564:	f001 fbac 	bl	8006cc0 <chSchRescheduleS>
 8005568:	2400      	movs	r4, #0
 800556a:	f384 8811 	msr	BASEPRI, r4
 800556e:	2720      	movs	r7, #32
 8005570:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8005574:	9905      	ldr	r1, [sp, #20]
 8005576:	2003      	movs	r0, #3
 8005578:	42a1      	cmp	r1, r4
 800557a:	bfd4      	ite	le
 800557c:	2100      	movle	r1, #0
 800557e:	2101      	movgt	r1, #1
 8005580:	f000 fcee 	bl	8005f60 <_test_assert>
 8005584:	4606      	mov	r6, r0
 8005586:	2800      	cmp	r0, #0
 8005588:	d1c0      	bne.n	800550c <sem4_execute.lto_priv.134+0x3c>
 800558a:	f380 8811 	msr	BASEPRI, r0
 800558e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8005592:	9905      	ldr	r1, [sp, #20]
 8005594:	2004      	movs	r0, #4
 8005596:	f1a1 0101 	sub.w	r1, r1, #1
 800559a:	fab1 f181 	clz	r1, r1
 800559e:	0949      	lsrs	r1, r1, #5
 80055a0:	f000 fcde 	bl	8005f60 <_test_assert>
 80055a4:	b130      	cbz	r0, 80055b4 <sem4_execute.lto_priv.134+0xe4>
 80055a6:	f386 8811 	msr	BASEPRI, r6
 80055aa:	e7b1      	b.n	8005510 <sem4_execute.lto_priv.134+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80055ac:	4628      	mov	r0, r5
 80055ae:	f001 fe7f 	bl	80072b0 <chSemSignalI>
 80055b2:	e7d7      	b.n	8005564 <sem4_execute.lto_priv.134+0x94>
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80055bc:	9b05      	ldr	r3, [sp, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dd23      	ble.n	800560a <sem4_execute.lto_priv.134+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80055c2:	f001 fb7d 	bl	8006cc0 <chSchRescheduleS>
 80055c6:	2400      	movs	r4, #0
 80055c8:	f384 8811 	msr	BASEPRI, r4
 80055cc:	2620      	movs	r6, #32
 80055ce:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80055d2:	9905      	ldr	r1, [sp, #20]
 80055d4:	2003      	movs	r0, #3
 80055d6:	42a1      	cmp	r1, r4
 80055d8:	bfd4      	ite	le
 80055da:	2100      	movle	r1, #0
 80055dc:	2101      	movgt	r1, #1
 80055de:	f000 fcbf 	bl	8005f60 <_test_assert>
 80055e2:	4605      	mov	r5, r0
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d191      	bne.n	800550c <sem4_execute.lto_priv.134+0x3c>
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80055f0:	9905      	ldr	r1, [sp, #20]
 80055f2:	2005      	movs	r0, #5
 80055f4:	f1a1 0101 	sub.w	r1, r1, #1
 80055f8:	fab1 f181 	clz	r1, r1
 80055fc:	0949      	lsrs	r1, r1, #5
 80055fe:	f000 fcaf 	bl	8005f60 <_test_assert>
 8005602:	b130      	cbz	r0, 8005612 <sem4_execute.lto_priv.134+0x142>
 8005604:	f385 8811 	msr	BASEPRI, r5
 8005608:	e782      	b.n	8005510 <sem4_execute.lto_priv.134+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800560a:	4628      	mov	r0, r5
 800560c:	f001 fe50 	bl	80072b0 <chSemSignalI>
 8005610:	e7d7      	b.n	80055c2 <sem4_execute.lto_priv.134+0xf2>
 8005612:	f380 8811 	msr	BASEPRI, r0
 8005616:	e77b      	b.n	8005510 <sem4_execute.lto_priv.134+0x40>
 8005618:	20001e40 	.word	0x20001e40
 800561c:	200017c8 	.word	0x200017c8
 8005620:	08005471 	.word	0x08005471
 8005624:	20001710 	.word	0x20001710
 8005628:	f3af 8000 	nop.w
 800562c:	f3af 8000 	nop.w

08005630 <sem3_execute.lto_priv.133>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8005630:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005632:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <sem3_execute.lto_priv.133+0x7c>)
 8005634:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005636:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005638:	2300      	movs	r3, #0
 800563a:	6892      	ldr	r2, [r2, #8]
 800563c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005640:	3201      	adds	r2, #1
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	481a      	ldr	r0, [pc, #104]	; (80056b0 <sem3_execute.lto_priv.133+0x80>)
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <sem3_execute.lto_priv.133+0x84>)
 8005648:	f001 fc2a 	bl	8006ea0 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 800564c:	4c1a      	ldr	r4, [pc, #104]	; (80056b8 <sem3_execute.lto_priv.133+0x88>)
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <sem3_execute.lto_priv.133+0x8c>)
 8005650:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8005652:	f003 fcb5 	bl	8008fc0 <chSemSignalWait.constprop.56>
 8005656:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8005658:	2001      	movs	r0, #1
 800565a:	1b09      	subs	r1, r1, r4
 800565c:	fab1 f181 	clz	r1, r1
 8005660:	0949      	lsrs	r1, r1, #5
 8005662:	f000 fc7d 	bl	8005f60 <_test_assert>
 8005666:	b108      	cbz	r0, 800566c <sem3_execute.lto_priv.133+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8005668:	b002      	add	sp, #8
 800566a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800566c:	68a1      	ldr	r1, [r4, #8]
 800566e:	2002      	movs	r0, #2
 8005670:	fab1 f181 	clz	r1, r1
 8005674:	0949      	lsrs	r1, r1, #5
 8005676:	f000 fc73 	bl	8005f60 <_test_assert>
 800567a:	2800      	cmp	r0, #0
 800567c:	d1f4      	bne.n	8005668 <sem3_execute.lto_priv.133+0x38>

  chSemSignalWait(&sem1, &sem1);
 800567e:	f003 fc9f 	bl	8008fc0 <chSemSignalWait.constprop.56>
 8005682:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8005684:	2003      	movs	r0, #3
 8005686:	1b09      	subs	r1, r1, r4
 8005688:	fab1 f181 	clz	r1, r1
 800568c:	0949      	lsrs	r1, r1, #5
 800568e:	f000 fc67 	bl	8005f60 <_test_assert>
 8005692:	2800      	cmp	r0, #0
 8005694:	d1e8      	bne.n	8005668 <sem3_execute.lto_priv.133+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8005696:	68a1      	ldr	r1, [r4, #8]
 8005698:	2004      	movs	r0, #4
 800569a:	fab1 f181 	clz	r1, r1
 800569e:	0949      	lsrs	r1, r1, #5
}
 80056a0:	b002      	add	sp, #8
 80056a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80056a6:	f000 bc5b 	b.w	8005f60 <_test_assert>
 80056aa:	bf00      	nop
 80056ac:	20001e40 	.word	0x20001e40
 80056b0:	200017c8 	.word	0x200017c8
 80056b4:	080056c1 	.word	0x080056c1
 80056b8:	20000cdc 	.word	0x20000cdc
 80056bc:	20001710 	.word	0x20001710

080056c0 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 80056c0:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 80056c2:	4c04      	ldr	r4, [pc, #16]	; (80056d4 <thread3+0x14>)
 80056c4:	4620      	mov	r0, r4
 80056c6:	f001 fc43 	bl	8006f50 <chSemWait>
  chSemSignal(&sem1);
 80056ca:	4620      	mov	r0, r4
 80056cc:	f001 fb80 	bl	8006dd0 <chSemSignal>
  return 0;
}
 80056d0:	2000      	movs	r0, #0
 80056d2:	bd10      	pop	{r4, pc}
 80056d4:	20000cdc 	.word	0x20000cdc
 80056d8:	f3af 8000 	nop.w
 80056dc:	f3af 8000 	nop.w

080056e0 <sem2_execute.lto_priv.131>:
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 80056e0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80056e2:	4c4e      	ldr	r4, [pc, #312]	; (800581c <sem2_execute.lto_priv.131+0x13c>)
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 80056e4:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80056e6:	2100      	movs	r1, #0
 80056e8:	4620      	mov	r0, r4
 80056ea:	f001 fcc1 	bl	8007070 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80056ee:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 80056f2:	fab1 f181 	clz	r1, r1
 80056f6:	2001      	movs	r0, #1
 80056f8:	0949      	lsrs	r1, r1, #5
 80056fa:	f000 fc31 	bl	8005f60 <_test_assert>
 80056fe:	b108      	cbz	r0, 8005704 <sem2_execute.lto_priv.131+0x24>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8005700:	b002      	add	sp, #8
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8005706:	2002      	movs	r0, #2
 8005708:	1b09      	subs	r1, r1, r4
 800570a:	fab1 f181 	clz	r1, r1
 800570e:	0949      	lsrs	r1, r1, #5
 8005710:	f000 fc26 	bl	8005f60 <_test_assert>
 8005714:	2800      	cmp	r0, #0
 8005716:	d1f3      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8005718:	68a1      	ldr	r1, [r4, #8]
 800571a:	2003      	movs	r0, #3
 800571c:	fab1 f181 	clz	r1, r1
 8005720:	0949      	lsrs	r1, r1, #5
 8005722:	f000 fc1d 	bl	8005f60 <_test_assert>
 8005726:	4605      	mov	r5, r0
 8005728:	2800      	cmp	r0, #0
 800572a:	d1e9      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800572c:	4b3c      	ldr	r3, [pc, #240]	; (8005820 <sem2_execute.lto_priv.131+0x140>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800572e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	483b      	ldr	r0, [pc, #236]	; (8005824 <sem2_execute.lto_priv.131+0x144>)
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	4b3b      	ldr	r3, [pc, #236]	; (8005828 <sem2_execute.lto_priv.131+0x148>)
 800573a:	3a01      	subs	r2, #1
 800573c:	9500      	str	r5, [sp, #0]
 800573e:	f001 fbaf 	bl	8006ea0 <chThdCreateStatic>
 8005742:	4b3a      	ldr	r3, [pc, #232]	; (800582c <sem2_execute.lto_priv.131+0x14c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8005744:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8005748:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800574a:	4620      	mov	r0, r4
 800574c:	f001 fc90 	bl	8007070 <chSemWaitTimeout>
 8005750:	4605      	mov	r5, r0
  test_wait_threads();
 8005752:	f000 fa7d 	bl	8005c50 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8005756:	fab5 f185 	clz	r1, r5
 800575a:	2004      	movs	r0, #4
 800575c:	0949      	lsrs	r1, r1, #5
 800575e:	f000 fbff 	bl	8005f60 <_test_assert>
 8005762:	2800      	cmp	r0, #0
 8005764:	d1cc      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
 8005766:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8005768:	2005      	movs	r0, #5
 800576a:	1b09      	subs	r1, r1, r4
 800576c:	fab1 f181 	clz	r1, r1
 8005770:	0949      	lsrs	r1, r1, #5
 8005772:	f000 fbf5 	bl	8005f60 <_test_assert>
 8005776:	2800      	cmp	r0, #0
 8005778:	d1c2      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 800577a:	68a1      	ldr	r1, [r4, #8]
 800577c:	2006      	movs	r0, #6
 800577e:	fab1 f181 	clz	r1, r1
 8005782:	0949      	lsrs	r1, r1, #5
 8005784:	f000 fbec 	bl	8005f60 <_test_assert>
 8005788:	4605      	mov	r5, r0
 800578a:	2800      	cmp	r0, #0
 800578c:	d1b8      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 800578e:	f000 fa4f 	bl	8005c30 <test_wait_tick>
 8005792:	2320      	movs	r3, #32
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800579c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800579e:	f385 8811 	msr	BASEPRI, r5
 80057a2:	2541      	movs	r5, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 fbf3 	bl	8005f90 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 80057aa:	2164      	movs	r1, #100	; 0x64
 80057ac:	481b      	ldr	r0, [pc, #108]	; (800581c <sem2_execute.lto_priv.131+0x13c>)
 80057ae:	f001 fc5f 	bl	8007070 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 80057b2:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 80057b6:	fab1 f181 	clz	r1, r1
 80057ba:	2007      	movs	r0, #7
 80057bc:	0949      	lsrs	r1, r1, #5
 80057be:	f000 fbcf 	bl	8005f60 <_test_assert>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d19c      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
 80057c6:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80057c8:	2008      	movs	r0, #8
 80057ca:	1b09      	subs	r1, r1, r4
 80057cc:	fab1 f181 	clz	r1, r1
 80057d0:	0949      	lsrs	r1, r1, #5
 80057d2:	f000 fbc5 	bl	8005f60 <_test_assert>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d192      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80057da:	68a1      	ldr	r1, [r4, #8]
 80057dc:	2009      	movs	r0, #9
 80057de:	fab1 f181 	clz	r1, r1
 80057e2:	0949      	lsrs	r1, r1, #5
 80057e4:	f000 fbbc 	bl	8005f60 <_test_assert>
 80057e8:	3501      	adds	r5, #1
 80057ea:	b2ed      	uxtb	r5, r5
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d187      	bne.n	8005700 <sem2_execute.lto_priv.131+0x20>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80057f0:	2d46      	cmp	r5, #70	; 0x46
 80057f2:	d1d7      	bne.n	80057a4 <sem2_execute.lto_priv.131+0xc4>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80057f4:	200a      	movs	r0, #10
 80057f6:	490e      	ldr	r1, [pc, #56]	; (8005830 <sem2_execute.lto_priv.131+0x150>)
 80057f8:	f000 fa7a 	bl	8005cf0 <_test_assert_sequence>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f47f af7f 	bne.w	8005700 <sem2_execute.lto_priv.131+0x20>
 8005802:	b2b6      	uxth	r6, r6

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8005804:	f506 71fa 	add.w	r1, r6, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8005808:	f506 72fc 	add.w	r2, r6, #504	; 0x1f8
 800580c:	b289      	uxth	r1, r1
 800580e:	b292      	uxth	r2, r2
 8005810:	200b      	movs	r0, #11
}
 8005812:	b002      	add	sp, #8
 8005814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8005818:	f000 ba4a 	b.w	8005cb0 <_test_assert_time_window>
 800581c:	20000cdc 	.word	0x20000cdc
 8005820:	20001e40 	.word	0x20001e40
 8005824:	200017c8 	.word	0x200017c8
 8005828:	080054a1 	.word	0x080054a1
 800582c:	20001710 	.word	0x20001710
 8005830:	0800a0c4 	.word	0x0800a0c4
 8005834:	f3af 8000 	nop.w
 8005838:	f3af 8000 	nop.w
 800583c:	f3af 8000 	nop.w

08005840 <sem1_execute.lto_priv.129>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8005840:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005842:	4d4b      	ldr	r5, [pc, #300]	; (8005970 <sem1_execute.lto_priv.129+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005844:	4f4b      	ldr	r7, [pc, #300]	; (8005974 <sem1_execute.lto_priv.129+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005846:	69ab      	ldr	r3, [r5, #24]
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8005848:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005850:	3205      	adds	r2, #5
 8005852:	4b49      	ldr	r3, [pc, #292]	; (8005978 <sem1_execute.lto_priv.129+0x138>)
 8005854:	4849      	ldr	r0, [pc, #292]	; (800597c <sem1_execute.lto_priv.129+0x13c>)
 8005856:	9700      	str	r7, [sp, #0]
 8005858:	f001 fb22 	bl	8006ea0 <chThdCreateStatic>
 800585c:	69ab      	ldr	r3, [r5, #24]
 800585e:	4c48      	ldr	r4, [pc, #288]	; (8005980 <sem1_execute.lto_priv.129+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	4b48      	ldr	r3, [pc, #288]	; (8005984 <sem1_execute.lto_priv.129+0x144>)
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8005864:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005866:	3201      	adds	r2, #1
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800586e:	4b42      	ldr	r3, [pc, #264]	; (8005978 <sem1_execute.lto_priv.129+0x138>)
 8005870:	4845      	ldr	r0, [pc, #276]	; (8005988 <sem1_execute.lto_priv.129+0x148>)
 8005872:	f001 fb15 	bl	8006ea0 <chThdCreateStatic>
 8005876:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005878:	4b44      	ldr	r3, [pc, #272]	; (800598c <sem1_execute.lto_priv.129+0x14c>)
 800587a:	6892      	ldr	r2, [r2, #8]
 800587c:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005880:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005882:	3203      	adds	r2, #3
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	4842      	ldr	r0, [pc, #264]	; (8005990 <sem1_execute.lto_priv.129+0x150>)
 8005888:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <sem1_execute.lto_priv.129+0x138>)
 800588a:	f001 fb09 	bl	8006ea0 <chThdCreateStatic>
 800588e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005890:	4b40      	ldr	r3, [pc, #256]	; (8005994 <sem1_execute.lto_priv.129+0x154>)
 8005892:	6892      	ldr	r2, [r2, #8]
 8005894:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005898:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800589a:	3204      	adds	r2, #4
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	483e      	ldr	r0, [pc, #248]	; (8005998 <sem1_execute.lto_priv.129+0x158>)
 80058a0:	4b35      	ldr	r3, [pc, #212]	; (8005978 <sem1_execute.lto_priv.129+0x138>)
 80058a2:	f001 fafd 	bl	8006ea0 <chThdCreateStatic>
 80058a6:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80058a8:	4b3c      	ldr	r3, [pc, #240]	; (800599c <sem1_execute.lto_priv.129+0x15c>)
 80058aa:	6892      	ldr	r2, [r2, #8]
 80058ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058b0:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80058b2:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	483a      	ldr	r0, [pc, #232]	; (80059a0 <sem1_execute.lto_priv.129+0x160>)
 80058b8:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <sem1_execute.lto_priv.129+0x138>)
 80058ba:	f001 faf1 	bl	8006ea0 <chThdCreateStatic>
 80058be:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 80058c0:	4838      	ldr	r0, [pc, #224]	; (80059a4 <sem1_execute.lto_priv.129+0x164>)
 80058c2:	f001 fa85 	bl	8006dd0 <chSemSignal>
  chSemSignal(&sem1);
 80058c6:	4837      	ldr	r0, [pc, #220]	; (80059a4 <sem1_execute.lto_priv.129+0x164>)
 80058c8:	f001 fa82 	bl	8006dd0 <chSemSignal>
  chSemSignal(&sem1);
 80058cc:	4835      	ldr	r0, [pc, #212]	; (80059a4 <sem1_execute.lto_priv.129+0x164>)
 80058ce:	f001 fa7f 	bl	8006dd0 <chSemSignal>
  chSemSignal(&sem1);
 80058d2:	4834      	ldr	r0, [pc, #208]	; (80059a4 <sem1_execute.lto_priv.129+0x164>)
 80058d4:	f001 fa7c 	bl	8006dd0 <chSemSignal>
  chSemSignal(&sem1);
 80058d8:	4832      	ldr	r0, [pc, #200]	; (80059a4 <sem1_execute.lto_priv.129+0x164>)
 80058da:	f001 fa79 	bl	8006dd0 <chSemSignal>
  test_wait_threads();
 80058de:	f000 f9b7 	bl	8005c50 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 80058e2:	2001      	movs	r0, #1
 80058e4:	4930      	ldr	r1, [pc, #192]	; (80059a8 <sem1_execute.lto_priv.129+0x168>)
 80058e6:	f000 fa03 	bl	8005cf0 <_test_assert_sequence>
 80058ea:	4606      	mov	r6, r0
 80058ec:	b108      	cbz	r0, 80058f2 <sem1_execute.lto_priv.129+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 80058ee:	b003      	add	sp, #12
 80058f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f2:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80058f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	4820      	ldr	r0, [pc, #128]	; (800597c <sem1_execute.lto_priv.129+0x13c>)
 80058fc:	3205      	adds	r2, #5
 80058fe:	9700      	str	r7, [sp, #0]
 8005900:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <sem1_execute.lto_priv.129+0x138>)
 8005902:	f001 facd 	bl	8006ea0 <chThdCreateStatic>
 8005906:	2320      	movs	r3, #32
 8005908:	6020      	str	r0, [r4, #0]
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	4c25      	ldr	r4, [pc, #148]	; (80059a4 <sem1_execute.lto_priv.129+0x164>)
 8005910:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0)
 8005912:	4627      	mov	r7, r4
 8005914:	e002      	b.n	800591c <sem1_execute.lto_priv.129+0xdc>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8005916:	2d01      	cmp	r5, #1
 8005918:	d00e      	beq.n	8005938 <sem1_execute.lto_priv.129+0xf8>
 800591a:	2501      	movs	r5, #1
    if (++sp->s_cnt <= 0)
 800591c:	68a3      	ldr	r3, [r4, #8]
 800591e:	3301      	adds	r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	60a3      	str	r3, [r4, #8]
 8005924:	dcf7      	bgt.n	8005916 <sem1_execute.lto_priv.129+0xd6>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005926:	6838      	ldr	r0, [r7, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005928:	6803      	ldr	r3, [r0, #0]
 800592a:	605f      	str	r7, [r3, #4]
 800592c:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 800592e:	f001 fbd7 	bl	80070e0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8005932:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= 0)
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8005934:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8005936:	d1f0      	bne.n	800591a <sem1_execute.lto_priv.129+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8005938:	f001 f9c2 	bl	8006cc0 <chSchRescheduleS>
 800593c:	2500      	movs	r5, #0
 800593e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8005942:	f000 f985 	bl	8005c50 <test_wait_threads>
 8005946:	2320      	movs	r3, #32
 8005948:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 800594c:	68a1      	ldr	r1, [r4, #8]
 800594e:	2002      	movs	r0, #2
 8005950:	f1a1 0101 	sub.w	r1, r1, #1
 8005954:	fab1 f181 	clz	r1, r1
 8005958:	0949      	lsrs	r1, r1, #5
 800595a:	f000 fb01 	bl	8005f60 <_test_assert>
 800595e:	b918      	cbnz	r0, 8005968 <sem1_execute.lto_priv.129+0x128>
 8005960:	f380 8811 	msr	BASEPRI, r0
}
 8005964:	b003      	add	sp, #12
 8005966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005968:	f385 8811 	msr	BASEPRI, r5
 800596c:	b003      	add	sp, #12
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005970:	20001e40 	.word	0x20001e40
 8005974:	080097f0 	.word	0x080097f0
 8005978:	08005451 	.word	0x08005451
 800597c:	200017c8 	.word	0x200017c8
 8005980:	20001710 	.word	0x20001710
 8005984:	080097f4 	.word	0x080097f4
 8005988:	20001910 	.word	0x20001910
 800598c:	080097f8 	.word	0x080097f8
 8005990:	20001a58 	.word	0x20001a58
 8005994:	0800ae44 	.word	0x0800ae44
 8005998:	20001ba0 	.word	0x20001ba0
 800599c:	0800a0c8 	.word	0x0800a0c8
 80059a0:	20001ce8 	.word	0x20001ce8
 80059a4:	20000cdc 	.word	0x20000cdc
 80059a8:	0800a0c4 	.word	0x0800a0c4
 80059ac:	f3af 8000 	nop.w

080059b0 <thd4_execute.lto_priv.127>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 80059b2:	f000 f93d 	bl	8005c30 <test_wait_tick>
 80059b6:	2620      	movs	r6, #32
 80059b8:	f386 8811 	msr	BASEPRI, r6
 80059bc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80059c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80059c2:	2300      	movs	r3, #0
 80059c4:	b2a4      	uxth	r4, r4
 80059c6:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 80059ca:	20c8      	movs	r0, #200	; 0xc8
 80059cc:	f001 fb78 	bl	80070c0 <chThdSleep>
  test_assert_time_window(1,
 80059d0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80059d4:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 80059d8:	b289      	uxth	r1, r1
 80059da:	b292      	uxth	r2, r2
 80059dc:	2001      	movs	r0, #1
 80059de:	f000 f967 	bl	8005cb0 <_test_assert_time_window>
 80059e2:	b100      	cbz	r0, 80059e6 <thd4_execute.lto_priv.127+0x36>
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e6:	f386 8811 	msr	BASEPRI, r6
 80059ea:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80059ec:	b2a4      	uxth	r4, r4
 80059ee:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 80059f2:	20c8      	movs	r0, #200	; 0xc8
 80059f4:	f001 fb64 	bl	80070c0 <chThdSleep>
  test_assert_time_window(2,
 80059f8:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80059fc:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8005a00:	b289      	uxth	r1, r1
 8005a02:	b292      	uxth	r2, r2
 8005a04:	2002      	movs	r0, #2
 8005a06:	f000 f953 	bl	8005cb0 <_test_assert_time_window>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d1ea      	bne.n	80059e4 <thd4_execute.lto_priv.127+0x34>
 8005a0e:	f386 8811 	msr	BASEPRI, r6
 8005a12:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005a14:	b2a4      	uxth	r4, r4
 8005a16:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 8005a1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a1e:	f001 fb4f 	bl	80070c0 <chThdSleep>
  test_assert_time_window(3,
 8005a22:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8005a26:	f204 72d2 	addw	r2, r4, #2002	; 0x7d2
 8005a2a:	b289      	uxth	r1, r1
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	2003      	movs	r0, #3
 8005a30:	f000 f93e 	bl	8005cb0 <_test_assert_time_window>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1d5      	bne.n	80059e4 <thd4_execute.lto_priv.127+0x34>
 8005a38:	f386 8811 	msr	BASEPRI, r6
 8005a3c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8005a3e:	b2a4      	uxth	r4, r4
 8005a40:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8005a44:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
 8005a48:	b2bf      	uxth	r7, r7
 8005a4a:	f386 8811 	msr	BASEPRI, r6
 8005a4e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0)
 8005a50:	1a79      	subs	r1, r7, r1
 8005a52:	b289      	uxth	r1, r1
 8005a54:	b111      	cbz	r1, 8005a5c <thd4_execute.lto_priv.127+0xac>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8005a56:	2008      	movs	r0, #8
 8005a58:	f001 fac2 	bl	8006fe0 <chSchGoSleepTimeoutS>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8005a62:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8005a66:	4639      	mov	r1, r7
                          time,
                          time + CH_CFG_ST_TIMEDELTA);
}
 8005a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	2004      	movs	r0, #4
 8005a70:	f000 b91e 	b.w	8005cb0 <_test_assert_time_window>
 8005a74:	f3af 8000 	nop.w
 8005a78:	f3af 8000 	nop.w
 8005a7c:	f3af 8000 	nop.w

08005a80 <thd3_execute.lto_priv.126>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005a82:	4e49      	ldr	r6, [pc, #292]	; (8005ba8 <thd3_execute.lto_priv.126+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005a84:	69b3      	ldr	r3, [r6, #24]
 8005a86:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8005a88:	1c65      	adds	r5, r4, #1
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f001 f928 	bl	8006ce0 <chThdSetPriority>
 8005a90:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8005a92:	1b39      	subs	r1, r7, r4
 8005a94:	fab1 f181 	clz	r1, r1
 8005a98:	2001      	movs	r0, #1
 8005a9a:	0949      	lsrs	r1, r1, #5
 8005a9c:	f000 fa60 	bl	8005f60 <_test_assert>
 8005aa0:	b100      	cbz	r0, 8005aa4 <thd3_execute.lto_priv.126+0x24>
 8005aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa4:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8005aa6:	2002      	movs	r0, #2
 8005aa8:	6899      	ldr	r1, [r3, #8]
 8005aaa:	1a69      	subs	r1, r5, r1
 8005aac:	fab1 f181 	clz	r1, r1
 8005ab0:	0949      	lsrs	r1, r1, #5
 8005ab2:	f000 fa55 	bl	8005f60 <_test_assert>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d1f3      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8005aba:	4638      	mov	r0, r7
 8005abc:	f001 f910 	bl	8006ce0 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 8005ac0:	1a29      	subs	r1, r5, r0
 8005ac2:	fab1 f181 	clz	r1, r1
 8005ac6:	2003      	movs	r0, #3
 8005ac8:	0949      	lsrs	r1, r1, #5
 8005aca:	f000 fa49 	bl	8005f60 <_test_assert>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d1e7      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
 8005ad2:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8005ad4:	2004      	movs	r0, #4
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	1a61      	subs	r1, r4, r1
 8005ada:	fab1 f181 	clz	r1, r1
 8005ade:	0949      	lsrs	r1, r1, #5
 8005ae0:	f000 fa3e 	bl	8005f60 <_test_assert>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1dc      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
 8005ae8:	2320      	movs	r3, #32
 8005aea:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005aee:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8005af0:	6893      	ldr	r3, [r2, #8]
 8005af2:	3302      	adds	r3, #2
 8005af4:	6093      	str	r3, [r2, #8]
 8005af6:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005afa:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8005afc:	1ca7      	adds	r7, r4, #2
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	2005      	movs	r0, #5
 8005b02:	1a79      	subs	r1, r7, r1
 8005b04:	fab1 f181 	clz	r1, r1
 8005b08:	0949      	lsrs	r1, r1, #5
 8005b0a:	f000 fa29 	bl	8005f60 <_test_assert>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d1c7      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8005b12:	4628      	mov	r0, r5
 8005b14:	f001 f8e4 	bl	8006ce0 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8005b18:	1b01      	subs	r1, r0, r4
 8005b1a:	fab1 f181 	clz	r1, r1
 8005b1e:	2006      	movs	r0, #6
 8005b20:	0949      	lsrs	r1, r1, #5
 8005b22:	f000 fa1d 	bl	8005f60 <_test_assert>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d1bb      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8005b2a:	69b3      	ldr	r3, [r6, #24]
 8005b2c:	2007      	movs	r0, #7
 8005b2e:	6899      	ldr	r1, [r3, #8]
 8005b30:	1a79      	subs	r1, r7, r1
 8005b32:	fab1 f181 	clz	r1, r1
 8005b36:	0949      	lsrs	r1, r1, #5
 8005b38:	f000 fa12 	bl	8005f60 <_test_assert>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d1b0      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8005b40:	69b3      	ldr	r3, [r6, #24]
 8005b42:	2008      	movs	r0, #8
 8005b44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b46:	1a69      	subs	r1, r5, r1
 8005b48:	fab1 f181 	clz	r1, r1
 8005b4c:	0949      	lsrs	r1, r1, #5
 8005b4e:	f000 fa07 	bl	8005f60 <_test_assert>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d1a5      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8005b56:	1ce7      	adds	r7, r4, #3
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f001 f8c1 	bl	8006ce0 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 8005b5e:	1a28      	subs	r0, r5, r0
 8005b60:	4241      	negs	r1, r0
 8005b62:	4141      	adcs	r1, r0
 8005b64:	2009      	movs	r0, #9
 8005b66:	f000 f9fb 	bl	8005f60 <_test_assert>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d199      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8005b6e:	69b3      	ldr	r3, [r6, #24]
 8005b70:	200a      	movs	r0, #10
 8005b72:	6899      	ldr	r1, [r3, #8]
 8005b74:	1a7a      	subs	r2, r7, r1
 8005b76:	4251      	negs	r1, r2
 8005b78:	4151      	adcs	r1, r2
 8005b7a:	f000 f9f1 	bl	8005f60 <_test_assert>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d18f      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8005b82:	69b3      	ldr	r3, [r6, #24]
 8005b84:	200b      	movs	r0, #11
 8005b86:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b88:	1a7b      	subs	r3, r7, r1
 8005b8a:	4259      	negs	r1, r3
 8005b8c:	4159      	adcs	r1, r3
 8005b8e:	f000 f9e7 	bl	8005f60 <_test_assert>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d185      	bne.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
 8005b96:	2320      	movs	r3, #32
 8005b98:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005b9c:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8005b9e:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 8005ba0:	63dc      	str	r4, [r3, #60]	; 0x3c
 8005ba2:	f380 8811 	msr	BASEPRI, r0
 8005ba6:	e77c      	b.n	8005aa2 <thd3_execute.lto_priv.126+0x22>
 8005ba8:	20001e40 	.word	0x20001e40
 8005bac:	f3af 8000 	nop.w

08005bb0 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4e09      	ldr	r6, [pc, #36]	; (8005bd8 <print_line+0x28>)
 8005bb4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8005bb6:	6830      	ldr	r0, [r6, #0]
 8005bb8:	212d      	movs	r1, #45	; 0x2d
 8005bba:	6803      	ldr	r3, [r0, #0]
 8005bbc:	4d06      	ldr	r5, [pc, #24]	; (8005bd8 <print_line+0x28>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8005bc2:	3c01      	subs	r4, #1
 8005bc4:	d1f7      	bne.n	8005bb6 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005bc6:	6828      	ldr	r0, [r5, #0]
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <print_line+0x2c>)
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005bd4:	4718      	bx	r3
 8005bd6:	bf00      	nop
 8005bd8:	2000173c 	.word	0x2000173c
 8005bdc:	08009c38 	.word	0x08009c38

08005be0 <tmr.lto_priv.73>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8005be0:	4b01      	ldr	r3, [pc, #4]	; (8005be8 <tmr.lto_priv.73+0x8>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	4770      	bx	lr
 8005be8:	20001f90 	.word	0x20001f90
 8005bec:	f3af 8000 	nop.w

08005bf0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8005bf0:	b410      	push	{r4}
 8005bf2:	2320      	movs	r3, #32
 8005bf4:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
 8005bf8:	4c09      	ldr	r4, [pc, #36]	; (8005c20 <chCoreAlloc+0x30>)
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <chCoreAlloc+0x34>)
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8005c00:	1dc3      	adds	r3, r0, #7
 8005c02:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size)
 8005c06:	1a89      	subs	r1, r1, r2
 8005c08:	428b      	cmp	r3, r1
    return NULL;
  p = nextmem;
  nextmem += size;
 8005c0a:	bf9d      	ittte	ls
 8005c0c:	189b      	addls	r3, r3, r2
 8005c0e:	6023      	strls	r3, [r4, #0]
  return p;
 8005c10:	4610      	movls	r0, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
    return NULL;
 8005c12:	2000      	movhi	r0, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();
  return p;
}
 8005c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20000d34 	.word	0x20000d34
 8005c24:	20000d30 	.word	0x20000d30
 8005c28:	f3af 8000 	nop.w
 8005c2c:	f3af 8000 	nop.w

08005c30 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8005c30:	b508      	push	{r3, lr}

  chThdSleep(1);
 8005c32:	2001      	movs	r0, #1
 8005c34:	f001 fa44 	bl	80070c0 <chThdSleep>
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005c44:	2300      	movs	r3, #0
 8005c46:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8005c4a:	b280      	uxth	r0, r0
 8005c4c:	bd08      	pop	{r3, pc}
 8005c4e:	bf00      	nop

08005c50 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4c07      	ldr	r4, [pc, #28]	; (8005c70 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8005c54:	2600      	movs	r6, #0
 8005c56:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8005c5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8005c5e:	b118      	cbz	r0, 8005c68 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8005c60:	f001 f99e 	bl	8006fa0 <chThdWait>
      threads[i] = NULL;
 8005c64:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8005c68:	42ac      	cmp	r4, r5
 8005c6a:	d1f6      	bne.n	8005c5a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	bf00      	nop
 8005c70:	20001710 	.word	0x20001710
 8005c74:	f3af 8000 	nop.w
 8005c78:	f3af 8000 	nop.w
 8005c7c:	f3af 8000 	nop.w

08005c80 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8005c80:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <test_terminate_threads+0x2c>)
 8005c82:	b430      	push	{r4, r5}
 8005c84:	f103 0014 	add.w	r0, r3, #20
 8005c88:	2520      	movs	r5, #32
 8005c8a:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8005c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c90:	b13a      	cbz	r2, 8005ca2 <test_terminate_threads+0x22>
 8005c92:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 8005c96:	7f51      	ldrb	r1, [r2, #29]
 8005c98:	f041 0104 	orr.w	r1, r1, #4
 8005c9c:	7751      	strb	r1, [r2, #29]
 8005c9e:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8005ca2:	4283      	cmp	r3, r0
 8005ca4:	d1f2      	bne.n	8005c8c <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 8005ca6:	bc30      	pop	{r4, r5}
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20001710 	.word	0x20001710

08005cb0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8005cb0:	b410      	push	{r4}
 8005cb2:	2320      	movs	r3, #32
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	b2a4      	uxth	r4, r4
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 8005cc6:	1a64      	subs	r4, r4, r1
 8005cc8:	1a52      	subs	r2, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8005cca:	4294      	cmp	r4, r2
 8005ccc:	db06      	blt.n	8005cdc <_test_assert_time_window+0x2c>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005cce:	4c05      	ldr	r4, [pc, #20]	; (8005ce4 <_test_assert_time_window+0x34>)
  global_fail = TRUE;
 8005cd0:	4905      	ldr	r1, [pc, #20]	; (8005ce8 <_test_assert_time_window+0x38>)
  failpoint = point;
 8005cd2:	4a06      	ldr	r2, [pc, #24]	; (8005cec <_test_assert_time_window+0x3c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
 8005cd8:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 8005cda:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	20001739 	.word	0x20001739
 8005ce8:	20001738 	.word	0x20001738
 8005cec:	20001750 	.word	0x20001750

08005cf0 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8005cf0:	b4f0      	push	{r4, r5, r6, r7}
 8005cf2:	4e0e      	ldr	r6, [pc, #56]	; (8005d2c <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 8005cf4:	4f0e      	ldr	r7, [pc, #56]	; (8005d30 <_test_assert_sequence+0x40>)
 8005cf6:	6835      	ldr	r5, [r6, #0]
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	e005      	b.n	8005d08 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 8005cfc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8005d00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d04:	4294      	cmp	r4, r2
 8005d06:	d107      	bne.n	8005d18 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8005d08:	42ab      	cmp	r3, r5
 8005d0a:	d3f7      	bcc.n	8005cfc <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8005d0c:	780b      	ldrb	r3, [r1, #0]
 8005d0e:	b91b      	cbnz	r3, 8005d18 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8005d10:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	bcf0      	pop	{r4, r5, r6, r7}
 8005d16:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005d18:	4c06      	ldr	r4, [pc, #24]	; (8005d34 <_test_assert_sequence+0x44>)
  global_fail = TRUE;
 8005d1a:	4907      	ldr	r1, [pc, #28]	; (8005d38 <_test_assert_sequence+0x48>)
  failpoint = point;
 8005d1c:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8005d22:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8005d24:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	bcf0      	pop	{r4, r5, r6, r7}
 8005d2a:	4770      	bx	lr
 8005d2c:	20001734 	.word	0x20001734
 8005d30:	20001740 	.word	0x20001740
 8005d34:	20001739 	.word	0x20001739
 8005d38:	20001738 	.word	0x20001738
 8005d3c:	20001750 	.word	0x20001750

08005d40 <thd2_execute>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	4e47      	ldr	r6, [pc, #284]	; (8005e64 <thd2_execute+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005d46:	4d48      	ldr	r5, [pc, #288]	; (8005e68 <thd2_execute+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005d48:	69b3      	ldr	r3, [r6, #24]
 8005d4a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8005e80 <thd2_execute+0x140>
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	4946      	ldr	r1, [pc, #280]	; (8005e6c <thd2_execute+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005d52:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005d54:	464b      	mov	r3, r9
 8005d56:	9100      	str	r1, [sp, #0]
 8005d58:	3a04      	subs	r2, #4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d60:	f001 f89e 	bl	8006ea0 <chThdCreateStatic>
 8005d64:	69b3      	ldr	r3, [r6, #24]
 8005d66:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8005e84 <thd2_execute+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	4940      	ldr	r1, [pc, #256]	; (8005e70 <thd2_execute+0x130>)
 8005d6e:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005d72:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005d76:	464b      	mov	r3, r9
 8005d78:	9100      	str	r1, [sp, #0]
 8005d7a:	3a05      	subs	r2, #5
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d82:	f001 f88d 	bl	8006ea0 <chThdCreateStatic>
 8005d86:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005d88:	493a      	ldr	r1, [pc, #232]	; (8005e74 <thd2_execute+0x134>)
 8005d8a:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005d8c:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005d90:	464b      	mov	r3, r9
 8005d92:	9100      	str	r1, [sp, #0]
 8005d94:	3a01      	subs	r2, #1
 8005d96:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8005d9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d9e:	f001 f87f 	bl	8006ea0 <chThdCreateStatic>
 8005da2:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005da4:	4934      	ldr	r1, [pc, #208]	; (8005e78 <thd2_execute+0x138>)
 8005da6:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005da8:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005dac:	9100      	str	r1, [sp, #0]
 8005dae:	3a02      	subs	r2, #2
 8005db0:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005db4:	464b      	mov	r3, r9
 8005db6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005dba:	f001 f871 	bl	8006ea0 <chThdCreateStatic>
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c8 000c 	str.w	r0, [r8, #12]
 8005dc4:	f382 8811 	msr	BASEPRI, r2
 8005dc8:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005dca:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005dcc:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005dce:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8005e88 <thd2_execute+0x148>
 8005dd2:	f1a3 0a03 	sub.w	sl, r3, #3
 8005dd6:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8005e8c <thd2_execute+0x14c>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005dda:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005dde:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005de0:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8005de4:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8005de8:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005dec:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005df0:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005df2:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8005df6:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8005dfa:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005dfe:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8005e02:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8005e06:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 8005e0a:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8005e0e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005e12:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 8005e16:	6173      	str	r3, [r6, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8005e18:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8005e1c:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8005e20:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8005e24:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8005e28:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8005e2c:	610b      	str	r3, [r1, #16]
 8005e2e:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8005e32:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8005e36:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8005e3a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
 8005e3e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8005e42:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005e46:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8005e4a:	f001 f949 	bl	80070e0 <chSchReadyI>
 8005e4e:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 8005e52:	f7ff fefd 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005e56:	4650      	mov	r0, sl
 8005e58:	4908      	ldr	r1, [pc, #32]	; (8005e7c <thd2_execute+0x13c>)
}
 8005e5a:	b003      	add	sp, #12
 8005e5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005e60:	f7ff bf46 	b.w	8005cf0 <_test_assert_sequence>
 8005e64:	20001e40 	.word	0x20001e40
 8005e68:	20001910 	.word	0x20001910
 8005e6c:	0800ae44 	.word	0x0800ae44
 8005e70:	0800a0c8 	.word	0x0800a0c8
 8005e74:	080097f0 	.word	0x080097f0
 8005e78:	080097f4 	.word	0x080097f4
 8005e7c:	0800a0c4 	.word	0x0800a0c4
 8005e80:	08005fc1 	.word	0x08005fc1
 8005e84:	20001710 	.word	0x20001710
 8005e88:	080097f8 	.word	0x080097f8
 8005e8c:	080006a1 	.word	0x080006a1

08005e90 <thd1_execute>:

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005e92:	4f27      	ldr	r7, [pc, #156]	; (8005f30 <thd1_execute+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005e94:	4e27      	ldr	r6, [pc, #156]	; (8005f34 <thd1_execute+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	4d27      	ldr	r5, [pc, #156]	; (8005f38 <thd1_execute+0xa8>)
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	4927      	ldr	r1, [pc, #156]	; (8005f3c <thd1_execute+0xac>)

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8005e9e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	9100      	str	r1, [sp, #0]
 8005ea4:	3a05      	subs	r2, #5
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005eac:	f000 fff8 	bl	8006ea0 <chThdCreateStatic>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	4c23      	ldr	r4, [pc, #140]	; (8005f40 <thd1_execute+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	4923      	ldr	r1, [pc, #140]	; (8005f44 <thd1_execute+0xb4>)
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005eb8:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005eba:	462b      	mov	r3, r5
 8005ebc:	9100      	str	r1, [sp, #0]
 8005ebe:	3a04      	subs	r2, #4
 8005ec0:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8005ec4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ec8:	f000 ffea 	bl	8006ea0 <chThdCreateStatic>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005ece:	491e      	ldr	r1, [pc, #120]	; (8005f48 <thd1_execute+0xb8>)
 8005ed0:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005ed2:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	9100      	str	r1, [sp, #0]
 8005ed8:	3a03      	subs	r2, #3
 8005eda:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8005ede:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005ee2:	f000 ffdd 	bl	8006ea0 <chThdCreateStatic>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005ee8:	4918      	ldr	r1, [pc, #96]	; (8005f4c <thd1_execute+0xbc>)
 8005eea:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005eec:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005eee:	462b      	mov	r3, r5
 8005ef0:	9100      	str	r1, [sp, #0]
 8005ef2:	3a02      	subs	r2, #2
 8005ef4:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8005ef8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005efc:	f000 ffd0 	bl	8006ea0 <chThdCreateStatic>
 8005f00:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005f02:	4913      	ldr	r1, [pc, #76]	; (8005f50 <thd1_execute+0xc0>)
 8005f04:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005f06:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005f08:	3a01      	subs	r2, #1
 8005f0a:	462b      	mov	r3, r5
 8005f0c:	9100      	str	r1, [sp, #0]
 8005f0e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005f12:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005f16:	f000 ffc3 	bl	8006ea0 <chThdCreateStatic>
 8005f1a:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8005f1c:	f7ff fe98 	bl	8005c50 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005f20:	490c      	ldr	r1, [pc, #48]	; (8005f54 <thd1_execute+0xc4>)
 8005f22:	2001      	movs	r0, #1
}
 8005f24:	b003      	add	sp, #12
 8005f26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005f2a:	f7ff bee1 	b.w	8005cf0 <_test_assert_sequence>
 8005f2e:	bf00      	nop
 8005f30:	20001e40 	.word	0x20001e40
 8005f34:	200017c8 	.word	0x200017c8
 8005f38:	08005fc1 	.word	0x08005fc1
 8005f3c:	0800a0c8 	.word	0x0800a0c8
 8005f40:	20001710 	.word	0x20001710
 8005f44:	0800ae44 	.word	0x0800ae44
 8005f48:	080097f8 	.word	0x080097f8
 8005f4c:	080097f4 	.word	0x080097f4
 8005f50:	080097f0 	.word	0x080097f0
 8005f54:	0800a0c4 	.word	0x0800a0c4
 8005f58:	f3af 8000 	nop.w
 8005f5c:	f3af 8000 	nop.w

08005f60 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8005f60:	b959      	cbnz	r1, 8005f7a <_test_assert+0x1a>
  global_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8005f62:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8005f64:	4906      	ldr	r1, [pc, #24]	; (8005f80 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005f66:	4c07      	ldr	r4, [pc, #28]	; (8005f84 <_test_assert+0x24>)
  global_fail = TRUE;
  failpoint = point;
 8005f68:	4a07      	ldr	r2, [pc, #28]	; (8005f88 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8005f6e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8005f70:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f78:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	4770      	bx	lr
 8005f80:	20001738 	.word	0x20001738
 8005f84:	20001739 	.word	0x20001739
 8005f88:	20001750 	.word	0x20001750
 8005f8c:	f3af 8000 	nop.w

08005f90 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 8005f90:	b410      	push	{r4}
 8005f92:	2320      	movs	r3, #32
 8005f94:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <test_emit_token+0x20>)
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	1c54      	adds	r4, r2, #1
 8005fa0:	7010      	strb	r0, [r2, #0]
 8005fa2:	601c      	str	r4, [r3, #0]
 8005fa4:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 8005fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20001734 	.word	0x20001734
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	f3af 8000 	nop.w
 8005fbc:	f3af 8000 	nop.w

08005fc0 <thread>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 8005fc0:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8005fc2:	7800      	ldrb	r0, [r0, #0]
 8005fc4:	f7ff ffe4 	bl	8005f90 <test_emit_token>
  return 0;
}
 8005fc8:	2000      	movs	r0, #0
 8005fca:	bd08      	pop	{r3, pc}
 8005fcc:	f3af 8000 	nop.w

08005fd0 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005fd2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	4d09      	ldr	r5, [pc, #36]	; (8005ffc <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005fd8:	b139      	cbz	r1, 8005fea <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 8005fda:	6828      	ldr	r0, [r5, #0]
 8005fdc:	6803      	ldr	r3, [r0, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8005fe2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	d1f7      	bne.n	8005fda <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005fea:	6828      	ldr	r0, [r5, #0]
 8005fec:	4904      	ldr	r1, [pc, #16]	; (8006000 <test_println+0x30>)
 8005fee:	6803      	ldr	r3, [r0, #0]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	681b      	ldr	r3, [r3, #0]
}
 8005ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8005ff8:	4718      	bx	r3
 8005ffa:	bf00      	nop
 8005ffc:	2000173c 	.word	0x2000173c
 8006000:	08009c38 	.word	0x08009c38
 8006004:	f3af 8000 	nop.w
 8006008:	f3af 8000 	nop.w
 800600c:	f3af 8000 	nop.w

08006010 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8006010:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8006012:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8006014:	4604      	mov	r4, r0

  while (*msgp)
 8006016:	b141      	cbz	r1, 800602a <test_print+0x1a>
 8006018:	4d04      	ldr	r5, [pc, #16]	; (800602c <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 800601a:	6828      	ldr	r0, [r5, #0]
 800601c:	6803      	ldr	r3, [r0, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006022:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006026:	2900      	cmp	r1, #0
 8006028:	d1f7      	bne.n	800601a <test_print+0xa>
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	2000173c 	.word	0x2000173c

08006030 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8006030:	b310      	cbz	r0, 8006078 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8006036:	466d      	mov	r5, sp
 8006038:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800603a:	4a12      	ldr	r2, [pc, #72]	; (8006084 <test_printn+0x54>)
 800603c:	fba2 1300 	umull	r1, r3, r2, r0
 8006040:	08db      	lsrs	r3, r3, #3
 8006042:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006046:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 800604a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 800604e:	b2c9      	uxtb	r1, r1
 8006050:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8006054:	4618      	mov	r0, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1f0      	bne.n	800603c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 800605a:	42ac      	cmp	r4, r5
 800605c:	d90a      	bls.n	8006074 <test_printn+0x44>
 800605e:	4e0a      	ldr	r6, [pc, #40]	; (8006088 <test_printn+0x58>)
 8006060:	3c01      	subs	r4, #1
 8006062:	e001      	b.n	8006068 <test_printn+0x38>
 8006064:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8006068:	6830      	ldr	r0, [r6, #0]
 800606a:	6803      	ldr	r3, [r0, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8006070:	42ac      	cmp	r4, r5
 8006072:	d1f7      	bne.n	8006064 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8006074:	b004      	add	sp, #16
 8006076:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <test_printn+0x58>)
 800607a:	2130      	movs	r1, #48	; 0x30
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4718      	bx	r3
 8006084:	cccccccd 	.word	0xcccccccd
 8006088:	2000173c 	.word	0x2000173c
 800608c:	f3af 8000 	nop.w

08006090 <TestThread>:
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8006094:	4ca1      	ldr	r4, [pc, #644]	; (800631c <TestThread+0x28c>)
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8006096:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8006098:	6020      	str	r0, [r4, #0]
  test_println("");
 800609a:	48a1      	ldr	r0, [pc, #644]	; (8006320 <TestThread+0x290>)
 800609c:	f7ff ff98 	bl	8005fd0 <test_println>
  test_println("*** ChibiOS/RT test suite");
 80060a0:	48a0      	ldr	r0, [pc, #640]	; (8006324 <TestThread+0x294>)
 80060a2:	f7ff ff95 	bl	8005fd0 <test_println>
  test_println("***");
 80060a6:	4da0      	ldr	r5, [pc, #640]	; (8006328 <TestThread+0x298>)
 80060a8:	48a0      	ldr	r0, [pc, #640]	; (800632c <TestThread+0x29c>)
 80060aa:	f7ff ff91 	bl	8005fd0 <test_println>
 80060ae:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	6803      	ldr	r3, [r0, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060b8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80060bc:	2900      	cmp	r1, #0
 80060be:	d1f7      	bne.n	80060b0 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 80060c0:	489b      	ldr	r0, [pc, #620]	; (8006330 <TestThread+0x2a0>)
 80060c2:	4d9c      	ldr	r5, [pc, #624]	; (8006334 <TestThread+0x2a4>)
 80060c4:	f7ff ff84 	bl	8005fd0 <test_println>
 80060c8:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	6803      	ldr	r3, [r0, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060d2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80060d6:	2900      	cmp	r1, #0
 80060d8:	d1f7      	bne.n	80060ca <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 80060da:	4897      	ldr	r0, [pc, #604]	; (8006338 <TestThread+0x2a8>)
 80060dc:	4d97      	ldr	r5, [pc, #604]	; (800633c <TestThread+0x2ac>)
 80060de:	f7ff ff77 	bl	8005fd0 <test_println>
 80060e2:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	6803      	ldr	r3, [r0, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80060ec:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80060f0:	2900      	cmp	r1, #0
 80060f2:	d1f7      	bne.n	80060e4 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 80060f4:	4892      	ldr	r0, [pc, #584]	; (8006340 <TestThread+0x2b0>)
 80060f6:	4d93      	ldr	r5, [pc, #588]	; (8006344 <TestThread+0x2b4>)
 80060f8:	f7ff ff6a 	bl	8005fd0 <test_println>
 80060fc:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80060fe:	6820      	ldr	r0, [r4, #0]
 8006100:	6803      	ldr	r3, [r0, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006106:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800610a:	2900      	cmp	r1, #0
 800610c:	d1f7      	bne.n	80060fe <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800610e:	488e      	ldr	r0, [pc, #568]	; (8006348 <TestThread+0x2b8>)
 8006110:	4d8e      	ldr	r5, [pc, #568]	; (800634c <TestThread+0x2bc>)
 8006112:	f7ff ff5d 	bl	8005fd0 <test_println>
 8006116:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	6803      	ldr	r3, [r0, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006120:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006124:	2900      	cmp	r1, #0
 8006126:	d1f7      	bne.n	8006118 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8006128:	4889      	ldr	r0, [pc, #548]	; (8006350 <TestThread+0x2c0>)
 800612a:	4d8a      	ldr	r5, [pc, #552]	; (8006354 <TestThread+0x2c4>)
 800612c:	f7ff ff50 	bl	8005fd0 <test_println>
 8006130:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	6803      	ldr	r3, [r0, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800613a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800613e:	2900      	cmp	r1, #0
 8006140:	d1f7      	bne.n	8006132 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8006142:	4885      	ldr	r0, [pc, #532]	; (8006358 <TestThread+0x2c8>)
 8006144:	4d85      	ldr	r5, [pc, #532]	; (800635c <TestThread+0x2cc>)
 8006146:	f7ff ff43 	bl	8005fd0 <test_println>
 800614a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	6803      	ldr	r3, [r0, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006154:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006158:	2900      	cmp	r1, #0
 800615a:	d1f7      	bne.n	800614c <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800615c:	4880      	ldr	r0, [pc, #512]	; (8006360 <TestThread+0x2d0>)
 800615e:	4d81      	ldr	r5, [pc, #516]	; (8006364 <TestThread+0x2d4>)
 8006160:	f7ff ff36 	bl	8005fd0 <test_println>
 8006164:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	6803      	ldr	r3, [r0, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800616e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006172:	2900      	cmp	r1, #0
 8006174:	d1f7      	bne.n	8006166 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8006176:	487c      	ldr	r0, [pc, #496]	; (8006368 <TestThread+0x2d8>)
 8006178:	9100      	str	r1, [sp, #0]
 800617a:	f7ff ff29 	bl	8005fd0 <test_println>
#endif
  test_println("");
 800617e:	4868      	ldr	r0, [pc, #416]	; (8006320 <TestThread+0x290>)
 8006180:	f7ff ff26 	bl	8005fd0 <test_println>

  global_fail = FALSE;
 8006184:	4b79      	ldr	r3, [pc, #484]	; (800636c <TestThread+0x2dc>)
 8006186:	9900      	ldr	r1, [sp, #0]
 8006188:	4f79      	ldr	r7, [pc, #484]	; (8006370 <TestThread+0x2e0>)
 800618a:	7019      	strb	r1, [r3, #0]
 800618c:	4b79      	ldr	r3, [pc, #484]	; (8006374 <TestThread+0x2e4>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800618e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800631c <TestThread+0x28c>
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8006196:	2600      	movs	r6, #0
 8006198:	3301      	adds	r3, #1
 800619a:	9300      	str	r3, [sp, #0]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 800619c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80061a0:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 808b 	beq.w	80062c0 <TestThread+0x230>
      print_line();
 80061aa:	4d73      	ldr	r5, [pc, #460]	; (8006378 <TestThread+0x2e8>)
 80061ac:	f7ff fd00 	bl	8005bb0 <print_line>
 80061b0:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	6803      	ldr	r3, [r0, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80061ba:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80061be:	2900      	cmp	r1, #0
 80061c0:	d1f7      	bne.n	80061b2 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 80061c2:	9800      	ldr	r0, [sp, #0]
 80061c4:	f7ff ff34 	bl	8006030 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80061c8:	f8db 0000 	ldr.w	r0, [fp]
 80061cc:	212e      	movs	r1, #46	; 0x2e
 80061ce:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 80061d0:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 80061d6:	4d69      	ldr	r5, [pc, #420]	; (800637c <TestThread+0x2ec>)
 80061d8:	4630      	mov	r0, r6
 80061da:	f7ff ff29 	bl	8006030 <test_printn>
 80061de:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	6803      	ldr	r3, [r0, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80061e8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80061ec:	2900      	cmp	r1, #0
 80061ee:	d1f7      	bne.n	80061e0 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 80061f0:	f8d8 3000 	ldr.w	r3, [r8]
 80061f4:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80061f6:	7829      	ldrb	r1, [r5, #0]
 80061f8:	b139      	cbz	r1, 800620a <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	6803      	ldr	r3, [r0, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006202:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8006206:	2900      	cmp	r1, #0
 8006208:	d1f7      	bne.n	80061fa <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 800620a:	485d      	ldr	r0, [pc, #372]	; (8006380 <TestThread+0x2f0>)
 800620c:	f7ff fee0 	bl	8005fd0 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8006210:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006214:	f000 ff54 	bl	80070c0 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8006218:	4a5a      	ldr	r2, [pc, #360]	; (8006384 <TestThread+0x2f4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 800621a:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800621e:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	6053      	str	r3, [r2, #4]
 8006224:	6093      	str	r3, [r2, #8]
 8006226:	60d3      	str	r3, [r2, #12]
 8006228:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800622a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80063b0 <TestThread+0x320>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 800622e:	4d56      	ldr	r5, [pc, #344]	; (8006388 <TestThread+0x2f8>)
 8006230:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8006398 <TestThread+0x308>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8006234:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8006238:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 800623c:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8006240:	b102      	cbz	r2, 8006244 <TestThread+0x1b4>
    tcp->setup();
 8006242:	4790      	blx	r2
  tcp->execute();
 8006244:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006248:	4798      	blx	r3
  if (tcp->teardown != NULL)
 800624a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800624e:	b103      	cbz	r3, 8006252 <TestThread+0x1c2>
    tcp->teardown();
 8006250:	4798      	blx	r3

  test_wait_threads();
 8006252:	f7ff fcfd 	bl	8005c50 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8006256:	f898 3000 	ldrb.w	r3, [r8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d051      	beq.n	8006302 <TestThread+0x272>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 800625e:	4f4b      	ldr	r7, [pc, #300]	; (800638c <TestThread+0x2fc>)
 8006260:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	6803      	ldr	r3, [r0, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800626a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800626e:	2900      	cmp	r1, #0
 8006270:	d1f7      	bne.n	8006262 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8006272:	4b47      	ldr	r3, [pc, #284]	; (8006390 <TestThread+0x300>)
 8006274:	4f47      	ldr	r7, [pc, #284]	; (8006394 <TestThread+0x304>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	f7ff feda 	bl	8006030 <test_printn>
 800627c:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006286:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800628a:	2900      	cmp	r1, #0
 800628c:	d1f7      	bne.n	800627e <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	454b      	cmp	r3, r9
 8006292:	d909      	bls.n	80062a8 <TestThread+0x218>
 8006294:	4f40      	ldr	r7, [pc, #256]	; (8006398 <TestThread+0x308>)
    chSequentialStreamPut(chp, *cp++);
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	f817 1b01 	ldrb.w	r1, [r7], #1
 800629c:	6803      	ldr	r3, [r0, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	429f      	cmp	r7, r3
 80062a6:	d3f6      	bcc.n	8006296 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 80062a8:	483c      	ldr	r0, [pc, #240]	; (800639c <TestThread+0x30c>)
 80062aa:	f7ff fe91 	bl	8005fd0 <test_println>
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	681f      	ldr	r7, [r3, #0]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 80062b2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80062b6:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f47f af75 	bne.w	80061aa <TestThread+0x11a>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	f853 7f04 	ldr.w	r7, [r3, #4]!
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	2f00      	cmp	r7, #0
 80062ca:	f47f af63 	bne.w	8006194 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 80062ce:	f7ff fc6f 	bl	8005bb0 <print_line>
  test_println("");
 80062d2:	4d33      	ldr	r5, [pc, #204]	; (80063a0 <TestThread+0x310>)
 80062d4:	4812      	ldr	r0, [pc, #72]	; (8006320 <TestThread+0x290>)
 80062d6:	f7ff fe7b 	bl	8005fd0 <test_println>
 80062da:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80062e4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80062e8:	2900      	cmp	r1, #0
 80062ea:	d1f7      	bne.n	80062dc <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 80062ec:	4b1f      	ldr	r3, [pc, #124]	; (800636c <TestThread+0x2dc>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b95b      	cbnz	r3, 800630a <TestThread+0x27a>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 80062f2:	482c      	ldr	r0, [pc, #176]	; (80063a4 <TestThread+0x314>)
 80062f4:	f7ff fe6c 	bl	8005fd0 <test_println>

  return (msg_t)global_fail;
 80062f8:	4b1c      	ldr	r3, [pc, #112]	; (800636c <TestThread+0x2dc>)
 80062fa:	7818      	ldrb	r0, [r3, #0]
}
 80062fc:	b003      	add	sp, #12
 80062fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8006302:	4829      	ldr	r0, [pc, #164]	; (80063a8 <TestThread+0x318>)
 8006304:	f7ff fe64 	bl	8005fd0 <test_println>
 8006308:	e748      	b.n	800619c <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 800630a:	4828      	ldr	r0, [pc, #160]	; (80063ac <TestThread+0x31c>)
 800630c:	f7ff fe60 	bl	8005fd0 <test_println>
  else
    test_println("SUCCESS");

  return (msg_t)global_fail;
 8006310:	4b16      	ldr	r3, [pc, #88]	; (800636c <TestThread+0x2dc>)
 8006312:	7818      	ldrb	r0, [r3, #0]
}
 8006314:	b003      	add	sp, #12
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	bf00      	nop
 800631c:	2000173c 	.word	0x2000173c
 8006320:	0800ad0c 	.word	0x0800ad0c
 8006324:	0800a550 	.word	0x0800a550
 8006328:	0800a470 	.word	0x0800a470
 800632c:	0800a56c 	.word	0x0800a56c
 8006330:	0800a594 	.word	0x0800a594
 8006334:	0800a484 	.word	0x0800a484
 8006338:	0800a5a0 	.word	0x0800a5a0
 800633c:	0800a498 	.word	0x0800a498
 8006340:	0800a5b8 	.word	0x0800a5b8
 8006344:	0800a4ac 	.word	0x0800a4ac
 8006348:	0800a600 	.word	0x0800a600
 800634c:	0800a4c0 	.word	0x0800a4c0
 8006350:	0800a608 	.word	0x0800a608
 8006354:	0800a4d4 	.word	0x0800a4d4
 8006358:	0800a614 	.word	0x0800a614
 800635c:	0800a4e8 	.word	0x0800a4e8
 8006360:	0800a62c 	.word	0x0800a62c
 8006364:	0800a4fc 	.word	0x0800a4fc
 8006368:	0800a658 	.word	0x0800a658
 800636c:	20001738 	.word	0x20001738
 8006370:	0800a1f0 	.word	0x0800a1f0
 8006374:	0800a2e0 	.word	0x0800a2e0
 8006378:	0800a510 	.word	0x0800a510
 800637c:	0800a520 	.word	0x0800a520
 8006380:	0800a570 	.word	0x0800a570
 8006384:	20001710 	.word	0x20001710
 8006388:	20001734 	.word	0x20001734
 800638c:	0800a524 	.word	0x0800a524
 8006390:	20001750 	.word	0x20001750
 8006394:	0800a53c 	.word	0x0800a53c
 8006398:	20001740 	.word	0x20001740
 800639c:	0800a574 	.word	0x0800a574
 80063a0:	0800a540 	.word	0x0800a540
 80063a4:	0800a584 	.word	0x0800a584
 80063a8:	0800a578 	.word	0x0800a578
 80063ac:	0800a58c 	.word	0x0800a58c
 80063b0:	20001739 	.word	0x20001739
 80063b4:	f3af 8000 	nop.w
 80063b8:	f3af 8000 	nop.w
 80063bc:	f3af 8000 	nop.w

080063c0 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 80063c0:	b508      	push	{r3, lr}
 80063c2:	2220      	movs	r2, #32
 80063c4:	4603      	mov	r3, r0
 80063c6:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	b128      	cbz	r0, 80063da <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 80063ce:	6802      	ldr	r2, [r0, #0]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 80063d8:	bd08      	pop	{r3, pc}
  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
    mp->mp_next = mp->mp_next->ph_next;
  else if (mp->mp_provider != NULL)
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	2a00      	cmp	r2, #0
 80063de:	d0f8      	beq.n	80063d2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 80063e0:	6858      	ldr	r0, [r3, #4]
 80063e2:	4790      	blx	r2
 80063e4:	2300      	movs	r3, #0
 80063e6:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 80063ea:	bd08      	pop	{r3, pc}
 80063ec:	f3af 8000 	nop.w

080063f0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80063f0:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 80063f2:	4c0f      	ldr	r4, [pc, #60]	; (8006430 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80063f4:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 80063f6:	2800      	cmp	r0, #0
 80063f8:	bf18      	it	ne
 80063fa:	4604      	movne	r4, r0

  H_LOCK(heapp);
 80063fc:	f104 0510 	add.w	r5, r4, #16
 8006400:	4628      	mov	r0, r5
 8006402:	f000 ff45 	bl	8007290 <chMtxLock>

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	b173      	cbz	r3, 8006428 <chHeapStatus+0x38>
 800640a:	2200      	movs	r2, #0
 800640c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800640e:	6858      	ldr	r0, [r3, #4]
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 8006414:	4402      	add	r2, r0
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f9      	bne.n	800640e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  if (sizep)
 800641a:	b106      	cbz	r6, 800641e <chHeapStatus+0x2e>
    *sizep = sz;
 800641c:	6032      	str	r2, [r6, #0]

  H_UNLOCK(heapp);
 800641e:	4628      	mov	r0, r5
 8006420:	f000 fca6 	bl	8006d70 <chMtxUnlock>
  return n;
}
 8006424:	4620      	mov	r0, r4
 8006426:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
 8006428:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 800642a:	461c      	mov	r4, r3
 800642c:	e7f5      	b.n	800641a <chHeapStatus+0x2a>
 800642e:	bf00      	nop
 8006430:	20001508 	.word	0x20001508
 8006434:	f3af 8000 	nop.w
 8006438:	f3af 8000 	nop.w
 800643c:	f3af 8000 	nop.w

08006440 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 8006442:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8006446:	4606      	mov	r6, r0
  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
  H_LOCK(heapp);
 8006448:	f105 0710 	add.w	r7, r5, #16
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 800644c:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8006450:	3508      	adds	r5, #8
  H_LOCK(heapp);
 8006452:	4638      	mov	r0, r7
 8006454:	f000 ff1c 	bl	8007290 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8006458:	462b      	mov	r3, r5
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800645a:	42ab      	cmp	r3, r5
 800645c:	d004      	beq.n	8006468 <chHeapFree+0x28>
 800645e:	42a3      	cmp	r3, r4
 8006460:	d302      	bcc.n	8006468 <chHeapFree+0x28>
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	42ab      	cmp	r3, r5
 8006466:	d1fa      	bne.n	800645e <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8006468:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800646a:	b11a      	cbz	r2, 8006474 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800646c:	4294      	cmp	r4, r2
 800646e:	d301      	bcc.n	8006474 <chHeapFree+0x34>
 8006470:	4613      	mov	r3, r2
 8006472:	e7f2      	b.n	800645a <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8006474:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8006478:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 800647c:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800647e:	f101 0208 	add.w	r2, r1, #8
 8006482:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8006486:	18a0      	adds	r0, r4, r2
 8006488:	42a8      	cmp	r0, r5
 800648a:	d00a      	beq.n	80064a2 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	f101 0208 	add.w	r2, r1, #8
 8006492:	441a      	add	r2, r3
 8006494:	4294      	cmp	r4, r2
 8006496:	d010      	beq.n	80064ba <chHeapFree+0x7a>
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8006498:	4638      	mov	r0, r7
  return;
}
 800649a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 800649e:	f000 bc67 	b.w	8006d70 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80064a2:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 80064a4:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80064a6:	194a      	adds	r2, r1, r5
 80064a8:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 80064aa:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 80064ae:	6859      	ldr	r1, [r3, #4]
 80064b0:	f101 0208 	add.w	r2, r1, #8
 80064b4:	441a      	add	r2, r3
 80064b6:	4294      	cmp	r4, r2
 80064b8:	d1ee      	bne.n	8006498 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 80064ba:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80064be:	440a      	add	r2, r1
 80064c0:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80064c2:	e883 0005 	stmia.w	r3, {r0, r2}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 80064c6:	4638      	mov	r0, r7
  return;
}
 80064c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 80064cc:	f000 bc50 	b.w	8006d70 <chMtxUnlock>

080064d0 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 80064d2:	4e21      	ldr	r6, [pc, #132]	; (8006558 <chHeapAlloc+0x88>)

  size = MEM_ALIGN_NEXT(size);
 80064d4:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 80064d6:	2800      	cmp	r0, #0
 80064d8:	bf18      	it	ne
 80064da:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);
 80064dc:	f106 0710 	add.w	r7, r6, #16
 80064e0:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 80064e2:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 80064e6:	f106 0408 	add.w	r4, r6, #8
  H_LOCK(heapp);
 80064ea:	f000 fed1 	bl	8007290 <chMtxLock>
 80064ee:	e003      	b.n	80064f8 <chHeapAlloc+0x28>

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80064f0:	6843      	ldr	r3, [r0, #4]
 80064f2:	429d      	cmp	r5, r3
 80064f4:	d912      	bls.n	800651c <chHeapAlloc+0x4c>
 80064f6:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
 80064f8:	6820      	ldr	r0, [r4, #0]
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d1f8      	bne.n	80064f0 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
 80064fe:	4638      	mov	r0, r7
 8006500:	f000 fc36 	bl	8006d70 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	b323      	cbz	r3, 8006552 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8006508:	f105 0008 	add.w	r0, r5, #8
 800650c:	4798      	blx	r3
    if (hp != NULL) {
 800650e:	b300      	cbz	r0, 8006552 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 8006510:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8006512:	6045      	str	r5, [r0, #4]
      hp++;
 8006514:	f100 0408 	add.w	r4, r0, #8
      return (void *)hp;
    }
  }
  return NULL;
}
 8006518:	4620      	mov	r0, r4
 800651a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
 800651c:	f105 0108 	add.w	r1, r5, #8
 8006520:	4299      	cmp	r1, r3
 8006522:	d909      	bls.n	8006538 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8006524:	6803      	ldr	r3, [r0, #0]
 8006526:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8006528:	4604      	mov	r4, r0

      H_UNLOCK(heapp);
 800652a:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 800652c:	f844 6b08 	str.w	r6, [r4], #8

      H_UNLOCK(heapp);
 8006530:	f000 fc1e 	bl	8006d70 <chMtxUnlock>
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 8006534:	4620      	mov	r0, r4
 8006536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006538:	f06f 0e07 	mvn.w	lr, #7
 800653c:	ebc5 0e0e 	rsb	lr, r5, lr
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 8006540:	449e      	add	lr, r3
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 8006542:	6803      	ldr	r3, [r0, #0]
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8006544:	1842      	adds	r2, r0, r1
        fp->h.u.next = hp->h.u.next;
 8006546:	5043      	str	r3, [r0, r1]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 8006548:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 800654c:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 800654e:	6045      	str	r5, [r0, #4]
 8006550:	e7ea      	b.n	8006528 <chHeapAlloc+0x58>
      hp->h.size = size;
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
 8006552:	2400      	movs	r4, #0
 8006554:	e7e0      	b.n	8006518 <chHeapAlloc+0x48>
 8006556:	bf00      	nop
 8006558:	20001508 	.word	0x20001508
 800655c:	f3af 8000 	nop.w

08006560 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	b083      	sub	sp, #12
 8006566:	4604      	mov	r4, r0
 8006568:	468b      	mov	fp, r1
 800656a:	4616      	mov	r6, r2
 800656c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800656e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8006572:	f04f 0920 	mov.w	r9, #32
 8006576:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800657a:	2700      	movs	r7, #0
 800657c:	46ba      	mov	sl, r7
 800657e:	f8cd 9000 	str.w	r9, [sp]
 8006582:	68a5      	ldr	r5, [r4, #8]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8006584:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8006588:	1e6a      	subs	r2, r5, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800658a:	b30d      	cbz	r5, 80065d0 <chOQWriteTimeout+0x70>
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800658c:	6963      	ldr	r3, [r4, #20]
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 800658e:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	6162      	str	r2, [r4, #20]
 8006594:	f89b 2000 	ldrb.w	r2, [fp]
 8006598:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top)
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	6962      	ldr	r2, [r4, #20]
 800659e:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80065a0:	bf24      	itt	cs
 80065a2:	68e3      	ldrcs	r3, [r4, #12]
 80065a4:	6163      	strcs	r3, [r4, #20]

    if (nfy)
 80065a6:	f1b8 0f00 	cmp.w	r8, #0
 80065aa:	d001      	beq.n	80065b0 <chOQWriteTimeout+0x50>
      nfy(oqp);
 80065ac:	4620      	mov	r0, r4
 80065ae:	47c0      	blx	r8
 80065b0:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
    if (--n == 0)
 80065b4:	3e01      	subs	r6, #1

    if (nfy)
      nfy(oqp);

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 80065b6:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0)
 80065ba:	d011      	beq.n	80065e0 <chOQWriteTimeout+0x80>
 80065bc:	9b00      	ldr	r3, [sp, #0]
 80065be:	f383 8811 	msr	BASEPRI, r3
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80065c2:	46cb      	mov	fp, r9
 80065c4:	68a5      	ldr	r5, [r4, #8]
 80065c6:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 80065ca:	1e6a      	subs	r2, r5, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	d1dd      	bne.n	800658c <chOQWriteTimeout+0x2c>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 80065d0:	4620      	mov	r0, r4
 80065d2:	9901      	ldr	r1, [sp, #4]
 80065d4:	f000 fd5c 	bl	8007090 <chThdEnqueueTimeoutS>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d0d2      	beq.n	8006582 <chOQWriteTimeout+0x22>
 80065dc:	f385 8811 	msr	BASEPRI, r5
    w++;
    if (--n == 0)
      return w;
    chSysLock();
  }
}
 80065e0:	4638      	mov	r0, r7
 80065e2:	b003      	add	sp, #12
 80065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e8:	f3af 8000 	nop.w
 80065ec:	f3af 8000 	nop.w

080065f0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	4604      	mov	r4, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	4616      	mov	r6, r2
 80065f8:	2320      	movs	r3, #32
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	e005      	b.n	800660c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8006600:	4620      	mov	r0, r4
 8006602:	4631      	mov	r1, r6
 8006604:	f000 fd44 	bl	8007090 <chThdEnqueueTimeoutS>
 8006608:	2800      	cmp	r0, #0
 800660a:	db16      	blt.n	800663a <chOQPutTimeout+0x4a>
 800660c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800660e:	2d00      	cmp	r5, #0
 8006610:	d0f6      	beq.n	8006600 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8006612:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8006614:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800661a:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 800661c:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top)
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	6962      	ldr	r2, [r4, #20]
 8006622:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8006624:	bf24      	itt	cs
 8006626:	68e3      	ldrcs	r3, [r4, #12]
 8006628:	6163      	strcs	r3, [r4, #20]

  if (oqp->q_notify)
 800662a:	69e3      	ldr	r3, [r4, #28]
 800662c:	b10b      	cbz	r3, 8006632 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800662e:	4620      	mov	r0, r4
 8006630:	4798      	blx	r3
 8006632:	2000      	movs	r0, #0
 8006634:	f380 8811 	msr	BASEPRI, r0

  chSysUnlock();
  return Q_OK;
}
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663a:	f385 8811 	msr	BASEPRI, r5
 800663e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006640 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	4604      	mov	r4, r0
 8006646:	b083      	sub	sp, #12
 8006648:	4689      	mov	r9, r1
 800664a:	4693      	mov	fp, r2
 800664c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800664e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8006652:	2720      	movs	r7, #32
 8006654:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8006658:	2600      	movs	r6, #0
 800665a:	46b2      	mov	sl, r6
 800665c:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy)
 800665e:	f1b8 0f00 	cmp.w	r8, #0
 8006662:	d007      	beq.n	8006674 <chIQReadTimeout+0x34>
      nfy(iqp);
 8006664:	4620      	mov	r0, r4
 8006666:	47c0      	blx	r8
 8006668:	e004      	b.n	8006674 <chIQReadTimeout+0x34>

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 800666a:	4620      	mov	r0, r4
 800666c:	4629      	mov	r1, r5
 800666e:	f000 fd0f 	bl	8007090 <chThdEnqueueTimeoutS>
 8006672:	b9c8      	cbnz	r0, 80066a8 <chIQReadTimeout+0x68>
 8006674:	68a7      	ldr	r7, [r4, #8]
  chSysLock();
  while (true) {
    if (nfy)
      nfy(iqp);

    while (chIQIsEmptyI(iqp)) {
 8006676:	2f00      	cmp	r7, #0
 8006678:	d0f7      	beq.n	800666a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800667a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800667c:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 800667e:	1c51      	adds	r1, r2, #1
 8006680:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8006682:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8006684:	7813      	ldrb	r3, [r2, #0]
 8006686:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top)
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	69a2      	ldr	r2, [r4, #24]
 800668e:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8006690:	bf24      	itt	cs
 8006692:	68e3      	ldrcs	r3, [r4, #12]
 8006694:	61a3      	strcs	r3, [r4, #24]
 8006696:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 800669a:	3601      	adds	r6, #1
    if (--n == 0)
 800669c:	45b3      	cmp	fp, r6
 800669e:	d005      	beq.n	80066ac <chIQReadTimeout+0x6c>
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	e7da      	b.n	800665e <chIQReadTimeout+0x1e>
 80066a8:	f387 8811 	msr	BASEPRI, r7
      return r;

    chSysLock();
  }
}
 80066ac:	4630      	mov	r0, r6
 80066ae:	b003      	add	sp, #12
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b4:	f3af 8000 	nop.w
 80066b8:	f3af 8000 	nop.w
 80066bc:	f3af 8000 	nop.w

080066c0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	2320      	movs	r3, #32
 80066c4:	460e      	mov	r6, r1
 80066c6:	4604      	mov	r4, r0
 80066c8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify)
 80066cc:	69c3      	ldr	r3, [r0, #28]
 80066ce:	b13b      	cbz	r3, 80066e0 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 80066d0:	4798      	blx	r3
 80066d2:	e005      	b.n	80066e0 <chIQGetTimeout+0x20>

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 80066d4:	4620      	mov	r0, r4
 80066d6:	4631      	mov	r1, r6
 80066d8:	f000 fcda 	bl	8007090 <chThdEnqueueTimeoutS>
 80066dc:	2800      	cmp	r0, #0
 80066de:	db13      	blt.n	8006708 <chIQGetTimeout+0x48>
 80066e0:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  if (iqp->q_notify)
    iqp->q_notify(iqp);

  while (chIQIsEmptyI(iqp)) {
 80066e2:	2d00      	cmp	r5, #0
 80066e4:	d0f6      	beq.n	80066d4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80066e6:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top)
 80066e8:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80066ea:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top)
 80066ec:	428b      	cmp	r3, r1
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80066ee:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80066f0:	f105 35ff 	add.w	r5, r5, #4294967295
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top)
    iqp->q_rdptr = iqp->q_buffer;
 80066f4:	bf28      	it	cs
 80066f6:	68e3      	ldrcs	r3, [r4, #12]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80066f8:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
 80066fa:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top)
    iqp->q_rdptr = iqp->q_buffer;
 80066fc:	bf28      	it	cs
 80066fe:	61a3      	strcs	r3, [r4, #24]
 8006700:	2300      	movs	r3, #0
 8006702:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return b;
}
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f385 8811 	msr	BASEPRI, r5
 800670c:	bd70      	pop	{r4, r5, r6, pc}
 800670e:	bf00      	nop

08006710 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8006710:	4603      	mov	r3, r0
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8006712:	6940      	ldr	r0, [r0, #20]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	b510      	push	{r4, lr}
 8006718:	4290      	cmp	r0, r2
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	d01c      	beq.n	8006758 <chIQPutI+0x48>
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 800671e:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
 8006720:	1c44      	adds	r4, r0, #1
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 8006722:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
 8006724:	615c      	str	r4, [r3, #20]
 8006726:	7001      	strb	r1, [r0, #0]
  if (iqp->q_wrptr >= iqp->q_top)
 8006728:	6959      	ldr	r1, [r3, #20]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	4291      	cmp	r1, r2
 800672e:	d20c      	bcs.n	800674a <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8006730:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006736:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8006738:	2400      	movs	r4, #0
 800673a:	6019      	str	r1, [r3, #0]
  chSchReadyI(tp);
 800673c:	4610      	mov	r0, r2
 800673e:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8006740:	6214      	str	r4, [r2, #32]
  chSchReadyI(tp);
 8006742:	f000 fccd 	bl	80070e0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8006746:	4620      	mov	r0, r4
 8006748:	bd10      	pop	{r4, pc}
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top)
    iqp->q_wrptr = iqp->q_buffer;
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4293      	cmp	r3, r2
 8006752:	d1f0      	bne.n	8006736 <chIQPutI+0x26>

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8006754:	2000      	movs	r0, #0
 8006756:	bd10      	pop	{r4, pc}
 8006758:	2a00      	cmp	r2, #0
 800675a:	d0e0      	beq.n	800671e <chIQPutI+0xe>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;
 800675c:	f06f 0003 	mvn.w	r0, #3
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	f3af 8000 	nop.w
 8006768:	f3af 8000 	nop.w
 800676c:	f3af 8000 	nop.w

08006770 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8006770:	b510      	push	{r4, lr}
 8006772:	2320      	movs	r3, #32
 8006774:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
 8006778:	4c0b      	ldr	r4, [pc, #44]	; (80067a8 <chMsgWait+0x38>)
 800677a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 800677c:	4613      	mov	r3, r2
 800677e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8006782:	4298      	cmp	r0, r3
 8006784:	d008      	beq.n	8006798 <chMsgWait+0x28>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006786:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8006788:	240d      	movs	r4, #13
 800678a:	6291      	str	r1, [r2, #40]	; 0x28
 800678c:	604b      	str	r3, [r1, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	7704      	strb	r4, [r0, #28]
 8006792:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();
  return tp;
}
 8006796:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
    chSchGoSleepS(CH_STATE_WTMSG);
 8006798:	200e      	movs	r0, #14
 800679a:	f000 fbc1 	bl	8006f20 <chSchGoSleepS>
 800679e:	69a2      	ldr	r2, [r4, #24]
 80067a0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80067a2:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80067a6:	e7ee      	b.n	8006786 <chMsgWait+0x16>
 80067a8:	20001e40 	.word	0x20001e40
 80067ac:	f3af 8000 	nop.w

080067b0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 80067b0:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 80067b2:	b570      	push	{r4, r5, r6, lr}
 80067b4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80067b6:	699c      	ldr	r4, [r3, #24]
 80067b8:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80067bc:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 80067c0:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 80067c2:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80067c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 80067c6:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 80067c8:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 80067ca:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 80067cc:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 80067ce:	62c4      	str	r4, [r0, #44]	; 0x2c
 80067d0:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 80067d2:	d007      	beq.n	80067e4 <chMsgSend+0x34>
    chSchReadyI(tp);
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 80067d4:	200c      	movs	r0, #12
 80067d6:	f000 fba3 	bl	8006f20 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 80067da:	6a20      	ldr	r0, [r4, #32]
 80067dc:	2300      	movs	r3, #0
 80067de:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
    chSchReadyI(tp);
 80067e4:	f000 fc7c 	bl	80070e0 <chSchReadyI>
 80067e8:	e7f4      	b.n	80067d4 <chMsgSend+0x24>
 80067ea:	bf00      	nop
 80067ec:	20001e40 	.word	0x20001e40

080067f0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80067f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80067f2:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80067f4:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80067f6:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 80067f8:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80067fa:	d00a      	beq.n	8006812 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 80067fc:	2a0b      	cmp	r2, #11
 80067fe:	d000      	beq.n	8006802 <chEvtSignalI+0x12>
 8006800:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8006802:	6a03      	ldr	r3, [r0, #32]
 8006804:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8006806:	428b      	cmp	r3, r1
 8006808:	d1fa      	bne.n	8006800 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	6203      	str	r3, [r0, #32]
    chSchReadyI(tp);
 800680e:	f000 bc67 	b.w	80070e0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 8006812:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8006814:	4219      	tst	r1, r3
 8006816:	d1f8      	bne.n	800680a <chEvtSignalI+0x1a>
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	f3af 8000 	nop.w

08006820 <wakeup.lto_priv.119>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8006820:	b410      	push	{r4}
 8006822:	2320      	movs	r3, #32
 8006824:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8006828:	7f03      	ldrb	r3, [r0, #28]
 800682a:	2b07      	cmp	r3, #7
 800682c:	d80e      	bhi.n	800684c <wakeup.lto_priv.119+0x2c>
 800682e:	e8df f003 	tbb	[pc, r3]
 8006832:	0d27      	.short	0x0d27
 8006834:	0408230d 	.word	0x0408230d
 8006838:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 800683a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800683c:	6893      	ldr	r3, [r2, #8]
 800683e:	3301      	adds	r3, #1
 8006840:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8006842:	e890 000c 	ldmia.w	r0, {r2, r3}
 8006846:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8006848:	6802      	ldr	r2, [r0, #0]
 800684a:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800684c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006850:	2200      	movs	r2, #0
 8006852:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <wakeup.lto_priv.119+0x6c>)
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8006856:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006858:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800685a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	428a      	cmp	r2, r1
 8006860:	d2fb      	bcs.n	800685a <wakeup.lto_priv.119+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006866:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8006868:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800686a:	6058      	str	r0, [r3, #4]
 800686c:	6010      	str	r0, [r2, #0]
 800686e:	f381 8811 	msr	BASEPRI, r1
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8006872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006876:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 8006878:	6a03      	ldr	r3, [r0, #32]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e7e5      	b.n	800684c <wakeup.lto_priv.119+0x2c>
 8006880:	2300      	movs	r3, #0
 8006882:	f383 8811 	msr	BASEPRI, r3
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8006886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20001e40 	.word	0x20001e40

08006890 <_idle_thread.lto_priv.87>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <_idle_thread.lto_priv.87+0xc>)
 8006892:	4a03      	ldr	r2, [pc, #12]	; (80068a0 <_idle_thread.lto_priv.87+0x10>)
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	619a      	str	r2, [r3, #24]
 8006898:	e7fe      	b.n	8006898 <_idle_thread.lto_priv.87+0x8>
 800689a:	bf00      	nop
 800689c:	20001e40 	.word	0x20001e40
 80068a0:	0800ab10 	.word	0x0800ab10
 80068a4:	f3af 8000 	nop.w
 80068a8:	f3af 8000 	nop.w
 80068ac:	f3af 8000 	nop.w

080068b0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80068b0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80068b4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80068b6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80068ba:	2300      	movs	r3, #0
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	f3af 8000 	nop.w
 80068c8:	f3af 8000 	nop.w
 80068cc:	f3af 8000 	nop.w

080068d0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80068d0:	4a0d      	ldr	r2, [pc, #52]	; (8006908 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80068d2:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80068d4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 80068d6:	6994      	ldr	r4, [r2, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80068d8:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80068da:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 80068dc:	2600      	movs	r6, #0
 80068de:	68a1      	ldr	r1, [r4, #8]
 80068e0:	462b      	mov	r3, r5
 80068e2:	606a      	str	r2, [r5, #4]
 80068e4:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80068e6:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80068e8:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80068ea:	7726      	strb	r6, [r4, #28]
 80068ec:	e000      	b.n	80068f0 <chSchDoRescheduleAhead+0x20>
 80068ee:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	428a      	cmp	r2, r1
 80068f4:	d8fb      	bhi.n	80068ee <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80068f6:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80068f8:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80068fa:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 80068fc:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = cp->p_prev = otp;
 80068fe:	605c      	str	r4, [r3, #4]
 8006900:	6014      	str	r4, [r2, #0]

  chSysSwitch(currp, otp);
}
 8006902:	bcf0      	pop	{r4, r5, r6, r7}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8006904:	f7f9 bec4 	b.w	8000690 <_port_switch>
 8006908:	20001e40 	.word	0x20001e40
 800690c:	f3af 8000 	nop.w

08006910 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 8006910:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 8006912:	4849      	ldr	r0, [pc, #292]	; (8006a38 <Reset_Handler+0x128>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 8006914:	f380 8809 	msr	PSP, r0
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 8006918:	2302      	movs	r3, #2
 800691a:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 800691e:	f3bf 8f6f 	isb	sy
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006922:	4b46      	ldr	r3, [pc, #280]	; (8006a3c <Reset_Handler+0x12c>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8006924:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	f042 0201 	orr.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800692e:	680b      	ldr	r3, [r1, #0]
 8006930:	4a42      	ldr	r2, [pc, #264]	; (8006a3c <Reset_Handler+0x12c>)
 8006932:	079d      	lsls	r5, r3, #30
 8006934:	d5fb      	bpl.n	800692e <Reset_Handler+0x1e>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006936:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8006938:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800693a:	2400      	movs	r4, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800693c:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8006940:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8006942:	6054      	str	r4, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8006944:	684b      	ldr	r3, [r1, #4]
 8006946:	4a3d      	ldr	r2, [pc, #244]	; (8006a3c <Reset_Handler+0x12c>)
 8006948:	f013 0f0c 	tst.w	r3, #12
 800694c:	d1fa      	bne.n	8006944 <Reset_Handler+0x34>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800694e:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006956:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8006958:	680b      	ldr	r3, [r1, #0]
 800695a:	4a38      	ldr	r2, [pc, #224]	; (8006a3c <Reset_Handler+0x12c>)
 800695c:	039c      	lsls	r4, r3, #14
 800695e:	d5fb      	bpl.n	8006958 <Reset_Handler+0x48>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006960:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8006962:	6853      	ldr	r3, [r2, #4]
 8006964:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
 8006968:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006970:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8006972:	680b      	ldr	r3, [r1, #0]
 8006974:	4a31      	ldr	r2, [pc, #196]	; (8006a3c <Reset_Handler+0x12c>)
 8006976:	019b      	lsls	r3, r3, #6
 8006978:	d5fb      	bpl.n	8006972 <Reset_Handler+0x62>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800697a:	4611      	mov	r1, r2
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800697c:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <Reset_Handler+0x130>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800697e:	4d31      	ldr	r5, [pc, #196]	; (8006a44 <Reset_Handler+0x134>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8006980:	2411      	movs	r4, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8006982:	6055      	str	r5, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8006984:	601c      	str	r4, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8006986:	6853      	ldr	r3, [r2, #4]
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800698e:	684b      	ldr	r3, [r1, #4]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b08      	cmp	r3, #8
 8006996:	d1fa      	bne.n	800698e <Reset_Handler+0x7e>
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8006998:	492b      	ldr	r1, [pc, #172]	; (8006a48 <Reset_Handler+0x138>)
 800699a:	4a2c      	ldr	r2, [pc, #176]	; (8006a4c <Reset_Handler+0x13c>)
 800699c:	4291      	cmp	r1, r2
 800699e:	d20c      	bcs.n	80069ba <Reset_Handler+0xaa>
 80069a0:	43cc      	mvns	r4, r1
 80069a2:	4422      	add	r2, r4
 80069a4:	f022 0203 	bic.w	r2, r2, #3
 80069a8:	3204      	adds	r2, #4
 80069aa:	460b      	mov	r3, r1
 80069ac:	440a      	add	r2, r1
 80069ae:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 80069b2:	f843 1b04 	str.w	r1, [r3], #4
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d1fb      	bne.n	80069b2 <Reset_Handler+0xa2>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80069ba:	4925      	ldr	r1, [pc, #148]	; (8006a50 <Reset_Handler+0x140>)
 80069bc:	4281      	cmp	r1, r0
 80069be:	d20d      	bcs.n	80069dc <Reset_Handler+0xcc>
 80069c0:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <Reset_Handler+0x144>)
 80069c2:	1d08      	adds	r0, r1, #4
 80069c4:	1a12      	subs	r2, r2, r0
 80069c6:	f022 0203 	bic.w	r2, r2, #3
 80069ca:	3204      	adds	r2, #4
 80069cc:	460b      	mov	r3, r1
 80069ce:	440a      	add	r2, r1
 80069d0:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 80069d4:	f843 1b04 	str.w	r1, [r3], #4
 80069d8:	4293      	cmp	r3, r2
 80069da:	d1fb      	bne.n	80069d4 <Reset_Handler+0xc4>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80069dc:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <Reset_Handler+0x148>)
 80069de:	4b1f      	ldr	r3, [pc, #124]	; (8006a5c <Reset_Handler+0x14c>)
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d20d      	bcs.n	8006a00 <Reset_Handler+0xf0>
 80069e4:	43d0      	mvns	r0, r2
 80069e6:	491e      	ldr	r1, [pc, #120]	; (8006a60 <Reset_Handler+0x150>)
 80069e8:	4418      	add	r0, r3
 80069ea:	460b      	mov	r3, r1
 80069ec:	f020 0003 	bic.w	r0, r0, #3
 80069f0:	3004      	adds	r0, #4
 80069f2:	4408      	add	r0, r1
      *dp++ = *tp++;
 80069f4:	f853 1b04 	ldr.w	r1, [r3], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80069f8:	4283      	cmp	r3, r0
      *dp++ = *tp++;
 80069fa:	f842 1b04 	str.w	r1, [r2], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80069fe:	d1f9      	bne.n	80069f4 <Reset_Handler+0xe4>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8006a00:	4918      	ldr	r1, [pc, #96]	; (8006a64 <Reset_Handler+0x154>)
 8006a02:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <Reset_Handler+0x158>)
 8006a04:	4291      	cmp	r1, r2
 8006a06:	d20b      	bcs.n	8006a20 <Reset_Handler+0x110>
 8006a08:	43c8      	mvns	r0, r1
 8006a0a:	4402      	add	r2, r0
 8006a0c:	f022 0203 	bic.w	r2, r2, #3
 8006a10:	3204      	adds	r2, #4
 8006a12:	460b      	mov	r3, r1
 8006a14:	440a      	add	r2, r1
 8006a16:	2100      	movs	r1, #0
 8006a18:	f843 1b04 	str.w	r1, [r3], #4
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d1fb      	bne.n	8006a18 <Reset_Handler+0x108>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8006a20:	4c12      	ldr	r4, [pc, #72]	; (8006a6c <Reset_Handler+0x15c>)
 8006a22:	4d13      	ldr	r5, [pc, #76]	; (8006a70 <Reset_Handler+0x160>)
 8006a24:	42ac      	cmp	r4, r5
 8006a26:	d204      	bcs.n	8006a32 <Reset_Handler+0x122>
      (*fpp)();
 8006a28:	f854 3b04 	ldr.w	r3, [r4], #4
 8006a2c:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8006a2e:	42ac      	cmp	r4, r5
 8006a30:	d3fa      	bcc.n	8006a28 <Reset_Handler+0x118>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 8006a32:	f7f9 fb85 	bl	8000140 <main>
 8006a36:	bf00      	nop
 8006a38:	20000800 	.word	0x20000800
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	40022000 	.word	0x40022000
 8006a44:	00496400 	.word	0x00496400
 8006a48:	20000000 	.word	0x20000000
 8006a4c:	20000400 	.word	0x20000400
 8006a50:	20000400 	.word	0x20000400
 8006a54:	20000803 	.word	0x20000803
 8006a58:	20000800 	.word	0x20000800
 8006a5c:	20000d10 	.word	0x20000d10
 8006a60:	0800b018 	.word	0x0800b018
 8006a64:	20000d10 	.word	0x20000d10
 8006a68:	20002024 	.word	0x20002024
 8006a6c:	08000140 	.word	0x08000140
 8006a70:	08000140 	.word	0x08000140
 8006a74:	f3af 8000 	nop.w
 8006a78:	f3af 8000 	nop.w
 8006a7c:	f3af 8000 	nop.w

08006a80 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006a80:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8006a82:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006a84:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8006a86:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8006a88:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8006a8a:	d00d      	beq.n	8006aa8 <chEvtBroadcastFlagsI+0x28>
    elp->el_flags |= flags;
 8006a8c:	68e3      	ldr	r3, [r4, #12]
 8006a8e:	432b      	orrs	r3, r5
 8006a90:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0))
 8006a92:	b115      	cbz	r5, 8006a9a <chEvtBroadcastFlagsI+0x1a>
 8006a94:	6922      	ldr	r2, [r4, #16]
 8006a96:	4213      	tst	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8006a9a:	6860      	ldr	r0, [r4, #4]
 8006a9c:	68a1      	ldr	r1, [r4, #8]
 8006a9e:	f7ff fea7 	bl	80067f0 <chEvtSignalI>
    elp = elp->el_next;
 8006aa2:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8006aa4:	42a6      	cmp	r6, r4
 8006aa6:	d1f1      	bne.n	8006a8c <chEvtBroadcastFlagsI+0xc>
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <chEvtUnregister>:
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	e002      	b.n	8006ac0 <chEvtUnregister+0x10>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 8006aba:	428b      	cmp	r3, r1
 8006abc:	d007      	beq.n	8006ace <chEvtUnregister+0x1e>
 8006abe:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 8006ac0:	6813      	ldr	r3, [r2, #0]
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	d1f9      	bne.n	8006aba <chEvtUnregister+0xa>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	4770      	bx	lr
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8006ace:	680b      	ldr	r3, [r1, #0]
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	f3af 8000 	nop.w

08006ae0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8006ae0:	b430      	push	{r4, r5}
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	2120      	movs	r1, #32
 8006ae6:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 8006aea:	7f83      	ldrb	r3, [r0, #30]
 8006aec:	2400      	movs	r4, #0
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	7783      	strb	r3, [r0, #30]
 8006af4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 8006af8:	b913      	cbnz	r3, 8006b00 <chThdRelease+0x20>
 8006afa:	7f04      	ldrb	r4, [r0, #28]
 8006afc:	2c0f      	cmp	r4, #15
 8006afe:	d001      	beq.n	8006b04 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8006b00:	bc30      	pop	{r4, r5}
 8006b02:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8006b04:	7f44      	ldrb	r4, [r0, #29]
 8006b06:	f004 0403 	and.w	r4, r4, #3
 8006b0a:	2c01      	cmp	r4, #1
 8006b0c:	d00f      	beq.n	8006b2e <chThdRelease+0x4e>
 8006b0e:	2c02      	cmp	r4, #2
 8006b10:	d1f6      	bne.n	8006b00 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006b12:	6905      	ldr	r5, [r0, #16]
 8006b14:	6944      	ldr	r4, [r0, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8006b16:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006b18:	6125      	str	r5, [r4, #16]
 8006b1a:	6915      	ldr	r5, [r2, #16]
 8006b1c:	616c      	str	r4, [r5, #20]
 8006b1e:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006b22:	6801      	ldr	r1, [r0, #0]
 8006b24:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8006b26:	6002      	str	r2, [r0, #0]
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	e7e8      	b.n	8006b00 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006b2e:	6943      	ldr	r3, [r0, #20]
 8006b30:	6901      	ldr	r1, [r0, #16]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8006b32:	bc30      	pop	{r4, r5}
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8006b34:	6119      	str	r1, [r3, #16]
 8006b36:	6902      	ldr	r2, [r0, #16]
 8006b38:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 8006b3a:	f7ff bc81 	b.w	8006440 <chHeapFree>
 8006b3e:	bf00      	nop

08006b40 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8006b40:	b510      	push	{r4, lr}
 8006b42:	2320      	movs	r3, #32
 8006b44:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 8006b4a:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist)
 8006b4c:	429c      	cmp	r4, r3
    ntp = NULL;
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8006b4e:	bf17      	itett	ne
 8006b50:	7fa3      	ldrbne	r3, [r4, #30]
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
    ntp = NULL;
 8006b52:	2400      	moveq	r4, #0
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8006b54:	3301      	addne	r3, #1
 8006b56:	77a3      	strbne	r3, [r4, #30]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8006b5e:	f7ff ffbf 	bl	8006ae0 <chThdRelease>
#endif
  return ntp;
}
 8006b62:	4620      	mov	r0, r4
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	20001e40 	.word	0x20001e40
 8006b6c:	f3af 8000 	nop.w

08006b70 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	2320      	movs	r3, #32
 8006b74:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8006b78:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <chThdYield+0x54>)
 8006b7a:	6810      	ldr	r0, [r2, #0]
 8006b7c:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8006b7e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8006b80:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8006b82:	428b      	cmp	r3, r1
 8006b84:	d203      	bcs.n	8006b8e <chThdYield+0x1e>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006b8e:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006b90:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006b92:	2600      	movs	r6, #0
 8006b94:	606a      	str	r2, [r5, #4]
 8006b96:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006b98:	7707      	strb	r7, [r0, #28]
 8006b9a:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8006b9c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006b9e:	7726      	strb	r6, [r4, #28]
 8006ba0:	e000      	b.n	8006ba4 <chThdYield+0x34>
 8006ba2:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	4291      	cmp	r1, r2
 8006ba8:	d9fb      	bls.n	8006ba2 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006baa:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8006bac:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006bae:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8006bb0:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8006bb2:	605c      	str	r4, [r3, #4]
 8006bb4:	6014      	str	r4, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8006bb6:	f7f9 fd6b 	bl	8000690 <_port_switch>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20001e40 	.word	0x20001e40
 8006bc8:	f3af 8000 	nop.w
 8006bcc:	f3af 8000 	nop.w

08006bd0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8006bd0:	b4f0      	push	{r4, r5, r6, r7}
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8006bd2:	4c15      	ldr	r4, [pc, #84]	; (8006c28 <chVTDoResetI+0x58>)
 8006bd4:	f64f 76ff 	movw	r6, #65535	; 0xffff

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006bd8:	4623      	mov	r3, r4
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8006bda:	6802      	ldr	r2, [r0, #0]
 8006bdc:	8907      	ldrh	r7, [r0, #8]
 8006bde:	8911      	ldrh	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8006be0:	6845      	ldr	r5, [r0, #4]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8006be2:	4439      	add	r1, r7
 8006be4:	8111      	strh	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8006be6:	602a      	str	r2, [r5, #0]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006be8:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8006bec:	6807      	ldr	r7, [r0, #0]
  vtp->vt_func = (vtfunc_t)NULL;
 8006bee:	2100      	movs	r1, #0
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006bf0:	429a      	cmp	r2, r3
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8006bf2:	607d      	str	r5, [r7, #4]
  vtp->vt_func = (vtfunc_t)NULL;
 8006bf4:	60c1      	str	r1, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8006bf6:	84a6      	strh	r6, [r4, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8006bf8:	d011      	beq.n	8006c1e <chVTDoResetI+0x4e>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8006bfa:	8912      	ldrh	r2, [r2, #8]
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8006bfc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8006bfe:	2a01      	cmp	r2, #1
 8006c00:	d906      	bls.n	8006c10 <chVTDoResetI+0x40>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8006c02:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	634b      	str	r3, [r1, #52]	; 0x34
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8006c0e:	4770      	bx	lr
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      else
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8006c10:	3302      	adds	r3, #2
 8006c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	6353      	str	r3, [r2, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8006c1c:	4770      	bx	lr
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8006c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c22:	60d9      	str	r1, [r3, #12]
 8006c24:	e7f2      	b.n	8006c0c <chVTDoResetI+0x3c>
 8006c26:	bf00      	nop
 8006c28:	20001e40 	.word	0x20001e40
 8006c2c:	f3af 8000 	nop.w

08006c30 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8006c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8006c32:	4e1e      	ldr	r6, [pc, #120]	; (8006cac <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8006c34:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8006c38:	4637      	mov	r7, r6
 8006c3a:	f857 4f1c 	ldr.w	r4, [r7, #28]!
 8006c3e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;
 8006c42:	2901      	cmp	r1, #1
 8006c44:	bf98      	it	ls
 8006c46:	2102      	movls	r1, #2

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8006c48:	42bc      	cmp	r4, r7

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8006c4a:	60c2      	str	r2, [r0, #12]
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8006c4c:	6103      	str	r3, [r0, #16]
 8006c4e:	b2aa      	uxth	r2, r5
    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8006c50:	d01f      	beq.n	8006c92 <chVTDoSetI+0x62>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8006c52:	8cf5      	ldrh	r5, [r6, #38]	; 0x26

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8006c54:	8923      	ldrh	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8006c56:	1b52      	subs	r2, r2, r5
 8006c58:	4411      	add	r1, r2
 8006c5a:	b289      	uxth	r1, r1

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	d204      	bcs.n	8006c6a <chVTDoSetI+0x3a>
 8006c60:	e012      	b.n	8006c88 <chVTDoSetI+0x58>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
    p = p->vt_next;
 8006c62:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 8006c64:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8006c66:	8923      	ldrh	r3, [r4, #8]
    delay -= p->vt_delta;
 8006c68:	b289      	uxth	r1, r1
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8006c6a:	428b      	cmp	r3, r1
 8006c6c:	d3f9      	bcc.n	8006c62 <chVTDoSetI+0x32>
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
  ch.vtlist.vt_delta = (systime_t)-1;
 8006c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	6004      	str	r4, [r0, #0]
 8006c76:	6043      	str	r3, [r0, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8006c78:	6060      	str	r0, [r4, #4]
 8006c7a:	6018      	str	r0, [r3, #0]
  vtp->vt_delta = delay
 8006c7c:	8101      	strh	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8006c7e:	8923      	ldrh	r3, [r4, #8]
 8006c80:	1a59      	subs	r1, r3, r1
 8006c82:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8006c84:	84b2      	strh	r2, [r6, #36]	; 0x24
 8006c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8006c88:	440d      	add	r5, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c8a:	b2ad      	uxth	r5, r5
 8006c8c:	f8ce 5034 	str.w	r5, [lr, #52]	; 0x34
 8006c90:	e7eb      	b.n	8006c6a <chVTDoSetI+0x3a>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8006c92:	188b      	adds	r3, r1, r2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c94:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8006c96:	2700      	movs	r7, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006c98:	2502      	movs	r5, #2
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8006c9a:	84f2      	strh	r2, [r6, #38]	; 0x26
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006c9c:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8006ca0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  STM32_ST_TIM->SR     = 0;
 8006ca2:	f8ce 7010 	str.w	r7, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8006ca6:	f8ce 500c 	str.w	r5, [lr, #12]
 8006caa:	e7de      	b.n	8006c6a <chVTDoSetI+0x3a>
 8006cac:	20001e40 	.word	0x20001e40

08006cb0 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8006cb0:	f7ff be0e 	b.w	80068d0 <chSchDoRescheduleAhead>
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	f3af 8000 	nop.w
 8006cbc:	f3af 8000 	nop.w

08006cc0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <chSchRescheduleS+0x14>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
 8006cc6:	6892      	ldr	r2, [r2, #8]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d800      	bhi.n	8006cd0 <chSchRescheduleS+0x10>
 8006cce:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8006cd0:	f7ff bdfe 	b.w	80068d0 <chSchDoRescheduleAhead>
 8006cd4:	20001e40 	.word	0x20001e40
 8006cd8:	f3af 8000 	nop.w
 8006cdc:	f3af 8000 	nop.w

08006ce0 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	2320      	movs	r3, #32
 8006ce4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8006ce8:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <chThdSetPriority+0x2c>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
 8006cee:	6899      	ldr	r1, [r3, #8]
 8006cf0:	428c      	cmp	r4, r1
 8006cf2:	d001      	beq.n	8006cf8 <chThdSetPriority+0x18>
 8006cf4:	4281      	cmp	r1, r0
 8006cf6:	d200      	bcs.n	8006cfa <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8006cf8:	6098      	str	r0, [r3, #8]
  currp->p_realprio = newprio;
 8006cfa:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8006cfc:	f7ff ffe0 	bl	8006cc0 <chSchRescheduleS>
 8006d00:	2300      	movs	r3, #0
 8006d02:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return oldprio;
}
 8006d06:	4620      	mov	r0, r4
 8006d08:	bd10      	pop	{r4, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20001e40 	.word	0x20001e40

08006d10 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006d10:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8006d12:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006d14:	699e      	ldr	r6, [r3, #24]
 8006d16:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8006d18:	4605      	mov	r5, r0

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8006d1a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8006d1c:	68b0      	ldr	r0, [r6, #8]
 8006d1e:	4284      	cmp	r4, r0
 8006d20:	d80c      	bhi.n	8006d3c <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006d22:	2200      	movs	r2, #0
 8006d24:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8006d26:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	4294      	cmp	r4, r2
 8006d2c:	d9fb      	bls.n	8006d26 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006d2e:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8006d30:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8006d32:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8006d34:	605d      	str	r5, [r3, #4]
 8006d36:	6015      	str	r5, [r2, #0]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8006d38:	bcf0      	pop	{r4, r5, r6, r7}
 8006d3a:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8006d3c:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8006d3e:	2100      	movs	r1, #0
 8006d40:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8006d42:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8006d44:	6891      	ldr	r1, [r2, #8]
 8006d46:	4288      	cmp	r0, r1
 8006d48:	d9fb      	bls.n	8006d42 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006d4a:	6854      	ldr	r4, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8006d4c:	2701      	movs	r7, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006d4e:	e886 0014 	stmia.w	r6, {r2, r4}
  tp->p_prev->p_next = cp->p_prev = tp;
 8006d52:	6056      	str	r6, [r2, #4]
 8006d54:	6026      	str	r6, [r4, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8006d56:	772f      	strb	r7, [r5, #28]
    chSysSwitch(ntp, otp);
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8006d5c:	619d      	str	r5, [r3, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8006d5e:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8006d60:	f7f9 bc96 	b.w	8000690 <_port_switch>
 8006d64:	20001e40 	.word	0x20001e40
 8006d68:	f3af 8000 	nop.w
 8006d6c:	f3af 8000 	nop.w

08006d70 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8006d70:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8006d72:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8006d74:	699d      	ldr	r5, [r3, #24]
 8006d76:	2320      	movs	r3, #32
 8006d78:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8006d7c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8006d7e:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006d80:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8006d82:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8006d84:	d01c      	beq.n	8006dc0 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8006d86:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8006d88:	b14b      	cbz	r3, 8006d9e <chMtxUnlock+0x2e>
 8006d8a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <chMtxUnlock+0x28>
 8006d90:	6892      	ldr	r2, [r2, #8]
 8006d92:	4291      	cmp	r1, r2
 8006d94:	bf38      	it	cc
 8006d96:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8006d98:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f5      	bne.n	8006d8a <chMtxUnlock+0x1a>
 8006d9e:	4603      	mov	r3, r0
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8006da0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006da2:	6822      	ldr	r2, [r4, #0]
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8006da4:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8006da6:	60a9      	str	r1, [r5, #8]
 8006da8:	601a      	str	r2, [r3, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8006daa:	2100      	movs	r1, #0
 8006dac:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8006dae:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8006db0:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8006db2:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8006db4:	f7ff ffac 	bl	8006d10 <chSchWakeupS>
 8006db8:	2300      	movs	r3, #0
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
      mp->m_owner = NULL;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6083      	str	r3, [r0, #8]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	20001e40 	.word	0x20001e40

08006dd0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8006dd0:	b508      	push	{r3, lr}
 8006dd2:	2320      	movs	r3, #32
 8006dd4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0)
 8006dd8:	6883      	ldr	r3, [r0, #8]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	6083      	str	r3, [r0, #8]
 8006de0:	dd03      	ble.n	8006dea <chSemSignal+0x1a>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	bd08      	pop	{r3, pc}
 8006dea:	4603      	mov	r3, r0
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006dec:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8006dee:	2100      	movs	r1, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	6053      	str	r3, [r2, #4]
 8006df6:	f7ff ff8b 	bl	8006d10 <chSchWakeupS>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	bd08      	pop	{r3, pc}
 8006e02:	bf00      	nop
 8006e04:	f3af 8000 	nop.w
 8006e08:	f3af 8000 	nop.w
 8006e0c:	f3af 8000 	nop.w

08006e10 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8006e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	4690      	mov	r8, r2
 8006e16:	4699      	mov	r9, r3
 8006e18:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8006e1a:	f7ff fb59 	bl	80064d0 <chHeapAlloc>
  if (wsp == NULL)
 8006e1e:	4604      	mov	r4, r0
 8006e20:	b3b0      	cbz	r0, 8006e90 <chThdCreateFromHeap+0x80>
 8006e22:	2320      	movs	r3, #32
 8006e24:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e28:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006e98 <chThdCreateFromHeap+0x88>

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e2c:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 8006e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e32:	f8de 3014 	ldr.w	r3, [lr, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e36:	eb00 0c01 	add.w	ip, r0, r1
 8006e3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006e9c <chThdCreateFromHeap+0x8c>
 8006e3e:	f8c0 c00c 	str.w	ip, [r0, #12]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006e42:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e44:	f840 9001 	str.w	r9, [r0, r1]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8006e48:	f100 0628 	add.w	r6, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e4c:	f8cc 2004 	str.w	r2, [ip, #4]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8006e50:	f100 0724 	add.w	r7, r0, #36	; 0x24
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006e54:	2201      	movs	r2, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006e56:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006e5a:	f8cc b020 	str.w	fp, [ip, #32]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8006e5e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006e60:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e64:	f8c0 e010 	str.w	lr, [r0, #16]
 8006e68:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8006e6a:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006e6e:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006e72:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8006e74:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8006e76:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006e78:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006e7a:	f8ce 0014 	str.w	r0, [lr, #20]
 8006e7e:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006e80:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8006e82:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8006e84:	62c6      	str	r6, [r0, #44]	; 0x2c
 8006e86:	6286      	str	r6, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8006e88:	f7ff ff42 	bl	8006d10 <chSchWakeupS>
 8006e8c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8006e90:	4620      	mov	r0, r4
 8006e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	bf00      	nop
 8006e98:	20001e40 	.word	0x20001e40
 8006e9c:	080006a1 	.word	0x080006a1

08006ea0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8006ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea4:	4699      	mov	r9, r3
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006eae:	4e19      	ldr	r6, [pc, #100]	; (8006f14 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006eb0:	3924      	subs	r1, #36	; 0x24
 8006eb2:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006eb4:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006eb6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8006f18 <chThdCreateStatic+0x78>
 8006eba:	60c7      	str	r7, [r0, #12]
 8006ebc:	f840 9001 	str.w	r9, [r0, r1]
 8006ec0:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006ec2:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8006ec4:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006ec8:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8006ecc:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006ed0:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8006ed4:	6079      	str	r1, [r7, #4]
 8006ed6:	f8c7 a020 	str.w	sl, [r7, #32]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8006eda:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8006edc:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006ede:	6106      	str	r6, [r0, #16]
 8006ee0:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8006ee2:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8006ee4:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8006ee8:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8006eec:	7745      	strb	r5, [r0, #29]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8006eee:	6170      	str	r0, [r6, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8006ef0:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8006ef2:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8006ef4:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8006ef6:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8006ef8:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8006efc:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8006f00:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8006f04:	f7ff ff04 	bl	8006d10 <chSchWakeupS>
 8006f08:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f12:	bf00      	nop
 8006f14:	20001e40 	.word	0x20001e40
 8006f18:	080006a1 	.word	0x080006a1
 8006f1c:	f3af 8000 	nop.w

08006f20 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8006f20:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8006f22:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8006f24:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8006f26:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006f28:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006f2a:	2501      	movs	r5, #1
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8006f2c:	7708      	strb	r0, [r1, #28]
 8006f2e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8006f30:	7715      	strb	r5, [r2, #28]
 8006f32:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8006f34:	4610      	mov	r0, r2
}
 8006f36:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8006f38:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8006f3a:	f7f9 bba9 	b.w	8000690 <_port_switch>
 8006f3e:	bf00      	nop
 8006f40:	20001e40 	.word	0x20001e40
 8006f44:	f3af 8000 	nop.w
 8006f48:	f3af 8000 	nop.w
 8006f4c:	f3af 8000 	nop.w

08006f50 <chSemWait>:
 8006f50:	2320      	movs	r3, #32
 8006f52:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8006f56:	6883      	ldr	r3, [r0, #8]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	6083      	str	r3, [r0, #8]
 8006f5e:	db04      	blt.n	8006f6a <chSemWait+0x1a>
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
    return currp->p_u.rdymsg;
  }
  return MSG_OK;
 8006f60:	2000      	movs	r0, #0
 8006f62:	2300      	movs	r3, #0
 8006f64:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8006f68:	4770      	bx	lr
 8006f6a:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8006f6c:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8006f6e:	4c08      	ldr	r4, [pc, #32]	; (8006f90 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8006f70:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8006f72:	69a2      	ldr	r2, [r4, #24]
 8006f74:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8006f76:	6859      	ldr	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8006f78:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8006f7a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8006f80:	f7ff ffce 	bl	8006f20 <chSchGoSleepS>
    return currp->p_u.rdymsg;
 8006f84:	69a3      	ldr	r3, [r4, #24]
 8006f86:	6a18      	ldr	r0, [r3, #32]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8006f8e:	bd10      	pop	{r4, pc}
 8006f90:	20001e40 	.word	0x20001e40
 8006f94:	f3af 8000 	nop.w
 8006f98:	f3af 8000 	nop.w
 8006f9c:	f3af 8000 	nop.w

08006fa0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 8006faa:	7f03      	ldrb	r3, [r0, #28]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d007      	beq.n	8006fc0 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8006fb0:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8006fb2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006fb4:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8006fb6:	2009      	movs	r0, #9
 8006fb8:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 8006fba:	6263      	str	r3, [r4, #36]	; 0x24
 8006fbc:	f7ff ffb0 	bl	8006f20 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8006fc0:	6a25      	ldr	r5, [r4, #32]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff fd89 	bl	8006ae0 <chThdRelease>
#endif
  return msg;
}
 8006fce:	4628      	mov	r0, r5
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20001e40 	.word	0x20001e40
 8006fd8:	f3af 8000 	nop.w
 8006fdc:	f3af 8000 	nop.w

08006fe0 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8006fe4:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006fe6:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8006fe8:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8006fea:	d012      	beq.n	8007012 <chSchGoSleepTimeoutS+0x32>
 8006fec:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8006fee:	4c0c      	ldr	r4, [pc, #48]	; (8007020 <chSchGoSleepTimeoutS+0x40>)
 8006ff0:	a801      	add	r0, sp, #4
 8006ff2:	69a3      	ldr	r3, [r4, #24]
 8006ff4:	4a0b      	ldr	r2, [pc, #44]	; (8007024 <chSchGoSleepTimeoutS+0x44>)
 8006ff6:	f7ff fe1b 	bl	8006c30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7ff ff90 	bl	8006f20 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8007000:	9b04      	ldr	r3, [sp, #16]
 8007002:	b113      	cbz	r3, 800700a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8007004:	a801      	add	r0, sp, #4
 8007006:	f7ff fde3 	bl	8006bd0 <chVTDoResetI>
  }
  else
    chSchGoSleepS(newstate);
  return currp->p_u.rdymsg;
 800700a:	69a3      	ldr	r3, [r4, #24]
}
 800700c:	6a18      	ldr	r0, [r3, #32]
 800700e:	b007      	add	sp, #28
 8007010:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8007012:	f7ff ff85 	bl	8006f20 <chSchGoSleepS>
 8007016:	4c02      	ldr	r4, [pc, #8]	; (8007020 <chSchGoSleepTimeoutS+0x40>)
  return currp->p_u.rdymsg;
 8007018:	69a3      	ldr	r3, [r4, #24]
}
 800701a:	6a18      	ldr	r0, [r3, #32]
 800701c:	b007      	add	sp, #28
 800701e:	bd30      	pop	{r4, r5, pc}
 8007020:	20001e40 	.word	0x20001e40
 8007024:	08006821 	.word	0x08006821
 8007028:	f3af 8000 	nop.w
 800702c:	f3af 8000 	nop.w

08007030 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8007030:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8007032:	6880      	ldr	r0, [r0, #8]
 8007034:	1e42      	subs	r2, r0, #1
 8007036:	2a00      	cmp	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
 800703a:	db01      	blt.n	8007040 <chSemWaitTimeoutS+0x10>
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
 800703c:	2000      	movs	r0, #0
 800703e:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8007040:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8007042:	b161      	cbz	r1, 800705e <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8007044:	4a09      	ldr	r2, [pc, #36]	; (800706c <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8007046:	2005      	movs	r0, #5
  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8007048:	6992      	ldr	r2, [r2, #24]
 800704a:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800704c:	685c      	ldr	r4, [r3, #4]
 800704e:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8007056:	f85d 4b04 	ldr.w	r4, [sp], #4
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 800705a:	f7ff bfc1 	b.w	8006fe0 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 800705e:	6098      	str	r0, [r3, #8]
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8007060:	f85d 4b04 	ldr.w	r4, [sp], #4
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20001e40 	.word	0x20001e40

08007070 <chSemWaitTimeout>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8007070:	b508      	push	{r3, lr}
 8007072:	2320      	movs	r3, #32
 8007074:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8007078:	f7ff ffda 	bl	8007030 <chSemWaitTimeoutS>
 800707c:	2300      	movs	r3, #0
 800707e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8007082:	bd08      	pop	{r3, pc}
 8007084:	f3af 8000 	nop.w
 8007088:	f3af 8000 	nop.w
 800708c:	f3af 8000 	nop.w

08007090 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout)
 8007090:	b169      	cbz	r1, 80070ae <chThdEnqueueTimeoutS+0x1e>
 8007092:	4602      	mov	r2, r0
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8007096:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8007098:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800709a:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800709c:	2004      	movs	r0, #4
 800709e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 80070a2:	6053      	str	r3, [r2, #4]
 80070a4:	6023      	str	r3, [r4, #0]
}
 80070a6:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80070aa:	f7ff bf99 	b.w	8006fe0 <chSchGoSleepTimeoutS>
}
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	4770      	bx	lr
 80070b4:	20001e40 	.word	0x20001e40
 80070b8:	f3af 8000 	nop.w
 80070bc:	f3af 8000 	nop.w

080070c0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80070c0:	b508      	push	{r3, lr}
 80070c2:	4601      	mov	r1, r0
 80070c4:	2320      	movs	r3, #32
 80070c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80070ca:	2008      	movs	r0, #8
 80070cc:	f7ff ff88 	bl	8006fe0 <chSchGoSleepTimeoutS>
 80070d0:	2300      	movs	r3, #0
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	bd08      	pop	{r3, pc}
 80070d8:	f3af 8000 	nop.w
 80070dc:	f3af 8000 	nop.w

080070e0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80070e0:	b410      	push	{r4}
 80070e2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80070e4:	2200      	movs	r2, #0
 80070e6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80070e8:	4b07      	ldr	r3, [pc, #28]	; (8007108 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80070ea:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80070ec:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	428a      	cmp	r2, r1
 80070f2:	d2fb      	bcs.n	80070ec <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80070f4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
  return tp;
}
 80070f6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80070f8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80070fa:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80070fc:	605c      	str	r4, [r3, #4]
 80070fe:	6014      	str	r4, [r2, #0]
  return tp;
}
 8007100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20001e40 	.word	0x20001e40
 800710c:	f3af 8000 	nop.w

08007110 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8007110:	4a13      	ldr	r2, [pc, #76]	; (8007160 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8007112:	b570      	push	{r4, r5, r6, lr}
 8007114:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8007116:	6994      	ldr	r4, [r2, #24]
 8007118:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 800711c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800711e:	b1d3      	cbz	r3, 8007156 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8007120:	2600      	movs	r6, #0
 8007122:	e00b      	b.n	800713c <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8007124:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8007126:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 8007128:	4610      	mov	r0, r2
 800712a:	6019      	str	r1, [r3, #0]
 800712c:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 800712e:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8007130:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8007132:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 8007134:	f7ff ffd4 	bl	80070e0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8007138:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800713a:	b143      	cbz	r3, 800714e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800713c:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 800713e:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8007140:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8007142:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8007144:	d1ee      	bne.n	8007124 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8007146:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8007148:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f6      	bne.n	800713c <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 800714e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007150:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8007152:	f7ff fdb5 	bl	8006cc0 <chSchRescheduleS>
 8007156:	2300      	movs	r3, #0
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	bf00      	nop
 8007160:	20001e40 	.word	0x20001e40
 8007164:	f3af 8000 	nop.w
 8007168:	f3af 8000 	nop.w
 800716c:	f3af 8000 	nop.w

08007170 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8007170:	b430      	push	{r4, r5}
 8007172:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8007174:	4a11      	ldr	r2, [pc, #68]	; (80071bc <chMtxUnlockS+0x4c>)
 8007176:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8007178:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800717a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800717c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800717e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8007180:	d017      	beq.n	80071b2 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8007182:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8007184:	b14b      	cbz	r3, 800719a <chMtxUnlockS+0x2a>
 8007186:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <chMtxUnlockS+0x24>
 800718c:	6892      	ldr	r2, [r2, #8]
 800718e:	4291      	cmp	r1, r2
 8007190:	bf38      	it	cc
 8007192:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8007194:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1f5      	bne.n	8007186 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800719a:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800719c:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800719e:	6081      	str	r1, [r0, #8]
 80071a0:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 80071a2:	4628      	mov	r0, r5
 80071a4:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 80071a6:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 80071a8:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 80071aa:	63ac      	str	r4, [r5, #56]	; 0x38
    else
      mp->m_owner = NULL;
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 80071ac:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 80071ae:	f7ff bf97 	b.w	80070e0 <chSchReadyI>
    }
    else
      mp->m_owner = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60a3      	str	r3, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 80071b6:	bc30      	pop	{r4, r5}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20001e40 	.word	0x20001e40

080071c0 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80071c2:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80071c4:	4b2f      	ldr	r3, [pc, #188]	; (8007284 <chMtxLockS+0xc4>)
 80071c6:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 80071c8:	2a00      	cmp	r2, #0
 80071ca:	d055      	beq.n	8007278 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80071cc:	68a1      	ldr	r1, [r4, #8]
 80071ce:	6893      	ldr	r3, [r2, #8]
 80071d0:	4605      	mov	r5, r0
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d906      	bls.n	80071e4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80071d6:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 80071d8:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d033      	beq.n	8007246 <chMtxLockS+0x86>
 80071de:	2b07      	cmp	r3, #7
 80071e0:	d01d      	beq.n	800721e <chMtxLockS+0x5e>
 80071e2:	b19b      	cbz	r3, 800720c <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80071e4:	462b      	mov	r3, r5
 80071e6:	e003      	b.n	80071f0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80071e8:	6899      	ldr	r1, [r3, #8]
 80071ea:	68a2      	ldr	r2, [r4, #8]
 80071ec:	4291      	cmp	r1, r2
 80071ee:	d302      	bcc.n	80071f6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80071f0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80071f2:	429d      	cmp	r5, r3
 80071f4:	d1f8      	bne.n	80071e8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80071f6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80071f8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80071fa:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80071fc:	605c      	str	r4, [r3, #4]
 80071fe:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 8007200:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 8007202:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8007204:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8007208:	f7ff be8a 	b.w	8006f20 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800720c:	e892 000a 	ldmia.w	r2, {r1, r3}
 8007210:	6019      	str	r1, [r3, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 8007212:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	6053      	str	r3, [r2, #4]
 8007218:	f7ff ff62 	bl	80070e0 <chSchReadyI>
 800721c:	e7e2      	b.n	80071e4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800721e:	6817      	ldr	r7, [r2, #0]
 8007220:	6850      	ldr	r0, [r2, #4]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 8007222:	6a16      	ldr	r6, [r2, #32]
 8007224:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 8007226:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8007228:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	e002      	b.n	8007234 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800722e:	6898      	ldr	r0, [r3, #8]
 8007230:	4288      	cmp	r0, r1
 8007232:	d302      	bcc.n	800723a <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8007234:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8007236:	429e      	cmp	r6, r3
 8007238:	d1f9      	bne.n	800722e <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800723a:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800723c:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 800723e:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	600a      	str	r2, [r1, #0]
 8007244:	e7ce      	b.n	80071e4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8007246:	6817      	ldr	r7, [r2, #0]
 8007248:	6850      	ldr	r0, [r2, #4]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 800724a:	6a16      	ldr	r6, [r2, #32]
 800724c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800724e:	6817      	ldr	r7, [r2, #0]
 8007250:	4633      	mov	r3, r6
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	e002      	b.n	800725c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8007256:	6898      	ldr	r0, [r3, #8]
 8007258:	4288      	cmp	r0, r1
 800725a:	d302      	bcc.n	8007262 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800725c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800725e:	429e      	cmp	r6, r3
 8007260:	d1f9      	bne.n	8007256 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8007262:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8007264:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8007266:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	600a      	str	r2, [r1, #0]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 800726c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800726e:	68a1      	ldr	r1, [r4, #8]
 8007270:	6893      	ldr	r3, [r2, #8]
 8007272:	428b      	cmp	r3, r1
 8007274:	d3af      	bcc.n	80071d6 <chMtxLockS+0x16>
 8007276:	e7b5      	b.n	80071e4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8007278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800727a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800727c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800727e:	63a0      	str	r0, [r4, #56]	; 0x38
 8007280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007282:	bf00      	nop
 8007284:	20001e40 	.word	0x20001e40
 8007288:	f3af 8000 	nop.w
 800728c:	f3af 8000 	nop.w

08007290 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8007290:	b508      	push	{r3, lr}
 8007292:	2320      	movs	r3, #32
 8007294:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  chMtxLockS(mp);
 8007298:	f7ff ff92 	bl	80071c0 <chMtxLockS>
 800729c:	2300      	movs	r3, #0
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	bd08      	pop	{r3, pc}
 80072a4:	f3af 8000 	nop.w
 80072a8:	f3af 8000 	nop.w
 80072ac:	f3af 8000 	nop.w

080072b0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 80072b0:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 80072b2:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 80072b4:	3301      	adds	r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	6083      	str	r3, [r0, #8]
 80072ba:	dd00      	ble.n	80072be <chSemSignalI+0xe>
 80072bc:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80072be:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 80072c0:	b410      	push	{r4}

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80072c2:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 80072c4:	2400      	movs	r4, #0
 80072c6:	6011      	str	r1, [r2, #0]
 80072c8:	604a      	str	r2, [r1, #4]
 80072ca:	621c      	str	r4, [r3, #32]
    chSchReadyI(tp);
 80072cc:	4618      	mov	r0, r3
  }
}
 80072ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 80072d2:	f7ff bf05 	b.w	80070e0 <chSchReadyI>
 80072d6:	bf00      	nop
 80072d8:	f3af 8000 	nop.w
 80072dc:	f3af 8000 	nop.w

080072e0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 80072e0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 80072e2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 80072e4:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0)
 80072e6:	3501      	adds	r5, #1
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	dc0c      	bgt.n	8007306 <chSemResetI+0x26>
 80072ec:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80072ee:	f06f 0601 	mvn.w	r6, #1
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 80072f2:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 80072f4:	3501      	adds	r5, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 80072f6:	6843      	ldr	r3, [r0, #4]
 80072f8:	6063      	str	r3, [r4, #4]
 80072fa:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 80072fc:	f7ff fef0 	bl	80070e0 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8007300:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8007302:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8007304:	d1f5      	bne.n	80072f2 <chSemResetI+0x12>
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	f3af 8000 	nop.w
 800730c:	f3af 8000 	nop.w

08007310 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8007310:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8007312:	6803      	ldr	r3, [r0, #0]
 8007314:	4604      	mov	r4, r0

  while (queue_notempty(tqp))
 8007316:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8007318:	460d      	mov	r5, r1

  while (queue_notempty(tqp))
 800731a:	d009      	beq.n	8007330 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800731c:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  chSchReadyI(tp);
 800731e:	4618      	mov	r0, r3
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8007324:	621d      	str	r5, [r3, #32]
  chSchReadyI(tp);
 8007326:	f7ff fedb 	bl	80070e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	429c      	cmp	r4, r3
 800732e:	d1f5      	bne.n	800731c <chThdDequeueAllI+0xc>
 8007330:	bd38      	pop	{r3, r4, r5, pc}
 8007332:	bf00      	nop
 8007334:	f3af 8000 	nop.w
 8007338:	f3af 8000 	nop.w
 800733c:	f3af 8000 	nop.w

08007340 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8007340:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8007342:	4b0e      	ldr	r3, [pc, #56]	; (800737c <chThdExitS+0x3c>)
 8007344:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8007346:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8007348:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800734c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 800734e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8007350:	d007      	beq.n	8007362 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8007352:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(list_remove(&tp->p_waiting));
 8007354:	4618      	mov	r0, r3
 8007356:	6262      	str	r2, [r4, #36]	; 0x24
 8007358:	f7ff fec2 	bl	80070e0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800735c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 800735e:	42ab      	cmp	r3, r5
 8007360:	d1f7      	bne.n	8007352 <chThdExitS+0x12>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
 8007362:	7f63      	ldrb	r3, [r4, #29]
 8007364:	079b      	lsls	r3, r3, #30
 8007366:	d104      	bne.n	8007372 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8007368:	6922      	ldr	r2, [r4, #16]
 800736a:	6963      	ldr	r3, [r4, #20]
 800736c:	611a      	str	r2, [r3, #16]
 800736e:	6922      	ldr	r2, [r4, #16]
 8007370:	6153      	str	r3, [r2, #20]
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8007372:	200f      	movs	r0, #15
  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8007374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8007378:	f7ff bdd2 	b.w	8006f20 <chSchGoSleepS>
 800737c:	20001e40 	.word	0x20001e40

08007380 <chThdExit>:
 8007380:	2320      	movs	r3, #32
 8007382:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8007386:	f7ff bfdb 	b.w	8007340 <chThdExitS>
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w

08007390 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8007390:	4b0e      	ldr	r3, [pc, #56]	; (80073cc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8007392:	490f      	ldr	r1, [pc, #60]	; (80073d0 <chTMStopMeasurementX+0x40>)
 8007394:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8007396:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8007398:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800739e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 80073a0:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80073a2:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80073a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80073a8:	18e4      	adds	r4, r4, r3
 80073aa:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80073ae:	3201      	adds	r2, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 80073b0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80073b2:	60c2      	str	r2, [r0, #12]
  tmp->last = now - tmp->last - offset;
 80073b4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80073b6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst)
 80073ba:	d805      	bhi.n	80073c8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  else if (tmp->last < tmp->best)
 80073bc:	6802      	ldr	r2, [r0, #0]
 80073be:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 80073c0:	bf38      	it	cc
 80073c2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80073c4:	bc30      	pop	{r4, r5}
 80073c6:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
    tmp->worst = tmp->last;
 80073c8:	6043      	str	r3, [r0, #4]
 80073ca:	e7fb      	b.n	80073c4 <chTMStopMeasurementX+0x34>
 80073cc:	e0001000 	.word	0xe0001000
 80073d0:	20001e40 	.word	0x20001e40
 80073d4:	f3af 8000 	nop.w
 80073d8:	f3af 8000 	nop.w
 80073dc:	f3af 8000 	nop.w

080073e0 <_port_irq_epilogue>:
 80073e0:	2320      	movs	r3, #32
 80073e2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 80073e6:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <_port_irq_epilogue+0x44>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80073ee:	d102      	bne.n	80073f6 <_port_irq_epilogue+0x16>
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80073f6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80073fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073fe:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8007402:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8007406:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800740a:	4a07      	ldr	r2, [pc, #28]	; (8007428 <_port_irq_epilogue+0x48>)
 800740c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800740e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8007410:	6889      	ldr	r1, [r1, #8]
 8007412:	6892      	ldr	r2, [r2, #8]
 8007414:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8007416:	bf8c      	ite	hi
 8007418:	4a04      	ldrhi	r2, [pc, #16]	; (800742c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800741a:	4a05      	ldrls	r2, [pc, #20]	; (8007430 <_port_irq_epilogue+0x50>)
 800741c:	f843 2c08 	str.w	r2, [r3, #-8]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	e000ed00 	.word	0xe000ed00
 8007428:	20001e40 	.word	0x20001e40
 800742c:	080006af 	.word	0x080006af
 8007430:	080006b2 	.word	0x080006b2
 8007434:	f3af 8000 	nop.w
 8007438:	f3af 8000 	nop.w
 800743c:	f3af 8000 	nop.w

08007440 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8007440:	e7fe      	b.n	8007440 <BusFault_Handler>
 8007442:	bf00      	nop
 8007444:	f3af 8000 	nop.w
 8007448:	f3af 8000 	nop.w
 800744c:	f3af 8000 	nop.w

08007450 <gpt_lld_serve_interrupt>:
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8007450:	7801      	ldrb	r1, [r0, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8007452:	68c3      	ldr	r3, [r0, #12]
 8007454:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8007456:	2904      	cmp	r1, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8007458:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 800745a:	d107      	bne.n	800746c <gpt_lld_serve_interrupt+0x1c>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 800745c:	2102      	movs	r1, #2
 800745e:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8007460:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8007462:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800746a:	60da      	str	r2, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 800746c:	6843      	ldr	r3, [r0, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4718      	bx	r3
 8007472:	bf00      	nop
 8007474:	f3af 8000 	nop.w
 8007478:	f3af 8000 	nop.w
 800747c:	f3af 8000 	nop.w

08007480 <spi_lld_serve_tx_interrupt.lto_priv.76>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8007480:	070b      	lsls	r3, r1, #28
 8007482:	d400      	bmi.n	8007486 <spi_lld_serve_tx_interrupt.lto_priv.76+0x6>
 8007484:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007486:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8007488:	4b01      	ldr	r3, [pc, #4]	; (8007490 <spi_lld_serve_tx_interrupt.lto_priv.76+0x10>)
 800748a:	4a02      	ldr	r2, [pc, #8]	; (8007494 <spi_lld_serve_tx_interrupt.lto_priv.76+0x14>)
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
 800748e:	e7fe      	b.n	800748e <spi_lld_serve_tx_interrupt.lto_priv.76+0xe>
 8007490:	20001e40 	.word	0x20001e40
 8007494:	0800ab20 	.word	0x0800ab20
 8007498:	f3af 8000 	nop.w
 800749c:	f3af 8000 	nop.w

080074a0 <Vector8C>:
 */
CH_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  CH_IRQ_PROLOGUE();

  CH_IRQ_EPILOGUE();
 80074a0:	f7ff bf9e 	b.w	80073e0 <_port_irq_epilogue>
 80074a4:	f3af 8000 	nop.w
 80074a8:	f3af 8000 	nop.w
 80074ac:	f3af 8000 	nop.w

080074b0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80074b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 80074b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80074b8:	2700      	movs	r7, #0
 80074ba:	6127      	str	r7, [r4, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80074bc:	2520      	movs	r5, #32
 80074be:	f385 8811 	msr	BASEPRI, r5
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 80074c2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800755c <VectorB0+0xac>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80074c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074c8:	f8b8 e026 	ldrh.w	lr, [r8, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 80074cc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80074d0:	b289      	uxth	r1, r1
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 80074d2:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 80074d6:	891a      	ldrh	r2, [r3, #8]
 80074d8:	b280      	uxth	r0, r0
 80074da:	4290      	cmp	r0, r2
 80074dc:	f108 061c 	add.w	r6, r8, #28
 80074e0:	d31a      	bcc.n	8007518 <VectorB0+0x68>
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80074e2:	6819      	ldr	r1, [r3, #0]
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
      break;

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80074e4:	4472      	add	r2, lr
 80074e6:	f8a8 2026 	strh.w	r2, [r8, #38]	; 0x26

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80074ea:	68da      	ldr	r2, [r3, #12]
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80074ec:	604e      	str	r6, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80074ee:	f8c8 101c 	str.w	r1, [r8, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 80074f2:	60df      	str	r7, [r3, #12]
 80074f4:	f387 8811 	msr	BASEPRI, r7

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 80074f8:	6918      	ldr	r0, [r3, #16]
 80074fa:	4790      	blx	r2
 80074fc:	f385 8811 	msr	BASEPRI, r5
 8007500:	6a61      	ldr	r1, [r4, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8007502:	f8b8 e026 	ldrh.w	lr, [r8, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8007506:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800750a:	b289      	uxth	r1, r1
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 800750c:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8007510:	891a      	ldrh	r2, [r3, #8]
 8007512:	b280      	uxth	r0, r0
 8007514:	4290      	cmp	r0, r2
 8007516:	d2e4      	bcs.n	80074e2 <VectorB0+0x32>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8007518:	42b3      	cmp	r3, r6
 800751a:	d019      	beq.n	8007550 <VectorB0+0xa0>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA)
 800751c:	2a01      	cmp	r2, #1
 800751e:	d00b      	beq.n	8007538 <VectorB0+0x88>
      port_timer_set_alarm(now + vtp->vt_delta);
 8007520:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8007522:	b292      	uxth	r2, r2
 8007524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007528:	635a      	str	r2, [r3, #52]	; 0x34
 800752a:	2300      	movs	r3, #0
 800752c:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8007530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8007534:	f7ff bf54 	b.w	80073e0 <_port_irq_epilogue>
    else
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8007538:	3102      	adds	r1, #2
 800753a:	b289      	uxth	r1, r1
 800753c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007540:	6359      	str	r1, [r3, #52]	; 0x34
 8007542:	2300      	movs	r3, #0
 8007544:	f383 8811 	msr	BASEPRI, r3
}
 8007548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800754c:	f7ff bf48 	b.w	80073e0 <_port_irq_epilogue>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8007550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007554:	2200      	movs	r2, #0
 8007556:	60da      	str	r2, [r3, #12]
 8007558:	e7e7      	b.n	800752a <VectorB0+0x7a>
 800755a:	bf00      	nop
 800755c:	20001e40 	.word	0x20001e40

08007560 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8007560:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);
 8007562:	4803      	ldr	r0, [pc, #12]	; (8007570 <VectorB8+0x10>)
 8007564:	f7ff ff74 	bl	8007450 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8007568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 800756c:	f7ff bf38 	b.w	80073e0 <_port_irq_epilogue>
 8007570:	20001794 	.word	0x20001794
 8007574:	f3af 8000 	nop.w
 8007578:	f3af 8000 	nop.w
 800757c:	f3af 8000 	nop.w

08007580 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8007580:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);
 8007582:	4803      	ldr	r0, [pc, #12]	; (8007590 <VectorB4+0x10>)
 8007584:	f7ff ff64 	bl	8007450 <gpt_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8007588:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 800758c:	f7ff bf28 	b.w	80073e0 <_port_irq_epilogue>
 8007590:	20001f94 	.word	0x20001f94
 8007594:	f3af 8000 	nop.w
 8007598:	f3af 8000 	nop.w
 800759c:	f3af 8000 	nop.w

080075a0 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 80075a2:	4808      	ldr	r0, [pc, #32]	; (80075c4 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 80075a4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 80075a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 80075a8:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 80075ac:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 80075ae:	060c      	lsls	r4, r1, #24
 80075b0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 80075b2:	b10a      	cbz	r2, 80075b8 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 80075b4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80075b6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80075b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80075bc:	f7ff bf10 	b.w	80073e0 <_port_irq_epilogue>
 80075c0:	40020000 	.word	0x40020000
 80075c4:	20001fe8 	.word	0x20001fe8
 80075c8:	f3af 8000 	nop.w
 80075cc:	f3af 8000 	nop.w

080075d0 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 80075d2:	4808      	ldr	r0, [pc, #32]	; (80075f4 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 80075d4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 80075d6:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 80075d8:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 80075dc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 80075de:	050c      	lsls	r4, r1, #20
 80075e0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 80075e2:	b10a      	cbz	r2, 80075e8 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 80075e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80075e6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80075e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80075ec:	f7ff bef8 	b.w	80073e0 <_port_irq_epilogue>
 80075f0:	40020000 	.word	0x40020000
 80075f4:	20001fe8 	.word	0x20001fe8
 80075f8:	f3af 8000 	nop.w
 80075fc:	f3af 8000 	nop.w

08007600 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8007602:	4808      	ldr	r0, [pc, #32]	; (8007624 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8007604:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8007606:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8007608:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800760c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 800760e:	040c      	lsls	r4, r1, #16
 8007610:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8007612:	b10a      	cbz	r2, 8007618 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8007614:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007616:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8007618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800761c:	f7ff bee0 	b.w	80073e0 <_port_irq_epilogue>
 8007620:	40020000 	.word	0x40020000
 8007624:	20001fe8 	.word	0x20001fe8
 8007628:	f3af 8000 	nop.w
 800762c:	f3af 8000 	nop.w

08007630 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8007632:	4808      	ldr	r0, [pc, #32]	; (8007654 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8007634:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8007636:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8007638:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 800763c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 800763e:	030c      	lsls	r4, r1, #12
 8007640:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 8007642:	b10a      	cbz	r2, 8007648 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8007644:	69c0      	ldr	r0, [r0, #28]
 8007646:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8007648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800764c:	f7ff bec8 	b.w	80073e0 <_port_irq_epilogue>
 8007650:	40020000 	.word	0x40020000
 8007654:	20001fe8 	.word	0x20001fe8
 8007658:	f3af 8000 	nop.w
 800765c:	f3af 8000 	nop.w

08007660 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8007662:	4808      	ldr	r0, [pc, #32]	; (8007684 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8007664:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8007666:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8007668:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 800766c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 800766e:	020c      	lsls	r4, r1, #8
 8007670:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8007672:	b10a      	cbz	r2, 8007678 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8007674:	6940      	ldr	r0, [r0, #20]
 8007676:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800767c:	f7ff beb0 	b.w	80073e0 <_port_irq_epilogue>
 8007680:	40020000 	.word	0x40020000
 8007684:	20001fe8 	.word	0x20001fe8
 8007688:	f3af 8000 	nop.w
 800768c:	f3af 8000 	nop.w

08007690 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8007692:	4808      	ldr	r0, [pc, #32]	; (80076b4 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8007694:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8007696:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8007698:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 800769c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 800769e:	010c      	lsls	r4, r1, #4
 80076a0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 80076a2:	b10a      	cbz	r2, 80076a8 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80076a4:	68c0      	ldr	r0, [r0, #12]
 80076a6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80076a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80076ac:	f7ff be98 	b.w	80073e0 <_port_irq_epilogue>
 80076b0:	40020000 	.word	0x40020000
 80076b4:	20001fe8 	.word	0x20001fe8
 80076b8:	f3af 8000 	nop.w
 80076bc:	f3af 8000 	nop.w

080076c0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 80076c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 80076c2:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 80076c4:	4a07      	ldr	r2, [pc, #28]	; (80076e4 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 80076c6:	6819      	ldr	r1, [r3, #0]
 80076c8:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 80076cc:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 80076ce:	6813      	ldr	r3, [r2, #0]
 80076d0:	b10b      	cbz	r3, 80076d6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 80076d2:	6850      	ldr	r0, [r2, #4]
 80076d4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80076d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80076da:	f7ff be81 	b.w	80073e0 <_port_irq_epilogue>
 80076de:	bf00      	nop
 80076e0:	40020000 	.word	0x40020000
 80076e4:	20001fe8 	.word	0x20001fe8
 80076e8:	f3af 8000 	nop.w
 80076ec:	f3af 8000 	nop.w

080076f0 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80076f2:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 80076f4:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80076f8:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 80076fc:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8007700:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8007704:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8007706:	d018      	beq.n	800773a <usb_packet_write_from_queue+0x4a>
 8007708:	4677      	mov	r7, lr
 800770a:	4664      	mov	r4, ip
 800770c:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800770e:	6988      	ldr	r0, [r1, #24]
 8007710:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8007712:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007714:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007716:	bf28      	it	cs
 8007718:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800771a:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800771c:	1c5d      	adds	r5, r3, #1
 800771e:	618d      	str	r5, [r1, #24]
 8007720:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8007722:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8007724:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007728:	bf24      	itt	cs
 800772a:	68c8      	ldrcs	r0, [r1, #12]
 800772c:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 800772e:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8007730:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8007734:	d1eb      	bne.n	800770e <usb_packet_write_from_queue+0x1e>
 8007736:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 800773a:	07d3      	lsls	r3, r2, #31
 800773c:	d50b      	bpl.n	8007756 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800773e:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8007740:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8007746:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8007748:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800774a:	bf28      	it	cs
 800774c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800774e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8007752:	bf28      	it	cs
 8007754:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8007756:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 800775a:	b9cb      	cbnz	r3, 8007790 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800775c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007760:	2320      	movs	r3, #32
 8007762:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8007766:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8007768:	4608      	mov	r0, r1
 800776a:	441a      	add	r2, r3
 800776c:	608a      	str	r2, [r1, #8]
 800776e:	2100      	movs	r1, #0
 8007770:	f7ff fdce 	bl	8007310 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007774:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FF) != 0);
 8007778:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context())
 800777c:	b11c      	cbz	r4, 8007786 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800777e:	2300      	movs	r3, #0
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    else {
      chSchRescheduleS();
 8007786:	f7ff fa9b 	bl	8006cc0 <chSchRescheduleS>
 800778a:	f384 8811 	msr	BASEPRI, r4
 800778e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007790:	688b      	ldr	r3, [r1, #8]
 8007792:	4608      	mov	r0, r1
 8007794:	441a      	add	r2, r3
 8007796:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8007798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800779c:	2100      	movs	r1, #0
 800779e:	f7ff bdb7 	b.w	8007310 <chThdDequeueAllI>
 80077a2:	bf00      	nop
 80077a4:	f3af 8000 	nop.w
 80077a8:	f3af 8000 	nop.w
 80077ac:	f3af 8000 	nop.w

080077b0 <spi_lld_serve_rx_interrupt.lto_priv.75>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80077b2:	070b      	lsls	r3, r1, #28
 80077b4:	d431      	bmi.n	800781a <spi_lld_serve_rx_interrupt.lto_priv.75+0x6a>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80077b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 80077b8:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80077ba:	e891 00c0 	ldmia.w	r1, {r6, r7}
 80077be:	6835      	ldr	r5, [r6, #0]
 80077c0:	230f      	movs	r3, #15
 80077c2:	f025 050f 	bic.w	r5, r5, #15
 80077c6:	6035      	str	r5, [r6, #0]
 80077c8:	7a09      	ldrb	r1, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 80077ca:	6815      	ldr	r5, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80077cc:	fa03 f101 	lsl.w	r1, r3, r1
 80077d0:	6039      	str	r1, [r7, #0]
  dmaStreamDisable(spip->dmarx);
 80077d2:	6829      	ldr	r1, [r5, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80077d4:	6846      	ldr	r6, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80077d6:	f021 010f 	bic.w	r1, r1, #15
 80077da:	6029      	str	r1, [r5, #0]
 80077dc:	7a15      	ldrb	r5, [r2, #8]
 80077de:	6851      	ldr	r1, [r2, #4]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80077e0:	6832      	ldr	r2, [r6, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80077e2:	40ab      	lsls	r3, r5
 80077e4:	4604      	mov	r4, r0
 80077e6:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80077e8:	b1a2      	cbz	r2, 8007814 <spi_lld_serve_rx_interrupt.lto_priv.75+0x64>
 80077ea:	2304      	movs	r3, #4
 80077ec:	7003      	strb	r3, [r0, #0]
 80077ee:	4790      	blx	r2
 80077f0:	7823      	ldrb	r3, [r4, #0]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d00e      	beq.n	8007814 <spi_lld_serve_rx_interrupt.lto_priv.75+0x64>
 80077f6:	2320      	movs	r3, #32
 80077f8:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80077fc:	68a3      	ldr	r3, [r4, #8]
 80077fe:	b12b      	cbz	r3, 800780c <spi_lld_serve_rx_interrupt.lto_priv.75+0x5c>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8007800:	2200      	movs	r2, #0
 8007802:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    chSchReadyI(tp);
 8007804:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8007806:	621a      	str	r2, [r3, #32]
    chSchReadyI(tp);
 8007808:	f7ff fc6a 	bl	80070e0 <chSchReadyI>
 800780c:	2300      	movs	r3, #0
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007814:	2302      	movs	r3, #2
 8007816:	7023      	strb	r3, [r4, #0]
 8007818:	e7ed      	b.n	80077f6 <spi_lld_serve_rx_interrupt.lto_priv.75+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800781a:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800781c:	4b01      	ldr	r3, [pc, #4]	; (8007824 <spi_lld_serve_rx_interrupt.lto_priv.75+0x74>)
 800781e:	4a02      	ldr	r2, [pc, #8]	; (8007828 <spi_lld_serve_rx_interrupt.lto_priv.75+0x78>)
 8007820:	629a      	str	r2, [r3, #40]	; 0x28
 8007822:	e7fe      	b.n	8007822 <spi_lld_serve_rx_interrupt.lto_priv.75+0x72>
 8007824:	20001e40 	.word	0x20001e40
 8007828:	0800ab20 	.word	0x0800ab20
 800782c:	f3af 8000 	nop.w

08007830 <chprintf.lto_priv.104>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8007830:	b40e      	push	{r1, r2, r3}
 8007832:	b500      	push	{lr}
 8007834:	b082      	sub	sp, #8
 8007836:	ab03      	add	r3, sp, #12
 8007838:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800783c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800783e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8007840:	f000 fc96 	bl	8008170 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8007844:	b002      	add	sp, #8
 8007846:	f85d eb04 	ldr.w	lr, [sp], #4
 800784a:	b003      	add	sp, #12
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop

08007850 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007850:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007854:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8007856:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8007858:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800785a:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 800785c:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 800785e:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8007860:	7803      	ldrb	r3, [r0, #0]
 8007862:	428a      	cmp	r2, r1
 8007864:	bf28      	it	cs
 8007866:	460a      	movcs	r2, r1
 8007868:	bb03      	cbnz	r3, 80078ac <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800786a:	4917      	ldr	r1, [pc, #92]	; (80078c8 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800786c:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800786e:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007870:	085b      	lsrs	r3, r3, #1
 8007872:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8007876:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800787a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800787e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007882:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8007884:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007886:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800788a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800788e:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007890:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8007894:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8007896:	d007      	beq.n	80078a8 <usb_lld_prepare_transmit+0x58>
 8007898:	3802      	subs	r0, #2
 800789a:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800789c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80078a0:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80078a2:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80078a6:	d1f9      	bne.n	800789c <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80078a8:	bc30      	pop	{r4, r5}
 80078aa:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <usb_lld_prepare_transmit+0x78>)
 80078ae:	68c1      	ldr	r1, [r0, #12]
 80078b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80078b2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80078b6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80078ba:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80078be:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80078c0:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80078c2:	f7ff bf15 	b.w	80076f0 <usb_packet_write_from_queue>
 80078c6:	bf00      	nop
 80078c8:	40005c00 	.word	0x40005c00
 80078cc:	f3af 8000 	nop.w

080078d0 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80078d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078d4:	68c9      	ldr	r1, [r1, #12]
 80078d6:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80078d8:	6853      	ldr	r3, [r2, #4]
 80078da:	b133      	cbz	r3, 80078ea <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80078dc:	8a49      	ldrh	r1, [r1, #18]
 80078de:	3b01      	subs	r3, #1
 80078e0:	440b      	add	r3, r1
 80078e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078e6:	8213      	strh	r3, [r2, #16]
 80078e8:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	8213      	strh	r3, [r2, #16]
 80078ee:	4770      	bx	lr

080078f0 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80078f0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80078f4:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80078f6:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	f002 0203 	and.w	r2, r2, #3
 80078fe:	3a01      	subs	r2, #1
 8007900:	2a02      	cmp	r2, #2
 8007902:	bf96      	itet	ls
 8007904:	4c2a      	ldrls	r4, [pc, #168]	; (80079b0 <usb_lld_init_endpoint+0xc0>)
 8007906:	f44f 7400 	movhi.w	r4, #512	; 0x200
 800790a:	f834 4012 	ldrhls.w	r4, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	b10a      	cbz	r2, 8007916 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8007912:	f044 0420 	orr.w	r4, r4, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	b10a      	cbz	r2, 800791e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 800791a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800791e:	f647 0770 	movw	r7, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8007922:	ea44 0501 	orr.w	r5, r4, r1
 8007926:	008a      	lsls	r2, r1, #2
 8007928:	f425 45f0 	bic.w	r5, r5, #30720	; 0x7800
 800792c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007930:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8007934:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8007938:	6015      	str	r5, [r2, #0]
  EPR_TOGGLE(ep, epr);
 800793a:	6816      	ldr	r6, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800793c:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800793e:	4027      	ands	r7, r4
 8007940:	ea87 0406 	eor.w	r4, r7, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8007944:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8007946:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8007948:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800794c:	d826      	bhi.n	800799c <usb_lld_init_endpoint+0xac>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800794e:	f044 0401 	orr.w	r4, r4, #1
 8007952:	3401      	adds	r4, #1
 8007954:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007958:	0264      	lsls	r4, r4, #9
 800795a:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <usb_lld_init_endpoint+0xc4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8007960:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8007962:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 8007964:	2700      	movs	r7, #0
 8007966:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 800796a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 800796e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007972:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 8007974:	684b      	ldr	r3, [r1, #4]
 8007976:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8007978:	68cb      	ldr	r3, [r1, #12]
 800797a:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800797c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 8007980:	1993      	adds	r3, r2, r6
 8007982:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8007986:	680b      	ldr	r3, [r1, #0]
 8007988:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 800798a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 800798e:	441d      	add	r5, r3
 8007990:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8007994:	688a      	ldr	r2, [r1, #8]
}
 8007996:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8007998:	608b      	str	r3, [r1, #8]
}
 800799a:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 800799c:	f044 041f 	orr.w	r4, r4, #31
 80079a0:	3401      	adds	r4, #1
 80079a2:	1164      	asrs	r4, r4, #5
 80079a4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80079a8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80079ac:	b2a4      	uxth	r4, r4
 80079ae:	e7d6      	b.n	800795e <usb_lld_init_endpoint+0x6e>
 80079b0:	0800ab60 	.word	0x0800ab60
 80079b4:	40005c00 	.word	0x40005c00
 80079b8:	f3af 8000 	nop.w
 80079bc:	f3af 8000 	nop.w

080079c0 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80079c0:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80079c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80079c4:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80079c6:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80079c8:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 80079ca:	4d0d      	ldr	r5, [pc, #52]	; (8007a00 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80079cc:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 80079d0:	bf0c      	ite	eq
 80079d2:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 80079d6:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 80079da:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 80079de:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80079e0:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 80079e2:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 80079e4:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 80079e6:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 80079ea:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 80079ec:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 80079f0:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 80079f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 80079f6:	f7ff bf7b 	b.w	80078f0 <usb_lld_init_endpoint>
 80079fa:	bf00      	nop
 80079fc:	40005c00 	.word	0x40005c00
 8007a00:	0800ab30 	.word	0x0800ab30
 8007a04:	f3af 8000 	nop.w
 8007a08:	f3af 8000 	nop.w
 8007a0c:	f3af 8000 	nop.w

08007a10 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8007a14:	4b97      	ldr	r3, [pc, #604]	; (8007c74 <Vector90+0x264>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8007a16:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8007a18:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8007a1a:	0563      	lsls	r3, r4, #21
 8007a1c:	f100 8198 	bmi.w	8007d50 <Vector90+0x340>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8007a20:	0527      	lsls	r7, r4, #20
 8007a22:	d515      	bpl.n	8007a50 <Vector90+0x40>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007a24:	f8df b250 	ldr.w	fp, [pc, #592]	; 8007c78 <Vector90+0x268>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8007a28:	4a92      	ldr	r2, [pc, #584]	; (8007c74 <Vector90+0x264>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007a2a:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8007a2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007a30:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8007a32:	f043 0308 	orr.w	r3, r3, #8
 8007a36:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8007a38:	b115      	cbz	r5, 8007a40 <Vector90+0x30>
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	2103      	movs	r1, #3
 8007a3e:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8007a40:	4b8c      	ldr	r3, [pc, #560]	; (8007c74 <Vector90+0x264>)
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8007a42:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8007a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a48:	f042 0204 	orr.w	r2, r2, #4
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8007a4e:	6459      	str	r1, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8007a50:	04e6      	lsls	r6, r4, #19
 8007a52:	d50c      	bpl.n	8007a6e <Vector90+0x5e>
    uint32_t fnr = STM32_USB->FNR;
 8007a54:	4b87      	ldr	r3, [pc, #540]	; (8007c74 <Vector90+0x264>)
 8007a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8007a58:	0415      	lsls	r5, r2, #16
 8007a5a:	f140 8169 	bpl.w	8007d30 <Vector90+0x320>
    }
#if STM32_USB_LOW_POWER_ON_SUSPEND
    else {
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
 8007a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a60:	f042 0204 	orr.w	r2, r2, #4
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8007a66:	4b83      	ldr	r3, [pc, #524]	; (8007c74 <Vector90+0x264>)
 8007a68:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8007a6e:	05a0      	lsls	r0, r4, #22
 8007a70:	d50b      	bpl.n	8007a8a <Vector90+0x7a>
    _usb_isr_invoke_sof_cb(usbp);
 8007a72:	f8df b204 	ldr.w	fp, [pc, #516]	; 8007c78 <Vector90+0x268>
 8007a76:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	b10b      	cbz	r3, 8007a82 <Vector90+0x72>
 8007a7e:	4658      	mov	r0, fp
 8007a80:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8007a82:	4b7c      	ldr	r3, [pc, #496]	; (8007c74 <Vector90+0x264>)
 8007a84:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8007a8a:	0421      	lsls	r1, r4, #16
 8007a8c:	f140 80c7 	bpl.w	8007c1e <Vector90+0x20e>
 8007a90:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8007c78 <Vector90+0x268>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8007a94:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8007c74 <Vector90+0x264>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8007a98:	f004 040f 	and.w	r4, r4, #15
 8007a9c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8007aa0:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 8007aa4:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 8007aa8:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8007aac:	1ca6      	adds	r6, r4, #2
 8007aae:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8007ab2:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8007ab6:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 8007ab8:	d05f      	beq.n	8007b7a <Vector90+0x16a>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8007aba:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8007abc:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8007abe:	f423 43f1 	bic.w	r3, r3, #30848	; 0x7880
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8007ac8:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8007acc:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8007ad0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007ad4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8007ad8:	4403      	add	r3, r0
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 8007ade:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8007ae2:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	f000 80b3 	beq.w	8007c58 <Vector90+0x248>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8007af2:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8007af4:	f89e c000 	ldrb.w	ip, [lr]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	bf28      	it	cs
 8007afc:	461a      	movcs	r2, r3
 8007afe:	f1bc 0f00 	cmp.w	ip, #0
 8007b02:	f040 8108 	bne.w	8007d16 <Vector90+0x306>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8007b06:	1c53      	adds	r3, r2, #1
 8007b08:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 8007b0a:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007b0e:	4419      	add	r1, r3
 8007b10:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8007b14:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8007b1e:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8007b22:	4470      	add	r0, lr
 8007b24:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007b26:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007b2a:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007b2c:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8007b30:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8007b34:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8007b38:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8007b3c:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 8007b3e:	d008      	beq.n	8007b52 <Vector90+0x142>
 8007b40:	3902      	subs	r1, #2
 8007b42:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007b46:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007b4a:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8007b4c:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8007b50:	d1f9      	bne.n	8007b46 <Vector90+0x136>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8007b52:	2320      	movs	r3, #32
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8007b5c:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8007b60:	f8d8 3000 	ldr.w	r3, [r8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007b72:	f8c8 3000 	str.w	r3, [r8]
 8007b76:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8007b7a:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8007b7e:	d049      	beq.n	8007c14 <Vector90+0x204>
      EPR_CLEAR_CTR_RX(ep);
 8007b80:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8007b82:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8007b86:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8007b90:	d15a      	bne.n	8007c48 <Vector90+0x238>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8007b92:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8007b96:	69b9      	ldr	r1, [r7, #24]
 8007b98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007b9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8007ba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ba4:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	4610      	mov	r0, r2
 8007baa:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8007bac:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8007bae:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8007bb2:	2a00      	cmp	r2, #0
 8007bb4:	d162      	bne.n	8007c7c <Vector90+0x26c>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8007bb6:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 8007bb8:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8007bbc:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8007bc0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 8007bc4:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8007bc6:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 8007bca:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8007bcc:	d009      	beq.n	8007be2 <Vector90+0x1d2>
 8007bce:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8007bd0:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8007bd4:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8007bd6:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8007bda:	d1f9      	bne.n	8007bd0 <Vector90+0x1c0>
 8007bdc:	4671      	mov	r1, lr
 8007bde:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8007be2:	4440      	add	r0, r8
 8007be4:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8007be6:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8007be8:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8007bea:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 8007bec:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 8007bee:	3801      	subs	r0, #1
 8007bf0:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8007bf2:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8007bf4:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8007bf8:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8007bfa:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8007bfc:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 8007bfe:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8007c00:	d312      	bcc.n	8007c28 <Vector90+0x218>
 8007c02:	b188      	cbz	r0, 8007c28 <Vector90+0x218>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007c12:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8007c14:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8007c18:	0423      	lsls	r3, r4, #16
 8007c1a:	f53f af3d 	bmi.w	8007a98 <Vector90+0x88>
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
}
 8007c1e:	b005      	add	sp, #20
 8007c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
 8007c24:	f7ff bbdc 	b.w	80073e0 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8007c28:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8007c2c:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8007c30:	2101      	movs	r1, #1
 8007c32:	40a1      	lsls	r1, r4
 8007c34:	6872      	ldr	r2, [r6, #4]
 8007c36:	ea23 0301 	bic.w	r3, r3, r1
 8007c3a:	68d2      	ldr	r2, [r2, #12]
 8007c3c:	f8ab 300a 	strh.w	r3, [fp, #10]
 8007c40:	4621      	mov	r1, r4
 8007c42:	480d      	ldr	r0, [pc, #52]	; (8007c78 <Vector90+0x268>)
 8007c44:	4790      	blx	r2
 8007c46:	e7e5      	b.n	8007c14 <Vector90+0x204>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8007c48:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8007c4c:	6873      	ldr	r3, [r6, #4]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4809      	ldr	r0, [pc, #36]	; (8007c78 <Vector90+0x268>)
 8007c54:	4798      	blx	r3
 8007c56:	e7dd      	b.n	8007c14 <Vector90+0x204>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8007c58:	4b07      	ldr	r3, [pc, #28]	; (8007c78 <Vector90+0x268>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	891b      	ldrh	r3, [r3, #8]
 8007c5e:	40a2      	lsls	r2, r4
 8007c60:	ea23 0302 	bic.w	r3, r3, r2
 8007c64:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <Vector90+0x268>)
 8007c66:	4621      	mov	r1, r4
 8007c68:	8113      	strh	r3, [r2, #8]
 8007c6a:	4610      	mov	r0, r2
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4798      	blx	r3
 8007c70:	e783      	b.n	8007b7a <Vector90+0x16a>
 8007c72:	bf00      	nop
 8007c74:	40005c00 	.word	0x40005c00
 8007c78:	20001200 	.word	0x20001200
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8007c7c:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8007c7e:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8007c82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007c86:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007c8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8007c8e:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8007c90:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8007c92:	9203      	str	r2, [sp, #12]
 8007c94:	d021      	beq.n	8007cda <Vector90+0x2ca>
 8007c96:	4610      	mov	r0, r2
 8007c98:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8007c9a:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8007c9c:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8007ca0:	f103 0901 	add.w	r9, r3, #1
 8007ca4:	f8c1 9014 	str.w	r9, [r1, #20]
 8007ca8:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8007caa:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007cac:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 8007cb0:	694a      	ldr	r2, [r1, #20]
 8007cb2:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8007cb4:	bf28      	it	cs
 8007cb6:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8007cb8:	1c53      	adds	r3, r2, #1
 8007cba:	614b      	str	r3, [r1, #20]
 8007cbc:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 8007cc0:	690b      	ldr	r3, [r1, #16]
 8007cc2:	694a      	ldr	r2, [r1, #20]
 8007cc4:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8007cc6:	bf24      	itt	cs
 8007cc8:	68cb      	ldrcs	r3, [r1, #12]
 8007cca:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8007ccc:	3801      	subs	r0, #1
 8007cce:	d1e4      	bne.n	8007c9a <Vector90+0x28a>
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	9a03      	ldr	r2, [sp, #12]
 8007cd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007cd8:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	07da      	lsls	r2, r3, #31
 8007cde:	d50b      	bpl.n	8007cf8 <Vector90+0x2e8>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8007ce0:	9a02      	ldr	r2, [sp, #8]
 8007ce2:	694b      	ldr	r3, [r1, #20]
 8007ce4:	6812      	ldr	r2, [r2, #0]
 8007ce6:	1c58      	adds	r0, r3, #1
 8007ce8:	6148      	str	r0, [r1, #20]
 8007cea:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 8007cec:	690b      	ldr	r3, [r1, #16]
 8007cee:	694a      	ldr	r2, [r1, #20]
 8007cf0:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8007cf2:	bf24      	itt	cs
 8007cf4:	68cb      	ldrcs	r3, [r1, #12]
 8007cf6:	614b      	strcs	r3, [r1, #20]
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8007cfe:	688b      	ldr	r3, [r1, #8]
 8007d00:	4608      	mov	r0, r1
 8007d02:	4443      	add	r3, r8
 8007d04:	608b      	str	r3, [r1, #8]
 8007d06:	2100      	movs	r1, #0
 8007d08:	f7ff fb02 	bl	8007310 <chThdDequeueAllI>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	69b9      	ldr	r1, [r7, #24]
 8007d14:	e767      	b.n	8007be6 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8007d16:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8007d1a:	f8de 100c 	ldr.w	r1, [lr, #12]
 8007d1e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007d22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8007d26:	4418      	add	r0, r3
 8007d28:	0040      	lsls	r0, r0, #1
 8007d2a:	f7ff fce1 	bl	80076f0 <usb_packet_write_from_queue>
 8007d2e:	e710      	b.n	8007b52 <Vector90+0x142>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8007d30:	f8df b074 	ldr.w	fp, [pc, #116]	; 8007da8 <Vector90+0x398>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8007d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8007d36:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8007d3a:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8007d3e:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	f43f ae8f 	beq.w	8007a66 <Vector90+0x56>
 8007d48:	4658      	mov	r0, fp
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	47a8      	blx	r5
 8007d4e:	e68a      	b.n	8007a66 <Vector90+0x56>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8007d50:	f8df b054 	ldr.w	fp, [pc, #84]	; 8007da8 <Vector90+0x398>
  usbp->status        = 0;
 8007d54:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8007d56:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8007d58:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8007d5a:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 8007d5e:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 8007d62:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 8007d66:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 8007d6a:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8007d6e:	f88b 2000 	strb.w	r2, [fp]
 8007d72:	f10b 0308 	add.w	r3, fp, #8
 8007d76:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8007d7a:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8007d7e:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 8007d80:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8007d84:	d1f9      	bne.n	8007d7a <Vector90+0x36a>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8007d86:	4808      	ldr	r0, [pc, #32]	; (8007da8 <Vector90+0x398>)
  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8007d88:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8007d8c:	f7ff fe18 	bl	80079c0 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8007d90:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	b113      	cbz	r3, 8007d9e <Vector90+0x38e>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4803      	ldr	r0, [pc, #12]	; (8007da8 <Vector90+0x398>)
 8007d9c:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 8007d9e:	4b03      	ldr	r3, [pc, #12]	; (8007dac <Vector90+0x39c>)
 8007da0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007da4:	645a      	str	r2, [r3, #68]	; 0x44
 8007da6:	e63b      	b.n	8007a20 <Vector90+0x10>
 8007da8:	20001200 	.word	0x20001200
 8007dac:	40005c00 	.word	0x40005c00

08007db0 <gpt_lld_start_timer>:

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8007db0:	6842      	ldr	r2, [r0, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8007db2:	68c3      	ldr	r3, [r0, #12]

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8007db4:	6850      	ldr	r0, [r2, #4]
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {
 8007db6:	b410      	push	{r4}

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 8007db8:	2200      	movs	r2, #0
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8007dba:	3901      	subs	r1, #1
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 8007dbc:	2401      	movs	r4, #1
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8007dbe:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 8007dc0:	615c      	str	r4, [r3, #20]
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 8007dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8007dc4:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
 8007dc6:	b110      	cbz	r0, 8007dce <gpt_lld_start_timer+0x1e>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	4322      	orrs	r2, r4
 8007dcc:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1   = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 8007dce:	2205      	movs	r2, #5
 8007dd0:	601a      	str	r2, [r3, #0]
}
 8007dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	f3af 8000 	nop.w
 8007ddc:	f3af 8000 	nop.w

08007de0 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8007de0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8007de2:	f100 070b 	add.w	r7, r0, #11
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bf08      	it	eq
 8007dea:	460b      	moveq	r3, r1
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8007dec:	463d      	mov	r5, r7
  do {
    i = (int)(l % radix);
 8007dee:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8007df2:	fbb3 f3f2 	udiv	r3, r3, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8007df6:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8007dfa:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 8007dfe:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8007e00:	bfc8      	it	gt
 8007e02:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8007e06:	b2e4      	uxtb	r4, r4
 8007e08:	f805 4d01 	strb.w	r4, [r5, #-1]!
    l /= radix;
 8007e0c:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1ed      	bne.n	8007dee <long_to_string_with_divisor+0xe>

  i = (int)(p + MAX_FILLER - q);
 8007e12:	1b7b      	subs	r3, r7, r5
 8007e14:	4403      	add	r3, r0
 8007e16:	e001      	b.n	8007e1c <long_to_string_with_divisor+0x3c>
 8007e18:	f815 4f01 	ldrb.w	r4, [r5, #1]!
  do
    *p++ = *q++;
 8007e1c:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8007e20:	4298      	cmp	r0, r3
 8007e22:	d1f9      	bne.n	8007e18 <long_to_string_with_divisor+0x38>

  return p;
}
 8007e24:	bcf0      	pop	{r4, r5, r6, r7}
 8007e26:	4770      	bx	lr
 8007e28:	f3af 8000 	nop.w
 8007e2c:	f3af 8000 	nop.w

08007e30 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8007e30:	2900      	cmp	r1, #0
 8007e32:	dd03      	ble.n	8007e3c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8007e34:	4908      	ldr	r1, [pc, #32]	; (8007e58 <cmd_systime+0x28>)
 8007e36:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <cmd_systime+0x2c>)
 8007e38:	f7ff bcfa 	b.w	8007830 <chprintf.lto_priv.104>
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8007e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8007e4e:	4904      	ldr	r1, [pc, #16]	; (8007e60 <cmd_systime+0x30>)
 8007e50:	b292      	uxth	r2, r2
 8007e52:	f7ff bced 	b.w	8007830 <chprintf.lto_priv.104>
 8007e56:	bf00      	nop
 8007e58:	0800abb0 	.word	0x0800abb0
 8007e5c:	0800abbc 	.word	0x0800abbc
 8007e60:	0800abc4 	.word	0x0800abc4
 8007e64:	f3af 8000 	nop.w
 8007e68:	f3af 8000 	nop.w
 8007e6c:	f3af 8000 	nop.w

08007e70 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8007e70:	2900      	cmp	r1, #0
 8007e72:	dd03      	ble.n	8007e7c <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8007e74:	4919      	ldr	r1, [pc, #100]	; (8007edc <cmd_info+0x6c>)
 8007e76:	4a1a      	ldr	r2, [pc, #104]	; (8007ee0 <cmd_info+0x70>)
 8007e78:	f7ff bcda 	b.w	8007830 <chprintf.lto_priv.104>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	4604      	mov	r4, r0
 8007e80:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8007e82:	4918      	ldr	r1, [pc, #96]	; (8007ee4 <cmd_info+0x74>)
 8007e84:	4a18      	ldr	r2, [pc, #96]	; (8007ee8 <cmd_info+0x78>)
 8007e86:	f7ff fcd3 	bl	8007830 <chprintf.lto_priv.104>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4917      	ldr	r1, [pc, #92]	; (8007eec <cmd_info+0x7c>)
 8007e8e:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <cmd_info+0x80>)
 8007e90:	f7ff fcce 	bl	8007830 <chprintf.lto_priv.104>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8007e94:	4620      	mov	r0, r4
 8007e96:	4917      	ldr	r1, [pc, #92]	; (8007ef4 <cmd_info+0x84>)
 8007e98:	4a17      	ldr	r2, [pc, #92]	; (8007ef8 <cmd_info+0x88>)
 8007e9a:	f7ff fcc9 	bl	8007830 <chprintf.lto_priv.104>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4916      	ldr	r1, [pc, #88]	; (8007efc <cmd_info+0x8c>)
 8007ea2:	4a17      	ldr	r2, [pc, #92]	; (8007f00 <cmd_info+0x90>)
 8007ea4:	f7ff fcc4 	bl	8007830 <chprintf.lto_priv.104>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	4916      	ldr	r1, [pc, #88]	; (8007f04 <cmd_info+0x94>)
 8007eac:	4a16      	ldr	r2, [pc, #88]	; (8007f08 <cmd_info+0x98>)
 8007eae:	f7ff fcbf 	bl	8007830 <chprintf.lto_priv.104>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4915      	ldr	r1, [pc, #84]	; (8007f0c <cmd_info+0x9c>)
 8007eb6:	4a16      	ldr	r2, [pc, #88]	; (8007f10 <cmd_info+0xa0>)
 8007eb8:	f7ff fcba 	bl	8007830 <chprintf.lto_priv.104>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	4915      	ldr	r1, [pc, #84]	; (8007f14 <cmd_info+0xa4>)
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <cmd_info+0xa8>)
 8007ec2:	f7ff fcb5 	bl	8007830 <chprintf.lto_priv.104>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8007ec6:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <cmd_info+0xac>)
 8007ec8:	4620      	mov	r0, r4
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	4914      	ldr	r1, [pc, #80]	; (8007f20 <cmd_info+0xb0>)
 8007ece:	4a15      	ldr	r2, [pc, #84]	; (8007f24 <cmd_info+0xb4>)
 8007ed0:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <cmd_info+0xb8>)
 8007ed2:	f7ff fcad 	bl	8007830 <chprintf.lto_priv.104>
#endif
#endif
}
 8007ed6:	b002      	add	sp, #8
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	0800abb0 	.word	0x0800abb0
 8007ee0:	0800abcc 	.word	0x0800abcc
 8007ee4:	0800abd4 	.word	0x0800abd4
 8007ee8:	0800a594 	.word	0x0800a594
 8007eec:	0800abe8 	.word	0x0800abe8
 8007ef0:	0800a5b8 	.word	0x0800a5b8
 8007ef4:	0800abfc 	.word	0x0800abfc
 8007ef8:	0800a600 	.word	0x0800a600
 8007efc:	0800ac10 	.word	0x0800ac10
 8007f00:	0800a608 	.word	0x0800a608
 8007f04:	0800ac24 	.word	0x0800ac24
 8007f08:	0800a614 	.word	0x0800a614
 8007f0c:	0800ac38 	.word	0x0800ac38
 8007f10:	0800a62c 	.word	0x0800a62c
 8007f14:	0800ac4c 	.word	0x0800ac4c
 8007f18:	0800a658 	.word	0x0800a658
 8007f1c:	0800ac88 	.word	0x0800ac88
 8007f20:	0800ac60 	.word	0x0800ac60
 8007f24:	0800ac78 	.word	0x0800ac78
 8007f28:	0800ac84 	.word	0x0800ac84
 8007f2c:	f3af 8000 	nop.w

08007f30 <shell_thread.lto_priv.83>:
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8007f34:	4b7a      	ldr	r3, [pc, #488]	; (8008120 <shell_thread.lto_priv.83+0x1f0>)
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8007f36:	6804      	ldr	r4, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	4a7a      	ldr	r2, [pc, #488]	; (8008124 <shell_thread.lto_priv.83+0x1f4>)
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8007f3c:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 8007f3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8007f42:	4979      	ldr	r1, [pc, #484]	; (8008128 <shell_thread.lto_priv.83+0x1f8>)
 8007f44:	4620      	mov	r0, r4
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8007f46:	619a      	str	r2, [r3, #24]
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8007f48:	f7ff fc72 	bl	8007830 <chprintf.lto_priv.104>
 8007f4c:	ae08      	add	r6, sp, #32
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 8007f4e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
 8007f52:	4620      	mov	r0, r4
 8007f54:	4975      	ldr	r1, [pc, #468]	; (800812c <shell_thread.lto_priv.83+0x1fc>)
 8007f56:	f7ff fc6b 	bl	8007830 <chprintf.lto_priv.104>
 * @retval FALSE        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 8007f5a:	4635      	mov	r5, r6

  while (TRUE) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f10d 0107 	add.w	r1, sp, #7
 8007f66:	2201      	movs	r2, #1
 8007f68:	4798      	blx	r3
 8007f6a:	b370      	cbz	r0, 8007fca <shell_thread.lto_priv.83+0x9a>
      return TRUE;
    if (c == 4) {
 8007f6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007f70:	2904      	cmp	r1, #4
 8007f72:	d026      	beq.n	8007fc2 <shell_thread.lto_priv.83+0x92>
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
 8007f74:	2908      	cmp	r1, #8
 8007f76:	d011      	beq.n	8007f9c <shell_thread.lto_priv.83+0x6c>
 8007f78:	297f      	cmp	r1, #127	; 0x7f
 8007f7a:	d00f      	beq.n	8007f9c <shell_thread.lto_priv.83+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8007f7c:	290d      	cmp	r1, #13
 8007f7e:	d036      	beq.n	8007fee <shell_thread.lto_priv.83+0xbe>
      chprintf(chp, "\r\n");
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
 8007f80:	291f      	cmp	r1, #31
 8007f82:	d9eb      	bls.n	8007f5c <shell_thread.lto_priv.83+0x2c>
      continue;
    if (p < line + size - 1) {
 8007f84:	42bd      	cmp	r5, r7
 8007f86:	d2e9      	bcs.n	8007f5c <shell_thread.lto_priv.83+0x2c>
      chSequentialStreamPut(chp, c);
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	4798      	blx	r3
      *p++ = (char)c;
 8007f90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f94:	3501      	adds	r5, #1
 8007f96:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007f9a:	e7df      	b.n	8007f5c <shell_thread.lto_priv.83+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 8007f9c:	42b5      	cmp	r5, r6
 8007f9e:	d0dd      	beq.n	8007f5c <shell_thread.lto_priv.83+0x2c>
        chSequentialStreamPut(chp, c);
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	4620      	mov	r0, r4
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2120      	movs	r1, #32
 8007fb0:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 8007fbc:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 8007fbe:	4798      	blx	r3
 8007fc0:	e7cc      	b.n	8007f5c <shell_thread.lto_priv.83+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return TRUE;
    if (c == 4) {
      chprintf(chp, "^D");
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	495a      	ldr	r1, [pc, #360]	; (8008130 <shell_thread.lto_priv.83+0x200>)
 8007fc6:	f7ff fc33 	bl	8007830 <chprintf.lto_priv.104>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8007fca:	4620      	mov	r0, r4
 8007fcc:	4959      	ldr	r1, [pc, #356]	; (8008134 <shell_thread.lto_priv.83+0x204>)
 8007fce:	f7ff fc2f 	bl	8007830 <chprintf.lto_priv.104>
 8007fd2:	2320      	movs	r3, #32
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, 0);
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4857      	ldr	r0, [pc, #348]	; (8008138 <shell_thread.lto_priv.83+0x208>)
 8007fdc:	f7fe fd50 	bl	8006a80 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	f7ff f9ad 	bl	8007340 <chThdExitS>
    }
  }
  shellExit(MSG_OK);
  /* Never executed, silencing a warning.*/
  return 0;
}
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	b018      	add	sp, #96	; 0x60
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 8007fee:	4953      	ldr	r1, [pc, #332]	; (800813c <shell_thread.lto_priv.83+0x20c>)
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f7ff fc1d 	bl	8007830 <chprintf.lto_priv.104>
      *p = 0;
 8007ff6:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8007ff8:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8007ffa:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8007ffc:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 8007ffe:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8008000:	f001 fa46 	bl	8009490 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8008004:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8008006:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8008008:	2000      	movs	r0, #0
 800800a:	f10d 090c 	add.w	r9, sp, #12
 800800e:	f001 fa3f 	bl	8009490 <_strtok.constprop.3>
 8008012:	b150      	cbz	r0, 800802a <shell_thread.lto_priv.83+0xfa>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8008014:	2d04      	cmp	r5, #4
 8008016:	d01d      	beq.n	8008054 <shell_thread.lto_priv.83+0x124>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8008018:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800801c:	a902      	add	r1, sp, #8
 800801e:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8008020:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8008022:	f001 fa35 	bl	8009490 <_strtok.constprop.3>
 8008026:	2800      	cmp	r0, #0
 8008028:	d1f4      	bne.n	8008014 <shell_thread.lto_priv.83+0xe4>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800802a:	ab18      	add	r3, sp, #96	; 0x60
 800802c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008030:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8008034:	f1ba 0f00 	cmp.w	sl, #0
 8008038:	d08b      	beq.n	8007f52 <shell_thread.lto_priv.83+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 800803a:	4650      	mov	r0, sl
 800803c:	4940      	ldr	r1, [pc, #256]	; (8008140 <shell_thread.lto_priv.83+0x210>)
 800803e:	f001 faaf 	bl	80095a0 <strcasecmp>
 8008042:	b970      	cbnz	r0, 8008062 <shell_thread.lto_priv.83+0x132>
        if (n > 0) {
 8008044:	2d00      	cmp	r5, #0
 8008046:	d0c4      	beq.n	8007fd2 <shell_thread.lto_priv.83+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008048:	4620      	mov	r0, r4
 800804a:	493e      	ldr	r1, [pc, #248]	; (8008144 <shell_thread.lto_priv.83+0x214>)
 800804c:	4a3c      	ldr	r2, [pc, #240]	; (8008140 <shell_thread.lto_priv.83+0x210>)
 800804e:	f7ff fbef 	bl	8007830 <chprintf.lto_priv.104>
 8008052:	e77e      	b.n	8007f52 <shell_thread.lto_priv.83+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8008054:	4620      	mov	r0, r4
 8008056:	493c      	ldr	r1, [pc, #240]	; (8008148 <shell_thread.lto_priv.83+0x218>)
 8008058:	f7ff fbea 	bl	8007830 <chprintf.lto_priv.104>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800805c:	2300      	movs	r3, #0
 800805e:	9307      	str	r3, [sp, #28]
 8008060:	e777      	b.n	8007f52 <shell_thread.lto_priv.83+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8008062:	4650      	mov	r0, sl
 8008064:	4939      	ldr	r1, [pc, #228]	; (800814c <shell_thread.lto_priv.83+0x21c>)
 8008066:	f001 fa9b 	bl	80095a0 <strcasecmp>
 800806a:	b930      	cbnz	r0, 800807a <shell_thread.lto_priv.83+0x14a>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800806c:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800806e:	b1c5      	cbz	r5, 80080a2 <shell_thread.lto_priv.83+0x172>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008070:	4934      	ldr	r1, [pc, #208]	; (8008144 <shell_thread.lto_priv.83+0x214>)
 8008072:	4a36      	ldr	r2, [pc, #216]	; (800814c <shell_thread.lto_priv.83+0x21c>)
 8008074:	f7ff fbdc 	bl	8007830 <chprintf.lto_priv.104>
 8008078:	e76b      	b.n	8007f52 <shell_thread.lto_priv.83+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800807a:	4b35      	ldr	r3, [pc, #212]	; (8008150 <shell_thread.lto_priv.83+0x220>)
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	4699      	mov	r9, r3
 8008080:	b918      	cbnz	r0, 800808a <shell_thread.lto_priv.83+0x15a>
 8008082:	e031      	b.n	80080e8 <shell_thread.lto_priv.83+0x1b8>
 8008084:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8008088:	b370      	cbz	r0, 80080e8 <shell_thread.lto_priv.83+0x1b8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800808a:	4651      	mov	r1, sl
 800808c:	f001 fa88 	bl	80095a0 <strcasecmp>
 8008090:	2800      	cmp	r0, #0
 8008092:	d1f7      	bne.n	8008084 <shell_thread.lto_priv.83+0x154>
      scp->sc_function(chp, argc, argv);
 8008094:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008098:	4629      	mov	r1, r5
 800809a:	aa03      	add	r2, sp, #12
 800809c:	4620      	mov	r0, r4
 800809e:	4798      	blx	r3
 80080a0:	e757      	b.n	8007f52 <shell_thread.lto_priv.83+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 80080a2:	492c      	ldr	r1, [pc, #176]	; (8008154 <shell_thread.lto_priv.83+0x224>)
 80080a4:	f7ff fbc4 	bl	8007830 <chprintf.lto_priv.104>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80080a8:	4b29      	ldr	r3, [pc, #164]	; (8008150 <shell_thread.lto_priv.83+0x220>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	461d      	mov	r5, r3
 80080ae:	b13a      	cbz	r2, 80080c0 <shell_thread.lto_priv.83+0x190>
    chprintf(chp, "%s ", scp->sc_name);
 80080b0:	4620      	mov	r0, r4
 80080b2:	4929      	ldr	r1, [pc, #164]	; (8008158 <shell_thread.lto_priv.83+0x228>)
 80080b4:	f7ff fbbc 	bl	8007830 <chprintf.lto_priv.104>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80080b8:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80080bc:	2a00      	cmp	r2, #0
 80080be:	d1f7      	bne.n	80080b0 <shell_thread.lto_priv.83+0x180>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d00b      	beq.n	80080de <shell_thread.lto_priv.83+0x1ae>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80080c6:	f8d8 2000 	ldr.w	r2, [r8]
 80080ca:	b142      	cbz	r2, 80080de <shell_thread.lto_priv.83+0x1ae>
 80080cc:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 80080ce:	4620      	mov	r0, r4
 80080d0:	4921      	ldr	r1, [pc, #132]	; (8008158 <shell_thread.lto_priv.83+0x228>)
 80080d2:	f7ff fbad 	bl	8007830 <chprintf.lto_priv.104>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80080d6:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d1f7      	bne.n	80080ce <shell_thread.lto_priv.83+0x19e>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 80080de:	4620      	mov	r0, r4
 80080e0:	4916      	ldr	r1, [pc, #88]	; (800813c <shell_thread.lto_priv.83+0x20c>)
 80080e2:	f7ff fba5 	bl	8007830 <chprintf.lto_priv.104>
 80080e6:	e734      	b.n	8007f52 <shell_thread.lto_priv.83+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 80080e8:	f1b8 0f00 	cmp.w	r8, #0
 80080ec:	d00d      	beq.n	800810a <shell_thread.lto_priv.83+0x1da>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80080ee:	f8d8 0000 	ldr.w	r0, [r8]
 80080f2:	b150      	cbz	r0, 800810a <shell_thread.lto_priv.83+0x1da>
 80080f4:	46c1      	mov	r9, r8
 80080f6:	e002      	b.n	80080fe <shell_thread.lto_priv.83+0x1ce>
 80080f8:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80080fc:	b128      	cbz	r0, 800810a <shell_thread.lto_priv.83+0x1da>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80080fe:	4651      	mov	r1, sl
 8008100:	f001 fa4e 	bl	80095a0 <strcasecmp>
 8008104:	2800      	cmp	r0, #0
 8008106:	d1f7      	bne.n	80080f8 <shell_thread.lto_priv.83+0x1c8>
 8008108:	e7c4      	b.n	8008094 <shell_thread.lto_priv.83+0x164>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 800810a:	4652      	mov	r2, sl
 800810c:	4620      	mov	r0, r4
 800810e:	4913      	ldr	r1, [pc, #76]	; (800815c <shell_thread.lto_priv.83+0x22c>)
 8008110:	f7ff fb8e 	bl	8007830 <chprintf.lto_priv.104>
        chprintf(chp, " ?\r\n");
 8008114:	4620      	mov	r0, r4
 8008116:	4912      	ldr	r1, [pc, #72]	; (8008160 <shell_thread.lto_priv.83+0x230>)
 8008118:	f7ff fb8a 	bl	8007830 <chprintf.lto_priv.104>
 800811c:	e719      	b.n	8007f52 <shell_thread.lto_priv.83+0x22>
 800811e:	bf00      	nop
 8008120:	20001e40 	.word	0x20001e40
 8008124:	0800ac94 	.word	0x0800ac94
 8008128:	0800ac9c 	.word	0x0800ac9c
 800812c:	0800acb4 	.word	0x0800acb4
 8008130:	0800acbc 	.word	0x0800acbc
 8008134:	0800ad10 	.word	0x0800ad10
 8008138:	20001284 	.word	0x20001284
 800813c:	08009c38 	.word	0x08009c38
 8008140:	0800acd8 	.word	0x0800acd8
 8008144:	0800abb0 	.word	0x0800abb0
 8008148:	0800acc0 	.word	0x0800acc0
 800814c:	0800ace0 	.word	0x0800ace0
 8008150:	20000864 	.word	0x20000864
 8008154:	0800ace8 	.word	0x0800ace8
 8008158:	0800ad00 	.word	0x0800ad00
 800815c:	0800ad04 	.word	0x0800ad04
 8008160:	0800ad08 	.word	0x0800ad08
 8008164:	f3af 8000 	nop.w
 8008168:	f3af 8000 	nop.w
 800816c:	f3af 8000 	nop.w

08008170 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4681      	mov	r9, r0
 8008176:	460d      	mov	r5, r1
 8008178:	4616      	mov	r6, r2
 800817a:	4682      	mov	sl, r0
 800817c:	b08d      	sub	sp, #52	; 0x34
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	9301      	str	r3, [sp, #4]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8008182:	7829      	ldrb	r1, [r5, #0]
 8008184:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8008186:	b171      	cbz	r1, 80081a6 <chvprintf+0x36>
      return n;
    if (c != '%') {
 8008188:	2925      	cmp	r1, #37	; 0x25
 800818a:	d010      	beq.n	80081ae <chvprintf+0x3e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800818c:	461d      	mov	r5, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 800818e:	9c01      	ldr	r4, [sp, #4]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8008190:	f8da 2000 	ldr.w	r2, [sl]
 8008194:	4650      	mov	r0, sl
 8008196:	6892      	ldr	r2, [r2, #8]
      n++;
 8008198:	3401      	adds	r4, #1
 800819a:	9401      	str	r4, [sp, #4]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 800819c:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800819e:	7829      	ldrb	r1, [r5, #0]
 80081a0:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 80081a2:	2900      	cmp	r1, #0
 80081a4:	d1f0      	bne.n	8008188 <chvprintf+0x18>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 80081a6:	9801      	ldr	r0, [sp, #4]
 80081a8:	b00d      	add	sp, #52	; 0x34
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80081ae:	786a      	ldrb	r2, [r5, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 80081b0:	2700      	movs	r7, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80081b2:	2a2d      	cmp	r2, #45	; 0x2d
 80081b4:	bf03      	ittte	eq
 80081b6:	78aa      	ldrbeq	r2, [r5, #2]
      fmt++;
 80081b8:	1cab      	addeq	r3, r5, #2
      left_align = TRUE;
 80081ba:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 80081be:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 80081c2:	2a30      	cmp	r2, #48	; 0x30
 80081c4:	bf03      	ittte	eq
 80081c6:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 80081c8:	3301      	addeq	r3, #1
      filler = '0';
 80081ca:	f04f 0830 	moveq.w	r8, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 80081ce:	f04f 0820 	movne.w	r8, #32
 80081d2:	1c59      	adds	r1, r3, #1
 80081d4:	e005      	b.n	80081e2 <chvprintf+0x72>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 80081d6:	7833      	ldrb	r3, [r6, #0]
 80081d8:	3604      	adds	r6, #4
 80081da:	782a      	ldrb	r2, [r5, #0]
      else
        break;
      width = width * 10 + c;
 80081dc:	eb03 0740 	add.w	r7, r3, r0, lsl #1
 80081e0:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80081e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 80081ea:	460d      	mov	r5, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 80081ec:	eb07 0087 	add.w	r0, r7, r7, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 80081f0:	d9f3      	bls.n	80081da <chvprintf+0x6a>
        c -= '0';
      else if (c == '*')
 80081f2:	2a2a      	cmp	r2, #42	; 0x2a
 80081f4:	d0ef      	beq.n	80081d6 <chvprintf+0x66>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 80081f6:	2a2e      	cmp	r2, #46	; 0x2e
 80081f8:	f04f 0b00 	mov.w	fp, #0
 80081fc:	d043      	beq.n	8008286 <chvprintf+0x116>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80081fe:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8008202:	2b4c      	cmp	r3, #76	; 0x4c
 8008204:	d04e      	beq.n	80082a4 <chvprintf+0x134>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8008206:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 800820a:	2934      	cmp	r1, #52	; 0x34
 800820c:	f200 8174 	bhi.w	80084f8 <chvprintf+0x388>
 8008210:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008214:	01720158 	.word	0x01720158
 8008218:	01720172 	.word	0x01720172
 800821c:	01580172 	.word	0x01580172
 8008220:	01720172 	.word	0x01720172
 8008224:	01720172 	.word	0x01720172
 8008228:	012b0172 	.word	0x012b0172
 800822c:	01720172 	.word	0x01720172
 8008230:	01720172 	.word	0x01720172
 8008234:	015f0172 	.word	0x015f0172
 8008238:	01720172 	.word	0x01720172
 800823c:	0172016f 	.word	0x0172016f
 8008240:	01720172 	.word	0x01720172
 8008244:	01720172 	.word	0x01720172
 8008248:	01720172 	.word	0x01720172
 800824c:	01720172 	.word	0x01720172
 8008250:	01610172 	.word	0x01610172
 8008254:	01720158 	.word	0x01720158
 8008258:	017200d5 	.word	0x017200d5
 800825c:	01580172 	.word	0x01580172
 8008260:	01720172 	.word	0x01720172
 8008264:	01720172 	.word	0x01720172
 8008268:	012b0172 	.word	0x012b0172
 800826c:	01720172 	.word	0x01720172
 8008270:	00890172 	.word	0x00890172
 8008274:	015f0172 	.word	0x015f0172
 8008278:	01720172 	.word	0x01720172
 800827c:	016f      	.short	0x016f
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800827e:	7833      	ldrb	r3, [r6, #0]
 8008280:	3604      	adds	r6, #4
        else
          break;
        precision *= 10;
        precision += c;
 8008282:	eb03 0b41 	add.w	fp, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8008286:	f815 2b01 	ldrb.w	r2, [r5], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 800828a:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 800828e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b09      	cmp	r3, #9
 8008296:	d9f4      	bls.n	8008282 <chvprintf+0x112>
          c -= '0';
        else if (c == '*')
 8008298:	2a2a      	cmp	r2, #42	; 0x2a
 800829a:	d0f0      	beq.n	800827e <chvprintf+0x10e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800829c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80082a0:	2b4c      	cmp	r3, #76	; 0x4c
 80082a2:	d1b0      	bne.n	8008206 <chvprintf+0x96>
      is_long = TRUE;
      if (*fmt)
 80082a4:	782b      	ldrb	r3, [r5, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8126 	beq.w	80084f8 <chvprintf+0x388>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80082ac:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 80082b0:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80082b2:	2a34      	cmp	r2, #52	; 0x34
 80082b4:	f200 811f 	bhi.w	80084f6 <chvprintf+0x386>
 80082b8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80082bc:	011d0104 	.word	0x011d0104
 80082c0:	011d011d 	.word	0x011d011d
 80082c4:	0104011d 	.word	0x0104011d
 80082c8:	011d011d 	.word	0x011d011d
 80082cc:	011d011d 	.word	0x011d011d
 80082d0:	00d7011d 	.word	0x00d7011d
 80082d4:	011d011d 	.word	0x011d011d
 80082d8:	011d011d 	.word	0x011d011d
 80082dc:	010b011d 	.word	0x010b011d
 80082e0:	011d011d 	.word	0x011d011d
 80082e4:	011d011b 	.word	0x011d011b
 80082e8:	011d011d 	.word	0x011d011d
 80082ec:	011d011d 	.word	0x011d011d
 80082f0:	011d011d 	.word	0x011d011d
 80082f4:	011d011d 	.word	0x011d011d
 80082f8:	010d011d 	.word	0x010d011d
 80082fc:	011d0104 	.word	0x011d0104
 8008300:	011d0081 	.word	0x011d0081
 8008304:	0104011d 	.word	0x0104011d
 8008308:	011d011d 	.word	0x011d011d
 800830c:	011d011d 	.word	0x011d011d
 8008310:	00d7011d 	.word	0x00d7011d
 8008314:	011d011d 	.word	0x011d011d
 8008318:	0035011d 	.word	0x0035011d
 800831c:	010b011d 	.word	0x010b011d
 8008320:	011d011d 	.word	0x011d011d
 8008324:	011b      	.short	0x011b
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8008326:	6834      	ldr	r4, [r6, #0]
        s = "(null)";
 8008328:	4b93      	ldr	r3, [pc, #588]	; (8008578 <chvprintf+0x408>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800832a:	3604      	adds	r6, #4
        s = "(null)";
 800832c:	2c00      	cmp	r4, #0
 800832e:	bf08      	it	eq
 8008330:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8008332:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8008334:	f1bb 0f00 	cmp.w	fp, #0
 8008338:	f000 80fc 	beq.w	8008534 <chvprintf+0x3c4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80fe 	beq.w	800853e <chvprintf+0x3ce>
 8008342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008346:	4620      	mov	r0, r4
 8008348:	e002      	b.n	8008350 <chvprintf+0x1e0>
 800834a:	f1bb 0b01 	subs.w	fp, fp, #1
 800834e:	d403      	bmi.n	8008358 <chvprintf+0x1e8>
 8008350:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f8      	bne.n	800834a <chvprintf+0x1da>
 8008358:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800835a:	1a3f      	subs	r7, r7, r0
 800835c:	f100 3bff 	add.w	fp, r0, #4294967295
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8008360:	f04f 0820 	mov.w	r8, #32
 8008364:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8008368:	f1b9 0f00 	cmp.w	r9, #0
 800836c:	f000 8090 	beq.w	8008490 <chvprintf+0x320>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8008370:	f1bb 0f00 	cmp.w	fp, #0
 8008374:	db13      	blt.n	800839e <chvprintf+0x22e>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8008376:	46d9      	mov	r9, fp
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8008378:	f8da 3000 	ldr.w	r3, [sl]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800837c:	f109 39ff 	add.w	r9, r9, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	4650      	mov	r0, sl
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800838a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800838e:	d1f3      	bne.n	8008378 <chvprintf+0x208>
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	3301      	adds	r3, #1
 8008394:	f1bb 0f00 	cmp.w	fp, #0
 8008398:	bfa8      	it	ge
 800839a:	445b      	addge	r3, fp
 800839c:	9301      	str	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800839e:	2f00      	cmp	r7, #0
 80083a0:	f43f aeef 	beq.w	8008182 <chvprintf+0x12>
 80083a4:	463c      	mov	r4, r7
      chSequentialStreamPut(chp, (uint8_t)filler);
 80083a6:	f8da 3000 	ldr.w	r3, [sl]
 80083aa:	4650      	mov	r0, sl
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	4641      	mov	r1, r8
 80083b0:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80083b2:	3c01      	subs	r4, #1
 80083b4:	d1f7      	bne.n	80083a6 <chvprintf+0x236>
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	443b      	add	r3, r7
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	e6e1      	b.n	8008182 <chvprintf+0x12>
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80083be:	3607      	adds	r6, #7
 80083c0:	f026 0607 	bic.w	r6, r6, #7
 80083c4:	e9d6 0100 	ldrd	r0, r1, [r6]
 80083c8:	f7f8 fd92 	bl	8000ef0 <__aeabi_d2f>
      if (f < 0) {
 80083cc:	2100      	movs	r1, #0
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80083ce:	3608      	adds	r6, #8
 80083d0:	4604      	mov	r4, r0
      if (f < 0) {
 80083d2:	f7f9 f88b 	bl	80014ec <__aeabi_fcmplt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f040 80c2 	bne.w	8008560 <chvprintf+0x3f0>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80083dc:	ab06      	add	r3, sp, #24
                                      10000000, 100000000, 1000000000};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80083de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083e2:	f1bb 0f08 	cmp.w	fp, #8
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 80083e6:	4a65      	ldr	r2, [pc, #404]	; (800857c <chvprintf+0x40c>)
 80083e8:	bf28      	it	cs
 80083ea:	f04f 0b08 	movcs.w	fp, #8
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]

  l = (long)num;
 80083f4:	4620      	mov	r0, r4
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 80083f6:	9304      	str	r3, [sp, #16]

  l = (long)num;
 80083f8:	f7f9 f8a2 	bl	8001540 <__aeabi_f2iz>
 80083fc:	4683      	mov	fp, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	220a      	movs	r2, #10
 8008402:	4618      	mov	r0, r3
 8008404:	4659      	mov	r1, fp
 8008406:	2300      	movs	r3, #0
 8008408:	f7ff fcea 	bl	8007de0 <long_to_string_with_divisor>
  *p++ = '.';
 800840c:	4684      	mov	ip, r0
 800840e:	232e      	movs	r3, #46	; 0x2e
 8008410:	f80c 3b01 	strb.w	r3, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8008414:	4620      	mov	r0, r4
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8008416:	f8cd c014 	str.w	ip, [sp, #20]
 800841a:	f8cd c008 	str.w	ip, [sp, #8]
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800841e:	f7f8 fab3 	bl	8000988 <__aeabi_f2d>
 8008422:	e9cd 0102 	strd	r0, r1, [sp, #8]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8008426:	4658      	mov	r0, fp
 8008428:	f7f8 fa9c 	bl	8000964 <__aeabi_i2d>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008434:	f7f8 f948 	bl	80006c8 <__aeabi_dsub>
 8008438:	9c04      	ldr	r4, [sp, #16]
 800843a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800843e:	4620      	mov	r0, r4
 8008440:	f7f8 fa80 	bl	8000944 <__aeabi_ui2d>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800844c:	f7f8 faf0 	bl	8000a30 <__aeabi_dmul>
 8008450:	f7f8 fd06 	bl	8000e60 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8008454:	4622      	mov	r2, r4
 8008456:	4b4a      	ldr	r3, [pc, #296]	; (8008580 <chvprintf+0x410>)
 8008458:	f8dd c014 	ldr.w	ip, [sp, #20]
 800845c:	fba3 2302 	umull	r2, r3, r3, r2
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8008460:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8008462:	08db      	lsrs	r3, r3, #3
 8008464:	4660      	mov	r0, ip
 8008466:	220a      	movs	r2, #10
 8008468:	e004      	b.n	8008474 <chvprintf+0x304>
 800846a:	2208      	movs	r2, #8
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800846c:	6831      	ldr	r1, [r6, #0]
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800846e:	a806      	add	r0, sp, #24
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8008470:	3604      	adds	r6, #4
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8008472:	2300      	movs	r3, #0
 8008474:	f7ff fcb4 	bl	8007de0 <long_to_string_with_divisor>
 8008478:	ab06      	add	r3, sp, #24
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800847a:	461c      	mov	r4, r3
 800847c:	1ac0      	subs	r0, r0, r3
 800847e:	f100 3bff 	add.w	fp, r0, #4294967295
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8008482:	1a3f      	subs	r7, r7, r0
 8008484:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      width = 0;
    if (left_align == FALSE)
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	f47f af70 	bne.w	8008370 <chvprintf+0x200>
      width = -width;
 8008490:	f1c7 0900 	rsb	r9, r7, #0
    if (width < 0) {
 8008494:	f1b9 0f00 	cmp.w	r9, #0
 8008498:	d037      	beq.n	800850a <chvprintf+0x39a>
      if (*s == '-' && filler == '0') {
 800849a:	7821      	ldrb	r1, [r4, #0]
 800849c:	292d      	cmp	r1, #45	; 0x2d
 800849e:	d03a      	beq.n	8008516 <chvprintf+0x3a6>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 80084a0:	464f      	mov	r7, r9
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80084a2:	f8da 3000 	ldr.w	r3, [sl]
 80084a6:	4650      	mov	r0, sl
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4641      	mov	r1, r8
 80084ac:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80084ae:	3701      	adds	r7, #1
 80084b0:	d1f7      	bne.n	80084a2 <chvprintf+0x332>
 80084b2:	9b01      	ldr	r3, [sp, #4]
    }
    while (--i >= 0) {
 80084b4:	f1bb 0f00 	cmp.w	fp, #0
 80084b8:	ebc9 0303 	rsb	r3, r9, r3
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	f6bf af5a 	bge.w	8008376 <chvprintf+0x206>
 80084c2:	e65e      	b.n	8008182 <chvprintf+0x12>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80084c4:	6831      	ldr	r1, [r6, #0]
 80084c6:	3604      	adds	r6, #4
      if (l < 0) {
 80084c8:	2900      	cmp	r1, #0
 80084ca:	db42      	blt.n	8008552 <chvprintf+0x3e2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80084cc:	a806      	add	r0, sp, #24
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80084ce:	220a      	movs	r2, #10
 80084d0:	e7cf      	b.n	8008472 <chvprintf+0x302>
 80084d2:	220a      	movs	r2, #10
 80084d4:	e7ca      	b.n	800846c <chvprintf+0x2fc>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80084d6:	6833      	ldr	r3, [r6, #0]
 80084d8:	aa06      	add	r2, sp, #24
 80084da:	f10d 0019 	add.w	r0, sp, #25
 80084de:	1a80      	subs	r0, r0, r2
 80084e0:	f100 3bff 	add.w	fp, r0, #4294967295
 80084e4:	f88d 3018 	strb.w	r3, [sp, #24]
 80084e8:	3604      	adds	r6, #4
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80084ea:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80084ee:	4614      	mov	r4, r2
 80084f0:	e7c7      	b.n	8008482 <chvprintf+0x312>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80084f2:	2210      	movs	r2, #16
 80084f4:	e7ba      	b.n	800846c <chvprintf+0x2fc>
 80084f6:	461a      	mov	r2, r3
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80084f8:	ac06      	add	r4, sp, #24
 80084fa:	f10d 0019 	add.w	r0, sp, #25
 80084fe:	1b00      	subs	r0, r0, r4
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8008500:	f88d 2018 	strb.w	r2, [sp, #24]
 8008504:	f100 3bff 	add.w	fp, r0, #4294967295
 8008508:	e7bb      	b.n	8008482 <chvprintf+0x312>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800850a:	f1bb 0f00 	cmp.w	fp, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 800850e:	464f      	mov	r7, r9
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8008510:	f6bf af31 	bge.w	8008376 <chvprintf+0x206>
 8008514:	e635      	b.n	8008182 <chvprintf+0x12>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8008516:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 800851a:	d1c1      	bne.n	80084a0 <chvprintf+0x330>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800851c:	f8da 3000 	ldr.w	r3, [sl]
 8008520:	4650      	mov	r0, sl
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4798      	blx	r3
        n++;
 8008526:	9b01      	ldr	r3, [sp, #4]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8008528:	3401      	adds	r4, #1
        n++;
 800852a:	3301      	adds	r3, #1
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008532:	e7b5      	b.n	80084a0 <chvprintf+0x330>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8008534:	f647 7bfe 	movw	fp, #32766	; 0x7ffe
 8008538:	2b00      	cmp	r3, #0
 800853a:	f47f af04 	bne.w	8008346 <chvprintf+0x1d6>
 800853e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8008542:	f1b9 0f00 	cmp.w	r9, #0
 8008546:	d113      	bne.n	8008570 <chvprintf+0x400>
 8008548:	f04f 3bff 	mov.w	fp, #4294967295
 800854c:	f04f 0820 	mov.w	r8, #32
 8008550:	e79e      	b.n	8008490 <chvprintf+0x320>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8008552:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8008554:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8008556:	f88d 3018 	strb.w	r3, [sp, #24]
 800855a:	f10d 0019 	add.w	r0, sp, #25
 800855e:	e7b6      	b.n	80084ce <chvprintf+0x35e>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8008560:	232d      	movs	r3, #45	; 0x2d
 8008562:	f88d 3018 	strb.w	r3, [sp, #24]
        f = -f;
 8008566:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800856a:	f10d 0319 	add.w	r3, sp, #25
 800856e:	e736      	b.n	80083de <chvprintf+0x26e>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8008570:	f04f 0820 	mov.w	r8, #32
 8008574:	e713      	b.n	800839e <chvprintf+0x22e>
 8008576:	bf00      	nop
 8008578:	0800ad1c 	.word	0x0800ad1c
 800857c:	0800aeb0 	.word	0x0800aeb0
 8008580:	cccccccd 	.word	0xcccccccd
 8008584:	f3af 8000 	nop.w
 8008588:	f3af 8000 	nop.w
 800858c:	f3af 8000 	nop.w

08008590 <chprintf.lto_priv.81>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008590:	b40e      	push	{r1, r2, r3}
 8008592:	b500      	push	{lr}
 8008594:	b082      	sub	sp, #8
 8008596:	ab03      	add	r3, sp, #12
 8008598:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800859c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800859e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80085a0:	f7ff fde6 	bl	8008170 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80085a4:	b002      	add	sp, #8
 80085a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80085aa:	b003      	add	sp, #12
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <cmd_write.lto_priv.101>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 80085b0:	2900      	cmp	r1, #0
 80085b2:	dc17      	bgt.n	80085e4 <cmd_write.lto_priv.101+0x34>
    return;
  }
  chThdWait(tp);
}

static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4604      	mov	r4, r0
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 80085b8:	4d0c      	ldr	r5, [pc, #48]	; (80085ec <cmd_write.lto_priv.101+0x3c>)
 80085ba:	e002      	b.n	80085c2 <cmd_write.lto_priv.101+0x12>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4798      	blx	r3
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	2100      	movs	r1, #0
 80085c6:	4620      	mov	r0, r4
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4798      	blx	r3
 80085cc:	3001      	adds	r0, #1
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 80085ce:	4908      	ldr	r1, [pc, #32]	; (80085f0 <cmd_write.lto_priv.101+0x40>)
 80085d0:	4806      	ldr	r0, [pc, #24]	; (80085ec <cmd_write.lto_priv.101+0x3c>)
 80085d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 80085d6:	d0f1      	beq.n	80085bc <cmd_write.lto_priv.101+0xc>
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 80085d8:	4620      	mov	r0, r4
}
 80085da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 80085de:	4905      	ldr	r1, [pc, #20]	; (80085f4 <cmd_write.lto_priv.101+0x44>)
 80085e0:	f7ff bfd6 	b.w	8008590 <chprintf.lto_priv.81>
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 80085e4:	4904      	ldr	r1, [pc, #16]	; (80085f8 <cmd_write.lto_priv.101+0x48>)
 80085e6:	f7ff bfd3 	b.w	8008590 <chprintf.lto_priv.81>
 80085ea:	bf00      	nop
 80085ec:	2000128c 	.word	0x2000128c
 80085f0:	2000087c 	.word	0x2000087c
 80085f4:	0800ad24 	.word	0x0800ad24
 80085f8:	0800ad34 	.word	0x0800ad34
 80085fc:	f3af 8000 	nop.w

08008600 <cmd_test.lto_priv.100>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8008600:	2900      	cmp	r1, #0
 8008602:	dd02      	ble.n	800860a <cmd_test.lto_priv.100+0xa>
    chprintf(chp, "Usage: test\r\n");
 8008604:	490e      	ldr	r1, [pc, #56]	; (8008640 <cmd_test.lto_priv.100+0x40>)
 8008606:	f7ff bfc3 	b.w	8008590 <chprintf.lto_priv.81>
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800860a:	b510      	push	{r4, lr}
 800860c:	4604      	mov	r4, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800860e:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <cmd_test.lto_priv.100+0x44>)
 8008610:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008612:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8008614:	2000      	movs	r0, #0
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800861c:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <cmd_test.lto_priv.100+0x48>)
 800861e:	9400      	str	r4, [sp, #0]
 8008620:	f7fe fbf6 	bl	8006e10 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 8008624:	b120      	cbz	r0, 8008630 <cmd_test.lto_priv.100+0x30>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 8008626:	b002      	add	sp, #8
 8008628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 800862c:	f7fe bcb8 	b.w	8006fa0 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8008630:	4620      	mov	r0, r4
 8008632:	4906      	ldr	r1, [pc, #24]	; (800864c <cmd_test.lto_priv.100+0x4c>)
    return;
  }
  chThdWait(tp);
}
 8008634:	b002      	add	sp, #8
 8008636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 800863a:	f7ff bfa9 	b.w	8008590 <chprintf.lto_priv.81>
 800863e:	bf00      	nop
 8008640:	0800ad44 	.word	0x0800ad44
 8008644:	20001e40 	.word	0x20001e40
 8008648:	08006091 	.word	0x08006091
 800864c:	0800ad54 	.word	0x0800ad54

08008650 <cmd_threads.lto_priv.99>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8008650:	2900      	cmp	r1, #0
 8008652:	dd02      	ble.n	800865a <cmd_threads.lto_priv.99+0xa>
    chprintf(chp, "Usage: threads\r\n");
 8008654:	4915      	ldr	r1, [pc, #84]	; (80086ac <cmd_threads.lto_priv.99+0x5c>)
 8008656:	f7ff bf9b 	b.w	8008590 <chprintf.lto_priv.81>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800865a:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 800865c:	4914      	ldr	r1, [pc, #80]	; (80086b0 <cmd_threads.lto_priv.99+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800865e:	b084      	sub	sp, #16
 8008660:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8008662:	f7ff ff95 	bl	8008590 <chprintf.lto_priv.81>
 8008666:	2320      	movs	r3, #32
 8008668:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800866c:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <cmd_threads.lto_priv.99+0x64>)
 800866e:	2200      	movs	r2, #0
 8008670:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8008672:	7fa3      	ldrb	r3, [r4, #30]
 8008674:	3301      	adds	r3, #1
 8008676:	77a3      	strb	r3, [r4, #30]
 8008678:	f382 8811 	msr	BASEPRI, r2
 800867c:	4e0e      	ldr	r6, [pc, #56]	; (80086b8 <cmd_threads.lto_priv.99+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 800867e:	68a2      	ldr	r2, [r4, #8]
 8008680:	68e3      	ldr	r3, [r4, #12]
 8008682:	9200      	str	r2, [sp, #0]
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8008684:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8008686:	490d      	ldr	r1, [pc, #52]	; (80086bc <cmd_threads.lto_priv.99+0x6c>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8008688:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 800868a:	9201      	str	r2, [sp, #4]
 800868c:	7f22      	ldrb	r2, [r4, #28]
 800868e:	4628      	mov	r0, r5
 8008690:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8008694:	9202      	str	r2, [sp, #8]
 8008696:	4622      	mov	r2, r4
 8008698:	f7ff ff7a 	bl	8008590 <chprintf.lto_priv.81>
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
 800869c:	4620      	mov	r0, r4
 800869e:	f7fe fa4f 	bl	8006b40 <chRegNextThread>
  } while (tp != NULL);
 80086a2:	4604      	mov	r4, r0
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d1ea      	bne.n	800867e <cmd_threads.lto_priv.99+0x2e>
}
 80086a8:	b004      	add	sp, #16
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	0800ad64 	.word	0x0800ad64
 80086b0:	0800ad78 	.word	0x0800ad78
 80086b4:	20001e40 	.word	0x20001e40
 80086b8:	0800ab70 	.word	0x0800ab70
 80086bc:	0800ada0 	.word	0x0800ada0

080086c0 <cmd_mem.lto_priv.98>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 80086c0:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 80086c2:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 80086c4:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 80086c6:	dd04      	ble.n	80086d2 <cmd_mem.lto_priv.98+0x12>
    chprintf(chp, "Usage: mem\r\n");
 80086c8:	490f      	ldr	r1, [pc, #60]	; (8008708 <cmd_mem.lto_priv.98+0x48>)
 80086ca:	f7ff ff61 	bl	8008590 <chprintf.lto_priv.81>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 80086ce:	b003      	add	sp, #12
 80086d0:	bd30      	pop	{r4, r5, pc}
 80086d2:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 80086d4:	a901      	add	r1, sp, #4
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7fd fe8a 	bl	80063f0 <chHeapStatus>
 80086dc:	4605      	mov	r5, r0
 *
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  return (size_t)(endmem - nextmem);
 80086de:	4a0b      	ldr	r2, [pc, #44]	; (800870c <cmd_mem.lto_priv.98+0x4c>)
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <cmd_mem.lto_priv.98+0x50>)
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 80086e6:	4620      	mov	r0, r4
 80086e8:	1ad2      	subs	r2, r2, r3
 80086ea:	490a      	ldr	r1, [pc, #40]	; (8008714 <cmd_mem.lto_priv.98+0x54>)
 80086ec:	f7ff ff50 	bl	8008590 <chprintf.lto_priv.81>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 80086f0:	462a      	mov	r2, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	4908      	ldr	r1, [pc, #32]	; (8008718 <cmd_mem.lto_priv.98+0x58>)
 80086f6:	f7ff ff4b 	bl	8008590 <chprintf.lto_priv.81>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 80086fa:	4620      	mov	r0, r4
 80086fc:	4907      	ldr	r1, [pc, #28]	; (800871c <cmd_mem.lto_priv.98+0x5c>)
 80086fe:	9a01      	ldr	r2, [sp, #4]
 8008700:	f7ff ff46 	bl	8008590 <chprintf.lto_priv.81>
}
 8008704:	b003      	add	sp, #12
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	0800adbc 	.word	0x0800adbc
 800870c:	20000d30 	.word	0x20000d30
 8008710:	20000d34 	.word	0x20000d34
 8008714:	0800adcc 	.word	0x0800adcc
 8008718:	0800adec 	.word	0x0800adec
 800871c:	0800ae04 	.word	0x0800ae04

08008720 <si446x_initialise>:
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Reset the radio */
	SDN_HIGH;
 8008724:	4c13      	ldr	r4, [pc, #76]	; (8008774 <si446x_initialise+0x54>)
 8008726:	f44f 7500 	mov.w	r5, #512	; 0x200
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 800872a:	b0af      	sub	sp, #188	; 0xbc
	/* Reset the radio */
	SDN_HIGH;
 800872c:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(10);
 800872e:	2014      	movs	r0, #20
 8008730:	f7fe fcc6 	bl	80070c0 <chThdSleep>
	SDN_LOW;						/*Radio is now reset*/
 8008734:	6165      	str	r5, [r4, #20]
	chThdSleepMilliseconds(10);				/*Wait another 10ms to boot*/
 8008736:	2014      	movs	r0, #20
 8008738:	f7fe fcc2 	bl	80070c0 <chThdSleep>
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMilliseconds(10);}/*Wait for CTS high after POR*/
 800873c:	68a3      	ldr	r3, [r4, #8]
 800873e:	051a      	lsls	r2, r3, #20
 8008740:	d5f9      	bpl.n	8008736 <si446x_initialise+0x16>
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8008742:	4c0d      	ldr	r4, [pc, #52]	; (8008778 <si446x_initialise+0x58>)
 8008744:	2501      	movs	r5, #1
 8008746:	2602      	movs	r6, #2
 8008748:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 800874c:	f04f 0eba 	mov.w	lr, #186	; 0xba
 8008750:	2780      	movs	r7, #128	; 0x80
 8008752:	7065      	strb	r5, [r4, #1]
 8008754:	70a5      	strb	r5, [r4, #2]
 8008756:	70e5      	strb	r5, [r4, #3]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8008758:	4621      	mov	r1, r4
 800875a:	4632      	mov	r2, r6
 800875c:	2007      	movs	r0, #7
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <si446x_initialise+0x5c>)
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8008760:	f884 c004 	strb.w	ip, [r4, #4]
 8008764:	f884 e005 	strb.w	lr, [r4, #5]
 8008768:	71a7      	strb	r7, [r4, #6]
 800876a:	7026      	strb	r6, [r4, #0]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 800876c:	f7f9 ff60 	bl	8002630 <si446x_spi>
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8008770:	4d00      	ldr	r5, [pc, #0]	; (8008774 <si446x_initialise+0x54>)
 8008772:	e008      	b.n	8008786 <si446x_initialise+0x66>
 8008774:	40010c00 	.word	0x40010c00
 8008778:	20001770 	.word	0x20001770
 800877c:	20001784 	.word	0x20001784
 8008780:	2014      	movs	r0, #20
 8008782:	f7fe fc9d 	bl	80070c0 <chThdSleep>
 8008786:	68aa      	ldr	r2, [r5, #8]
 8008788:	68ab      	ldr	r3, [r5, #8]
 800878a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800878e:	f083 0301 	eor.w	r3, r3, #1
 8008792:	4313      	orrs	r3, r2
 8008794:	07db      	lsls	r3, r3, #31
 8008796:	d4f3      	bmi.n	8008780 <si446x_initialise+0x60>
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8008798:	2500      	movs	r5, #0
 800879a:	2620      	movs	r6, #32
	si446x_spi( 4, tx_buffer, 0, NULL);
 800879c:	462a      	mov	r2, r5
 800879e:	462b      	mov	r3, r5
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 80087a0:	7026      	strb	r6, [r4, #0]
	si446x_spi( 4, tx_buffer, 0, NULL);
 80087a2:	49df      	ldr	r1, [pc, #892]	; (8008b20 <si446x_initialise+0x400>)
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 80087a4:	7065      	strb	r5, [r4, #1]
 80087a6:	70a5      	strb	r5, [r4, #2]
 80087a8:	70e5      	strb	r5, [r4, #3]
	si446x_spi( 4, tx_buffer, 0, NULL);
 80087aa:	2004      	movs	r0, #4
 80087ac:	f7f9 ff40 	bl	8002630 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 80087b0:	4bdc      	ldr	r3, [pc, #880]	; (8008b24 <si446x_initialise+0x404>)
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 80087b2:	f8df 8394 	ldr.w	r8, [pc, #916]	; 8008b48 <si446x_initialise+0x428>
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 80087b6:	881b      	ldrh	r3, [r3, #0]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 80087b8:	49d9      	ldr	r1, [pc, #868]	; (8008b20 <si446x_initialise+0x400>)
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 80087ba:	f8ad 3008 	strh.w	r3, [sp, #8]
 80087be:	f8bd 6008 	ldrh.w	r6, [sp, #8]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 80087c2:	4643      	mov	r3, r8
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 80087c4:	8026      	strh	r6, [r4, #0]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 80087c6:	220c      	movs	r2, #12
 80087c8:	2002      	movs	r0, #2
 80087ca:	f7f9 ff31 	bl	8002630 <si446x_spi>
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80087ce:	4ad5      	ldr	r2, [pc, #852]	; (8008b24 <si446x_initialise+0x404>)
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 80087d0:	f8b8 e003 	ldrh.w	lr, [r8, #3]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80087d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80087d8:	ab09      	add	r3, sp, #36	; 0x24
 80087da:	8892      	ldrh	r2, [r2, #4]
 80087dc:	9009      	str	r0, [sp, #36]	; 0x24
 80087de:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 80087e2:	4ed1      	ldr	r6, [pc, #836]	; (8008b28 <si446x_initialise+0x408>)
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 80087e4:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80087e6:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
 80087ea:	462b      	mov	r3, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 80087ec:	6020      	str	r0, [r4, #0]
 80087ee:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, NULL);
 80087f0:	2006      	movs	r0, #6
 80087f2:	49cb      	ldr	r1, [pc, #812]	; (8008b20 <si446x_initialise+0x400>)
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 80087f4:	f8a6 e000 	strh.w	lr, [r6]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 80087f8:	f7f9 ff1a 	bl	8002630 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 80087fc:	4bcb      	ldr	r3, [pc, #812]	; (8008b2c <si446x_initialise+0x40c>)
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 80087fe:	2720      	movs	r7, #32
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f7f9 ffa5 	bl	8002750 <si446x_set_frequency>
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8008806:	4bca      	ldr	r3, [pc, #808]	; (8008b30 <si446x_initialise+0x410>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008808:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 800880c:	f993 0000 	ldrsb.w	r0, [r3]
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008810:	f10d 0b98 	add.w	fp, sp, #152	; 0x98
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8008814:	0480      	lsls	r0, r0, #18
 8008816:	f7f8 fc75 	bl	8001104 <__aeabi_i2f>
 800881a:	49c6      	ldr	r1, [pc, #792]	; (8008b34 <si446x_initialise+0x414>)
 800881c:	f7f8 fd7c 	bl	8001318 <__aeabi_fdiv>
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8008820:	49c5      	ldr	r1, [pc, #788]	; (8008b38 <si446x_initialise+0x418>)
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8008822:	4682      	mov	sl, r0
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8008824:	f7f8 fcc4 	bl	80011b0 <__aeabi_fmul>
 8008828:	f7f8 f8ae 	bl	8000988 <__aeabi_f2d>
 800882c:	2200      	movs	r2, #0
 800882e:	4bc3      	ldr	r3, [pc, #780]	; (8008b3c <si446x_initialise+0x41c>)
 8008830:	f7f8 f8fe 	bl	8000a30 <__aeabi_dmul>
 8008834:	f7f8 fb3c 	bl	8000eb0 <__aeabi_d2uiz>
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8008838:	0c03      	lsrs	r3, r0, #16
 800883a:	9301      	str	r3, [sp, #4]
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800883c:	f88d 70a9 	strb.w	r7, [sp, #169]	; 0xa9
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8008840:	f89d 7004 	ldrb.w	r7, [sp, #4]
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8008844:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008848:	462a      	mov	r2, r5
 800884a:	465b      	mov	r3, fp
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800884c:	f04f 0e0a 	mov.w	lr, #10
 8008850:	2603      	movs	r6, #3
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008852:	4649      	mov	r1, r9
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
 8008854:	f88d 00ae 	strb.w	r0, [sp, #174]	; 0xae
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8008858:	f88d 70ac 	strb.w	r7, [sp, #172]	; 0xac
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 800885c:	2007      	movs	r0, #7
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800885e:	2711      	movs	r7, #17
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8008860:	f88d c0ad 	strb.w	ip, [sp, #173]	; 0xad
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8008864:	f88d e0ab 	strb.w	lr, [sp, #171]	; 0xab
 8008868:	f88d 70a8 	strb.w	r7, [sp, #168]	; 0xa8
 800886c:	f88d 60aa 	strb.w	r6, [sp, #170]	; 0xaa
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008870:	f7f9 fede 	bl	8002630 <si446x_spi>
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
 8008874:	49b2      	ldr	r1, [pc, #712]	; (8008b40 <si446x_initialise+0x420>)
 8008876:	4650      	mov	r0, sl
 8008878:	f7f8 fc9a 	bl	80011b0 <__aeabi_fmul>
 800887c:	f7f8 fe88 	bl	8001590 <__aeabi_f2uiz>
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008880:	4649      	mov	r1, r9
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8008882:	ea4f 2a10 	mov.w	sl, r0, lsr #8
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008886:	462a      	mov	r2, r5
 8008888:	465b      	mov	r3, fp
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 800888a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 800888e:	f04f 0e02 	mov.w	lr, #2
 8008892:	f88d 70a8 	strb.w	r7, [sp, #168]	; 0xa8
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
 8008896:	f88d 00ad 	strb.w	r0, [sp, #173]	; 0xad
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 800889a:	2704      	movs	r7, #4
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 800889c:	2006      	movs	r0, #6
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 800889e:	f88d a0ac 	strb.w	sl, [sp, #172]	; 0xac
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 80088a2:	f88d c0a9 	strb.w	ip, [sp, #169]	; 0xa9
 80088a6:	f88d e0aa 	strb.w	lr, [sp, #170]	; 0xaa
 80088aa:	f88d 70ab 	strb.w	r7, [sp, #171]	; 0xab
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80088ae:	f7f9 febf 	bl	8002630 <si446x_spi>
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 80088b2:	4ba4      	ldr	r3, [pc, #656]	; (8008b44 <si446x_initialise+0x424>)
 80088b4:	20c8      	movs	r0, #200	; 0xc8
 80088b6:	781b      	ldrb	r3, [r3, #0]
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088b8:	f88d 60ab 	strb.w	r6, [sp, #171]	; 0xab
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 80088bc:	fb00 f003 	mul.w	r0, r0, r3
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088c0:	268c      	movs	r6, #140	; 0x8c
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 80088c2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088c6:	2711      	movs	r7, #17
 80088c8:	f04f 0e01 	mov.w	lr, #1
 80088cc:	f04f 0a07 	mov.w	sl, #7
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 80088d0:	4649      	mov	r1, r9
 80088d2:	462a      	mov	r2, r5
 80088d4:	465b      	mov	r3, fp
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088d6:	f88d 70a8 	strb.w	r7, [sp, #168]	; 0xa8
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
 80088da:	f88d 00ae 	strb.w	r0, [sp, #174]	; 0xae
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088de:	2720      	movs	r7, #32
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 80088e0:	f88d c0ad 	strb.w	ip, [sp, #173]	; 0xad
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088e4:	f88d 60b0 	strb.w	r6, [sp, #176]	; 0xb0
 80088e8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80088ec:	26ba      	movs	r6, #186	; 0xba
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 80088ee:	200b      	movs	r0, #11
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80088f0:	f88d c0b2 	strb.w	ip, [sp, #178]	; 0xb2
 80088f4:	f88d e0af 	strb.w	lr, [sp, #175]	; 0xaf
 80088f8:	f88d 70a9 	strb.w	r7, [sp, #169]	; 0xa9
 80088fc:	f88d a0aa 	strb.w	sl, [sp, #170]	; 0xaa
 8008900:	f88d 60b1 	strb.w	r6, [sp, #177]	; 0xb1
 8008904:	f88d 50ac 	strb.w	r5, [sp, #172]	; 0xac
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 8008908:	f7f9 fe92 	bl	8002630 <si446x_spi>
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 800890c:	4a85      	ldr	r2, [pc, #532]	; (8008b24 <si446x_initialise+0x404>)
 800890e:	ab11      	add	r3, sp, #68	; 0x44
 8008910:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8008914:	8892      	ldrh	r2, [r2, #4]
 8008916:	9011      	str	r0, [sp, #68]	; 0x44
 8008918:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 800891c:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008920:	462a      	mov	r2, r5
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8008922:	6020      	str	r0, [r4, #0]
 8008924:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008926:	4643      	mov	r3, r8
 8008928:	497d      	ldr	r1, [pc, #500]	; (8008b20 <si446x_initialise+0x400>)
 800892a:	2005      	movs	r0, #5
 800892c:	f7f9 fe80 	bl	8002630 <si446x_spi>
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8008930:	4a7c      	ldr	r2, [pc, #496]	; (8008b24 <si446x_initialise+0x404>)
 8008932:	ab15      	add	r3, sp, #84	; 0x54
 8008934:	f852 0f14 	ldr.w	r0, [r2, #20]!
 8008938:	8891      	ldrh	r1, [r2, #4]
 800893a:	7992      	ldrb	r2, [r2, #6]
 800893c:	9015      	str	r0, [sp, #84]	; 0x54
 800893e:	f88d 205a 	strb.w	r2, [sp, #90]	; 0x5a
 8008942:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 8008946:	e893 0003 	ldmia.w	r3, {r0, r1}
 800894a:	0c0e      	lsrs	r6, r1, #16
 800894c:	71a6      	strb	r6, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 800894e:	4e75      	ldr	r6, [pc, #468]	; (8008b24 <si446x_initialise+0x404>)
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008950:	462a      	mov	r2, r5
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008956:	4643      	mov	r3, r8
 8008958:	4650      	mov	r0, sl
 800895a:	4971      	ldr	r1, [pc, #452]	; (8008b20 <si446x_initialise+0x400>)
 800895c:	f7f9 fe68 	bl	8002630 <si446x_spi>
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8008960:	f856 0f1c 	ldr.w	r0, [r6, #28]!
 8008964:	ab1a      	add	r3, sp, #104	; 0x68
 8008966:	6871      	ldr	r1, [r6, #4]
 8008968:	68b2      	ldr	r2, [r6, #8]
 800896a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800896e:	c307      	stmia	r3!, {r0, r1, r2}
 8008970:	7bb2      	ldrb	r2, [r6, #14]
 8008972:	4e6b      	ldr	r6, [pc, #428]	; (8008b20 <si446x_initialise+0x400>)
 8008974:	f8a3 e000 	strh.w	lr, [r3]
 8008978:	709a      	strb	r2, [r3, #2]
 800897a:	ab1a      	add	r3, sp, #104	; 0x68
 800897c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800897e:	c607      	stmia	r6!, {r0, r1, r2}
 8008980:	f826 3b02 	strh.w	r3, [r6], #2
 8008984:	4631      	mov	r1, r6
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	f801 390e 	strb.w	r3, [r1], #-14
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 800898c:	462a      	mov	r2, r5
 800898e:	4643      	mov	r3, r8
 8008990:	200f      	movs	r0, #15
 8008992:	f7f9 fe4d 	bl	8002630 <si446x_spi>
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8008996:	46ce      	mov	lr, r9
 8008998:	4b62      	ldr	r3, [pc, #392]	; (8008b24 <si446x_initialise+0x404>)
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 800899a:	f04f 090c 	mov.w	r9, #12
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 800899e:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 80089a2:	6859      	ldr	r1, [r3, #4]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80089ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 80089b0:	f1a6 010e 	sub.w	r1, r6, #14
 80089b4:	462a      	mov	r2, r5
 80089b6:	4643      	mov	r3, r8
 80089b8:	2010      	movs	r0, #16
 80089ba:	f7f9 fe39 	bl	8002630 <si446x_spi>
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80089be:	4a59      	ldr	r2, [pc, #356]	; (8008b24 <si446x_initialise+0x404>)
 80089c0:	ab13      	add	r3, sp, #76	; 0x4c
 80089c2:	f852 0f3c 	ldr.w	r0, [r2, #60]!
 80089c6:	8891      	ldrh	r1, [r2, #4]
 80089c8:	7992      	ldrb	r2, [r2, #6]
 80089ca:	9013      	str	r0, [sp, #76]	; 0x4c
 80089cc:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
 80089d0:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 80089d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089d8:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 80089dc:	f884 e006 	strb.w	lr, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80089e0:	462a      	mov	r2, r5
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80089e2:	80a1      	strh	r1, [r4, #4]
 80089e4:	6020      	str	r0, [r4, #0]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80089e6:	f1a6 010e 	sub.w	r1, r6, #14
 80089ea:	4643      	mov	r3, r8
 80089ec:	4650      	mov	r0, sl
 80089ee:	f7f9 fe1f 	bl	8002630 <si446x_spi>
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 80089f2:	4a4c      	ldr	r2, [pc, #304]	; (8008b24 <si446x_initialise+0x404>)
 80089f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80089f6:	f852 0f44 	ldr.w	r0, [r2, #68]!
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80089fa:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 80089fe:	8892      	ldrh	r2, [r2, #4]
 8008a00:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a02:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8008a06:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008a0a:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8008a0c:	80a1      	strh	r1, [r4, #4]
 8008a0e:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008a10:	f1a6 010e 	sub.w	r1, r6, #14
 8008a14:	4643      	mov	r3, r8
 8008a16:	2006      	movs	r0, #6
 8008a18:	f7f9 fe0a 	bl	8002630 <si446x_spi>
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8008a1c:	4a41      	ldr	r2, [pc, #260]	; (8008b24 <si446x_initialise+0x404>)
 8008a1e:	ab0d      	add	r3, sp, #52	; 0x34
 8008a20:	f852 0f4c 	ldr.w	r0, [r2, #76]!
 8008a24:	8892      	ldrh	r2, [r2, #4]
 8008a26:	900d      	str	r0, [sp, #52]	; 0x34
 8008a28:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8008a2c:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008a30:	462a      	mov	r2, r5
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8008a32:	80a1      	strh	r1, [r4, #4]
 8008a34:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008a36:	f1a6 010e 	sub.w	r1, r6, #14
 8008a3a:	4643      	mov	r3, r8
 8008a3c:	2006      	movs	r0, #6
 8008a3e:	f7f9 fdf7 	bl	8002630 <si446x_spi>
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8008a42:	4a38      	ldr	r2, [pc, #224]	; (8008b24 <si446x_initialise+0x404>)
 8008a44:	ab17      	add	r3, sp, #92	; 0x5c
 8008a46:	f852 0f54 	ldr.w	r0, [r2, #84]!
 8008a4a:	f1a6 0e0e 	sub.w	lr, r6, #14
 8008a4e:	6851      	ldr	r1, [r2, #4]
 8008a50:	7a12      	ldrb	r2, [r2, #8]
 8008a52:	c303      	stmia	r3!, {r0, r1}
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	ab17      	add	r3, sp, #92	; 0x5c
 8008a58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a5c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008a60:	4643      	mov	r3, r8
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8008a62:	f88e 2000 	strb.w	r2, [lr]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008a66:	f1a6 010e 	sub.w	r1, r6, #14
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	2009      	movs	r0, #9
 8008a6e:	f7f9 fddf 	bl	8002630 <si446x_spi>
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8008a72:	46de      	mov	lr, fp
 8008a74:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <si446x_initialise+0x404>)
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8008a76:	f04f 0b4a 	mov.w	fp, #74	; 0x4a
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8008a7a:	f853 0f60 	ldr.w	r0, [r3, #96]!
 8008a7e:	6859      	ldr	r1, [r3, #4]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008a8c:	f1a6 010e 	sub.w	r1, r6, #14
 8008a90:	462a      	mov	r2, r5
 8008a92:	4643      	mov	r3, r8
 8008a94:	2009      	movs	r0, #9
 8008a96:	f7f9 fdcb 	bl	8002630 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8008a9a:	4b22      	ldr	r3, [pc, #136]	; (8008b24 <si446x_initialise+0x404>)
 8008a9c:	f10d 0e88 	add.w	lr, sp, #136	; 0x88
 8008aa0:	f853 0f70 	ldr.w	r0, [r3, #112]!
 8008aa4:	6859      	ldr	r1, [r3, #4]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008ab2:	f1a6 010e 	sub.w	r1, r6, #14
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4643      	mov	r3, r8
 8008aba:	2009      	movs	r0, #9
 8008abc:	f7f9 fdb8 	bl	8002630 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8008ac0:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <si446x_initialise+0x404>)
 8008ac2:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
 8008ac6:	f853 0f80 	ldr.w	r0, [r3, #128]!
 8008aca:	6859      	ldr	r1, [r3, #4]
 8008acc:	689a      	ldr	r2, [r3, #8]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008ad8:	f1a6 010e 	sub.w	r1, r6, #14
 8008adc:	462a      	mov	r2, r5
 8008ade:	4643      	mov	r3, r8
 8008ae0:	2009      	movs	r0, #9
 8008ae2:	f7f9 fda5 	bl	8002630 <si446x_spi>
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8008ae6:	7067      	strb	r7, [r4, #1]
 8008ae8:	2711      	movs	r7, #17
 8008aea:	f04f 0c12 	mov.w	ip, #18
 8008aee:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 8008af2:	7027      	strb	r7, [r4, #0]
 8008af4:	2704      	movs	r7, #4
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8008af6:	f1a6 010e 	sub.w	r1, r6, #14
 8008afa:	462a      	mov	r2, r5
 8008afc:	4643      	mov	r3, r8
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8008afe:	70a7      	strb	r7, [r4, #2]
 8008b00:	f884 b003 	strb.w	fp, [r4, #3]
 8008b04:	f884 a004 	strb.w	sl, [r4, #4]
 8008b08:	f884 9005 	strb.w	r9, [r4, #5]
 8008b0c:	f884 c006 	strb.w	ip, [r4, #6]
 8008b10:	f884 e007 	strb.w	lr, [r4, #7]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8008b14:	2711      	movs	r7, #17
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8008b16:	2008      	movs	r0, #8
 8008b18:	f7f9 fd8a 	bl	8002630 <si446x_spi>
 8008b1c:	e016      	b.n	8008b4c <si446x_initialise+0x42c>
 8008b1e:	bf00      	nop
 8008b20:	20001770 	.word	0x20001770
 8008b24:	08009740 	.word	0x08009740
 8008b28:	200017b0 	.word	0x200017b0
 8008b2c:	20000ca8 	.word	0x20000ca8
 8008b30:	20000ca4 	.word	0x20000ca4
 8008b34:	4bc65d40 	.word	0x4bc65d40
 8008b38:	43480000 	.word	0x43480000
 8008b3c:	3fe00000 	.word	0x3fe00000
 8008b40:	44160000 	.word	0x44160000
 8008b44:	20000c80 	.word	0x20000c80
 8008b48:	20001784 	.word	0x20001784
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8008b4c:	7027      	strb	r7, [r4, #0]
 8008b4e:	2741      	movs	r7, #65	; 0x41
 8008b50:	71a7      	strb	r7, [r4, #6]
 8008b52:	2742      	movs	r7, #66	; 0x42
 8008b54:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8008b58:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8008b5c:	f884 9002 	strb.w	r9, [r4, #2]
 8008b60:	7267      	strb	r7, [r4, #9]
 8008b62:	2030      	movs	r0, #48	; 0x30
 8008b64:	f04f 0b43 	mov.w	fp, #67	; 0x43
 8008b68:	f04f 0a4f 	mov.w	sl, #79	; 0x4f
 8008b6c:	f04f 0944 	mov.w	r9, #68	; 0x44
 8008b70:	2752      	movs	r7, #82	; 0x52
 8008b72:	f884 c004 	strb.w	ip, [r4, #4]
 8008b76:	f884 c007 	strb.w	ip, [r4, #7]
 8008b7a:	f884 e005 	strb.w	lr, [r4, #5]
 8008b7e:	f884 e008 	strb.w	lr, [r4, #8]
 8008b82:	f884 e00b 	strb.w	lr, [r4, #11]
 8008b86:	f884 e00e 	strb.w	lr, [r4, #14]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008b8a:	f1a6 010e 	sub.w	r1, r6, #14
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4643      	mov	r3, r8
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8008b92:	7060      	strb	r0, [r4, #1]
 8008b94:	72a7      	strb	r7, [r4, #10]
 8008b96:	70e5      	strb	r5, [r4, #3]
 8008b98:	f884 b00c 	strb.w	fp, [r4, #12]
 8008b9c:	f884 a00d 	strb.w	sl, [r4, #13]
 8008ba0:	f884 900f 	strb.w	r9, [r4, #15]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008ba4:	2010      	movs	r0, #16
 8008ba6:	f7f9 fd43 	bl	8002630 <si446x_spi>
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8008baa:	4a27      	ldr	r2, [pc, #156]	; (8008c48 <si446x_initialise+0x528>)
 8008bac:	ab07      	add	r3, sp, #28
 8008bae:	f852 0f90 	ldr.w	r0, [r2, #144]!
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8008bb2:	4f25      	ldr	r7, [pc, #148]	; (8008c48 <si446x_initialise+0x528>)
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8008bb4:	7912      	ldrb	r2, [r2, #4]
 8008bb6:	9007      	str	r0, [sp, #28]
 8008bb8:	f88d 2020 	strb.w	r2, [sp, #32]
 8008bbc:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008bc0:	462a      	mov	r2, r5
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8008bc2:	7121      	strb	r1, [r4, #4]
 8008bc4:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008bc6:	f1a6 010e 	sub.w	r1, r6, #14
 8008bca:	4643      	mov	r3, r8
 8008bcc:	2005      	movs	r0, #5
 8008bce:	f7f9 fd2f 	bl	8002630 <si446x_spi>
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8008bd2:	4a1d      	ldr	r2, [pc, #116]	; (8008c48 <si446x_initialise+0x528>)
 8008bd4:	ab05      	add	r3, sp, #20
 8008bd6:	f852 0f98 	ldr.w	r0, [r2, #152]!
 8008bda:	7912      	ldrb	r2, [r2, #4]
 8008bdc:	9005      	str	r0, [sp, #20]
 8008bde:	f88d 2018 	strb.w	r2, [sp, #24]
 8008be2:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008be6:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8008be8:	7121      	strb	r1, [r4, #4]
 8008bea:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008bec:	f1a6 010e 	sub.w	r1, r6, #14
 8008bf0:	4643      	mov	r3, r8
 8008bf2:	2005      	movs	r0, #5
 8008bf4:	f7f9 fd1c 	bl	8002630 <si446x_spi>
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
 8008bf8:	4a13      	ldr	r2, [pc, #76]	; (8008c48 <si446x_initialise+0x528>)
 8008bfa:	ab03      	add	r3, sp, #12
 8008bfc:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8008c00:	7912      	ldrb	r2, [r2, #4]
 8008c02:	9003      	str	r0, [sp, #12]
 8008c04:	f88d 2010 	strb.w	r2, [sp, #16]
 8008c08:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008c0c:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
 8008c0e:	7121      	strb	r1, [r4, #4]
 8008c10:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008c12:	f1a6 010e 	sub.w	r1, r6, #14
 8008c16:	4643      	mov	r3, r8
 8008c18:	2005      	movs	r0, #5
 8008c1a:	f7f9 fd09 	bl	8002630 <si446x_spi>
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8008c1e:	f857 0fa8 	ldr.w	r0, [r7, #168]!
 8008c22:	ab0b      	add	r3, sp, #44	; 0x2c
 8008c24:	88ba      	ldrh	r2, [r7, #4]
 8008c26:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c28:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8008c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008c30:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use bytes for preamble length - so defaults to 8bytes
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x10, 0x01, 0x04, 0x31}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8008c32:	80a1      	strh	r1, [r4, #4]
 8008c34:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008c36:	4643      	mov	r3, r8
 8008c38:	f1a6 010e 	sub.w	r1, r6, #14
 8008c3c:	2006      	movs	r0, #6
 8008c3e:	f7f9 fcf7 	bl	8002630 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
	//Setup default channel config
	si446x_set_deviation_channel_bps(DEVIATION, CHANNEL_SPACING, BPS);
	si446x_set_modem();
}
 8008c42:	b02f      	add	sp, #188	; 0xbc
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	08009740 	.word	0x08009740
 8008c4c:	f3af 8000 	nop.w

08008c50 <SI_Thread.lto_priv.84>:

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 8008c50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  (void)arg;
  chRegSetThreadName("si4432");
 8008c54:	4b91      	ldr	r3, [pc, #580]	; (8008e9c <SI_Thread.lto_priv.84+0x24c>)
 8008c56:	4992      	ldr	r1, [pc, #584]	; (8008ea0 <SI_Thread.lto_priv.84+0x250>)
 8008c58:	699a      	ldr	r2, [r3, #24]
	uint8_t si446x_failure=0;
	uint8_t channel=0;
	uint8_t packet_header[]=DEFAULT_HEADER;
 8008c5a:	4b92      	ldr	r3, [pc, #584]	; (8008ea4 <SI_Thread.lto_priv.84+0x254>)

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 8008c5c:	b083      	sub	sp, #12

  (void)arg;
  chRegSetThreadName("si4432");
 8008c5e:	6191      	str	r1, [r2, #24]
	uint8_t si446x_failure=0;
	uint8_t channel=0;
	uint8_t packet_header[]=DEFAULT_HEADER;
 8008c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008c64:	2320      	movs	r3, #32
 8008c66:	9000      	str	r0, [sp, #0]
 8008c68:	f8ad 1004 	strh.w	r1, [sp, #4]
 8008c6c:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8008c70:	4c8d      	ldr	r4, [pc, #564]	; (8008ea8 <SI_Thread.lto_priv.84+0x258>)
 8008c72:	4b8e      	ldr	r3, [pc, #568]	; (8008eac <SI_Thread.lto_priv.84+0x25c>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8008c74:	7822      	ldrb	r2, [r4, #0]
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	2a01      	cmp	r2, #1
 8008c7a:	d115      	bne.n	8008ca8 <SI_Thread.lto_priv.84+0x58>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8008c7c:	498c      	ldr	r1, [pc, #560]	; (8008eb0 <SI_Thread.lto_priv.84+0x260>)
 8008c7e:	6a20      	ldr	r0, [r4, #32]
 8008c80:	f000 fb76 	bl	8009370 <dmaStreamAllocate.constprop.11>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8008c84:	498b      	ldr	r1, [pc, #556]	; (8008eb4 <SI_Thread.lto_priv.84+0x264>)
 8008c86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c88:	f000 fb72 	bl	8009370 <dmaStreamAllocate.constprop.11>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008c8c:	498a      	ldr	r1, [pc, #552]	; (8008eb8 <SI_Thread.lto_priv.84+0x268>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008c8e:	6a25      	ldr	r5, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008c90:	6a60      	ldr	r0, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008c92:	698b      	ldr	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008c94:	69e2      	ldr	r2, [r4, #28]
 8008c96:	682d      	ldr	r5, [r5, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008c98:	6800      	ldr	r0, [r0, #0]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c9e:	618b      	str	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008ca0:	320c      	adds	r2, #12
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	60aa      	str	r2, [r5, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008ca6:	6082      	str	r2, [r0, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8008ca8:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008cac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8008cae:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008cb4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008cb8:	bf48      	it	mi
 8008cba:	f443 63a0 	orrmi.w	r3, r3, #1280	; 0x500
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008cbe:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008cc0:	bf48      	it	mi
 8008cc2:	f442 62a0 	orrmi.w	r2, r2, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8008cc6:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008cc8:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8008cca:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8008cce:	2500      	movs	r5, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8008cd0:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8008cd2:	801d      	strh	r5, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8008cd4:	8019      	strh	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8008cd6:	809a      	strh	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8008cd8:	881a      	ldrh	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8008cda:	2102      	movs	r1, #2
 8008cdc:	b292      	uxth	r2, r2
 8008cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ce2:	801a      	strh	r2, [r3, #0]
 8008ce4:	7021      	strb	r1, [r4, #0]
 8008ce6:	f385 8811 	msr	BASEPRI, r5
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8008cea:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8008ef8 <SI_Thread.lto_priv.84+0x2a8>
  /* Configuration goes here - setup the PLL carrier, TX modem settings and the Packet handler Tx functionality*/
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	si446x_initialise();
 8008cee:	f7ff fd17 	bl	8008720 <si446x_initialise>
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8008cf2:	4c72      	ldr	r4, [pc, #456]	; (8008ebc <SI_Thread.lto_priv.84+0x26c>)
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8008cf4:	4a72      	ldr	r2, [pc, #456]	; (8008ec0 <SI_Thread.lto_priv.84+0x270>)
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8008cf6:	4e73      	ldr	r6, [pc, #460]	; (8008ec4 <SI_Thread.lto_priv.84+0x274>)
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8008cf8:	2301      	movs	r3, #1
	gptInit();
	gptStart(&GPTD4, &gpt4cfg);
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	4972      	ldr	r1, [pc, #456]	; (8008ec8 <SI_Thread.lto_priv.84+0x278>)
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8008cfe:	f8ca 200c 	str.w	r2, [sl, #12]
 8008d02:	7023      	strb	r3, [r4, #0]
 8008d04:	f88a 3000 	strb.w	r3, [sl]
  gptp->config = NULL;
 8008d08:	6065      	str	r5, [r4, #4]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8008d0a:	60e6      	str	r6, [r4, #12]
 8008d0c:	f8ca 5004 	str.w	r5, [sl, #4]
 8008d10:	f7fa fbc6 	bl	80034a0 <gptStart>
	gptStart(&GPTD3, &gpt3cfg);
 8008d14:	4620      	mov	r0, r4
 8008d16:	496d      	ldr	r1, [pc, #436]	; (8008ecc <SI_Thread.lto_priv.84+0x27c>)
 8008d18:	f7fa fbc2 	bl	80034a0 <gptStart>
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8008d1c:	4b6c      	ldr	r3, [pc, #432]	; (8008ed0 <SI_Thread.lto_priv.84+0x280>)
 8008d1e:	2210      	movs	r2, #16
 8008d20:	611a      	str	r2, [r3, #16]
 8008d22:	f000 fbd5 	bl	80094d0 <RF_switch.part.8.lto_priv.80>
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {

  (void)arg;
  chRegSetThreadName("si4432");
	uint8_t si446x_failure=0;
	uint8_t channel=0;
 8008d26:	46a9      	mov	r9, r5
 8008d28:	4e6a      	ldr	r6, [pc, #424]	; (8008ed4 <SI_Thread.lto_priv.84+0x284>)
 8008d2a:	4d6b      	ldr	r5, [pc, #428]	; (8008ed8 <SI_Thread.lto_priv.84+0x288>)
 8008d2c:	4f6b      	ldr	r7, [pc, #428]	; (8008edc <SI_Thread.lto_priv.84+0x28c>)
 8008d2e:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8008ee4 <SI_Thread.lto_priv.84+0x294>
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8008d32:	486b      	ldr	r0, [pc, #428]	; (8008ee0 <SI_Thread.lto_priv.84+0x290>)
 8008d34:	21c8      	movs	r1, #200	; 0xc8
 8008d36:	f7fe f99b 	bl	8007070 <chSemWaitTimeout>
	gptInit();
	gptStart(&GPTD4, &gpt4cfg);
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d1f9      	bne.n	8008d32 <SI_Thread.lto_priv.84+0xe2>
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 8008d3e:	782a      	ldrb	r2, [r5, #0]
 8008d40:	4b65      	ldr	r3, [pc, #404]	; (8008ed8 <SI_Thread.lto_priv.84+0x288>)
 8008d42:	2a01      	cmp	r2, #1
 8008d44:	d044      	beq.n	8008dd0 <SI_Thread.lto_priv.84+0x180>
			Active_Frequency+=50;
		else if(Command==2)
 8008d46:	781a      	ldrb	r2, [r3, #0]
 8008d48:	2a02      	cmp	r2, #2
 8008d4a:	d045      	beq.n	8008dd8 <SI_Thread.lto_priv.84+0x188>
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	2a03      	cmp	r2, #3
 8008d50:	d046      	beq.n	8008de0 <SI_Thread.lto_priv.84+0x190>
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	2a07      	cmp	r2, #7
 8008d56:	d043      	beq.n	8008de0 <SI_Thread.lto_priv.84+0x190>
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		else if(Command==4)
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	2a04      	cmp	r2, #4
 8008d5c:	f000 8084 	beq.w	8008e68 <SI_Thread.lto_priv.84+0x218>
			Active_Frequency=ACTIVE_FREQUENCY;
		else if(Command==5) /*Load a new channel*/
 8008d60:	781a      	ldrb	r2, [r3, #0]
 8008d62:	2a05      	cmp	r2, #5
 8008d64:	f000 8083 	beq.w	8008e6e <SI_Thread.lto_priv.84+0x21e>
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b06      	cmp	r3, #6
 8008d6c:	f000 808f 	beq.w	8008e8e <SI_Thread.lto_priv.84+0x23e>
			strncpy(packet_header,Command_string,5);
		if(Command && (Command<3 || Command==4) ) /*Load the frequency into the PLL*/
 8008d70:	782b      	ldrb	r3, [r5, #0]
 8008d72:	b143      	cbz	r3, 8008d86 <SI_Thread.lto_priv.84+0x136>
 8008d74:	2400      	movs	r4, #0
 8008d76:	782b      	ldrb	r3, [r5, #0]
 8008d78:	4a57      	ldr	r2, [pc, #348]	; (8008ed8 <SI_Thread.lto_priv.84+0x288>)
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d910      	bls.n	8008da0 <SI_Thread.lto_priv.84+0x150>
 8008d7e:	7813      	ldrb	r3, [r2, #0]
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d00d      	beq.n	8008da0 <SI_Thread.lto_priv.84+0x150>
			si446x_failure|=si446x_set_frequency(Active_Frequency);
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 8008d84:	b99c      	cbnz	r4, 8008dae <SI_Thread.lto_priv.84+0x15e>
 8008d86:	2320      	movs	r3, #32
 8008d88:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008d8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd19      	ble.n	8008dc8 <SI_Thread.lto_priv.84+0x178>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008d94:	f7fd ff94 	bl	8006cc0 <chSchRescheduleS>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	e7c8      	b.n	8008d32 <SI_Thread.lto_priv.84+0xe2>
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
			strncpy(packet_header,Command_string,5);
		if(Command && (Command<3 || Command==4) ) /*Load the frequency into the PLL*/
			si446x_failure|=si446x_set_frequency(Active_Frequency);
 8008da0:	6830      	ldr	r0, [r6, #0]
 8008da2:	f7f9 fcd5 	bl	8002750 <si446x_set_frequency>
 8008da6:	4320      	orrs	r0, r4
 8008da8:	b2c4      	uxtb	r4, r0
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	d0eb      	beq.n	8008d86 <SI_Thread.lto_priv.84+0x136>
			chThdSleepMilliseconds(400);/*Wait in case radio can finish what it was doing*/
 8008dae:	f44f 7048 	mov.w	r0, #800	; 0x320
 8008db2:	f7fe f985 	bl	80070c0 <chThdSleep>
			si446x_initialise();
 8008db6:	f7ff fcb3 	bl	8008720 <si446x_initialise>
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008dc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dce5      	bgt.n	8008d94 <SI_Thread.lto_priv.84+0x144>
    chSemSignalI(&bsp->bs_sem);
 8008dc8:	4846      	ldr	r0, [pc, #280]	; (8008ee4 <SI_Thread.lto_priv.84+0x294>)
 8008dca:	f7fe fa71 	bl	80072b0 <chSemSignalI>
 8008dce:	e7e1      	b.n	8008d94 <SI_Thread.lto_priv.84+0x144>
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
			Active_Frequency+=50;
 8008dd0:	6833      	ldr	r3, [r6, #0]
 8008dd2:	3332      	adds	r3, #50	; 0x32
 8008dd4:	6033      	str	r3, [r6, #0]
 8008dd6:	e7cb      	b.n	8008d70 <SI_Thread.lto_priv.84+0x120>
		else if(Command==2)
			Active_Frequency-=50;
 8008dd8:	6833      	ldr	r3, [r6, #0]
 8008dda:	3b32      	subs	r3, #50	; 0x32
 8008ddc:	6033      	str	r3, [r6, #0]
 8008dde:	e7c7      	b.n	8008d70 <SI_Thread.lto_priv.84+0x120>
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 8008de0:	4a41      	ldr	r2, [pc, #260]	; (8008ee8 <SI_Thread.lto_priv.84+0x298>)
 8008de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008de6:	6113      	str	r3, [r2, #16]
 8008de8:	f000 fb72 	bl	80094d0 <RF_switch.part.8.lto_priv.80>
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
 8008dec:	2050      	movs	r0, #80	; 0x50
 8008dee:	f7fe f967 	bl	80070c0 <chThdSleep>
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			if(Command!=3)
 8008df2:	782b      	ldrb	r3, [r5, #0]
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8008df4:	2266      	movs	r2, #102	; 0x66
			if(Command!=3)
 8008df6:	2b03      	cmp	r3, #3
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8008df8:	703a      	strb	r2, [r7, #0]
			if(Command!=3)
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 8008dfa:	483c      	ldr	r0, [pc, #240]	; (8008eec <SI_Thread.lto_priv.84+0x29c>)
			Active_Frequency-=50;
		else if(Command==3 || Command==7) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			if(Command!=3)
 8008dfc:	d03d      	beq.n	8008e7a <SI_Thread.lto_priv.84+0x22a>
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 8008dfe:	493c      	ldr	r1, [pc, #240]	; (8008ef0 <SI_Thread.lto_priv.84+0x2a0>)
 8008e00:	2206      	movs	r2, #6
 8008e02:	f000 fc1d 	bl	8009640 <strncpy>
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008e06:	483a      	ldr	r0, [pc, #232]	; (8008ef0 <SI_Thread.lto_priv.84+0x2a0>)
 8008e08:	f000 fbea 	bl	80095e0 <strlen>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4932      	ldr	r1, [pc, #200]	; (8008edc <SI_Thread.lto_priv.84+0x28c>)
 8008e12:	4b38      	ldr	r3, [pc, #224]	; (8008ef4 <SI_Thread.lto_priv.84+0x2a4>)
 8008e14:	b2c0      	uxtb	r0, r0
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008e16:	4693      	mov	fp, r2
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008e18:	f7f9 fc0a 	bl	8002630 <si446x_spi>
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008e1c:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008e20:	2331      	movs	r3, #49	; 0x31
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008e22:	4604      	mov	r4, r0
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008e24:	703b      	strb	r3, [r7, #0]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008e26:	465a      	mov	r2, fp
 8008e28:	492c      	ldr	r1, [pc, #176]	; (8008edc <SI_Thread.lto_priv.84+0x28c>)
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008e2a:	f887 9001 	strb.w	r9, [r7, #1]
 8008e2e:	f887 b003 	strb.w	fp, [r7, #3]
 8008e32:	f887 b004 	strb.w	fp, [r7, #4]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008e36:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <SI_Thread.lto_priv.84+0x2a4>)
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
			}
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
			/*Now go to TX mode, with return to ready mode on completion, always use active channel, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008e38:	f887 e002 	strb.w	lr, [r7, #2]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008e3c:	2005      	movs	r0, #5
 8008e3e:	f7f9 fbf7 	bl	8002630 <si446x_spi>
 8008e42:	4320      	orrs	r0, r4
 8008e44:	b2c4      	uxtb	r4, r0
 8008e46:	2320      	movs	r3, #32
 8008e48:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8008e4c:	2304      	movs	r3, #4
  gpt_lld_start_timer(gptp, interval);
 8008e4e:	482a      	ldr	r0, [pc, #168]	; (8008ef8 <SI_Thread.lto_priv.84+0x2a8>)
 8008e50:	f44f 7161 	mov.w	r1, #900	; 0x384
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8008e54:	f88a 3000 	strb.w	r3, [sl]
  gpt_lld_start_timer(gptp, interval);
 8008e58:	f7fe ffaa 	bl	8007db0 <gpt_lld_start_timer>
 8008e5c:	f38b 8811 	msr	BASEPRI, fp
			Active_Frequency=ACTIVE_FREQUENCY;
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
			strncpy(packet_header,Command_string,5);
		if(Command && (Command<3 || Command==4) ) /*Load the frequency into the PLL*/
 8008e60:	782b      	ldrb	r3, [r5, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d187      	bne.n	8008d76 <SI_Thread.lto_priv.84+0x126>
 8008e66:	e78d      	b.n	8008d84 <SI_Thread.lto_priv.84+0x134>
			memcpy(tx_buffer, (uint8_t [5]){0x31, channel, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		else if(Command==4)
			Active_Frequency=ACTIVE_FREQUENCY;
 8008e68:	4b24      	ldr	r3, [pc, #144]	; (8008efc <SI_Thread.lto_priv.84+0x2ac>)
 8008e6a:	6033      	str	r3, [r6, #0]
 8008e6c:	e780      	b.n	8008d70 <SI_Thread.lto_priv.84+0x120>
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
 8008e6e:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <SI_Thread.lto_priv.84+0x2b0>)
 8008e70:	f893 9000 	ldrb.w	r9, [r3]
 8008e74:	fa5f f989 	uxtb.w	r9, r9
 8008e78:	e77a      	b.n	8008d70 <SI_Thread.lto_priv.84+0x120>
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			if(Command!=3)
				strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			else {
				strncpy(&(tx_buffer[1]),packet_header,5);/*Use the packet header as the first 5 bytes of payload*/
 8008e7a:	4669      	mov	r1, sp
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	f000 fbdf 	bl	8009640 <strncpy>
				strncpy(&(tx_buffer[6]),Command_string,1);/*Load the argument*/
 8008e82:	491b      	ldr	r1, [pc, #108]	; (8008ef0 <SI_Thread.lto_priv.84+0x2a0>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	481f      	ldr	r0, [pc, #124]	; (8008f04 <SI_Thread.lto_priv.84+0x2b4>)
 8008e88:	f000 fbda 	bl	8009640 <strncpy>
 8008e8c:	e7bb      	b.n	8008e06 <SI_Thread.lto_priv.84+0x1b6>
		else if(Command==4)
			Active_Frequency=ACTIVE_FREQUENCY;
		else if(Command==5) /*Load a new channel*/
			channel=Active_channel;
		else if(Command==6) /*Load a new packet header string*/
			strncpy(packet_header,Command_string,5);
 8008e8e:	4668      	mov	r0, sp
 8008e90:	4917      	ldr	r1, [pc, #92]	; (8008ef0 <SI_Thread.lto_priv.84+0x2a0>)
 8008e92:	2205      	movs	r2, #5
 8008e94:	f000 fbd4 	bl	8009640 <strncpy>
 8008e98:	e76a      	b.n	8008d70 <SI_Thread.lto_priv.84+0x120>
 8008e9a:	bf00      	nop
 8008e9c:	20001e40 	.word	0x20001e40
 8008ea0:	0800aee0 	.word	0x0800aee0
 8008ea4:	08009ae4 	.word	0x08009ae4
 8008ea8:	20001fa4 	.word	0x20001fa4
 8008eac:	0800aef0 	.word	0x0800aef0
 8008eb0:	080077b1 	.word	0x080077b1
 8008eb4:	08007481 	.word	0x08007481
 8008eb8:	40021000 	.word	0x40021000
 8008ebc:	20001f94 	.word	0x20001f94
 8008ec0:	40000800 	.word	0x40000800
 8008ec4:	40000400 	.word	0x40000400
 8008ec8:	20000c94 	.word	0x20000c94
 8008ecc:	20000c84 	.word	0x20000c84
 8008ed0:	40010c00 	.word	0x40010c00
 8008ed4:	20000ca8 	.word	0x20000ca8
 8008ed8:	20001780 	.word	0x20001780
 8008edc:	20001770 	.word	0x20001770
 8008ee0:	200017a4 	.word	0x200017a4
 8008ee4:	200017b4 	.word	0x200017b4
 8008ee8:	40010800 	.word	0x40010800
 8008eec:	20001771 	.word	0x20001771
 8008ef0:	200017c0 	.word	0x200017c0
 8008ef4:	20001784 	.word	0x20001784
 8008ef8:	20001794 	.word	0x20001794
 8008efc:	19df7578 	.word	0x19df7578
 8008f00:	20001790 	.word	0x20001790
 8008f04:	20001776 	.word	0x20001776
 8008f08:	f3af 8000 	nop.w
 8008f0c:	f3af 8000 	nop.w

08008f10 <chTMStartMeasurementX.constprop.66>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8008f10:	4b01      	ldr	r3, [pc, #4]	; (8008f18 <chTMStartMeasurementX.constprop.66+0x8>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8008f14:	6083      	str	r3, [r0, #8]
 8008f16:	4770      	bx	lr
 8008f18:	e0001000 	.word	0xe0001000
 8008f1c:	f3af 8000 	nop.w

08008f20 <chThdCreateFromMemoryPool.constprop.59>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008f24:	4e21      	ldr	r6, [pc, #132]	; (8008fac <chThdCreateFromMemoryPool.constprop.59+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008f26:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008f28:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008f2a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008f2c:	f7fd fa48 	bl	80063c0 <chPoolAlloc>
  if (wsp == NULL)
 8008f30:	4604      	mov	r4, r0
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d037      	beq.n	8008fa6 <chThdCreateFromMemoryPool.constprop.59+0x86>
 8008f36:	2320      	movs	r3, #32
 8008f38:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008f3c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008f3e:	4f1c      	ldr	r7, [pc, #112]	; (8008fb0 <chThdCreateFromMemoryPool.constprop.59+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008f40:	3b24      	subs	r3, #36	; 0x24
 8008f42:	4d1c      	ldr	r5, [pc, #112]	; (8008fb4 <chThdCreateFromMemoryPool.constprop.59+0x94>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008f44:	f8d7 a014 	ldr.w	sl, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008f48:	eb00 0e03 	add.w	lr, r0, r3
 8008f4c:	491a      	ldr	r1, [pc, #104]	; (8008fb8 <chThdCreateFromMemoryPool.constprop.59+0x98>)
 8008f4e:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8008f52:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008f56:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8008f58:	f100 0224 	add.w	r2, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8008f5c:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8008f5e:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8008f62:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008f66:	f8ce 9004 	str.w	r9, [lr, #4]
 8008f6a:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8008f6e:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008f72:	6107      	str	r7, [r0, #16]
 8008f74:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8008f78:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8008f7c:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8008f80:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008f84:	6178      	str	r0, [r7, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8008f86:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8008f88:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8008f8a:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8008f8c:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8008f8e:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8008f92:	6242      	str	r2, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8008f94:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8008f98:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8008f9a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008f9c:	6283      	str	r3, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8008f9e:	f7fd feb7 	bl	8006d10 <chSchWakeupS>
 8008fa2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	20001e30 	.word	0x20001e30
 8008fb0:	20001e40 	.word	0x20001e40
 8008fb4:	08001871 	.word	0x08001871
 8008fb8:	080006a1 	.word	0x080006a1
 8008fbc:	f3af 8000 	nop.w

08008fc0 <chSemSignalWait.constprop.56>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	2320      	movs	r3, #32
 8008fc4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
 8008fc8:	4c15      	ldr	r4, [pc, #84]	; (8009020 <chSemSignalWait.constprop.56+0x60>)
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	60a3      	str	r3, [r4, #8]
 8008fd2:	dd1b      	ble.n	800900c <chSemSignalWait.constprop.56+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	4a11      	ldr	r2, [pc, #68]	; (8009020 <chSemSignalWait.constprop.56+0x60>)
 8008fdc:	db06      	blt.n	8008fec <chSemSignalWait.constprop.56+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8008fde:	f7fd fe6f 	bl	8006cc0 <chSchRescheduleS>
    msg = MSG_OK;
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
  return msg;
}
 8008fea:	bd10      	pop	{r4, pc}

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 8008fec:	490d      	ldr	r1, [pc, #52]	; (8009024 <chSemSignalWait.constprop.56+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8008fee:	6853      	ldr	r3, [r2, #4]
 8008ff0:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8008ff2:	2005      	movs	r0, #5
 8008ff4:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8008ff8:	6054      	str	r4, [r2, #4]
 8008ffa:	601c      	str	r4, [r3, #0]
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 8008ffc:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 8008ffe:	f7fd ff8f 	bl	8006f20 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8009002:	6a20      	ldr	r0, [r4, #32]
 8009004:	2300      	movs	r3, #0
 8009006:	f383 8811 	msr	BASEPRI, r3
    chSchRescheduleS();
    msg = MSG_OK;
  }
  chSysUnlock();
  return msg;
}
 800900a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800900c:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800900e:	6803      	ldr	r3, [r0, #0]
 8009010:	605c      	str	r4, [r3, #4]
 8009012:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8009014:	f7fe f864 	bl	80070e0 <chSchReadyI>
 8009018:	2200      	movs	r2, #0
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	6202      	str	r2, [r0, #32]
 800901e:	e7d9      	b.n	8008fd4 <chSemSignalWait.constprop.56+0x14>
 8009020:	20000cdc 	.word	0x20000cdc
 8009024:	20001e40 	.word	0x20001e40
 8009028:	f3af 8000 	nop.w
 800902c:	f3af 8000 	nop.w

08009030 <chCondSignal.constprop.52>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8009030:	b508      	push	{r3, lr}
 8009032:	2320      	movs	r3, #32
 8009034:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <chCondSignal.constprop.52+0x24>)
 800903a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue))
 800903c:	4298      	cmp	r0, r3
 800903e:	d005      	beq.n	800904c <chCondSignal.constprop.52+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8009040:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8009042:	2100      	movs	r1, #0
 8009044:	6053      	str	r3, [r2, #4]
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f7fd fe62 	bl	8006d10 <chSchWakeupS>
 800904c:	2300      	movs	r3, #0
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	bd08      	pop	{r3, pc}
 8009054:	20000cd4 	.word	0x20000cd4
 8009058:	f3af 8000 	nop.w
 800905c:	f3af 8000 	nop.w

08009060 <chCondSignalI.constprop.51>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <chCondSignalI.constprop.51+0x20>)
 8009062:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8009064:	429a      	cmp	r2, r3
 8009066:	d00a      	beq.n	800907e <chCondSignalI.constprop.51+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8009068:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 800906a:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 800906c:	2400      	movs	r4, #0
 800906e:	604b      	str	r3, [r1, #4]
 8009070:	6214      	str	r4, [r2, #32]
    chSchReadyI(tp);
 8009072:	4610      	mov	r0, r2
 8009074:	6019      	str	r1, [r3, #0]
  }
}
 8009076:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 800907a:	f7fe b831 	b.w	80070e0 <chSchReadyI>
 800907e:	4770      	bx	lr
 8009080:	20000cd4 	.word	0x20000cd4
 8009084:	f3af 8000 	nop.w
 8009088:	f3af 8000 	nop.w
 800908c:	f3af 8000 	nop.w

08009090 <chEvtGetAndClearEvents.constprop.43>:
 8009090:	2320      	movs	r3, #32
 8009092:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8009096:	4a04      	ldr	r2, [pc, #16]	; (80090a8 <chEvtGetAndClearEvents.constprop.43+0x18>)
  currp->p_epending &= ~events;
 8009098:	2300      	movs	r3, #0
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 800909a:	6992      	ldr	r2, [r2, #24]
 800909c:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 800909e:	6353      	str	r3, [r2, #52]	; 0x34
 80090a0:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20001e40 	.word	0x20001e40
 80090ac:	f3af 8000 	nop.w

080090b0 <chEvtWaitOne.constprop.39>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 80090b0:	4a0b      	ldr	r2, [pc, #44]	; (80090e0 <chEvtWaitOne.constprop.39+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 80090b2:	b510      	push	{r4, lr}
 80090b4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80090b6:	6994      	ldr	r4, [r2, #24]
 80090b8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80090bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090be:	b933      	cbnz	r3, 80090ce <chEvtWaitOne.constprop.39+0x1e>
    ctp->p_u.ewmask = events;
 80090c0:	f04f 33ff 	mov.w	r3, #4294967295
 80090c4:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 80090c6:	200a      	movs	r0, #10
 80090c8:	f7fd ff2a 	bl	8006f20 <chSchGoSleepS>
    m = ctp->p_epending & events;
 80090cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 80090ce:	4258      	negs	r0, r3
 80090d0:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 80090d2:	ea23 0300 	bic.w	r3, r3, r0
 80090d6:	6363      	str	r3, [r4, #52]	; 0x34
 80090d8:	2300      	movs	r3, #0
 80090da:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 80090de:	bd10      	pop	{r4, pc}
 80090e0:	20001e40 	.word	0x20001e40
 80090e4:	f3af 8000 	nop.w
 80090e8:	f3af 8000 	nop.w
 80090ec:	f3af 8000 	nop.w

080090f0 <chEvtWaitAny.constprop.38>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 80090f0:	4a0b      	ldr	r2, [pc, #44]	; (8009120 <chEvtWaitAny.constprop.38+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 80090f2:	b510      	push	{r4, lr}
 80090f4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80090f6:	6994      	ldr	r4, [r2, #24]
 80090f8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80090fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80090fe:	b930      	cbnz	r0, 800910e <chEvtWaitAny.constprop.38+0x1e>
    ctp->p_u.ewmask = events;
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8009104:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8009106:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8009108:	f7fd ff0a 	bl	8006f20 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800910c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800910e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009110:	2200      	movs	r2, #0
 8009112:	ea23 0300 	bic.w	r3, r3, r0
 8009116:	6363      	str	r3, [r4, #52]	; 0x34
 8009118:	f382 8811 	msr	BASEPRI, r2

  chSysUnlock();
  return m;
}
 800911c:	bd10      	pop	{r4, pc}
 800911e:	bf00      	nop
 8009120:	20001e40 	.word	0x20001e40
	...

08009130 <chMBPost.constprop.24>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	2320      	movs	r3, #32
 8009134:	4606      	mov	r6, r0
 8009136:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 800913a:	4c0d      	ldr	r4, [pc, #52]	; (8009170 <chMBPost.constprop.24+0x40>)
 800913c:	f104 001c 	add.w	r0, r4, #28
 8009140:	f7fd ff76 	bl	8007030 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8009144:	4605      	mov	r5, r0
 8009146:	b970      	cbnz	r0, 8009166 <chMBPost.constprop.24+0x36>
    *mbp->mb_wrptr++ = msg;
 8009148:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 800914a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800914c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 800914e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8009150:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8009152:	bf28      	it	cs
 8009154:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8009156:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8009158:	4806      	ldr	r0, [pc, #24]	; (8009174 <chMBPost.constprop.24+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 800915a:	bf28      	it	cs
 800915c:	60a3      	strcs	r3, [r4, #8]
    chSemSignalI(&mbp->mb_fullsem);
 800915e:	f7fe f8a7 	bl	80072b0 <chSemSignalI>
    chSchRescheduleS();
 8009162:	f7fd fdad 	bl	8006cc0 <chSchRescheduleS>
 8009166:	2300      	movs	r3, #0
 8009168:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 800916c:	4628      	mov	r0, r5
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	20000cac 	.word	0x20000cac
 8009174:	20000cbc 	.word	0x20000cbc
 8009178:	f3af 8000 	nop.w
 800917c:	f3af 8000 	nop.w

08009180 <chMBPostI.constprop.23>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <chMBPostI.constprop.23+0x34>)
 8009184:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8009186:	2a00      	cmp	r2, #0
 8009188:	dd10      	ble.n	80091ac <chMBPostI.constprop.23+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800918a:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top)
 800918c:	685d      	ldr	r5, [r3, #4]
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800918e:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8009190:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top)
 8009192:	42a9      	cmp	r1, r5
 8009194:	625a      	str	r2, [r3, #36]	; 0x24
    mbp->mb_wrptr = mbp->mb_buffer;
 8009196:	bf28      	it	cs
 8009198:	681a      	ldrcs	r2, [r3, #0]
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 800919a:	6099      	str	r1, [r3, #8]
 800919c:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
 800919e:	4806      	ldr	r0, [pc, #24]	; (80091b8 <chMBPostI.constprop.23+0x38>)
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 80091a0:	bf28      	it	cs
 80091a2:	609a      	strcs	r2, [r3, #8]
  chSemSignalI(&mbp->mb_fullsem);
 80091a4:	f7fe f884 	bl	80072b0 <chSemSignalI>
  return MSG_OK;
 80091a8:	2000      	movs	r0, #0
 80091aa:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	20000cac 	.word	0x20000cac
 80091b8:	20000cbc 	.word	0x20000cbc
 80091bc:	f3af 8000 	nop.w

080091c0 <chMBPostAhead.constprop.22>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t time) {
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	2320      	movs	r3, #32
 80091c4:	4606      	mov	r6, r0
 80091c6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 80091ca:	4c0e      	ldr	r4, [pc, #56]	; (8009204 <chMBPostAhead.constprop.22+0x44>)
 80091cc:	f104 001c 	add.w	r0, r4, #28
 80091d0:	f7fd ff2e 	bl	8007030 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80091d4:	4605      	mov	r5, r0
 80091d6:	b958      	cbnz	r0, 80091f0 <chMBPostAhead.constprop.22+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 80091d8:	68e3      	ldr	r3, [r4, #12]
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	3b04      	subs	r3, #4
 80091de:	4293      	cmp	r3, r2
 80091e0:	60e3      	str	r3, [r4, #12]
 80091e2:	d30a      	bcc.n	80091fa <chMBPostAhead.constprop.22+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 80091e4:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80091e6:	4808      	ldr	r0, [pc, #32]	; (8009208 <chMBPostAhead.constprop.22+0x48>)
 80091e8:	f7fe f862 	bl	80072b0 <chSemSignalI>
    chSchRescheduleS();
 80091ec:	f7fd fd68 	bl	8006cc0 <chSchRescheduleS>
 80091f0:	2300      	movs	r3, #0
 80091f2:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 80091f6:	4628      	mov	r0, r5
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	3b04      	subs	r3, #4
 80091fe:	60e3      	str	r3, [r4, #12]
 8009200:	e7f0      	b.n	80091e4 <chMBPostAhead.constprop.22+0x24>
 8009202:	bf00      	nop
 8009204:	20000cac 	.word	0x20000cac
 8009208:	20000cbc 	.word	0x20000cbc
 800920c:	f3af 8000 	nop.w

08009210 <chMBPostAheadI.constprop.21>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8009210:	4a0c      	ldr	r2, [pc, #48]	; (8009244 <chMBPostAheadI.constprop.21+0x34>)
 8009212:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8009214:	2900      	cmp	r1, #0
 8009216:	dd11      	ble.n	800923c <chMBPostAheadI.constprop.21+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 8009218:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800921a:	b510      	push	{r4, lr}
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 800921c:	6814      	ldr	r4, [r2, #0]
 800921e:	3b04      	subs	r3, #4
 8009220:	3901      	subs	r1, #1
 8009222:	42a3      	cmp	r3, r4
 8009224:	6251      	str	r1, [r2, #36]	; 0x24
 8009226:	60d3      	str	r3, [r2, #12]
 8009228:	d202      	bcs.n	8009230 <chMBPostAheadI.constprop.21+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800922a:	6853      	ldr	r3, [r2, #4]
 800922c:	3b04      	subs	r3, #4
 800922e:	60d3      	str	r3, [r2, #12]
  *mbp->mb_rdptr = msg;
 8009230:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8009232:	4805      	ldr	r0, [pc, #20]	; (8009248 <chMBPostAheadI.constprop.21+0x38>)
 8009234:	f7fe f83c 	bl	80072b0 <chSemSignalI>
  return MSG_OK;
 8009238:	2000      	movs	r0, #0
 800923a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000cac 	.word	0x20000cac
 8009248:	20000cbc 	.word	0x20000cbc
 800924c:	f3af 8000 	nop.w

08009250 <chMBFetch.constprop.20>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	2320      	movs	r3, #32
 8009254:	4606      	mov	r6, r0
 8009256:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 800925a:	4c0e      	ldr	r4, [pc, #56]	; (8009294 <chMBFetch.constprop.20+0x44>)
 800925c:	f104 0010 	add.w	r0, r4, #16
 8009260:	f7fd fee6 	bl	8007030 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8009264:	4605      	mov	r5, r0
 8009266:	b978      	cbnz	r0, 8009288 <chMBFetch.constprop.20+0x38>
    *msgp = *mbp->mb_rdptr++;
 8009268:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
 800926a:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 800926c:	6819      	ldr	r1, [r3, #0]
 800926e:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top)
 8009270:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8009272:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8009274:	bf28      	it	cs
 8009276:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8009278:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_emptysem);
 800927a:	4807      	ldr	r0, [pc, #28]	; (8009298 <chMBFetch.constprop.20+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 800927c:	bf28      	it	cs
 800927e:	60e3      	strcs	r3, [r4, #12]
    chSemSignalI(&mbp->mb_emptysem);
 8009280:	f7fe f816 	bl	80072b0 <chSemSignalI>
    chSchRescheduleS();
 8009284:	f7fd fd1c 	bl	8006cc0 <chSchRescheduleS>
 8009288:	2300      	movs	r3, #0
 800928a:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();
  return rdymsg;
}
 800928e:	4628      	mov	r0, r5
 8009290:	bd70      	pop	{r4, r5, r6, pc}
 8009292:	bf00      	nop
 8009294:	20000cac 	.word	0x20000cac
 8009298:	20000cc8 	.word	0x20000cc8
 800929c:	00000000 	.word	0x00000000

080092a0 <chMBFetchI.constprop.19>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80092a0:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <chMBFetchI.constprop.19+0x34>)
 80092a2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	dd12      	ble.n	80092ce <chMBFetchI.constprop.19+0x2e>
 80092a8:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80092aa:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80092ac:	b510      	push	{r4, lr}
 80092ae:	6199      	str	r1, [r3, #24]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
 80092b0:	6859      	ldr	r1, [r3, #4]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80092b2:	6814      	ldr	r4, [r2, #0]
 80092b4:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top)
 80092b6:	428a      	cmp	r2, r1
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80092b8:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 80092ba:	bf28      	it	cs
 80092bc:	681a      	ldrcs	r2, [r3, #0]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 80092be:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_emptysem);
 80092c0:	4805      	ldr	r0, [pc, #20]	; (80092d8 <chMBFetchI.constprop.19+0x38>)
  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 80092c2:	bf28      	it	cs
 80092c4:	60da      	strcs	r2, [r3, #12]
  chSemSignalI(&mbp->mb_emptysem);
 80092c6:	f7fd fff3 	bl	80072b0 <chSemSignalI>
  return MSG_OK;
 80092ca:	2000      	movs	r0, #0
 80092cc:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	4770      	bx	lr
 80092d4:	20000cac 	.word	0x20000cac
 80092d8:	20000cc8 	.word	0x20000cc8
 80092dc:	00000000 	.word	0x00000000

080092e0 <chOQGetI.constprop.18>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80092e0:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <chOQGetI.constprop.18+0x4c>)
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	6999      	ldr	r1, [r3, #24]
 80092e8:	428a      	cmp	r2, r1
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	d019      	beq.n	8009322 <chOQGetI.constprop.18+0x42>
  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 80092ee:	691d      	ldr	r5, [r3, #16]
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 80092f0:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
 80092f2:	1c48      	adds	r0, r1, #1
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 80092f4:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
 80092f6:	6198      	str	r0, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top)
 80092f8:	42a8      	cmp	r0, r5

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80092fa:	780c      	ldrb	r4, [r1, #0]
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 80092fc:	4a0b      	ldr	r2, [pc, #44]	; (800932c <chOQGetI.constprop.18+0x4c>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 80092fe:	d20d      	bcs.n	800931c <chOQGetI.constprop.18+0x3c>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	490a      	ldr	r1, [pc, #40]	; (800932c <chOQGetI.constprop.18+0x4c>)
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8009304:	429a      	cmp	r2, r3
 8009306:	d007      	beq.n	8009318 <chOQGetI.constprop.18+0x38>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8009308:	6813      	ldr	r3, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800930a:	2500      	movs	r5, #0
 800930c:	6059      	str	r1, [r3, #4]
  chSchReadyI(tp);
 800930e:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8009310:	6215      	str	r5, [r2, #32]
 8009312:	600b      	str	r3, [r1, #0]
  chSchReadyI(tp);
 8009314:	f7fd fee4 	bl	80070e0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 8009318:	4620      	mov	r0, r4
 800931a:	bd38      	pop	{r3, r4, r5, pc}
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
    oqp->q_rdptr = oqp->q_buffer;
 800931c:	68d1      	ldr	r1, [r2, #12]
 800931e:	6191      	str	r1, [r2, #24]
 8009320:	e7ee      	b.n	8009300 <chOQGetI.constprop.18+0x20>
 8009322:	2a00      	cmp	r2, #0
 8009324:	d0e3      	beq.n	80092ee <chOQGetI.constprop.18+0xe>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;
 8009326:	f06f 0002 	mvn.w	r0, #2
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	20000ce8 	.word	0x20000ce8

08009330 <test_start_timer.constprop.14>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8009330:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8009332:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <test_start_timer.constprop.14+0x30>)
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	2320      	movs	r3, #32
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	4809      	ldr	r0, [pc, #36]	; (8009364 <test_start_timer.constprop.14+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp))
 8009340:	68c3      	ldr	r3, [r0, #12]
 8009342:	b10b      	cbz	r3, 8009348 <test_start_timer.constprop.14+0x18>
    chVTDoResetI(vtp);
 8009344:	f7fd fc44 	bl	8006bd0 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8009348:	4806      	ldr	r0, [pc, #24]	; (8009364 <test_start_timer.constprop.14+0x34>)
 800934a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800934e:	4a06      	ldr	r2, [pc, #24]	; (8009368 <test_start_timer.constprop.14+0x38>)
 8009350:	2300      	movs	r3, #0
 8009352:	f7fd fc6d 	bl	8006c30 <chVTDoSetI>
 8009356:	2300      	movs	r3, #0
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	bd08      	pop	{r3, pc}
 800935e:	bf00      	nop
 8009360:	20001f90 	.word	0x20001f90
 8009364:	20001fd4 	.word	0x20001fd4
 8009368:	08005be1 	.word	0x08005be1
 800936c:	f3af 8000 	nop.w

08009370 <dmaStreamAllocate.constprop.11>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8009370:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8009372:	4d21      	ldr	r5, [pc, #132]	; (80093f8 <dmaStreamAllocate.constprop.11+0x88>)
 8009374:	7a44      	ldrb	r4, [r0, #9]
 8009376:	2301      	movs	r3, #1
 8009378:	682a      	ldr	r2, [r5, #0]
 800937a:	fa03 f604 	lsl.w	r6, r3, r4
 800937e:	4216      	tst	r6, r2
 8009380:	d135      	bne.n	80093ee <dmaStreamAllocate.constprop.11+0x7e>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8009382:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <dmaStreamAllocate.constprop.11+0x8c>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8009384:	4332      	orrs	r2, r6
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8009386:	4f1e      	ldr	r7, [pc, #120]	; (8009400 <dmaStreamAllocate.constprop.11+0x90>)
 8009388:	eb03 06c4 	add.w	r6, r3, r4, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800938c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8009390:	0653      	lsls	r3, r2, #25
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8009392:	602a      	str	r2, [r5, #0]
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8009394:	6077      	str	r7, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8009396:	d004      	beq.n	80093a2 <dmaStreamAllocate.constprop.11+0x32>
    rccEnableDMA1(FALSE);
 8009398:	4a1a      	ldr	r2, [pc, #104]	; (8009404 <dmaStreamAllocate.constprop.11+0x94>)
 800939a:	6953      	ldr	r3, [r2, #20]
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	6153      	str	r3, [r2, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80093a2:	6802      	ldr	r2, [r0, #0]
 80093a4:	6846      	ldr	r6, [r0, #4]
 80093a6:	6815      	ldr	r5, [r2, #0]
 80093a8:	240f      	movs	r4, #15
 80093aa:	f025 050f 	bic.w	r5, r5, #15
 80093ae:	6015      	str	r5, [r2, #0]
 80093b0:	7a05      	ldrb	r5, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80093b2:	2300      	movs	r3, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80093b4:	40ac      	lsls	r4, r5
 80093b6:	6034      	str	r4, [r6, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80093b8:	6013      	str	r3, [r2, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80093ba:	b1d1      	cbz	r1, 80093f2 <dmaStreamAllocate.constprop.11+0x82>
    nvicEnableVector(dmastp->vector, priority);
 80093bc:	7a81      	ldrb	r1, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80093be:	2001      	movs	r0, #1
 80093c0:	094a      	lsrs	r2, r1, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80093c2:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80093c6:	f001 011f 	and.w	r1, r1, #31
 80093ca:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80093ce:	4618      	mov	r0, r3
 80093d0:	0092      	lsls	r2, r2, #2
 80093d2:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80093d6:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80093da:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80093de:	25a0      	movs	r5, #160	; 0xa0
 80093e0:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80093e4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80093e8:	6011      	str	r1, [r2, #0]

  return FALSE;
}
 80093ea:	bcf0      	pop	{r4, r5, r6, r7}
 80093ec:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 80093ee:	4618      	mov	r0, r3
 80093f0:	e7fb      	b.n	80093ea <dmaStreamAllocate.constprop.11+0x7a>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80093f2:	4608      	mov	r0, r1
 80093f4:	e7f9      	b.n	80093ea <dmaStreamAllocate.constprop.11+0x7a>
 80093f6:	bf00      	nop
 80093f8:	20002020 	.word	0x20002020
 80093fc:	20001fe8 	.word	0x20001fe8
 8009400:	20001fa4 	.word	0x20001fa4
 8009404:	40021000 	.word	0x40021000
 8009408:	f3af 8000 	nop.w
 800940c:	f3af 8000 	nop.w

08009410 <spiExchange.constprop.4>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
 8009410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009412:	4684      	mov	ip, r0
 8009414:	b085      	sub	sp, #20
 8009416:	2320      	movs	r3, #32
 8009418:	f383 8811 	msr	BASEPRI, r3
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 800941c:	4b17      	ldr	r3, [pc, #92]	; (800947c <spiExchange.constprop.4+0x6c>)
 800941e:	2003      	movs	r0, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009420:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8009422:	6a1d      	ldr	r5, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009424:	9701      	str	r7, [sp, #4]
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8009426:	6a9f      	ldr	r7, [r3, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009428:	6a5c      	ldr	r4, [r3, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800942a:	f047 0e80 	orr.w	lr, r7, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800942e:	9f01      	ldr	r7, [sp, #4]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8009430:	682d      	ldr	r5, [r5, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009432:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009434:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8009438:	60ea      	str	r2, [r5, #12]
 800943a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800943c:	f8c5 c004 	str.w	ip, [r5, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8009440:	f8c5 e000 	str.w	lr, [r5]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009444:	60e1      	str	r1, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8009446:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800944a:	6027      	str	r7, [r4, #0]

  dmaStreamEnable(spip->dmarx);
 800944c:	682a      	ldr	r2, [r5, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800944e:	490c      	ldr	r1, [pc, #48]	; (8009480 <spiExchange.constprop.4+0x70>)
 8009450:	f042 0201 	orr.w	r2, r2, #1
 8009454:	602a      	str	r2, [r5, #0]
  dmaStreamEnable(spip->dmatx);
 8009456:	6822      	ldr	r2, [r4, #0]
 8009458:	6989      	ldr	r1, [r1, #24]
 800945a:	f103 0508 	add.w	r5, r3, #8
 800945e:	ae04      	add	r6, sp, #16
 8009460:	f042 0201 	orr.w	r2, r2, #1
 8009464:	6022      	str	r2, [r4, #0]
 8009466:	f846 5d04 	str.w	r5, [r6, #-4]!
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 800946a:	6099      	str	r1, [r3, #8]
  tp->p_u.wtobjp = &trp;
 800946c:	620e      	str	r6, [r1, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800946e:	f7fd fd57 	bl	8006f20 <chSchGoSleepS>
 8009472:	2300      	movs	r3, #0
 8009474:	f383 8811 	msr	BASEPRI, r3
  _spi_wait_s(spip);
  osalSysUnlock();
}
 8009478:	b005      	add	sp, #20
 800947a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947c:	20001fa4 	.word	0x20001fa4
 8009480:	20001e40 	.word	0x20001e40
 8009484:	f3af 8000 	nop.w
 8009488:	f3af 8000 	nop.w
 800948c:	f3af 8000 	nop.w

08009490 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	460d      	mov	r5, r1
  char *token;
  if (str)
 8009494:	4604      	mov	r4, r0
 8009496:	b190      	cbz	r0, 80094be <_strtok.constprop.3+0x2e>
    *saveptr = str;
 8009498:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800949a:	4620      	mov	r0, r4
 800949c:	490b      	ldr	r1, [pc, #44]	; (80094cc <_strtok.constprop.3+0x3c>)
 800949e:	f000 f92f 	bl	8009700 <strspn>
 80094a2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 80094a4:	4620      	mov	r0, r4
 80094a6:	4909      	ldr	r1, [pc, #36]	; (80094cc <_strtok.constprop.3+0x3c>)
 80094a8:	f000 f902 	bl	80096b0 <strpbrk>
  if (*saveptr)
 80094ac:	b160      	cbz	r0, 80094c8 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 80094ae:	1c42      	adds	r2, r0, #1
 80094b0:	2300      	movs	r3, #0
 80094b2:	602a      	str	r2, [r5, #0]
 80094b4:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 80094b6:	7823      	ldrb	r3, [r4, #0]
 80094b8:	b123      	cbz	r3, 80094c4 <_strtok.constprop.3+0x34>
 80094ba:	4620      	mov	r0, r4
}
 80094bc:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 80094be:	680c      	ldr	r4, [r1, #0]

  if (!token)
 80094c0:	2c00      	cmp	r4, #0
 80094c2:	d1ea      	bne.n	800949a <_strtok.constprop.3+0xa>
    return NULL;
 80094c4:	2000      	movs	r0, #0
 80094c6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 80094c8:	6028      	str	r0, [r5, #0]
 80094ca:	e7f4      	b.n	80094b6 <_strtok.constprop.3+0x26>
 80094cc:	0800af00 	.word	0x0800af00

080094d0 <RF_switch.part.8.lto_priv.80>:
}

/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
 80094d0:	b508      	push	{r3, lr}
 80094d2:	2320      	movs	r3, #32
 80094d4:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <RF_switch.part.8.lto_priv.80+0x20>)
 80094da:	2204      	movs	r2, #4
  gpt_lld_start_timer(gptp, interval);
 80094dc:	4618      	mov	r0, r3
 80094de:	2123      	movs	r1, #35	; 0x23
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80094e0:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
 80094e2:	f7fe fc65 	bl	8007db0 <gpt_lld_start_timer>
 80094e6:	2300      	movs	r3, #0
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	bd08      	pop	{r3, pc}
 80094ee:	bf00      	nop
 80094f0:	20001f94 	.word	0x20001f94
 80094f4:	f3af 8000 	nop.w
 80094f8:	f3af 8000 	nop.w
 80094fc:	f3af 8000 	nop.w

08009500 <memset>:
 8009500:	b470      	push	{r4, r5, r6}
 8009502:	0784      	lsls	r4, r0, #30
 8009504:	d046      	beq.n	8009594 <memset+0x94>
 8009506:	1e54      	subs	r4, r2, #1
 8009508:	2a00      	cmp	r2, #0
 800950a:	d041      	beq.n	8009590 <memset+0x90>
 800950c:	b2cd      	uxtb	r5, r1
 800950e:	4603      	mov	r3, r0
 8009510:	e002      	b.n	8009518 <memset+0x18>
 8009512:	1e62      	subs	r2, r4, #1
 8009514:	b3e4      	cbz	r4, 8009590 <memset+0x90>
 8009516:	4614      	mov	r4, r2
 8009518:	f803 5b01 	strb.w	r5, [r3], #1
 800951c:	079a      	lsls	r2, r3, #30
 800951e:	d1f8      	bne.n	8009512 <memset+0x12>
 8009520:	2c03      	cmp	r4, #3
 8009522:	d92e      	bls.n	8009582 <memset+0x82>
 8009524:	b2cd      	uxtb	r5, r1
 8009526:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800952a:	2c0f      	cmp	r4, #15
 800952c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009530:	d919      	bls.n	8009566 <memset+0x66>
 8009532:	4626      	mov	r6, r4
 8009534:	f103 0210 	add.w	r2, r3, #16
 8009538:	3e10      	subs	r6, #16
 800953a:	2e0f      	cmp	r6, #15
 800953c:	f842 5c10 	str.w	r5, [r2, #-16]
 8009540:	f842 5c0c 	str.w	r5, [r2, #-12]
 8009544:	f842 5c08 	str.w	r5, [r2, #-8]
 8009548:	f842 5c04 	str.w	r5, [r2, #-4]
 800954c:	f102 0210 	add.w	r2, r2, #16
 8009550:	d8f2      	bhi.n	8009538 <memset+0x38>
 8009552:	f1a4 0210 	sub.w	r2, r4, #16
 8009556:	f022 020f 	bic.w	r2, r2, #15
 800955a:	f004 040f 	and.w	r4, r4, #15
 800955e:	3210      	adds	r2, #16
 8009560:	2c03      	cmp	r4, #3
 8009562:	4413      	add	r3, r2
 8009564:	d90d      	bls.n	8009582 <memset+0x82>
 8009566:	461e      	mov	r6, r3
 8009568:	4622      	mov	r2, r4
 800956a:	3a04      	subs	r2, #4
 800956c:	2a03      	cmp	r2, #3
 800956e:	f846 5b04 	str.w	r5, [r6], #4
 8009572:	d8fa      	bhi.n	800956a <memset+0x6a>
 8009574:	1f22      	subs	r2, r4, #4
 8009576:	f022 0203 	bic.w	r2, r2, #3
 800957a:	3204      	adds	r2, #4
 800957c:	4413      	add	r3, r2
 800957e:	f004 0403 	and.w	r4, r4, #3
 8009582:	b12c      	cbz	r4, 8009590 <memset+0x90>
 8009584:	b2c9      	uxtb	r1, r1
 8009586:	441c      	add	r4, r3
 8009588:	f803 1b01 	strb.w	r1, [r3], #1
 800958c:	42a3      	cmp	r3, r4
 800958e:	d1fb      	bne.n	8009588 <memset+0x88>
 8009590:	bc70      	pop	{r4, r5, r6}
 8009592:	4770      	bx	lr
 8009594:	4614      	mov	r4, r2
 8009596:	4603      	mov	r3, r0
 8009598:	e7c2      	b.n	8009520 <memset+0x20>
 800959a:	bf00      	nop
 800959c:	0000      	movs	r0, r0
	...

080095a0 <strcasecmp>:
 80095a0:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <strcasecmp+0x3c>)
 80095a2:	b430      	push	{r4, r5}
 80095a4:	681d      	ldr	r5, [r3, #0]
 80095a6:	e002      	b.n	80095ae <strcasecmp+0xe>
 80095a8:	1a9b      	subs	r3, r3, r2
 80095aa:	d114      	bne.n	80095d6 <strcasecmp+0x36>
 80095ac:	b19a      	cbz	r2, 80095d6 <strcasecmp+0x36>
 80095ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095b2:	18ea      	adds	r2, r5, r3
 80095b4:	7852      	ldrb	r2, [r2, #1]
 80095b6:	f002 0203 	and.w	r2, r2, #3
 80095ba:	2a01      	cmp	r2, #1
 80095bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095c0:	bf08      	it	eq
 80095c2:	3320      	addeq	r3, #32
 80095c4:	18ac      	adds	r4, r5, r2
 80095c6:	7864      	ldrb	r4, [r4, #1]
 80095c8:	f004 0403 	and.w	r4, r4, #3
 80095cc:	2c01      	cmp	r4, #1
 80095ce:	d1eb      	bne.n	80095a8 <strcasecmp+0x8>
 80095d0:	3220      	adds	r2, #32
 80095d2:	1a9b      	subs	r3, r3, r2
 80095d4:	d0eb      	beq.n	80095ae <strcasecmp+0xe>
 80095d6:	4618      	mov	r0, r3
 80095d8:	bc30      	pop	{r4, r5}
 80095da:	4770      	bx	lr
 80095dc:	20000d0c 	.word	0x20000d0c

080095e0 <strlen>:
 80095e0:	f020 0103 	bic.w	r1, r0, #3
 80095e4:	f010 0003 	ands.w	r0, r0, #3
 80095e8:	f1c0 0000 	rsb	r0, r0, #0
 80095ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80095f0:	f100 0c04 	add.w	ip, r0, #4
 80095f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80095f8:	f06f 0200 	mvn.w	r2, #0
 80095fc:	bf1c      	itt	ne
 80095fe:	fa22 f20c 	lsrne.w	r2, r2, ip
 8009602:	4313      	orrne	r3, r2
 8009604:	f04f 0c01 	mov.w	ip, #1
 8009608:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800960c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8009610:	eba3 020c 	sub.w	r2, r3, ip
 8009614:	ea22 0203 	bic.w	r2, r2, r3
 8009618:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800961c:	bf04      	itt	eq
 800961e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009622:	3004      	addeq	r0, #4
 8009624:	d0f4      	beq.n	8009610 <strlen+0x30>
 8009626:	f1c2 0100 	rsb	r1, r2, #0
 800962a:	ea02 0201 	and.w	r2, r2, r1
 800962e:	fab2 f282 	clz	r2, r2
 8009632:	f1c2 021f 	rsb	r2, r2, #31
 8009636:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800963a:	4770      	bx	lr
 800963c:	0000      	movs	r0, r0
	...

08009640 <strncpy>:
 8009640:	ea40 0301 	orr.w	r3, r0, r1
 8009644:	079b      	lsls	r3, r3, #30
 8009646:	b470      	push	{r4, r5, r6}
 8009648:	d12b      	bne.n	80096a2 <strncpy+0x62>
 800964a:	2a03      	cmp	r2, #3
 800964c:	d929      	bls.n	80096a2 <strncpy+0x62>
 800964e:	460c      	mov	r4, r1
 8009650:	4603      	mov	r3, r0
 8009652:	4621      	mov	r1, r4
 8009654:	f854 6b04 	ldr.w	r6, [r4], #4
 8009658:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800965c:	ea25 0506 	bic.w	r5, r5, r6
 8009660:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8009664:	d105      	bne.n	8009672 <strncpy+0x32>
 8009666:	3a04      	subs	r2, #4
 8009668:	2a03      	cmp	r2, #3
 800966a:	f843 6b04 	str.w	r6, [r3], #4
 800966e:	4621      	mov	r1, r4
 8009670:	d8ef      	bhi.n	8009652 <strncpy+0x12>
 8009672:	b1a2      	cbz	r2, 800969e <strncpy+0x5e>
 8009674:	780c      	ldrb	r4, [r1, #0]
 8009676:	3a01      	subs	r2, #1
 8009678:	701c      	strb	r4, [r3, #0]
 800967a:	3101      	adds	r1, #1
 800967c:	3301      	adds	r3, #1
 800967e:	b13c      	cbz	r4, 8009690 <strncpy+0x50>
 8009680:	b16a      	cbz	r2, 800969e <strncpy+0x5e>
 8009682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009686:	3a01      	subs	r2, #1
 8009688:	f803 4b01 	strb.w	r4, [r3], #1
 800968c:	2c00      	cmp	r4, #0
 800968e:	d1f7      	bne.n	8009680 <strncpy+0x40>
 8009690:	b12a      	cbz	r2, 800969e <strncpy+0x5e>
 8009692:	441a      	add	r2, r3
 8009694:	2100      	movs	r1, #0
 8009696:	f803 1b01 	strb.w	r1, [r3], #1
 800969a:	4293      	cmp	r3, r2
 800969c:	d1fb      	bne.n	8009696 <strncpy+0x56>
 800969e:	bc70      	pop	{r4, r5, r6}
 80096a0:	4770      	bx	lr
 80096a2:	4603      	mov	r3, r0
 80096a4:	e7e5      	b.n	8009672 <strncpy+0x32>
 80096a6:	bf00      	nop
	...

080096b0 <strpbrk>:
 80096b0:	b430      	push	{r4, r5}
 80096b2:	7804      	ldrb	r4, [r0, #0]
 80096b4:	b1ec      	cbz	r4, 80096f2 <strpbrk+0x42>
 80096b6:	780d      	ldrb	r5, [r1, #0]
 80096b8:	b1ad      	cbz	r5, 80096e6 <strpbrk+0x36>
 80096ba:	42ac      	cmp	r4, r5
 80096bc:	d00e      	beq.n	80096dc <strpbrk+0x2c>
 80096be:	460a      	mov	r2, r1
 80096c0:	e001      	b.n	80096c6 <strpbrk+0x16>
 80096c2:	429c      	cmp	r4, r3
 80096c4:	d009      	beq.n	80096da <strpbrk+0x2a>
 80096c6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1f9      	bne.n	80096c2 <strpbrk+0x12>
 80096ce:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d1f0      	bne.n	80096b8 <strpbrk+0x8>
 80096d6:	7815      	ldrb	r5, [r2, #0]
 80096d8:	e000      	b.n	80096dc <strpbrk+0x2c>
 80096da:	4625      	mov	r5, r4
 80096dc:	2d00      	cmp	r5, #0
 80096de:	bf08      	it	eq
 80096e0:	2000      	moveq	r0, #0
 80096e2:	bc30      	pop	{r4, r5}
 80096e4:	4770      	bx	lr
 80096e6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80096ea:	460a      	mov	r2, r1
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	d1e3      	bne.n	80096b8 <strpbrk+0x8>
 80096f0:	e7f1      	b.n	80096d6 <strpbrk+0x26>
 80096f2:	4620      	mov	r0, r4
 80096f4:	bc30      	pop	{r4, r5}
 80096f6:	4770      	bx	lr
	...

08009700 <strspn>:
 8009700:	b470      	push	{r4, r5, r6}
 8009702:	7804      	ldrb	r4, [r0, #0]
 8009704:	b1a4      	cbz	r4, 8009730 <strspn+0x30>
 8009706:	4605      	mov	r5, r0
 8009708:	780e      	ldrb	r6, [r1, #0]
 800970a:	b14e      	cbz	r6, 8009720 <strspn+0x20>
 800970c:	42b4      	cmp	r4, r6
 800970e:	d00a      	beq.n	8009726 <strspn+0x26>
 8009710:	460a      	mov	r2, r1
 8009712:	e001      	b.n	8009718 <strspn+0x18>
 8009714:	429c      	cmp	r4, r3
 8009716:	d006      	beq.n	8009726 <strspn+0x26>
 8009718:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1f9      	bne.n	8009714 <strspn+0x14>
 8009720:	1a28      	subs	r0, r5, r0
 8009722:	bc70      	pop	{r4, r5, r6}
 8009724:	4770      	bx	lr
 8009726:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800972a:	2c00      	cmp	r4, #0
 800972c:	d1ed      	bne.n	800970a <strspn+0xa>
 800972e:	e7f7      	b.n	8009720 <strspn+0x20>
 8009730:	4620      	mov	r0, r4
 8009732:	e7f6      	b.n	8009722 <strspn+0x22>
	...
 8009740:	00000101 	.word	0x00000101
 8009744:	00020111 	.word	0x00020111
 8009748:	00001001 	.word	0x00001001
 800974c:	00022011 	.word	0x00022011
 8009750:	00000002 	.word	0x00000002
 8009754:	0e031211 	.word	0x0e031211
 8009758:	00aa0006 	.word	0x00aa0006
 800975c:	190b2011 	.word	0x190b2011
 8009760:	80030880 	.word	0x80030880
 8009764:	7410f000 	.word	0x7410f000
 8009768:	005500e8 	.word	0x005500e8
 800976c:	240c2011 	.word	0x240c2011
 8009770:	03ab0c06 	.word	0x03ab0c06
 8009774:	00c20203 	.word	0x00c20203
 8009778:	01c03204 	.word	0x01c03204
 800977c:	30032011 	.word	0x30032011
 8009780:	00c06403 	.word	0x00c06403
 8009784:	50022011 	.word	0x50022011
 8009788:	00000a84 	.word	0x00000a84
 800978c:	54022011 	.word	0x54022011
 8009790:	0000070f 	.word	0x0000070f
 8009794:	5b052011 	.word	0x5b052011
 8009798:	78210440 	.word	0x78210440
 800979c:	00000020 	.word	0x00000020
 80097a0:	000c2111 	.word	0x000c2111
 80097a4:	510fbaff 	.word	0x510fbaff
 80097a8:	fcc9a9cf 	.word	0xfcc9a9cf
 80097ac:	010f1e1b 	.word	0x010f1e1b
 80097b0:	0c0c2111 	.word	0x0c0c2111
 80097b4:	ff15fdfc 	.word	0xff15fdfc
 80097b8:	baff0f00 	.word	0xbaff0f00
 80097bc:	a9cf510f 	.word	0xa9cf510f
 80097c0:	180c2111 	.word	0x180c2111
 80097c4:	1e1bfcc9 	.word	0x1e1bfcc9
 80097c8:	fdfc010f 	.word	0xfdfc010f
 80097cc:	0f00ff15 	.word	0x0f00ff15
 80097d0:	06011211 	.word	0x06011211
 80097d4:	00000000 	.word	0x00000000
 80097d8:	00011211 	.word	0x00011211
 80097dc:	00000085 	.word	0x00000085
 80097e0:	04011011 	.word	0x04011011
 80097e4:	00000031 	.word	0x00000031
 80097e8:	01021111 	.word	0x01021111
 80097ec:	000091d3 	.word	0x000091d3
 80097f0:	00000041 	.word	0x00000041
 80097f4:	00000042 	.word	0x00000042
 80097f8:	00000043 	.word	0x00000043
 80097fc:	44434241 	.word	0x44434241
 8009800:	00000000 	.word	0x00000000
 8009804:	00004241 	.word	0x00004241
	...

08009810 <vcom_string0>:
 8009810:	04090304 00000000 00000000 00000000     ................

08009820 <ep2config>:
 8009820:	00000003 00000000 080029a1 00000000     .........)......
 8009830:	00000010 200014f4 00000000 00000001     ....... ........
	...

08009850 <vcom_string3>:
 8009850:	00330308 00300030 00000000 00000000     ..3.0.0.........

08009860 <vcom_string1>:
 8009860:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 8009870:	00000073 00000000 00000000 00000000     s...............

08009880 <vcom_device_descriptor>:
 8009880:	00000012 080099a0 00000000 00000000     ................

08009890 <vmt>:
 8009890:	08002bd1 08002bb1 08002c11 08002bf1     .+...+...,...+..
 80098a0:	08002c01 08002be1 08002bc1 08002ba1     .,...+...+...+..

080098b0 <vcom_string2>:
 80098b0:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 80098c0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 80098d0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 80098e0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

080098f0 <vcom_strings>:
 80098f0:	00000004 08009810 00000012 08009860     ............`...
 8009900:	00000038 080098b0 00000008 08009850     8...........P...

08009910 <_stm32_dma_streams>:
 8009910:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 8009920:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 8009930:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 8009940:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 8009950:	40020004 00100514 40020080 40020004     ...@.......@...@
 8009960:	00110618 00000000 00000000 00000000     ................

08009970 <usbcfg>:
 8009970:	08002571 080020f1 080029b1 00000000     q%... ...)......

08009980 <ch_debug>:
 8009980:	6e69616d 18001600 08440204 1814100c     main......D.....
 8009990:	1e1d1c00 00000000 00000000 00000000     ................

080099a0 <vcom_device_descriptor_data>:
 80099a0:	01100112 40000002 00041eaf 02010200     .......@........
 80099b0:	00000103 00000000 00000000 00000000     ................

080099c0 <vcom_configuration_descriptor>:
 80099c0:	00000043 08009ea0 00000000 00000000     C...............
 80099d0:	6e696c62 0072656b 73746547 72617020     blinker.Gets par
 80099e0:	44492074 7355202c 3a656761 0d207020     t ID, Usage: p .
 80099f0:	0000000a 0d583425 0000000a 73746553     ....%4X.....Sets
 8009a00:	70206120 656b6361 65682074 72656461      a packet header
 8009a10:	726f6620 65737520 74697720 77272068      for use with 'w
 8009a20:	6f632027 6e616d6d 55202c64 65676173     ' command, Usage
 8009a30:	2068203a 6361703c 5f74656b 64616568     : h <packet_head
 8009a40:	0d3e7265 0000000a 6361703c 5f74656b     er>.....<packet_
 8009a50:	64616568 203e7265 7473756d 20656220     header> must be 
 8009a60:	63617865 20796c74 68632035 63617261     exactly 5 charac
 8009a70:	73726574 00000a0d 646e6553 20612073     ters....Sends a 
 8009a80:	6b636170 202c7465 67617355 77203a65     packet, Usage: w
 8009a90:	61703c20 74656b63 200a0d3e 6b636150      <packet>.. Pack
 8009aa0:	69207465 72702073 6565636f 20646564     et is proceeded 
 8009ab0:	70207962 656b6361 65682074 72656461     by packet header
 8009ac0:	65732820 68742074 66207369 74737269      (set this first
 8009ad0:	6564202c 6c756166 25272074 0d292773     , default '%s').
 8009ae0:	0000000a 4f522424 0000004b 6361703c     ....$$ROK...<pac
 8009af0:	3e74656b 73756d20 65622074 61786520     ket> must be exa
 8009b00:	796c7463 63203120 61726168 72657463     ctly 1 character
 8009b10:	00000a0d 646e6553 20612073 6b636170     ....Sends a pack
 8009b20:	202c7465 67617355 73203a65 61703c20     et, Usage: s <pa
 8009b30:	74656b63 000a0d3e 6361703c 3e74656b     cket>...<packet>
 8009b40:	73756d20 65622074 61786520 796c7463      must be exactly
 8009b50:	63203620 61726168 72657463 000a0d73      6 characters...
 8009b60:	656e7554 6f742073 63206120 6e6e6168     Tunes to a chann
 8009b70:	202c6c65 67617355 63203a65 68633c20     el, Usage: c <ch
 8009b80:	656e6e61 2030206c 38206f74 000a0d3e     annel 0 to 8>...
 8009b90:	6168633c 6c656e6e 756d203e 62207473     <channel> must b
 8009ba0:	78652065 6c746361 20312079 72616863     e exactly 1 char
 8009bb0:	65746361 6e612072 6e692064 382d3020     acter and in 0-8
 8009bc0:	6e617220 0a0d6567 00000000 6e616843      range......Chan
 8009bd0:	206c656e 203a7369 0a0d7525 00000000     nel is: %u......
 8009be0:	656e7554 6f742073 66656420 746c7561     Tunes to default
 8009bf0:	65726620 6e657571 202c7963 67617355      frequency, Usag
 8009c00:	72203a65 00000a0d 71657246 636e6575     e: r....Frequenc
 8009c10:	73692079 7525203a 00000a0d 656e7554     y is: %u....Tune
 8009c20:	6f642073 62206e77 30352079 202c7a68     s down by 50hz, 
 8009c30:	67617355 64203a65 00000a0d 656e7554     Usage: d....Tune
 8009c40:	70752073 20796220 7a683035 7355202c     s up by 50hz, Us
 8009c50:	3a656761 0a0d7520 00000000 67617355     age: u......Usag
 8009c60:	0d203a65 6d27200a 20276d65 736e7572     e: .. 'mem' runs
 8009c70:	646d6320 6d656d5f 6843203a 4f696269      cmd_mem: ChibiO
 8009c80:	65732053 7420666c 0d747365 7427200a     S self test.. 't
 8009c90:	61657268 20277364 736e7572 646d6320     hreads' runs cmd
 8009ca0:	7268745f 73646165 6843203a 4f696269     _threads: ChibiO
 8009cb0:	65732053 7420666c 0d747365 2720200a     S self test..  '
 8009cc0:	74736574 75722027 6320736e 745f646d     test' runs cmd_t
 8009cd0:	3a747365 69684320 534f6962 6c657320     est: ChibiOS sel
 8009ce0:	65742066 0a0d7473 7727202c 65746972     f test.., 'write
 8009cf0:	75722027 6320736e 775f646d 65746972     ' runs cmd_write
 8009d00:	6843203a 4f696269 44432053 4d434143     : ChibiOS CDCACM
 8009d10:	6c657320 65742066 0a0d7473 27752720      self test.. 'u'
 8009d20:	6e757420 75207365 30352070 0d7a6820      tunes up 50 hz.
 8009d30:	2720200a 74202764 73656e75 776f6420     .  'd' tunes dow
 8009d40:	3035206e 0a0d7a68 27722720 73657220     n 50hz.. 'r' res
 8009d50:	20737465 696e7574 0a0d676e 27732720     ets tuning.. 's'
 8009d60:	6e657320 70207364 656b6361 200a0d74      sends packet.. 
 8009d70:	20277727 646e6573 61702073 74656b63     'w' sends packet
 8009d80:	74697720 65682068 72656461 27200a0d      with header.. '
 8009d90:	73202763 20737465 6e616863 206c656e     c' sets channel 
 8009da0:	626d756e 0a0d7265 68272020 65732027     number..  'h' se
 8009db0:	70207374 656b6361 65682074 72656461     ts packet header
 8009dc0:	27200a0d 67202770 73657669 72617020     .. 'p' gives par
 8009dd0:	756e2074 7265626d 27200a0d 6420273f     t number.. '?' d
 8009de0:	6c707369 20737961 706c6568 00000a0d     isplays help....
 8009df0:	006d656d 65726874 00736461 74697277     mem.threads.writ
 8009e00:	00000065 00000075 00000064 00000077     e...u...d...w...
 8009e10:	00000070 00000072 00000063 0000003f     p...r...c...?...

08009e20 <serusbcfg>:
 8009e20:	20001200 00020101 00000000 00000000     ... ............

08009e30 <commands>:
 8009e30:	08009df0 080086c1 08009df4 08008651     ............Q...
 8009e40:	0800aa10 08008601 08009dfc 080085b1     ................
 8009e50:	08009e04 08002501 08009e08 08002491     .....%.......$..
 8009e60:	0800a760 08002311 08009e0c 08002291     `....#......."..
 8009e70:	0800a950 08002211 08009e10 080021e1     P....".......!..
 8009e80:	08009e14 08002421 08009e18 08002391     ....!$.......#..
 8009e90:	08009e1c 08002621 00000000 00000000     ....!&..........

08009ea0 <vcom_configuration_descriptor_data>:
 8009ea0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8009eb0:	24050001 05011000 01000124 02022404     ...$....$....$..
 8009ec0:	00062405 82050701 ff000803 00010409     .$..............
 8009ed0:	00000a02 01050700 00004002 02810507     .........@......
 8009ee0:	00000040 00000000 00000000 00000000     @...............

08009ef0 <shell_cfg1>:
 8009ef0:	2000128c 08009e30 00000000 00000000     ... 0...........

08009f00 <ep1config>:
 8009f00:	00000002 00000000 08002b11 08003361     .........+..a3..
 8009f10:	00400040 200014e4 20001528 00000002     @.@.... (.. ....
	...

08009f30 <zero_status>:
	...

08009f40 <active_status>:
	...
 8009f50:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 8009f60:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 8009f70:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 8009f80:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 8009f90:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 8009fa0:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 8009fb0:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 8009fc0:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 8009fd0:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 8009fe0:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 8009ff0:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 800a000:	203a2065 00000000 636f6c20 6e752b6b     e : .... lock+un
 800a010:	6b636f6c 0000532f 69617720 69732b74     lock/S.. wait+si
 800a020:	6c616e67 0000532f 6d697420 2f737265     gnal/S.. timers/
 800a030:	00000053 00000000 00000000 00000000     S...............

0800a040 <halted_status>:
 800a040:	00000001 00000000 00000000 00000000     ................

0800a050 <wa>:
 800a050:	200017c8 20001910 20001a58 20001ba0     ... ... X.. ... 
 800a060:	20001ce8 00000000 00000000 00000000     ... ............
 800a070:	74796220 532f7365 00000000 78746320      bytes/S.... ctx
 800a080:	2f637773 00000053 72687420 73646165     swc/S... threads
 800a090:	0000532f 73657220 64656863 73656c75     /S.. reschedules
 800a0a0:	202c532f 00000000 67736d20 2c532f73     /S, .... msgs/S,
 800a0b0:	00000020 00000000 00000000 00000000      ...............
 800a0c0:	00434241 44434241 00000045 00000000     ABC.ABCDE.......

0800a0d0 <evhndl>:
 800a0d0:	08004521 08004511 08004501 00000000     !E...E...E......

0800a0e0 <testmtx4>:
 800a0e0:	0800a9d8 08004f51 00000000 080050b1     ....QO.......P..

0800a0f0 <testmtx5>:
 800a0f0:	0800a9c8 08004f41 00000000 08004fb1     ....AO.......O..

0800a100 <testmtx6>:
 800a100:	0800a9b0 080043e1 00000000 08004e61     .....C......aN..

0800a110 <testmtx7>:
 800a110:	0800a998 080043c1 00000000 08004d71     .....C......qM..

0800a120 <testmtx8>:
 800a120:	0800a984 08004391 00000000 08004bc1     .....C.......K..

0800a130 <patternmsg>:
 800a130:	0800a370 00000000 00000000 00000000     p...............

0800a140 <testbmk11>:
 800a140:	0800a6a4 08002a01 00000000 08002d81     .....*.......-..

0800a150 <testbmk12>:
 800a150:	0800a684 080029f1 00000000 08002d11     .....).......-..

0800a160 <testevt2>:
 800a160:	0800a914 08004401 00000000 08001d31     .....D......1...

0800a170 <patterndyn>:
 800a170:	0800a310 0800a320 0800a330 00000000     .... ...0.......

0800a180 <testsem1>:
 800a180:	0800aa70 08004fa1 00000000 08005841     p....O......AX..

0800a190 <testsem2>:
 800a190:	0800aa5c 08004f91 00000000 080056e1     \....O.......V..

0800a1a0 <testsem3>:
 800a1a0:	0800aa3c 08004f81 00000000 08005631     <....O......1V..

0800a1b0 <testsem4>:
 800a1b0:	0800aa18 00000000 00000000 080054d1     .............T..

0800a1c0 <testbmk6>:
 800a1c0:	0800a764 00000000 00000000 080037b1     d............7..

0800a1d0 <testbmk10>:
 800a1d0:	0800a6c8 00000000 00000000 08002df1     .............-..

0800a1e0 <testbmk4>:
 800a1e0:	0800a7a4 00000000 00000000 08003a21     ............!:..

0800a1f0 <patternthd>:
 800a1f0:	0800a3b0 0800a3c0 0800a3d0 0800a3e0     ................
	...

0800a210 <testbmk13>:
 800a210:	0800a668 00000000 00000000 08002c21     h...........!,..

0800a220 <testbmk1>:
 800a220:	0800a7f0 00000000 00000000 08003cc1     .............<..

0800a230 <testbmk2>:
 800a230:	0800a7d8 00000000 00000000 08003c51     ............Q<..

0800a240 <testbmk3>:
 800a240:	0800a7c0 00000000 00000000 08003b71     ............q;..

0800a250 <testbmk5>:
 800a250:	0800a784 00000000 00000000 080039b1     .............9..

0800a260 <testbmk8>:
 800a260:	0800a710 00000000 00000000 080036d1     .............6..

0800a270 <testbmk7>:
 800a270:	0800a73c 08003571 00000000 08003881     <...q5.......8..

0800a280 <testpools1>:
 800a280:	0800a8bc 08001661 00000000 080016b1     ....a...........

0800a290 <testbmk9>:
 800a290:	0800a6ec 00000000 00000000 08003621     ............!6..

0800a2a0 <patternbmk>:
 800a2a0:	0800a220 0800a230 0800a240 0800a1e0      ...0...@.......
 800a2b0:	0800a250 0800a1c0 0800a270 0800a260     P.......p...`...
 800a2c0:	0800a290 0800a1d0 0800a140 0800a150     ........@...P...
 800a2d0:	0800a210 00000000 00000000 00000000     ................

0800a2e0 <patterns>:
 800a2e0:	0800a1f0 0800a3f0 0800a450 0800a130     ........P...0...
 800a2f0:	0800a3a0 0800a350 0800a360 0800ab00     ....P...`.......
 800a300:	0800a170 0800a410 0800a2a0 00000000     p...............

0800a310 <testdyn1>:
 800a310:	0800a890 08001621 00000000 08001881     ....!...........

0800a320 <testdyn2>:
 800a320:	0800a860 08001601 00000000 08001781     `...............

0800a330 <testdyn3>:
 800a330:	0800a838 080015d1 00000000 08004211     8............B..

0800a340 <testmbox1>:
 800a340:	0800a954 08004351 00000000 08004531     T...QC......1E..

0800a350 <patternevt>:
 800a350:	0800a420 0800a160 0800a440 00000000      ...`...@.......

0800a360 <patternheap>:
 800a360:	0800a430 00000000 00000000 00000000     0...............

0800a370 <testmsg1>:
 800a370:	0800a974 00000000 00000000 08004b21     t...........!K..

0800a380 <testqueues1>:
 800a380:	0800a820 080035d1 00000000 08003fa1      ....5.......?..

0800a390 <testqueues2>:
 800a390:	0800a808 080035a1 00000000 08003d51     .....5......Q=..

0800a3a0 <patternmbox>:
 800a3a0:	0800a340 00000000 00000000 00000000     @...............

0800a3b0 <testthd1>:
 800a3b0:	0800aad0 00000000 00000000 08005e91     .............^..

0800a3c0 <testthd2>:
 800a3c0:	0800aab4 00000000 00000000 08005d41     ............A]..

0800a3d0 <testthd3>:
 800a3d0:	0800aa98 00000000 00000000 08005a81     .............Z..

0800a3e0 <testthd4>:
 800a3e0:	0800aa88 00000000 00000000 080059b1     .............Y..

0800a3f0 <patternsem>:
 800a3f0:	0800a180 0800a190 0800a1a0 0800a1b0     ................
	...

0800a410 <patternqueues>:
 800a410:	0800a380 0800a390 00000000 00000000     ................

0800a420 <testevt1>:
 800a420:	0800a930 08004411 00000000 08004421     0....D......!D..

0800a430 <testheap1>:
 800a430:	0800a8d8 08001681 00000000 08001981     ................

0800a440 <testevt3>:
 800a440:	0800a900 08001d21 00000000 08001bc1     ....!...........

0800a450 <patternmtx>:
 800a450:	0800aaf0 0800a0e0 0800a0f0 0800a100     ................
 800a460:	0800a110 0800a120 00000000 00000000     .... ...........
 800a470:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 800a480:	00002020 202a2a2a 706d6f43 64656c69       ..*** Compiled
 800a490:	2020203a 00002020 202a2a2a 706d6f43     :     ..*** Comp
 800a4a0:	72656c69 2020203a 00002020 202a2a2a     iler:     ..*** 
 800a4b0:	68637241 63657469 65727574 0000203a     Architecture: ..
 800a4c0:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 800a4d0:	0000203a 202a2a2a 74726f50 666e4920     : ..*** Port Inf
 800a4e0:	20203a6f 00002020 202a2a2a 74616c50     o:    ..*** Plat
 800a4f0:	6d726f66 2020203a 00002020 202a2a2a     form:     ..*** 
 800a500:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 800a510:	202d2d2d 74736554 73614320 00002065     --- Test Case ..
 800a520:	00002820 202d2d2d 75736552 203a746c      (..--- Result: 
 800a530:	4c494146 20455255 00002328 00005b20     FAILURE (#.. [..
 800a540:	616e6946 6572206c 746c7573 0000203a     Final result: ..
 800a550:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 800a560:	20747365 74697573 00000065 002a2a2a     est suite...***.
 800a570:	00000029 0000295d 202d2d2d 75736552     )...])..--- Resu
 800a580:	203a746c 43435553 00535345 4c494146     lt: SUCCESS.FAIL
 800a590:	00455255 2e302e33 76656430 00000000     URE.3.0.0dev....
 800a5a0:	20626546 32203320 20353130 3031202d     Feb  3 2015 - 10
 800a5b0:	3a37333a 00003133 20434347 2e392e34     :37:31..GCC 4.9.
 800a5c0:	30322033 31313431 28203931 656c6572     3 20141119 (rele
 800a5d0:	29657361 52415b20 6d652f4d 64646562     ase) [ARM/embedd
 800a5e0:	342d6465 622d395f 636e6172 65722068     ed-4_9-branch re
 800a5f0:	69736976 32206e6f 37323831 00005d38     vision 218278]..
 800a600:	764d5241 004d2d37 74726f43 4d2d7865     ARMv7-M.Cortex-M
 800a610:	00000033 61766441 6465636e 72656b20     3...Advanced ker
 800a620:	206c656e 65646f6d 00000000 334d5453     nel mode....STM3
 800a630:	30314632 65502078 726f6672 636e616d     2F10x Performanc
 800a640:	694c2065 4d20656e 75696465 6544206d     e Line Medium De
 800a650:	7469736e 00000079 55207854 6e696c70     nsity...Tx Uplin
 800a660:	6f62206b 00647261 636e6542 72616d68     k board.Benchmar
 800a670:	52202c6b 66204d41 70746f6f 746e6972     k, RAM footprint
 800a680:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 800a690:	78657475 6c207365 2f6b636f 6f6c6e75     utexes lock/unlo
 800a6a0:	00006b63 636e6542 72616d68 73202c6b     ck..Benchmark, s
 800a6b0:	70616d65 65726f68 61772073 732f7469     emaphores wait/s
 800a6c0:	616e6769 0000006c 636e6542 72616d68     ignal...Benchmar
 800a6d0:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 800a6e0:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 800a6f0:	72616d68 49202c6b 51204f2f 65756575     hmark, I/O Queue
 800a700:	68742073 67756f72 74757068 00000000     s throughput....
 800a710:	636e6542 72616d68 72202c6b 646e756f     Benchmark, round
 800a720:	626f7220 63206e69 65746e6f 73207478      robin context s
 800a730:	63746977 676e6968 00000000 636e6542     witching....Benc
 800a740:	72616d68 6d202c6b 20737361 63736572     hmark, mass resc
 800a750:	75646568 202c656c 68742035 64616572     hedule, 5 thread
 800a760:	00000073 636e6542 72616d68 74202c6b     s...Benchmark, t
 800a770:	61657268 202c7364 61657263 6f206574     hreads, create o
 800a780:	00796c6e 636e6542 72616d68 74202c6b     nly.Benchmark, t
 800a790:	61657268 202c7364 6c6c7566 63796320     hreads, full cyc
 800a7a0:	0000656c 636e6542 72616d68 63202c6b     le..Benchmark, c
 800a7b0:	65746e6f 73207478 63746977 00000068     ontext switch...
 800a7c0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 800a7d0:	20736567 00003323 636e6542 72616d68     ges #3..Benchmar
 800a7e0:	6d202c6b 61737365 20736567 00003223     k, messages #2..
 800a7f0:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 800a800:	20736567 00003123 75657551 202c7365     ges #1..Queues, 
 800a810:	7074756f 71207475 65756575 00000073     output queues...
 800a820:	75657551 202c7365 75706e69 75712074     Queues, input qu
 800a830:	73657565 00000000 616e7944 2063696d     eues....Dynamic 
 800a840:	73495041 6572202c 74736967 61207972     APIs, registry a
 800a850:	7220646e 72656665 65636e65 00000073     nd references...
 800a860:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 800a870:	64616572 72632073 69746165 66206e6f     reads creation f
 800a880:	206d6f72 6f6d656d 70207972 006c6f6f     rom memory pool.
 800a890:	616e7944 2063696d 73495041 6874202c     Dynamic APIs, th
 800a8a0:	64616572 72632073 69746165 66206e6f     reads creation f
 800a8b0:	206d6f72 70616568 00000000 6f6d654d     rom heap....Memo
 800a8c0:	50207972 736c6f6f 7571202c 2f657565     ry Pools, queue/
 800a8d0:	75716564 00657565 70616548 6c61202c     dequeue.Heap, al
 800a8e0:	61636f6c 6e6f6974 646e6120 61726620     location and fra
 800a8f0:	6e656d67 69746174 74206e6f 00747365     gmentation test.
 800a900:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 800a910:	00000000 6e657645 202c7374 74696177     ....Events, wait
 800a920:	646e6120 6f726220 61636461 00007473      and broadcast..
 800a930:	6e657645 202c7374 69676572 61727473     Events, registra
 800a940:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 800a950:	00000068 6c69614d 65786f62 71202c73     h...Mailboxes, q
 800a960:	69756575 6120676e 7420646e 6f656d69     ueuing and timeo
 800a970:	00737475 7373654d 73656761 6f6c202c     uts.Messages, lo
 800a980:	0000706f 646e6f43 2c726156 6f6f6220     op..CondVar, boo
 800a990:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 800a9a0:	6f726220 61636461 74207473 00747365      broadcast test.
 800a9b0:	646e6f43 2c726156 67697320 206c616e     CondVar, signal 
 800a9c0:	74736574 00000000 6574754d 2c736578     test....Mutexes,
 800a9d0:	61747320 00737574 6574754d 2c736578      status.Mutexes,
 800a9e0:	69727020 7469726f 65722079 6e727574      priority return
 800a9f0:	00000000 6574754d 2c736578 69727020     ....Mutexes, pri
 800aa00:	7469726f 6e652079 75657571 20676e69     ority enqueuing 
 800aa10:	74736574 00000000 616e6942 53207972     test....Binary S
 800aa20:	70616d65 65726f68 66202c73 74636e75     emaphores, funct
 800aa30:	616e6f69 7974696c 00000000 616d6553     ionality....Sema
 800aa40:	726f6870 202c7365 6d6f7461 73206369     phores, atomic s
 800aa50:	616e6769 61772d6c 00007469 616d6553     ignal-wait..Sema
 800aa60:	726f6870 202c7365 656d6974 0074756f     phores, timeout.
 800aa70:	616d6553 726f6870 202c7365 75716e65     Semaphores, enqu
 800aa80:	6e697565 00000067 65726854 2c736461     euing...Threads,
 800aa90:	6c656420 00737961 65726854 2c736461      delays.Threads,
 800aaa0:	69727020 7469726f 68632079 65676e61      priority change
 800aab0:	00000000 65726854 2c736461 716e6520     ....Threads, enq
 800aac0:	69756575 7420676e 20747365 00003223     ueuing test #2..
 800aad0:	65726854 2c736461 716e6520 69756575     Threads, enqueui
 800aae0:	7420676e 20747365 00003123 00000000     ng test #1......

0800aaf0 <testmtx1>:
 800aaf0:	0800a9f4 08004f71 00000000 08005341     ....qO......AS..

0800ab00 <patternpools>:
 800ab00:	0800a280 00000000 00000000 00000000     ................
 800ab10:	656c6469 00000000 00000000 00000000     idle............
 800ab20:	20414d44 6c696166 00657275 00000000     DMA failure.....

0800ab30 <ep0config>:
 800ab30:	00000000 08002f91 08002eb1 08002a11     ...../.......*..
 800ab40:	00400040 20001754 20001754 00000001     @.@.T.. T.. ....
 800ab50:	20001768 00000000 00000000 00000000     h.. ............

0800ab60 <CSWTCH.32>:
 800ab60:	00000400 00000600 00000000 00000000     ................

0800ab70 <states.8561>:
 800ab70:	0800ae24 0800ae2c 0800ae34 0800ae3c     $...,...4...<...
 800ab80:	0800ae48 0800ae50 0800ae58 0800ae60     H...P...X...`...
 800ab90:	0800ae68 0800ae74 0800ae7c 0800ae84     h...t...|.......
 800aba0:	0800ae90 0800ae98 0800aea0 0800aea8     ................
 800abb0:	67617355 25203a65 000a0d73 74737973     Usage: %s...syst
 800abc0:	00656d69 0d756c25 0000000a 6f666e69     ime.%lu.....info
 800abd0:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 800abe0:	73252020 00000a0d 706d6f43 72656c69       %s....Compiler
 800abf0:	2020203a 73252020 00000a0d 68637241     :     %s....Arch
 800ac00:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 800ac10:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 800ac20:	00000a0d 74726f50 666e4920 20203a6f     ....Port Info:  
 800ac30:	73252020 00000a0d 74616c50 6d726f66       %s....Platform
 800ac40:	2020203a 73252020 00000a0d 72616f42     :     %s....Boar
 800ac50:	20203a64 20202020 73252020 00000a0d     d:        %s....
 800ac60:	6c697542 69742064 203a656d 73252020     Build time:   %s
 800ac70:	73257325 00000a0d 20626546 32203320     %s%s....Feb  3 2
 800ac80:	00353130 00202d20 333a3031 36333a37     015. - .10:37:36
 800ac90:	00000000 6c656873 0000006c 68430a0d     ....shell.....Ch
 800aca0:	4f696269 54522f53 65685320 0a0d6c6c     ibiOS/RT Shell..
 800acb0:	00000000 203e6863 00000000 0000445e     ....ch> ....^D..
 800acc0:	206f6f74 796e616d 67726120 6e656d75     too many argumen
 800acd0:	0a0d7374 00000000 74697865 00000000     ts......exit....
 800ace0:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 800acf0:	6568203a 6520706c 20746978 00000000     : help exit ....
 800ad00:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 800ad10:	6f6c0a0d 74756f67 00000000 6c756e28     ..logout....(nul
 800ad20:	0000296c 730a0a0d 70706f74 0a0d6465     l).....stopped..
 800ad30:	00000000 67617355 77203a65 65746972     ....Usage: write
 800ad40:	00000a0d 67617355 74203a65 0d747365     ....Usage: test.
 800ad50:	0000000a 2074756f 6d20666f 726f6d65     ....out of memor
 800ad60:	000a0d79 67617355 74203a65 61657268     y...Usage: threa
 800ad70:	0a0d7364 00000000 20202020 72646461     ds......    addr
 800ad80:	20202020 63617473 7270206b 72206f69         stack prio r
 800ad90:	20736665 20202020 74617473 000a0d65     efs     state...
 800ada0:	6c383025 30252078 20786c38 756c3425     %08lx %08lx %4lu
 800adb0:	6c342520 39252075 000a0d73 67617355      %4lu %9s...Usag
 800adc0:	6d203a65 0a0d6d65 00000000 65726f63     e: mem......core
 800add0:	65726620 656d2065 79726f6d 25203a20      free memory : %
 800ade0:	79622075 0d736574 0000000a 70616568     u bytes.....heap
 800adf0:	61726620 6e656d67 20207374 25203a20      fragments   : %
 800ae00:	000a0d75 70616568 65726620 6f742065     u...heap free to
 800ae10:	206c6174 25203a20 79622075 0d736574     tal  : %u bytes.
 800ae20:	0000000a 44414552 00000059 52525543     ....READY...CURR
 800ae30:	00544e45 54535457 00545241 50535553     ENT.WTSTART.SUSP
 800ae40:	45444e45 00000044 55455551 00004445     ENDED...QUEUED..
 800ae50:	45535457 0000004d 544d5457 00000058     WTSEM...WTMTX...
 800ae60:	4f435457 0000444e 45454c53 474e4950     WTCOND..SLEEPING
 800ae70:	00000000 58455457 00005449 524f5457     ....WTEXIT..WTOR
 800ae80:	00545645 4e415457 54564544 00000000     EVT.WTANDEVT....
 800ae90:	4d444e53 00514753 4d444e53 00004753     SNDMSGQ.SNDMSG..
 800aea0:	534d5457 00000047 414e4946 0000004c     WTMSG...FINAL...

0800aeb0 <pow10>:
 800aeb0:	0000000a 00000064 000003e8 00002710     ....d........'..
 800aec0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 800aed0:	3b9aca00 00000000 00000000 00000000     ...;............
 800aee0:	34346973 00003233 00000000 00000000     si4432..........

0800aef0 <spicfg>:
 800aef0:	080020d1 40010800 000c0004 00000000     . .....@........
 800af00:	00000920 00000000 00000000 00000000      ...............

0800af10 <_ctype_>:
 800af10:	20202000 20202020 28282020 20282828     .         ((((( 
 800af20:	20202020 20202020 20202020 20202020                     
 800af30:	10108820 10101010 10101010 10101010      ...............
 800af40:	04040410 04040404 10040404 10101010     ................
 800af50:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800af60:	01010101 01010101 01010101 10101010     ................
 800af70:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800af80:	02020202 02020202 02020202 10101010     ................
 800af90:	00000020 00000000 00000000 00000000      ...............
	...
