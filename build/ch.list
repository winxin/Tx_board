
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000140:	2100      	movs	r1, #0
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 8000142:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000144:	4608      	mov	r0, r1
    _stm32_dma_streams[i].channel->CCR = 0;
 8000146:	460e      	mov	r6, r1
 8000148:	4bbc      	ldr	r3, [pc, #752]	; (800043c <__init_array_end+0x2fc>)
 800014a:	f04f 34ff 	mov.w	r4, #4294967295
 800014e:	691d      	ldr	r5, [r3, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8000150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000154:	611c      	str	r4, [r3, #16]
 8000156:	6119      	str	r1, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000158:	68dd      	ldr	r5, [r3, #12]
 800015a:	60dc      	str	r4, [r3, #12]
 800015c:	60d9      	str	r1, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800015e:	69dc      	ldr	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000160:	4db7      	ldr	r5, [pc, #732]	; (8000440 <__init_array_end+0x300>)
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000162:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000166:	61dc      	str	r4, [r3, #28]
  rccEnableBKPInterface(FALSE);
 8000168:	69dc      	ldr	r4, [r3, #28]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800016a:	4fb6      	ldr	r7, [pc, #728]	; (8000444 <__init_array_end+0x304>)
 800016c:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 8000170:	61dc      	str	r4, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000172:	682b      	ldr	r3, [r5, #0]
 8000174:	f8df e340 	ldr.w	lr, [pc, #832]	; 80004b8 <__init_array_end+0x378>
 8000178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800017c:	4cb2      	ldr	r4, [pc, #712]	; (8000448 <__init_array_end+0x308>)
 800017e:	602b      	str	r3, [r5, #0]
 8000180:	b089      	sub	sp, #36	; 0x24
 8000182:	6039      	str	r1, [r7, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000184:	f85e 3002 	ldr.w	r3, [lr, r2]
 8000188:	2100      	movs	r1, #0
 800018a:	601e      	str	r6, [r3, #0]
    dma_isr_redir[i].dma_func = NULL;
 800018c:	f844 6030 	str.w	r6, [r4, r0, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000190:	3001      	adds	r0, #1
 8000192:	2807      	cmp	r0, #7
 8000194:	f102 020c 	add.w	r2, r2, #12
 8000198:	d1f4      	bne.n	8000184 <main+0x44>
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800019a:	f241 080a 	movw	r8, #4106	; 0x100a
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800019e:	f241 0c18 	movw	ip, #4120	; 0x1018
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80001a2:	468e      	mov	lr, r1
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001a4:	4ba9      	ldr	r3, [pc, #676]	; (800044c <__init_array_end+0x30c>)
 80001a6:	f04f 32ff 	mov.w	r2, #4294967295
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001aa:	f8df a290 	ldr.w	sl, [pc, #656]	; 800043c <__init_array_end+0x2fc>
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	f8da 4018 	ldr.w	r4, [sl, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001b4:	4da6      	ldr	r5, [pc, #664]	; (8000450 <__init_array_end+0x310>)
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001b6:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 80001ba:	f8ca 4018 	str.w	r4, [sl, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80001be:	4ea5      	ldr	r6, [pc, #660]	; (8000454 <__init_array_end+0x314>)
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001c0:	f46f 4400 	mvn.w	r4, #32768	; 0x8000
 80001c4:	60ec      	str	r4, [r5, #12]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80001c6:	48a4      	ldr	r0, [pc, #656]	; (8000458 <__init_array_end+0x318>)
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80001c8:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 80004bc <__init_array_end+0x37c>
  GPIOB->ODR = config->PBData.odr;
 80001cc:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 80004c0 <__init_array_end+0x380>
  GPIOB->CRH = config->PBData.crh;
 80001d0:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80004c4 <__init_array_end+0x384>
  GPIOB->CRL = config->PBData.crl;
 80001d4:	4ca1      	ldr	r4, [pc, #644]	; (800045c <__init_array_end+0x31c>)

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80001d6:	606e      	str	r6, [r5, #4]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80001d8:	4ba1      	ldr	r3, [pc, #644]	; (8000460 <__init_array_end+0x320>)
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80001da:	4ea2      	ldr	r6, [pc, #648]	; (8000464 <__init_array_end+0x324>)
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 80001dc:	f8c5 9000 	str.w	r9, [r5]
  GPIOB->ODR = config->PBData.odr;
 80001e0:	f8c0 b00c 	str.w	fp, [r0, #12]
  GPIOB->CRH = config->PBData.crh;
 80001e4:	f8c0 a004 	str.w	sl, [r0, #4]
  GPIOB->CRL = config->PBData.crl;
 80001e8:	6004      	str	r4, [r0, #0]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80001ea:	f04f 3088 	mov.w	r0, #2290649224	; 0x88888888

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80001ee:	4c9e      	ldr	r4, [pc, #632]	; (8000468 <__init_array_end+0x328>)
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80001f0:	60f2      	str	r2, [r6, #12]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001f2:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 80004c8 <__init_array_end+0x388>
  spip->config = NULL;
 80001f6:	6059      	str	r1, [r3, #4]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80001f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80004cc <__init_array_end+0x38c>
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80001fc:	6070      	str	r0, [r6, #4]
#if SPI_USE_WAIT
  spip->thread = NULL;
 80001fe:	6099      	str	r1, [r3, #8]
  GPIOC->CRL = config->PCData.crl;
 8000200:	6030      	str	r0, [r6, #0]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8000202:	4e9a      	ldr	r6, [pc, #616]	; (800046c <__init_array_end+0x32c>)
  GPIOD->ODR = config->PDData.odr;
 8000204:	f8c5 2c0c 	str.w	r2, [r5, #3084]	; 0xc0c
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8000208:	4f99      	ldr	r7, [pc, #612]	; (8000470 <__init_array_end+0x330>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800020a:	6159      	str	r1, [r3, #20]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800020c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 80004d0 <__init_array_end+0x390>
  GPIOD->CRH = config->PDData.crh;
 8000210:	f8c5 0c04 	str.w	r0, [r5, #3076]	; 0xc04

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8000214:	61dc      	str	r4, [r3, #28]
 8000216:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
  GPIOD->CRL = config->PDData.crl;
 800021a:	f8c5 9c00 	str.w	r9, [r5, #3072]	; 0xc00
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800021e:	f8cb 200c 	str.w	r2, [fp, #12]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8000222:	4d94      	ldr	r5, [pc, #592]	; (8000474 <__init_array_end+0x334>)
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  gptp->config = NULL;
 8000224:	6071      	str	r1, [r6, #4]
 8000226:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80004d4 <__init_array_end+0x394>
  GPIOE->CRH = config->PEData.crh;
 800022a:	f8cb 0004 	str.w	r0, [fp, #4]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 800022e:	60f4      	str	r4, [r6, #12]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8000230:	4c91      	ldr	r4, [pc, #580]	; (8000478 <__init_array_end+0x338>)
  GPIOE->CRL = config->PEData.crl;
 8000232:	f8cb 0000 	str.w	r0, [fp]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8000236:	2001      	movs	r0, #1
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8000238:	f8aa 2000 	strh.w	r2, [sl]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800023c:	f103 0b0c 	add.w	fp, r3, #12

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8000240:	f107 0a0c 	add.w	sl, r7, #12
 8000244:	7028      	strb	r0, [r5, #0]
  gptp->config = NULL;
 8000246:	6069      	str	r1, [r5, #4]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8000248:	f8c5 900c 	str.w	r9, [r5, #12]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800024c:	7018      	strb	r0, [r3, #0]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 800024e:	7030      	strb	r0, [r6, #0]
 8000250:	f8c3 b010 	str.w	fp, [r3, #16]
 8000254:	f8c3 b00c 	str.w	fp, [r3, #12]
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8000258:	621f      	str	r7, [r3, #32]
 800025a:	f104 0228 	add.w	r2, r4, #40	; 0x28
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800025e:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
 8000262:	f104 0544 	add.w	r5, r4, #68	; 0x44
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8000266:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800026a:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800026e:	7020      	strb	r0, [r4, #0]
  usbp->config       = NULL;
 8000270:	6061      	str	r1, [r4, #4]
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000272:	f842 ef04 	str.w	lr, [r2, #4]!
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
 8000276:	42aa      	cmp	r2, r5
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
 8000278:	f8c2 e01c 	str.w	lr, [r2, #28]
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800027c:	f04f 0700 	mov.w	r7, #0
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
 8000280:	d1f7      	bne.n	8000272 <main+0x132>

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000282:	f645 5cbf 	movw	ip, #23999	; 0x5dbf
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000286:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800028a:	f64f 01ff 	movw	r1, #63743	; 0xf8ff

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800028e:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 800043c <__init_array_end+0x2fc>
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000292:	4a7a      	ldr	r2, [pc, #488]	; (800047c <__init_array_end+0x33c>)
 8000294:	f8de 601c 	ldr.w	r6, [lr, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000298:	4d79      	ldr	r5, [pc, #484]	; (8000480 <__init_array_end+0x340>)
 800029a:	f046 0601 	orr.w	r6, r6, #1
 800029e:	f8ce 601c 	str.w	r6, [lr, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80002a6:	f04f 0801 	mov.w	r8, #1
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80002aa:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80002ae:	f04f 0980 	mov.w	r9, #128	; 0x80

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80002b2:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80002b6:	62d8      	str	r0, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80002b8:	619f      	str	r7, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80002ba:	635f      	str	r7, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80002bc:	60df      	str	r7, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 80002be:	605f      	str	r7, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80002c0:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80002c4:	f8c3 8000 	str.w	r8, [r3]
 80002c8:	f885 931c 	strb.w	r9, [r5, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80002cc:	f8c5 6180 	str.w	r6, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80002d0:	602e      	str	r6, [r5, #0]
 80002d2:	6097      	str	r7, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d4:	68d5      	ldr	r5, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80002d6:	4b6b      	ldr	r3, [pc, #428]	; (8000484 <__init_array_end+0x344>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80002d8:	4029      	ands	r1, r5
  reg_value  =  (reg_value                                 |
 80002da:	430b      	orrs	r3, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002dc:	4d6a      	ldr	r5, [pc, #424]	; (8000488 <__init_array_end+0x348>)
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002de:	60d3      	str	r3, [r2, #12]
 80002e0:	68eb      	ldr	r3, [r5, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80002e2:	496a      	ldr	r1, [pc, #424]	; (800048c <__init_array_end+0x34c>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e8:	60eb      	str	r3, [r5, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80002ea:	680b      	ldr	r3, [r1, #0]
 80002ec:	4e68      	ldr	r6, [pc, #416]	; (8000490 <__init_array_end+0x350>)
 80002ee:	ea43 0308 	orr.w	r3, r3, r8
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 80002f2:	84b0      	strh	r0, [r6, #36]	; 0x24
    usbp->in_params[i]  = NULL;
    usbp->out_params[i] = NULL;
  }
  usbp->transmitting = 0;
 80002f4:	8127      	strh	r7, [r4, #8]
  usbp->receiving    = 0;
 80002f6:	8167      	strh	r7, [r4, #10]
 80002f8:	6076      	str	r6, [r6, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80002fa:	60b7      	str	r7, [r6, #8]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80002fc:	6176      	str	r6, [r6, #20]
 80002fe:	6136      	str	r6, [r6, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 8000300:	84f7      	strh	r7, [r6, #38]	; 0x26
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000302:	f04f 0e10 	mov.w	lr, #16
 8000306:	600b      	str	r3, [r1, #0]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 8000308:	f106 051c 	add.w	r5, r6, #28
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800030c:	f04f 33ff 	mov.w	r3, #4294967295
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000310:	a802      	add	r0, sp, #8

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000312:	f04f 0a00 	mov.w	sl, #0
 8000316:	f04f 0b00 	mov.w	fp, #0
 800031a:	f04f 0920 	mov.w	r9, #32
 800031e:	f882 e01f 	strb.w	lr, [r2, #31]
 8000322:	6235      	str	r5, [r6, #32]
 8000324:	f882 9022 	strb.w	r9, [r2, #34]	; 0x22
 8000328:	61f5      	str	r5, [r6, #28]
 800032a:	6036      	str	r6, [r6, #0]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 800032c:	6737      	str	r7, [r6, #112]	; 0x70

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800032e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000332:	9302      	str	r3, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
 8000334:	9703      	str	r7, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8000336:	9704      	str	r7, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8000338:	9705      	str	r7, [sp, #20]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800033a:	f008 fc91 	bl	8008c60 <chTMStartMeasurementX.constprop.66>
  chTMStopMeasurementX(&tm);
 800033e:	a802      	add	r0, sp, #8
 8000340:	f002 fc1e 	bl	8002b80 <chTMStopMeasurementX>
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 8000344:	4b53      	ldr	r3, [pc, #332]	; (8000494 <__init_array_end+0x354>)
  ch.tm.offset = tm.last;
 8000346:	9904      	ldr	r1, [sp, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000348:	f8d6 e014 	ldr.w	lr, [r6, #20]
 800034c:	6731      	str	r1, [r6, #112]	; 0x70
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800034e:	4852      	ldr	r0, [pc, #328]	; (8000498 <__init_array_end+0x358>)
 8000350:	f103 0110 	add.w	r1, r3, #16
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000354:	4a51      	ldr	r2, [pc, #324]	; (800049c <__init_array_end+0x35c>)
 8000356:	f106 052c 	add.w	r5, r6, #44	; 0x2c
 800035a:	6159      	str	r1, [r3, #20]
 800035c:	6119      	str	r1, [r3, #16]
 800035e:	f8df b178 	ldr.w	fp, [pc, #376]	; 80004d8 <__init_array_end+0x398>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000362:	2140      	movs	r1, #64	; 0x40
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000364:	f8df a174 	ldr.w	sl, [pc, #372]	; 80004dc <__init_array_end+0x39c>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000368:	f8df c174 	ldr.w	ip, [pc, #372]	; 80004e0 <__init_array_end+0x3a0>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800036c:	f8c6 e040 	str.w	lr, [r6, #64]	; 0x40
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000370:	6371      	str	r1, [r6, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8000372:	66b1      	str	r1, [r6, #104]	; 0x68
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000374:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000378:	f022 0207 	bic.w	r2, r2, #7
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800037c:	f886 7049 	strb.w	r7, [r6, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000380:	6677      	str	r7, [r6, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8000382:	6637      	str	r7, [r6, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8000384:	f886 804a 	strb.w	r8, [r6, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8000388:	6477      	str	r7, [r6, #68]	; 0x44
  REG_INSERT(tp);
 800038a:	63f6      	str	r6, [r6, #60]	; 0x3c
 800038c:	6175      	str	r5, [r6, #20]
 800038e:	619f      	str	r7, [r3, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000390:	f106 0150 	add.w	r1, r6, #80	; 0x50
 8000394:	f8ce 5010 	str.w	r5, [lr, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8000398:	f106 0e54 	add.w	lr, r6, #84	; 0x54
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800039c:	f8ca 0000 	str.w	r0, [sl]
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 80003a0:	609f      	str	r7, [r3, #8]
  default_heap.h_free.h.size = 0;
 80003a2:	60df      	str	r7, [r3, #12]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80003a4:	61b5      	str	r5, [r6, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80003a6:	f886 8048 	strb.w	r8, [r6, #72]	; 0x48
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80003aa:	6531      	str	r1, [r6, #80]	; 0x50
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 80003ac:	f8c3 b000 	str.w	fp, [r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80003b0:	f8c6 e058 	str.w	lr, [r6, #88]	; 0x58
 80003b4:	f8c6 e054 	str.w	lr, [r6, #84]	; 0x54
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80003b8:	f8cc 2000 	str.w	r2, [ip]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80003bc:	f04f 0a02 	mov.w	sl, #2

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003c0:	f387 8811 	msr	BASEPRI, r7
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80003c4:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80003c6:	4a36      	ldr	r2, [pc, #216]	; (80004a0 <__init_array_end+0x360>)
 80003c8:	69b3      	ldr	r3, [r6, #24]
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 80003ca:	4d36      	ldr	r5, [pc, #216]	; (80004a4 <__init_array_end+0x364>)
 80003cc:	619a      	str	r2, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80003ce:	f106 0078 	add.w	r0, r6, #120	; 0x78
 80003d2:	4642      	mov	r2, r8
 80003d4:	9700      	str	r7, [sp, #0]
 80003d6:	21d8      	movs	r1, #216	; 0xd8
 80003d8:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <__init_array_end+0x368>)
 80003da:	f001 fcd9 	bl	8001d90 <chThdCreateStatic>
 80003de:	4629      	mov	r1, r5
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;/* Disable the JTAG but keep SWD in operation */
 80003e0:	4832      	ldr	r0, [pc, #200]	; (80004ac <__init_array_end+0x36c>)
 80003e2:	4a33      	ldr	r2, [pc, #204]	; (80004b0 <__init_array_end+0x370>)
 80003e4:	6843      	ldr	r3, [r0, #4]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80003e6:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 80004e4 <__init_array_end+0x3a4>

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80003ea:	4e32      	ldr	r6, [pc, #200]	; (80004b4 <__init_array_end+0x374>)
 80003ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f0:	6043      	str	r3, [r0, #4]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80003f2:	f44f 7c80 	mov.w	ip, #256	; 0x100
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80003f6:	f505 73aa 	add.w	r3, r5, #340	; 0x154
 80003fa:	f841 2b04 	str.w	r2, [r1], #4
 80003fe:	f105 000c 	add.w	r0, r5, #12
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000402:	f105 0254 	add.w	r2, r5, #84	; 0x54
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000406:	f505 7b15 	add.w	fp, r5, #596	; 0x254
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 800040a:	f885 8008 	strb.w	r8, [r5, #8]
 800040e:	f105 0830 	add.w	r8, r5, #48	; 0x30
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000412:	616f      	str	r7, [r5, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 8000414:	62ed      	str	r5, [r5, #44]	; 0x2c
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 8000416:	652d      	str	r5, [r5, #80]	; 0x50

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8000418:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800041c:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000420:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
  oqp->q_notify = onfy;
 8000424:	64ee      	str	r6, [r5, #76]	; 0x4c
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8000426:	6069      	str	r1, [r5, #4]
 8000428:	6128      	str	r0, [r5, #16]
 800042a:	60e8      	str	r0, [r5, #12]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 800042c:	622a      	str	r2, [r5, #32]
 800042e:	626a      	str	r2, [r5, #36]	; 0x24
 8000430:	61aa      	str	r2, [r5, #24]
  iqp->q_top = bp + size;
 8000432:	61eb      	str	r3, [r5, #28]
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8000434:	646b      	str	r3, [r5, #68]	; 0x44
 8000436:	64ab      	str	r3, [r5, #72]	; 0x48
 8000438:	e056      	b.n	80004e8 <__init_array_end+0x3a8>
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40007000 	.word	0x40007000
 8000444:	2000201c 	.word	0x2000201c
 8000448:	20001e30 	.word	0x20001e30
 800044c:	40020000 	.word	0x40020000
 8000450:	40010800 	.word	0x40010800
 8000454:	288884b8 	.word	0x288884b8
 8000458:	40010c00 	.word	0x40010c00
 800045c:	88228888 	.word	0x88228888
 8000460:	20001fcc 	.word	0x20001fcc
 8000464:	40011000 	.word	0x40011000
 8000468:	40013000 	.word	0x40013000
 800046c:	20001fbc 	.word	0x20001fbc
 8000470:	0800a2ec 	.word	0x0800a2ec
 8000474:	20001784 	.word	0x20001784
 8000478:	2000121c 	.word	0x2000121c
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	e000e100 	.word	0xe000e100
 8000484:	05fa0300 	.word	0x05fa0300
 8000488:	e000edf0 	.word	0xe000edf0
 800048c:	e0001000 	.word	0xe0001000
 8000490:	20001e68 	.word	0x20001e68
 8000494:	200012a8 	.word	0x200012a8
 8000498:	20002027 	.word	0x20002027
 800049c:	20005000 	.word	0x20005000
 80004a0:	0800a350 	.word	0x0800a350
 80004a4:	200012c8 	.word	0x200012c8
 80004a8:	080016c1 	.word	0x080016c1
 80004ac:	40010000 	.word	0x40010000
 80004b0:	0800a280 	.word	0x0800a280
 80004b4:	08004c61 	.word	0x08004c61
 80004b8:	0800a2e0 	.word	0x0800a2e0
 80004bc:	b8b34b88 	.word	0xb8b34b88
 80004c0:	ffffedef 	.word	0xffffedef
 80004c4:	88828838 	.word	0x88828838
 80004c8:	40011800 	.word	0x40011800
 80004cc:	88888844 	.word	0x88888844
 80004d0:	200012a0 	.word	0x200012a0
 80004d4:	40000800 	.word	0x40000800
 80004d8:	08001611 	.word	0x08001611
 80004dc:	20001218 	.word	0x20001218
 80004e0:	20001530 	.word	0x20001530
 80004e4:	08005381 	.word	0x08005381
 80004e8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80004ea:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
 80004ee:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004f2:	f389 8811 	msr	BASEPRI, r9
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 80004f6:	4b53      	ldr	r3, [pc, #332]	; (8000644 <__init_array_end+0x504>)
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
 80004f8:	62e5      	str	r5, [r4, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1] = sdup;
 80004fa:	64a5      	str	r5, [r4, #72]	; 0x48
  usbp->in_params[config->int_in - 1]    = sdup;
 80004fc:	6325      	str	r5, [r4, #48]	; 0x30
  sdup->config = config;
  sdup->state = SDU_READY;
 80004fe:	f885 a008 	strb.w	sl, [r5, #8]
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 8000502:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
 8000506:	f387 8811 	msr	BASEPRI, r7
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800050a:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <__init_array_end+0x508>)
 800050c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000510:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 8000512:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000516:	f001 fe23 	bl	8002160 <chThdSleep>
 800051a:	f389 8811 	msr	BASEPRI, r9
 800051e:	484b      	ldr	r0, [pc, #300]	; (800064c <__init_array_end+0x50c>)
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8000520:	463b      	mov	r3, r7
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 8000522:	4601      	mov	r1, r0
 8000524:	4a4a      	ldr	r2, [pc, #296]	; (8000650 <__init_array_end+0x510>)
 8000526:	eb00 0809 	add.w	r8, r0, r9
 800052a:	6062      	str	r2, [r4, #4]
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 800052c:	f841 3f04 	str.w	r3, [r1, #4]!

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000530:	4541      	cmp	r1, r8
    usbp->epc[i] = NULL;
 8000532:	f04f 0200 	mov.w	r2, #0

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000536:	d1f9      	bne.n	800052c <__init_array_end+0x3ec>
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8000538:	f894 c000 	ldrb.w	ip, [r4]
 800053c:	4b45      	ldr	r3, [pc, #276]	; (8000654 <__init_array_end+0x514>)
 800053e:	f1bc 0f01 	cmp.w	ip, #1
 8000542:	d046      	beq.n	80005d2 <__init_array_end+0x492>
    usbp->epc[i] = NULL;
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8000544:	2302      	movs	r3, #2
 8000546:	7023      	strb	r3, [r4, #0]
 8000548:	2400      	movs	r4, #0
 800054a:	f384 8811 	msr	BASEPRI, r4
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <__init_array_end+0x508>)
 8000550:	4e41      	ldr	r6, [pc, #260]	; (8000658 <__init_array_end+0x518>)
 8000552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4f40      	ldr	r7, [pc, #256]	; (800065c <__init_array_end+0x51c>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800055a:	9400      	str	r4, [sp, #0]
 800055c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000560:	2240      	movs	r2, #64	; 0x40
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <__init_array_end+0x520>)
 8000564:	6036      	str	r6, [r6, #0]
 8000566:	483f      	ldr	r0, [pc, #252]	; (8000664 <__init_array_end+0x524>)
 8000568:	4e3f      	ldr	r6, [pc, #252]	; (8000668 <__init_array_end+0x528>)
 800056a:	f001 fc11 	bl	8001d90 <chThdCreateStatic>
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 800056e:	f04f 0e01 	mov.w	lr, #1
	chBSemObjectInit(&Silabs_busy,FALSE);/*Init it as not taken*/
	chBSemObjectInit(&Silabs_callback,FALSE);/*Init it as not taken*/
	/*
	* Creates the thread. Thread has priority slightly above normal and takes no argument
	*/
	return chThdCreateStatic(waThreadSI, sizeof(waThreadSI), NORMALPRIO+1, SI_Thread, (void*)NULL);
 8000572:	9400      	str	r4, [sp, #0]
 8000574:	483d      	ldr	r0, [pc, #244]	; (800066c <__init_array_end+0x52c>)
 8000576:	f8c6 e008 	str.w	lr, [r6, #8]
 800057a:	6076      	str	r6, [r6, #4]
 800057c:	6036      	str	r6, [r6, #0]
 800057e:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000582:	2241      	movs	r2, #65	; 0x41
 8000584:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <__init_array_end+0x530>)
 8000586:	607f      	str	r7, [r7, #4]
 8000588:	603f      	str	r7, [r7, #0]
 800058a:	f8c7 e008 	str.w	lr, [r7, #8]
 800058e:	f001 fbff 	bl	8001d90 <chThdCreateStatic>
 8000592:	4e38      	ldr	r6, [pc, #224]	; (8000674 <__init_array_end+0x534>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000594:	b144      	cbz	r4, 80005a8 <__init_array_end+0x468>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8000596:	7f23      	ldrb	r3, [r4, #28]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d015      	beq.n	80005c8 <__init_array_end+0x488>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 800059c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a0:	f001 fdde 	bl	8002160 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80005a4:	2c00      	cmp	r4, #0
 80005a6:	d1f6      	bne.n	8000596 <__init_array_end+0x456>
 80005a8:	f8d5 3254 	ldr.w	r3, [r5, #596]	; 0x254
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d1f0      	bne.n	8000596 <__init_array_end+0x456>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 80005b4:	4620      	mov	r0, r4
 80005b6:	9600      	str	r6, [sp, #0]
 80005b8:	f640 01c8 	movw	r1, #2248	; 0x8c8
 80005bc:	2240      	movs	r2, #64	; 0x40
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <__init_array_end+0x538>)
 80005c0:	f002 fa26 	bl	8002a10 <chThdCreateFromHeap>
 80005c4:	4604      	mov	r4, r0
 80005c6:	e7e9      	b.n	800059c <__init_array_end+0x45c>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 80005c8:	4620      	mov	r0, r4
 80005ca:	f001 ffc1 	bl	8002550 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80005ce:	2400      	movs	r4, #0
 80005d0:	e7e4      	b.n	800059c <__init_array_end+0x45c>
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80005d2:	4692      	mov	sl, r2
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005d4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000684 <__init_array_end+0x544>
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80005d8:	4f28      	ldr	r7, [pc, #160]	; (800067c <__init_array_end+0x53c>)
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005da:	f8d9 601c 	ldr.w	r6, [r9, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005de:	4928      	ldr	r1, [pc, #160]	; (8000680 <__init_array_end+0x540>)
 80005e0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 80005e4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
  usbp->address       = 0;
 80005e8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 80005ec:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  usbp->transmitting  = 0;
 80005f0:	811a      	strh	r2, [r3, #8]
  usbp->receiving     = 0;
 80005f2:	815a      	strh	r2, [r3, #10]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005f4:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 80005f8:	f8c9 601c 	str.w	r6, [r9, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005fc:	f04f 0bd0 	mov.w	fp, #208	; 0xd0
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8000600:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000604:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000608:	f04f 09e0 	mov.w	r9, #224	; 0xe0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 800060c:	f04f 0c02 	mov.w	ip, #2
 8000610:	f881 b313 	strb.w	fp, [r1, #787]	; 0x313
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000614:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000618:	f8c1 e000 	str.w	lr, [r1]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800061c:	f881 9314 	strb.w	r9, [r1, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000620:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000624:	600e      	str	r6, [r1, #0]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8000626:	643a      	str	r2, [r7, #64]	; 0x40
 8000628:	f883 c000 	strb.w	ip, [r3]
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 800062c:	f840 af04 	str.w	sl, [r0, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000630:	4540      	cmp	r0, r8
    usbp->epc[i] = NULL;
 8000632:	f04f 0300 	mov.w	r3, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 8000636:	d1f9      	bne.n	800062c <__init_array_end+0x4ec>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <__init_array_end+0x514>)
  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800063a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800063e:	f003 ff5f 	bl	8004500 <usb_lld_reset>
 8000642:	e77f      	b.n	8000544 <__init_array_end+0x404>
 8000644:	0800a620 	.word	0x0800a620
 8000648:	40010c00 	.word	0x40010c00
 800064c:	20001224 	.word	0x20001224
 8000650:	0800a340 	.word	0x0800a340
 8000654:	2000121c 	.word	0x2000121c
 8000658:	20001534 	.word	0x20001534
 800065c:	20001794 	.word	0x20001794
 8000660:	08006051 	.word	0x08006051
 8000664:	20001560 	.word	0x20001560
 8000668:	200017b4 	.word	0x200017b4
 800066c:	20000d50 	.word	0x20000d50
 8000670:	08008411 	.word	0x08008411
 8000674:	0800a710 	.word	0x0800a710
 8000678:	08004051 	.word	0x08004051
 800067c:	40005c00 	.word	0x40005c00
 8000680:	e000e100 	.word	0xe000e100
 8000684:	40021000 	.word	0x40021000
 8000688:	f3af 8000 	nop.w
 800068c:	f3af 8000 	nop.w

08000690 <_port_switch>:
 8000690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000694:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000698:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006a0 <_port_thread_start>:
 80006a0:	2300      	movs	r3, #0
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	4628      	mov	r0, r5
 80006a8:	47a0      	blx	r4
 80006aa:	f002 fa61 	bl	8002b70 <chThdExit>

080006ae <_port_switch_from_isr>:
 80006ae:	f001 fabf 	bl	8001c30 <chSchDoReschedule>

080006b2 <_port_exit_from_isr>:
 80006b2:	df00      	svc	0
 80006b4:	e7fe      	b.n	80006b4 <_port_exit_from_isr+0x2>
	...

080006c0 <__aeabi_drsub>:
 80006c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	e002      	b.n	80006cc <__adddf3>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dsub>:
 80006c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080006cc <__adddf3>:
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006d6:	ea94 0f05 	teq	r4, r5
 80006da:	bf08      	it	eq
 80006dc:	ea90 0f02 	teqeq	r0, r2
 80006e0:	bf1f      	itttt	ne
 80006e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f2:	f000 80e2 	beq.w	80008ba <__adddf3+0x1ee>
 80006f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80006fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80006fe:	bfb8      	it	lt
 8000700:	426d      	neglt	r5, r5
 8000702:	dd0c      	ble.n	800071e <__adddf3+0x52>
 8000704:	442c      	add	r4, r5
 8000706:	ea80 0202 	eor.w	r2, r0, r2
 800070a:	ea81 0303 	eor.w	r3, r1, r3
 800070e:	ea82 0000 	eor.w	r0, r2, r0
 8000712:	ea83 0101 	eor.w	r1, r3, r1
 8000716:	ea80 0202 	eor.w	r2, r0, r2
 800071a:	ea81 0303 	eor.w	r3, r1, r3
 800071e:	2d36      	cmp	r5, #54	; 0x36
 8000720:	bf88      	it	hi
 8000722:	bd30      	pophi	{r4, r5, pc}
 8000724:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000728:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800072c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000730:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000734:	d002      	beq.n	800073c <__adddf3+0x70>
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000740:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000744:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000748:	d002      	beq.n	8000750 <__adddf3+0x84>
 800074a:	4252      	negs	r2, r2
 800074c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000750:	ea94 0f05 	teq	r4, r5
 8000754:	f000 80a7 	beq.w	80008a6 <__adddf3+0x1da>
 8000758:	f1a4 0401 	sub.w	r4, r4, #1
 800075c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000760:	db0d      	blt.n	800077e <__adddf3+0xb2>
 8000762:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000766:	fa22 f205 	lsr.w	r2, r2, r5
 800076a:	1880      	adds	r0, r0, r2
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	fa03 f20e 	lsl.w	r2, r3, lr
 8000774:	1880      	adds	r0, r0, r2
 8000776:	fa43 f305 	asr.w	r3, r3, r5
 800077a:	4159      	adcs	r1, r3
 800077c:	e00e      	b.n	800079c <__adddf3+0xd0>
 800077e:	f1a5 0520 	sub.w	r5, r5, #32
 8000782:	f10e 0e20 	add.w	lr, lr, #32
 8000786:	2a01      	cmp	r2, #1
 8000788:	fa03 fc0e 	lsl.w	ip, r3, lr
 800078c:	bf28      	it	cs
 800078e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000792:	fa43 f305 	asr.w	r3, r3, r5
 8000796:	18c0      	adds	r0, r0, r3
 8000798:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800079c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a0:	d507      	bpl.n	80007b2 <__adddf3+0xe6>
 80007a2:	f04f 0e00 	mov.w	lr, #0
 80007a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80007aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80007ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80007b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80007b6:	d31b      	bcc.n	80007f0 <__adddf3+0x124>
 80007b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80007bc:	d30c      	bcc.n	80007d8 <__adddf3+0x10c>
 80007be:	0849      	lsrs	r1, r1, #1
 80007c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80007c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007c8:	f104 0401 	add.w	r4, r4, #1
 80007cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80007d4:	f080 809a 	bcs.w	800090c <__adddf3+0x240>
 80007d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007e2:	f150 0000 	adcs.w	r0, r0, #0
 80007e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ea:	ea41 0105 	orr.w	r1, r1, r5
 80007ee:	bd30      	pop	{r4, r5, pc}
 80007f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80007f4:	4140      	adcs	r0, r0
 80007f6:	eb41 0101 	adc.w	r1, r1, r1
 80007fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000802:	d1e9      	bne.n	80007d8 <__adddf3+0x10c>
 8000804:	f091 0f00 	teq	r1, #0
 8000808:	bf04      	itt	eq
 800080a:	4601      	moveq	r1, r0
 800080c:	2000      	moveq	r0, #0
 800080e:	fab1 f381 	clz	r3, r1
 8000812:	bf08      	it	eq
 8000814:	3320      	addeq	r3, #32
 8000816:	f1a3 030b 	sub.w	r3, r3, #11
 800081a:	f1b3 0220 	subs.w	r2, r3, #32
 800081e:	da0c      	bge.n	800083a <__adddf3+0x16e>
 8000820:	320c      	adds	r2, #12
 8000822:	dd08      	ble.n	8000836 <__adddf3+0x16a>
 8000824:	f102 0c14 	add.w	ip, r2, #20
 8000828:	f1c2 020c 	rsb	r2, r2, #12
 800082c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000830:	fa21 f102 	lsr.w	r1, r1, r2
 8000834:	e00c      	b.n	8000850 <__adddf3+0x184>
 8000836:	f102 0214 	add.w	r2, r2, #20
 800083a:	bfd8      	it	le
 800083c:	f1c2 0c20 	rsble	ip, r2, #32
 8000840:	fa01 f102 	lsl.w	r1, r1, r2
 8000844:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000848:	bfdc      	itt	le
 800084a:	ea41 010c 	orrle.w	r1, r1, ip
 800084e:	4090      	lslle	r0, r2
 8000850:	1ae4      	subs	r4, r4, r3
 8000852:	bfa2      	ittt	ge
 8000854:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000858:	4329      	orrge	r1, r5
 800085a:	bd30      	popge	{r4, r5, pc}
 800085c:	ea6f 0404 	mvn.w	r4, r4
 8000860:	3c1f      	subs	r4, #31
 8000862:	da1c      	bge.n	800089e <__adddf3+0x1d2>
 8000864:	340c      	adds	r4, #12
 8000866:	dc0e      	bgt.n	8000886 <__adddf3+0x1ba>
 8000868:	f104 0414 	add.w	r4, r4, #20
 800086c:	f1c4 0220 	rsb	r2, r4, #32
 8000870:	fa20 f004 	lsr.w	r0, r0, r4
 8000874:	fa01 f302 	lsl.w	r3, r1, r2
 8000878:	ea40 0003 	orr.w	r0, r0, r3
 800087c:	fa21 f304 	lsr.w	r3, r1, r4
 8000880:	ea45 0103 	orr.w	r1, r5, r3
 8000884:	bd30      	pop	{r4, r5, pc}
 8000886:	f1c4 040c 	rsb	r4, r4, #12
 800088a:	f1c4 0220 	rsb	r2, r4, #32
 800088e:	fa20 f002 	lsr.w	r0, r0, r2
 8000892:	fa01 f304 	lsl.w	r3, r1, r4
 8000896:	ea40 0003 	orr.w	r0, r0, r3
 800089a:	4629      	mov	r1, r5
 800089c:	bd30      	pop	{r4, r5, pc}
 800089e:	fa21 f004 	lsr.w	r0, r1, r4
 80008a2:	4629      	mov	r1, r5
 80008a4:	bd30      	pop	{r4, r5, pc}
 80008a6:	f094 0f00 	teq	r4, #0
 80008aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80008ae:	bf06      	itte	eq
 80008b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80008b4:	3401      	addeq	r4, #1
 80008b6:	3d01      	subne	r5, #1
 80008b8:	e74e      	b.n	8000758 <__adddf3+0x8c>
 80008ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008be:	bf18      	it	ne
 80008c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008c4:	d029      	beq.n	800091a <__adddf3+0x24e>
 80008c6:	ea94 0f05 	teq	r4, r5
 80008ca:	bf08      	it	eq
 80008cc:	ea90 0f02 	teqeq	r0, r2
 80008d0:	d005      	beq.n	80008de <__adddf3+0x212>
 80008d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80008d6:	bf04      	itt	eq
 80008d8:	4619      	moveq	r1, r3
 80008da:	4610      	moveq	r0, r2
 80008dc:	bd30      	pop	{r4, r5, pc}
 80008de:	ea91 0f03 	teq	r1, r3
 80008e2:	bf1e      	ittt	ne
 80008e4:	2100      	movne	r1, #0
 80008e6:	2000      	movne	r0, #0
 80008e8:	bd30      	popne	{r4, r5, pc}
 80008ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008ee:	d105      	bne.n	80008fc <__adddf3+0x230>
 80008f0:	0040      	lsls	r0, r0, #1
 80008f2:	4149      	adcs	r1, r1
 80008f4:	bf28      	it	cs
 80008f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80008fa:	bd30      	pop	{r4, r5, pc}
 80008fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000900:	bf3c      	itt	cc
 8000902:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000906:	bd30      	popcc	{r4, r5, pc}
 8000908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800090c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000910:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800091e:	bf1a      	itte	ne
 8000920:	4619      	movne	r1, r3
 8000922:	4610      	movne	r0, r2
 8000924:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000928:	bf1c      	itt	ne
 800092a:	460b      	movne	r3, r1
 800092c:	4602      	movne	r2, r0
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	bf06      	itte	eq
 8000934:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000938:	ea91 0f03 	teqeq	r1, r3
 800093c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000940:	bd30      	pop	{r4, r5, pc}
 8000942:	bf00      	nop

08000944 <__aeabi_ui2d>:
 8000944:	f090 0f00 	teq	r0, #0
 8000948:	bf04      	itt	eq
 800094a:	2100      	moveq	r1, #0
 800094c:	4770      	bxeq	lr
 800094e:	b530      	push	{r4, r5, lr}
 8000950:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000954:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000958:	f04f 0500 	mov.w	r5, #0
 800095c:	f04f 0100 	mov.w	r1, #0
 8000960:	e750      	b.n	8000804 <__adddf3+0x138>
 8000962:	bf00      	nop

08000964 <__aeabi_i2d>:
 8000964:	f090 0f00 	teq	r0, #0
 8000968:	bf04      	itt	eq
 800096a:	2100      	moveq	r1, #0
 800096c:	4770      	bxeq	lr
 800096e:	b530      	push	{r4, r5, lr}
 8000970:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000974:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000978:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800097c:	bf48      	it	mi
 800097e:	4240      	negmi	r0, r0
 8000980:	f04f 0100 	mov.w	r1, #0
 8000984:	e73e      	b.n	8000804 <__adddf3+0x138>
 8000986:	bf00      	nop

08000988 <__aeabi_f2d>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800098e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000992:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000996:	bf1f      	itttt	ne
 8000998:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800099c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80009a4:	4770      	bxne	lr
 80009a6:	f092 0f00 	teq	r2, #0
 80009aa:	bf14      	ite	ne
 80009ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80009b0:	4770      	bxeq	lr
 80009b2:	b530      	push	{r4, r5, lr}
 80009b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80009b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80009bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009c0:	e720      	b.n	8000804 <__adddf3+0x138>
 80009c2:	bf00      	nop

080009c4 <__aeabi_ul2d>:
 80009c4:	ea50 0201 	orrs.w	r2, r0, r1
 80009c8:	bf08      	it	eq
 80009ca:	4770      	bxeq	lr
 80009cc:	b530      	push	{r4, r5, lr}
 80009ce:	f04f 0500 	mov.w	r5, #0
 80009d2:	e00a      	b.n	80009ea <__aeabi_l2d+0x16>

080009d4 <__aeabi_l2d>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	b530      	push	{r4, r5, lr}
 80009de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009e2:	d502      	bpl.n	80009ea <__aeabi_l2d+0x16>
 80009e4:	4240      	negs	r0, r0
 80009e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80009f6:	f43f aedc 	beq.w	80007b2 <__adddf3+0xe6>
 80009fa:	f04f 0203 	mov.w	r2, #3
 80009fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a02:	bf18      	it	ne
 8000a04:	3203      	addne	r2, #3
 8000a06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a0a:	bf18      	it	ne
 8000a0c:	3203      	addne	r2, #3
 8000a0e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a22:	ea40 000e 	orr.w	r0, r0, lr
 8000a26:	fa21 f102 	lsr.w	r1, r1, r2
 8000a2a:	4414      	add	r4, r2
 8000a2c:	e6c1      	b.n	80007b2 <__adddf3+0xe6>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dmul>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a3e:	bf1d      	ittte	ne
 8000a40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a44:	ea94 0f0c 	teqne	r4, ip
 8000a48:	ea95 0f0c 	teqne	r5, ip
 8000a4c:	f000 f8de 	bleq	8000c0c <__aeabi_dmul+0x1dc>
 8000a50:	442c      	add	r4, r5
 8000a52:	ea81 0603 	eor.w	r6, r1, r3
 8000a56:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a5a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a5e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a62:	bf18      	it	ne
 8000a64:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a70:	d038      	beq.n	8000ae4 <__aeabi_dmul+0xb4>
 8000a72:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a76:	f04f 0500 	mov.w	r5, #0
 8000a7a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a7e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000a82:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a86:	f04f 0600 	mov.w	r6, #0
 8000a8a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a8e:	f09c 0f00 	teq	ip, #0
 8000a92:	bf18      	it	ne
 8000a94:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a98:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a9c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000aa0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000aa4:	d204      	bcs.n	8000ab0 <__aeabi_dmul+0x80>
 8000aa6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000aaa:	416d      	adcs	r5, r5
 8000aac:	eb46 0606 	adc.w	r6, r6, r6
 8000ab0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000ab4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000ab8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000abc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000ac0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ac4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ac8:	bf88      	it	hi
 8000aca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ace:	d81e      	bhi.n	8000b0e <__aeabi_dmul+0xde>
 8000ad0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ada:	f150 0000 	adcs.w	r0, r0, #0
 8000ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ae8:	ea46 0101 	orr.w	r1, r6, r1
 8000aec:	ea40 0002 	orr.w	r0, r0, r2
 8000af0:	ea81 0103 	eor.w	r1, r1, r3
 8000af4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000af8:	bfc2      	ittt	gt
 8000afa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000afe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b02:	bd70      	popgt	{r4, r5, r6, pc}
 8000b04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b08:	f04f 0e00 	mov.w	lr, #0
 8000b0c:	3c01      	subs	r4, #1
 8000b0e:	f300 80ab 	bgt.w	8000c68 <__aeabi_dmul+0x238>
 8000b12:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b16:	bfde      	ittt	le
 8000b18:	2000      	movle	r0, #0
 8000b1a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000b1e:	bd70      	pople	{r4, r5, r6, pc}
 8000b20:	f1c4 0400 	rsb	r4, r4, #0
 8000b24:	3c20      	subs	r4, #32
 8000b26:	da35      	bge.n	8000b94 <__aeabi_dmul+0x164>
 8000b28:	340c      	adds	r4, #12
 8000b2a:	dc1b      	bgt.n	8000b64 <__aeabi_dmul+0x134>
 8000b2c:	f104 0414 	add.w	r4, r4, #20
 8000b30:	f1c4 0520 	rsb	r5, r4, #32
 8000b34:	fa00 f305 	lsl.w	r3, r0, r5
 8000b38:	fa20 f004 	lsr.w	r0, r0, r4
 8000b3c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b40:	ea40 0002 	orr.w	r0, r0, r2
 8000b44:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000b48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b50:	fa21 f604 	lsr.w	r6, r1, r4
 8000b54:	eb42 0106 	adc.w	r1, r2, r6
 8000b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b5c:	bf08      	it	eq
 8000b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b62:	bd70      	pop	{r4, r5, r6, pc}
 8000b64:	f1c4 040c 	rsb	r4, r4, #12
 8000b68:	f1c4 0520 	rsb	r5, r4, #32
 8000b6c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b70:	fa20 f005 	lsr.w	r0, r0, r5
 8000b74:	fa01 f204 	lsl.w	r2, r1, r4
 8000b78:	ea40 0002 	orr.w	r0, r0, r2
 8000b7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b84:	f141 0100 	adc.w	r1, r1, #0
 8000b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b8c:	bf08      	it	eq
 8000b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f1c4 0520 	rsb	r5, r4, #32
 8000b98:	fa00 f205 	lsl.w	r2, r0, r5
 8000b9c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ba0:	fa20 f304 	lsr.w	r3, r0, r4
 8000ba4:	fa01 f205 	lsl.w	r2, r1, r5
 8000ba8:	ea43 0302 	orr.w	r3, r3, r2
 8000bac:	fa21 f004 	lsr.w	r0, r1, r4
 8000bb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000bb4:	fa21 f204 	lsr.w	r2, r1, r4
 8000bb8:	ea20 0002 	bic.w	r0, r0, r2
 8000bbc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bc4:	bf08      	it	eq
 8000bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f094 0f00 	teq	r4, #0
 8000bd0:	d10f      	bne.n	8000bf2 <__aeabi_dmul+0x1c2>
 8000bd2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000bd6:	0040      	lsls	r0, r0, #1
 8000bd8:	eb41 0101 	adc.w	r1, r1, r1
 8000bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be0:	bf08      	it	eq
 8000be2:	3c01      	subeq	r4, #1
 8000be4:	d0f7      	beq.n	8000bd6 <__aeabi_dmul+0x1a6>
 8000be6:	ea41 0106 	orr.w	r1, r1, r6
 8000bea:	f095 0f00 	teq	r5, #0
 8000bee:	bf18      	it	ne
 8000bf0:	4770      	bxne	lr
 8000bf2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000bf6:	0052      	lsls	r2, r2, #1
 8000bf8:	eb43 0303 	adc.w	r3, r3, r3
 8000bfc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c00:	bf08      	it	eq
 8000c02:	3d01      	subeq	r5, #1
 8000c04:	d0f7      	beq.n	8000bf6 <__aeabi_dmul+0x1c6>
 8000c06:	ea43 0306 	orr.w	r3, r3, r6
 8000c0a:	4770      	bx	lr
 8000c0c:	ea94 0f0c 	teq	r4, ip
 8000c10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c14:	bf18      	it	ne
 8000c16:	ea95 0f0c 	teqne	r5, ip
 8000c1a:	d00c      	beq.n	8000c36 <__aeabi_dmul+0x206>
 8000c1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c20:	bf18      	it	ne
 8000c22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c26:	d1d1      	bne.n	8000bcc <__aeabi_dmul+0x19c>
 8000c28:	ea81 0103 	eor.w	r1, r1, r3
 8000c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
 8000c36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c3a:	bf06      	itte	eq
 8000c3c:	4610      	moveq	r0, r2
 8000c3e:	4619      	moveq	r1, r3
 8000c40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c44:	d019      	beq.n	8000c7a <__aeabi_dmul+0x24a>
 8000c46:	ea94 0f0c 	teq	r4, ip
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dmul+0x222>
 8000c4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c50:	d113      	bne.n	8000c7a <__aeabi_dmul+0x24a>
 8000c52:	ea95 0f0c 	teq	r5, ip
 8000c56:	d105      	bne.n	8000c64 <__aeabi_dmul+0x234>
 8000c58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c5c:	bf1c      	itt	ne
 8000c5e:	4610      	movne	r0, r2
 8000c60:	4619      	movne	r1, r3
 8000c62:	d10a      	bne.n	8000c7a <__aeabi_dmul+0x24a>
 8000c64:	ea81 0103 	eor.w	r1, r1, r3
 8000c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c74:	f04f 0000 	mov.w	r0, #0
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
 8000c7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000c82:	bd70      	pop	{r4, r5, r6, pc}

08000c84 <__aeabi_ddiv>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c92:	bf1d      	ittte	ne
 8000c94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c98:	ea94 0f0c 	teqne	r4, ip
 8000c9c:	ea95 0f0c 	teqne	r5, ip
 8000ca0:	f000 f8a7 	bleq	8000df2 <__aeabi_ddiv+0x16e>
 8000ca4:	eba4 0405 	sub.w	r4, r4, r5
 8000ca8:	ea81 0e03 	eor.w	lr, r1, r3
 8000cac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000cb4:	f000 8088 	beq.w	8000dc8 <__aeabi_ddiv+0x144>
 8000cb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000cbc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000cc0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000cc4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000cc8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ccc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000cd0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000cd4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000cd8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000cdc:	429d      	cmp	r5, r3
 8000cde:	bf08      	it	eq
 8000ce0:	4296      	cmpeq	r6, r2
 8000ce2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ce6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000cea:	d202      	bcs.n	8000cf2 <__aeabi_ddiv+0x6e>
 8000cec:	085b      	lsrs	r3, r3, #1
 8000cee:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cf2:	1ab6      	subs	r6, r6, r2
 8000cf4:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000d06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d0e:	bf22      	ittt	cs
 8000d10:	1ab6      	subcs	r6, r6, r2
 8000d12:	4675      	movcs	r5, lr
 8000d14:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d18:	085b      	lsrs	r3, r3, #1
 8000d1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d26:	bf22      	ittt	cs
 8000d28:	1ab6      	subcs	r6, r6, r2
 8000d2a:	4675      	movcs	r5, lr
 8000d2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d3e:	bf22      	ittt	cs
 8000d40:	1ab6      	subcs	r6, r6, r2
 8000d42:	4675      	movcs	r5, lr
 8000d44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d48:	085b      	lsrs	r3, r3, #1
 8000d4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d56:	bf22      	ittt	cs
 8000d58:	1ab6      	subcs	r6, r6, r2
 8000d5a:	4675      	movcs	r5, lr
 8000d5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d60:	ea55 0e06 	orrs.w	lr, r5, r6
 8000d64:	d018      	beq.n	8000d98 <__aeabi_ddiv+0x114>
 8000d66:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000d6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000d6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000d72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000d7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000d7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000d82:	d1c0      	bne.n	8000d06 <__aeabi_ddiv+0x82>
 8000d84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d88:	d10b      	bne.n	8000da2 <__aeabi_ddiv+0x11e>
 8000d8a:	ea41 0100 	orr.w	r1, r1, r0
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000d96:	e7b6      	b.n	8000d06 <__aeabi_ddiv+0x82>
 8000d98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d9c:	bf04      	itt	eq
 8000d9e:	4301      	orreq	r1, r0
 8000da0:	2000      	moveq	r0, #0
 8000da2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000da6:	bf88      	it	hi
 8000da8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000dac:	f63f aeaf 	bhi.w	8000b0e <__aeabi_dmul+0xde>
 8000db0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000db4:	bf04      	itt	eq
 8000db6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000dba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000dbe:	f150 0000 	adcs.w	r0, r0, #0
 8000dc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000dc6:	bd70      	pop	{r4, r5, r6, pc}
 8000dc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000dcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000dd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000dda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000dde:	bd70      	popgt	{r4, r5, r6, pc}
 8000de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000de4:	f04f 0e00 	mov.w	lr, #0
 8000de8:	3c01      	subs	r4, #1
 8000dea:	e690      	b.n	8000b0e <__aeabi_dmul+0xde>
 8000dec:	ea45 0e06 	orr.w	lr, r5, r6
 8000df0:	e68d      	b.n	8000b0e <__aeabi_dmul+0xde>
 8000df2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000df6:	ea94 0f0c 	teq	r4, ip
 8000dfa:	bf08      	it	eq
 8000dfc:	ea95 0f0c 	teqeq	r5, ip
 8000e00:	f43f af3b 	beq.w	8000c7a <__aeabi_dmul+0x24a>
 8000e04:	ea94 0f0c 	teq	r4, ip
 8000e08:	d10a      	bne.n	8000e20 <__aeabi_ddiv+0x19c>
 8000e0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e0e:	f47f af34 	bne.w	8000c7a <__aeabi_dmul+0x24a>
 8000e12:	ea95 0f0c 	teq	r5, ip
 8000e16:	f47f af25 	bne.w	8000c64 <__aeabi_dmul+0x234>
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	e72c      	b.n	8000c7a <__aeabi_dmul+0x24a>
 8000e20:	ea95 0f0c 	teq	r5, ip
 8000e24:	d106      	bne.n	8000e34 <__aeabi_ddiv+0x1b0>
 8000e26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e2a:	f43f aefd 	beq.w	8000c28 <__aeabi_dmul+0x1f8>
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	e722      	b.n	8000c7a <__aeabi_dmul+0x24a>
 8000e34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e38:	bf18      	it	ne
 8000e3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e3e:	f47f aec5 	bne.w	8000bcc <__aeabi_dmul+0x19c>
 8000e42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000e46:	f47f af0d 	bne.w	8000c64 <__aeabi_dmul+0x234>
 8000e4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000e4e:	f47f aeeb 	bne.w	8000c28 <__aeabi_dmul+0x1f8>
 8000e52:	e712      	b.n	8000c7a <__aeabi_dmul+0x24a>
	...

08000e60 <__aeabi_d2iz>:
 8000e60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e68:	d215      	bcs.n	8000e96 <__aeabi_d2iz+0x36>
 8000e6a:	d511      	bpl.n	8000e90 <__aeabi_d2iz+0x30>
 8000e6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e74:	d912      	bls.n	8000e9c <__aeabi_d2iz+0x3c>
 8000e76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e86:	fa23 f002 	lsr.w	r0, r3, r2
 8000e8a:	bf18      	it	ne
 8000e8c:	4240      	negne	r0, r0
 8000e8e:	4770      	bx	lr
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	4770      	bx	lr
 8000e96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e9a:	d105      	bne.n	8000ea8 <__aeabi_d2iz+0x48>
 8000e9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ea0:	bf08      	it	eq
 8000ea2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ea6:	4770      	bx	lr
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__aeabi_d2uiz>:
 8000eb0:	004a      	lsls	r2, r1, #1
 8000eb2:	d211      	bcs.n	8000ed8 <__aeabi_d2uiz+0x28>
 8000eb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000eb8:	d211      	bcs.n	8000ede <__aeabi_d2uiz+0x2e>
 8000eba:	d50d      	bpl.n	8000ed8 <__aeabi_d2uiz+0x28>
 8000ebc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ec0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ec4:	d40e      	bmi.n	8000ee4 <__aeabi_d2uiz+0x34>
 8000ec6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ece:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ed2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ed6:	4770      	bx	lr
 8000ed8:	f04f 0000 	mov.w	r0, #0
 8000edc:	4770      	bx	lr
 8000ede:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ee2:	d102      	bne.n	8000eea <__aeabi_d2uiz+0x3a>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	4770      	bx	lr
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_d2f>:
 8000ef0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ef4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ef8:	bf24      	itt	cs
 8000efa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000efe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_d2f+0x30>
 8000f04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000f0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000f10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f18:	bf08      	it	eq
 8000f1a:	f020 0001 	biceq.w	r0, r0, #1
 8000f1e:	4770      	bx	lr
 8000f20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f24:	d121      	bne.n	8000f6a <__aeabi_d2f+0x7a>
 8000f26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f2a:	bfbc      	itt	lt
 8000f2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f30:	4770      	bxlt	lr
 8000f32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f3a:	f1c2 0218 	rsb	r2, r2, #24
 8000f3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000f42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f46:	fa20 f002 	lsr.w	r0, r0, r2
 8000f4a:	bf18      	it	ne
 8000f4c:	f040 0001 	orrne.w	r0, r0, #1
 8000f50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f5c:	ea40 000c 	orr.w	r0, r0, ip
 8000f60:	fa23 f302 	lsr.w	r3, r3, r2
 8000f64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f68:	e7cc      	b.n	8000f04 <__aeabi_d2f+0x14>
 8000f6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f6e:	d107      	bne.n	8000f80 <__aeabi_d2f+0x90>
 8000f70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f74:	bf1e      	ittt	ne
 8000f76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f7e:	4770      	bxne	lr
 8000f80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_frsub>:
 8000f90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	e002      	b.n	8000f9c <__addsf3>
 8000f96:	bf00      	nop

08000f98 <__aeabi_fsub>:
 8000f98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000f9c <__addsf3>:
 8000f9c:	0042      	lsls	r2, r0, #1
 8000f9e:	bf1f      	itttt	ne
 8000fa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000fa4:	ea92 0f03 	teqne	r2, r3
 8000fa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000fac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fb0:	d06a      	beq.n	8001088 <__addsf3+0xec>
 8000fb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000fb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000fba:	bfc1      	itttt	gt
 8000fbc:	18d2      	addgt	r2, r2, r3
 8000fbe:	4041      	eorgt	r1, r0
 8000fc0:	4048      	eorgt	r0, r1
 8000fc2:	4041      	eorgt	r1, r0
 8000fc4:	bfb8      	it	lt
 8000fc6:	425b      	neglt	r3, r3
 8000fc8:	2b19      	cmp	r3, #25
 8000fca:	bf88      	it	hi
 8000fcc:	4770      	bxhi	lr
 8000fce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000fda:	bf18      	it	ne
 8000fdc:	4240      	negne	r0, r0
 8000fde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000fe2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000fe6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000fea:	bf18      	it	ne
 8000fec:	4249      	negne	r1, r1
 8000fee:	ea92 0f03 	teq	r2, r3
 8000ff2:	d03f      	beq.n	8001074 <__addsf3+0xd8>
 8000ff4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ff8:	fa41 fc03 	asr.w	ip, r1, r3
 8000ffc:	eb10 000c 	adds.w	r0, r0, ip
 8001000:	f1c3 0320 	rsb	r3, r3, #32
 8001004:	fa01 f103 	lsl.w	r1, r1, r3
 8001008:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800100c:	d502      	bpl.n	8001014 <__addsf3+0x78>
 800100e:	4249      	negs	r1, r1
 8001010:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8001014:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001018:	d313      	bcc.n	8001042 <__addsf3+0xa6>
 800101a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800101e:	d306      	bcc.n	800102e <__addsf3+0x92>
 8001020:	0840      	lsrs	r0, r0, #1
 8001022:	ea4f 0131 	mov.w	r1, r1, rrx
 8001026:	f102 0201 	add.w	r2, r2, #1
 800102a:	2afe      	cmp	r2, #254	; 0xfe
 800102c:	d251      	bcs.n	80010d2 <__addsf3+0x136>
 800102e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8001032:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001036:	bf08      	it	eq
 8001038:	f020 0001 	biceq.w	r0, r0, #1
 800103c:	ea40 0003 	orr.w	r0, r0, r3
 8001040:	4770      	bx	lr
 8001042:	0049      	lsls	r1, r1, #1
 8001044:	eb40 0000 	adc.w	r0, r0, r0
 8001048:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800104c:	f1a2 0201 	sub.w	r2, r2, #1
 8001050:	d1ed      	bne.n	800102e <__addsf3+0x92>
 8001052:	fab0 fc80 	clz	ip, r0
 8001056:	f1ac 0c08 	sub.w	ip, ip, #8
 800105a:	ebb2 020c 	subs.w	r2, r2, ip
 800105e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001062:	bfaa      	itet	ge
 8001064:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001068:	4252      	neglt	r2, r2
 800106a:	4318      	orrge	r0, r3
 800106c:	bfbc      	itt	lt
 800106e:	40d0      	lsrlt	r0, r2
 8001070:	4318      	orrlt	r0, r3
 8001072:	4770      	bx	lr
 8001074:	f092 0f00 	teq	r2, #0
 8001078:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800107c:	bf06      	itte	eq
 800107e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8001082:	3201      	addeq	r2, #1
 8001084:	3b01      	subne	r3, #1
 8001086:	e7b5      	b.n	8000ff4 <__addsf3+0x58>
 8001088:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800108c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001090:	bf18      	it	ne
 8001092:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001096:	d021      	beq.n	80010dc <__addsf3+0x140>
 8001098:	ea92 0f03 	teq	r2, r3
 800109c:	d004      	beq.n	80010a8 <__addsf3+0x10c>
 800109e:	f092 0f00 	teq	r2, #0
 80010a2:	bf08      	it	eq
 80010a4:	4608      	moveq	r0, r1
 80010a6:	4770      	bx	lr
 80010a8:	ea90 0f01 	teq	r0, r1
 80010ac:	bf1c      	itt	ne
 80010ae:	2000      	movne	r0, #0
 80010b0:	4770      	bxne	lr
 80010b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80010b6:	d104      	bne.n	80010c2 <__addsf3+0x126>
 80010b8:	0040      	lsls	r0, r0, #1
 80010ba:	bf28      	it	cs
 80010bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80010c0:	4770      	bx	lr
 80010c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80010c6:	bf3c      	itt	cc
 80010c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80010cc:	4770      	bxcc	lr
 80010ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80010d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80010d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010da:	4770      	bx	lr
 80010dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80010e0:	bf16      	itet	ne
 80010e2:	4608      	movne	r0, r1
 80010e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80010e8:	4601      	movne	r1, r0
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	bf06      	itte	eq
 80010ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80010f2:	ea90 0f01 	teqeq	r0, r1
 80010f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80010fa:	4770      	bx	lr

080010fc <__aeabi_ui2f>:
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	e004      	b.n	800110c <__aeabi_i2f+0x8>
 8001102:	bf00      	nop

08001104 <__aeabi_i2f>:
 8001104:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001108:	bf48      	it	mi
 800110a:	4240      	negmi	r0, r0
 800110c:	ea5f 0c00 	movs.w	ip, r0
 8001110:	bf08      	it	eq
 8001112:	4770      	bxeq	lr
 8001114:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001118:	4601      	mov	r1, r0
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	e01c      	b.n	800115a <__aeabi_l2f+0x2a>

08001120 <__aeabi_ul2f>:
 8001120:	ea50 0201 	orrs.w	r2, r0, r1
 8001124:	bf08      	it	eq
 8001126:	4770      	bxeq	lr
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e00a      	b.n	8001144 <__aeabi_l2f+0x14>
 800112e:	bf00      	nop

08001130 <__aeabi_l2f>:
 8001130:	ea50 0201 	orrs.w	r2, r0, r1
 8001134:	bf08      	it	eq
 8001136:	4770      	bxeq	lr
 8001138:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800113c:	d502      	bpl.n	8001144 <__aeabi_l2f+0x14>
 800113e:	4240      	negs	r0, r0
 8001140:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001144:	ea5f 0c01 	movs.w	ip, r1
 8001148:	bf02      	ittt	eq
 800114a:	4684      	moveq	ip, r0
 800114c:	4601      	moveq	r1, r0
 800114e:	2000      	moveq	r0, #0
 8001150:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001154:	bf08      	it	eq
 8001156:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800115a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800115e:	fabc f28c 	clz	r2, ip
 8001162:	3a08      	subs	r2, #8
 8001164:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001168:	db10      	blt.n	800118c <__aeabi_l2f+0x5c>
 800116a:	fa01 fc02 	lsl.w	ip, r1, r2
 800116e:	4463      	add	r3, ip
 8001170:	fa00 fc02 	lsl.w	ip, r0, r2
 8001174:	f1c2 0220 	rsb	r2, r2, #32
 8001178:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800117c:	fa20 f202 	lsr.w	r2, r0, r2
 8001180:	eb43 0002 	adc.w	r0, r3, r2
 8001184:	bf08      	it	eq
 8001186:	f020 0001 	biceq.w	r0, r0, #1
 800118a:	4770      	bx	lr
 800118c:	f102 0220 	add.w	r2, r2, #32
 8001190:	fa01 fc02 	lsl.w	ip, r1, r2
 8001194:	f1c2 0220 	rsb	r2, r2, #32
 8001198:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800119c:	fa21 f202 	lsr.w	r2, r1, r2
 80011a0:	eb43 0002 	adc.w	r0, r3, r2
 80011a4:	bf08      	it	eq
 80011a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80011aa:	4770      	bx	lr
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <__aeabi_fmul>:
 80011b0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80011b4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80011b8:	bf1e      	ittt	ne
 80011ba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80011be:	ea92 0f0c 	teqne	r2, ip
 80011c2:	ea93 0f0c 	teqne	r3, ip
 80011c6:	d06f      	beq.n	80012a8 <__aeabi_fmul+0xf8>
 80011c8:	441a      	add	r2, r3
 80011ca:	ea80 0c01 	eor.w	ip, r0, r1
 80011ce:	0240      	lsls	r0, r0, #9
 80011d0:	bf18      	it	ne
 80011d2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80011d6:	d01e      	beq.n	8001216 <__aeabi_fmul+0x66>
 80011d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011dc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80011e0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80011e4:	fba0 3101 	umull	r3, r1, r0, r1
 80011e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80011ec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80011f0:	bf3e      	ittt	cc
 80011f2:	0049      	lslcc	r1, r1, #1
 80011f4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80011f8:	005b      	lslcc	r3, r3, #1
 80011fa:	ea40 0001 	orr.w	r0, r0, r1
 80011fe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001202:	2afd      	cmp	r2, #253	; 0xfd
 8001204:	d81d      	bhi.n	8001242 <__aeabi_fmul+0x92>
 8001206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800120a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800120e:	bf08      	it	eq
 8001210:	f020 0001 	biceq.w	r0, r0, #1
 8001214:	4770      	bx	lr
 8001216:	f090 0f00 	teq	r0, #0
 800121a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800121e:	bf08      	it	eq
 8001220:	0249      	lsleq	r1, r1, #9
 8001222:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001226:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800122a:	3a7f      	subs	r2, #127	; 0x7f
 800122c:	bfc2      	ittt	gt
 800122e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001232:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001236:	4770      	bxgt	lr
 8001238:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	3a01      	subs	r2, #1
 8001242:	dc5d      	bgt.n	8001300 <__aeabi_fmul+0x150>
 8001244:	f112 0f19 	cmn.w	r2, #25
 8001248:	bfdc      	itt	le
 800124a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800124e:	4770      	bxle	lr
 8001250:	f1c2 0200 	rsb	r2, r2, #0
 8001254:	0041      	lsls	r1, r0, #1
 8001256:	fa21 f102 	lsr.w	r1, r1, r2
 800125a:	f1c2 0220 	rsb	r2, r2, #32
 800125e:	fa00 fc02 	lsl.w	ip, r0, r2
 8001262:	ea5f 0031 	movs.w	r0, r1, rrx
 8001266:	f140 0000 	adc.w	r0, r0, #0
 800126a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800126e:	bf08      	it	eq
 8001270:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001274:	4770      	bx	lr
 8001276:	f092 0f00 	teq	r2, #0
 800127a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800127e:	bf02      	ittt	eq
 8001280:	0040      	lsleq	r0, r0, #1
 8001282:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001286:	3a01      	subeq	r2, #1
 8001288:	d0f9      	beq.n	800127e <__aeabi_fmul+0xce>
 800128a:	ea40 000c 	orr.w	r0, r0, ip
 800128e:	f093 0f00 	teq	r3, #0
 8001292:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001296:	bf02      	ittt	eq
 8001298:	0049      	lsleq	r1, r1, #1
 800129a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800129e:	3b01      	subeq	r3, #1
 80012a0:	d0f9      	beq.n	8001296 <__aeabi_fmul+0xe6>
 80012a2:	ea41 010c 	orr.w	r1, r1, ip
 80012a6:	e78f      	b.n	80011c8 <__aeabi_fmul+0x18>
 80012a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80012ac:	ea92 0f0c 	teq	r2, ip
 80012b0:	bf18      	it	ne
 80012b2:	ea93 0f0c 	teqne	r3, ip
 80012b6:	d00a      	beq.n	80012ce <__aeabi_fmul+0x11e>
 80012b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80012bc:	bf18      	it	ne
 80012be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80012c2:	d1d8      	bne.n	8001276 <__aeabi_fmul+0xc6>
 80012c4:	ea80 0001 	eor.w	r0, r0, r1
 80012c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012cc:	4770      	bx	lr
 80012ce:	f090 0f00 	teq	r0, #0
 80012d2:	bf17      	itett	ne
 80012d4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80012d8:	4608      	moveq	r0, r1
 80012da:	f091 0f00 	teqne	r1, #0
 80012de:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80012e2:	d014      	beq.n	800130e <__aeabi_fmul+0x15e>
 80012e4:	ea92 0f0c 	teq	r2, ip
 80012e8:	d101      	bne.n	80012ee <__aeabi_fmul+0x13e>
 80012ea:	0242      	lsls	r2, r0, #9
 80012ec:	d10f      	bne.n	800130e <__aeabi_fmul+0x15e>
 80012ee:	ea93 0f0c 	teq	r3, ip
 80012f2:	d103      	bne.n	80012fc <__aeabi_fmul+0x14c>
 80012f4:	024b      	lsls	r3, r1, #9
 80012f6:	bf18      	it	ne
 80012f8:	4608      	movne	r0, r1
 80012fa:	d108      	bne.n	800130e <__aeabi_fmul+0x15e>
 80012fc:	ea80 0001 	eor.w	r0, r0, r1
 8001300:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001304:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001308:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800130c:	4770      	bx	lr
 800130e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001312:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001316:	4770      	bx	lr

08001318 <__aeabi_fdiv>:
 8001318:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800131c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001320:	bf1e      	ittt	ne
 8001322:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001326:	ea92 0f0c 	teqne	r2, ip
 800132a:	ea93 0f0c 	teqne	r3, ip
 800132e:	d069      	beq.n	8001404 <__aeabi_fdiv+0xec>
 8001330:	eba2 0203 	sub.w	r2, r2, r3
 8001334:	ea80 0c01 	eor.w	ip, r0, r1
 8001338:	0249      	lsls	r1, r1, #9
 800133a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800133e:	d037      	beq.n	80013b0 <__aeabi_fdiv+0x98>
 8001340:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001344:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001348:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800134c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001350:	428b      	cmp	r3, r1
 8001352:	bf38      	it	cc
 8001354:	005b      	lslcc	r3, r3, #1
 8001356:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800135a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800135e:	428b      	cmp	r3, r1
 8001360:	bf24      	itt	cs
 8001362:	1a5b      	subcs	r3, r3, r1
 8001364:	ea40 000c 	orrcs.w	r0, r0, ip
 8001368:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800136c:	bf24      	itt	cs
 800136e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001372:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001376:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800137a:	bf24      	itt	cs
 800137c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001380:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001384:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001388:	bf24      	itt	cs
 800138a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800138e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	bf18      	it	ne
 8001396:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800139a:	d1e0      	bne.n	800135e <__aeabi_fdiv+0x46>
 800139c:	2afd      	cmp	r2, #253	; 0xfd
 800139e:	f63f af50 	bhi.w	8001242 <__aeabi_fmul+0x92>
 80013a2:	428b      	cmp	r3, r1
 80013a4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80013a8:	bf08      	it	eq
 80013aa:	f020 0001 	biceq.w	r0, r0, #1
 80013ae:	4770      	bx	lr
 80013b0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80013b4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80013b8:	327f      	adds	r2, #127	; 0x7f
 80013ba:	bfc2      	ittt	gt
 80013bc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80013c0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80013c4:	4770      	bxgt	lr
 80013c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	3a01      	subs	r2, #1
 80013d0:	e737      	b.n	8001242 <__aeabi_fmul+0x92>
 80013d2:	f092 0f00 	teq	r2, #0
 80013d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80013da:	bf02      	ittt	eq
 80013dc:	0040      	lsleq	r0, r0, #1
 80013de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80013e2:	3a01      	subeq	r2, #1
 80013e4:	d0f9      	beq.n	80013da <__aeabi_fdiv+0xc2>
 80013e6:	ea40 000c 	orr.w	r0, r0, ip
 80013ea:	f093 0f00 	teq	r3, #0
 80013ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80013f2:	bf02      	ittt	eq
 80013f4:	0049      	lsleq	r1, r1, #1
 80013f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80013fa:	3b01      	subeq	r3, #1
 80013fc:	d0f9      	beq.n	80013f2 <__aeabi_fdiv+0xda>
 80013fe:	ea41 010c 	orr.w	r1, r1, ip
 8001402:	e795      	b.n	8001330 <__aeabi_fdiv+0x18>
 8001404:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001408:	ea92 0f0c 	teq	r2, ip
 800140c:	d108      	bne.n	8001420 <__aeabi_fdiv+0x108>
 800140e:	0242      	lsls	r2, r0, #9
 8001410:	f47f af7d 	bne.w	800130e <__aeabi_fmul+0x15e>
 8001414:	ea93 0f0c 	teq	r3, ip
 8001418:	f47f af70 	bne.w	80012fc <__aeabi_fmul+0x14c>
 800141c:	4608      	mov	r0, r1
 800141e:	e776      	b.n	800130e <__aeabi_fmul+0x15e>
 8001420:	ea93 0f0c 	teq	r3, ip
 8001424:	d104      	bne.n	8001430 <__aeabi_fdiv+0x118>
 8001426:	024b      	lsls	r3, r1, #9
 8001428:	f43f af4c 	beq.w	80012c4 <__aeabi_fmul+0x114>
 800142c:	4608      	mov	r0, r1
 800142e:	e76e      	b.n	800130e <__aeabi_fmul+0x15e>
 8001430:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001434:	bf18      	it	ne
 8001436:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800143a:	d1ca      	bne.n	80013d2 <__aeabi_fdiv+0xba>
 800143c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001440:	f47f af5c 	bne.w	80012fc <__aeabi_fmul+0x14c>
 8001444:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001448:	f47f af3c 	bne.w	80012c4 <__aeabi_fmul+0x114>
 800144c:	e75f      	b.n	800130e <__aeabi_fmul+0x15e>
 800144e:	bf00      	nop

08001450 <__gesf2>:
 8001450:	f04f 3cff 	mov.w	ip, #4294967295
 8001454:	e006      	b.n	8001464 <__cmpsf2+0x4>
 8001456:	bf00      	nop

08001458 <__lesf2>:
 8001458:	f04f 0c01 	mov.w	ip, #1
 800145c:	e002      	b.n	8001464 <__cmpsf2+0x4>
 800145e:	bf00      	nop

08001460 <__cmpsf2>:
 8001460:	f04f 0c01 	mov.w	ip, #1
 8001464:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001468:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800146c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001474:	bf18      	it	ne
 8001476:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800147a:	d011      	beq.n	80014a0 <__cmpsf2+0x40>
 800147c:	b001      	add	sp, #4
 800147e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001482:	bf18      	it	ne
 8001484:	ea90 0f01 	teqne	r0, r1
 8001488:	bf58      	it	pl
 800148a:	ebb2 0003 	subspl.w	r0, r2, r3
 800148e:	bf88      	it	hi
 8001490:	17c8      	asrhi	r0, r1, #31
 8001492:	bf38      	it	cc
 8001494:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001498:	bf18      	it	ne
 800149a:	f040 0001 	orrne.w	r0, r0, #1
 800149e:	4770      	bx	lr
 80014a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80014a4:	d102      	bne.n	80014ac <__cmpsf2+0x4c>
 80014a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80014aa:	d105      	bne.n	80014b8 <__cmpsf2+0x58>
 80014ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80014b0:	d1e4      	bne.n	800147c <__cmpsf2+0x1c>
 80014b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80014b6:	d0e1      	beq.n	800147c <__cmpsf2+0x1c>
 80014b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <__aeabi_cfrcmple>:
 80014c0:	4684      	mov	ip, r0
 80014c2:	4608      	mov	r0, r1
 80014c4:	4661      	mov	r1, ip
 80014c6:	e7ff      	b.n	80014c8 <__aeabi_cfcmpeq>

080014c8 <__aeabi_cfcmpeq>:
 80014c8:	b50f      	push	{r0, r1, r2, r3, lr}
 80014ca:	f7ff ffc9 	bl	8001460 <__cmpsf2>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	bf48      	it	mi
 80014d2:	f110 0f00 	cmnmi.w	r0, #0
 80014d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080014d8 <__aeabi_fcmpeq>:
 80014d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014dc:	f7ff fff4 	bl	80014c8 <__aeabi_cfcmpeq>
 80014e0:	bf0c      	ite	eq
 80014e2:	2001      	moveq	r0, #1
 80014e4:	2000      	movne	r0, #0
 80014e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014ea:	bf00      	nop

080014ec <__aeabi_fcmplt>:
 80014ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014f0:	f7ff ffea 	bl	80014c8 <__aeabi_cfcmpeq>
 80014f4:	bf34      	ite	cc
 80014f6:	2001      	movcc	r0, #1
 80014f8:	2000      	movcs	r0, #0
 80014fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80014fe:	bf00      	nop

08001500 <__aeabi_fcmple>:
 8001500:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001504:	f7ff ffe0 	bl	80014c8 <__aeabi_cfcmpeq>
 8001508:	bf94      	ite	ls
 800150a:	2001      	movls	r0, #1
 800150c:	2000      	movhi	r0, #0
 800150e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001512:	bf00      	nop

08001514 <__aeabi_fcmpge>:
 8001514:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001518:	f7ff ffd2 	bl	80014c0 <__aeabi_cfrcmple>
 800151c:	bf94      	ite	ls
 800151e:	2001      	movls	r0, #1
 8001520:	2000      	movhi	r0, #0
 8001522:	f85d fb08 	ldr.w	pc, [sp], #8
 8001526:	bf00      	nop

08001528 <__aeabi_fcmpgt>:
 8001528:	f84d ed08 	str.w	lr, [sp, #-8]!
 800152c:	f7ff ffc8 	bl	80014c0 <__aeabi_cfrcmple>
 8001530:	bf34      	ite	cc
 8001532:	2001      	movcc	r0, #1
 8001534:	2000      	movcs	r0, #0
 8001536:	f85d fb08 	ldr.w	pc, [sp], #8
 800153a:	bf00      	nop
 800153c:	0000      	movs	r0, r0
	...

08001540 <__aeabi_f2iz>:
 8001540:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001544:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001548:	d30f      	bcc.n	800156a <__aeabi_f2iz+0x2a>
 800154a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800154e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001552:	d90d      	bls.n	8001570 <__aeabi_f2iz+0x30>
 8001554:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001560:	fa23 f002 	lsr.w	r0, r3, r2
 8001564:	bf18      	it	ne
 8001566:	4240      	negne	r0, r0
 8001568:	4770      	bx	lr
 800156a:	f04f 0000 	mov.w	r0, #0
 800156e:	4770      	bx	lr
 8001570:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001574:	d101      	bne.n	800157a <__aeabi_f2iz+0x3a>
 8001576:	0242      	lsls	r2, r0, #9
 8001578:	d105      	bne.n	8001586 <__aeabi_f2iz+0x46>
 800157a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800157e:	bf08      	it	eq
 8001580:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001584:	4770      	bx	lr
 8001586:	f04f 0000 	mov.w	r0, #0
 800158a:	4770      	bx	lr
 800158c:	0000      	movs	r0, r0
	...

08001590 <__aeabi_f2uiz>:
 8001590:	0042      	lsls	r2, r0, #1
 8001592:	d20e      	bcs.n	80015b2 <__aeabi_f2uiz+0x22>
 8001594:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001598:	d30b      	bcc.n	80015b2 <__aeabi_f2uiz+0x22>
 800159a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800159e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80015a2:	d409      	bmi.n	80015b8 <__aeabi_f2uiz+0x28>
 80015a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80015a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015ac:	fa23 f002 	lsr.w	r0, r3, r2
 80015b0:	4770      	bx	lr
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	4770      	bx	lr
 80015b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80015bc:	d101      	bne.n	80015c2 <__aeabi_f2uiz+0x32>
 80015be:	0242      	lsls	r2, r0, #9
 80015c0:	d102      	bne.n	80015c8 <__aeabi_f2uiz+0x38>
 80015c2:	f04f 30ff 	mov.w	r0, #4294967295
 80015c6:	4770      	bx	lr
 80015c8:	f04f 0000 	mov.w	r0, #0
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <print_line>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	4e09      	ldr	r6, [pc, #36]	; (80015f8 <print_line+0x28>)
 80015d4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 80015d6:	6830      	ldr	r0, [r6, #0]
 80015d8:	212d      	movs	r1, #45	; 0x2d
 80015da:	6803      	ldr	r3, [r0, #0]
 80015dc:	4d06      	ldr	r5, [pc, #24]	; (80015f8 <print_line+0x28>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 80015e2:	3c01      	subs	r4, #1
 80015e4:	d1f7      	bne.n	80015d6 <print_line+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80015e6:	6828      	ldr	r0, [r5, #0]
 80015e8:	4904      	ldr	r1, [pc, #16]	; (80015fc <print_line+0x2c>)
 80015ea:	6803      	ldr	r3, [r0, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80015f4:	4718      	bx	r3
 80015f6:	bf00      	nop
 80015f8:	20000d18 	.word	0x20000d18
 80015fc:	0800a434 	.word	0x0800a434

08001600 <tmr.lto_priv.73>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <tmr.lto_priv.73+0x8>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	4770      	bx	lr
 8001608:	20001fb8 	.word	0x20001fb8
 800160c:	f3af 8000 	nop.w

08001610 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001610:	b410      	push	{r4}
 8001612:	2320      	movs	r3, #32
 8001614:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
 8001618:	4c09      	ldr	r4, [pc, #36]	; (8001640 <chCoreAlloc+0x30>)
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <chCoreAlloc+0x34>)
 800161c:	6822      	ldr	r2, [r4, #0]
 800161e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001620:	1dc3      	adds	r3, r0, #7
 8001622:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size)
 8001626:	1a89      	subs	r1, r1, r2
 8001628:	428b      	cmp	r3, r1
    return NULL;
  p = nextmem;
  nextmem += size;
 800162a:	bf9d      	ittte	ls
 800162c:	189b      	addls	r3, r3, r2
 800162e:	6023      	strls	r3, [r4, #0]
  return p;
 8001630:	4610      	movls	r0, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
    return NULL;
 8001632:	2000      	movhi	r0, #0
 8001634:	2300      	movs	r3, #0
 8001636:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();
  return p;
}
 800163a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20001218 	.word	0x20001218
 8001644:	20001530 	.word	0x20001530
 8001648:	f3af 8000 	nop.w
 800164c:	f3af 8000 	nop.w

08001650 <wakeup.lto_priv.108>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001650:	b410      	push	{r4}
 8001652:	2320      	movs	r3, #32
 8001654:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001658:	7f03      	ldrb	r3, [r0, #28]
 800165a:	2b07      	cmp	r3, #7
 800165c:	d80e      	bhi.n	800167c <wakeup.lto_priv.108+0x2c>
 800165e:	e8df f003 	tbb	[pc, r3]
 8001662:	0d27      	.short	0x0d27
 8001664:	0408230d 	.word	0x0408230d
 8001668:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 800166a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800166c:	6893      	ldr	r3, [r2, #8]
 800166e:	3301      	adds	r3, #1
 8001670:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001672:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001676:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800167c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001680:	2200      	movs	r2, #0
 8001682:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <wakeup.lto_priv.108+0x6c>)
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8001686:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001688:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800168a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	428a      	cmp	r2, r1
 8001690:	d2fb      	bcs.n	800168a <wakeup.lto_priv.108+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001696:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8001698:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800169a:	6058      	str	r0, [r3, #4]
 800169c:	6010      	str	r0, [r2, #0]
 800169e:	f381 8811 	msr	BASEPRI, r1
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80016a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016a6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 80016a8:	6a03      	ldr	r3, [r0, #32]
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e7e5      	b.n	800167c <wakeup.lto_priv.108+0x2c>
 80016b0:	2300      	movs	r3, #0
 80016b2:	f383 8811 	msr	BASEPRI, r3
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80016b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20001e68 	.word	0x20001e68

080016c0 <_idle_thread.lto_priv.87>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <_idle_thread.lto_priv.87+0xc>)
 80016c2:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <_idle_thread.lto_priv.87+0x10>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	619a      	str	r2, [r3, #24]
 80016c8:	e7fe      	b.n	80016c8 <_idle_thread.lto_priv.87+0x8>
 80016ca:	bf00      	nop
 80016cc:	20001e68 	.word	0x20001e68
 80016d0:	080098d0 	.word	0x080098d0
 80016d4:	f3af 8000 	nop.w
 80016d8:	f3af 8000 	nop.w
 80016dc:	f3af 8000 	nop.w

080016e0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80016e0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80016e4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80016e6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80016ea:	2300      	movs	r3, #0
 80016ec:	f383 8811 	msr	BASEPRI, r3
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	f3af 8000 	nop.w
 80016fc:	f3af 8000 	nop.w

08001700 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <chSchDoRescheduleAhead+0x38>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001702:	b4f0      	push	{r4, r5, r6, r7}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001704:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001706:	6994      	ldr	r4, [r2, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001708:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800170a:	2701      	movs	r7, #1

  otp->p_state = CH_STATE_READY;
 800170c:	2600      	movs	r6, #0
 800170e:	68a1      	ldr	r1, [r4, #8]
 8001710:	462b      	mov	r3, r5
 8001712:	606a      	str	r2, [r5, #4]
 8001714:	6015      	str	r5, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001716:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001718:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 800171a:	7726      	strb	r6, [r4, #28]
 800171c:	e000      	b.n	8001720 <chSchDoRescheduleAhead+0x20>
 800171e:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	428a      	cmp	r2, r1
 8001724:	d8fb      	bhi.n	800171e <chSchDoRescheduleAhead+0x1e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001726:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001728:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 800172a:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
 800172c:	6062      	str	r2, [r4, #4]
  otp->p_prev->p_next = cp->p_prev = otp;
 800172e:	605c      	str	r4, [r3, #4]
 8001730:	6014      	str	r4, [r2, #0]

  chSysSwitch(currp, otp);
}
 8001732:	bcf0      	pop	{r4, r5, r6, r7}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001734:	f7fe bfac 	b.w	8000690 <_port_switch>
 8001738:	20001e68 	.word	0x20001e68
 800173c:	f3af 8000 	nop.w

08001740 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 8001740:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 8001742:	4849      	ldr	r0, [pc, #292]	; (8001868 <Reset_Handler+0x128>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 8001744:	f380 8809 	msr	PSP, r0
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 8001748:	2302      	movs	r3, #2
 800174a:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 800174e:	f3bf 8f6f 	isb	sy
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001752:	4b46      	ldr	r3, [pc, #280]	; (800186c <Reset_Handler+0x12c>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001754:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800175e:	680b      	ldr	r3, [r1, #0]
 8001760:	4a42      	ldr	r2, [pc, #264]	; (800186c <Reset_Handler+0x12c>)
 8001762:	079d      	lsls	r5, r3, #30
 8001764:	d5fb      	bpl.n	800175e <Reset_Handler+0x1e>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001766:	4611      	mov	r1, r2
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001768:	6813      	ldr	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800176a:	2400      	movs	r4, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800176c:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 8001770:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001772:	6054      	str	r4, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001774:	684b      	ldr	r3, [r1, #4]
 8001776:	4a3d      	ldr	r2, [pc, #244]	; (800186c <Reset_Handler+0x12c>)
 8001778:	f013 0f0c 	tst.w	r3, #12
 800177c:	d1fa      	bne.n	8001774 <Reset_Handler+0x34>
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
  while (!(RCC->CR & RCC_CR_HSERDY))
 800177e:	4611      	mov	r1, r2
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001780:	6813      	ldr	r3, [r2, #0]
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001788:	680b      	ldr	r3, [r1, #0]
 800178a:	4a38      	ldr	r2, [pc, #224]	; (800186c <Reset_Handler+0x12c>)
 800178c:	039c      	lsls	r4, r3, #14
 800178e:	d5fb      	bpl.n	8001788 <Reset_Handler+0x48>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001790:	4611      	mov	r1, r2
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001792:	6853      	ldr	r3, [r2, #4]
 8001794:	f443 2310 	orr.w	r3, r3, #589824	; 0x90000
 8001798:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a0:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80017a2:	680b      	ldr	r3, [r1, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	; (800186c <Reset_Handler+0x12c>)
 80017a6:	019b      	lsls	r3, r3, #6
 80017a8:	d5fb      	bpl.n	80017a2 <Reset_Handler+0x62>

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80017aa:	4611      	mov	r1, r2
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <Reset_Handler+0x130>)
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80017ae:	4d31      	ldr	r5, [pc, #196]	; (8001874 <Reset_Handler+0x134>)
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80017b0:	2411      	movs	r4, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 80017b2:	6055      	str	r5, [r2, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80017b4:	601c      	str	r4, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80017b6:	6853      	ldr	r3, [r2, #4]
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80017be:	684b      	ldr	r3, [r1, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d1fa      	bne.n	80017be <Reset_Handler+0x7e>
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 80017c8:	492b      	ldr	r1, [pc, #172]	; (8001878 <Reset_Handler+0x138>)
 80017ca:	4a2c      	ldr	r2, [pc, #176]	; (800187c <Reset_Handler+0x13c>)
 80017cc:	4291      	cmp	r1, r2
 80017ce:	d20c      	bcs.n	80017ea <Reset_Handler+0xaa>
 80017d0:	43cc      	mvns	r4, r1
 80017d2:	4422      	add	r2, r4
 80017d4:	f022 0203 	bic.w	r2, r2, #3
 80017d8:	3204      	adds	r2, #4
 80017da:	460b      	mov	r3, r1
 80017dc:	440a      	add	r2, r1
 80017de:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 80017e2:	f843 1b04 	str.w	r1, [r3], #4
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d1fb      	bne.n	80017e2 <Reset_Handler+0xa2>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80017ea:	4925      	ldr	r1, [pc, #148]	; (8001880 <Reset_Handler+0x140>)
 80017ec:	4281      	cmp	r1, r0
 80017ee:	d20d      	bcs.n	800180c <Reset_Handler+0xcc>
 80017f0:	4a24      	ldr	r2, [pc, #144]	; (8001884 <Reset_Handler+0x144>)
 80017f2:	1d08      	adds	r0, r1, #4
 80017f4:	1a12      	subs	r2, r2, r0
 80017f6:	f022 0203 	bic.w	r2, r2, #3
 80017fa:	3204      	adds	r2, #4
 80017fc:	460b      	mov	r3, r1
 80017fe:	440a      	add	r2, r1
 8001800:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 8001804:	f843 1b04 	str.w	r1, [r3], #4
 8001808:	4293      	cmp	r3, r2
 800180a:	d1fb      	bne.n	8001804 <Reset_Handler+0xc4>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800180c:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <Reset_Handler+0x148>)
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <Reset_Handler+0x14c>)
 8001810:	429a      	cmp	r2, r3
 8001812:	d20d      	bcs.n	8001830 <Reset_Handler+0xf0>
 8001814:	43d0      	mvns	r0, r2
 8001816:	491e      	ldr	r1, [pc, #120]	; (8001890 <Reset_Handler+0x150>)
 8001818:	4418      	add	r0, r3
 800181a:	460b      	mov	r3, r1
 800181c:	f020 0003 	bic.w	r0, r0, #3
 8001820:	3004      	adds	r0, #4
 8001822:	4408      	add	r0, r1
      *dp++ = *tp++;
 8001824:	f853 1b04 	ldr.w	r1, [r3], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8001828:	4283      	cmp	r3, r0
      *dp++ = *tp++;
 800182a:	f842 1b04 	str.w	r1, [r2], #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800182e:	d1f9      	bne.n	8001824 <Reset_Handler+0xe4>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8001830:	4918      	ldr	r1, [pc, #96]	; (8001894 <Reset_Handler+0x154>)
 8001832:	4a19      	ldr	r2, [pc, #100]	; (8001898 <Reset_Handler+0x158>)
 8001834:	4291      	cmp	r1, r2
 8001836:	d20b      	bcs.n	8001850 <Reset_Handler+0x110>
 8001838:	43c8      	mvns	r0, r1
 800183a:	4402      	add	r2, r0
 800183c:	f022 0203 	bic.w	r2, r2, #3
 8001840:	3204      	adds	r2, #4
 8001842:	460b      	mov	r3, r1
 8001844:	440a      	add	r2, r1
 8001846:	2100      	movs	r1, #0
 8001848:	f843 1b04 	str.w	r1, [r3], #4
 800184c:	4293      	cmp	r3, r2
 800184e:	d1fb      	bne.n	8001848 <Reset_Handler+0x108>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8001850:	4c12      	ldr	r4, [pc, #72]	; (800189c <Reset_Handler+0x15c>)
 8001852:	4d13      	ldr	r5, [pc, #76]	; (80018a0 <Reset_Handler+0x160>)
 8001854:	42ac      	cmp	r4, r5
 8001856:	d204      	bcs.n	8001862 <Reset_Handler+0x122>
      (*fpp)();
 8001858:	f854 3b04 	ldr.w	r3, [r4], #4
 800185c:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 800185e:	42ac      	cmp	r4, r5
 8001860:	d3fa      	bcc.n	8001858 <Reset_Handler+0x118>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 8001862:	f7fe fc6d 	bl	8000140 <main>
 8001866:	bf00      	nop
 8001868:	20000800 	.word	0x20000800
 800186c:	40021000 	.word	0x40021000
 8001870:	40022000 	.word	0x40022000
 8001874:	00496400 	.word	0x00496400
 8001878:	20000000 	.word	0x20000000
 800187c:	20000400 	.word	0x20000400
 8001880:	20000400 	.word	0x20000400
 8001884:	20000803 	.word	0x20000803
 8001888:	20000800 	.word	0x20000800
 800188c:	20000d10 	.word	0x20000d10
 8001890:	0800a9f8 	.word	0x0800a9f8
 8001894:	20000d10 	.word	0x20000d10
 8001898:	20002020 	.word	0x20002020
 800189c:	08000140 	.word	0x08000140
 80018a0:	08000140 	.word	0x08000140
 80018a4:	f3af 8000 	nop.w
 80018a8:	f3af 8000 	nop.w
 80018ac:	f3af 8000 	nop.w

080018b0 <test_terminate_threads>:
 */

/**
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <test_terminate_threads+0x2c>)
 80018b2:	b430      	push	{r4, r5}
 80018b4:	f103 0014 	add.w	r0, r3, #20
 80018b8:	2520      	movs	r5, #32
 80018ba:	2400      	movs	r4, #0
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 80018bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80018c0:	b13a      	cbz	r2, 80018d2 <test_terminate_threads+0x22>
 80018c2:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 80018c6:	7f51      	ldrb	r1, [r2, #29]
 80018c8:	f041 0104 	orr.w	r1, r1, #4
 80018cc:	7751      	strb	r1, [r2, #29]
 80018ce:	f384 8811 	msr	BASEPRI, r4
 * @brief   Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 80018d2:	4283      	cmp	r3, r0
 80018d4:	d1f2      	bne.n	80018bc <test_terminate_threads+0xc>
    if (threads[i])
      chThdTerminate(threads[i]);
}
 80018d6:	bc30      	pop	{r4, r5}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000173c 	.word	0x2000173c

080018e0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80018e0:	b410      	push	{r4}
 80018e2:	2320      	movs	r3, #32
 80018e4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80018e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80018ee:	2300      	movs	r3, #0
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	b2a4      	uxth	r4, r4
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 80018f6:	1a64      	subs	r4, r4, r1
 80018f8:	1a52      	subs	r2, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80018fa:	4294      	cmp	r4, r2
 80018fc:	db06      	blt.n	800190c <_test_assert_time_window+0x2c>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 80018fe:	4c05      	ldr	r4, [pc, #20]	; (8001914 <_test_assert_time_window+0x34>)
  global_fail = TRUE;
 8001900:	4905      	ldr	r1, [pc, #20]	; (8001918 <_test_assert_time_window+0x38>)
  failpoint = point;
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <_test_assert_time_window+0x3c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8001904:	2301      	movs	r3, #1
 8001906:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
 8001908:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 800190a:	6010      	str	r0, [r2, #0]
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 800190c:	4618      	mov	r0, r3
 800190e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000d15 	.word	0x20000d15
 8001918:	20000d14 	.word	0x20000d14
 800191c:	20000d2c 	.word	0x20000d2c

08001920 <_test_assert_sequence>:
  if (!condition)
    return _test_fail(point);
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8001920:	b4f0      	push	{r4, r5, r6, r7}
 8001922:	4e0e      	ldr	r6, [pc, #56]	; (800195c <_test_assert_sequence+0x3c>)
  char *cp = tokens_buffer;
 8001924:	4f0e      	ldr	r7, [pc, #56]	; (8001960 <_test_assert_sequence+0x40>)
 8001926:	6835      	ldr	r5, [r6, #0]
 8001928:	463b      	mov	r3, r7
 800192a:	e005      	b.n	8001938 <_test_assert_sequence+0x18>
  while (cp < tokp) {
    if (*cp++ != *expected++)
 800192c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001934:	4294      	cmp	r4, r2
 8001936:	d107      	bne.n	8001948 <_test_assert_sequence+0x28>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8001938:	42ab      	cmp	r3, r5
 800193a:	d3f7      	bcc.n	800192c <_test_assert_sequence+0xc>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 800193c:	780b      	ldrb	r3, [r1, #0]
 800193e:	b91b      	cbnz	r3, 8001948 <_test_assert_sequence+0x28>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8001940:	6037      	str	r7, [r6, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8001942:	4618      	mov	r0, r3
 8001944:	bcf0      	pop	{r4, r5, r6, r7}
 8001946:	4770      	bx	lr
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8001948:	4c06      	ldr	r4, [pc, #24]	; (8001964 <_test_assert_sequence+0x44>)
  global_fail = TRUE;
 800194a:	4907      	ldr	r1, [pc, #28]	; (8001968 <_test_assert_sequence+0x48>)
  failpoint = point;
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <_test_assert_sequence+0x4c>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 800194e:	2301      	movs	r3, #1
 8001950:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 8001952:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8001954:	700b      	strb	r3, [r1, #0]
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}
 8001956:	4618      	mov	r0, r3
 8001958:	bcf0      	pop	{r4, r5, r6, r7}
 800195a:	4770      	bx	lr
 800195c:	20000d10 	.word	0x20000d10
 8001960:	20000d1c 	.word	0x20000d1c
 8001964:	20000d15 	.word	0x20000d15
 8001968:	20000d14 	.word	0x20000d14
 800196c:	20000d2c 	.word	0x20000d2c

08001970 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8001970:	b959      	cbnz	r1, 800198a <_test_assert+0x1a>
  global_fail = TRUE;
  failpoint = point;
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {
 8001972:	b410      	push	{r4}
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8001974:	4906      	ldr	r1, [pc, #24]	; (8001990 <_test_assert+0x20>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8001976:	4c07      	ldr	r4, [pc, #28]	; (8001994 <_test_assert+0x24>)
  global_fail = TRUE;
  failpoint = point;
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <_test_assert+0x28>)
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 800197a:	2301      	movs	r3, #1
 800197c:	7023      	strb	r3, [r4, #0]
  global_fail = TRUE;
  failpoint = point;
 800197e:	6010      	str	r0, [r2, #0]
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8001980:	700b      	strb	r3, [r1, #0]
bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
}
 8001982:	4618      	mov	r0, r3
 8001984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001988:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	4770      	bx	lr
 8001990:	20000d14 	.word	0x20000d14
 8001994:	20000d15 	.word	0x20000d15
 8001998:	20000d2c 	.word	0x20000d2c
 800199c:	f3af 8000 	nop.w

080019a0 <test_emit_token>:
/**
 * @brief   Emits a token into the tokens buffer.
 *
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {
 80019a0:	b410      	push	{r4}
 80019a2:	2320      	movs	r3, #32
 80019a4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  *tokp++ = token;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <test_emit_token+0x20>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	1c54      	adds	r4, r2, #1
 80019b0:	7010      	strb	r0, [r2, #0]
 80019b2:	601c      	str	r4, [r3, #0]
 80019b4:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
}
 80019b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000d10 	.word	0x20000d10
 80019c4:	f3af 8000 	nop.w
 80019c8:	f3af 8000 	nop.w
 80019cc:	f3af 8000 	nop.w

080019d0 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 80019d0:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80019d2:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 80019d4:	4604      	mov	r4, r0
 80019d6:	4d09      	ldr	r5, [pc, #36]	; (80019fc <test_println+0x2c>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80019d8:	b139      	cbz	r1, 80019ea <test_println+0x1a>
    chSequentialStreamPut(chp, *msgp++);
 80019da:	6828      	ldr	r0, [r5, #0]
 80019dc:	6803      	ldr	r3, [r0, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80019e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80019e6:	2900      	cmp	r1, #0
 80019e8:	d1f7      	bne.n	80019da <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80019ea:	6828      	ldr	r0, [r5, #0]
 80019ec:	4904      	ldr	r1, [pc, #16]	; (8001a00 <test_println+0x30>)
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	2202      	movs	r2, #2
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 80019f8:	4718      	bx	r3
 80019fa:	bf00      	nop
 80019fc:	20000d18 	.word	0x20000d18
 8001a00:	0800a434 	.word	0x0800a434
 8001a04:	f3af 8000 	nop.w
 8001a08:	f3af 8000 	nop.w
 8001a0c:	f3af 8000 	nop.w

08001a10 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8001a10:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8001a12:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8001a14:	4604      	mov	r4, r0

  while (*msgp)
 8001a16:	b141      	cbz	r1, 8001a2a <test_print+0x1a>
 8001a18:	4d04      	ldr	r5, [pc, #16]	; (8001a2c <test_print+0x1c>)
    chSequentialStreamPut(chp, *msgp++);
 8001a1a:	6828      	ldr	r0, [r5, #0]
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001a22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001a26:	2900      	cmp	r1, #0
 8001a28:	d1f7      	bne.n	8001a1a <test_print+0xa>
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	20000d18 	.word	0x20000d18

08001a30 <test_printn>:
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
 8001a30:	b310      	cbz	r0, 8001a78 <test_printn+0x48>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001a32:	b570      	push	{r4, r5, r6, lr}
 8001a34:	b084      	sub	sp, #16
  char buf[16], *p;

  if (!n)
 8001a36:	466d      	mov	r5, sp
 8001a38:	466c      	mov	r4, sp
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <test_printn+0x54>)
 8001a3c:	fba2 1300 	umull	r1, r3, r2, r0
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001a46:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8001a4a:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001a4e:	b2c9      	uxtb	r1, r1
 8001a50:	f804 1b01 	strb.w	r1, [r4], #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8001a54:	4618      	mov	r0, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <test_printn+0xc>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8001a5a:	42ac      	cmp	r4, r5
 8001a5c:	d90a      	bls.n	8001a74 <test_printn+0x44>
 8001a5e:	4e0a      	ldr	r6, [pc, #40]	; (8001a88 <test_printn+0x58>)
 8001a60:	3c01      	subs	r4, #1
 8001a62:	e001      	b.n	8001a68 <test_printn+0x38>
 8001a64:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
      chSequentialStreamPut(chp, *--p);
 8001a68:	6830      	ldr	r0, [r6, #0]
 8001a6a:	6803      	ldr	r3, [r0, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4798      	blx	r3
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8001a70:	42ac      	cmp	r4, r5
 8001a72:	d1f7      	bne.n	8001a64 <test_printn+0x34>
      chSequentialStreamPut(chp, *--p);
  }
}
 8001a74:	b004      	add	sp, #16
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <test_printn+0x58>)
 8001a7a:	2130      	movs	r1, #48	; 0x30
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	6803      	ldr	r3, [r0, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4718      	bx	r3
 8001a84:	cccccccd 	.word	0xcccccccd
 8001a88:	20000d18 	.word	0x20000d18
 8001a8c:	f3af 8000 	nop.w

08001a90 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001a90:	b508      	push	{r3, lr}
 8001a92:	2220      	movs	r2, #32
 8001a94:	4603      	mov	r3, r0
 8001a96:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
 8001a9a:	6800      	ldr	r0, [r0, #0]
 8001a9c:	b128      	cbz	r0, 8001aaa <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8001a9e:	6802      	ldr	r2, [r0, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 8001aa8:	bd08      	pop	{r3, pc}
  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
    mp->mp_next = mp->mp_next->ph_next;
  else if (mp->mp_provider != NULL)
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	d0f8      	beq.n	8001aa2 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8001ab0:	6858      	ldr	r0, [r3, #4]
 8001ab2:	4790      	blx	r2
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 8001aba:	bd08      	pop	{r3, pc}
 8001abc:	f3af 8000 	nop.w

08001ac0 <chEvtUnregister>:
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	e002      	b.n	8001ad0 <chEvtUnregister+0x10>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 8001aca:	428b      	cmp	r3, r1
 8001acc:	d007      	beq.n	8001ade <chEvtUnregister+0x1e>
 8001ace:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	4283      	cmp	r3, r0
 8001ad4:	d1f9      	bne.n	8001aca <chEvtUnregister+0xa>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	4770      	bx	lr
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 8001ade:	680b      	ldr	r3, [r1, #0]
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w

08001af0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af2:	2320      	movs	r3, #32
 8001af4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <chThdYield+0x54>)
 8001afa:	6810      	ldr	r0, [r2, #0]
 8001afc:	6994      	ldr	r4, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8001afe:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001b00:	68a1      	ldr	r1, [r4, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8001b02:	428b      	cmp	r3, r1
 8001b04:	d203      	bcs.n	8001b0e <chThdYield+0x1e>
 8001b06:	2300      	movs	r3, #0
 8001b08:	f383 8811 	msr	BASEPRI, r3
 8001b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001b0e:	6805      	ldr	r5, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001b10:	2701      	movs	r7, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001b12:	2600      	movs	r6, #0
 8001b14:	606a      	str	r2, [r5, #4]
 8001b16:	462b      	mov	r3, r5
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001b18:	7707      	strb	r7, [r0, #28]
 8001b1a:	6015      	str	r5, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001b1c:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001b1e:	7726      	strb	r6, [r4, #28]
 8001b20:	e000      	b.n	8001b24 <chThdYield+0x34>
 8001b22:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	4291      	cmp	r1, r2
 8001b28:	d9fb      	bls.n	8001b22 <chThdYield+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001b2a:	685a      	ldr	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001b2c:	4621      	mov	r1, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001b2e:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001b30:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001b32:	605c      	str	r4, [r3, #4]
 8001b34:	6014      	str	r4, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001b36:	f7fe fdab 	bl	8000690 <_port_switch>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20001e68 	.word	0x20001e68
 8001b48:	f3af 8000 	nop.w
 8001b4c:	f3af 8000 	nop.w

08001b50 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001b50:	b4f0      	push	{r4, r5, r6, r7}
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001b52:	4c15      	ldr	r4, [pc, #84]	; (8001ba8 <chVTDoResetI+0x58>)
 8001b54:	f64f 76ff 	movw	r6, #65535	; 0xffff

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b58:	4623      	mov	r3, r4
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001b5a:	6802      	ldr	r2, [r0, #0]
 8001b5c:	8907      	ldrh	r7, [r0, #8]
 8001b5e:	8911      	ldrh	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001b60:	6845      	ldr	r5, [r0, #4]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001b62:	4439      	add	r1, r7
 8001b64:	8111      	strh	r1, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001b66:	602a      	str	r2, [r5, #0]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b68:	f853 2f1c 	ldr.w	r2, [r3, #28]!
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001b6c:	6807      	ldr	r7, [r0, #0]
  vtp->vt_func = (vtfunc_t)NULL;
 8001b6e:	2100      	movs	r1, #0
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b70:	429a      	cmp	r2, r3
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001b72:	607d      	str	r5, [r7, #4]
  vtp->vt_func = (vtfunc_t)NULL;
 8001b74:	60c1      	str	r1, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001b76:	84a6      	strh	r6, [r4, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001b78:	d011      	beq.n	8001b9e <chVTDoResetI+0x4e>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8001b7a:	8912      	ldrh	r2, [r2, #8]
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8001b7c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8001b7e:	2a01      	cmp	r2, #1
 8001b80:	d906      	bls.n	8001b90 <chVTDoResetI+0x40>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8001b82:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001b84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	634b      	str	r3, [r1, #52]	; 0x34
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001b8c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b8e:	4770      	bx	lr
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      else
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8001b90:	3302      	adds	r3, #2
 8001b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	6353      	str	r3, [r2, #52]	; 0x34
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9c:	4770      	bx	lr
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8001b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ba2:	60d9      	str	r1, [r3, #12]
 8001ba4:	e7f2      	b.n	8001b8c <chVTDoResetI+0x3c>
 8001ba6:	bf00      	nop
 8001ba8:	20001e68 	.word	0x20001e68
 8001bac:	f3af 8000 	nop.w

08001bb0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8001bb2:	4e1e      	ldr	r6, [pc, #120]	; (8001c2c <chVTDoSetI+0x7c>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001bb4:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8001bb8:	4637      	mov	r7, r6
 8001bba:	f857 4f1c 	ldr.w	r4, [r7, #28]!
 8001bbe:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;
 8001bc2:	2901      	cmp	r1, #1
 8001bc4:	bf98      	it	ls
 8001bc6:	2102      	movls	r1, #2

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8001bc8:	42bc      	cmp	r4, r7

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001bca:	60c2      	str	r2, [r0, #12]
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001bcc:	6103      	str	r3, [r0, #16]
 8001bce:	b2aa      	uxth	r2, r5
    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8001bd0:	d01f      	beq.n	8001c12 <chVTDoSetI+0x62>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8001bd2:	8cf5      	ldrh	r5, [r6, #38]	; 0x26

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8001bd4:	8923      	ldrh	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8001bd6:	1b52      	subs	r2, r2, r5
 8001bd8:	4411      	add	r1, r2
 8001bda:	b289      	uxth	r1, r1

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8001bdc:	4299      	cmp	r1, r3
 8001bde:	d204      	bcs.n	8001bea <chVTDoSetI+0x3a>
 8001be0:	e012      	b.n	8001c08 <chVTDoSetI+0x58>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
    p = p->vt_next;
 8001be2:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 8001be4:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8001be6:	8923      	ldrh	r3, [r4, #8]
    delay -= p->vt_delta;
 8001be8:	b289      	uxth	r1, r1
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8001bea:	428b      	cmp	r3, r1
 8001bec:	d3f9      	bcc.n	8001be2 <chVTDoSetI+0x32>
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8001bf2:	6863      	ldr	r3, [r4, #4]
 8001bf4:	6004      	str	r4, [r0, #0]
 8001bf6:	6043      	str	r3, [r0, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8001bf8:	6060      	str	r0, [r4, #4]
 8001bfa:	6018      	str	r0, [r3, #0]
  vtp->vt_delta = delay
 8001bfc:	8101      	strh	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8001bfe:	8923      	ldrh	r3, [r4, #8]
 8001c00:	1a59      	subs	r1, r3, r1
 8001c02:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001c04:	84b2      	strh	r2, [r6, #36]	; 0x24
 8001c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8001c08:	440d      	add	r5, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001c0a:	b2ad      	uxth	r5, r5
 8001c0c:	f8ce 5034 	str.w	r5, [lr, #52]	; 0x34
 8001c10:	e7eb      	b.n	8001bea <chVTDoSetI+0x3a>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001c12:	188b      	adds	r3, r1, r2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001c14:	b29b      	uxth	r3, r3
  STM32_ST_TIM->SR     = 0;
 8001c16:	2700      	movs	r7, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001c18:	2502      	movs	r5, #2
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8001c1a:	84f2      	strh	r2, [r6, #38]	; 0x26
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001c1c:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8001c20:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
  STM32_ST_TIM->SR     = 0;
 8001c22:	f8ce 7010 	str.w	r7, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001c26:	f8ce 500c 	str.w	r5, [lr, #12]
 8001c2a:	e7de      	b.n	8001bea <chVTDoSetI+0x3a>
 8001c2c:	20001e68 	.word	0x20001e68

08001c30 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8001c30:	f7ff bd66 	b.w	8001700 <chSchDoRescheduleAhead>
 8001c34:	f3af 8000 	nop.w
 8001c38:	f3af 8000 	nop.w
 8001c3c:	f3af 8000 	nop.w

08001c40 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <chSchRescheduleS+0x14>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
 8001c46:	6892      	ldr	r2, [r2, #8]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d800      	bhi.n	8001c50 <chSchRescheduleS+0x10>
 8001c4e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001c50:	f7ff bd56 	b.w	8001700 <chSchDoRescheduleAhead>
 8001c54:	20001e68 	.word	0x20001e68
 8001c58:	f3af 8000 	nop.w
 8001c5c:	f3af 8000 	nop.w

08001c60 <chThdSetPriority>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8001c60:	b510      	push	{r4, lr}
 8001c62:	2320      	movs	r3, #32
 8001c64:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <chThdSetPriority+0x2c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
 8001c6e:	6899      	ldr	r1, [r3, #8]
 8001c70:	428c      	cmp	r4, r1
 8001c72:	d001      	beq.n	8001c78 <chThdSetPriority+0x18>
 8001c74:	4281      	cmp	r1, r0
 8001c76:	d200      	bcs.n	8001c7a <chThdSetPriority+0x1a>
    currp->p_prio = newprio;
 8001c78:	6098      	str	r0, [r3, #8]
  currp->p_realprio = newprio;
 8001c7a:	63d8      	str	r0, [r3, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8001c7c:	f7ff ffe0 	bl	8001c40 <chSchRescheduleS>
 8001c80:	2300      	movs	r3, #0
 8001c82:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return oldprio;
}
 8001c86:	4620      	mov	r0, r4
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001e68 	.word	0x20001e68

08001c90 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c92:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c94:	699e      	ldr	r6, [r3, #24]
 8001c96:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c98:	4605      	mov	r5, r0

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001c9a:	6201      	str	r1, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c9c:	68b0      	ldr	r0, [r6, #8]
 8001c9e:	4284      	cmp	r4, r0
 8001ca0:	d80c      	bhi.n	8001cbc <chSchWakeupS+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001ca6:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	4294      	cmp	r4, r2
 8001cac:	d9fb      	bls.n	8001ca6 <chSchWakeupS+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001cae:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001cb0:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
 8001cb2:	606a      	str	r2, [r5, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001cb4:	605d      	str	r5, [r3, #4]
 8001cb6:	6015      	str	r5, [r2, #0]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001cb8:	bcf0      	pop	{r4, r5, r6, r7}
 8001cba:	4770      	bx	lr
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 8001cbc:	461a      	mov	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	7731      	strb	r1, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001cc2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001cc4:	6891      	ldr	r1, [r2, #8]
 8001cc6:	4288      	cmp	r0, r1
 8001cc8:	d9fb      	bls.n	8001cc2 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001cca:	6854      	ldr	r4, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001ccc:	2701      	movs	r7, #1
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001cce:	e886 0014 	stmia.w	r6, {r2, r4}
  tp->p_prev->p_next = cp->p_prev = tp;
 8001cd2:	6056      	str	r6, [r2, #4]
 8001cd4:	6026      	str	r6, [r4, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001cd6:	772f      	strb	r7, [r5, #28]
    chSysSwitch(ntp, otp);
 8001cd8:	4631      	mov	r1, r6
 8001cda:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8001cdc:	619d      	str	r5, [r3, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001cde:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001ce0:	f7fe bcd6 	b.w	8000690 <_port_switch>
 8001ce4:	20001e68 	.word	0x20001e68
 8001ce8:	f3af 8000 	nop.w
 8001cec:	f3af 8000 	nop.w

08001cf0 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <chMtxUnlock+0x5c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001cf2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001cf4:	699d      	ldr	r5, [r3, #24]
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8001cfc:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001cfe:	68c3      	ldr	r3, [r0, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001d00:	42a0      	cmp	r0, r4
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001d02:	63ab      	str	r3, [r5, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001d04:	d01c      	beq.n	8001d40 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001d06:	6be9      	ldr	r1, [r5, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001d08:	b14b      	cbz	r3, 8001d1e <chMtxUnlock+0x2e>
 8001d0a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <chMtxUnlock+0x28>
 8001d10:	6892      	ldr	r2, [r2, #8]
 8001d12:	4291      	cmp	r1, r2
 8001d14:	bf38      	it	cc
 8001d16:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8001d18:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f5      	bne.n	8001d0a <chMtxUnlock+0x1a>
 8001d1e:	4603      	mov	r3, r0
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001d20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001d22:	6822      	ldr	r2, [r4, #0]
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001d24:	4620      	mov	r0, r4
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001d26:	60a9      	str	r1, [r5, #8]
 8001d28:	601a      	str	r2, [r3, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001d2e:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8001d30:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001d32:	63a3      	str	r3, [r4, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001d34:	f7ff ffac 	bl	8001c90 <chSchWakeupS>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
      mp->m_owner = NULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	6083      	str	r3, [r0, #8]
 8001d44:	2300      	movs	r3, #0
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
 8001d4c:	20001e68 	.word	0x20001e68

08001d50 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8001d50:	b508      	push	{r3, lr}
 8001d52:	2320      	movs	r3, #32
 8001d54:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0)
 8001d58:	6883      	ldr	r3, [r0, #8]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	6083      	str	r3, [r0, #8]
 8001d60:	dd03      	ble.n	8001d6a <chSemSignal+0x1a>
 8001d62:	2300      	movs	r3, #0
 8001d64:	f383 8811 	msr	BASEPRI, r3
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	4603      	mov	r3, r0
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001d6c:	6800      	ldr	r0, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8001d6e:	2100      	movs	r1, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001d70:	6802      	ldr	r2, [r0, #0]
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	6053      	str	r3, [r2, #4]
 8001d76:	f7ff ff8b 	bl	8001c90 <chSchWakeupS>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	bd08      	pop	{r3, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	f3af 8000 	nop.w
 8001d8c:	f3af 8000 	nop.w

08001d90 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d94:	4699      	mov	r9, r3
 8001d96:	4604      	mov	r4, r0
 8001d98:	2320      	movs	r3, #32
 8001d9a:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d9e:	4e19      	ldr	r6, [pc, #100]	; (8001e04 <chThdCreateStatic+0x74>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001da0:	3924      	subs	r1, #36	; 0x24
 8001da2:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001da4:	6973      	ldr	r3, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001da6:	f8df a060 	ldr.w	sl, [pc, #96]	; 8001e08 <chThdCreateStatic+0x78>
 8001daa:	60c7      	str	r7, [r0, #12]
 8001dac:	f840 9001 	str.w	r9, [r0, r1]
 8001db0:	9908      	ldr	r1, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001db2:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001db4:	f100 0928 	add.w	r9, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001db8:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001dbc:	f100 0e24 	add.w	lr, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001dc0:	f04f 0802 	mov.w	r8, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001dc4:	6079      	str	r1, [r7, #4]
 8001dc6:	f8c7 a020 	str.w	sl, [r7, #32]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001dca:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001dcc:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001dce:	6106      	str	r6, [r0, #16]
 8001dd0:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001dd2:	63c2      	str	r2, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001dd4:	f880 801c 	strb.w	r8, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001dd8:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001ddc:	7745      	strb	r5, [r0, #29]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001dde:	6170      	str	r0, [r6, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001de0:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001de2:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001de4:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8001de6:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001de8:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001dec:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
 8001df0:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001df4:	f7ff ff4c 	bl	8001c90 <chSchWakeupS>
 8001df8:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e02:	bf00      	nop
 8001e04:	20001e68 	.word	0x20001e68
 8001e08:	080006a1 	.word	0x080006a1
 8001e0c:	f3af 8000 	nop.w

08001e10 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001e12:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001e14:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001e16:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001e18:	6814      	ldr	r4, [r2, #0]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001e1a:	2501      	movs	r5, #1
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001e1c:	7708      	strb	r0, [r1, #28]
 8001e1e:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001e20:	7715      	strb	r5, [r2, #28]
 8001e22:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001e24:	4610      	mov	r0, r2
}
 8001e26:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001e28:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001e2a:	f7fe bc31 	b.w	8000690 <_port_switch>
 8001e2e:	bf00      	nop
 8001e30:	20001e68 	.word	0x20001e68
 8001e34:	f3af 8000 	nop.w
 8001e38:	f3af 8000 	nop.w
 8001e3c:	f3af 8000 	nop.w

08001e40 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001e40:	b510      	push	{r4, lr}
 8001e42:	2320      	movs	r3, #32
 8001e44:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
 8001e48:	4c0b      	ldr	r4, [pc, #44]	; (8001e78 <chMsgWait+0x38>)
 8001e4a:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001e52:	4298      	cmp	r0, r3
 8001e54:	d008      	beq.n	8001e68 <chMsgWait+0x28>
 8001e56:	6801      	ldr	r1, [r0, #0]
    chSchGoSleepS(CH_STATE_WTMSG);
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8001e58:	240d      	movs	r4, #13
 8001e5a:	6291      	str	r1, [r2, #40]	; 0x28
 8001e5c:	604b      	str	r3, [r1, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	7704      	strb	r4, [r0, #28]
 8001e62:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();
  return tp;
}
 8001e66:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
    chSchGoSleepS(CH_STATE_WTMSG);
 8001e68:	200e      	movs	r0, #14
 8001e6a:	f7ff ffd1 	bl	8001e10 <chSchGoSleepS>
 8001e6e:	69a2      	ldr	r2, [r4, #24]
 8001e70:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001e72:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8001e76:	e7ee      	b.n	8001e56 <chMsgWait+0x16>
 8001e78:	20001e68 	.word	0x20001e68
 8001e7c:	f3af 8000 	nop.w

08001e80 <chSemWait>:
 8001e80:	2320      	movs	r3, #32
 8001e82:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8001e86:	6883      	ldr	r3, [r0, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	6083      	str	r3, [r0, #8]
 8001e8e:	db04      	blt.n	8001e9a <chSemWait+0x1a>
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
    return currp->p_u.rdymsg;
  }
  return MSG_OK;
 8001e90:	2000      	movs	r0, #0
 8001e92:	2300      	movs	r3, #0
 8001e94:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8001e98:	4770      	bx	lr
 8001e9a:	4603      	mov	r3, r0
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8001e9c:	b510      	push	{r4, lr}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001e9e:	4c08      	ldr	r4, [pc, #32]	; (8001ec0 <chSemWait+0x40>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001ea0:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001ea2:	69a2      	ldr	r2, [r4, #24]
 8001ea4:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001ea6:	6859      	ldr	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001ea8:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8001eaa:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001eb0:	f7ff ffae 	bl	8001e10 <chSchGoSleepS>
    return currp->p_u.rdymsg;
 8001eb4:	69a3      	ldr	r3, [r4, #24]
 8001eb6:	6a18      	ldr	r0, [r3, #32]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8001ebe:	bd10      	pop	{r4, pc}
 8001ec0:	20001e68 	.word	0x20001e68
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	f3af 8000 	nop.w

08001ed0 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001ed4:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001ed6:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001ed8:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001eda:	d012      	beq.n	8001f02 <chSchGoSleepTimeoutS+0x32>
 8001edc:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001ede:	4c0c      	ldr	r4, [pc, #48]	; (8001f10 <chSchGoSleepTimeoutS+0x40>)
 8001ee0:	a801      	add	r0, sp, #4
 8001ee2:	69a3      	ldr	r3, [r4, #24]
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <chSchGoSleepTimeoutS+0x44>)
 8001ee6:	f7ff fe63 	bl	8001bb0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7ff ff90 	bl	8001e10 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8001ef0:	9b04      	ldr	r3, [sp, #16]
 8001ef2:	b113      	cbz	r3, 8001efa <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8001ef4:	a801      	add	r0, sp, #4
 8001ef6:	f7ff fe2b 	bl	8001b50 <chVTDoResetI>
  }
  else
    chSchGoSleepS(newstate);
  return currp->p_u.rdymsg;
 8001efa:	69a3      	ldr	r3, [r4, #24]
}
 8001efc:	6a18      	ldr	r0, [r3, #32]
 8001efe:	b007      	add	sp, #28
 8001f00:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8001f02:	f7ff ff85 	bl	8001e10 <chSchGoSleepS>
 8001f06:	4c02      	ldr	r4, [pc, #8]	; (8001f10 <chSchGoSleepTimeoutS+0x40>)
  return currp->p_u.rdymsg;
 8001f08:	69a3      	ldr	r3, [r4, #24]
}
 8001f0a:	6a18      	ldr	r0, [r3, #32]
 8001f0c:	b007      	add	sp, #28
 8001f0e:	bd30      	pop	{r4, r5, pc}
 8001f10:	20001e68 	.word	0x20001e68
 8001f14:	08001651 	.word	0x08001651
 8001f18:	f3af 8000 	nop.w
 8001f1c:	f3af 8000 	nop.w

08001f20 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001f20:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8001f22:	6880      	ldr	r0, [r0, #8]
 8001f24:	1e42      	subs	r2, r0, #1
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	db01      	blt.n	8001f30 <chSemWaitTimeoutS+0x10>
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	4770      	bx	lr
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8001f30:	b410      	push	{r4}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8001f32:	b161      	cbz	r1, 8001f4e <chSemWaitTimeoutS+0x2e>
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <chSemWaitTimeoutS+0x3c>)
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8001f36:	2005      	movs	r0, #5
  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8001f38:	6992      	ldr	r2, [r2, #24]
 8001f3a:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f3c:	685c      	ldr	r4, [r3, #4]
 8001f3e:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8001f46:	f85d 4b04 	ldr.w	r4, [sp], #4
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8001f4a:	f7ff bfc1 	b.w	8001ed0 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8001f4e:	6098      	str	r0, [r3, #8]
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8001f50:	f85d 4b04 	ldr.w	r4, [sp], #4
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20001e68 	.word	0x20001e68

08001f60 <chSemWaitTimeout>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8001f60:	b508      	push	{r3, lr}
 8001f62:	2320      	movs	r3, #32
 8001f64:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8001f68:	f7ff ffda 	bl	8001f20 <chSemWaitTimeoutS>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8001f72:	bd08      	pop	{r3, pc}
 8001f74:	f3af 8000 	nop.w
 8001f78:	f3af 8000 	nop.w
 8001f7c:	f3af 8000 	nop.w

08001f80 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout)
 8001f80:	b169      	cbz	r1, 8001f9e <chThdEnqueueTimeoutS+0x1e>
 8001f82:	4602      	mov	r2, r0
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001f86:	b410      	push	{r4}

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8001f88:	699b      	ldr	r3, [r3, #24]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f8a:	6844      	ldr	r4, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001f8c:	2004      	movs	r0, #4
 8001f8e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001f92:	6053      	str	r3, [r2, #4]
 8001f94:	6023      	str	r3, [r4, #0]
}
 8001f96:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001f9a:	f7ff bf99 	b.w	8001ed0 <chSchGoSleepTimeoutS>
}
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	4770      	bx	lr
 8001fa4:	20001e68 	.word	0x20001e68
 8001fa8:	f3af 8000 	nop.w
 8001fac:	f3af 8000 	nop.w

08001fb0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 8001fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	468b      	mov	fp, r1
 8001fba:	4616      	mov	r6, r2
 8001fbc:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 8001fbe:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001fc2:	f04f 0920 	mov.w	r9, #32
 8001fc6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 8001fca:	2700      	movs	r7, #0
 8001fcc:	46ba      	mov	sl, r7
 8001fce:	f8cd 9000 	str.w	r9, [sp]
 8001fd2:	68a5      	ldr	r5, [r4, #8]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001fd4:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8001fd8:	1e6a      	subs	r2, r5, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001fda:	b30d      	cbz	r5, 8002020 <chOQWriteTimeout+0x70>
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001fdc:	6963      	ldr	r3, [r4, #20]
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8001fde:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	6162      	str	r2, [r4, #20]
 8001fe4:	f89b 2000 	ldrb.w	r2, [fp]
 8001fe8:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top)
 8001fea:	6923      	ldr	r3, [r4, #16]
 8001fec:	6962      	ldr	r2, [r4, #20]
 8001fee:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8001ff0:	bf24      	itt	cs
 8001ff2:	68e3      	ldrcs	r3, [r4, #12]
 8001ff4:	6163      	strcs	r3, [r4, #20]

    if (nfy)
 8001ff6:	f1b8 0f00 	cmp.w	r8, #0
 8001ffa:	d001      	beq.n	8002000 <chOQWriteTimeout+0x50>
      nfy(oqp);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	47c0      	blx	r8
 8002000:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
    if (--n == 0)
 8002004:	3e01      	subs	r6, #1

    if (nfy)
      nfy(oqp);

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 8002006:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0)
 800200a:	d011      	beq.n	8002030 <chOQWriteTimeout+0x80>
 800200c:	9b00      	ldr	r3, [sp, #0]
 800200e:	f383 8811 	msr	BASEPRI, r3
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8002012:	46cb      	mov	fp, r9
 8002014:	68a5      	ldr	r5, [r4, #8]
 8002016:	f10b 0901 	add.w	r9, fp, #1
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 800201a:	1e6a      	subs	r2, r5, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800201c:	2d00      	cmp	r5, #0
 800201e:	d1dd      	bne.n	8001fdc <chOQWriteTimeout+0x2c>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 8002020:	4620      	mov	r0, r4
 8002022:	9901      	ldr	r1, [sp, #4]
 8002024:	f7ff ffac 	bl	8001f80 <chThdEnqueueTimeoutS>
 8002028:	2800      	cmp	r0, #0
 800202a:	d0d2      	beq.n	8001fd2 <chOQWriteTimeout+0x22>
 800202c:	f385 8811 	msr	BASEPRI, r5
    w++;
    if (--n == 0)
      return w;
    chSysLock();
  }
}
 8002030:	4638      	mov	r0, r7
 8002032:	b003      	add	sp, #12
 8002034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002038:	f3af 8000 	nop.w
 800203c:	f3af 8000 	nop.w

08002040 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	4604      	mov	r4, r0
 8002044:	460f      	mov	r7, r1
 8002046:	4616      	mov	r6, r2
 8002048:	2320      	movs	r3, #32
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	e005      	b.n	800205c <chOQPutTimeout+0x1c>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8002050:	4620      	mov	r0, r4
 8002052:	4631      	mov	r1, r6
 8002054:	f7ff ff94 	bl	8001f80 <chThdEnqueueTimeoutS>
 8002058:	2800      	cmp	r0, #0
 800205a:	db16      	blt.n	800208a <chOQPutTimeout+0x4a>
 800205c:	68a5      	ldr	r5, [r4, #8]
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 800205e:	2d00      	cmp	r5, #0
 8002060:	d0f6      	beq.n	8002050 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8002062:	6963      	ldr	r3, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8002064:	3d01      	subs	r5, #1
  *oqp->q_wrptr++ = b;
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	6162      	str	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 800206a:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 800206c:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top)
 800206e:	6923      	ldr	r3, [r4, #16]
 8002070:	6962      	ldr	r2, [r4, #20]
 8002072:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8002074:	bf24      	itt	cs
 8002076:	68e3      	ldrcs	r3, [r4, #12]
 8002078:	6163      	strcs	r3, [r4, #20]

  if (oqp->q_notify)
 800207a:	69e3      	ldr	r3, [r4, #28]
 800207c:	b10b      	cbz	r3, 8002082 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800207e:	4620      	mov	r0, r4
 8002080:	4798      	blx	r3
 8002082:	2000      	movs	r0, #0
 8002084:	f380 8811 	msr	BASEPRI, r0

  chSysUnlock();
  return Q_OK;
}
 8002088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800208a:	f385 8811 	msr	BASEPRI, r5
 800208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002090 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 8002090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002094:	4604      	mov	r4, r0
 8002096:	b083      	sub	sp, #12
 8002098:	4689      	mov	r9, r1
 800209a:	4693      	mov	fp, r2
 800209c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800209e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80020a2:	2720      	movs	r7, #32
 80020a4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80020a8:	2600      	movs	r6, #0
 80020aa:	46b2      	mov	sl, r6
 80020ac:	9701      	str	r7, [sp, #4]

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy)
 80020ae:	f1b8 0f00 	cmp.w	r8, #0
 80020b2:	d007      	beq.n	80020c4 <chIQReadTimeout+0x34>
      nfy(iqp);
 80020b4:	4620      	mov	r0, r4
 80020b6:	47c0      	blx	r8
 80020b8:	e004      	b.n	80020c4 <chIQReadTimeout+0x34>

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	f7ff ff5f 	bl	8001f80 <chThdEnqueueTimeoutS>
 80020c2:	b9c8      	cbnz	r0, 80020f8 <chIQReadTimeout+0x68>
 80020c4:	68a7      	ldr	r7, [r4, #8]
  chSysLock();
  while (true) {
    if (nfy)
      nfy(iqp);

    while (chIQIsEmptyI(iqp)) {
 80020c6:	2f00      	cmp	r7, #0
 80020c8:	d0f7      	beq.n	80020ba <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80020ca:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80020cc:	1e7b      	subs	r3, r7, #1
    *bp++ = *iqp->q_rdptr++;
 80020ce:	1c51      	adds	r1, r2, #1
 80020d0:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 80020d2:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80020d4:	7813      	ldrb	r3, [r2, #0]
 80020d6:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top)
 80020da:	6923      	ldr	r3, [r4, #16]
 80020dc:	69a2      	ldr	r2, [r4, #24]
 80020de:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 80020e0:	bf24      	itt	cs
 80020e2:	68e3      	ldrcs	r3, [r4, #12]
 80020e4:	61a3      	strcs	r3, [r4, #24]
 80020e6:	f38a 8811 	msr	BASEPRI, sl

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 80020ea:	3601      	adds	r6, #1
    if (--n == 0)
 80020ec:	45b3      	cmp	fp, r6
 80020ee:	d005      	beq.n	80020fc <chIQReadTimeout+0x6c>
 80020f0:	9b01      	ldr	r3, [sp, #4]
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	e7da      	b.n	80020ae <chIQReadTimeout+0x1e>
 80020f8:	f387 8811 	msr	BASEPRI, r7
      return r;

    chSysLock();
  }
}
 80020fc:	4630      	mov	r0, r6
 80020fe:	b003      	add	sp, #12
 8002100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002104:	f3af 8000 	nop.w
 8002108:	f3af 8000 	nop.w
 800210c:	f3af 8000 	nop.w

08002110 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	2320      	movs	r3, #32
 8002114:	460e      	mov	r6, r1
 8002116:	4604      	mov	r4, r0
 8002118:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify)
 800211c:	69c3      	ldr	r3, [r0, #28]
 800211e:	b13b      	cbz	r3, 8002130 <chIQGetTimeout+0x20>
    iqp->q_notify(iqp);
 8002120:	4798      	blx	r3
 8002122:	e005      	b.n	8002130 <chIQGetTimeout+0x20>

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8002124:	4620      	mov	r0, r4
 8002126:	4631      	mov	r1, r6
 8002128:	f7ff ff2a 	bl	8001f80 <chThdEnqueueTimeoutS>
 800212c:	2800      	cmp	r0, #0
 800212e:	db13      	blt.n	8002158 <chIQGetTimeout+0x48>
 8002130:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  if (iqp->q_notify)
    iqp->q_notify(iqp);

  while (chIQIsEmptyI(iqp)) {
 8002132:	2d00      	cmp	r5, #0
 8002134:	d0f6      	beq.n	8002124 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8002136:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top)
 8002138:	6921      	ldr	r1, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800213a:	1c53      	adds	r3, r2, #1
  if (iqp->q_rdptr >= iqp->q_top)
 800213c:	428b      	cmp	r3, r1
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800213e:	61a3      	str	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002140:	f105 35ff 	add.w	r5, r5, #4294967295
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top)
    iqp->q_rdptr = iqp->q_buffer;
 8002144:	bf28      	it	cs
 8002146:	68e3      	ldrcs	r3, [r4, #12]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8002148:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
 800214a:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top)
    iqp->q_rdptr = iqp->q_buffer;
 800214c:	bf28      	it	cs
 800214e:	61a3      	strcs	r3, [r4, #24]
 8002150:	2300      	movs	r3, #0
 8002152:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return b;
}
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f385 8811 	msr	BASEPRI, r5
 800215c:	bd70      	pop	{r4, r5, r6, pc}
 800215e:	bf00      	nop

08002160 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8002160:	b508      	push	{r3, lr}
 8002162:	4601      	mov	r1, r0
 8002164:	2320      	movs	r3, #32
 8002166:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800216a:	2008      	movs	r0, #8
 800216c:	f7ff feb0 	bl	8001ed0 <chSchGoSleepTimeoutS>
 8002170:	2300      	movs	r3, #0
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	bd08      	pop	{r3, pc}
 8002178:	f3af 8000 	nop.w
 800217c:	f3af 8000 	nop.w

08002180 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8002180:	b508      	push	{r3, lr}

  chThdSleep(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff ffec 	bl	8002160 <chThdSleep>
 8002188:	2320      	movs	r3, #32
 800218a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800218e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002192:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002194:	2300      	movs	r3, #0
 8002196:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 800219a:	b280      	uxth	r0, r0
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop

080021a0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80021a0:	b410      	push	{r4}
 80021a2:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80021a4:	2200      	movs	r2, #0
 80021a6:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <chSchReadyI+0x28>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80021aa:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80021ac:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	428a      	cmp	r2, r1
 80021b2:	d2fb      	bcs.n	80021ac <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80021b4:	685a      	ldr	r2, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
  return tp;
}
 80021b6:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80021b8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80021ba:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80021bc:	605c      	str	r4, [r3, #4]
 80021be:	6014      	str	r4, [r2, #0]
  return tp;
}
 80021c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20001e68 	.word	0x20001e68
 80021cc:	f3af 8000 	nop.w

080021d0 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 80021d0:	4603      	mov	r3, r0
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 80021d2:	6940      	ldr	r0, [r0, #20]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	b510      	push	{r4, lr}
 80021d8:	4290      	cmp	r0, r2
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	d01c      	beq.n	8002218 <chIQPutI+0x48>
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 80021de:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
 80021e0:	1c44      	adds	r4, r0, #1
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 80021e2:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
 80021e4:	615c      	str	r4, [r3, #20]
 80021e6:	7001      	strb	r1, [r0, #0]
  if (iqp->q_wrptr >= iqp->q_top)
 80021e8:	6959      	ldr	r1, [r3, #20]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	4291      	cmp	r1, r2
 80021ee:	d20c      	bcs.n	800220a <chIQPutI+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80021f0:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <chIQPutI+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80021f6:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80021f8:	2400      	movs	r4, #0
 80021fa:	6019      	str	r1, [r3, #0]
  chSchReadyI(tp);
 80021fc:	4610      	mov	r0, r2
 80021fe:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002200:	6214      	str	r4, [r2, #32]
  chSchReadyI(tp);
 8002202:	f7ff ffcd 	bl	80021a0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8002206:	4620      	mov	r0, r4
 8002208:	bd10      	pop	{r4, pc}
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top)
    iqp->q_wrptr = iqp->q_buffer;
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4293      	cmp	r3, r2
 8002212:	d1f0      	bne.n	80021f6 <chIQPutI+0x26>

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8002214:	2000      	movs	r0, #0
 8002216:	bd10      	pop	{r4, pc}
 8002218:	2a00      	cmp	r2, #0
 800221a:	d0e0      	beq.n	80021de <chIQPutI+0xe>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;
 800221c:	f06f 0003 	mvn.w	r0, #3
 8002220:	bd10      	pop	{r4, pc}
 8002222:	bf00      	nop
 8002224:	f3af 8000 	nop.w
 8002228:	f3af 8000 	nop.w
 800222c:	f3af 8000 	nop.w

08002230 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002232:	b570      	push	{r4, r5, r6, lr}
 8002234:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 8002236:	699c      	ldr	r4, [r3, #24]
 8002238:	f382 8811 	msr	BASEPRI, r2

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800223c:	f100 0528 	add.w	r5, r0, #40	; 0x28
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002240:	7f06      	ldrb	r6, [r0, #28]

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8002242:	6225      	str	r5, [r4, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8002244:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002246:	2e0e      	cmp	r6, #14
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8002248:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 800224a:	6025      	str	r5, [r4, #0]
  tp->p_prev = tqp->p_prev;
 800224c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800224e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002250:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002252:	d007      	beq.n	8002264 <chMsgSend+0x34>
    chSchReadyI(tp);
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8002254:	200c      	movs	r0, #12
 8002256:	f7ff fddb 	bl	8001e10 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800225a:	6a20      	ldr	r0, [r4, #32]
 800225c:	2300      	movs	r3, #0
 800225e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return msg;
}
 8002262:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
    chSchReadyI(tp);
 8002264:	f7ff ff9c 	bl	80021a0 <chSchReadyI>
 8002268:	e7f4      	b.n	8002254 <chMsgSend+0x24>
 800226a:	bf00      	nop
 800226c:	20001e68 	.word	0x20001e68

08002270 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002270:	6b43      	ldr	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002272:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002274:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002276:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002278:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800227a:	d00a      	beq.n	8002292 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 800227c:	2a0b      	cmp	r2, #11
 800227e:	d000      	beq.n	8002282 <chEvtSignalI+0x12>
 8002280:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8002282:	6a03      	ldr	r3, [r0, #32]
 8002284:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8002286:	428b      	cmp	r3, r1
 8002288:	d1fa      	bne.n	8002280 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	6203      	str	r3, [r0, #32]
    chSchReadyI(tp);
 800228e:	f7ff bf87 	b.w	80021a0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 8002292:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002294:	4219      	tst	r1, r3
 8002296:	d1f8      	bne.n	800228a <chEvtSignalI+0x1a>
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	f3af 8000 	nop.w

080022a0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80022a2:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80022a4:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80022a6:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80022a8:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80022aa:	d00d      	beq.n	80022c8 <chEvtBroadcastFlagsI+0x28>
    elp->el_flags |= flags;
 80022ac:	68e3      	ldr	r3, [r4, #12]
 80022ae:	432b      	orrs	r3, r5
 80022b0:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0))
 80022b2:	b115      	cbz	r5, 80022ba <chEvtBroadcastFlagsI+0x1a>
 80022b4:	6922      	ldr	r2, [r4, #16]
 80022b6:	4213      	tst	r3, r2
 80022b8:	d003      	beq.n	80022c2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 80022ba:	6860      	ldr	r0, [r4, #4]
 80022bc:	68a1      	ldr	r1, [r4, #8]
 80022be:	f7ff ffd7 	bl	8002270 <chEvtSignalI>
    elp = elp->el_next;
 80022c2:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80022c4:	42a6      	cmp	r6, r4
 80022c6:	d1f1      	bne.n	80022ac <chEvtBroadcastFlagsI+0xc>
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
 80022ca:	bf00      	nop
 80022cc:	f3af 8000 	nop.w

080022d0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80022d0:	4a13      	ldr	r2, [pc, #76]	; (8002320 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 80022d2:	b570      	push	{r4, r5, r6, lr}
 80022d4:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80022d6:	6994      	ldr	r4, [r2, #24]
 80022d8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 80022dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022de:	b1d3      	cbz	r3, 8002316 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 80022e0:	2600      	movs	r6, #0
 80022e2:	e00b      	b.n	80022fc <chMtxUnlockAll+0x2c>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 80022e4:	6b95      	ldr	r5, [r2, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80022e6:	6811      	ldr	r1, [r2, #0]
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 80022e8:	4610      	mov	r0, r2
 80022ea:	6019      	str	r1, [r3, #0]
 80022ec:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 80022ee:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 80022f0:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 80022f2:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 80022f4:	f7ff ff54 	bl	80021a0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 80022f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022fa:	b143      	cbz	r3, 800230e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80022fc:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 80022fe:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8002300:	4293      	cmp	r3, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8002302:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8002304:	d1ee      	bne.n	80022e4 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8002306:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8002308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f6      	bne.n	80022fc <chMtxUnlockAll+0x2c>
    ctp->p_prio = ctp->p_realprio;
 800230e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002310:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 8002312:	f7ff fc95 	bl	8001c40 <chSchRescheduleS>
 8002316:	2300      	movs	r3, #0
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	bd70      	pop	{r4, r5, r6, pc}
 800231e:	bf00      	nop
 8002320:	20001e68 	.word	0x20001e68
 8002324:	f3af 8000 	nop.w
 8002328:	f3af 8000 	nop.w
 800232c:	f3af 8000 	nop.w

08002330 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8002330:	b430      	push	{r4, r5}
 8002332:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8002334:	4a11      	ldr	r2, [pc, #68]	; (800237c <chMtxUnlockS+0x4c>)
 8002336:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8002338:	68c3      	ldr	r3, [r0, #12]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800233a:	6990      	ldr	r0, [r2, #24]
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800233c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800233e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002340:	d017      	beq.n	8002372 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002342:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002344:	b14b      	cbz	r3, 800235a <chMtxUnlockS+0x2a>
 8002346:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <chMtxUnlockS+0x24>
 800234c:	6892      	ldr	r2, [r2, #8]
 800234e:	4291      	cmp	r1, r2
 8002350:	bf38      	it	cc
 8002352:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8002354:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f5      	bne.n	8002346 <chMtxUnlockS+0x16>
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800235a:	6baa      	ldr	r2, [r5, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800235c:	682b      	ldr	r3, [r5, #0]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800235e:	6081      	str	r1, [r0, #8]
 8002360:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 8002362:	4628      	mov	r0, r5
 8002364:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8002366:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8002368:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800236a:	63ac      	str	r4, [r5, #56]	; 0x38
    else
      mp->m_owner = NULL;
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 800236c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 800236e:	f7ff bf17 	b.w	80021a0 <chSchReadyI>
    }
    else
      mp->m_owner = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	60a3      	str	r3, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 8002376:	bc30      	pop	{r4, r5}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20001e68 	.word	0x20001e68

08002380 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8002382:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <chMtxLockS+0xc4>)
 8002386:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8002388:	2a00      	cmp	r2, #0
 800238a:	d055      	beq.n	8002438 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800238c:	68a1      	ldr	r1, [r4, #8]
 800238e:	6893      	ldr	r3, [r2, #8]
 8002390:	4605      	mov	r5, r0
 8002392:	4299      	cmp	r1, r3
 8002394:	d906      	bls.n	80023a4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8002396:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8002398:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800239a:	2b06      	cmp	r3, #6
 800239c:	d033      	beq.n	8002406 <chMtxLockS+0x86>
 800239e:	2b07      	cmp	r3, #7
 80023a0:	d01d      	beq.n	80023de <chMtxLockS+0x5e>
 80023a2:	b19b      	cbz	r3, 80023cc <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80023a4:	462b      	mov	r3, r5
 80023a6:	e003      	b.n	80023b0 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	68a2      	ldr	r2, [r4, #8]
 80023ac:	4291      	cmp	r1, r2
 80023ae:	d302      	bcc.n	80023b6 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80023b0:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80023b2:	429d      	cmp	r5, r3
 80023b4:	d1f8      	bne.n	80023a8 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80023b6:	685a      	ldr	r2, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80023b8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 80023ba:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80023bc:	605c      	str	r4, [r3, #4]
 80023be:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 80023c0:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80023c2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80023c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80023c8:	f7ff bd22 	b.w	8001e10 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80023cc:	e892 000a 	ldmia.w	r2, {r1, r3}
 80023d0:	6019      	str	r1, [r3, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 80023d2:	4610      	mov	r0, r2
  tp->p_next->p_prev = tp->p_prev;
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	6053      	str	r3, [r2, #4]
 80023d8:	f7ff fee2 	bl	80021a0 <chSchReadyI>
 80023dc:	e7e2      	b.n	80023a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80023de:	6817      	ldr	r7, [r2, #0]
 80023e0:	6850      	ldr	r0, [r2, #4]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 80023e2:	6a16      	ldr	r6, [r2, #32]
 80023e4:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80023e6:	6817      	ldr	r7, [r2, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80023e8:	4633      	mov	r3, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	e002      	b.n	80023f4 <chMtxLockS+0x74>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80023ee:	6898      	ldr	r0, [r3, #8]
 80023f0:	4288      	cmp	r0, r1
 80023f2:	d302      	bcc.n	80023fa <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80023f4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80023f6:	429e      	cmp	r6, r3
 80023f8:	d1f9      	bne.n	80023ee <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80023fa:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80023fc:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 80023fe:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	600a      	str	r2, [r1, #0]
 8002404:	e7ce      	b.n	80023a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8002406:	6817      	ldr	r7, [r2, #0]
 8002408:	6850      	ldr	r0, [r2, #4]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 800240a:	6a16      	ldr	r6, [r2, #32]
 800240c:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800240e:	6817      	ldr	r7, [r2, #0]
 8002410:	4633      	mov	r3, r6
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	e002      	b.n	800241c <chMtxLockS+0x9c>
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	4288      	cmp	r0, r1
 800241a:	d302      	bcc.n	8002422 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 800241c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800241e:	429e      	cmp	r6, r3
 8002420:	d1f9      	bne.n	8002416 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002422:	6859      	ldr	r1, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8002424:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8002426:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	600a      	str	r2, [r1, #0]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 800242c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800242e:	68a1      	ldr	r1, [r4, #8]
 8002430:	6893      	ldr	r3, [r2, #8]
 8002432:	428b      	cmp	r3, r1
 8002434:	d3af      	bcc.n	8002396 <chMtxLockS+0x16>
 8002436:	e7b5      	b.n	80023a4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8002438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800243a:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 800243c:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 800243e:	63a0      	str	r0, [r4, #56]	; 0x38
 8002440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002442:	bf00      	nop
 8002444:	20001e68 	.word	0x20001e68
 8002448:	f3af 8000 	nop.w
 800244c:	f3af 8000 	nop.w

08002450 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8002450:	b508      	push	{r3, lr}
 8002452:	2320      	movs	r3, #32
 8002454:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  chMtxLockS(mp);
 8002458:	f7ff ff92 	bl	8002380 <chMtxLockS>
 800245c:	2300      	movs	r3, #0
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	bd08      	pop	{r3, pc}
 8002464:	f3af 8000 	nop.w
 8002468:	f3af 8000 	nop.w
 800246c:	f3af 8000 	nop.w

08002470 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002470:	b570      	push	{r4, r5, r6, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 8002472:	4c0f      	ldr	r4, [pc, #60]	; (80024b0 <chHeapStatus+0x40>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002474:	460e      	mov	r6, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 8002476:	2800      	cmp	r0, #0
 8002478:	bf18      	it	ne
 800247a:	4604      	movne	r4, r0

  H_LOCK(heapp);
 800247c:	f104 0510 	add.w	r5, r4, #16
 8002480:	4628      	mov	r0, r5
 8002482:	f7ff ffe5 	bl	8002450 <chMtxLock>

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002486:	68a3      	ldr	r3, [r4, #8]
 8002488:	b173      	cbz	r3, 80024a8 <chHeapStatus+0x38>
 800248a:	2200      	movs	r2, #0
 800248c:	4614      	mov	r4, r2
    sz += qp->h.u.next->h.size;
 800248e:	6858      	ldr	r0, [r3, #4]
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 8002494:	4402      	add	r2, r0
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  if (sizep)
 800249a:	b106      	cbz	r6, 800249e <chHeapStatus+0x2e>
    *sizep = sz;
 800249c:	6032      	str	r2, [r6, #0]

  H_UNLOCK(heapp);
 800249e:	4628      	mov	r0, r5
 80024a0:	f7ff fc26 	bl	8001cf0 <chMtxUnlock>
  return n;
}
 80024a4:	4620      	mov	r0, r4
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
  if (heapp == NULL)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
 80024a8:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 80024aa:	461c      	mov	r4, r3
 80024ac:	e7f5      	b.n	800249a <chHeapStatus+0x2a>
 80024ae:	bf00      	nop
 80024b0:	200012a8 	.word	0x200012a8
 80024b4:	f3af 8000 	nop.w
 80024b8:	f3af 8000 	nop.w
 80024bc:	f3af 8000 	nop.w

080024c0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 80024c2:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80024c6:	4606      	mov	r6, r0
  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
  H_LOCK(heapp);
 80024c8:	f105 0710 	add.w	r7, r5, #16
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 80024cc:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80024d0:	3508      	adds	r5, #8
  H_LOCK(heapp);
 80024d2:	4638      	mov	r0, r7
 80024d4:	f7ff ffbc 	bl	8002450 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80024d8:	462b      	mov	r3, r5
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80024da:	42ab      	cmp	r3, r5
 80024dc:	d004      	beq.n	80024e8 <chHeapFree+0x28>
 80024de:	42a3      	cmp	r3, r4
 80024e0:	d302      	bcc.n	80024e8 <chHeapFree+0x28>
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	42ab      	cmp	r3, r5
 80024e6:	d1fa      	bne.n	80024de <chHeapFree+0x1e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80024e8:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 80024ea:	b11a      	cbz	r2, 80024f4 <chHeapFree+0x34>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 80024ec:	4294      	cmp	r4, r2
 80024ee:	d301      	bcc.n	80024f4 <chHeapFree+0x34>
 80024f0:	4613      	mov	r3, r2
 80024f2:	e7f2      	b.n	80024da <chHeapFree+0x1a>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 80024f4:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 80024f8:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 80024fc:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 80024fe:	f101 0208 	add.w	r2, r1, #8
 8002502:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8002506:	18a0      	adds	r0, r4, r2
 8002508:	42a8      	cmp	r0, r5
 800250a:	d00a      	beq.n	8002522 <chHeapFree+0x62>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	f101 0208 	add.w	r2, r1, #8
 8002512:	441a      	add	r2, r3
 8002514:	4294      	cmp	r4, r2
 8002516:	d010      	beq.n	800253a <chHeapFree+0x7a>
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8002518:	4638      	mov	r0, r7
  return;
}
 800251a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 800251e:	f7ff bbe7 	b.w	8001cf0 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002522:	6845      	ldr	r5, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002524:	58a0      	ldr	r0, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002526:	194a      	adds	r2, r1, r5
 8002528:	3208      	adds	r2, #8
        hp->h.u.next = hp->h.u.next->h.u.next;
 800252a:	e906 0005 	stmdb	r6, {r0, r2}
      }
      if ((LIMIT(qp) == hp)) {
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	f101 0208 	add.w	r2, r1, #8
 8002534:	441a      	add	r2, r3
 8002536:	4294      	cmp	r4, r2
 8002538:	d1ee      	bne.n	8002518 <chHeapFree+0x58>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 800253a:	e916 0005 	ldmdb	r6, {r0, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 800253e:	440a      	add	r2, r1
 8002540:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8002542:	e883 0005 	stmia.w	r3, {r0, r2}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8002546:	4638      	mov	r0, r7
  return;
}
 8002548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 800254c:	f7ff bbd0 	b.w	8001cf0 <chMtxUnlock>

08002550 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8002550:	b430      	push	{r4, r5}
 8002552:	4602      	mov	r2, r0
 8002554:	2120      	movs	r1, #32
 8002556:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 800255a:	7f83      	ldrb	r3, [r0, #30]
 800255c:	2400      	movs	r4, #0
 800255e:	3b01      	subs	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	7783      	strb	r3, [r0, #30]
 8002564:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 8002568:	b913      	cbnz	r3, 8002570 <chThdRelease+0x20>
 800256a:	7f04      	ldrb	r4, [r0, #28]
 800256c:	2c0f      	cmp	r4, #15
 800256e:	d001      	beq.n	8002574 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8002570:	bc30      	pop	{r4, r5}
 8002572:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8002574:	7f44      	ldrb	r4, [r0, #29]
 8002576:	f004 0403 	and.w	r4, r4, #3
 800257a:	2c01      	cmp	r4, #1
 800257c:	d00f      	beq.n	800259e <chThdRelease+0x4e>
 800257e:	2c02      	cmp	r4, #2
 8002580:	d1f6      	bne.n	8002570 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8002582:	6905      	ldr	r5, [r0, #16]
 8002584:	6944      	ldr	r4, [r0, #20]
#endif
      chPoolFree(tp->p_mpool, tp);
 8002586:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8002588:	6125      	str	r5, [r4, #16]
 800258a:	6915      	ldr	r5, [r2, #16]
 800258c:	616c      	str	r4, [r5, #20]
 800258e:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002592:	6801      	ldr	r1, [r0, #0]
 8002594:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8002596:	6002      	str	r2, [r0, #0]
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	e7e8      	b.n	8002570 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 800259e:	6943      	ldr	r3, [r0, #20]
 80025a0:	6901      	ldr	r1, [r0, #16]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 80025a2:	bc30      	pop	{r4, r5}
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 80025a4:	6119      	str	r1, [r3, #16]
 80025a6:	6902      	ldr	r2, [r0, #16]
 80025a8:	6153      	str	r3, [r2, #20]
#endif
      chHeapFree(tp);
 80025aa:	f7ff bf89 	b.w	80024c0 <chHeapFree>
 80025ae:	bf00      	nop

080025b0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80025b0:	b510      	push	{r4, lr}
 80025b2:	2320      	movs	r3, #32
 80025b4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 80025ba:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist)
 80025bc:	429c      	cmp	r4, r3
    ntp = NULL;
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 80025be:	bf17      	itett	ne
 80025c0:	7fa3      	ldrbne	r3, [r4, #30]
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
    ntp = NULL;
 80025c2:	2400      	moveq	r4, #0
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 80025c4:	3301      	addne	r3, #1
 80025c6:	77a3      	strbne	r3, [r4, #30]
 80025c8:	2300      	movs	r3, #0
 80025ca:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 80025ce:	f7ff ffbf 	bl	8002550 <chThdRelease>
#endif
  return ntp;
}
 80025d2:	4620      	mov	r0, r4
 80025d4:	bd10      	pop	{r4, pc}
 80025d6:	bf00      	nop
 80025d8:	20001e68 	.word	0x20001e68
 80025dc:	f3af 8000 	nop.w

080025e0 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4604      	mov	r4, r0
 80025e4:	2320      	movs	r3, #32
 80025e6:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 80025ea:	7f03      	ldrb	r3, [r0, #28]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d007      	beq.n	8002600 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 80025f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80025f4:	699b      	ldr	r3, [r3, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 80025f6:	2009      	movs	r0, #9
 80025f8:	601a      	str	r2, [r3, #0]
  tlp->p_next = tp;
 80025fa:	6263      	str	r3, [r4, #36]	; 0x24
 80025fc:	f7ff fc08 	bl	8001e10 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8002600:	6a25      	ldr	r5, [r4, #32]
 8002602:	2300      	movs	r3, #0
 8002604:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff ffa1 	bl	8002550 <chThdRelease>
#endif
  return msg;
}
 800260e:	4628      	mov	r0, r5
 8002610:	bd38      	pop	{r3, r4, r5, pc}
 8002612:	bf00      	nop
 8002614:	20001e68 	.word	0x20001e68
 8002618:	f3af 8000 	nop.w
 800261c:	f3af 8000 	nop.w

08002620 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	4c07      	ldr	r4, [pc, #28]	; (8002640 <test_wait_threads+0x20>)
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 8002624:	2600      	movs	r6, #0
 8002626:	f104 0514 	add.w	r5, r4, #20
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800262a:	f854 0b04 	ldr.w	r0, [r4], #4
 800262e:	b118      	cbz	r0, 8002638 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8002630:	f7ff ffd6 	bl	80025e0 <chThdWait>
      threads[i] = NULL;
 8002634:	f844 6c04 	str.w	r6, [r4, #-4]
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
 8002638:	42ac      	cmp	r4, r5
 800263a:	d1f6      	bne.n	800262a <test_wait_threads+0xa>
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
    }
}
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	bf00      	nop
 8002640:	2000173c 	.word	0x2000173c
 8002644:	f3af 8000 	nop.w
 8002648:	f3af 8000 	nop.w
 800264c:	f3af 8000 	nop.w

08002650 <TestThread>:
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8002650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8002654:	4ca1      	ldr	r4, [pc, #644]	; (80028dc <TestThread+0x28c>)
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8002656:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8002658:	6020      	str	r0, [r4, #0]
  test_println("");
 800265a:	48a1      	ldr	r0, [pc, #644]	; (80028e0 <TestThread+0x290>)
 800265c:	f7ff f9b8 	bl	80019d0 <test_println>
  test_println("*** ChibiOS/RT test suite");
 8002660:	48a0      	ldr	r0, [pc, #640]	; (80028e4 <TestThread+0x294>)
 8002662:	f7ff f9b5 	bl	80019d0 <test_println>
  test_println("***");
 8002666:	4da0      	ldr	r5, [pc, #640]	; (80028e8 <TestThread+0x298>)
 8002668:	48a0      	ldr	r0, [pc, #640]	; (80028ec <TestThread+0x29c>)
 800266a:	f7ff f9b1 	bl	80019d0 <test_println>
 800266e:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002678:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800267c:	2900      	cmp	r1, #0
 800267e:	d1f7      	bne.n	8002670 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 8002680:	489b      	ldr	r0, [pc, #620]	; (80028f0 <TestThread+0x2a0>)
 8002682:	4d9c      	ldr	r5, [pc, #624]	; (80028f4 <TestThread+0x2a4>)
 8002684:	f7ff f9a4 	bl	80019d0 <test_println>
 8002688:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	6803      	ldr	r3, [r0, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002692:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002696:	2900      	cmp	r1, #0
 8002698:	d1f7      	bne.n	800268a <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 800269a:	4897      	ldr	r0, [pc, #604]	; (80028f8 <TestThread+0x2a8>)
 800269c:	4d97      	ldr	r5, [pc, #604]	; (80028fc <TestThread+0x2ac>)
 800269e:	f7ff f997 	bl	80019d0 <test_println>
 80026a2:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80026a4:	6820      	ldr	r0, [r4, #0]
 80026a6:	6803      	ldr	r3, [r0, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80026ac:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80026b0:	2900      	cmp	r1, #0
 80026b2:	d1f7      	bne.n	80026a4 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 80026b4:	4892      	ldr	r0, [pc, #584]	; (8002900 <TestThread+0x2b0>)
 80026b6:	4d93      	ldr	r5, [pc, #588]	; (8002904 <TestThread+0x2b4>)
 80026b8:	f7ff f98a 	bl	80019d0 <test_println>
 80026bc:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80026be:	6820      	ldr	r0, [r4, #0]
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80026c6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80026ca:	2900      	cmp	r1, #0
 80026cc:	d1f7      	bne.n	80026be <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 80026ce:	488e      	ldr	r0, [pc, #568]	; (8002908 <TestThread+0x2b8>)
 80026d0:	4d8e      	ldr	r5, [pc, #568]	; (800290c <TestThread+0x2bc>)
 80026d2:	f7ff f97d 	bl	80019d0 <test_println>
 80026d6:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80026d8:	6820      	ldr	r0, [r4, #0]
 80026da:	6803      	ldr	r3, [r0, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80026e0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80026e4:	2900      	cmp	r1, #0
 80026e6:	d1f7      	bne.n	80026d8 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 80026e8:	4889      	ldr	r0, [pc, #548]	; (8002910 <TestThread+0x2c0>)
 80026ea:	4d8a      	ldr	r5, [pc, #552]	; (8002914 <TestThread+0x2c4>)
 80026ec:	f7ff f970 	bl	80019d0 <test_println>
 80026f0:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80026f2:	6820      	ldr	r0, [r4, #0]
 80026f4:	6803      	ldr	r3, [r0, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80026fa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80026fe:	2900      	cmp	r1, #0
 8002700:	d1f7      	bne.n	80026f2 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8002702:	4885      	ldr	r0, [pc, #532]	; (8002918 <TestThread+0x2c8>)
 8002704:	4d85      	ldr	r5, [pc, #532]	; (800291c <TestThread+0x2cc>)
 8002706:	f7ff f963 	bl	80019d0 <test_println>
 800270a:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800270c:	6820      	ldr	r0, [r4, #0]
 800270e:	6803      	ldr	r3, [r0, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002714:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002718:	2900      	cmp	r1, #0
 800271a:	d1f7      	bne.n	800270c <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800271c:	4880      	ldr	r0, [pc, #512]	; (8002920 <TestThread+0x2d0>)
 800271e:	4d81      	ldr	r5, [pc, #516]	; (8002924 <TestThread+0x2d4>)
 8002720:	f7ff f956 	bl	80019d0 <test_println>
 8002724:	212a      	movs	r1, #42	; 0x2a
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002726:	6820      	ldr	r0, [r4, #0]
 8002728:	6803      	ldr	r3, [r0, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800272e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002732:	2900      	cmp	r1, #0
 8002734:	d1f7      	bne.n	8002726 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8002736:	487c      	ldr	r0, [pc, #496]	; (8002928 <TestThread+0x2d8>)
 8002738:	9100      	str	r1, [sp, #0]
 800273a:	f7ff f949 	bl	80019d0 <test_println>
#endif
  test_println("");
 800273e:	4868      	ldr	r0, [pc, #416]	; (80028e0 <TestThread+0x290>)
 8002740:	f7ff f946 	bl	80019d0 <test_println>

  global_fail = FALSE;
 8002744:	4b79      	ldr	r3, [pc, #484]	; (800292c <TestThread+0x2dc>)
 8002746:	9900      	ldr	r1, [sp, #0]
 8002748:	4f79      	ldr	r7, [pc, #484]	; (8002930 <TestThread+0x2e0>)
 800274a:	7019      	strb	r1, [r3, #0]
 800274c:	4b79      	ldr	r3, [pc, #484]	; (8002934 <TestThread+0x2e4>)
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800274e:	f8df b18c 	ldr.w	fp, [pc, #396]	; 80028dc <TestThread+0x28c>
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9b00      	ldr	r3, [sp, #0]
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002756:	2600      	movs	r6, #0
 8002758:	3301      	adds	r3, #1
 800275a:	9300      	str	r3, [sp, #0]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 800275c:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8002760:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 808b 	beq.w	8002880 <TestThread+0x230>
      print_line();
 800276a:	4d73      	ldr	r5, [pc, #460]	; (8002938 <TestThread+0x2e8>)
 800276c:	f7fe ff30 	bl	80015d0 <print_line>
 8002770:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	6803      	ldr	r3, [r0, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800277a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800277e:	2900      	cmp	r1, #0
 8002780:	d1f7      	bne.n	8002772 <TestThread+0x122>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8002782:	9800      	ldr	r0, [sp, #0]
 8002784:	f7ff f954 	bl	8001a30 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002788:	f8db 0000 	ldr.w	r0, [fp]
 800278c:	212e      	movs	r1, #46	; 0x2e
 800278e:	6803      	ldr	r3, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002790:	3601      	adds	r6, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4798      	blx	r3
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8002796:	4d69      	ldr	r5, [pc, #420]	; (800293c <TestThread+0x2ec>)
 8002798:	4630      	mov	r0, r6
 800279a:	f7ff f949 	bl	8001a30 <test_printn>
 800279e:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	6803      	ldr	r3, [r0, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80027a8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d1f7      	bne.n	80027a0 <TestThread+0x150>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 80027b0:	f8d8 3000 	ldr.w	r3, [r8]
 80027b4:	681d      	ldr	r5, [r3, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80027b6:	7829      	ldrb	r1, [r5, #0]
 80027b8:	b139      	cbz	r1, 80027ca <TestThread+0x17a>
    chSequentialStreamPut(chp, *msgp++);
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	6803      	ldr	r3, [r0, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80027c2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80027c6:	2900      	cmp	r1, #0
 80027c8:	d1f7      	bne.n	80027ba <TestThread+0x16a>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 80027ca:	485d      	ldr	r0, [pc, #372]	; (8002940 <TestThread+0x2f0>)
 80027cc:	f7ff f900 	bl	80019d0 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 80027d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80027d4:	f7ff fcc4 	bl	8002160 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80027d8:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <TestThread+0x2f4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 80027da:	f8d8 a000 	ldr.w	sl, [r8]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80027de:	2300      	movs	r3, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	6053      	str	r3, [r2, #4]
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	6113      	str	r3, [r2, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80027ea:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002970 <TestThread+0x320>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80027ee:	4d56      	ldr	r5, [pc, #344]	; (8002948 <TestThread+0x2f8>)
 80027f0:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8002958 <TestThread+0x308>
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 80027f4:	f8da 2004 	ldr.w	r2, [sl, #4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 80027f8:	f888 3000 	strb.w	r3, [r8]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80027fc:	f8c5 9000 	str.w	r9, [r5]
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8002800:	b102      	cbz	r2, 8002804 <TestThread+0x1b4>
    tcp->setup();
 8002802:	4790      	blx	r2
  tcp->execute();
 8002804:	f8da 300c 	ldr.w	r3, [sl, #12]
 8002808:	4798      	blx	r3
  if (tcp->teardown != NULL)
 800280a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800280e:	b103      	cbz	r3, 8002812 <TestThread+0x1c2>
    tcp->teardown();
 8002810:	4798      	blx	r3

  test_wait_threads();
 8002812:	f7ff ff05 	bl	8002620 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8002816:	f898 3000 	ldrb.w	r3, [r8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d051      	beq.n	80028c2 <TestThread+0x272>
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 800281e:	4f4b      	ldr	r7, [pc, #300]	; (800294c <TestThread+0x2fc>)
 8002820:	212d      	movs	r1, #45	; 0x2d
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8002822:	6820      	ldr	r0, [r4, #0]
 8002824:	6803      	ldr	r3, [r0, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800282a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800282e:	2900      	cmp	r1, #0
 8002830:	d1f7      	bne.n	8002822 <TestThread+0x1d2>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <TestThread+0x300>)
 8002834:	4f47      	ldr	r7, [pc, #284]	; (8002954 <TestThread+0x304>)
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	f7ff f8fa 	bl	8001a30 <test_printn>
 800283c:	2120      	movs	r1, #32
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	6803      	ldr	r3, [r0, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8002846:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800284a:	2900      	cmp	r1, #0
 800284c:	d1f7      	bne.n	800283e <TestThread+0x1ee>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 800284e:	682b      	ldr	r3, [r5, #0]
 8002850:	454b      	cmp	r3, r9
 8002852:	d909      	bls.n	8002868 <TestThread+0x218>
 8002854:	4f40      	ldr	r7, [pc, #256]	; (8002958 <TestThread+0x308>)
    chSequentialStreamPut(chp, *cp++);
 8002856:	6820      	ldr	r0, [r4, #0]
 8002858:	f817 1b01 	ldrb.w	r1, [r7], #1
 800285c:	6803      	ldr	r3, [r0, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4798      	blx	r3
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8002862:	682b      	ldr	r3, [r5, #0]
 8002864:	429f      	cmp	r7, r3
 8002866:	d3f6      	bcc.n	8002856 <TestThread+0x206>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8002868:	483c      	ldr	r0, [pc, #240]	; (800295c <TestThread+0x30c>)
 800286a:	f7ff f8b1 	bl	80019d0 <test_println>
 800286e:	9b01      	ldr	r3, [sp, #4]
 8002870:	681f      	ldr	r7, [r3, #0]

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8002872:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8002876:	eb07 0886 	add.w	r8, r7, r6, lsl #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	f47f af75 	bne.w	800276a <TestThread+0x11a>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8002880:	9b01      	ldr	r3, [sp, #4]
 8002882:	f853 7f04 	ldr.w	r7, [r3, #4]!
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2f00      	cmp	r7, #0
 800288a:	f47f af63 	bne.w	8002754 <TestThread+0x104>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 800288e:	f7fe fe9f 	bl	80015d0 <print_line>
  test_println("");
 8002892:	4d33      	ldr	r5, [pc, #204]	; (8002960 <TestThread+0x310>)
 8002894:	4812      	ldr	r0, [pc, #72]	; (80028e0 <TestThread+0x290>)
 8002896:	f7ff f89b 	bl	80019d0 <test_println>
 800289a:	2146      	movs	r1, #70	; 0x46
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	6803      	ldr	r3, [r0, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80028a4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80028a8:	2900      	cmp	r1, #0
 80028aa:	d1f7      	bne.n	800289c <TestThread+0x24c>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <TestThread+0x2dc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b95b      	cbnz	r3, 80028ca <TestThread+0x27a>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 80028b2:	482c      	ldr	r0, [pc, #176]	; (8002964 <TestThread+0x314>)
 80028b4:	f7ff f88c 	bl	80019d0 <test_println>

  return (msg_t)global_fail;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <TestThread+0x2dc>)
 80028ba:	7818      	ldrb	r0, [r3, #0]
}
 80028bc:	b003      	add	sp, #12
 80028be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 80028c2:	4829      	ldr	r0, [pc, #164]	; (8002968 <TestThread+0x318>)
 80028c4:	f7ff f884 	bl	80019d0 <test_println>
 80028c8:	e748      	b.n	800275c <TestThread+0x10c>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 80028ca:	4828      	ldr	r0, [pc, #160]	; (800296c <TestThread+0x31c>)
 80028cc:	f7ff f880 	bl	80019d0 <test_println>
  else
    test_println("SUCCESS");

  return (msg_t)global_fail;
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <TestThread+0x2dc>)
 80028d2:	7818      	ldrb	r0, [r3, #0]
}
 80028d4:	b003      	add	sp, #12
 80028d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028da:	bf00      	nop
 80028dc:	20000d18 	.word	0x20000d18
 80028e0:	0800a02c 	.word	0x0800a02c
 80028e4:	080099b8 	.word	0x080099b8
 80028e8:	080098d8 	.word	0x080098d8
 80028ec:	080099d4 	.word	0x080099d4
 80028f0:	080099fc 	.word	0x080099fc
 80028f4:	080098ec 	.word	0x080098ec
 80028f8:	08009a08 	.word	0x08009a08
 80028fc:	08009900 	.word	0x08009900
 8002900:	08009a20 	.word	0x08009a20
 8002904:	08009914 	.word	0x08009914
 8002908:	08009a68 	.word	0x08009a68
 800290c:	08009928 	.word	0x08009928
 8002910:	08009a70 	.word	0x08009a70
 8002914:	0800993c 	.word	0x0800993c
 8002918:	08009a7c 	.word	0x08009a7c
 800291c:	08009950 	.word	0x08009950
 8002920:	08009a94 	.word	0x08009a94
 8002924:	08009964 	.word	0x08009964
 8002928:	08009ac0 	.word	0x08009ac0
 800292c:	20000d14 	.word	0x20000d14
 8002930:	08009650 	.word	0x08009650
 8002934:	08009740 	.word	0x08009740
 8002938:	08009978 	.word	0x08009978
 800293c:	08009988 	.word	0x08009988
 8002940:	080099d8 	.word	0x080099d8
 8002944:	2000173c 	.word	0x2000173c
 8002948:	20000d10 	.word	0x20000d10
 800294c:	0800998c 	.word	0x0800998c
 8002950:	20000d2c 	.word	0x20000d2c
 8002954:	080099a4 	.word	0x080099a4
 8002958:	20000d1c 	.word	0x20000d1c
 800295c:	080099dc 	.word	0x080099dc
 8002960:	080099a8 	.word	0x080099a8
 8002964:	080099ec 	.word	0x080099ec
 8002968:	080099e0 	.word	0x080099e0
 800296c:	080099f4 	.word	0x080099f4
 8002970:	20000d15 	.word	0x20000d15
 8002974:	f3af 8000 	nop.w
 8002978:	f3af 8000 	nop.w
 800297c:	f3af 8000 	nop.w

08002980 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8002982:	4e21      	ldr	r6, [pc, #132]	; (8002a08 <chHeapAlloc+0x88>)

  size = MEM_ALIGN_NEXT(size);
 8002984:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8002986:	2800      	cmp	r0, #0
 8002988:	bf18      	it	ne
 800298a:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);
 800298c:	f106 0710 	add.w	r7, r6, #16
 8002990:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 8002992:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8002996:	f106 0408 	add.w	r4, r6, #8
  H_LOCK(heapp);
 800299a:	f7ff fd59 	bl	8002450 <chMtxLock>
 800299e:	e003      	b.n	80029a8 <chHeapAlloc+0x28>

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80029a0:	6843      	ldr	r3, [r0, #4]
 80029a2:	429d      	cmp	r5, r3
 80029a4:	d912      	bls.n	80029cc <chHeapAlloc+0x4c>
 80029a6:	4604      	mov	r4, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
 80029a8:	6820      	ldr	r0, [r4, #0]
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d1f8      	bne.n	80029a0 <chHeapAlloc+0x20>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
 80029ae:	4638      	mov	r0, r7
 80029b0:	f7ff f99e 	bl	8001cf0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 80029b4:	6833      	ldr	r3, [r6, #0]
 80029b6:	b323      	cbz	r3, 8002a02 <chHeapAlloc+0x82>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 80029b8:	f105 0008 	add.w	r0, r5, #8
 80029bc:	4798      	blx	r3
    if (hp != NULL) {
 80029be:	b300      	cbz	r0, 8002a02 <chHeapAlloc+0x82>
      hp->h.u.heap = heapp;
 80029c0:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 80029c2:	6045      	str	r5, [r0, #4]
      hp++;
 80029c4:	f100 0408 	add.w	r4, r0, #8
      return (void *)hp;
    }
  }
  return NULL;
}
 80029c8:	4620      	mov	r0, r4
 80029ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
 80029cc:	f105 0108 	add.w	r1, r5, #8
 80029d0:	4299      	cmp	r1, r3
 80029d2:	d909      	bls.n	80029e8 <chHeapAlloc+0x68>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 80029d4:	6803      	ldr	r3, [r0, #0]
 80029d6:	6023      	str	r3, [r4, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 80029d8:	4604      	mov	r4, r0

      H_UNLOCK(heapp);
 80029da:	4638      	mov	r0, r7
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 80029dc:	f844 6b08 	str.w	r6, [r4], #8

      H_UNLOCK(heapp);
 80029e0:	f7ff f986 	bl	8001cf0 <chMtxUnlock>
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 80029e4:	4620      	mov	r0, r4
 80029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e8:	f06f 0e07 	mvn.w	lr, #7
 80029ec:	ebc5 0e0e 	rsb	lr, r5, lr
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 80029f0:	449e      	add	lr, r3
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 80029f2:	6803      	ldr	r3, [r0, #0]
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 80029f4:	1842      	adds	r2, r0, r1
        fp->h.u.next = hp->h.u.next;
 80029f6:	5043      	str	r3, [r0, r1]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 80029f8:	f8c2 e004 	str.w	lr, [r2, #4]
        qp->h.u.next = fp;
 80029fc:	6022      	str	r2, [r4, #0]
        hp->h.size = size;
 80029fe:	6045      	str	r5, [r0, #4]
 8002a00:	e7ea      	b.n	80029d8 <chHeapAlloc+0x58>
      hp->h.size = size;
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
 8002a02:	2400      	movs	r4, #0
 8002a04:	e7e0      	b.n	80029c8 <chHeapAlloc+0x48>
 8002a06:	bf00      	nop
 8002a08:	200012a8 	.word	0x200012a8
 8002a0c:	f3af 8000 	nop.w

08002a10 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8002a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	4690      	mov	r8, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	460d      	mov	r5, r1
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8002a1a:	f7ff ffb1 	bl	8002980 <chHeapAlloc>
  if (wsp == NULL)
 8002a1e:	4604      	mov	r4, r0
 8002a20:	b3b0      	cbz	r0, 8002a90 <chThdCreateFromHeap+0x80>
 8002a22:	2320      	movs	r3, #32
 8002a24:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a28:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8002a98 <chThdCreateFromHeap+0x88>

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a2c:	f1a5 0124 	sub.w	r1, r5, #36	; 0x24
 8002a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a32:	f8de 3014 	ldr.w	r3, [lr, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a36:	eb00 0c01 	add.w	ip, r0, r1
 8002a3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8002a9c <chThdCreateFromHeap+0x8c>
 8002a3e:	f8c0 c00c 	str.w	ip, [r0, #12]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002a42:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a44:	f840 9001 	str.w	r9, [r0, r1]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8002a48:	f100 0628 	add.w	r6, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a4c:	f8cc 2004 	str.w	r2, [ip, #4]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8002a50:	f100 0724 	add.w	r7, r0, #36	; 0x24
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8002a54:	2201      	movs	r2, #1
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002a56:	f04f 0a02 	mov.w	sl, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002a5a:	f8cc b020 	str.w	fp, [ip, #32]
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002a5e:	4629      	mov	r1, r5
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002a60:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a64:	f8c0 e010 	str.w	lr, [r0, #16]
 8002a68:	6143      	str	r3, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8002a6a:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002a6e:	f880 a01c 	strb.w	sl, [r0, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002a72:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8002a74:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8002a76:	6185      	str	r5, [r0, #24]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8002a78:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002a7a:	f8ce 0014 	str.w	r0, [lr, #20]
 8002a7e:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002a80:	6247      	str	r7, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8002a82:	7762      	strb	r2, [r4, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8002a84:	62c6      	str	r6, [r0, #44]	; 0x2c
 8002a86:	6286      	str	r6, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8002a88:	f7ff f902 	bl	8001c90 <chSchWakeupS>
 8002a8c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8002a90:	4620      	mov	r0, r4
 8002a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a96:	bf00      	nop
 8002a98:	20001e68 	.word	0x20001e68
 8002a9c:	080006a1 	.word	0x080006a1

08002aa0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8002aa0:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8002aa2:	4602      	mov	r2, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	6083      	str	r3, [r0, #8]
 8002aaa:	dd00      	ble.n	8002aae <chSemSignalI+0xe>
 8002aac:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8002aae:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8002ab0:	b410      	push	{r4}

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002ab2:	6819      	ldr	r1, [r3, #0]

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	6011      	str	r1, [r2, #0]
 8002ab8:	604a      	str	r2, [r1, #4]
 8002aba:	621c      	str	r4, [r3, #32]
    chSchReadyI(tp);
 8002abc:	4618      	mov	r0, r3
  }
}
 8002abe:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8002ac2:	f7ff bb6d 	b.w	80021a0 <chSchReadyI>
 8002ac6:	bf00      	nop
 8002ac8:	f3af 8000 	nop.w
 8002acc:	f3af 8000 	nop.w

08002ad0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002ad0:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8002ad2:	6885      	ldr	r5, [r0, #8]
  sp->s_cnt = n;
 8002ad4:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0)
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	2d00      	cmp	r5, #0
 8002ada:	dc0c      	bgt.n	8002af6 <chSemResetI+0x26>
 8002adc:	4604      	mov	r4, r0
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002ade:	f06f 0601 	mvn.w	r6, #1
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002ae2:	6860      	ldr	r0, [r4, #4]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002ae4:	3501      	adds	r5, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002ae6:	6843      	ldr	r3, [r0, #4]
 8002ae8:	6063      	str	r3, [r4, #4]
 8002aea:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002aec:	f7ff fb58 	bl	80021a0 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002af0:	2d01      	cmp	r5, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002af2:	6206      	str	r6, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002af4:	d1f5      	bne.n	8002ae2 <chSemResetI+0x12>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f3af 8000 	nop.w
 8002afc:	f3af 8000 	nop.w

08002b00 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002b00:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002b02:	6803      	ldr	r3, [r0, #0]
 8002b04:	4604      	mov	r4, r0

  while (queue_notempty(tqp))
 8002b06:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002b08:	460d      	mov	r5, r1

  while (queue_notempty(tqp))
 8002b0a:	d009      	beq.n	8002b20 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	6022      	str	r2, [r4, #0]
 8002b12:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002b14:	621d      	str	r5, [r3, #32]
  chSchReadyI(tp);
 8002b16:	f7ff fb43 	bl	80021a0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	429c      	cmp	r4, r3
 8002b1e:	d1f5      	bne.n	8002b0c <chThdDequeueAllI+0xc>
 8002b20:	bd38      	pop	{r3, r4, r5, pc}
 8002b22:	bf00      	nop
 8002b24:	f3af 8000 	nop.w
 8002b28:	f3af 8000 	nop.w
 8002b2c:	f3af 8000 	nop.w

08002b30 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002b30:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <chThdExitS+0x3c>)
 8002b34:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002b38:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8002b3c:	429d      	cmp	r5, r3
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8002b3e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002b40:	d007      	beq.n	8002b52 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8002b42:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(list_remove(&tp->p_waiting));
 8002b44:	4618      	mov	r0, r3
 8002b46:	6262      	str	r2, [r4, #36]	; 0x24
 8002b48:	f7ff fb2a 	bl	80021a0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002b4e:	42ab      	cmp	r3, r5
 8002b50:	d1f7      	bne.n	8002b42 <chThdExitS+0x12>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
 8002b52:	7f63      	ldrb	r3, [r4, #29]
 8002b54:	079b      	lsls	r3, r3, #30
 8002b56:	d104      	bne.n	8002b62 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8002b58:	6922      	ldr	r2, [r4, #16]
 8002b5a:	6963      	ldr	r3, [r4, #20]
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	6922      	ldr	r2, [r4, #16]
 8002b60:	6153      	str	r3, [r2, #20]
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002b62:	200f      	movs	r0, #15
  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002b68:	f7ff b952 	b.w	8001e10 <chSchGoSleepS>
 8002b6c:	20001e68 	.word	0x20001e68

08002b70 <chThdExit>:
 8002b70:	2320      	movs	r3, #32
 8002b72:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8002b76:	f7ff bfdb 	b.w	8002b30 <chThdExitS>
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w

08002b80 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002b82:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <chTMStopMeasurementX+0x40>)
 8002b84:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8002b86:	6883      	ldr	r3, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002b88:	6f09      	ldr	r1, [r1, #112]	; 0x70
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	1a5b      	subs	r3, r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002b8e:	68c2      	ldr	r2, [r0, #12]
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 8002b90:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002b92:	b430      	push	{r4, r5}
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002b94:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002b98:	18e4      	adds	r4, r4, r3
 8002b9a:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002b9e:	3201      	adds	r2, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 8002ba0:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002ba2:	60c2      	str	r2, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8002ba4:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002ba6:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst)
 8002baa:	d805      	bhi.n	8002bb8 <chTMStopMeasurementX+0x38>
    tmp->worst = tmp->last;
  else if (tmp->last < tmp->best)
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8002bb0:	bf38      	it	cc
 8002bb2:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8002bb4:	bc30      	pop	{r4, r5}
 8002bb6:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
    tmp->worst = tmp->last;
 8002bb8:	6043      	str	r3, [r0, #4]
 8002bba:	e7fb      	b.n	8002bb4 <chTMStopMeasurementX+0x34>
 8002bbc:	e0001000 	.word	0xe0001000
 8002bc0:	20001e68 	.word	0x20001e68
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	f3af 8000 	nop.w
 8002bcc:	f3af 8000 	nop.w

08002bd0 <_port_irq_epilogue>:
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <_port_irq_epilogue+0x44>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002bde:	d102      	bne.n	8002be6 <_port_irq_epilogue+0x16>
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8002be6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002bea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bee:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8002bf2:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8002bf6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <_port_irq_epilogue+0x48>)
 8002bfc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8002bfe:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002c00:	6889      	ldr	r1, [r1, #8]
 8002c02:	6892      	ldr	r2, [r2, #8]
 8002c04:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002c06:	bf8c      	ite	hi
 8002c08:	4a04      	ldrhi	r2, [pc, #16]	; (8002c1c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002c0a:	4a05      	ldrls	r2, [pc, #20]	; (8002c20 <_port_irq_epilogue+0x50>)
 8002c0c:	f843 2c08 	str.w	r2, [r3, #-8]
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00
 8002c18:	20001e68 	.word	0x20001e68
 8002c1c:	080006af 	.word	0x080006af
 8002c20:	080006b2 	.word	0x080006b2
 8002c24:	f3af 8000 	nop.w
 8002c28:	f3af 8000 	nop.w
 8002c2c:	f3af 8000 	nop.w

08002c30 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8002c30:	e7fe      	b.n	8002c30 <BusFault_Handler>
 8002c32:	bf00      	nop
 8002c34:	f3af 8000 	nop.w
 8002c38:	f3af 8000 	nop.w
 8002c3c:	f3af 8000 	nop.w

08002c40 <mtx5_setup.lto_priv.130>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <mtx5_setup.lto_priv.130+0xc>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8002c42:	2200      	movs	r2, #0
 8002c44:	605b      	str	r3, [r3, #4]
 8002c46:	601b      	str	r3, [r3, #0]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	4770      	bx	lr
 8002c4c:	20000820 	.word	0x20000820

08002c50 <mtx4_setup.lto_priv.128>:
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <mtx4_setup.lto_priv.128+0x14>)
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <mtx4_setup.lto_priv.128+0x18>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	6052      	str	r2, [r2, #4]
 8002c58:	6012      	str	r2, [r2, #0]
 8002c5a:	6091      	str	r1, [r2, #8]
 8002c5c:	6099      	str	r1, [r3, #8]
 8002c5e:	605b      	str	r3, [r3, #4]
 8002c60:	601b      	str	r3, [r3, #0]
 8002c62:	4770      	bx	lr
 8002c64:	20000820 	.word	0x20000820
 8002c68:	20000830 	.word	0x20000830
 8002c6c:	f3af 8000 	nop.w

08002c70 <mtx1_setup.lto_priv.126>:
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <mtx1_setup.lto_priv.126+0xc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	605b      	str	r3, [r3, #4]
 8002c76:	601b      	str	r3, [r3, #0]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	4770      	bx	lr
 8002c7c:	20000820 	.word	0x20000820

08002c80 <sem3_setup.lto_priv.123>:
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <sem3_setup.lto_priv.123+0xc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8002c82:	2200      	movs	r2, #0
 8002c84:	605b      	str	r3, [r3, #4]
 8002c86:	601b      	str	r3, [r3, #0]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	4770      	bx	lr
 8002c8c:	20000cb4 	.word	0x20000cb4

08002c90 <sem2_setup.lto_priv.121>:
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <sem2_setup.lto_priv.121+0xc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	605b      	str	r3, [r3, #4]
 8002c96:	601b      	str	r3, [r3, #0]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	4770      	bx	lr
 8002c9c:	20000cb4 	.word	0x20000cb4

08002ca0 <sem1_setup.lto_priv.119>:
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <sem1_setup.lto_priv.119+0xc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	605b      	str	r3, [r3, #4]
 8002ca6:	601b      	str	r3, [r3, #0]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	4770      	bx	lr
 8002cac:	20000cb4 	.word	0x20000cb4

08002cb0 <mtx4_execute.lto_priv.129>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8002cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002cb4:	4d84      	ldr	r5, [pc, #528]	; (8002ec8 <mtx4_execute.lto_priv.129+0x218>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <mtx4_execute.lto_priv.129+0x21c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002cb8:	69aa      	ldr	r2, [r5, #24]
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8002cba:	b082      	sub	sp, #8
 8002cbc:	6894      	ldr	r4, [r2, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002cbe:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8002cc2:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002cc4:	463a      	mov	r2, r7
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4881      	ldr	r0, [pc, #516]	; (8002ed0 <mtx4_execute.lto_priv.129+0x220>)
 8002cca:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <mtx4_execute.lto_priv.129+0x224>)
 8002ccc:	f7ff f860 	bl	8001d90 <chThdCreateStatic>
 8002cd0:	4e81      	ldr	r6, [pc, #516]	; (8002ed8 <mtx4_execute.lto_priv.129+0x228>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <mtx4_execute.lto_priv.129+0x22c>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8002cd4:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8002cd8:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8002cda:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002cde:	4642      	mov	r2, r8
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	487f      	ldr	r0, [pc, #508]	; (8002ee0 <mtx4_execute.lto_priv.129+0x230>)
 8002ce4:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <mtx4_execute.lto_priv.129+0x234>)
 8002ce6:	f7ff f853 	bl	8001d90 <chThdCreateStatic>
 8002cea:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8002cec:	487e      	ldr	r0, [pc, #504]	; (8002ee8 <mtx4_execute.lto_priv.129+0x238>)
 8002cee:	f7ff fbaf 	bl	8002450 <chMtxLock>
 8002cf2:	69ab      	ldr	r3, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	1a61      	subs	r1, r4, r1
 8002cfa:	fab1 f181 	clz	r1, r1
 8002cfe:	0949      	lsrs	r1, r1, #5
 8002d00:	f7fe fe36 	bl	8001970 <_test_assert>
 8002d04:	b110      	cbz	r0, 8002d0c <mtx4_execute.lto_priv.129+0x5c>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8002d06:	b002      	add	sp, #8
 8002d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8002d0c:	20c8      	movs	r0, #200	; 0xc8
 8002d0e:	f7ff fa27 	bl	8002160 <chThdSleep>
 8002d12:	69ab      	ldr	r3, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8002d14:	2002      	movs	r0, #2
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	1a79      	subs	r1, r7, r1
 8002d1a:	fab1 f181 	clz	r1, r1
 8002d1e:	0949      	lsrs	r1, r1, #5
 8002d20:	f7fe fe26 	bl	8001970 <_test_assert>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1ee      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chMtxLock(&m1);
 8002d28:	4870      	ldr	r0, [pc, #448]	; (8002eec <mtx4_execute.lto_priv.129+0x23c>)
 8002d2a:	f7ff fb91 	bl	8002450 <chMtxLock>
 8002d2e:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8002d30:	2003      	movs	r0, #3
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	1a79      	subs	r1, r7, r1
 8002d36:	fab1 f181 	clz	r1, r1
 8002d3a:	0949      	lsrs	r1, r1, #5
 8002d3c:	f7fe fe18 	bl	8001970 <_test_assert>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d1e0      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 8002d44:	20c8      	movs	r0, #200	; 0xc8
 8002d46:	f7ff fa0b 	bl	8002160 <chThdSleep>
 8002d4a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 8002d4c:	2004      	movs	r0, #4
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	ebc1 0108 	rsb	r1, r1, r8
 8002d54:	fab1 f181 	clz	r1, r1
 8002d58:	0949      	lsrs	r1, r1, #5
 8002d5a:	f7fe fe09 	bl	8001970 <_test_assert>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d1d1      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chMtxUnlock(&m1);
 8002d62:	4862      	ldr	r0, [pc, #392]	; (8002eec <mtx4_execute.lto_priv.129+0x23c>)
 8002d64:	f7fe ffc4 	bl	8001cf0 <chMtxUnlock>
 8002d68:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8002d6a:	2005      	movs	r0, #5
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	1a79      	subs	r1, r7, r1
 8002d70:	fab1 f181 	clz	r1, r1
 8002d74:	0949      	lsrs	r1, r1, #5
 8002d76:	f7fe fdfb 	bl	8001970 <_test_assert>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d1c3      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 8002d7e:	20c8      	movs	r0, #200	; 0xc8
 8002d80:	f7ff f9ee 	bl	8002160 <chThdSleep>
 8002d84:	69ab      	ldr	r3, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8002d86:	2006      	movs	r0, #6
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	1a79      	subs	r1, r7, r1
 8002d8c:	fab1 f181 	clz	r1, r1
 8002d90:	0949      	lsrs	r1, r1, #5
 8002d92:	f7fe fded 	bl	8001970 <_test_assert>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d1b5      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chMtxUnlockAll();
 8002d9a:	f7ff fa99 	bl	80022d0 <chMtxUnlockAll>
 8002d9e:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8002da0:	2007      	movs	r0, #7
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	1a61      	subs	r1, r4, r1
 8002da6:	fab1 f181 	clz	r1, r1
 8002daa:	0949      	lsrs	r1, r1, #5
 8002dac:	f7fe fde0 	bl	8001970 <_test_assert>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d1a8      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  test_wait_threads();
 8002db4:	f7ff fc34 	bl	8002620 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <mtx4_execute.lto_priv.129+0x240>)
 8002dba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	463a      	mov	r2, r7
 8002dc2:	4b44      	ldr	r3, [pc, #272]	; (8002ed4 <mtx4_execute.lto_priv.129+0x224>)
 8002dc4:	4842      	ldr	r0, [pc, #264]	; (8002ed0 <mtx4_execute.lto_priv.129+0x220>)
 8002dc6:	f7fe ffe3 	bl	8001d90 <chThdCreateStatic>
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <mtx4_execute.lto_priv.129+0x244>)
  chMtxUnlockAll();
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8002dcc:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8002dce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <mtx4_execute.lto_priv.129+0x234>)
 8002dd8:	4841      	ldr	r0, [pc, #260]	; (8002ee0 <mtx4_execute.lto_priv.129+0x230>)
 8002dda:	f7fe ffd9 	bl	8001d90 <chThdCreateStatic>
 8002dde:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8002de0:	4841      	ldr	r0, [pc, #260]	; (8002ee8 <mtx4_execute.lto_priv.129+0x238>)
 8002de2:	f7ff fb35 	bl	8002450 <chMtxLock>
 8002de6:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8002de8:	2008      	movs	r0, #8
 8002dea:	6899      	ldr	r1, [r3, #8]
 8002dec:	1a61      	subs	r1, r4, r1
 8002dee:	fab1 f181 	clz	r1, r1
 8002df2:	0949      	lsrs	r1, r1, #5
 8002df4:	f7fe fdbc 	bl	8001970 <_test_assert>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d184      	bne.n	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 8002dfc:	20c8      	movs	r0, #200	; 0xc8
 8002dfe:	f7ff f9af 	bl	8002160 <chThdSleep>
 8002e02:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8002e04:	2009      	movs	r0, #9
 8002e06:	6899      	ldr	r1, [r3, #8]
 8002e08:	1a7b      	subs	r3, r7, r1
 8002e0a:	4259      	negs	r1, r3
 8002e0c:	4159      	adcs	r1, r3
 8002e0e:	f7fe fdaf 	bl	8001970 <_test_assert>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	f47f af77 	bne.w	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chMtxLock(&m1);
 8002e18:	4834      	ldr	r0, [pc, #208]	; (8002eec <mtx4_execute.lto_priv.129+0x23c>)
 8002e1a:	f7ff fb19 	bl	8002450 <chMtxLock>
 8002e1e:	69ab      	ldr	r3, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8002e20:	200a      	movs	r0, #10
 8002e22:	6899      	ldr	r1, [r3, #8]
 8002e24:	ebc1 0c07 	rsb	ip, r1, r7
 8002e28:	f1dc 0100 	rsbs	r1, ip, #0
 8002e2c:	eb41 010c 	adc.w	r1, r1, ip
 8002e30:	f7fe fd9e 	bl	8001970 <_test_assert>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	f47f af66 	bne.w	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 8002e3a:	20c8      	movs	r0, #200	; 0xc8
 8002e3c:	f7ff f990 	bl	8002160 <chThdSleep>
 8002e40:	69ab      	ldr	r3, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8002e42:	200b      	movs	r0, #11
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	ebc1 0e08 	rsb	lr, r1, r8
 8002e4a:	f1de 0100 	rsbs	r1, lr, #0
 8002e4e:	eb41 010e 	adc.w	r1, r1, lr
 8002e52:	f7fe fd8d 	bl	8001970 <_test_assert>
 8002e56:	4606      	mov	r6, r0
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	f47f af54 	bne.w	8002d06 <mtx4_execute.lto_priv.129+0x56>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002e5e:	2320      	movs	r3, #32
 8002e60:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chMtxUnlockS(&m1);
 8002e64:	4821      	ldr	r0, [pc, #132]	; (8002eec <mtx4_execute.lto_priv.129+0x23c>)
 8002e66:	f7ff fa63 	bl	8002330 <chMtxUnlockS>
  chSchRescheduleS();
 8002e6a:	f7fe fee9 	bl	8001c40 <chSchRescheduleS>
 8002e6e:	f386 8811 	msr	BASEPRI, r6
 8002e72:	69ab      	ldr	r3, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8002e74:	200c      	movs	r0, #12
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	1a7e      	subs	r6, r7, r1
 8002e7a:	4271      	negs	r1, r6
 8002e7c:	4171      	adcs	r1, r6
 8002e7e:	f7fe fd77 	bl	8001970 <_test_assert>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	f47f af3f 	bne.w	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chThdSleepMilliseconds(100);
 8002e88:	20c8      	movs	r0, #200	; 0xc8
 8002e8a:	f7ff f969 	bl	8002160 <chThdSleep>
 8002e8e:	69ab      	ldr	r3, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8002e90:	200d      	movs	r0, #13
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	1a7a      	subs	r2, r7, r1
 8002e96:	4251      	negs	r1, r2
 8002e98:	4151      	adcs	r1, r2
 8002e9a:	f7fe fd69 	bl	8001970 <_test_assert>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	f47f af31 	bne.w	8002d06 <mtx4_execute.lto_priv.129+0x56>
  chMtxUnlockAll();
 8002ea4:	f7ff fa14 	bl	80022d0 <chMtxUnlockAll>
 8002ea8:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8002eaa:	200e      	movs	r0, #14
 8002eac:	6899      	ldr	r1, [r3, #8]
 8002eae:	1a63      	subs	r3, r4, r1
 8002eb0:	4259      	negs	r1, r3
 8002eb2:	4159      	adcs	r1, r3
 8002eb4:	f7fe fd5c 	bl	8001970 <_test_assert>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	f47f af24 	bne.w	8002d06 <mtx4_execute.lto_priv.129+0x56>
  test_wait_threads();
}
 8002ebe:	b002      	add	sp, #8
 8002ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8002ec4:	f7ff bbac 	b.w	8002620 <test_wait_threads>
 8002ec8:	20001e68 	.word	0x20001e68
 8002ecc:	08009f80 	.word	0x08009f80
 8002ed0:	200017c8 	.word	0x200017c8
 8002ed4:	08002f01 	.word	0x08002f01
 8002ed8:	2000173c 	.word	0x2000173c
 8002edc:	08009f84 	.word	0x08009f84
 8002ee0:	20001910 	.word	0x20001910
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	20000830 	.word	0x20000830
 8002eec:	20000820 	.word	0x20000820
 8002ef0:	0800a5ac 	.word	0x0800a5ac
 8002ef4:	08009f88 	.word	0x08009f88
 8002ef8:	f3af 8000 	nop.w
 8002efc:	f3af 8000 	nop.w

08002f00 <thread4a>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 8002f00:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8002f02:	4c06      	ldr	r4, [pc, #24]	; (8002f1c <thread4a+0x1c>)
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8002f04:	2064      	movs	r0, #100	; 0x64
 8002f06:	f7ff f92b 	bl	8002160 <chThdSleep>
  chMtxLock(&m2);
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7ff faa0 	bl	8002450 <chMtxLock>
  chMtxUnlock(&m2);
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7fe feed 	bl	8001cf0 <chMtxUnlock>
  return 0;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	bd10      	pop	{r4, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000830 	.word	0x20000830

08002f20 <thread4b>:

static msg_t thread4b(void *p) {
 8002f20:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8002f22:	4c06      	ldr	r4, [pc, #24]	; (8002f3c <thread4b+0x1c>)
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8002f24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f28:	f7ff f91a 	bl	8002160 <chThdSleep>
  chMtxLock(&m1);
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff fa8f 	bl	8002450 <chMtxLock>
  chMtxUnlock(&m1);
 8002f32:	4620      	mov	r0, r4
 8002f34:	f7fe fedc 	bl	8001cf0 <chMtxUnlock>
  return 0;
}
 8002f38:	2000      	movs	r0, #0
 8002f3a:	bd10      	pop	{r4, pc}
 8002f3c:	20000820 	.word	0x20000820

08002f40 <mtx1_execute.lto_priv.127>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 8002f40:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002f42:	4e29      	ldr	r6, [pc, #164]	; (8002fe8 <mtx1_execute.lto_priv.127+0xa8>)
 8002f44:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002f46:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8002f48:	4828      	ldr	r0, [pc, #160]	; (8002fec <mtx1_execute.lto_priv.127+0xac>)
 8002f4a:	689c      	ldr	r4, [r3, #8]
 8002f4c:	f7ff fa80 	bl	8002450 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <mtx1_execute.lto_priv.127+0xb0>)
 8002f52:	1c62      	adds	r2, r4, #1
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <mtx1_execute.lto_priv.127+0xb4>)
 8002f5c:	4826      	ldr	r0, [pc, #152]	; (8002ff8 <mtx1_execute.lto_priv.127+0xb8>)
 8002f5e:	f7fe ff17 	bl	8001d90 <chThdCreateStatic>
 8002f62:	4d26      	ldr	r5, [pc, #152]	; (8002ffc <mtx1_execute.lto_priv.127+0xbc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002f64:	4b26      	ldr	r3, [pc, #152]	; (8003000 <mtx1_execute.lto_priv.127+0xc0>)

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8002f66:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002f68:	1ca2      	adds	r2, r4, #2
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <mtx1_execute.lto_priv.127+0xb4>)
 8002f72:	4824      	ldr	r0, [pc, #144]	; (8003004 <mtx1_execute.lto_priv.127+0xc4>)
 8002f74:	f7fe ff0c 	bl	8001d90 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <mtx1_execute.lto_priv.127+0xc8>)
static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8002f7a:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002f7c:	1ce2      	adds	r2, r4, #3
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <mtx1_execute.lto_priv.127+0xb4>)
 8002f86:	4821      	ldr	r0, [pc, #132]	; (800300c <mtx1_execute.lto_priv.127+0xcc>)
 8002f88:	f7fe ff02 	bl	8001d90 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <mtx1_execute.lto_priv.127+0xd0>)

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8002f8e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002f90:	1d22      	adds	r2, r4, #4
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <mtx1_execute.lto_priv.127+0xb4>)
 8002f9a:	481e      	ldr	r0, [pc, #120]	; (8003014 <mtx1_execute.lto_priv.127+0xd4>)
 8002f9c:	f7fe fef8 	bl	8001d90 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <mtx1_execute.lto_priv.127+0xd8>)
 8002fa2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002fa6:	1d62      	adds	r2, r4, #5
  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8002fa8:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	481b      	ldr	r0, [pc, #108]	; (800301c <mtx1_execute.lto_priv.127+0xdc>)
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <mtx1_execute.lto_priv.127+0xb4>)
 8002fb0:	f7fe feee 	bl	8001d90 <chThdCreateStatic>
 8002fb4:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8002fb6:	480d      	ldr	r0, [pc, #52]	; (8002fec <mtx1_execute.lto_priv.127+0xac>)
 8002fb8:	f7fe fe9a 	bl	8001cf0 <chMtxUnlock>
  test_wait_threads();
 8002fbc:	f7ff fb30 	bl	8002620 <test_wait_threads>
 8002fc0:	69b3      	ldr	r3, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	1a61      	subs	r1, r4, r1
 8002fc8:	fab1 f181 	clz	r1, r1
 8002fcc:	0949      	lsrs	r1, r1, #5
 8002fce:	f7fe fccf 	bl	8001970 <_test_assert>
 8002fd2:	b108      	cbz	r0, 8002fd8 <mtx1_execute.lto_priv.127+0x98>
  test_assert_sequence(2, "ABCDE");
}
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002fd8:	4911      	ldr	r1, [pc, #68]	; (8003020 <mtx1_execute.lto_priv.127+0xe0>)
 8002fda:	2002      	movs	r0, #2
}
 8002fdc:	b002      	add	sp, #8
 8002fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002fe2:	f7fe bc9d 	b.w	8001920 <_test_assert_sequence>
 8002fe6:	bf00      	nop
 8002fe8:	20001e68 	.word	0x20001e68
 8002fec:	20000820 	.word	0x20000820
 8002ff0:	08009f90 	.word	0x08009f90
 8002ff4:	08003101 	.word	0x08003101
 8002ff8:	200017c8 	.word	0x200017c8
 8002ffc:	2000173c 	.word	0x2000173c
 8003000:	0800a5ac 	.word	0x0800a5ac
 8003004:	20001910 	.word	0x20001910
 8003008:	08009f88 	.word	0x08009f88
 800300c:	20001a58 	.word	0x20001a58
 8003010:	08009f80 	.word	0x08009f80
 8003014:	20001ba0 	.word	0x20001ba0
 8003018:	08009f84 	.word	0x08009f84
 800301c:	20001ce8 	.word	0x20001ce8
 8003020:	08009f8c 	.word	0x08009f8c
 8003024:	f3af 8000 	nop.w
 8003028:	f3af 8000 	nop.w
 800302c:	f3af 8000 	nop.w

08003030 <thd1_execute.lto_priv.115>:

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003032:	4f27      	ldr	r7, [pc, #156]	; (80030d0 <thd1_execute.lto_priv.115+0xa0>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003034:	4e27      	ldr	r6, [pc, #156]	; (80030d4 <thd1_execute.lto_priv.115+0xa4>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4d27      	ldr	r5, [pc, #156]	; (80030d8 <thd1_execute.lto_priv.115+0xa8>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4927      	ldr	r1, [pc, #156]	; (80030dc <thd1_execute.lto_priv.115+0xac>)

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 800303e:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003040:	462b      	mov	r3, r5
 8003042:	9100      	str	r1, [sp, #0]
 8003044:	3a05      	subs	r2, #5
 8003046:	4630      	mov	r0, r6
 8003048:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800304c:	f7fe fea0 	bl	8001d90 <chThdCreateStatic>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	4c23      	ldr	r4, [pc, #140]	; (80030e0 <thd1_execute.lto_priv.115+0xb0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4923      	ldr	r1, [pc, #140]	; (80030e4 <thd1_execute.lto_priv.115+0xb4>)
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8003058:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800305a:	462b      	mov	r3, r5
 800305c:	9100      	str	r1, [sp, #0]
 800305e:	3a04      	subs	r2, #4
 8003060:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8003064:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003068:	f7fe fe92 	bl	8001d90 <chThdCreateStatic>
 800306c:	69bb      	ldr	r3, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800306e:	491e      	ldr	r1, [pc, #120]	; (80030e8 <thd1_execute.lto_priv.115+0xb8>)
 8003070:	689a      	ldr	r2, [r3, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003072:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8003074:	462b      	mov	r3, r5
 8003076:	9100      	str	r1, [sp, #0]
 8003078:	3a03      	subs	r2, #3
 800307a:	f506 7024 	add.w	r0, r6, #656	; 0x290
 800307e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003082:	f7fe fe85 	bl	8001d90 <chThdCreateStatic>
 8003086:	69bb      	ldr	r3, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8003088:	4918      	ldr	r1, [pc, #96]	; (80030ec <thd1_execute.lto_priv.115+0xbc>)
 800308a:	689a      	ldr	r2, [r3, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800308c:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800308e:	462b      	mov	r3, r5
 8003090:	9100      	str	r1, [sp, #0]
 8003092:	3a02      	subs	r2, #2
 8003094:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8003098:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800309c:	f7fe fe78 	bl	8001d90 <chThdCreateStatic>
 80030a0:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80030a2:	4913      	ldr	r1, [pc, #76]	; (80030f0 <thd1_execute.lto_priv.115+0xc0>)
 80030a4:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80030a6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80030a8:	3a01      	subs	r2, #1
 80030aa:	462b      	mov	r3, r5
 80030ac:	9100      	str	r1, [sp, #0]
 80030ae:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80030b2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80030b6:	f7fe fe6b 	bl	8001d90 <chThdCreateStatic>
 80030ba:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 80030bc:	f7ff fab0 	bl	8002620 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80030c0:	490c      	ldr	r1, [pc, #48]	; (80030f4 <thd1_execute.lto_priv.115+0xc4>)
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	b003      	add	sp, #12
 80030c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80030ca:	f7fe bc29 	b.w	8001920 <_test_assert_sequence>
 80030ce:	bf00      	nop
 80030d0:	20001e68 	.word	0x20001e68
 80030d4:	200017c8 	.word	0x200017c8
 80030d8:	08003121 	.word	0x08003121
 80030dc:	08009f90 	.word	0x08009f90
 80030e0:	2000173c 	.word	0x2000173c
 80030e4:	0800a5ac 	.word	0x0800a5ac
 80030e8:	08009f88 	.word	0x08009f88
 80030ec:	08009f80 	.word	0x08009f80
 80030f0:	08009f84 	.word	0x08009f84
 80030f4:	08009f8c 	.word	0x08009f8c
 80030f8:	f3af 8000 	nop.w
 80030fc:	f3af 8000 	nop.w

08003100 <thread1.lto_priv.112>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8003104:	4c05      	ldr	r4, [pc, #20]	; (800311c <thread1.lto_priv.112+0x1c>)
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff f9a2 	bl	8002450 <chMtxLock>
  test_emit_token(*(char *)p);
 800310c:	7828      	ldrb	r0, [r5, #0]
 800310e:	f7fe fc47 	bl	80019a0 <test_emit_token>
  chMtxUnlock(&m1);
 8003112:	4620      	mov	r0, r4
 8003114:	f7fe fdec 	bl	8001cf0 <chMtxUnlock>
  return 0;
}
 8003118:	2000      	movs	r0, #0
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	20000820 	.word	0x20000820

08003120 <thread>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 8003120:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8003122:	7800      	ldrb	r0, [r0, #0]
 8003124:	f7fe fc3c 	bl	80019a0 <test_emit_token>
  return 0;
}
 8003128:	2000      	movs	r0, #0
 800312a:	bd08      	pop	{r3, pc}
 800312c:	f3af 8000 	nop.w

08003130 <thread1.lto_priv.111>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 8003130:	b510      	push	{r4, lr}
 8003132:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <thread1.lto_priv.111+0x14>)
 8003136:	f7fe fea3 	bl	8001e80 <chSemWait>
  test_emit_token(*(char *)p);
 800313a:	7820      	ldrb	r0, [r4, #0]
 800313c:	f7fe fc30 	bl	80019a0 <test_emit_token>
  return 0;
}
 8003140:	2000      	movs	r0, #0
 8003142:	bd10      	pop	{r4, pc}
 8003144:	20000cb4 	.word	0x20000cb4
 8003148:	f3af 8000 	nop.w
 800314c:	f3af 8000 	nop.w

08003150 <thread4>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 8003150:	b508      	push	{r3, lr}
 8003152:	2220      	movs	r2, #32
 8003154:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8003158:	6883      	ldr	r3, [r0, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	dd05      	ble.n	800316a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800315e:	f7fe fd6f 	bl	8001c40 <chSchRescheduleS>
 8003162:	2000      	movs	r0, #0
 8003164:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 8003168:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800316a:	f7ff fc99 	bl	8002aa0 <chSemSignalI>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800316e:	f7fe fd67 	bl	8001c40 <chSchRescheduleS>
 8003172:	2000      	movs	r0, #0
 8003174:	f380 8811 	msr	BASEPRI, r0
 8003178:	bd08      	pop	{r3, pc}
 800317a:	bf00      	nop
 800317c:	f3af 8000 	nop.w

08003180 <thread2>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 8003180:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8003182:	2064      	movs	r0, #100	; 0x64
 8003184:	f7fe ffec 	bl	8002160 <chThdSleep>
 8003188:	2320      	movs	r3, #32
 800318a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 800318e:	4804      	ldr	r0, [pc, #16]	; (80031a0 <thread2+0x20>)
 8003190:	f7ff fc86 	bl	8002aa0 <chSemSignalI>
  chSchRescheduleS();
 8003194:	f7fe fd54 	bl	8001c40 <chSchRescheduleS>
 8003198:	2000      	movs	r0, #0
 800319a:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 800319e:	bd08      	pop	{r3, pc}
 80031a0:	20000cb4 	.word	0x20000cb4
 80031a4:	f3af 8000 	nop.w
 80031a8:	f3af 8000 	nop.w
 80031ac:	f3af 8000 	nop.w

080031b0 <sem4_execute.lto_priv.125>:

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}

static void sem4_execute(void) {
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b2:	b087      	sub	sp, #28
 80031b4:	ad03      	add	r5, sp, #12
 80031b6:	2400      	movs	r4, #0
 80031b8:	9504      	str	r5, [sp, #16]
 80031ba:	9503      	str	r5, [sp, #12]
 80031bc:	9405      	str	r4, [sp, #20]
 80031be:	2620      	movs	r6, #32
 80031c0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80031c4:	4628      	mov	r0, r5
 80031c6:	4621      	mov	r1, r4
 80031c8:	f7ff fc82 	bl	8002ad0 <chSemResetI>
  chSchRescheduleS();
 80031cc:	f7fe fd38 	bl	8001c40 <chSchRescheduleS>
 80031d0:	f384 8811 	msr	BASEPRI, r4
 80031d4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 80031d8:	9905      	ldr	r1, [sp, #20]
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 80031da:	2001      	movs	r0, #1
 80031dc:	42a1      	cmp	r1, r4
 80031de:	bfcc      	ite	gt
 80031e0:	2100      	movgt	r1, #0
 80031e2:	2101      	movle	r1, #1
 80031e4:	f7fe fbc4 	bl	8001970 <_test_assert>
 80031e8:	4607      	mov	r7, r0
 80031ea:	b118      	cbz	r0, 80031f4 <sem4_execute.lto_priv.125+0x44>
 80031ec:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 80031f0:	b007      	add	sp, #28
 80031f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f4:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <sem4_execute.lto_priv.125+0x148>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80031fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	483e      	ldr	r0, [pc, #248]	; (80032fc <sem4_execute.lto_priv.125+0x14c>)
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <sem4_execute.lto_priv.125+0x150>)
 8003206:	3a01      	subs	r2, #1
 8003208:	9500      	str	r5, [sp, #0]
 800320a:	f7fe fdc1 	bl	8001d90 <chThdCreateStatic>
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <sem4_execute.lto_priv.125+0x154>)
 8003210:	6018      	str	r0, [r3, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8003212:	4628      	mov	r0, r5
 8003214:	f7fe fe34 	bl	8001e80 <chSemWait>
 8003218:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chBSemGetStateI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  return bsp->bs_sem.s_cnt > 0 ? false : true;
 800321c:	9905      	ldr	r1, [sp, #20]
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800321e:	2002      	movs	r0, #2
 8003220:	2900      	cmp	r1, #0
 8003222:	bfcc      	ite	gt
 8003224:	2100      	movgt	r1, #0
 8003226:	2101      	movle	r1, #1
 8003228:	f7fe fba2 	bl	8001970 <_test_assert>
 800322c:	b118      	cbz	r0, 8003236 <sem4_execute.lto_priv.125+0x86>
 800322e:	f387 8811 	msr	BASEPRI, r7

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8003232:	b007      	add	sp, #28
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	f380 8811 	msr	BASEPRI, r0
 800323a:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800323e:	9b05      	ldr	r3, [sp, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	dd23      	ble.n	800328c <sem4_execute.lto_priv.125+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8003244:	f7fe fcfc 	bl	8001c40 <chSchRescheduleS>
 8003248:	2400      	movs	r4, #0
 800324a:	f384 8811 	msr	BASEPRI, r4
 800324e:	2720      	movs	r7, #32
 8003250:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8003254:	9905      	ldr	r1, [sp, #20]
 8003256:	2003      	movs	r0, #3
 8003258:	42a1      	cmp	r1, r4
 800325a:	bfd4      	ite	le
 800325c:	2100      	movle	r1, #0
 800325e:	2101      	movgt	r1, #1
 8003260:	f7fe fb86 	bl	8001970 <_test_assert>
 8003264:	4606      	mov	r6, r0
 8003266:	2800      	cmp	r0, #0
 8003268:	d1c0      	bne.n	80031ec <sem4_execute.lto_priv.125+0x3c>
 800326a:	f380 8811 	msr	BASEPRI, r0
 800326e:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8003272:	9905      	ldr	r1, [sp, #20]
 8003274:	2004      	movs	r0, #4
 8003276:	f1a1 0101 	sub.w	r1, r1, #1
 800327a:	fab1 f181 	clz	r1, r1
 800327e:	0949      	lsrs	r1, r1, #5
 8003280:	f7fe fb76 	bl	8001970 <_test_assert>
 8003284:	b130      	cbz	r0, 8003294 <sem4_execute.lto_priv.125+0xe4>
 8003286:	f386 8811 	msr	BASEPRI, r6
 800328a:	e7b1      	b.n	80031f0 <sem4_execute.lto_priv.125+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800328c:	4628      	mov	r0, r5
 800328e:	f7ff fc07 	bl	8002aa0 <chSemSignalI>
 8003292:	e7d7      	b.n	8003244 <sem4_execute.lto_priv.125+0x94>
 8003294:	f380 8811 	msr	BASEPRI, r0
 8003298:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800329c:	9b05      	ldr	r3, [sp, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	dd23      	ble.n	80032ea <sem4_execute.lto_priv.125+0x13a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80032a2:	f7fe fccd 	bl	8001c40 <chSchRescheduleS>
 80032a6:	2400      	movs	r4, #0
 80032a8:	f384 8811 	msr	BASEPRI, r4
 80032ac:	2620      	movs	r6, #32
 80032ae:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 80032b2:	9905      	ldr	r1, [sp, #20]
 80032b4:	2003      	movs	r0, #3
 80032b6:	42a1      	cmp	r1, r4
 80032b8:	bfd4      	ite	le
 80032ba:	2100      	movle	r1, #0
 80032bc:	2101      	movgt	r1, #1
 80032be:	f7fe fb57 	bl	8001970 <_test_assert>
 80032c2:	4605      	mov	r5, r0
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d191      	bne.n	80031ec <sem4_execute.lto_priv.125+0x3c>
 80032c8:	f380 8811 	msr	BASEPRI, r0
 80032cc:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80032d0:	9905      	ldr	r1, [sp, #20]
 80032d2:	2005      	movs	r0, #5
 80032d4:	f1a1 0101 	sub.w	r1, r1, #1
 80032d8:	fab1 f181 	clz	r1, r1
 80032dc:	0949      	lsrs	r1, r1, #5
 80032de:	f7fe fb47 	bl	8001970 <_test_assert>
 80032e2:	b130      	cbz	r0, 80032f2 <sem4_execute.lto_priv.125+0x142>
 80032e4:	f385 8811 	msr	BASEPRI, r5
 80032e8:	e782      	b.n	80031f0 <sem4_execute.lto_priv.125+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80032ea:	4628      	mov	r0, r5
 80032ec:	f7ff fbd8 	bl	8002aa0 <chSemSignalI>
 80032f0:	e7d7      	b.n	80032a2 <sem4_execute.lto_priv.125+0xf2>
 80032f2:	f380 8811 	msr	BASEPRI, r0
 80032f6:	e77b      	b.n	80031f0 <sem4_execute.lto_priv.125+0x40>
 80032f8:	20001e68 	.word	0x20001e68
 80032fc:	200017c8 	.word	0x200017c8
 8003300:	08003151 	.word	0x08003151
 8003304:	2000173c 	.word	0x2000173c
 8003308:	f3af 8000 	nop.w
 800330c:	f3af 8000 	nop.w

08003310 <sem3_execute.lto_priv.124>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8003310:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <sem3_execute.lto_priv.124+0x7c>)
 8003314:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003316:	6992      	ldr	r2, [r2, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003318:	2300      	movs	r3, #0
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003320:	3201      	adds	r2, #1
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	481a      	ldr	r0, [pc, #104]	; (8003390 <sem3_execute.lto_priv.124+0x80>)
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <sem3_execute.lto_priv.124+0x84>)
 8003328:	f7fe fd32 	bl	8001d90 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 800332c:	4c1a      	ldr	r4, [pc, #104]	; (8003398 <sem3_execute.lto_priv.124+0x88>)
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <sem3_execute.lto_priv.124+0x8c>)
 8003330:	6018      	str	r0, [r3, #0]
  chSemSignalWait(&sem1, &sem1);
 8003332:	f005 fced 	bl	8008d10 <chSemSignalWait.constprop.56>
 8003336:	6821      	ldr	r1, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8003338:	2001      	movs	r0, #1
 800333a:	1b09      	subs	r1, r1, r4
 800333c:	fab1 f181 	clz	r1, r1
 8003340:	0949      	lsrs	r1, r1, #5
 8003342:	f7fe fb15 	bl	8001970 <_test_assert>
 8003346:	b108      	cbz	r0, 800334c <sem3_execute.lto_priv.124+0x3c>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 8003348:	b002      	add	sp, #8
 800334a:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 800334c:	68a1      	ldr	r1, [r4, #8]
 800334e:	2002      	movs	r0, #2
 8003350:	fab1 f181 	clz	r1, r1
 8003354:	0949      	lsrs	r1, r1, #5
 8003356:	f7fe fb0b 	bl	8001970 <_test_assert>
 800335a:	2800      	cmp	r0, #0
 800335c:	d1f4      	bne.n	8003348 <sem3_execute.lto_priv.124+0x38>

  chSemSignalWait(&sem1, &sem1);
 800335e:	f005 fcd7 	bl	8008d10 <chSemSignalWait.constprop.56>
 8003362:	6821      	ldr	r1, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 8003364:	2003      	movs	r0, #3
 8003366:	1b09      	subs	r1, r1, r4
 8003368:	fab1 f181 	clz	r1, r1
 800336c:	0949      	lsrs	r1, r1, #5
 800336e:	f7fe faff 	bl	8001970 <_test_assert>
 8003372:	2800      	cmp	r0, #0
 8003374:	d1e8      	bne.n	8003348 <sem3_execute.lto_priv.124+0x38>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8003376:	68a1      	ldr	r1, [r4, #8]
 8003378:	2004      	movs	r0, #4
 800337a:	fab1 f181 	clz	r1, r1
 800337e:	0949      	lsrs	r1, r1, #5
}
 8003380:	b002      	add	sp, #8
 8003382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 8003386:	f7fe baf3 	b.w	8001970 <_test_assert>
 800338a:	bf00      	nop
 800338c:	20001e68 	.word	0x20001e68
 8003390:	200017c8 	.word	0x200017c8
 8003394:	080033a1 	.word	0x080033a1
 8003398:	20000cb4 	.word	0x20000cb4
 800339c:	2000173c 	.word	0x2000173c

080033a0 <thread3>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 80033a0:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 80033a2:	4c04      	ldr	r4, [pc, #16]	; (80033b4 <thread3+0x14>)
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7fe fd6b 	bl	8001e80 <chSemWait>
  chSemSignal(&sem1);
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7fe fcd0 	bl	8001d50 <chSemSignal>
  return 0;
}
 80033b0:	2000      	movs	r0, #0
 80033b2:	bd10      	pop	{r4, pc}
 80033b4:	20000cb4 	.word	0x20000cb4
 80033b8:	f3af 8000 	nop.w
 80033bc:	f3af 8000 	nop.w

080033c0 <sem2_execute.lto_priv.122>:
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 80033c0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80033c2:	4c4e      	ldr	r4, [pc, #312]	; (80034fc <sem2_execute.lto_priv.122+0x13c>)
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 80033c4:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80033c6:	2100      	movs	r1, #0
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7fe fdc9 	bl	8001f60 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80033ce:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 80033d2:	fab1 f181 	clz	r1, r1
 80033d6:	2001      	movs	r0, #1
 80033d8:	0949      	lsrs	r1, r1, #5
 80033da:	f7fe fac9 	bl	8001970 <_test_assert>
 80033de:	b108      	cbz	r0, 80033e4 <sem2_execute.lto_priv.122+0x24>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80033e0:	b002      	add	sp, #8
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	6821      	ldr	r1, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 80033e6:	2002      	movs	r0, #2
 80033e8:	1b09      	subs	r1, r1, r4
 80033ea:	fab1 f181 	clz	r1, r1
 80033ee:	0949      	lsrs	r1, r1, #5
 80033f0:	f7fe fabe 	bl	8001970 <_test_assert>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d1f3      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 80033f8:	68a1      	ldr	r1, [r4, #8]
 80033fa:	2003      	movs	r0, #3
 80033fc:	fab1 f181 	clz	r1, r1
 8003400:	0949      	lsrs	r1, r1, #5
 8003402:	f7fe fab5 	bl	8001970 <_test_assert>
 8003406:	4605      	mov	r5, r0
 8003408:	2800      	cmp	r0, #0
 800340a:	d1e9      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800340c:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <sem2_execute.lto_priv.122+0x140>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800340e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	483b      	ldr	r0, [pc, #236]	; (8003504 <sem2_execute.lto_priv.122+0x144>)
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <sem2_execute.lto_priv.122+0x148>)
 800341a:	3a01      	subs	r2, #1
 800341c:	9500      	str	r5, [sp, #0]
 800341e:	f7fe fcb7 	bl	8001d90 <chThdCreateStatic>
 8003422:	4b3a      	ldr	r3, [pc, #232]	; (800350c <sem2_execute.lto_priv.122+0x14c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8003424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8003428:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800342a:	4620      	mov	r0, r4
 800342c:	f7fe fd98 	bl	8001f60 <chSemWaitTimeout>
 8003430:	4605      	mov	r5, r0
  test_wait_threads();
 8003432:	f7ff f8f5 	bl	8002620 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8003436:	fab5 f185 	clz	r1, r5
 800343a:	2004      	movs	r0, #4
 800343c:	0949      	lsrs	r1, r1, #5
 800343e:	f7fe fa97 	bl	8001970 <_test_assert>
 8003442:	2800      	cmp	r0, #0
 8003444:	d1cc      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
 8003446:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8003448:	2005      	movs	r0, #5
 800344a:	1b09      	subs	r1, r1, r4
 800344c:	fab1 f181 	clz	r1, r1
 8003450:	0949      	lsrs	r1, r1, #5
 8003452:	f7fe fa8d 	bl	8001970 <_test_assert>
 8003456:	2800      	cmp	r0, #0
 8003458:	d1c2      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 800345a:	68a1      	ldr	r1, [r4, #8]
 800345c:	2006      	movs	r0, #6
 800345e:	fab1 f181 	clz	r1, r1
 8003462:	0949      	lsrs	r1, r1, #5
 8003464:	f7fe fa84 	bl	8001970 <_test_assert>
 8003468:	4605      	mov	r5, r0
 800346a:	2800      	cmp	r0, #0
 800346c:	d1b8      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 800346e:	f7fe fe87 	bl	8002180 <test_wait_tick>
 8003472:	2320      	movs	r3, #32
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800347c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800347e:	f385 8811 	msr	BASEPRI, r5
 8003482:	2541      	movs	r5, #65	; 0x41
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8003484:	4628      	mov	r0, r5
 8003486:	f7fe fa8b 	bl	80019a0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 800348a:	2164      	movs	r1, #100	; 0x64
 800348c:	481b      	ldr	r0, [pc, #108]	; (80034fc <sem2_execute.lto_priv.122+0x13c>)
 800348e:	f7fe fd67 	bl	8001f60 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8003492:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8003496:	fab1 f181 	clz	r1, r1
 800349a:	2007      	movs	r0, #7
 800349c:	0949      	lsrs	r1, r1, #5
 800349e:	f7fe fa67 	bl	8001970 <_test_assert>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d19c      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
 80034a6:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80034a8:	2008      	movs	r0, #8
 80034aa:	1b09      	subs	r1, r1, r4
 80034ac:	fab1 f181 	clz	r1, r1
 80034b0:	0949      	lsrs	r1, r1, #5
 80034b2:	f7fe fa5d 	bl	8001970 <_test_assert>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d192      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80034ba:	68a1      	ldr	r1, [r4, #8]
 80034bc:	2009      	movs	r0, #9
 80034be:	fab1 f181 	clz	r1, r1
 80034c2:	0949      	lsrs	r1, r1, #5
 80034c4:	f7fe fa54 	bl	8001970 <_test_assert>
 80034c8:	3501      	adds	r5, #1
 80034ca:	b2ed      	uxtb	r5, r5
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d187      	bne.n	80033e0 <sem2_execute.lto_priv.122+0x20>
  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
 80034d0:	2d46      	cmp	r5, #70	; 0x46
 80034d2:	d1d7      	bne.n	8003484 <sem2_execute.lto_priv.122+0xc4>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
 80034d4:	200a      	movs	r0, #10
 80034d6:	490e      	ldr	r1, [pc, #56]	; (8003510 <sem2_execute.lto_priv.122+0x150>)
 80034d8:	f7fe fa22 	bl	8001920 <_test_assert_sequence>
 80034dc:	2800      	cmp	r0, #0
 80034de:	f47f af7f 	bne.w	80033e0 <sem2_execute.lto_priv.122+0x20>
 80034e2:	b2b6      	uxth	r6, r6

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 80034e4:	f506 71fa 	add.w	r1, r6, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80034e8:	f506 72fc 	add.w	r2, r6, #504	; 0x1f8
 80034ec:	b289      	uxth	r1, r1
 80034ee:	b292      	uxth	r2, r2
 80034f0:	200b      	movs	r0, #11
}
 80034f2:	b002      	add	sp, #8
 80034f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 80034f8:	f7fe b9f2 	b.w	80018e0 <_test_assert_time_window>
 80034fc:	20000cb4 	.word	0x20000cb4
 8003500:	20001e68 	.word	0x20001e68
 8003504:	200017c8 	.word	0x200017c8
 8003508:	08003181 	.word	0x08003181
 800350c:	2000173c 	.word	0x2000173c
 8003510:	08009f8c 	.word	0x08009f8c
 8003514:	f3af 8000 	nop.w
 8003518:	f3af 8000 	nop.w
 800351c:	f3af 8000 	nop.w

08003520 <sem1_execute.lto_priv.120>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003522:	4d4b      	ldr	r5, [pc, #300]	; (8003650 <sem1_execute.lto_priv.120+0x130>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003524:	4f4b      	ldr	r7, [pc, #300]	; (8003654 <sem1_execute.lto_priv.120+0x134>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003526:	69ab      	ldr	r3, [r5, #24]
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8003528:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003530:	3205      	adds	r2, #5
 8003532:	4b49      	ldr	r3, [pc, #292]	; (8003658 <sem1_execute.lto_priv.120+0x138>)
 8003534:	4849      	ldr	r0, [pc, #292]	; (800365c <sem1_execute.lto_priv.120+0x13c>)
 8003536:	9700      	str	r7, [sp, #0]
 8003538:	f7fe fc2a 	bl	8001d90 <chThdCreateStatic>
 800353c:	69ab      	ldr	r3, [r5, #24]
 800353e:	4c48      	ldr	r4, [pc, #288]	; (8003660 <sem1_execute.lto_priv.120+0x140>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	4b48      	ldr	r3, [pc, #288]	; (8003664 <sem1_execute.lto_priv.120+0x144>)
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003544:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003546:	3201      	adds	r2, #1
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <sem1_execute.lto_priv.120+0x138>)
 8003550:	4845      	ldr	r0, [pc, #276]	; (8003668 <sem1_execute.lto_priv.120+0x148>)
 8003552:	f7fe fc1d 	bl	8001d90 <chThdCreateStatic>
 8003556:	69aa      	ldr	r2, [r5, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003558:	4b44      	ldr	r3, [pc, #272]	; (800366c <sem1_execute.lto_priv.120+0x14c>)
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003560:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003562:	3203      	adds	r2, #3
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	4842      	ldr	r0, [pc, #264]	; (8003670 <sem1_execute.lto_priv.120+0x150>)
 8003568:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <sem1_execute.lto_priv.120+0x138>)
 800356a:	f7fe fc11 	bl	8001d90 <chThdCreateStatic>
 800356e:	69aa      	ldr	r2, [r5, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <sem1_execute.lto_priv.120+0x154>)
 8003572:	6892      	ldr	r2, [r2, #8]
 8003574:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003578:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 800357a:	3204      	adds	r2, #4
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	483e      	ldr	r0, [pc, #248]	; (8003678 <sem1_execute.lto_priv.120+0x158>)
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <sem1_execute.lto_priv.120+0x138>)
 8003582:	f7fe fc05 	bl	8001d90 <chThdCreateStatic>
 8003586:	69aa      	ldr	r2, [r5, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003588:	4b3c      	ldr	r3, [pc, #240]	; (800367c <sem1_execute.lto_priv.120+0x15c>)
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003590:	3202      	adds	r2, #2
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003592:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	483a      	ldr	r0, [pc, #232]	; (8003680 <sem1_execute.lto_priv.120+0x160>)
 8003598:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <sem1_execute.lto_priv.120+0x138>)
 800359a:	f7fe fbf9 	bl	8001d90 <chThdCreateStatic>
 800359e:	6120      	str	r0, [r4, #16]
  chSemSignal(&sem1);
 80035a0:	4838      	ldr	r0, [pc, #224]	; (8003684 <sem1_execute.lto_priv.120+0x164>)
 80035a2:	f7fe fbd5 	bl	8001d50 <chSemSignal>
  chSemSignal(&sem1);
 80035a6:	4837      	ldr	r0, [pc, #220]	; (8003684 <sem1_execute.lto_priv.120+0x164>)
 80035a8:	f7fe fbd2 	bl	8001d50 <chSemSignal>
  chSemSignal(&sem1);
 80035ac:	4835      	ldr	r0, [pc, #212]	; (8003684 <sem1_execute.lto_priv.120+0x164>)
 80035ae:	f7fe fbcf 	bl	8001d50 <chSemSignal>
  chSemSignal(&sem1);
 80035b2:	4834      	ldr	r0, [pc, #208]	; (8003684 <sem1_execute.lto_priv.120+0x164>)
 80035b4:	f7fe fbcc 	bl	8001d50 <chSemSignal>
  chSemSignal(&sem1);
 80035b8:	4832      	ldr	r0, [pc, #200]	; (8003684 <sem1_execute.lto_priv.120+0x164>)
 80035ba:	f7fe fbc9 	bl	8001d50 <chSemSignal>
  test_wait_threads();
 80035be:	f7ff f82f 	bl	8002620 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 80035c2:	2001      	movs	r0, #1
 80035c4:	4930      	ldr	r1, [pc, #192]	; (8003688 <sem1_execute.lto_priv.120+0x168>)
 80035c6:	f7fe f9ab 	bl	8001920 <_test_assert_sequence>
 80035ca:	4606      	mov	r6, r0
 80035cc:	b108      	cbz	r0, 80035d2 <sem1_execute.lto_priv.120+0xb2>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 80035ce:	b003      	add	sp, #12
 80035d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d2:	69ab      	ldr	r3, [r5, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80035d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4820      	ldr	r0, [pc, #128]	; (800365c <sem1_execute.lto_priv.120+0x13c>)
 80035dc:	3205      	adds	r2, #5
 80035de:	9700      	str	r7, [sp, #0]
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <sem1_execute.lto_priv.120+0x138>)
 80035e2:	f7fe fbd5 	bl	8001d90 <chThdCreateStatic>
 80035e6:	2320      	movs	r3, #32
 80035e8:	6020      	str	r0, [r4, #0]
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	4c25      	ldr	r4, [pc, #148]	; (8003684 <sem1_execute.lto_priv.120+0x164>)
 80035f0:	2502      	movs	r5, #2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0)
 80035f2:	4627      	mov	r7, r4
 80035f4:	e002      	b.n	80035fc <sem1_execute.lto_priv.120+0xdc>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 80035f6:	2d01      	cmp	r5, #1
 80035f8:	d00e      	beq.n	8003618 <sem1_execute.lto_priv.120+0xf8>
 80035fa:	2501      	movs	r5, #1
    if (++sp->s_cnt <= 0)
 80035fc:	68a3      	ldr	r3, [r4, #8]
 80035fe:	3301      	adds	r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	dcf7      	bgt.n	80035f6 <sem1_execute.lto_priv.120+0xd6>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003606:	6838      	ldr	r0, [r7, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8003608:	6803      	ldr	r3, [r0, #0]
 800360a:	605f      	str	r7, [r3, #4]
 800360c:	603b      	str	r3, [r7, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 800360e:	f7fe fdc7 	bl	80021a0 <chSchReadyI>
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8003612:	2d01      	cmp	r5, #1
    if (++sp->s_cnt <= 0)
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8003614:	6206      	str	r6, [r0, #32]
  chDbgCheck((sp != NULL) && (n > 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
 8003616:	d1f0      	bne.n	80035fa <sem1_execute.lto_priv.120+0xda>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8003618:	f7fe fb12 	bl	8001c40 <chSchRescheduleS>
 800361c:	2500      	movs	r5, #0
 800361e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8003622:	f7fe fffd 	bl	8002620 <test_wait_threads>
 8003626:	2320      	movs	r3, #32
 8003628:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 800362c:	68a1      	ldr	r1, [r4, #8]
 800362e:	2002      	movs	r0, #2
 8003630:	f1a1 0101 	sub.w	r1, r1, #1
 8003634:	fab1 f181 	clz	r1, r1
 8003638:	0949      	lsrs	r1, r1, #5
 800363a:	f7fe f999 	bl	8001970 <_test_assert>
 800363e:	b918      	cbnz	r0, 8003648 <sem1_execute.lto_priv.120+0x128>
 8003640:	f380 8811 	msr	BASEPRI, r0
}
 8003644:	b003      	add	sp, #12
 8003646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003648:	f385 8811 	msr	BASEPRI, r5
 800364c:	b003      	add	sp, #12
 800364e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003650:	20001e68 	.word	0x20001e68
 8003654:	08009f84 	.word	0x08009f84
 8003658:	08003131 	.word	0x08003131
 800365c:	200017c8 	.word	0x200017c8
 8003660:	2000173c 	.word	0x2000173c
 8003664:	08009f80 	.word	0x08009f80
 8003668:	20001910 	.word	0x20001910
 800366c:	08009f88 	.word	0x08009f88
 8003670:	20001a58 	.word	0x20001a58
 8003674:	0800a5ac 	.word	0x0800a5ac
 8003678:	20001ba0 	.word	0x20001ba0
 800367c:	08009f90 	.word	0x08009f90
 8003680:	20001ce8 	.word	0x20001ce8
 8003684:	20000cb4 	.word	0x20000cb4
 8003688:	08009f8c 	.word	0x08009f8c
 800368c:	f3af 8000 	nop.w

08003690 <thd2_execute.lto_priv.116>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003694:	4e47      	ldr	r6, [pc, #284]	; (80037b4 <thd2_execute.lto_priv.116+0x124>)

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8003696:	4d48      	ldr	r5, [pc, #288]	; (80037b8 <thd2_execute.lto_priv.116+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003698:	69b3      	ldr	r3, [r6, #24]
 800369a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80037d0 <thd2_execute.lto_priv.116+0x140>
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4946      	ldr	r1, [pc, #280]	; (80037bc <thd2_execute.lto_priv.116+0x12c>)
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 80036a2:	b083      	sub	sp, #12

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80036a4:	464b      	mov	r3, r9
 80036a6:	9100      	str	r1, [sp, #0]
 80036a8:	3a04      	subs	r2, #4
 80036aa:	4628      	mov	r0, r5
 80036ac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80036b0:	f7fe fb6e 	bl	8001d90 <chThdCreateStatic>
 80036b4:	69b3      	ldr	r3, [r6, #24]
 80036b6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80037d4 <thd2_execute.lto_priv.116+0x144>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4940      	ldr	r1, [pc, #256]	; (80037c0 <thd2_execute.lto_priv.116+0x130>)
 80036be:	f5a5 74a4 	sub.w	r4, r5, #328	; 0x148
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80036c2:	f8c8 0004 	str.w	r0, [r8, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80036c6:	464b      	mov	r3, r9
 80036c8:	9100      	str	r1, [sp, #0]
 80036ca:	3a05      	subs	r2, #5
 80036cc:	4620      	mov	r0, r4
 80036ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80036d2:	f7fe fb5d 	bl	8001d90 <chThdCreateStatic>
 80036d6:	69b3      	ldr	r3, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036d8:	493a      	ldr	r1, [pc, #232]	; (80037c4 <thd2_execute.lto_priv.116+0x134>)
 80036da:	689a      	ldr	r2, [r3, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80036dc:	f8c8 0000 	str.w	r0, [r8]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036e0:	464b      	mov	r3, r9
 80036e2:	9100      	str	r1, [sp, #0]
 80036e4:	3a01      	subs	r2, #1
 80036e6:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80036ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80036ee:	f7fe fb4f 	bl	8001d90 <chThdCreateStatic>
 80036f2:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80036f4:	4934      	ldr	r1, [pc, #208]	; (80037c8 <thd2_execute.lto_priv.116+0x138>)
 80036f6:	689a      	ldr	r2, [r3, #8]

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80036f8:	f8c8 0010 	str.w	r0, [r8, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80036fc:	9100      	str	r1, [sp, #0]
 80036fe:	3a02      	subs	r2, #2
 8003700:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8003704:	464b      	mov	r3, r9
 8003706:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800370a:	f7fe fb41 	bl	8001d90 <chThdCreateStatic>
 800370e:	2220      	movs	r2, #32
 8003710:	f8c8 000c 	str.w	r0, [r8, #12]
 8003714:	f382 8811 	msr	BASEPRI, r2
 8003718:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800371a:	6971      	ldr	r1, [r6, #20]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 800371c:	689b      	ldr	r3, [r3, #8]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800371e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80037d8 <thd2_execute.lto_priv.116+0x148>
 8003722:	f1a3 0a03 	sub.w	sl, r3, #3
 8003726:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80037dc <thd2_execute.lto_priv.116+0x14c>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800372a:	f505 73a4 	add.w	r3, r5, #328	; 0x148
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800372e:	2700      	movs	r7, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003730:	f505 7b1b 	add.w	fp, r5, #620	; 0x26c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8003734:	f8c4 a298 	str.w	sl, [r4, #664]	; 0x298
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8003738:	f8c4 a2cc 	str.w	sl, [r4, #716]	; 0x2cc

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800373c:	f8c4 93b4 	str.w	r9, [r4, #948]	; 0x3b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8003740:	2002      	movs	r0, #2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003742:	f505 79b6 	add.w	r9, r5, #364	; 0x16c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8003746:	f04f 0a01 	mov.w	sl, #1
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800374a:	f505 75b8 	add.w	r5, r5, #368	; 0x170
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800374e:	f8c4 62a0 	str.w	r6, [r4, #672]	; 0x2a0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003752:	f8c4 b29c 	str.w	fp, [r4, #668]	; 0x29c
 8003756:	f8c4 c3b8 	str.w	ip, [r4, #952]	; 0x3b8
 800375a:	f8c4 e3d4 	str.w	lr, [r4, #980]	; 0x3d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800375e:	f884 02ac 	strb.w	r0, [r4, #684]	; 0x2ac
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8003762:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
 8003766:	6173      	str	r3, [r6, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003768:	f884 72ad 	strb.w	r7, [r4, #685]	; 0x2ad
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800376c:	f8c4 72c8 	str.w	r7, [r4, #712]	; 0x2c8
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8003770:	f8c4 72c4 	str.w	r7, [r4, #708]	; 0x2c4
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8003774:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8003778:	f884 a2ae 	strb.w	sl, [r4, #686]	; 0x2ae
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	f8c8 3008 	str.w	r3, [r8, #8]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8003782:	f8c4 92b4 	str.w	r9, [r4, #692]	; 0x2b4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8003786:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 800378a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
 800378e:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  chThdStart(threads[2]);
 8003792:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003796:	f382 8811 	msr	BASEPRI, r2
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800379a:	f7fe fd01 	bl	80021a0 <chSchReadyI>
 800379e:	f387 8811 	msr	BASEPRI, r7
  test_wait_threads();
 80037a2:	f7fe ff3d 	bl	8002620 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80037a6:	4650      	mov	r0, sl
 80037a8:	4908      	ldr	r1, [pc, #32]	; (80037cc <thd2_execute.lto_priv.116+0x13c>)
}
 80037aa:	b003      	add	sp, #12
 80037ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80037b0:	f7fe b8b6 	b.w	8001920 <_test_assert_sequence>
 80037b4:	20001e68 	.word	0x20001e68
 80037b8:	20001910 	.word	0x20001910
 80037bc:	0800a5ac 	.word	0x0800a5ac
 80037c0:	08009f90 	.word	0x08009f90
 80037c4:	08009f84 	.word	0x08009f84
 80037c8:	08009f80 	.word	0x08009f80
 80037cc:	08009f8c 	.word	0x08009f8c
 80037d0:	08003121 	.word	0x08003121
 80037d4:	2000173c 	.word	0x2000173c
 80037d8:	08009f88 	.word	0x08009f88
 80037dc:	080006a1 	.word	0x080006a1

080037e0 <thd4_execute.lto_priv.118>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 80037e2:	f7fe fccd 	bl	8002180 <test_wait_tick>
 80037e6:	2620      	movs	r6, #32
 80037e8:	f386 8811 	msr	BASEPRI, r6
 80037ec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80037f0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80037f2:	2300      	movs	r3, #0
 80037f4:	b2a4      	uxth	r4, r4
 80037f6:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 80037fa:	20c8      	movs	r0, #200	; 0xc8
 80037fc:	f7fe fcb0 	bl	8002160 <chThdSleep>
  test_assert_time_window(1,
 8003800:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8003804:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8003808:	b289      	uxth	r1, r1
 800380a:	b292      	uxth	r2, r2
 800380c:	2001      	movs	r0, #1
 800380e:	f7fe f867 	bl	80018e0 <_test_assert_time_window>
 8003812:	b100      	cbz	r0, 8003816 <thd4_execute.lto_priv.118+0x36>
 8003814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003816:	f386 8811 	msr	BASEPRI, r6
 800381a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800381c:	b2a4      	uxth	r4, r4
 800381e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8003822:	20c8      	movs	r0, #200	; 0xc8
 8003824:	f7fe fc9c 	bl	8002160 <chThdSleep>
  test_assert_time_window(2,
 8003828:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800382c:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8003830:	b289      	uxth	r1, r1
 8003832:	b292      	uxth	r2, r2
 8003834:	2002      	movs	r0, #2
 8003836:	f7fe f853 	bl	80018e0 <_test_assert_time_window>
 800383a:	2800      	cmp	r0, #0
 800383c:	d1ea      	bne.n	8003814 <thd4_execute.lto_priv.118+0x34>
 800383e:	f386 8811 	msr	BASEPRI, r6
 8003842:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8003844:	b2a4      	uxth	r4, r4
 8003846:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 800384a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800384e:	f7fe fc87 	bl	8002160 <chThdSleep>
  test_assert_time_window(3,
 8003852:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8003856:	f204 72d2 	addw	r2, r4, #2002	; 0x7d2
 800385a:	b289      	uxth	r1, r1
 800385c:	b292      	uxth	r2, r2
 800385e:	2003      	movs	r0, #3
 8003860:	f7fe f83e 	bl	80018e0 <_test_assert_time_window>
 8003864:	2800      	cmp	r0, #0
 8003866:	d1d5      	bne.n	8003814 <thd4_execute.lto_priv.118+0x34>
 8003868:	f386 8811 	msr	BASEPRI, r6
 800386c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800386e:	b2a4      	uxth	r4, r4
 8003870:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8003874:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
 8003878:	b2bf      	uxth	r7, r7
 800387a:	f386 8811 	msr	BASEPRI, r6
 800387e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0)
 8003880:	1a79      	subs	r1, r7, r1
 8003882:	b289      	uxth	r1, r1
 8003884:	b111      	cbz	r1, 800388c <thd4_execute.lto_priv.118+0xac>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8003886:	2008      	movs	r0, #8
 8003888:	f7fe fb22 	bl	8001ed0 <chSchGoSleepTimeoutS>
 800388c:	2300      	movs	r3, #0
 800388e:	f383 8811 	msr	BASEPRI, r3
  chThdSleepUntil(time);
  test_assert_time_window(4,
 8003892:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8003896:	4639      	mov	r1, r7
                          time,
                          time + CH_CFG_ST_TIMEDELTA);
}
 8003898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800389c:	b292      	uxth	r2, r2
 800389e:	2004      	movs	r0, #4
 80038a0:	f7fe b81e 	b.w	80018e0 <_test_assert_time_window>
 80038a4:	f3af 8000 	nop.w
 80038a8:	f3af 8000 	nop.w
 80038ac:	f3af 8000 	nop.w

080038b0 <thd3_execute.lto_priv.117>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80038b2:	4e49      	ldr	r6, [pc, #292]	; (80039d8 <thd3_execute.lto_priv.117+0x128>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80038b4:	69b3      	ldr	r3, [r6, #24]
 80038b6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 80038b8:	1c65      	adds	r5, r4, #1
 80038ba:	4628      	mov	r0, r5
 80038bc:	f7fe f9d0 	bl	8001c60 <chThdSetPriority>
 80038c0:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 80038c2:	1b39      	subs	r1, r7, r4
 80038c4:	fab1 f181 	clz	r1, r1
 80038c8:	2001      	movs	r0, #1
 80038ca:	0949      	lsrs	r1, r1, #5
 80038cc:	f7fe f850 	bl	8001970 <_test_assert>
 80038d0:	b100      	cbz	r0, 80038d4 <thd3_execute.lto_priv.117+0x24>
 80038d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d4:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 80038d6:	2002      	movs	r0, #2
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	1a69      	subs	r1, r5, r1
 80038dc:	fab1 f181 	clz	r1, r1
 80038e0:	0949      	lsrs	r1, r1, #5
 80038e2:	f7fe f845 	bl	8001970 <_test_assert>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d1f3      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 80038ea:	4638      	mov	r0, r7
 80038ec:	f7fe f9b8 	bl	8001c60 <chThdSetPriority>
  test_assert(3, p1 == prio + 1,
 80038f0:	1a29      	subs	r1, r5, r0
 80038f2:	fab1 f181 	clz	r1, r1
 80038f6:	2003      	movs	r0, #3
 80038f8:	0949      	lsrs	r1, r1, #5
 80038fa:	f7fe f839 	bl	8001970 <_test_assert>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d1e7      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
 8003902:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8003904:	2004      	movs	r0, #4
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	1a61      	subs	r1, r4, r1
 800390a:	fab1 f181 	clz	r1, r1
 800390e:	0949      	lsrs	r1, r1, #5
 8003910:	f7fe f82e 	bl	8001970 <_test_assert>
 8003914:	2800      	cmp	r0, #0
 8003916:	d1dc      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
 8003918:	2320      	movs	r3, #32
 800391a:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800391e:	69b2      	ldr	r2, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8003920:	6893      	ldr	r3, [r2, #8]
 8003922:	3302      	adds	r3, #2
 8003924:	6093      	str	r3, [r2, #8]
 8003926:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800392a:	69b3      	ldr	r3, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 800392c:	1ca7      	adds	r7, r4, #2
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	2005      	movs	r0, #5
 8003932:	1a79      	subs	r1, r7, r1
 8003934:	fab1 f181 	clz	r1, r1
 8003938:	0949      	lsrs	r1, r1, #5
 800393a:	f7fe f819 	bl	8001970 <_test_assert>
 800393e:	2800      	cmp	r0, #0
 8003940:	d1c7      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8003942:	4628      	mov	r0, r5
 8003944:	f7fe f98c 	bl	8001c60 <chThdSetPriority>
  test_assert(6, p1 == prio,
 8003948:	1b01      	subs	r1, r0, r4
 800394a:	fab1 f181 	clz	r1, r1
 800394e:	2006      	movs	r0, #6
 8003950:	0949      	lsrs	r1, r1, #5
 8003952:	f7fe f80d 	bl	8001970 <_test_assert>
 8003956:	2800      	cmp	r0, #0
 8003958:	d1bb      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 800395a:	69b3      	ldr	r3, [r6, #24]
 800395c:	2007      	movs	r0, #7
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	1a79      	subs	r1, r7, r1
 8003962:	fab1 f181 	clz	r1, r1
 8003966:	0949      	lsrs	r1, r1, #5
 8003968:	f7fe f802 	bl	8001970 <_test_assert>
 800396c:	2800      	cmp	r0, #0
 800396e:	d1b0      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8003970:	69b3      	ldr	r3, [r6, #24]
 8003972:	2008      	movs	r0, #8
 8003974:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003976:	1a69      	subs	r1, r5, r1
 8003978:	fab1 f181 	clz	r1, r1
 800397c:	0949      	lsrs	r1, r1, #5
 800397e:	f7fd fff7 	bl	8001970 <_test_assert>
 8003982:	2800      	cmp	r0, #0
 8003984:	d1a5      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8003986:	1ce7      	adds	r7, r4, #3
 8003988:	4638      	mov	r0, r7
 800398a:	f7fe f969 	bl	8001c60 <chThdSetPriority>
  test_assert(9, p1 == prio + 1,
 800398e:	1a28      	subs	r0, r5, r0
 8003990:	4241      	negs	r1, r0
 8003992:	4141      	adcs	r1, r0
 8003994:	2009      	movs	r0, #9
 8003996:	f7fd ffeb 	bl	8001970 <_test_assert>
 800399a:	2800      	cmp	r0, #0
 800399c:	d199      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 800399e:	69b3      	ldr	r3, [r6, #24]
 80039a0:	200a      	movs	r0, #10
 80039a2:	6899      	ldr	r1, [r3, #8]
 80039a4:	1a7a      	subs	r2, r7, r1
 80039a6:	4251      	negs	r1, r2
 80039a8:	4151      	adcs	r1, r2
 80039aa:	f7fd ffe1 	bl	8001970 <_test_assert>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d18f      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 80039b2:	69b3      	ldr	r3, [r6, #24]
 80039b4:	200b      	movs	r0, #11
 80039b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80039b8:	1a7b      	subs	r3, r7, r1
 80039ba:	4259      	negs	r1, r3
 80039bc:	4159      	adcs	r1, r3
 80039be:	f7fd ffd7 	bl	8001970 <_test_assert>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d185      	bne.n	80038d2 <thd3_execute.lto_priv.117+0x22>
 80039c6:	2320      	movs	r3, #32
 80039c8:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80039cc:	69b3      	ldr	r3, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 80039ce:	609c      	str	r4, [r3, #8]
  chThdGetSelfX()->p_realprio = prio;
 80039d0:	63dc      	str	r4, [r3, #60]	; 0x3c
 80039d2:	f380 8811 	msr	BASEPRI, r0
 80039d6:	e77c      	b.n	80038d2 <thd3_execute.lto_priv.117+0x22>
 80039d8:	20001e68 	.word	0x20001e68
 80039dc:	f3af 8000 	nop.w

080039e0 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 80039e0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80039e2:	f100 070b 	add.w	r7, r0, #11
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf08      	it	eq
 80039ea:	460b      	moveq	r3, r1
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80039ec:	463d      	mov	r5, r7
  do {
    i = (int)(l % radix);
 80039ee:	fbb1 f6f2 	udiv	r6, r1, r2
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 80039f2:	fbb3 f3f2 	udiv	r3, r3, r2
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 80039f6:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 80039fa:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 80039fe:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8003a00:	bfc8      	it	gt
 8003a02:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8003a06:	b2e4      	uxtb	r4, r4
 8003a08:	f805 4d01 	strb.w	r4, [r5, #-1]!
    l /= radix;
 8003a0c:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ed      	bne.n	80039ee <long_to_string_with_divisor+0xe>

  i = (int)(p + MAX_FILLER - q);
 8003a12:	1b7b      	subs	r3, r7, r5
 8003a14:	4403      	add	r3, r0
 8003a16:	e001      	b.n	8003a1c <long_to_string_with_divisor+0x3c>
 8003a18:	f815 4f01 	ldrb.w	r4, [r5, #1]!
  do
    *p++ = *q++;
 8003a1c:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8003a20:	4298      	cmp	r0, r3
 8003a22:	d1f9      	bne.n	8003a18 <long_to_string_with_divisor+0x38>

  return p;
}
 8003a24:	bcf0      	pop	{r4, r5, r6, r7}
 8003a26:	4770      	bx	lr
 8003a28:	f3af 8000 	nop.w
 8003a2c:	f3af 8000 	nop.w

08003a30 <Vector8C>:
 */
CH_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  CH_IRQ_PROLOGUE();

  CH_IRQ_EPILOGUE();
 8003a30:	f7ff b8ce 	b.w	8002bd0 <_port_irq_epilogue>
 8003a34:	f3af 8000 	nop.w
 8003a38:	f3af 8000 	nop.w
 8003a3c:	f3af 8000 	nop.w

08003a40 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 8003a44:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003a48:	2700      	movs	r7, #0
 8003a4a:	6127      	str	r7, [r4, #16]
 8003a4c:	2520      	movs	r5, #32
 8003a4e:	f385 8811 	msr	BASEPRI, r5
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003a52:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003aec <VectorB0+0xac>
 8003a56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a58:	f8b8 e026 	ldrh.w	lr, [r8, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8003a5c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003a60:	b289      	uxth	r1, r1
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003a62:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8003a66:	891a      	ldrh	r2, [r3, #8]
 8003a68:	b280      	uxth	r0, r0
 8003a6a:	4290      	cmp	r0, r2
 8003a6c:	f108 061c 	add.w	r6, r8, #28
 8003a70:	d31a      	bcc.n	8003aa8 <VectorB0+0x68>
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003a72:	6819      	ldr	r1, [r3, #0]
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
      break;

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8003a74:	4472      	add	r2, lr
 8003a76:	f8a8 2026 	strh.w	r2, [r8, #38]	; 0x26

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8003a7a:	68da      	ldr	r2, [r3, #12]
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003a7c:	604e      	str	r6, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8003a7e:	f8c8 101c 	str.w	r1, [r8, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 8003a82:	60df      	str	r7, [r3, #12]
 8003a84:	f387 8811 	msr	BASEPRI, r7

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8003a88:	6918      	ldr	r0, [r3, #16]
 8003a8a:	4790      	blx	r2
 8003a8c:	f385 8811 	msr	BASEPRI, r5
 8003a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003a92:	f8b8 e026 	ldrh.w	lr, [r8, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8003a96:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003a9a:	b289      	uxth	r1, r1
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003a9c:	ebce 0001 	rsb	r0, lr, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8003aa0:	891a      	ldrh	r2, [r3, #8]
 8003aa2:	b280      	uxth	r0, r0
 8003aa4:	4290      	cmp	r0, r2
 8003aa6:	d2e4      	bcs.n	8003a72 <VectorB0+0x32>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003aa8:	42b3      	cmp	r3, r6
 8003aaa:	d019      	beq.n	8003ae0 <VectorB0+0xa0>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8003aac:	2a01      	cmp	r2, #1
 8003aae:	d00b      	beq.n	8003ac8 <VectorB0+0x88>
      port_timer_set_alarm(now + vtp->vt_delta);
 8003ab0:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aba:	2300      	movs	r3, #0
 8003abc:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8003ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8003ac4:	f7ff b884 	b.w	8002bd0 <_port_irq_epilogue>
    else
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8003ac8:	3102      	adds	r1, #2
 8003aca:	b289      	uxth	r1, r1
 8003acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ad0:	6359      	str	r1, [r3, #52]	; 0x34
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f383 8811 	msr	BASEPRI, r3
}
 8003ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8003adc:	f7ff b878 	b.w	8002bd0 <_port_irq_epilogue>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e7e7      	b.n	8003aba <VectorB0+0x7a>
 8003aea:	bf00      	nop
 8003aec:	20001e68 	.word	0x20001e68

08003af0 <usb_packet_write_from_queue>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003af2:	6803      	ldr	r3, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8003af4:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8003af8:	f103 5e00 	add.w	lr, r3, #536870912	; 0x20000000
 8003afc:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
 8003b00:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8003b04:	6042      	str	r2, [r0, #4]
  nhw = n / 2;
  while (nhw > 0) {
 8003b06:	d018      	beq.n	8003b3a <usb_packet_write_from_queue+0x4a>
 8003b08:	4677      	mov	r7, lr
 8003b0a:	4664      	mov	r4, ip
 8003b0c:	690e      	ldr	r6, [r1, #16]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b0e:	6988      	ldr	r0, [r1, #24]
 8003b10:	1c43      	adds	r3, r0, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8003b12:	42b3      	cmp	r3, r6
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b14:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8003b16:	bf28      	it	cs
 8003b18:	68cb      	ldrcs	r3, [r1, #12]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b1a:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8003b1c:	1c5d      	adds	r5, r3, #1
 8003b1e:	618d      	str	r5, [r1, #24]
 8003b20:	781b      	ldrb	r3, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top)
 8003b22:	42b5      	cmp	r5, r6
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8003b24:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8003b28:	bf24      	itt	cs
 8003b2a:	68c8      	ldrcs	r0, [r1, #12]
 8003b2c:	6188      	strcs	r0, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8003b2e:	3c01      	subs	r4, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8003b30:	f847 3b04 	str.w	r3, [r7], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8003b34:	d1eb      	bne.n	8003b0e <usb_packet_write_from_queue+0x1e>
 8003b36:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8003b3a:	07d3      	lsls	r3, r2, #31
 8003b3c:	d50b      	bpl.n	8003b56 <usb_packet_write_from_queue+0x66>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b3e:	6988      	ldr	r0, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8003b40:	690c      	ldr	r4, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8003b46:	42a3      	cmp	r3, r4
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b48:	7800      	ldrb	r0, [r0, #0]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8003b4a:	bf28      	it	cs
 8003b4c:	68cb      	ldrcs	r3, [r1, #12]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8003b4e:	f8ce 0000 	str.w	r0, [lr]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8003b52:	bf28      	it	cs
 8003b54:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8003b56:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8003b5a:	b9cb      	cbnz	r3, 8003b90 <usb_packet_write_from_queue+0xa0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b5c:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003b60:	2320      	movs	r3, #32
 8003b62:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8003b66:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8003b68:	4608      	mov	r0, r1
 8003b6a:	441a      	add	r2, r3
 8003b6c:	608a      	str	r2, [r1, #8]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f7fe ffc6 	bl	8002b00 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b74:	f3ef 8405 	mrs	r4, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FF) != 0);
 8003b78:	f3c4 0408 	ubfx	r4, r4, #0, #9
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context())
 8003b7c:	b11c      	cbz	r4, 8003b86 <usb_packet_write_from_queue+0x96>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSysUnlockFromISR();
    else {
      chSchRescheduleS();
 8003b86:	f7fe f85b 	bl	8001c40 <chSchRescheduleS>
 8003b8a:	f384 8811 	msr	BASEPRI, r4
 8003b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b90:	688b      	ldr	r3, [r1, #8]
 8003b92:	4608      	mov	r0, r1
 8003b94:	441a      	add	r2, r3
 8003b96:	608a      	str	r2, [r1, #8]
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8003b98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f7fe bfaf 	b.w	8002b00 <chThdDequeueAllI>
 8003ba2:	bf00      	nop
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	f3af 8000 	nop.w
 8003bac:	f3af 8000 	nop.w

08003bb0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8003bb0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);
 8003bb2:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <VectorB8+0x10>)
 8003bb4:	f001 f914 	bl	8004de0 <gpt_lld_serve_interrupt.lto_priv.98>

  OSAL_IRQ_EPILOGUE();
}
 8003bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 8003bbc:	f7ff b808 	b.w	8002bd0 <_port_irq_epilogue>
 8003bc0:	20001784 	.word	0x20001784
 8003bc4:	f3af 8000 	nop.w
 8003bc8:	f3af 8000 	nop.w
 8003bcc:	f3af 8000 	nop.w

08003bd0 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8003bd0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);
 8003bd2:	4803      	ldr	r0, [pc, #12]	; (8003be0 <VectorB4+0x10>)
 8003bd4:	f001 f904 	bl	8004de0 <gpt_lld_serve_interrupt.lto_priv.98>

  OSAL_IRQ_EPILOGUE();
}
 8003bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 8003bdc:	f7fe bff8 	b.w	8002bd0 <_port_irq_epilogue>
 8003be0:	20001fbc 	.word	0x20001fbc
 8003be4:	f3af 8000 	nop.w
 8003be8:	f3af 8000 	nop.w
 8003bec:	f3af 8000 	nop.w

08003bf0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	4681      	mov	r9, r0
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	4616      	mov	r6, r2
 8003bfa:	4682      	mov	sl, r0
 8003bfc:	b08d      	sub	sp, #52	; 0x34
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9301      	str	r3, [sp, #4]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8003c02:	7829      	ldrb	r1, [r5, #0]
 8003c04:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8003c06:	b171      	cbz	r1, 8003c26 <chvprintf+0x36>
      return n;
    if (c != '%') {
 8003c08:	2925      	cmp	r1, #37	; 0x25
 8003c0a:	d010      	beq.n	8003c2e <chvprintf+0x3e>
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8003c0c:	461d      	mov	r5, r3
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8003c0e:	9c01      	ldr	r4, [sp, #4]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8003c10:	f8da 2000 	ldr.w	r2, [sl]
 8003c14:	4650      	mov	r0, sl
 8003c16:	6892      	ldr	r2, [r2, #8]
      n++;
 8003c18:	3401      	adds	r4, #1
 8003c1a:	9401      	str	r4, [sp, #4]
  while (TRUE) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
 8003c1c:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8003c1e:	7829      	ldrb	r1, [r5, #0]
 8003c20:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8003c22:	2900      	cmp	r1, #0
 8003c24:	d1f0      	bne.n	8003c08 <chvprintf+0x18>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8003c26:	9801      	ldr	r0, [sp, #4]
 8003c28:	b00d      	add	sp, #52	; 0x34
 8003c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8003c2e:	786a      	ldrb	r2, [r5, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8003c30:	2700      	movs	r7, #0
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8003c32:	2a2d      	cmp	r2, #45	; 0x2d
 8003c34:	bf03      	ittte	eq
 8003c36:	78aa      	ldrbeq	r2, [r5, #2]
      fmt++;
 8003c38:	1cab      	addeq	r3, r5, #2
      left_align = TRUE;
 8003c3a:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8003c3e:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8003c42:	2a30      	cmp	r2, #48	; 0x30
 8003c44:	bf03      	ittte	eq
 8003c46:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8003c48:	3301      	addeq	r3, #1
      filler = '0';
 8003c4a:	f04f 0830 	moveq.w	r8, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8003c4e:	f04f 0820 	movne.w	r8, #32
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	e005      	b.n	8003c62 <chvprintf+0x72>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8003c56:	7833      	ldrb	r3, [r6, #0]
 8003c58:	3604      	adds	r6, #4
 8003c5a:	782a      	ldrb	r2, [r5, #0]
      else
        break;
      width = width * 10 + c;
 8003c5c:	eb03 0740 	add.w	r7, r3, r0, lsl #1
 8003c60:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003c62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8003c6a:	460d      	mov	r5, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8003c6c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003c70:	d9f3      	bls.n	8003c5a <chvprintf+0x6a>
        c -= '0';
      else if (c == '*')
 8003c72:	2a2a      	cmp	r2, #42	; 0x2a
 8003c74:	d0ef      	beq.n	8003c56 <chvprintf+0x66>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8003c76:	2a2e      	cmp	r2, #46	; 0x2e
 8003c78:	f04f 0b00 	mov.w	fp, #0
 8003c7c:	d043      	beq.n	8003d06 <chvprintf+0x116>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003c7e:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003c82:	2b4c      	cmp	r3, #76	; 0x4c
 8003c84:	d04e      	beq.n	8003d24 <chvprintf+0x134>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003c86:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8003c8a:	2934      	cmp	r1, #52	; 0x34
 8003c8c:	f200 8174 	bhi.w	8003f78 <chvprintf+0x388>
 8003c90:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003c94:	01720158 	.word	0x01720158
 8003c98:	01720172 	.word	0x01720172
 8003c9c:	01580172 	.word	0x01580172
 8003ca0:	01720172 	.word	0x01720172
 8003ca4:	01720172 	.word	0x01720172
 8003ca8:	012b0172 	.word	0x012b0172
 8003cac:	01720172 	.word	0x01720172
 8003cb0:	01720172 	.word	0x01720172
 8003cb4:	015f0172 	.word	0x015f0172
 8003cb8:	01720172 	.word	0x01720172
 8003cbc:	0172016f 	.word	0x0172016f
 8003cc0:	01720172 	.word	0x01720172
 8003cc4:	01720172 	.word	0x01720172
 8003cc8:	01720172 	.word	0x01720172
 8003ccc:	01720172 	.word	0x01720172
 8003cd0:	01610172 	.word	0x01610172
 8003cd4:	01720158 	.word	0x01720158
 8003cd8:	017200d5 	.word	0x017200d5
 8003cdc:	01580172 	.word	0x01580172
 8003ce0:	01720172 	.word	0x01720172
 8003ce4:	01720172 	.word	0x01720172
 8003ce8:	012b0172 	.word	0x012b0172
 8003cec:	01720172 	.word	0x01720172
 8003cf0:	00890172 	.word	0x00890172
 8003cf4:	015f0172 	.word	0x015f0172
 8003cf8:	01720172 	.word	0x01720172
 8003cfc:	016f      	.short	0x016f
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8003cfe:	7833      	ldrb	r3, [r6, #0]
 8003d00:	3604      	adds	r6, #4
        else
          break;
        precision *= 10;
        precision += c;
 8003d02:	eb03 0b41 	add.w	fp, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8003d06:	f815 2b01 	ldrb.w	r2, [r5], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8003d0a:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8003d0e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	d9f4      	bls.n	8003d02 <chvprintf+0x112>
          c -= '0';
        else if (c == '*')
 8003d18:	2a2a      	cmp	r2, #42	; 0x2a
 8003d1a:	d0f0      	beq.n	8003cfe <chvprintf+0x10e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8003d1c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003d20:	2b4c      	cmp	r3, #76	; 0x4c
 8003d22:	d1b0      	bne.n	8003c86 <chvprintf+0x96>
      is_long = TRUE;
      if (*fmt)
 8003d24:	782b      	ldrb	r3, [r5, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8126 	beq.w	8003f78 <chvprintf+0x388>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003d2c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8003d30:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003d32:	2a34      	cmp	r2, #52	; 0x34
 8003d34:	f200 811f 	bhi.w	8003f76 <chvprintf+0x386>
 8003d38:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003d3c:	011d0104 	.word	0x011d0104
 8003d40:	011d011d 	.word	0x011d011d
 8003d44:	0104011d 	.word	0x0104011d
 8003d48:	011d011d 	.word	0x011d011d
 8003d4c:	011d011d 	.word	0x011d011d
 8003d50:	00d7011d 	.word	0x00d7011d
 8003d54:	011d011d 	.word	0x011d011d
 8003d58:	011d011d 	.word	0x011d011d
 8003d5c:	010b011d 	.word	0x010b011d
 8003d60:	011d011d 	.word	0x011d011d
 8003d64:	011d011b 	.word	0x011d011b
 8003d68:	011d011d 	.word	0x011d011d
 8003d6c:	011d011d 	.word	0x011d011d
 8003d70:	011d011d 	.word	0x011d011d
 8003d74:	011d011d 	.word	0x011d011d
 8003d78:	010d011d 	.word	0x010d011d
 8003d7c:	011d0104 	.word	0x011d0104
 8003d80:	011d0081 	.word	0x011d0081
 8003d84:	0104011d 	.word	0x0104011d
 8003d88:	011d011d 	.word	0x011d011d
 8003d8c:	011d011d 	.word	0x011d011d
 8003d90:	00d7011d 	.word	0x00d7011d
 8003d94:	011d011d 	.word	0x011d011d
 8003d98:	0035011d 	.word	0x0035011d
 8003d9c:	010b011d 	.word	0x010b011d
 8003da0:	011d011d 	.word	0x011d011d
 8003da4:	011b      	.short	0x011b
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8003da6:	6834      	ldr	r4, [r6, #0]
        s = "(null)";
 8003da8:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <chvprintf+0x408>)
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8003daa:	3604      	adds	r6, #4
        s = "(null)";
 8003dac:	2c00      	cmp	r4, #0
 8003dae:	bf08      	it	eq
 8003db0:	461c      	moveq	r4, r3
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003db2:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8003db4:	f1bb 0f00 	cmp.w	fp, #0
 8003db8:	f000 80fc 	beq.w	8003fb4 <chvprintf+0x3c4>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80fe 	beq.w	8003fbe <chvprintf+0x3ce>
 8003dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	e002      	b.n	8003dd0 <chvprintf+0x1e0>
 8003dca:	f1bb 0b01 	subs.w	fp, fp, #1
 8003dce:	d403      	bmi.n	8003dd8 <chvprintf+0x1e8>
 8003dd0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f8      	bne.n	8003dca <chvprintf+0x1da>
 8003dd8:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8003dda:	1a3f      	subs	r7, r7, r0
 8003ddc:	f100 3bff 	add.w	fp, r0, #4294967295
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8003de0:	f04f 0820 	mov.w	r8, #32
 8003de4:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003de8:	f1b9 0f00 	cmp.w	r9, #0
 8003dec:	f000 8090 	beq.w	8003f10 <chvprintf+0x320>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003df0:	f1bb 0f00 	cmp.w	fp, #0
 8003df4:	db13      	blt.n	8003e1e <chvprintf+0x22e>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003df6:	46d9      	mov	r9, fp
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8003df8:	f8da 3000 	ldr.w	r3, [sl]
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003dfc:	f109 39ff 	add.w	r9, r9, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4650      	mov	r0, sl
 8003e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e08:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003e0a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003e0e:	d1f3      	bne.n	8003df8 <chvprintf+0x208>
 8003e10:	9b01      	ldr	r3, [sp, #4]
 8003e12:	3301      	adds	r3, #1
 8003e14:	f1bb 0f00 	cmp.w	fp, #0
 8003e18:	bfa8      	it	ge
 8003e1a:	445b      	addge	r3, fp
 8003e1c:	9301      	str	r3, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8003e1e:	2f00      	cmp	r7, #0
 8003e20:	f43f aeef 	beq.w	8003c02 <chvprintf+0x12>
 8003e24:	463c      	mov	r4, r7
      chSequentialStreamPut(chp, (uint8_t)filler);
 8003e26:	f8da 3000 	ldr.w	r3, [sl]
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4641      	mov	r1, r8
 8003e30:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8003e32:	3c01      	subs	r4, #1
 8003e34:	d1f7      	bne.n	8003e26 <chvprintf+0x236>
 8003e36:	9b01      	ldr	r3, [sp, #4]
 8003e38:	443b      	add	r3, r7
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	e6e1      	b.n	8003c02 <chvprintf+0x12>
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8003e3e:	3607      	adds	r6, #7
 8003e40:	f026 0607 	bic.w	r6, r6, #7
 8003e44:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e48:	f7fd f852 	bl	8000ef0 <__aeabi_d2f>
      if (f < 0) {
 8003e4c:	2100      	movs	r1, #0
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8003e4e:	3608      	adds	r6, #8
 8003e50:	4604      	mov	r4, r0
      if (f < 0) {
 8003e52:	f7fd fb4b 	bl	80014ec <__aeabi_fcmplt>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f040 80c2 	bne.w	8003fe0 <chvprintf+0x3f0>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8003e5c:	ab06      	add	r3, sp, #24
                                      10000000, 100000000, 1000000000};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8003e5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e62:	f1bb 0f08 	cmp.w	fp, #8
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8003e66:	4a65      	ldr	r2, [pc, #404]	; (8003ffc <chvprintf+0x40c>)
 8003e68:	bf28      	it	cs
 8003e6a:	f04f 0b08 	movcs.w	fp, #8
 8003e6e:	9302      	str	r3, [sp, #8]
 8003e70:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]

  l = (long)num;
 8003e74:	4620      	mov	r0, r4
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8003e76:	9304      	str	r3, [sp, #16]

  l = (long)num;
 8003e78:	f7fd fb62 	bl	8001540 <__aeabi_f2iz>
 8003e7c:	4683      	mov	fp, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 8003e7e:	9b02      	ldr	r3, [sp, #8]
 8003e80:	220a      	movs	r2, #10
 8003e82:	4618      	mov	r0, r3
 8003e84:	4659      	mov	r1, fp
 8003e86:	2300      	movs	r3, #0
 8003e88:	f7ff fdaa 	bl	80039e0 <long_to_string_with_divisor>
  *p++ = '.';
 8003e8c:	4684      	mov	ip, r0
 8003e8e:	232e      	movs	r3, #46	; 0x2e
 8003e90:	f80c 3b01 	strb.w	r3, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8003e94:	4620      	mov	r0, r4
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
 8003e96:	f8cd c014 	str.w	ip, [sp, #20]
 8003e9a:	f8cd c008 	str.w	ip, [sp, #8]
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8003e9e:	f7fc fd73 	bl	8000988 <__aeabi_f2d>
 8003ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8003ea6:	4658      	mov	r0, fp
 8003ea8:	f7fc fd5c 	bl	8000964 <__aeabi_i2d>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eb4:	f7fc fc08 	bl	80006c8 <__aeabi_dsub>
 8003eb8:	9c04      	ldr	r4, [sp, #16]
 8003eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7fc fd40 	bl	8000944 <__aeabi_ui2d>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ecc:	f7fc fdb0 	bl	8000a30 <__aeabi_dmul>
 8003ed0:	f7fc ffc6 	bl	8000e60 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <chvprintf+0x410>)
 8003ed8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8003edc:	fba3 2302 	umull	r2, r3, r3, r2
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8003ee0:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8003ee2:	08db      	lsrs	r3, r3, #3
 8003ee4:	4660      	mov	r0, ip
 8003ee6:	220a      	movs	r2, #10
 8003ee8:	e004      	b.n	8003ef4 <chvprintf+0x304>
 8003eea:	2208      	movs	r2, #8
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003eec:	6831      	ldr	r1, [r6, #0]
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003eee:	a806      	add	r0, sp, #24
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003ef0:	3604      	adds	r6, #4
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f7ff fd74 	bl	80039e0 <long_to_string_with_divisor>
 8003ef8:	ab06      	add	r3, sp, #24
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003efa:	461c      	mov	r4, r3
 8003efc:	1ac0      	subs	r0, r0, r3
 8003efe:	f100 3bff 	add.w	fp, r0, #4294967295
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8003f02:	1a3f      	subs	r7, r7, r0
 8003f04:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      width = 0;
    if (left_align == FALSE)
 8003f08:	f1b9 0f00 	cmp.w	r9, #0
 8003f0c:	f47f af70 	bne.w	8003df0 <chvprintf+0x200>
      width = -width;
 8003f10:	f1c7 0900 	rsb	r9, r7, #0
    if (width < 0) {
 8003f14:	f1b9 0f00 	cmp.w	r9, #0
 8003f18:	d037      	beq.n	8003f8a <chvprintf+0x39a>
      if (*s == '-' && filler == '0') {
 8003f1a:	7821      	ldrb	r1, [r4, #0]
 8003f1c:	292d      	cmp	r1, #45	; 0x2d
 8003f1e:	d03a      	beq.n	8003f96 <chvprintf+0x3a6>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8003f20:	464f      	mov	r7, r9
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8003f22:	f8da 3000 	ldr.w	r3, [sl]
 8003f26:	4650      	mov	r0, sl
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8003f2e:	3701      	adds	r7, #1
 8003f30:	d1f7      	bne.n	8003f22 <chvprintf+0x332>
 8003f32:	9b01      	ldr	r3, [sp, #4]
    }
    while (--i >= 0) {
 8003f34:	f1bb 0f00 	cmp.w	fp, #0
 8003f38:	ebc9 0303 	rsb	r3, r9, r3
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	f6bf af5a 	bge.w	8003df6 <chvprintf+0x206>
 8003f42:	e65e      	b.n	8003c02 <chvprintf+0x12>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8003f44:	6831      	ldr	r1, [r6, #0]
 8003f46:	3604      	adds	r6, #4
      if (l < 0) {
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	db42      	blt.n	8003fd2 <chvprintf+0x3e2>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8003f4c:	a806      	add	r0, sp, #24
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003f4e:	220a      	movs	r2, #10
 8003f50:	e7cf      	b.n	8003ef2 <chvprintf+0x302>
 8003f52:	220a      	movs	r2, #10
 8003f54:	e7ca      	b.n	8003eec <chvprintf+0x2fc>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	aa06      	add	r2, sp, #24
 8003f5a:	f10d 0019 	add.w	r0, sp, #25
 8003f5e:	1a80      	subs	r0, r0, r2
 8003f60:	f100 3bff 	add.w	fp, r0, #4294967295
 8003f64:	f88d 3018 	strb.w	r3, [sp, #24]
 8003f68:	3604      	adds	r6, #4
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8003f6a:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003f6e:	4614      	mov	r4, r2
 8003f70:	e7c7      	b.n	8003f02 <chvprintf+0x312>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003f72:	2210      	movs	r2, #16
 8003f74:	e7ba      	b.n	8003eec <chvprintf+0x2fc>
 8003f76:	461a      	mov	r2, r3
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003f78:	ac06      	add	r4, sp, #24
 8003f7a:	f10d 0019 	add.w	r0, sp, #25
 8003f7e:	1b00      	subs	r0, r0, r4
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8003f80:	f88d 2018 	strb.w	r2, [sp, #24]
 8003f84:	f100 3bff 	add.w	fp, r0, #4294967295
 8003f88:	e7bb      	b.n	8003f02 <chvprintf+0x312>
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003f8a:	f1bb 0f00 	cmp.w	fp, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8003f8e:	464f      	mov	r7, r9
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003f90:	f6bf af31 	bge.w	8003df6 <chvprintf+0x206>
 8003f94:	e635      	b.n	8003c02 <chvprintf+0x12>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8003f96:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8003f9a:	d1c1      	bne.n	8003f20 <chvprintf+0x330>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8003f9c:	f8da 3000 	ldr.w	r3, [sl]
 8003fa0:	4650      	mov	r0, sl
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4798      	blx	r3
        n++;
 8003fa6:	9b01      	ldr	r3, [sp, #4]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8003fa8:	3401      	adds	r4, #1
        n++;
 8003faa:	3301      	adds	r3, #1
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fb2:	e7b5      	b.n	8003f20 <chvprintf+0x330>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003fb4:	f647 7bfe 	movw	fp, #32766	; 0x7ffe
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f af04 	bne.w	8003dc6 <chvprintf+0x1d6>
 8003fbe:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003fc2:	f1b9 0f00 	cmp.w	r9, #0
 8003fc6:	d113      	bne.n	8003ff0 <chvprintf+0x400>
 8003fc8:	f04f 3bff 	mov.w	fp, #4294967295
 8003fcc:	f04f 0820 	mov.w	r8, #32
 8003fd0:	e79e      	b.n	8003f10 <chvprintf+0x320>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8003fd2:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8003fd4:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8003fd6:	f88d 3018 	strb.w	r3, [sp, #24]
 8003fda:	f10d 0019 	add.w	r0, sp, #25
 8003fde:	e7b6      	b.n	8003f4e <chvprintf+0x35e>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8003fe0:	232d      	movs	r3, #45	; 0x2d
 8003fe2:	f88d 3018 	strb.w	r3, [sp, #24]
        f = -f;
 8003fe6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8003fea:	f10d 0319 	add.w	r3, sp, #25
 8003fee:	e736      	b.n	8003e5e <chvprintf+0x26e>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003ff0:	f04f 0820 	mov.w	r8, #32
 8003ff4:	e713      	b.n	8003e1e <chvprintf+0x22e>
 8003ff6:	bf00      	nop
 8003ff8:	08009fa0 	.word	0x08009fa0
 8003ffc:	0800a150 	.word	0x0800a150
 8004000:	cccccccd 	.word	0xcccccccd
 8004004:	f3af 8000 	nop.w
 8004008:	f3af 8000 	nop.w
 800400c:	f3af 8000 	nop.w

08004010 <chprintf.lto_priv.81>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8004010:	b40e      	push	{r1, r2, r3}
 8004012:	b500      	push	{lr}
 8004014:	b082      	sub	sp, #8
 8004016:	ab03      	add	r3, sp, #12
 8004018:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800401c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800401e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8004020:	f7ff fde6 	bl	8003bf0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8004024:	b002      	add	sp, #8
 8004026:	f85d eb04 	ldr.w	lr, [sp], #4
 800402a:	b003      	add	sp, #12
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8004030:	b40e      	push	{r1, r2, r3}
 8004032:	b500      	push	{lr}
 8004034:	b082      	sub	sp, #8
 8004036:	ab03      	add	r3, sp, #12
 8004038:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800403c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800403e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8004040:	f7ff fdd6 	bl	8003bf0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8004044:	b002      	add	sp, #8
 8004046:	f85d eb04 	ldr.w	lr, [sp], #4
 800404a:	b003      	add	sp, #12
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop

08004050 <shell_thread.lto_priv.83>:
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8004054:	4b7a      	ldr	r3, [pc, #488]	; (8004240 <shell_thread.lto_priv.83+0x1f0>)
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8004056:	6804      	ldr	r4, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	4a7a      	ldr	r2, [pc, #488]	; (8004244 <shell_thread.lto_priv.83+0x1f4>)
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 800405c:	b098      	sub	sp, #96	; 0x60
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800405e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8004062:	4979      	ldr	r1, [pc, #484]	; (8004248 <shell_thread.lto_priv.83+0x1f8>)
 8004064:	4620      	mov	r0, r4
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8004066:	619a      	str	r2, [r3, #24]
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8004068:	f7ff ffe2 	bl	8004030 <chprintf>
 800406c:	ae08      	add	r6, sp, #32
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800406e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
 8004072:	4620      	mov	r0, r4
 8004074:	4975      	ldr	r1, [pc, #468]	; (800424c <shell_thread.lto_priv.83+0x1fc>)
 8004076:	f7ff ffdb 	bl	8004030 <chprintf>
 * @retval FALSE        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 800407a:	4635      	mov	r5, r6

  while (TRUE) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	4620      	mov	r0, r4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f10d 0107 	add.w	r1, sp, #7
 8004086:	2201      	movs	r2, #1
 8004088:	4798      	blx	r3
 800408a:	b370      	cbz	r0, 80040ea <shell_thread.lto_priv.83+0x9a>
      return TRUE;
    if (c == 4) {
 800408c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004090:	2904      	cmp	r1, #4
 8004092:	d026      	beq.n	80040e2 <shell_thread.lto_priv.83+0x92>
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
 8004094:	2908      	cmp	r1, #8
 8004096:	d011      	beq.n	80040bc <shell_thread.lto_priv.83+0x6c>
 8004098:	297f      	cmp	r1, #127	; 0x7f
 800409a:	d00f      	beq.n	80040bc <shell_thread.lto_priv.83+0x6c>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 800409c:	290d      	cmp	r1, #13
 800409e:	d036      	beq.n	800410e <shell_thread.lto_priv.83+0xbe>
      chprintf(chp, "\r\n");
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
 80040a0:	291f      	cmp	r1, #31
 80040a2:	d9eb      	bls.n	800407c <shell_thread.lto_priv.83+0x2c>
      continue;
    if (p < line + size - 1) {
 80040a4:	42bd      	cmp	r5, r7
 80040a6:	d2e9      	bcs.n	800407c <shell_thread.lto_priv.83+0x2c>
      chSequentialStreamPut(chp, c);
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	4620      	mov	r0, r4
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4798      	blx	r3
      *p++ = (char)c;
 80040b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040b4:	3501      	adds	r5, #1
 80040b6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80040ba:	e7df      	b.n	800407c <shell_thread.lto_priv.83+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80040bc:	42b5      	cmp	r5, r6
 80040be:	d0dd      	beq.n	800407c <shell_thread.lto_priv.83+0x2c>
        chSequentialStreamPut(chp, c);
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	4620      	mov	r0, r4
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	4620      	mov	r0, r4
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2120      	movs	r1, #32
 80040d0:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	4620      	mov	r0, r4
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
        p--;
 80040dc:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 80040de:	4798      	blx	r3
 80040e0:	e7cc      	b.n	800407c <shell_thread.lto_priv.83+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return TRUE;
    if (c == 4) {
      chprintf(chp, "^D");
 80040e2:	4620      	mov	r0, r4
 80040e4:	495a      	ldr	r1, [pc, #360]	; (8004250 <shell_thread.lto_priv.83+0x200>)
 80040e6:	f7ff ffa3 	bl	8004030 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 80040ea:	4620      	mov	r0, r4
 80040ec:	4959      	ldr	r1, [pc, #356]	; (8004254 <shell_thread.lto_priv.83+0x204>)
 80040ee:	f7ff ff9f 	bl	8004030 <chprintf>
 80040f2:	2320      	movs	r3, #32
 80040f4:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, 0);
 80040f8:	2100      	movs	r1, #0
 80040fa:	4857      	ldr	r0, [pc, #348]	; (8004258 <shell_thread.lto_priv.83+0x208>)
 80040fc:	f7fe f8d0 	bl	80022a0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 8004100:	2000      	movs	r0, #0
 8004102:	f7fe fd15 	bl	8002b30 <chThdExitS>
    }
  }
  shellExit(MSG_OK);
  /* Never executed, silencing a warning.*/
  return 0;
}
 8004106:	2000      	movs	r0, #0
 8004108:	b018      	add	sp, #96	; 0x60
 800410a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800410e:	4953      	ldr	r1, [pc, #332]	; (800425c <shell_thread.lto_priv.83+0x20c>)
 8004110:	4620      	mov	r0, r4
 8004112:	f7ff ff8d 	bl	8004030 <chprintf>
      *p = 0;
 8004116:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004118:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 800411a:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800411c:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 800411e:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004120:	f005 f85e 	bl	80091e0 <_strtok.constprop.3>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004124:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8004126:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004128:	2000      	movs	r0, #0
 800412a:	f10d 090c 	add.w	r9, sp, #12
 800412e:	f005 f857 	bl	80091e0 <_strtok.constprop.3>
 8004132:	b150      	cbz	r0, 800414a <shell_thread.lto_priv.83+0xfa>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8004134:	2d04      	cmp	r5, #4
 8004136:	d01d      	beq.n	8004174 <shell_thread.lto_priv.83+0x124>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8004138:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800413c:	a902      	add	r1, sp, #8
 800413e:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8004140:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8004142:	f005 f84d 	bl	80091e0 <_strtok.constprop.3>
 8004146:	2800      	cmp	r0, #0
 8004148:	d1f4      	bne.n	8004134 <shell_thread.lto_priv.83+0xe4>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800414a:	ab18      	add	r3, sp, #96	; 0x60
 800414c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004150:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8004154:	f1ba 0f00 	cmp.w	sl, #0
 8004158:	d08b      	beq.n	8004072 <shell_thread.lto_priv.83+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 800415a:	4650      	mov	r0, sl
 800415c:	4940      	ldr	r1, [pc, #256]	; (8004260 <shell_thread.lto_priv.83+0x210>)
 800415e:	f005 f8c7 	bl	80092f0 <strcasecmp>
 8004162:	b970      	cbnz	r0, 8004182 <shell_thread.lto_priv.83+0x132>
        if (n > 0) {
 8004164:	2d00      	cmp	r5, #0
 8004166:	d0c4      	beq.n	80040f2 <shell_thread.lto_priv.83+0xa2>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004168:	4620      	mov	r0, r4
 800416a:	493e      	ldr	r1, [pc, #248]	; (8004264 <shell_thread.lto_priv.83+0x214>)
 800416c:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <shell_thread.lto_priv.83+0x210>)
 800416e:	f7ff ff5f 	bl	8004030 <chprintf>
 8004172:	e77e      	b.n	8004072 <shell_thread.lto_priv.83+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8004174:	4620      	mov	r0, r4
 8004176:	493c      	ldr	r1, [pc, #240]	; (8004268 <shell_thread.lto_priv.83+0x218>)
 8004178:	f7ff ff5a 	bl	8004030 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	9307      	str	r3, [sp, #28]
 8004180:	e777      	b.n	8004072 <shell_thread.lto_priv.83+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8004182:	4650      	mov	r0, sl
 8004184:	4939      	ldr	r1, [pc, #228]	; (800426c <shell_thread.lto_priv.83+0x21c>)
 8004186:	f005 f8b3 	bl	80092f0 <strcasecmp>
 800418a:	b930      	cbnz	r0, 800419a <shell_thread.lto_priv.83+0x14a>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800418c:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800418e:	b1c5      	cbz	r5, 80041c2 <shell_thread.lto_priv.83+0x172>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004190:	4934      	ldr	r1, [pc, #208]	; (8004264 <shell_thread.lto_priv.83+0x214>)
 8004192:	4a36      	ldr	r2, [pc, #216]	; (800426c <shell_thread.lto_priv.83+0x21c>)
 8004194:	f7ff ff4c 	bl	8004030 <chprintf>
 8004198:	e76b      	b.n	8004072 <shell_thread.lto_priv.83+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800419a:	4b35      	ldr	r3, [pc, #212]	; (8004270 <shell_thread.lto_priv.83+0x220>)
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	4699      	mov	r9, r3
 80041a0:	b918      	cbnz	r0, 80041aa <shell_thread.lto_priv.83+0x15a>
 80041a2:	e031      	b.n	8004208 <shell_thread.lto_priv.83+0x1b8>
 80041a4:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80041a8:	b370      	cbz	r0, 8004208 <shell_thread.lto_priv.83+0x1b8>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80041aa:	4651      	mov	r1, sl
 80041ac:	f005 f8a0 	bl	80092f0 <strcasecmp>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d1f7      	bne.n	80041a4 <shell_thread.lto_priv.83+0x154>
      scp->sc_function(chp, argc, argv);
 80041b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041b8:	4629      	mov	r1, r5
 80041ba:	aa03      	add	r2, sp, #12
 80041bc:	4620      	mov	r0, r4
 80041be:	4798      	blx	r3
 80041c0:	e757      	b.n	8004072 <shell_thread.lto_priv.83+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 80041c2:	492c      	ldr	r1, [pc, #176]	; (8004274 <shell_thread.lto_priv.83+0x224>)
 80041c4:	f7ff ff34 	bl	8004030 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80041c8:	4b29      	ldr	r3, [pc, #164]	; (8004270 <shell_thread.lto_priv.83+0x220>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	461d      	mov	r5, r3
 80041ce:	b13a      	cbz	r2, 80041e0 <shell_thread.lto_priv.83+0x190>
    chprintf(chp, "%s ", scp->sc_name);
 80041d0:	4620      	mov	r0, r4
 80041d2:	4929      	ldr	r1, [pc, #164]	; (8004278 <shell_thread.lto_priv.83+0x228>)
 80041d4:	f7ff ff2c 	bl	8004030 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80041d8:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80041dc:	2a00      	cmp	r2, #0
 80041de:	d1f7      	bne.n	80041d0 <shell_thread.lto_priv.83+0x180>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 80041e0:	f1b8 0f00 	cmp.w	r8, #0
 80041e4:	d00b      	beq.n	80041fe <shell_thread.lto_priv.83+0x1ae>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80041e6:	f8d8 2000 	ldr.w	r2, [r8]
 80041ea:	b142      	cbz	r2, 80041fe <shell_thread.lto_priv.83+0x1ae>
 80041ec:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 80041ee:	4620      	mov	r0, r4
 80041f0:	4921      	ldr	r1, [pc, #132]	; (8004278 <shell_thread.lto_priv.83+0x228>)
 80041f2:	f7ff ff1d 	bl	8004030 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80041f6:	f855 2f08 	ldr.w	r2, [r5, #8]!
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d1f7      	bne.n	80041ee <shell_thread.lto_priv.83+0x19e>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 80041fe:	4620      	mov	r0, r4
 8004200:	4916      	ldr	r1, [pc, #88]	; (800425c <shell_thread.lto_priv.83+0x20c>)
 8004202:	f7ff ff15 	bl	8004030 <chprintf>
 8004206:	e734      	b.n	8004072 <shell_thread.lto_priv.83+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8004208:	f1b8 0f00 	cmp.w	r8, #0
 800420c:	d00d      	beq.n	800422a <shell_thread.lto_priv.83+0x1da>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800420e:	f8d8 0000 	ldr.w	r0, [r8]
 8004212:	b150      	cbz	r0, 800422a <shell_thread.lto_priv.83+0x1da>
 8004214:	46c1      	mov	r9, r8
 8004216:	e002      	b.n	800421e <shell_thread.lto_priv.83+0x1ce>
 8004218:	f859 0f08 	ldr.w	r0, [r9, #8]!
 800421c:	b128      	cbz	r0, 800422a <shell_thread.lto_priv.83+0x1da>
    if (strcasecmp(scp->sc_name, name) == 0) {
 800421e:	4651      	mov	r1, sl
 8004220:	f005 f866 	bl	80092f0 <strcasecmp>
 8004224:	2800      	cmp	r0, #0
 8004226:	d1f7      	bne.n	8004218 <shell_thread.lto_priv.83+0x1c8>
 8004228:	e7c4      	b.n	80041b4 <shell_thread.lto_priv.83+0x164>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 800422a:	4652      	mov	r2, sl
 800422c:	4620      	mov	r0, r4
 800422e:	4913      	ldr	r1, [pc, #76]	; (800427c <shell_thread.lto_priv.83+0x22c>)
 8004230:	f7ff fefe 	bl	8004030 <chprintf>
        chprintf(chp, " ?\r\n");
 8004234:	4620      	mov	r0, r4
 8004236:	4912      	ldr	r1, [pc, #72]	; (8004280 <shell_thread.lto_priv.83+0x230>)
 8004238:	f7ff fefa 	bl	8004030 <chprintf>
 800423c:	e719      	b.n	8004072 <shell_thread.lto_priv.83+0x22>
 800423e:	bf00      	nop
 8004240:	20001e68 	.word	0x20001e68
 8004244:	08009fa8 	.word	0x08009fa8
 8004248:	08009fb0 	.word	0x08009fb0
 800424c:	08009fc8 	.word	0x08009fc8
 8004250:	08009fd0 	.word	0x08009fd0
 8004254:	0800a030 	.word	0x0800a030
 8004258:	20001534 	.word	0x20001534
 800425c:	0800a434 	.word	0x0800a434
 8004260:	08009fec 	.word	0x08009fec
 8004264:	08009ff4 	.word	0x08009ff4
 8004268:	08009fd4 	.word	0x08009fd4
 800426c:	0800a000 	.word	0x0800a000
 8004270:	20000800 	.word	0x20000800
 8004274:	0800a008 	.word	0x0800a008
 8004278:	0800a020 	.word	0x0800a020
 800427c:	0800a024 	.word	0x0800a024
 8004280:	0800a028 	.word	0x0800a028
 8004284:	f3af 8000 	nop.w
 8004288:	f3af 8000 	nop.w
 800428c:	f3af 8000 	nop.w

08004290 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8004290:	2900      	cmp	r1, #0
 8004292:	dd03      	ble.n	800429c <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8004294:	4908      	ldr	r1, [pc, #32]	; (80042b8 <cmd_systime+0x28>)
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <cmd_systime+0x2c>)
 8004298:	f7ff beca 	b.w	8004030 <chprintf>
 800429c:	2320      	movs	r3, #32
 800429e:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80042a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a8:	2300      	movs	r3, #0
 80042aa:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 80042ae:	4904      	ldr	r1, [pc, #16]	; (80042c0 <cmd_systime+0x30>)
 80042b0:	b292      	uxth	r2, r2
 80042b2:	f7ff bebd 	b.w	8004030 <chprintf>
 80042b6:	bf00      	nop
 80042b8:	08009ff4 	.word	0x08009ff4
 80042bc:	0800a03c 	.word	0x0800a03c
 80042c0:	0800a044 	.word	0x0800a044
 80042c4:	f3af 8000 	nop.w
 80042c8:	f3af 8000 	nop.w
 80042cc:	f3af 8000 	nop.w

080042d0 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80042d0:	2900      	cmp	r1, #0
 80042d2:	dd03      	ble.n	80042dc <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80042d4:	4919      	ldr	r1, [pc, #100]	; (800433c <cmd_info+0x6c>)
 80042d6:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <cmd_info+0x70>)
 80042d8:	f7ff beaa 	b.w	8004030 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80042dc:	b510      	push	{r4, lr}
 80042de:	4604      	mov	r4, r0
 80042e0:	b082      	sub	sp, #8
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 80042e2:	4918      	ldr	r1, [pc, #96]	; (8004344 <cmd_info+0x74>)
 80042e4:	4a18      	ldr	r2, [pc, #96]	; (8004348 <cmd_info+0x78>)
 80042e6:	f7ff fea3 	bl	8004030 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 80042ea:	4620      	mov	r0, r4
 80042ec:	4917      	ldr	r1, [pc, #92]	; (800434c <cmd_info+0x7c>)
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <cmd_info+0x80>)
 80042f0:	f7ff fe9e 	bl	8004030 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 80042f4:	4620      	mov	r0, r4
 80042f6:	4917      	ldr	r1, [pc, #92]	; (8004354 <cmd_info+0x84>)
 80042f8:	4a17      	ldr	r2, [pc, #92]	; (8004358 <cmd_info+0x88>)
 80042fa:	f7ff fe99 	bl	8004030 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 80042fe:	4620      	mov	r0, r4
 8004300:	4916      	ldr	r1, [pc, #88]	; (800435c <cmd_info+0x8c>)
 8004302:	4a17      	ldr	r2, [pc, #92]	; (8004360 <cmd_info+0x90>)
 8004304:	f7ff fe94 	bl	8004030 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8004308:	4620      	mov	r0, r4
 800430a:	4916      	ldr	r1, [pc, #88]	; (8004364 <cmd_info+0x94>)
 800430c:	4a16      	ldr	r2, [pc, #88]	; (8004368 <cmd_info+0x98>)
 800430e:	f7ff fe8f 	bl	8004030 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8004312:	4620      	mov	r0, r4
 8004314:	4915      	ldr	r1, [pc, #84]	; (800436c <cmd_info+0x9c>)
 8004316:	4a16      	ldr	r2, [pc, #88]	; (8004370 <cmd_info+0xa0>)
 8004318:	f7ff fe8a 	bl	8004030 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 800431c:	4620      	mov	r0, r4
 800431e:	4915      	ldr	r1, [pc, #84]	; (8004374 <cmd_info+0xa4>)
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <cmd_info+0xa8>)
 8004322:	f7ff fe85 	bl	8004030 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <cmd_info+0xac>)
 8004328:	4620      	mov	r0, r4
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4914      	ldr	r1, [pc, #80]	; (8004380 <cmd_info+0xb0>)
 800432e:	4a15      	ldr	r2, [pc, #84]	; (8004384 <cmd_info+0xb4>)
 8004330:	4b15      	ldr	r3, [pc, #84]	; (8004388 <cmd_info+0xb8>)
 8004332:	f7ff fe7d 	bl	8004030 <chprintf>
#endif
#endif
}
 8004336:	b002      	add	sp, #8
 8004338:	bd10      	pop	{r4, pc}
 800433a:	bf00      	nop
 800433c:	08009ff4 	.word	0x08009ff4
 8004340:	0800a04c 	.word	0x0800a04c
 8004344:	0800a054 	.word	0x0800a054
 8004348:	080099fc 	.word	0x080099fc
 800434c:	0800a068 	.word	0x0800a068
 8004350:	08009a20 	.word	0x08009a20
 8004354:	0800a07c 	.word	0x0800a07c
 8004358:	08009a68 	.word	0x08009a68
 800435c:	0800a090 	.word	0x0800a090
 8004360:	08009a70 	.word	0x08009a70
 8004364:	0800a0a4 	.word	0x0800a0a4
 8004368:	08009a7c 	.word	0x08009a7c
 800436c:	0800a0b8 	.word	0x0800a0b8
 8004370:	08009a94 	.word	0x08009a94
 8004374:	0800a0cc 	.word	0x0800a0cc
 8004378:	08009ac0 	.word	0x08009ac0
 800437c:	0800a108 	.word	0x0800a108
 8004380:	0800a0e0 	.word	0x0800a0e0
 8004384:	0800a0f8 	.word	0x0800a0f8
 8004388:	0800a104 	.word	0x0800a104
 800438c:	f3af 8000 	nop.w

08004390 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004390:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004394:	68c3      	ldr	r3, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8004396:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004398:	6958      	ldr	r0, [r3, #20]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800439a:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 800439c:	6842      	ldr	r2, [r0, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 800439e:	8a19      	ldrh	r1, [r3, #16]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 80043a0:	7803      	ldrb	r3, [r0, #0]
 80043a2:	428a      	cmp	r2, r1
 80043a4:	bf28      	it	cs
 80043a6:	460a      	movcs	r2, r1
 80043a8:	bb03      	cbnz	r3, 80043ec <usb_lld_prepare_transmit+0x5c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80043aa:	4917      	ldr	r1, [pc, #92]	; (8004408 <usb_lld_prepare_transmit+0x78>)
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 80043ac:	1c53      	adds	r3, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80043ae:	6d09      	ldr	r1, [r1, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80043b6:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80043ba:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80043be:	ea4f 0444 	mov.w	r4, r4, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80043c2:	6821      	ldr	r1, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 80043c4:	68c0      	ldr	r0, [r0, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80043c6:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80043ca:	f501 5140 	add.w	r1, r1, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80043ce:	6865      	ldr	r5, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 80043d0:	ea4f 0141 	mov.w	r1, r1, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 80043d4:	6062      	str	r2, [r4, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 80043d6:	d007      	beq.n	80043e8 <usb_lld_prepare_transmit+0x58>
 80043d8:	3802      	subs	r0, #2
 80043da:	1f0a      	subs	r2, r1, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80043dc:	f830 1f02 	ldrh.w	r1, [r0, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80043e0:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80043e2:	f842 1f04 	str.w	r1, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80043e6:	d1f9      	bne.n	80043dc <usb_lld_prepare_transmit+0x4c>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80043e8:	bc30      	pop	{r4, r5}
 80043ea:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <usb_lld_prepare_transmit+0x78>)
 80043ee:	68c1      	ldr	r1, [r0, #12]
 80043f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80043f2:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80043f6:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 80043fa:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80043fe:	0040      	lsls	r0, r0, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8004400:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8004402:	f7ff bb75 	b.w	8003af0 <usb_packet_write_from_queue>
 8004406:	bf00      	nop
 8004408:	40005c00 	.word	0x40005c00
 800440c:	f3af 8000 	nop.w

08004410 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004410:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004414:	68c9      	ldr	r1, [r1, #12]
 8004416:	698a      	ldr	r2, [r1, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8004418:	6853      	ldr	r3, [r2, #4]
 800441a:	b133      	cbz	r3, 800442a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800441c:	8a49      	ldrh	r1, [r1, #18]
 800441e:	3b01      	subs	r3, #1
 8004420:	440b      	add	r3, r1
 8004422:	fbb3 f3f1 	udiv	r3, r3, r1
 8004426:	8213      	strh	r3, [r2, #16]
 8004428:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	8213      	strh	r3, [r2, #16]
 800442e:	4770      	bx	lr

08004430 <usb_lld_init_endpoint>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8004430:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004434:	68db      	ldr	r3, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8004436:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f002 0203 	and.w	r2, r2, #3
 800443e:	3a01      	subs	r2, #1
 8004440:	2a02      	cmp	r2, #2
 8004442:	bf96      	itet	ls
 8004444:	4c2a      	ldrls	r4, [pc, #168]	; (80044f0 <usb_lld_init_endpoint+0xc0>)
 8004446:	f44f 7400 	movhi.w	r4, #512	; 0x200
 800444a:	f834 4012 	ldrhls.w	r4, [r4, r2, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	b10a      	cbz	r2, 8004456 <usb_lld_init_endpoint+0x26>
    epr |= EPR_STAT_TX_NAK;
 8004452:	f044 0420 	orr.w	r4, r4, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	b10a      	cbz	r2, 800445e <usb_lld_init_endpoint+0x2e>
    epr |= EPR_STAT_RX_NAK;
 800445a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800445e:	f647 0770 	movw	r7, #30832	; 0x7870
  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8004462:	ea44 0501 	orr.w	r5, r4, r1
 8004466:	008a      	lsls	r2, r1, #2
 8004468:	f425 45f0 	bic.w	r5, r5, #30720	; 0x7800
 800446c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004470:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8004474:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8004478:	6015      	str	r5, [r2, #0]
  EPR_TOGGLE(ep, epr);
 800447a:	6816      	ldr	r6, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800447c:	8a5d      	ldrh	r5, [r3, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 800447e:	4027      	ands	r7, r4
 8004480:	ea87 0406 	eor.w	r4, r7, r6

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8004484:	2d3e      	cmp	r5, #62	; 0x3e
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8004486:	6014      	str	r4, [r2, #0]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8004488:	f105 34ff 	add.w	r4, r5, #4294967295
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800448c:	d826      	bhi.n	80044dc <usb_lld_init_endpoint+0xac>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800448e:	f044 0401 	orr.w	r4, r4, #1
 8004492:	3401      	adds	r4, #1
 8004494:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8004498:	0264      	lsls	r4, r4, #9
 800449a:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <usb_lld_init_endpoint+0xc4>)
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80044a0:	8a1e      	ldrh	r6, [r3, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 80044a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
  dp->TXCOUNT0 = 0;
 80044a4:	2700      	movs	r7, #0
 80044a6:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
 80044aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 80044ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80044b2:	0049      	lsls	r1, r1, #1
  dp->TXCOUNT0 = 0;
 80044b4:	684b      	ldr	r3, [r1, #4]
 80044b6:	604f      	str	r7, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 80044b8:	68cb      	ldr	r3, [r1, #12]
 80044ba:	60cc      	str	r4, [r1, #12]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80044bc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  usbp->pmnext += size;
 80044c0:	1993      	adds	r3, r2, r6
 80044c2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80044c6:	680b      	ldr	r3, [r1, #0]
 80044c8:	600a      	str	r2, [r1, #0]
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 80044ca:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  usbp->pmnext += size;
 80044ce:	441d      	add	r5, r3
 80044d0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80044d4:	688a      	ldr	r2, [r1, #8]
}
 80044d6:	bcf0      	pop	{r4, r5, r6, r7}
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80044d8:	608b      	str	r3, [r1, #8]
}
 80044da:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80044dc:	f044 041f 	orr.w	r4, r4, #31
 80044e0:	3401      	adds	r4, #1
 80044e2:	1164      	asrs	r4, r4, #5
 80044e4:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 80044e8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80044ec:	b2a4      	uxth	r4, r4
 80044ee:	e7d6      	b.n	800449e <usb_lld_init_endpoint+0x6e>
 80044f0:	0800a180 	.word	0x0800a180
 80044f4:	40005c00 	.word	0x40005c00
 80044f8:	f3af 8000 	nop.w
 80044fc:	f3af 8000 	nop.w

08004500 <usb_lld_reset>:
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8004500:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 8004502:	b5f0      	push	{r4, r5, r6, r7, lr}
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8004504:	68c9      	ldr	r1, [r1, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <usb_lld_reset+0x3c>)
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8004508:	2900      	cmp	r1, #0

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 800450a:	4d0d      	ldr	r5, [pc, #52]	; (8004540 <usb_lld_reset+0x40>)
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 800450c:	f04f 0400 	mov.w	r4, #0
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
 8004510:	bf0c      	ite	eq
 8004512:	f44f 471c 	moveq.w	r7, #39936	; 0x9c00
 8004516:	f44f 471e 	movne.w	r7, #40448	; 0x9e00
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
 800451a:	f04f 0e80 	mov.w	lr, #128	; 0x80
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800451e:	2640      	movs	r6, #64	; 0x40
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8004520:	651c      	str	r4, [r3, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8004522:	4621      	mov	r1, r4
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8004524:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8004526:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 800452a:	641f      	str	r7, [r3, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800452c:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8004530:	60c5      	str	r5, [r0, #12]
  usb_lld_init_endpoint(usbp, 0);
}
 8004532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8004536:	f7ff bf7b 	b.w	8004430 <usb_lld_init_endpoint>
 800453a:	bf00      	nop
 800453c:	40005c00 	.word	0x40005c00
 8004540:	0800a120 	.word	0x0800a120
 8004544:	f3af 8000 	nop.w
 8004548:	f3af 8000 	nop.w
 800454c:	f3af 8000 	nop.w

08004550 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8004554:	4b97      	ldr	r3, [pc, #604]	; (80047b4 <Vector90+0x264>)
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004556:	b085      	sub	sp, #20
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8004558:	6c5c      	ldr	r4, [r3, #68]	; 0x44

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 800455a:	0563      	lsls	r3, r4, #21
 800455c:	f100 8198 	bmi.w	8004890 <Vector90+0x340>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8004560:	0527      	lsls	r7, r4, #20
 8004562:	d515      	bpl.n	8004590 <Vector90+0x40>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004564:	f8df b250 	ldr.w	fp, [pc, #592]	; 80047b8 <Vector90+0x268>
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8004568:	4a92      	ldr	r2, [pc, #584]	; (80047b4 <Vector90+0x264>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800456a:	f8db 1004 	ldr.w	r1, [fp, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 800456e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004570:	680d      	ldr	r5, [r1, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8004572:	f043 0308 	orr.w	r3, r3, #8
 8004576:	6413      	str	r3, [r2, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004578:	b115      	cbz	r5, 8004580 <Vector90+0x30>
 800457a:	4658      	mov	r0, fp
 800457c:	2103      	movs	r1, #3
 800457e:	47a8      	blx	r5
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8004580:	4b8c      	ldr	r3, [pc, #560]	; (80047b4 <Vector90+0x264>)
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8004582:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8004586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004588:	f042 0204 	orr.w	r2, r2, #4
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 800458e:	6459      	str	r1, [r3, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8004590:	04e6      	lsls	r6, r4, #19
 8004592:	d50c      	bpl.n	80045ae <Vector90+0x5e>
    uint32_t fnr = STM32_USB->FNR;
 8004594:	4b87      	ldr	r3, [pc, #540]	; (80047b4 <Vector90+0x264>)
 8004596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8004598:	0415      	lsls	r5, r2, #16
 800459a:	f140 8169 	bpl.w	8004870 <Vector90+0x320>
    }
#if STM32_USB_LOW_POWER_ON_SUSPEND
    else {
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
 800459e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a0:	f042 0204 	orr.w	r2, r2, #4
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 80045a6:	4b83      	ldr	r3, [pc, #524]	; (80047b4 <Vector90+0x264>)
 80045a8:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 80045ae:	05a0      	lsls	r0, r4, #22
 80045b0:	d50b      	bpl.n	80045ca <Vector90+0x7a>
    _usb_isr_invoke_sof_cb(usbp);
 80045b2:	f8df b204 	ldr.w	fp, [pc, #516]	; 80047b8 <Vector90+0x268>
 80045b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	b10b      	cbz	r3, 80045c2 <Vector90+0x72>
 80045be:	4658      	mov	r0, fp
 80045c0:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 80045c2:	4b7c      	ldr	r3, [pc, #496]	; (80047b4 <Vector90+0x264>)
 80045c4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80045ca:	0421      	lsls	r1, r4, #16
 80045cc:	f140 80c7 	bpl.w	800475e <Vector90+0x20e>
 80045d0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80047b8 <Vector90+0x268>
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80045d4:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80047b4 <Vector90+0x264>

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 80045d8:	f004 040f 	and.w	r4, r4, #15
 80045dc:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80045e0:	f108 4580 	add.w	r5, r8, #1073741824	; 0x40000000
 80045e4:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 80045e8:	f8d5 9000 	ldr.w	r9, [r5]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 80045ec:	1ca6      	adds	r6, r4, #2
 80045ee:	eb0b 0386 	add.w	r3, fp, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 80045f2:	f019 0f80 	tst.w	r9, #128	; 0x80
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 80045f6:	685f      	ldr	r7, [r3, #4]

    if (epr & EPR_CTR_TX) {
 80045f8:	d05f      	beq.n	80046ba <Vector90+0x16a>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 80045fa:	682b      	ldr	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 80045fc:	00e0      	lsls	r0, r4, #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 80045fe:	f423 43f1 	bic.w	r3, r3, #30848	; 0x7880
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	602b      	str	r3, [r5, #0]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004608:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 800460c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8004610:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004614:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004618:	4403      	add	r3, r0
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	6859      	ldr	r1, [r3, #4]
      epcp->in_state->txcnt  += transmitted;
 800461e:	f8de 3008 	ldr.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8004622:	f8de 2004 	ldr.w	r2, [lr, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8004626:	440b      	add	r3, r1
 8004628:	f8ce 3008 	str.w	r3, [lr, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f000 80b3 	beq.w	8004798 <Vector90+0x248>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8004632:	8a3a      	ldrh	r2, [r7, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8004634:	f89e c000 	ldrb.w	ip, [lr]
 8004638:	429a      	cmp	r2, r3
 800463a:	bf28      	it	cs
 800463c:	461a      	movcs	r2, r3
 800463e:	f1bc 0f00 	cmp.w	ip, #0
 8004642:	f040 8108 	bne.w	8004856 <Vector90+0x306>
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8004646:	1c53      	adds	r3, r2, #1
 8004648:	9301      	str	r3, [sp, #4]
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 800464a:	f8de 300c 	ldr.w	r3, [lr, #12]
 800464e:	4419      	add	r1, r3
 8004650:	f8ce 100c 	str.w	r1, [lr, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004654:	f8da e050 	ldr.w	lr, [sl, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 800465e:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004662:	4470      	add	r0, lr
 8004664:	0040      	lsls	r0, r0, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004666:	f8d0 e000 	ldr.w	lr, [r0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800466a:	085b      	lsrs	r3, r3, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800466c:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 8004670:	f50e 5e40 	add.w	lr, lr, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004674:	f8d0 c004 	ldr.w	ip, [r0, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004678:	ea4f 0e4e 	mov.w	lr, lr, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800467c:	6042      	str	r2, [r0, #4]
  n = (n + 1) / 2;
  while (n > 0) {
 800467e:	d008      	beq.n	8004692 <Vector90+0x142>
 8004680:	3902      	subs	r1, #2
 8004682:	f1ae 0204 	sub.w	r2, lr, #4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004686:	f831 0f02 	ldrh.w	r0, [r1, #2]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800468a:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800468c:	f842 0f04 	str.w	r0, [r2, #4]!
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004690:	d1f9      	bne.n	8004686 <Vector90+0x136>
 8004692:	2320      	movs	r3, #32
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800469c:	f508 48b8 	add.w	r8, r8, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80046a0:	f8d8 3000 	ldr.w	r3, [r8]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80046aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ae:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80046b2:	f8c8 3000 	str.w	r3, [r8]
 80046b6:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 80046ba:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80046be:	d049      	beq.n	8004754 <Vector90+0x204>
      EPR_CLEAR_CTR_RX(ep);
 80046c0:	682b      	ldr	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80046c2:	f419 6f00 	tst.w	r9, #2048	; 0x800
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 80046c6:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	602b      	str	r3, [r5, #0]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 80046d0:	d15a      	bne.n	8004788 <Vector90+0x238>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80046d2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80046dc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 80046e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046e4:	005b      	lsls	r3, r3, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	4610      	mov	r0, r2
 80046ea:	9201      	str	r2, [sp, #4]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80046ec:	780a      	ldrb	r2, [r1, #0]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 80046ee:	f3c0 0809 	ubfx	r8, r0, #0, #10

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	d162      	bne.n	80047bc <Vector90+0x26c>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80046f6:	689a      	ldr	r2, [r3, #8]

  n = (n + 1) / 2;
 80046f8:	f108 0301 	add.w	r3, r8, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80046fc:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8004700:	f502 5240 	add.w	r2, r2, #12288	; 0x3000

  n = (n + 1) / 2;
  while (n > 0) {
 8004704:	085b      	lsrs	r3, r3, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004706:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 800470a:	68c8      	ldr	r0, [r1, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800470c:	d009      	beq.n	8004722 <Vector90+0x1d2>
 800470e:	468e      	mov	lr, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004710:	f852 1b04 	ldr.w	r1, [r2], #4
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004714:	3b01      	subs	r3, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004716:	f820 1b02 	strh.w	r1, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 800471a:	d1f9      	bne.n	8004710 <Vector90+0x1c0>
 800471c:	4671      	mov	r1, lr
 800471e:	f8de 000c 	ldr.w	r0, [lr, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8004722:	4440      	add	r0, r8
 8004724:	60c8      	str	r0, [r1, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8004726:	8a08      	ldrh	r0, [r1, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004728:	8a7f      	ldrh	r7, [r7, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800472a:	688a      	ldr	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800472c:	684b      	ldr	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;
 800472e:	3801      	subs	r0, #1
 8004730:	b280      	uxth	r0, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004732:	4442      	add	r2, r8
        epcp->out_state->rxsize             -= n;
 8004734:	ebc8 0303 	rsb	r3, r8, r3
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004738:	45b8      	cmp	r8, r7
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 800473a:	8208      	strh	r0, [r1, #16]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 800473c:	608a      	str	r2, [r1, #8]
        epcp->out_state->rxsize             -= n;
 800473e:	604b      	str	r3, [r1, #4]
        epcp->out_state->rxpkts             -= 1;

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004740:	d312      	bcc.n	8004768 <Vector90+0x218>
 8004742:	b188      	cbz	r0, 8004768 <Vector90+0x218>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004752:	602b      	str	r3, [r5, #0]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8004754:	f8da 4044 	ldr.w	r4, [sl, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8004758:	0423      	lsls	r3, r4, #16
 800475a:	f53f af3d 	bmi.w	80045d8 <Vector90+0x88>
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
}
 800475e:	b005      	add	sp, #20
 8004760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
 8004764:	f7fe ba34 	b.w	8002bd0 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8004768:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800476c:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8004770:	2101      	movs	r1, #1
 8004772:	40a1      	lsls	r1, r4
 8004774:	6872      	ldr	r2, [r6, #4]
 8004776:	ea23 0301 	bic.w	r3, r3, r1
 800477a:	68d2      	ldr	r2, [r2, #12]
 800477c:	f8ab 300a 	strh.w	r3, [fp, #10]
 8004780:	4621      	mov	r1, r4
 8004782:	480d      	ldr	r0, [pc, #52]	; (80047b8 <Vector90+0x268>)
 8004784:	4790      	blx	r2
 8004786:	e7e5      	b.n	8004754 <Vector90+0x204>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8004788:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 800478c:	6873      	ldr	r3, [r6, #4]
 800478e:	4621      	mov	r1, r4
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4809      	ldr	r0, [pc, #36]	; (80047b8 <Vector90+0x268>)
 8004794:	4798      	blx	r3
 8004796:	e7dd      	b.n	8004754 <Vector90+0x204>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <Vector90+0x268>)
 800479a:	2201      	movs	r2, #1
 800479c:	891b      	ldrh	r3, [r3, #8]
 800479e:	40a2      	lsls	r2, r4
 80047a0:	ea23 0302 	bic.w	r3, r3, r2
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <Vector90+0x268>)
 80047a6:	4621      	mov	r1, r4
 80047a8:	8113      	strh	r3, [r2, #8]
 80047aa:	4610      	mov	r0, r2
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4798      	blx	r3
 80047b0:	e783      	b.n	80046ba <Vector90+0x16a>
 80047b2:	bf00      	nop
 80047b4:	40005c00 	.word	0x40005c00
 80047b8:	2000121c 	.word	0x2000121c
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80047bc:	689b      	ldr	r3, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80047be:	ea5f 0258 	movs.w	r2, r8, lsr #1
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80047c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80047c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80047ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 80047ce:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 80047d0:	9302      	str	r3, [sp, #8]

  nhw = n / 2;
  while (nhw > 0) {
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	d021      	beq.n	800481a <Vector90+0x2ca>
 80047d6:	4610      	mov	r0, r2
 80047d8:	469e      	mov	lr, r3
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 80047da:	694b      	ldr	r3, [r1, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 80047dc:	f85e 2b04 	ldr.w	r2, [lr], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 80047e0:	f103 0901 	add.w	r9, r3, #1
 80047e4:	f8c1 9014 	str.w	r9, [r1, #20]
 80047e8:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 80047ea:	690b      	ldr	r3, [r1, #16]
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80047ec:	ea4f 2c12 	mov.w	ip, r2, lsr #8
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
 80047f0:	694a      	ldr	r2, [r1, #20]
 80047f2:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 80047f4:	bf28      	it	cs
 80047f6:	68ca      	ldrcs	r2, [r1, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 80047f8:	1c53      	adds	r3, r2, #1
 80047fa:	614b      	str	r3, [r1, #20]
 80047fc:	f882 c000 	strb.w	ip, [r2]
    if (iqp->q_wrptr >= iqp->q_top)
 8004800:	690b      	ldr	r3, [r1, #16]
 8004802:	694a      	ldr	r2, [r1, #20]
 8004804:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8004806:	bf24      	itt	cs
 8004808:	68cb      	ldrcs	r3, [r1, #12]
 800480a:	614b      	strcs	r3, [r1, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 800480c:	3801      	subs	r0, #1
 800480e:	d1e4      	bne.n	80047da <Vector90+0x28a>
 8004810:	9b02      	ldr	r3, [sp, #8]
 8004812:	9a03      	ldr	r2, [sp, #12]
 8004814:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004818:	9302      	str	r3, [sp, #8]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 800481a:	9b01      	ldr	r3, [sp, #4]
 800481c:	07da      	lsls	r2, r3, #31
 800481e:	d50b      	bpl.n	8004838 <Vector90+0x2e8>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8004820:	9a02      	ldr	r2, [sp, #8]
 8004822:	694b      	ldr	r3, [r1, #20]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	1c58      	adds	r0, r3, #1
 8004828:	6148      	str	r0, [r1, #20]
 800482a:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top)
 800482c:	690b      	ldr	r3, [r1, #16]
 800482e:	694a      	ldr	r2, [r1, #20]
 8004830:	429a      	cmp	r2, r3
      iqp->q_wrptr = iqp->q_buffer;
 8004832:	bf24      	itt	cs
 8004834:	68cb      	ldrcs	r3, [r1, #12]
 8004836:	614b      	strcs	r3, [r1, #20]
 8004838:	2320      	movs	r3, #32
 800483a:	f383 8811 	msr	BASEPRI, r3
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 800483e:	688b      	ldr	r3, [r1, #8]
 8004840:	4608      	mov	r0, r1
 8004842:	4443      	add	r3, r8
 8004844:	608b      	str	r3, [r1, #8]
 8004846:	2100      	movs	r1, #0
 8004848:	f7fe f95a 	bl	8002b00 <chThdDequeueAllI>
 800484c:	2300      	movs	r3, #0
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	e767      	b.n	8004726 <Vector90+0x1d6>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8004856:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 800485a:	f8de 100c 	ldr.w	r1, [lr, #12]
 800485e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004862:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004866:	4418      	add	r0, r3
 8004868:	0040      	lsls	r0, r0, #1
 800486a:	f7ff f941 	bl	8003af0 <usb_packet_write_from_queue>
 800486e:	e710      	b.n	8004692 <Vector90+0x142>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004870:	f8df b074 	ldr.w	fp, [pc, #116]	; 80048e8 <Vector90+0x398>

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8004874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004876:	f8db 1004 	ldr.w	r1, [fp, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800487a:	f022 0208 	bic.w	r2, r2, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 800487e:	680d      	ldr	r5, [r1, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004882:	2d00      	cmp	r5, #0
 8004884:	f43f ae8f 	beq.w	80045a6 <Vector90+0x56>
 8004888:	4658      	mov	r0, fp
 800488a:	2104      	movs	r1, #4
 800488c:	47a8      	blx	r5
 800488e:	e68a      	b.n	80045a6 <Vector90+0x56>
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8004890:	f8df b054 	ldr.w	fp, [pc, #84]	; 80048e8 <Vector90+0x398>
  usbp->status        = 0;
 8004894:	2300      	movs	r3, #0
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8004896:	2202      	movs	r2, #2
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8004898:	4619      	mov	r1, r3
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800489a:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
  usbp->address       = 0;
 800489e:	f88b 307e 	strb.w	r3, [fp, #126]	; 0x7e
  usbp->configuration = 0;
 80048a2:	f88b 307f 	strb.w	r3, [fp, #127]	; 0x7f
  usbp->transmitting  = 0;
 80048a6:	f8ab 3008 	strh.w	r3, [fp, #8]
  usbp->receiving     = 0;
 80048aa:	f8ab 300a 	strh.w	r3, [fp, #10]
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80048ae:	f88b 2000 	strb.w	r2, [fp]
 80048b2:	f10b 0308 	add.w	r3, fp, #8
 80048b6:	f10b 0228 	add.w	r2, fp, #40	; 0x28
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80048ba:	f843 1f04 	str.w	r1, [r3, #4]!
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 80048be:	4293      	cmp	r3, r2
    usbp->epc[i] = NULL;
 80048c0:	f04f 0500 	mov.w	r5, #0
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
 80048c4:	d1f9      	bne.n	80048ba <Vector90+0x36a>

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80048c6:	4808      	ldr	r0, [pc, #32]	; (80048e8 <Vector90+0x398>)
  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80048c8:	f88b 5064 	strb.w	r5, [fp, #100]	; 0x64

  /* Low level reset.*/
  usb_lld_reset(usbp);
 80048cc:	f7ff fe18 	bl	8004500 <usb_lld_reset>
  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80048d0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	b113      	cbz	r3, 80048de <Vector90+0x38e>
 80048d8:	4629      	mov	r1, r5
 80048da:	4803      	ldr	r0, [pc, #12]	; (80048e8 <Vector90+0x398>)
 80048dc:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_RESET;
 80048de:	4b03      	ldr	r3, [pc, #12]	; (80048ec <Vector90+0x39c>)
 80048e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
 80048e6:	e63b      	b.n	8004560 <Vector90+0x10>
 80048e8:	2000121c 	.word	0x2000121c
 80048ec:	40005c00 	.word	0x40005c00

080048f0 <gpt_lld_start_timer>:

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 80048f0:	6842      	ldr	r2, [r0, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 80048f2:	68c3      	ldr	r3, [r0, #12]

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 80048f4:	6850      	ldr	r0, [r2, #4]
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {
 80048f6:	b410      	push	{r4}

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 80048f8:	2200      	movs	r2, #0
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 80048fa:	3901      	subs	r1, #1
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 80048fc:	2401      	movs	r4, #1
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 80048fe:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 8004900:	615c      	str	r4, [r3, #20]
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8004904:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
 8004906:	b110      	cbz	r0, 800490e <gpt_lld_start_timer+0x1e>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	4322      	orrs	r2, r4
 800490c:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1   = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800490e:	2205      	movs	r2, #5
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	f3af 8000 	nop.w
 800491c:	f3af 8000 	nop.w

08004920 <spi_lld_serve_tx_interrupt.lto_priv.76>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004920:	070b      	lsls	r3, r1, #28
 8004922:	d400      	bmi.n	8004926 <spi_lld_serve_tx_interrupt.lto_priv.76+0x6>
 8004924:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004926:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8004928:	4b01      	ldr	r3, [pc, #4]	; (8004930 <spi_lld_serve_tx_interrupt.lto_priv.76+0x10>)
 800492a:	4a02      	ldr	r2, [pc, #8]	; (8004934 <spi_lld_serve_tx_interrupt.lto_priv.76+0x14>)
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
 800492e:	e7fe      	b.n	800492e <spi_lld_serve_tx_interrupt.lto_priv.76+0xe>
 8004930:	20001e68 	.word	0x20001e68
 8004934:	0800a1b0 	.word	0x0800a1b0
 8004938:	f3af 8000 	nop.w
 800493c:	f3af 8000 	nop.w

08004940 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8004940:	8902      	ldrh	r2, [r0, #8]
 8004942:	fa42 f301 	asr.w	r3, r2, r1
 8004946:	f013 0301 	ands.w	r3, r3, #1
 800494a:	d002      	beq.n	8004952 <usbStartTransmitI+0x12>
    return TRUE;
 800494c:	2301      	movs	r3, #1

  usbp->transmitting |= (1 << ep);
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 800494e:	4618      	mov	r0, r3
 8004950:	4770      	bx	lr
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8004952:	b470      	push	{r4, r5, r6}
 8004954:	008d      	lsls	r5, r1, #2
 8004956:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800495a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800495e:	682c      	ldr	r4, [r5, #0]
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
    return TRUE;

  usbp->transmitting |= (1 << ep);
 8004960:	2601      	movs	r6, #1
 8004962:	f424 44f0 	bic.w	r4, r4, #30720	; 0x7800
 8004966:	fa06 f101 	lsl.w	r1, r6, r1
 800496a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800496e:	f084 0430 	eor.w	r4, r4, #48	; 0x30
 8004972:	430a      	orrs	r2, r1
 8004974:	8102      	strh	r2, [r0, #8]
 8004976:	602c      	str	r4, [r5, #0]
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 8004978:	4618      	mov	r0, r3
 800497a:	bc70      	pop	{r4, r5, r6}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8004980:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8004984:	6842      	ldr	r2, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8004986:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800498a:	4906      	ldr	r1, [pc, #24]	; (80049a4 <set_address+0x24>)
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8004992:	b510      	push	{r4, lr}
 8004994:	4604      	mov	r4, r0
 8004996:	64cb      	str	r3, [r1, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8004998:	b10a      	cbz	r2, 800499e <set_address+0x1e>
 800499a:	2101      	movs	r1, #1
 800499c:	4790      	blx	r2
  usbp->state = USB_SELECTED;
 800499e:	2303      	movs	r3, #3
 80049a0:	7023      	strb	r3, [r4, #0]
 80049a2:	bd10      	pop	{r4, pc}
 80049a4:	40005c00 	.word	0x40005c00
 80049a8:	f3af 8000 	nop.w
 80049ac:	f3af 8000 	nop.w

080049b0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	f3af 8000 	nop.w
 80049b8:	f3af 8000 	nop.w
 80049bc:	f3af 8000 	nop.w

080049c0 <sduRequestsHook>:
 * @retval TRUE         Message handled internally.
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80049c0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80049c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d001      	beq.n	80049d0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return TRUE;
    default:
      return FALSE;
 80049cc:	2000      	movs	r0, #0
    }
  }
  return FALSE;
}
 80049ce:	4770      	bx	lr
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80049d0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 80049d4:	2b21      	cmp	r3, #33	; 0x21
 80049d6:	d003      	beq.n	80049e0 <sduRequestsHook+0x20>
 80049d8:	2b22      	cmp	r3, #34	; 0x22
 80049da:	d009      	beq.n	80049f0 <sduRequestsHook+0x30>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d1f5      	bne.n	80049cc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return TRUE;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80049e0:	4906      	ldr	r1, [pc, #24]	; (80049fc <sduRequestsHook+0x3c>)
 80049e2:	2207      	movs	r2, #7
 80049e4:	2300      	movs	r3, #0
 80049e6:	6681      	str	r1, [r0, #104]	; 0x68
 80049e8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80049ea:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 80049ec:	2001      	movs	r0, #1
 80049ee:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80049f0:	2300      	movs	r3, #0
 80049f2:	6683      	str	r3, [r0, #104]	; 0x68
 80049f4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80049f6:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 80049f8:	2001      	movs	r0, #1
 80049fa:	4770      	bx	lr
 80049fc:	20000818 	.word	0x20000818

08004a00 <spi_lld_serve_rx_interrupt.lto_priv.75>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a02:	070b      	lsls	r3, r1, #28
 8004a04:	d431      	bmi.n	8004a6a <spi_lld_serve_rx_interrupt.lto_priv.75+0x6a>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004a06:	6a41      	ldr	r1, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 8004a08:	6a02      	ldr	r2, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004a0a:	e891 00c0 	ldmia.w	r1, {r6, r7}
 8004a0e:	6835      	ldr	r5, [r6, #0]
 8004a10:	230f      	movs	r3, #15
 8004a12:	f025 050f 	bic.w	r5, r5, #15
 8004a16:	6035      	str	r5, [r6, #0]
 8004a18:	7a09      	ldrb	r1, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 8004a1a:	6815      	ldr	r5, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004a1c:	fa03 f101 	lsl.w	r1, r3, r1
 8004a20:	6039      	str	r1, [r7, #0]
  dmaStreamDisable(spip->dmarx);
 8004a22:	6829      	ldr	r1, [r5, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004a24:	6846      	ldr	r6, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004a26:	f021 010f 	bic.w	r1, r1, #15
 8004a2a:	6029      	str	r1, [r5, #0]
 8004a2c:	7a15      	ldrb	r5, [r2, #8]
 8004a2e:	6851      	ldr	r1, [r2, #4]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004a30:	6832      	ldr	r2, [r6, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004a32:	40ab      	lsls	r3, r5
 8004a34:	4604      	mov	r4, r0
 8004a36:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004a38:	b1a2      	cbz	r2, 8004a64 <spi_lld_serve_rx_interrupt.lto_priv.75+0x64>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	7003      	strb	r3, [r0, #0]
 8004a3e:	4790      	blx	r2
 8004a40:	7823      	ldrb	r3, [r4, #0]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d00e      	beq.n	8004a64 <spi_lld_serve_rx_interrupt.lto_priv.75+0x64>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004a46:	2320      	movs	r3, #32
 8004a48:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8004a4c:	68a3      	ldr	r3, [r4, #8]
 8004a4e:	b12b      	cbz	r3, 8004a5c <spi_lld_serve_rx_interrupt.lto_priv.75+0x5c>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8004a50:	2200      	movs	r2, #0
 8004a52:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    chSchReadyI(tp);
 8004a54:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8004a56:	621a      	str	r2, [r3, #32]
    chSchReadyI(tp);
 8004a58:	f7fd fba2 	bl	80021a0 <chSchReadyI>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a64:	2302      	movs	r3, #2
 8004a66:	7023      	strb	r3, [r4, #0]
 8004a68:	e7ed      	b.n	8004a46 <spi_lld_serve_rx_interrupt.lto_priv.75+0x46>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a6a:	b672      	cpsid	i
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <spi_lld_serve_rx_interrupt.lto_priv.75+0x74>)
 8004a6e:	4a02      	ldr	r2, [pc, #8]	; (8004a78 <spi_lld_serve_rx_interrupt.lto_priv.75+0x78>)
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
 8004a72:	e7fe      	b.n	8004a72 <spi_lld_serve_rx_interrupt.lto_priv.75+0x72>
 8004a74:	20001e68 	.word	0x20001e68
 8004a78:	0800a1b0 	.word	0x0800a1b0
 8004a7c:	f3af 8000 	nop.w

08004a80 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <Vector84+0x20>)
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8004a82:	4808      	ldr	r0, [pc, #32]	; (8004aa4 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8004a84:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8004a86:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8004a88:	f3c1 6103 	ubfx	r1, r1, #24, #4
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8004a8c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 8004a8e:	060c      	lsls	r4, r1, #24
 8004a90:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8004a92:	b10a      	cbz	r2, 8004a98 <Vector84+0x18>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8004a94:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004a96:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8004a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004a9c:	f7fe b898 	b.w	8002bd0 <_port_irq_epilogue>
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	20001e30 	.word	0x20001e30
 8004aa8:	f3af 8000 	nop.w
 8004aac:	f3af 8000 	nop.w

08004ab0 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <Vector80+0x20>)
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8004ab2:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8004ab4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8004ab6:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8004ab8:	f3c1 5103 	ubfx	r1, r1, #20, #4
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8004abc:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 8004abe:	050c      	lsls	r4, r1, #20
 8004ac0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8004ac2:	b10a      	cbz	r2, 8004ac8 <Vector80+0x18>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8004ac4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004ac6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8004ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004acc:	f7fe b880 	b.w	8002bd0 <_port_irq_epilogue>
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	20001e30 	.word	0x20001e30
 8004ad8:	f3af 8000 	nop.w
 8004adc:	f3af 8000 	nop.w

08004ae0 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <Vector7C+0x20>)
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8004ae2:	4808      	ldr	r0, [pc, #32]	; (8004b04 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8004ae4:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8004ae6:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8004ae8:	f3c1 4103 	ubfx	r1, r1, #16, #4
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8004aec:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 8004aee:	040c      	lsls	r4, r1, #16
 8004af0:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8004af2:	b10a      	cbz	r2, 8004af8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8004af4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004af6:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004afc:	f7fe b868 	b.w	8002bd0 <_port_irq_epilogue>
 8004b00:	40020000 	.word	0x40020000
 8004b04:	20001e30 	.word	0x20001e30
 8004b08:	f3af 8000 	nop.w
 8004b0c:	f3af 8000 	nop.w

08004b10 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8004b10:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <Vector78+0x20>)
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8004b12:	4808      	ldr	r0, [pc, #32]	; (8004b34 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8004b14:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8004b16:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8004b18:	f3c1 3103 	ubfx	r1, r1, #12, #4
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8004b1c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 8004b1e:	030c      	lsls	r4, r1, #12
 8004b20:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 8004b22:	b10a      	cbz	r2, 8004b28 <Vector78+0x18>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8004b24:	69c0      	ldr	r0, [r0, #28]
 8004b26:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8004b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004b2c:	f7fe b850 	b.w	8002bd0 <_port_irq_epilogue>
 8004b30:	40020000 	.word	0x40020000
 8004b34:	20001e30 	.word	0x20001e30
 8004b38:	f3af 8000 	nop.w
 8004b3c:	f3af 8000 	nop.w

08004b40 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <Vector74+0x20>)
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8004b42:	4808      	ldr	r0, [pc, #32]	; (8004b64 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8004b44:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8004b46:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8004b48:	f3c1 2103 	ubfx	r1, r1, #8, #4
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8004b4c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 8004b4e:	020c      	lsls	r4, r1, #8
 8004b50:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8004b52:	b10a      	cbz	r2, 8004b58 <Vector74+0x18>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8004b54:	6940      	ldr	r0, [r0, #20]
 8004b56:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004b5c:	f7fe b838 	b.w	8002bd0 <_port_irq_epilogue>
 8004b60:	40020000 	.word	0x40020000
 8004b64:	20001e30 	.word	0x20001e30
 8004b68:	f3af 8000 	nop.w
 8004b6c:	f3af 8000 	nop.w

08004b70 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <Vector70+0x20>)
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8004b72:	4808      	ldr	r0, [pc, #32]	; (8004b94 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8004b74:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8004b76:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8004b78:	f3c1 1103 	ubfx	r1, r1, #4, #4
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8004b7c:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 8004b7e:	010c      	lsls	r4, r1, #4
 8004b80:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8004b82:	b10a      	cbz	r2, 8004b88 <Vector70+0x18>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8004b84:	68c0      	ldr	r0, [r0, #12]
 8004b86:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8004b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004b8c:	f7fe b820 	b.w	8002bd0 <_port_irq_epilogue>
 8004b90:	40020000 	.word	0x40020000
 8004b94:	20001e30 	.word	0x20001e30
 8004b98:	f3af 8000 	nop.w
 8004b9c:	f3af 8000 	nop.w

08004ba0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8004ba0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <Vector6C+0x20>)
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8004ba4:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8004ba6:	6819      	ldr	r1, [r3, #0]
 8004ba8:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 8004bac:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	b10b      	cbz	r3, 8004bb6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8004bb2:	6850      	ldr	r0, [r2, #4]
 8004bb4:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8004bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8004bba:	f7fe b809 	b.w	8002bd0 <_port_irq_epilogue>
 8004bbe:	bf00      	nop
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	20001e30 	.word	0x20001e30
 8004bc8:	f3af 8000 	nop.w
 8004bcc:	f3af 8000 	nop.w

08004bd0 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8004bd0:	b538      	push	{r3, r4, r5, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8004bd2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8004bd6:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d033      	beq.n	8004c44 <_usb_ep0out+0x74>
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d01a      	beq.n	8004c16 <_usb_ep0out+0x46>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <_usb_ep0out+0x8c>)
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004be2:	6861      	ldr	r1, [r4, #4]
 8004be4:	6813      	ldr	r3, [r2, #0]
 8004be6:	680d      	ldr	r5, [r1, #0]
 8004be8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf0:	f083 0310 	eor.w	r3, r3, #16
 8004bf4:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	b115      	cbz	r5, 8004c0e <_usb_ep0out+0x3e>
 8004c08:	4620      	mov	r0, r4
 8004c0a:	2105      	movs	r1, #5
 8004c0c:	47a8      	blx	r5
  usbp->ep0state = USB_EP0_ERROR;
 8004c0e:	2306      	movs	r3, #6
 8004c10:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004c16:	68c3      	ldr	r3, [r0, #12]

  isp->txqueued           = FALSE;
 8004c18:	2500      	movs	r5, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004c1a:	695b      	ldr	r3, [r3, #20]

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004c22:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8004c24:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8004c26:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8004c28:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8004c2a:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8004c2c:	f7ff fbb0 	bl	8004390 <usb_lld_prepare_transmit>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c30:	2320      	movs	r3, #32
 8004c32:	f383 8811 	msr	BASEPRI, r3
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0);
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7ff fe81 	bl	8004940 <usbStartTransmitI>
 8004c3e:	f385 8811 	msr	BASEPRI, r5
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0)
 8004c44:	68c3      	ldr	r3, [r0, #12]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1c8      	bne.n	8004be0 <_usb_ep0out+0x10>
      break;
#endif
    if (usbp->ep0endcb != NULL)
 8004c4e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004c50:	b103      	cbz	r3, 8004c54 <_usb_ep0out+0x84>
      usbp->ep0endcb(usbp);
 8004c52:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	40005c00 	.word	0x40005c00

08004c60 <onotify.lto_priv.86>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8004c62:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8004c64:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	7811      	ldrb	r1, [r2, #0]
 8004c6c:	2904      	cmp	r1, #4
 8004c6e:	d000      	beq.n	8004c72 <onotify.lto_priv.86+0x12>
 8004c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c72:	7a21      	ldrb	r1, [r4, #8]
 8004c74:	2902      	cmp	r1, #2
 8004c76:	d1fb      	bne.n	8004c70 <onotify.lto_priv.86+0x10>
      (sdup->state != SDU_READY))
    return;

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in) &&
 8004c78:	8912      	ldrh	r2, [r2, #8]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	fa42 f303 	asr.w	r3, r2, r3
 8004c80:	f013 0301 	ands.w	r3, r3, #1
 8004c84:	d1f4      	bne.n	8004c70 <onotify.lto_priv.86+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8004c86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004c88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c8c:	1a8a      	subs	r2, r1, r2
 8004c8e:	1a12      	subs	r2, r2, r0
 8004c90:	d0ee      	beq.n	8004c70 <onotify.lto_priv.86+0x10>
 8004c92:	f383 8811 	msr	BASEPRI, r3
      ((n = oqGetFullI(&sdup->oqueue)) > 0)) {
    osalSysUnlock();

    usbPrepareQueuedTransmit(sdup->config->usbp,
 8004c96:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8004c9a:	2701      	movs	r7, #1
 8004c9c:	6808      	ldr	r0, [r1, #0]
 8004c9e:	7909      	ldrb	r1, [r1, #4]
 8004ca0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004ca4:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8004ca8:	68ed      	ldr	r5, [r5, #12]
 8004caa:	696d      	ldr	r5, [r5, #20]

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8004cac:	60ab      	str	r3, [r5, #8]
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8004cae:	606a      	str	r2, [r5, #4]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8004cb0:	702f      	strb	r7, [r5, #0]
  isp->mode.queue.txqueue = oqp;
 8004cb2:	60ee      	str	r6, [r5, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004cb4:	f7ff fb6c 	bl	8004390 <usb_lld_prepare_transmit>
 8004cb8:	2320      	movs	r3, #32
 8004cba:	f383 8811 	msr	BASEPRI, r3
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8004cbe:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	7919      	ldrb	r1, [r3, #4]
  }
}
 8004cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedTransmit(sdup->config->usbp,
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8004cca:	f7ff be39 	b.w	8004940 <usbStartTransmitI>
 8004cce:	bf00      	nop

08004cd0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8004cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd4:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];
 8004cd8:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28

  if (sdup == NULL)
 8004cdc:	b1b4      	cbz	r4, 8004d0c <sduDataTransmitted+0x3c>
 8004cde:	460d      	mov	r5, r1
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	2720      	movs	r7, #32
 8004ce4:	f387 8811 	msr	BASEPRI, r7
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8004ce8:	2108      	movs	r1, #8
 8004cea:	1d20      	adds	r0, r4, #4
 8004cec:	f7fd fad8 	bl	80022a0 <chEvtBroadcastFlagsI>
 8004cf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cf4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004cf6:	1ad3      	subs	r3, r2, r3
    return;

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
 8004cf8:	1a5b      	subs	r3, r3, r1
 8004cfa:	d119      	bne.n	8004d30 <sduDataTransmitted+0x60>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8004cfc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	6852      	ldr	r2, [r2, #4]
 8004d04:	b922      	cbnz	r2, 8004d10 <sduDataTransmitted+0x40>
 8004d06:	2300      	movs	r3, #0
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           !(usbp->epc[ep]->in_state->txsize &
             (usbp->epc[ep]->in_maxsize - 1))) {
 8004d10:	8a1b      	ldrh	r3, [r3, #16]
 8004d12:	3b01      	subs	r3, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8004d14:	4013      	ands	r3, r2
 8004d16:	d1f6      	bne.n	8004d06 <sduDataTransmitted+0x36>
 8004d18:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004d1c:	f8d8 200c 	ldr.w	r2, [r8, #12]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 8004d20:	3430      	adds	r4, #48	; 0x30
 8004d22:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = TRUE;
 8004d24:	2101      	movs	r1, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8004d26:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8004d28:	6093      	str	r3, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
 8004d2a:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8004d2c:	7011      	strb	r1, [r2, #0]
 8004d2e:	e00b      	b.n	8004d48 <sduDataTransmitted+0x78>
 8004d30:	2100      	movs	r1, #0
 8004d32:	f381 8811 	msr	BASEPRI, r1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004d36:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8004d3a:	3430      	adds	r4, #48	; 0x30
 8004d3c:	6952      	ldr	r2, [r2, #20]

  isp->txqueued           = TRUE;
 8004d3e:	2001      	movs	r0, #1
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
 8004d40:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8004d42:	6091      	str	r1, [r2, #8]
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
 8004d44:	60d4      	str	r4, [r2, #12]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8004d46:	7010      	strb	r0, [r2, #0]
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004d48:	4630      	mov	r0, r6
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f7ff fb20 	bl	8004390 <usb_lld_prepare_transmit>
 8004d50:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
 8004d54:	4630      	mov	r0, r6
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7ff fdf2 	bl	8004940 <usbStartTransmitI>
 8004d5c:	e7d3      	b.n	8004d06 <sduDataTransmitted+0x36>
 8004d5e:	bf00      	nop

08004d60 <readt.lto_priv.97>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, time);
 8004d60:	300c      	adds	r0, #12
 8004d62:	f7fd b995 	b.w	8002090 <chIQReadTimeout>
 8004d66:	bf00      	nop
 8004d68:	f3af 8000 	nop.w
 8004d6c:	f3af 8000 	nop.w

08004d70 <read.lto_priv.91>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8004d70:	300c      	adds	r0, #12
 8004d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d76:	f7fd b98b 	b.w	8002090 <chIQReadTimeout>
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w

08004d80 <writet.lto_priv.96>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
 8004d80:	3030      	adds	r0, #48	; 0x30
 8004d82:	f7fd b915 	b.w	8001fb0 <chOQWriteTimeout>
 8004d86:	bf00      	nop
 8004d88:	f3af 8000 	nop.w
 8004d8c:	f3af 8000 	nop.w

08004d90 <write.lto_priv.90>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8004d90:	3030      	adds	r0, #48	; 0x30
 8004d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d96:	f7fd b90b 	b.w	8001fb0 <chOQWriteTimeout>
 8004d9a:	bf00      	nop
 8004d9c:	f3af 8000 	nop.w

08004da0 <gett.lto_priv.95>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8004da0:	300c      	adds	r0, #12
 8004da2:	f7fd b9b5 	b.w	8002110 <chIQGetTimeout>
 8004da6:	bf00      	nop
 8004da8:	f3af 8000 	nop.w
 8004dac:	f3af 8000 	nop.w

08004db0 <get.lto_priv.93>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8004db0:	300c      	adds	r0, #12
 8004db2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004db6:	f7fd b9ab 	b.w	8002110 <chIQGetTimeout>
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w

08004dc0 <putt.lto_priv.94>:
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8004dc0:	3030      	adds	r0, #48	; 0x30
 8004dc2:	f7fd b93d 	b.w	8002040 <chOQPutTimeout>
 8004dc6:	bf00      	nop
 8004dc8:	f3af 8000 	nop.w
 8004dcc:	f3af 8000 	nop.w

08004dd0 <put.lto_priv.92>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8004dd0:	3030      	adds	r0, #48	; 0x30
 8004dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd6:	f7fd b933 	b.w	8002040 <chOQPutTimeout>
 8004dda:	bf00      	nop
 8004ddc:	f3af 8000 	nop.w

08004de0 <gpt_lld_serve_interrupt.lto_priv.98>:
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8004de0:	7801      	ldrb	r1, [r0, #0]
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8004de2:	68c3      	ldr	r3, [r0, #12]
 8004de4:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8004de6:	2904      	cmp	r1, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8004de8:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 8004dea:	d107      	bne.n	8004dfc <gpt_lld_serve_interrupt.lto_priv.98+0x1c>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 8004dec:	2102      	movs	r1, #2
 8004dee:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8004df0:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8004df2:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dfa:	60da      	str	r2, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 8004dfc:	6843      	ldr	r3, [r0, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4718      	bx	r3
 8004e02:	bf00      	nop
 8004e04:	f3af 8000 	nop.w
 8004e08:	f3af 8000 	nop.w
 8004e0c:	f3af 8000 	nop.w

08004e10 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8004e10:	8942      	ldrh	r2, [r0, #10]
 8004e12:	fa42 f301 	asr.w	r3, r2, r1
 8004e16:	f013 0301 	ands.w	r3, r3, #1
 8004e1a:	d002      	beq.n	8004e22 <usbStartReceiveI+0x12>
    return TRUE;
 8004e1c:	2301      	movs	r3, #1

  usbp->receiving |= (1 << ep);
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	4770      	bx	lr
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8004e22:	b470      	push	{r4, r5, r6}
 8004e24:	008d      	lsls	r5, r1, #2
 8004e26:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004e2a:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8004e2e:	682c      	ldr	r4, [r5, #0]
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
    return TRUE;

  usbp->receiving |= (1 << ep);
 8004e30:	2601      	movs	r6, #1
 8004e32:	f424 4490 	bic.w	r4, r4, #18432	; 0x4800
 8004e36:	fa06 f101 	lsl.w	r1, r6, r1
 8004e3a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004e3e:	f484 5440 	eor.w	r4, r4, #12288	; 0x3000
 8004e42:	430a      	orrs	r2, r1
 8004e44:	8142      	strh	r2, [r0, #10]
 8004e46:	602c      	str	r4, [r5, #0]
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bc70      	pop	{r4, r5, r6}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop

08004e50 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8004e50:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8004e52:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8004e56:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d04b      	beq.n	8004ef4 <_usb_ep0in+0xa4>
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	d042      	beq.n	8004ee6 <_usb_ep0in+0x96>
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d019      	beq.n	8004e98 <_usb_ep0in+0x48>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8004e64:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <_usb_ep0in+0xd4>)
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004e66:	6841      	ldr	r1, [r0, #4]
 8004e68:	6813      	ldr	r3, [r2, #0]
 8004e6a:	680d      	ldr	r5, [r1, #0]
 8004e6c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	f083 0310 	eor.w	r3, r3, #16
 8004e78:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	b10d      	cbz	r5, 8004e90 <_usb_ep0in+0x40>
 8004e8c:	2105      	movs	r1, #5
 8004e8e:	47a8      	blx	r5
  usbp->ep0state = USB_EP0_ERROR;
 8004e90:	2306      	movs	r3, #6
 8004e92:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8004e98:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8004e9c:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8004ea0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8004ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8004ea6:	428b      	cmp	r3, r1
 8004ea8:	68c3      	ldr	r3, [r0, #12]
 8004eaa:	d905      	bls.n	8004eb8 <_usb_ep0in+0x68>
 8004eac:	8a1d      	ldrh	r5, [r3, #16]
 8004eae:	fbb1 f2f5 	udiv	r2, r1, r5
 8004eb2:	fb05 1512 	mls	r5, r5, r2, r1
 8004eb6:	b1fd      	cbz	r5, 8004ef8 <_usb_ep0in+0xa8>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004eb8:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = FALSE;
 8004eba:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8004ec2:	4629      	mov	r1, r5
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8004ec4:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8004ec6:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8004ec8:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8004eca:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7ff fa9f 	bl	8004410 <usb_lld_prepare_receive>
 8004ed2:	2320      	movs	r3, #32
 8004ed4:	f383 8811 	msr	BASEPRI, r3
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0);
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7ff ff98 	bl	8004e10 <usbStartReceiveI>
 8004ee0:	f385 8811 	msr	BASEPRI, r5
 8004ee4:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL)
 8004ee6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004ee8:	b103      	cbz	r3, 8004eec <_usb_ep0in+0x9c>
      usbp->ep0endcb(usbp);
 8004eea:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	68c3      	ldr	r3, [r0, #12]
 8004ef6:	e7df      	b.n	8004eb8 <_usb_ep0in+0x68>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004ef8:	695b      	ldr	r3, [r3, #20]
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004efa:	4629      	mov	r1, r5
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8004efc:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8004efe:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8004f00:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8004f02:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8004f04:	f7ff fa44 	bl	8004390 <usb_lld_prepare_transmit>
 8004f08:	2320      	movs	r3, #32
 8004f0a:	f383 8811 	msr	BASEPRI, r3
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	f7ff fd15 	bl	8004940 <usbStartTransmitI>
 8004f16:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8004f20:	bd38      	pop	{r3, r4, r5, pc}
 8004f22:	bf00      	nop
 8004f24:	40005c00 	.word	0x40005c00
 8004f28:	f3af 8000 	nop.w
 8004f2c:	f3af 8000 	nop.w

08004f30 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4604      	mov	r4, r0
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8004f34:	4bc1      	ldr	r3, [pc, #772]	; (800523c <_usb_ep0setup+0x30c>)
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8004f36:	2200      	movs	r2, #0
 8004f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3a:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8004f3e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004f42:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004f46:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004f4a:	0049      	lsls	r1, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8004f4c:	688b      	ldr	r3, [r1, #8]
  usbReadSetup(usbp, ep, usbp->setup);
 8004f4e:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8004f52:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004f56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	f100 057c 	add.w	r5, r0, #124	; 0x7c
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004f60:	f853 1b04 	ldr.w	r1, [r3], #4
 8004f64:	f822 1b02 	strh.w	r1, [r2], #2
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
  pmap = USB_ADDR2PTR(udp->RXADDR0);
  for (n = 0; n < 4; n++) {
 8004f68:	42aa      	cmp	r2, r5
 8004f6a:	d1f9      	bne.n	8004f60 <_usb_ep0setup+0x30>

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	b36b      	cbz	r3, 8004fce <_usb_ep0setup+0x9e>
      !(usbp->config->requests_hook_cb(usbp))) {
 8004f72:	4620      	mov	r0, r4
 8004f74:	4798      	blx	r3
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 8004f76:	b350      	cbz	r0, 8004fce <_usb_ep0setup+0x9e>
 8004f78:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8004f7a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
 8004f7e:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 8004f82:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8004f86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
 8004f8a:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8004f8c:	bf3c      	itt	cc
 8004f8e:	4615      	movcc	r5, r2
 8004f90:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8004f92:	f013 0f80 	tst.w	r3, #128	; 0x80
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004f96:	68e3      	ldr	r3, [r4, #12]
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8004f98:	f040 80a8 	bne.w	80050ec <_usb_ep0setup+0x1bc>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	f040 808d 	bne.w	80050bc <_usb_ep0setup+0x18c>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004fa2:	695b      	ldr	r3, [r3, #20]
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8004fa4:	2205      	movs	r2, #5
 8004fa6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004faa:	4620      	mov	r0, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8004fac:	701d      	strb	r5, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 8004fae:	60dd      	str	r5, [r3, #12]
  isp->txsize             = n;
 8004fb0:	605d      	str	r5, [r3, #4]
  isp->txcnt              = 0;
 8004fb2:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	f7ff f9eb 	bl	8004390 <usb_lld_prepare_transmit>
 8004fba:	2320      	movs	r3, #32
 8004fbc:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	f7ff fcbc 	bl	8004940 <usbStartTransmitI>
 8004fc8:	f385 8811 	msr	BASEPRI, r5
 8004fcc:	bd70      	pop	{r4, r5, r6, pc}
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
      !(usbp->config->requests_hook_cb(usbp))) {
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8004fce:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8004fd2:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8004fd6:	d01a      	beq.n	800500e <_usb_ep0setup+0xde>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8004fd8:	4a98      	ldr	r2, [pc, #608]	; (800523c <_usb_ep0setup+0x30c>)
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004fda:	6861      	ldr	r1, [r4, #4]
 8004fdc:	6813      	ldr	r3, [r2, #0]
 8004fde:	680d      	ldr	r5, [r1, #0]
 8004fe0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe8:	f083 0310 	eor.w	r3, r3, #16
 8004fec:	6013      	str	r3, [r2, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	b115      	cbz	r5, 8005006 <_usb_ep0setup+0xd6>
 8005000:	4620      	mov	r0, r4
 8005002:	2105      	movs	r1, #5
 8005004:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8005006:	2306      	movs	r3, #6
 8005008:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800500c:	bd70      	pop	{r4, r5, r6, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
 800500e:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                              USB_RTYPE_TYPE_MASK)) |
 8005016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800501a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800501e:	f000 8113 	beq.w	8005248 <_usb_ep0setup+0x318>
 8005022:	dd18      	ble.n	8005056 <_usb_ep0setup+0x126>
 8005024:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8005028:	f000 80ee 	beq.w	8005208 <_usb_ep0setup+0x2d8>
 800502c:	f340 808d 	ble.w	800514a <_usb_ep0setup+0x21a>
 8005030:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8005034:	f000 8097 	beq.w	8005166 <_usb_ep0setup+0x236>
 8005038:	f640 4102 	movw	r1, #3074	; 0xc02
 800503c:	428a      	cmp	r2, r1
 800503e:	f000 80dc 	beq.w	80051fa <_usb_ep0setup+0x2ca>
 8005042:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005046:	d1c7      	bne.n	8004fd8 <_usb_ep0setup+0xa8>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8005048:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 800504c:	2501      	movs	r5, #1
 800504e:	6726      	str	r6, [r4, #112]	; 0x70
 8005050:	66a2      	str	r2, [r4, #104]	; 0x68
 8005052:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005054:	e793      	b.n	8004f7e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8005056:	2a02      	cmp	r2, #2
 8005058:	f000 8106 	beq.w	8005268 <_usb_ep0setup+0x338>
 800505c:	f340 80c3 	ble.w	80051e6 <_usb_ep0setup+0x2b6>
 8005060:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005064:	f000 8092 	beq.w	800518c <_usb_ep0setup+0x25c>
 8005068:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800506c:	d1b4      	bne.n	8004fd8 <_usb_ep0setup+0xa8>
        return FALSE;
      }
    }
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 800506e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005072:	2a00      	cmp	r2, #0
 8005074:	d1b0      	bne.n	8004fd8 <_usb_ep0setup+0xa8>
      return FALSE;
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8005076:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800507a:	f011 020f 	ands.w	r2, r1, #15
 800507e:	d018      	beq.n	80050b2 <_usb_ep0setup+0x182>
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005086:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
      if (usbp->setup[4] & 0x80)
 800508a:	f011 0f80 	tst.w	r1, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 800508e:	6811      	ldr	r1, [r2, #0]
 8005090:	f040 811a 	bne.w	80052c8 <_usb_ep0setup+0x398>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8005094:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 8005098:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800509c:	d009      	beq.n	80050b2 <_usb_ep0setup+0x182>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80050a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      if (usbp->setup[4] & 0x80)
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0F);
      else
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0F);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80050b2:	2500      	movs	r5, #0
 80050b4:	66a5      	str	r5, [r4, #104]	; 0x68
 80050b6:	66e5      	str	r5, [r4, #108]	; 0x6c
 80050b8:	6725      	str	r5, [r4, #112]	; 0x70
 80050ba:	e760      	b.n	8004f7e <_usb_ep0setup+0x4e>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80050bc:	699b      	ldr	r3, [r3, #24]
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 80050be:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 80050c0:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80050c2:	2104      	movs	r1, #4
 80050c4:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80050c8:	4620      	mov	r0, r4
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
 80050ca:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 80050cc:	605d      	str	r5, [r3, #4]
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 80050ce:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80050d0:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80050d2:	4631      	mov	r1, r6
 80050d4:	f7ff f99c 	bl	8004410 <usb_lld_prepare_receive>
 80050d8:	2320      	movs	r3, #32
 80050da:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 80050de:	4620      	mov	r0, r4
 80050e0:	4631      	mov	r1, r6
 80050e2:	f7ff fe95 	bl	8004e10 <usbStartReceiveI>
 80050e6:	f386 8811 	msr	BASEPRI, r6
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
 80050ec:	b1bd      	cbz	r5, 800511e <_usb_ep0setup+0x1ee>
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80050ee:	695b      	ldr	r3, [r3, #20]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 80050f0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 80050f2:	2600      	movs	r6, #0
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 80050f4:	2101      	movs	r1, #1
 80050f6:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80050fa:	4620      	mov	r0, r4
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
 80050fc:	60da      	str	r2, [r3, #12]
  isp->txsize             = n;
 80050fe:	605d      	str	r5, [r3, #4]
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8005100:	701e      	strb	r6, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8005102:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8005104:	4631      	mov	r1, r6
 8005106:	f7ff f943 	bl	8004390 <usb_lld_prepare_transmit>
 800510a:	2320      	movs	r3, #32
 800510c:	f383 8811 	msr	BASEPRI, r3
    if (usbp->ep0n > 0) {
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8005110:	4620      	mov	r0, r4
 8005112:	4631      	mov	r1, r6
 8005114:	f7ff fc14 	bl	8004940 <usbStartTransmitI>
 8005118:	f386 8811 	msr	BASEPRI, r6
 800511c:	bd70      	pop	{r4, r5, r6, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800511e:	699b      	ldr	r3, [r3, #24]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8005120:	2203      	movs	r2, #3
 8005122:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8005126:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8005128:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800512a:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800512c:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800512e:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8005130:	4629      	mov	r1, r5
 8005132:	f7ff f96d 	bl	8004410 <usb_lld_prepare_receive>
 8005136:	2320      	movs	r3, #32
 8005138:	f383 8811 	msr	BASEPRI, r3
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 800513c:	4620      	mov	r0, r4
 800513e:	4629      	mov	r1, r5
 8005140:	f7ff fe66 	bl	8004e10 <usbStartReceiveI>
 8005144:	f385 8811 	msr	BASEPRI, r5
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800514a:	f240 3102 	movw	r1, #770	; 0x302
 800514e:	428a      	cmp	r2, r1
 8005150:	d02c      	beq.n	80051ac <_usb_ep0setup+0x27c>
 8005152:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8005156:	f47f af3f 	bne.w	8004fd8 <_usb_ep0setup+0xa8>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
        (usbp->setup[1] == USB_REQ_SET_ADDRESS))
      set_address(usbp);
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 800515a:	4a39      	ldr	r2, [pc, #228]	; (8005240 <_usb_ep0setup+0x310>)
 800515c:	66a6      	str	r6, [r4, #104]	; 0x68
 800515e:	66e6      	str	r6, [r4, #108]	; 0x6c
 8005160:	4635      	mov	r5, r6
 8005162:	6722      	str	r2, [r4, #112]	; 0x70
 8005164:	e70b      	b.n	8004f7e <_usb_ep0setup+0x4e>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8005166:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800516a:	f884 207f 	strb.w	r2, [r4, #127]	; 0x7f
    if (usbp->configuration == 0)
 800516e:	2a00      	cmp	r2, #0
 8005170:	f040 8091 	bne.w	8005296 <_usb_ep0setup+0x366>
      usbp->state = USB_SELECTED;
 8005174:	2203      	movs	r2, #3
 8005176:	7022      	strb	r2, [r4, #0]
    else
      usbp->state = USB_ACTIVE;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d098      	beq.n	80050b2 <_usb_ep0setup+0x182>
 8005180:	4620      	mov	r0, r4
 8005182:	2102      	movs	r1, #2
 8005184:	4790      	blx	r2
 8005186:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800518a:	e792      	b.n	80050b2 <_usb_ep0setup+0x182>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800518c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005190:	2a01      	cmp	r2, #1
 8005192:	f47f af21 	bne.w	8004fd8 <_usb_ep0setup+0xa8>
      usbp->status &= ~2;
 8005196:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800519a:	66a6      	str	r6, [r4, #104]	; 0x68
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 800519c:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80051a0:	66e6      	str	r6, [r4, #108]	; 0x6c
 80051a2:	6726      	str	r6, [r4, #112]	; 0x70
 80051a4:	4635      	mov	r5, r6
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 80051a6:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 80051aa:	e6e8      	b.n	8004f7e <_usb_ep0setup+0x4e>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 80051ac:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	f47f af11 	bne.w	8004fd8 <_usb_ep0setup+0xa8>
      return FALSE;
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 80051b6:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 80051ba:	f011 020f 	ands.w	r2, r1, #15
 80051be:	f43f af78 	beq.w	80050b2 <_usb_ep0setup+0x182>
 80051c2:	0093      	lsls	r3, r2, #2
 80051c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
      if (usbp->setup[4] & 0x80)
 80051cc:	0609      	lsls	r1, r1, #24
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	d470      	bmi.n	80052b4 <_usb_ep0setup+0x384>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80051d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80051da:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80051e4:	e765      	b.n	80050b2 <_usb_ep0setup+0x182>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80051e6:	b92a      	cbnz	r2, 80051f4 <_usb_ep0setup+0x2c4>
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80051e8:	2102      	movs	r1, #2
 80051ea:	66a5      	str	r5, [r4, #104]	; 0x68
 80051ec:	6722      	str	r2, [r4, #112]	; 0x70
 80051ee:	66e1      	str	r1, [r4, #108]	; 0x6c
 80051f0:	460d      	mov	r5, r1
 80051f2:	e6c4      	b.n	8004f7e <_usb_ep0setup+0x4e>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80051f4:	2a01      	cmp	r2, #1
 80051f6:	f47f aeef 	bne.w	8004fd8 <_usb_ep0setup+0xa8>
    return TRUE;
  case USB_RTYPE_RECIPIENT_INTERFACE | (USB_REQ_GET_STATUS << 8):
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80051fa:	4912      	ldr	r1, [pc, #72]	; (8005244 <_usb_ep0setup+0x314>)
 80051fc:	2502      	movs	r5, #2
 80051fe:	2200      	movs	r2, #0
 8005200:	66a1      	str	r1, [r4, #104]	; 0x68
 8005202:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005204:	6722      	str	r2, [r4, #112]	; 0x70
 8005206:	e6ba      	b.n	8004f7e <_usb_ep0setup+0x4e>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 8005208:	6861      	ldr	r1, [r4, #4]
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
 800520a:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 800520e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8005212:	684d      	ldr	r5, [r1, #4]
 8005214:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005218:	4620      	mov	r0, r4
 800521a:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800521e:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8005222:	47a8      	blx	r5
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
    if (dp == NULL)
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f aed7 	beq.w	8004fd8 <_usb_ep0setup+0xa8>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800522a:	6843      	ldr	r3, [r0, #4]
 800522c:	6805      	ldr	r5, [r0, #0]
 800522e:	66a3      	str	r3, [r4, #104]	; 0x68
 8005230:	66e5      	str	r5, [r4, #108]	; 0x6c
 8005232:	6726      	str	r6, [r4, #112]	; 0x70
 8005234:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005238:	e6a1      	b.n	8004f7e <_usb_ep0setup+0x4e>
 800523a:	bf00      	nop
 800523c:	40005c00 	.word	0x40005c00
 8005240:	08004981 	.word	0x08004981
 8005244:	0800a190 	.word	0x0800a190
    }
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8005248:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800524c:	2a01      	cmp	r2, #1
 800524e:	f47f aec3 	bne.w	8004fd8 <_usb_ep0setup+0xa8>
      usbp->status |= 2;
 8005252:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8005256:	66a6      	str	r6, [r4, #104]	; 0x68
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 8005258:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800525c:	66e6      	str	r6, [r4, #108]	; 0x6c
 800525e:	6726      	str	r6, [r4, #112]	; 0x70
 8005260:	4635      	mov	r5, r6
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 8005262:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8005266:	e68a      	b.n	8004f7e <_usb_ep0setup+0x4e>
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
 8005268:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 800526c:	481e      	ldr	r0, [pc, #120]	; (80052e8 <_usb_ep0setup+0x3b8>)
 800526e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005272:	f001 010f 	and.w	r1, r1, #15
 8005276:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800527a:	d10f      	bne.n	800529c <_usb_ep0setup+0x36c>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 800527c:	f411 5140 	ands.w	r1, r1, #12288	; 0x3000
 8005280:	f43f aeaa 	beq.w	8004fd8 <_usb_ep0setup+0xa8>
 8005284:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005288:	d10e      	bne.n	80052a8 <_usb_ep0setup+0x378>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800528a:	4918      	ldr	r1, [pc, #96]	; (80052ec <_usb_ep0setup+0x3bc>)
 800528c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800528e:	6726      	str	r6, [r4, #112]	; 0x70
 8005290:	4615      	mov	r5, r2
 8005292:	66a1      	str	r1, [r4, #104]	; 0x68
 8005294:	e673      	b.n	8004f7e <_usb_ep0setup+0x4e>
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0)
      usbp->state = USB_SELECTED;
    else
      usbp->state = USB_ACTIVE;
 8005296:	2204      	movs	r2, #4
 8005298:	7022      	strb	r2, [r4, #0]
 800529a:	e76d      	b.n	8005178 <_usb_ep0setup+0x248>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 800529c:	f011 0130 	ands.w	r1, r1, #48	; 0x30
 80052a0:	f43f ae9a 	beq.w	8004fd8 <_usb_ep0setup+0xa8>
 80052a4:	2910      	cmp	r1, #16
 80052a6:	d0f0      	beq.n	800528a <_usb_ep0setup+0x35a>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80052a8:	4911      	ldr	r1, [pc, #68]	; (80052f0 <_usb_ep0setup+0x3c0>)
 80052aa:	66e2      	str	r2, [r4, #108]	; 0x6c
 80052ac:	6726      	str	r6, [r4, #112]	; 0x70
 80052ae:	4615      	mov	r5, r2
 80052b0:	66a1      	str	r1, [r4, #104]	; 0x68
 80052b2:	e664      	b.n	8004f7e <_usb_ep0setup+0x4e>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80052b4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80052b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052bc:	f082 0210 	eor.w	r2, r2, #16
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80052c6:	e6f4      	b.n	80050b2 <_usb_ep0setup+0x182>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80052c8:	f001 0130 	and.w	r1, r1, #48	; 0x30
 80052cc:	2930      	cmp	r1, #48	; 0x30
 80052ce:	f43f aef0 	beq.w	80050b2 <_usb_ep0setup+0x182>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80052d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052dc:	f083 0320 	eor.w	r3, r3, #32
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80052e6:	e6e4      	b.n	80050b2 <_usb_ep0setup+0x182>
 80052e8:	40005c00 	.word	0x40005c00
 80052ec:	0800a1c0 	.word	0x0800a1c0
 80052f0:	0800a1a0 	.word	0x0800a1a0
 80052f4:	f3af 8000 	nop.w
 80052f8:	f3af 8000 	nop.w
 80052fc:	f3af 8000 	nop.w

08005300 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8005300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005304:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];
 8005308:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44

  if (sdup == NULL)
 800530c:	b1ac      	cbz	r4, 800533a <sduDataReceived+0x3a>
 800530e:	460d      	mov	r5, r1
 8005310:	4606      	mov	r6, r0
 8005312:	2720      	movs	r7, #32
 8005314:	f387 8811 	msr	BASEPRI, r7
 8005318:	2104      	movs	r1, #4
 800531a:	1860      	adds	r0, r4, r1
 800531c:	f7fc ffc0 	bl	80022a0 <chEvtBroadcastFlagsI>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 8005320:	69a3      	ldr	r3, [r4, #24]
 8005322:	69e2      	ldr	r2, [r4, #28]
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 8005324:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005328:	6961      	ldr	r1, [r4, #20]
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	8a40      	ldrh	r0, [r0, #18]
 800532e:	1a53      	subs	r3, r2, r1
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8005330:	4298      	cmp	r0, r3
 8005332:	d904      	bls.n	800533e <sduDataReceived+0x3e>
 8005334:	2300      	movs	r3, #0
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800533e:	2100      	movs	r1, #0
 8005340:	f381 8811 	msr	BASEPRI, r1
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 8005344:	fbb3 f3f0 	udiv	r3, r3, r0
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005348:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800534c:	fb00 f303 	mul.w	r3, r0, r3
 8005350:	6992      	ldr	r2, [r2, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8005352:	340c      	adds	r4, #12

  osp->rxqueued           = TRUE;
 8005354:	2001      	movs	r0, #1
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8005356:	6091      	str	r1, [r2, #8]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8005358:	7010      	strb	r0, [r2, #0]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 800535a:	6053      	str	r3, [r2, #4]
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
 800535c:	60d4      	str	r4, [r2, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800535e:	4630      	mov	r0, r6
 8005360:	4629      	mov	r1, r5
 8005362:	f7ff f855 	bl	8004410 <usb_lld_prepare_receive>
 8005366:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    usbStartReceiveI(usbp, ep);
 800536a:	4630      	mov	r0, r6
 800536c:	4629      	mov	r1, r5
 800536e:	f7ff fd4f 	bl	8004e10 <usbStartReceiveI>
 8005372:	e7df      	b.n	8005334 <sduDataReceived+0x34>
 8005374:	f3af 8000 	nop.w
 8005378:	f3af 8000 	nop.w
 800537c:	f3af 8000 	nop.w

08005380 <inotify.lto_priv.85>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8005382:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8005384:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8005388:	6813      	ldr	r3, [r2, #0]
 800538a:	7819      	ldrb	r1, [r3, #0]
 800538c:	2904      	cmp	r1, #4
 800538e:	d000      	beq.n	8005392 <inotify.lto_priv.85+0x12>
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005392:	7a21      	ldrb	r1, [r4, #8]
 8005394:	2902      	cmp	r1, #2
 8005396:	d1fb      	bne.n	8005390 <inotify.lto_priv.85+0x10>
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8005398:	7951      	ldrb	r1, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 800539a:	895a      	ldrh	r2, [r3, #10]
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800539c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80053a0:	68d8      	ldr	r0, [r3, #12]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 80053a2:	fa42 f301 	asr.w	r3, r2, r1
 80053a6:	f013 0301 	ands.w	r3, r3, #1
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 80053aa:	8a40      	ldrh	r0, [r0, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 80053ac:	d1f0      	bne.n	8005390 <inotify.lto_priv.85+0x10>
 80053ae:	69a2      	ldr	r2, [r4, #24]
 80053b0:	69e1      	ldr	r1, [r4, #28]
 80053b2:	6965      	ldr	r5, [r4, #20]
 80053b4:	1a89      	subs	r1, r1, r2
 80053b6:	1b4a      	subs	r2, r1, r5
 80053b8:	4290      	cmp	r0, r2
 80053ba:	d8e9      	bhi.n	8005390 <inotify.lto_priv.85+0x10>
 80053bc:	f383 8811 	msr	BASEPRI, r3
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 80053c0:	fbb2 f2f0 	udiv	r2, r2, r0
    usbPrepareQueuedReceive(sdup->config->usbp,
 80053c4:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 80053c8:	fb00 f202 	mul.w	r2, r0, r2
    usbPrepareQueuedReceive(sdup->config->usbp,
 80053cc:	6808      	ldr	r0, [r1, #0]
 80053ce:	7949      	ldrb	r1, [r1, #5]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80053d0:	2701      	movs	r7, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80053d2:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80053d6:	68ed      	ldr	r5, [r5, #12]
 80053d8:	f104 060c 	add.w	r6, r4, #12
 80053dc:	69ad      	ldr	r5, [r5, #24]

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80053de:	60ab      	str	r3, [r5, #8]
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 80053e0:	606a      	str	r2, [r5, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80053e2:	702f      	strb	r7, [r5, #0]
  osp->mode.queue.rxqueue = iqp;
 80053e4:	60ee      	str	r6, [r5, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80053e6:	f7ff f813 	bl	8004410 <usb_lld_prepare_receive>
 80053ea:	2320      	movs	r3, #32
 80053ec:	f383 8811 	msr	BASEPRI, r3
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 80053f0:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	7959      	ldrb	r1, [r3, #5]
  }
}
 80053f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedReceive(sdup->config->usbp,
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 80053fc:	f7ff bd08 	b.w	8004e10 <usbStartReceiveI>

08005400 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8005400:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	4614      	mov	r4, r2
 8005406:	4606      	mov	r6, r0
 8005408:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 800540a:	b123      	cbz	r3, 8005416 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800540c:	4618      	mov	r0, r3
 800540e:	2100      	movs	r1, #0
 8005410:	2210      	movs	r2, #16
 8005412:	f003 ff1d 	bl	8009250 <memset>
  if (epcp->out_state != NULL)
 8005416:	69a0      	ldr	r0, [r4, #24]
 8005418:	b118      	cbz	r0, 8005422 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800541a:	2100      	movs	r1, #0
 800541c:	2214      	movs	r2, #20
 800541e:	f003 ff17 	bl	8009250 <memset>

  usbp->epc[ep] = epcp;
 8005422:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8005426:	60dc      	str	r4, [r3, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8005428:	4630      	mov	r0, r6
 800542a:	4629      	mov	r1, r5
}
 800542c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8005430:	f7fe bffe 	b.w	8004430 <usb_lld_init_endpoint>
 8005434:	f3af 8000 	nop.w
 8005438:	f3af 8000 	nop.w
 800543c:	f3af 8000 	nop.w

08005440 <mbox1_setup.lto_priv.139>:
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 8005440:	b470      	push	{r4, r5, r6}
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <mbox1_setup.lto_priv.139+0x30>)
 8005444:	4a0b      	ldr	r2, [pc, #44]	; (8005474 <mbox1_setup.lto_priv.139+0x34>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8005446:	2505      	movs	r5, #5
  mbp->mb_top = &buf[n];
 8005448:	f102 0614 	add.w	r6, r2, #20
 800544c:	2400      	movs	r4, #0
 800544e:	f103 001c 	add.w	r0, r3, #28
 8005452:	f103 0110 	add.w	r1, r3, #16
 8005456:	e883 0044 	stmia.w	r3, {r2, r6}
 800545a:	625d      	str	r5, [r3, #36]	; 0x24
 800545c:	619c      	str	r4, [r3, #24]
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 800545e:	60da      	str	r2, [r3, #12]
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	6218      	str	r0, [r3, #32]
 8005464:	61d8      	str	r0, [r3, #28]
 8005466:	6159      	str	r1, [r3, #20]
 8005468:	6119      	str	r1, [r3, #16]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 800546a:	bc70      	pop	{r4, r5, r6}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000ce4 	.word	0x20000ce4
 8005474:	200017c8 	.word	0x200017c8
 8005478:	f3af 8000 	nop.w
 800547c:	f3af 8000 	nop.w

08005480 <mtx8_setup.lto_priv.136>:
 8005480:	4a06      	ldr	r2, [pc, #24]	; (800549c <mtx8_setup.lto_priv.136+0x1c>)
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <mtx8_setup.lto_priv.136+0x20>)
 8005484:	4907      	ldr	r1, [pc, #28]	; (80054a4 <mtx8_setup.lto_priv.136+0x24>)
 8005486:	2000      	movs	r0, #0
 8005488:	6049      	str	r1, [r1, #4]
 800548a:	6009      	str	r1, [r1, #0]
 800548c:	6052      	str	r2, [r2, #4]
 800548e:	6012      	str	r2, [r2, #0]
 8005490:	6090      	str	r0, [r2, #8]
 8005492:	6098      	str	r0, [r3, #8]
 8005494:	605b      	str	r3, [r3, #4]
 8005496:	601b      	str	r3, [r3, #0]
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000820 	.word	0x20000820
 80054a0:	20000830 	.word	0x20000830
 80054a4:	20000cac 	.word	0x20000cac
 80054a8:	f3af 8000 	nop.w
 80054ac:	f3af 8000 	nop.w

080054b0 <mtx7_setup.lto_priv.134>:
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <mtx7_setup.lto_priv.134+0x14>)
 80054b2:	4a05      	ldr	r2, [pc, #20]	; (80054c8 <mtx7_setup.lto_priv.134+0x18>)
 80054b4:	2100      	movs	r1, #0
 80054b6:	6052      	str	r2, [r2, #4]
 80054b8:	6012      	str	r2, [r2, #0]
 80054ba:	605b      	str	r3, [r3, #4]
 80054bc:	601b      	str	r3, [r3, #0]
 80054be:	6099      	str	r1, [r3, #8]
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000820 	.word	0x20000820
 80054c8:	20000cac 	.word	0x20000cac
 80054cc:	f3af 8000 	nop.w

080054d0 <mtx6_setup.lto_priv.132>:
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <mtx6_setup.lto_priv.132+0x14>)
 80054d2:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <mtx6_setup.lto_priv.132+0x18>)
 80054d4:	2100      	movs	r1, #0
 80054d6:	6052      	str	r2, [r2, #4]
 80054d8:	6012      	str	r2, [r2, #0]
 80054da:	605b      	str	r3, [r3, #4]
 80054dc:	601b      	str	r3, [r3, #0]
 80054de:	6099      	str	r1, [r3, #8]
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000820 	.word	0x20000820
 80054e8:	20000cac 	.word	0x20000cac
 80054ec:	f3af 8000 	nop.w

080054f0 <mbox1_execute.lto_priv.140>:

static void mbox1_execute(void) {
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	2320      	movs	r3, #32
 80054f6:	b082      	sub	sp, #8
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	4d95      	ldr	r5, [pc, #596]	; (8005754 <mbox1_execute.lto_priv.140+0x264>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 80054fe:	2001      	movs	r0, #1
 8005500:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005502:	f1a1 0105 	sub.w	r1, r1, #5
 8005506:	fab1 f181 	clz	r1, r1
 800550a:	0949      	lsrs	r1, r1, #5
 800550c:	f7fc fa30 	bl	8001970 <_test_assert>
 8005510:	2800      	cmp	r0, #0
 8005512:	f040 8089 	bne.w	8005628 <mbox1_execute.lto_priv.140+0x138>
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	2442      	movs	r4, #66	; 0x42

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800551c:	4620      	mov	r0, r4
 800551e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005522:	f003 fcad 	bl	8008e80 <chMBPost.constprop.24>
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8005526:	fab0 f180 	clz	r1, r0
 800552a:	2002      	movs	r0, #2
 800552c:	0949      	lsrs	r1, r1, #5
 800552e:	f7fc fa1f 	bl	8001970 <_test_assert>
 8005532:	3401      	adds	r4, #1
 8005534:	b970      	cbnz	r0, 8005554 <mbox1_execute.lto_priv.140+0x64>
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");

  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
 8005536:	2c46      	cmp	r4, #70	; 0x46
 8005538:	d1f0      	bne.n	800551c <mbox1_execute.lto_priv.140+0x2c>
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
 800553a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800553e:	2041      	movs	r0, #65	; 0x41
 8005540:	f003 fce6 	bl	8008f10 <chMBPostAhead.constprop.22>
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8005544:	fab0 f180 	clz	r1, r0
 8005548:	2003      	movs	r0, #3
 800554a:	0949      	lsrs	r1, r1, #5
 800554c:	f7fc fa10 	bl	8001970 <_test_assert>
 8005550:	2800      	cmp	r0, #0
 8005552:	d06f      	beq.n	8005634 <mbox1_execute.lto_priv.140+0x144>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8005554:	b002      	add	sp, #8
 8005556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555a:	f386 8811 	msr	BASEPRI, r6
 800555e:	f387 8811 	msr	BASEPRI, r7
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8005562:	69a1      	ldr	r1, [r4, #24]
 8005564:	202a      	movs	r0, #42	; 0x2a
 8005566:	fab1 f181 	clz	r1, r1
 800556a:	0949      	lsrs	r1, r1, #5
 800556c:	f7fc fa00 	bl	8001970 <_test_assert>
 8005570:	2800      	cmp	r0, #0
 8005572:	f040 8299 	bne.w	8005aa8 <mbox1_execute.lto_priv.140+0x5b8>
 8005576:	f386 8811 	msr	BASEPRI, r6
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800557a:	68e1      	ldr	r1, [r4, #12]
 800557c:	68a3      	ldr	r3, [r4, #8]
 800557e:	202b      	movs	r0, #43	; 0x2b
 8005580:	ebc3 0e01 	rsb	lr, r3, r1
 8005584:	f1de 0100 	rsbs	r1, lr, #0
 8005588:	eb41 010e 	adc.w	r1, r1, lr
 800558c:	f7fc f9f0 	bl	8001970 <_test_assert>
 8005590:	2800      	cmp	r0, #0
 8005592:	d1df      	bne.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005594:	f387 8811 	msr	BASEPRI, r7
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 8005598:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	f104 001c 	add.w	r0, r4, #28
 80055a0:	1ad1      	subs	r1, r2, r3
 80055a2:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 80055a4:	60e3      	str	r3, [r4, #12]
 80055a6:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 80055a8:	f7fd fa92 	bl	8002ad0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 80055ac:	f104 0010 	add.w	r0, r4, #16
 80055b0:	4631      	mov	r1, r6
 80055b2:	f7fd fa8d 	bl	8002ad0 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 80055b6:	f7fc fb43 	bl	8001c40 <chSchRescheduleS>
 80055ba:	f386 8811 	msr	BASEPRI, r6
 80055be:	f387 8811 	msr	BASEPRI, r7
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80055c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055c4:	202c      	movs	r0, #44	; 0x2c
 80055c6:	1f4d      	subs	r5, r1, #5
 80055c8:	4269      	negs	r1, r5
 80055ca:	4169      	adcs	r1, r5
 80055cc:	f7fc f9d0 	bl	8001970 <_test_assert>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f040 8269 	bne.w	8005aa8 <mbox1_execute.lto_priv.140+0x5b8>
 80055d6:	f386 8811 	msr	BASEPRI, r6
 80055da:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 80055de:	69a1      	ldr	r1, [r4, #24]
 80055e0:	202d      	movs	r0, #45	; 0x2d
 80055e2:	fab1 f181 	clz	r1, r1
 80055e6:	0949      	lsrs	r1, r1, #5
 80055e8:	f7fc f9c2 	bl	8001970 <_test_assert>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f040 825b 	bne.w	8005aa8 <mbox1_execute.lto_priv.140+0x5b8>
 80055f2:	f386 8811 	msr	BASEPRI, r6
 80055f6:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80055fa:	6821      	ldr	r1, [r4, #0]
 80055fc:	68a3      	ldr	r3, [r4, #8]
 80055fe:	202e      	movs	r0, #46	; 0x2e
 8005600:	1aca      	subs	r2, r1, r3
 8005602:	4251      	negs	r1, r2
 8005604:	4151      	adcs	r1, r2
 8005606:	f7fc f9b3 	bl	8001970 <_test_assert>
 800560a:	2800      	cmp	r0, #0
 800560c:	f040 824c 	bne.w	8005aa8 <mbox1_execute.lto_priv.140+0x5b8>
 8005610:	f386 8811 	msr	BASEPRI, r6
 8005614:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8005618:	6821      	ldr	r1, [r4, #0]
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	202f      	movs	r0, #47	; 0x2f
 800561e:	1acb      	subs	r3, r1, r3
 8005620:	4259      	negs	r1, r3
 8005622:	4159      	adcs	r1, r3
 8005624:	f7fc f9a4 	bl	8001970 <_test_assert>
 8005628:	2300      	movs	r3, #0
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	b002      	add	sp, #8
 8005630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 8005634:	2101      	movs	r1, #1
 8005636:	2058      	movs	r0, #88	; 0x58
 8005638:	f003 fc22 	bl	8008e80 <chMBPost.constprop.24>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800563c:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8005640:	fab1 f181 	clz	r1, r1
 8005644:	2004      	movs	r0, #4
 8005646:	0949      	lsrs	r1, r1, #5
 8005648:	f7fc f992 	bl	8001970 <_test_assert>
 800564c:	4604      	mov	r4, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	d180      	bne.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005652:	2620      	movs	r6, #32
 8005654:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8005658:	2058      	movs	r0, #88	; 0x58
 800565a:	f003 fc39 	bl	8008ed0 <chMBPostI.constprop.23>
 800565e:	4601      	mov	r1, r0
 8005660:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005664:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 8005668:	fab1 f181 	clz	r1, r1
 800566c:	2005      	movs	r0, #5
 800566e:	0949      	lsrs	r1, r1, #5
 8005670:	f7fc f97e 	bl	8001970 <_test_assert>
 8005674:	2800      	cmp	r0, #0
 8005676:	f47f af6d 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAhead(&mb1, 'X', 1);
 800567a:	2101      	movs	r1, #1
 800567c:	2058      	movs	r0, #88	; 0x58
 800567e:	f003 fc47 	bl	8008f10 <chMBPostAhead.constprop.22>
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8005682:	f1a0 31ff 	sub.w	r1, r0, #4294967295
 8005686:	fab1 f181 	clz	r1, r1
 800568a:	2006      	movs	r0, #6
 800568c:	0949      	lsrs	r1, r1, #5
 800568e:	f7fc f96f 	bl	8001970 <_test_assert>
 8005692:	4604      	mov	r4, r0
 8005694:	2800      	cmp	r0, #0
 8005696:	f47f af5d 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 800569a:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 800569e:	2058      	movs	r0, #88	; 0x58
 80056a0:	f003 fc5e 	bl	8008f60 <chMBPostAheadI.constprop.21>
 80056a4:	4601      	mov	r1, r0
 80056a6:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80056aa:	f1a1 31ff 	sub.w	r1, r1, #4294967295
 80056ae:	fab1 f181 	clz	r1, r1
 80056b2:	2007      	movs	r0, #7
 80056b4:	0949      	lsrs	r1, r1, #5
 80056b6:	f7fc f95b 	bl	8001970 <_test_assert>
 80056ba:	4680      	mov	r8, r0
 80056bc:	2800      	cmp	r0, #0
 80056be:	f47f af49 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 80056c2:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 80056c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80056c8:	2008      	movs	r0, #8
 80056ca:	fab1 f181 	clz	r1, r1
 80056ce:	0949      	lsrs	r1, r1, #5
 80056d0:	f7fc f94e 	bl	8001970 <_test_assert>
 80056d4:	4c1f      	ldr	r4, [pc, #124]	; (8005754 <mbox1_execute.lto_priv.140+0x264>)
 80056d6:	4607      	mov	r7, r0
 80056d8:	b110      	cbz	r0, 80056e0 <mbox1_execute.lto_priv.140+0x1f0>
 80056da:	f388 8811 	msr	BASEPRI, r8
 80056de:	e739      	b.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 80056e0:	f380 8811 	msr	BASEPRI, r0
 80056e4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80056e8:	69a1      	ldr	r1, [r4, #24]
 80056ea:	2009      	movs	r0, #9
 80056ec:	f1a1 0e05 	sub.w	lr, r1, #5
 80056f0:	f1de 0100 	rsbs	r1, lr, #0
 80056f4:	eb41 010e 	adc.w	r1, r1, lr
 80056f8:	f7fc f93a 	bl	8001970 <_test_assert>
 80056fc:	b110      	cbz	r0, 8005704 <mbox1_execute.lto_priv.140+0x214>
 80056fe:	f387 8811 	msr	BASEPRI, r7
 8005702:	e727      	b.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005704:	f380 8811 	msr	BASEPRI, r0
 8005708:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800570c:	68e1      	ldr	r1, [r4, #12]
 800570e:	68a3      	ldr	r3, [r4, #8]
 8005710:	200a      	movs	r0, #10
 8005712:	1acf      	subs	r7, r1, r3
 8005714:	4279      	negs	r1, r7
 8005716:	4179      	adcs	r1, r7
 8005718:	f7fc f92a 	bl	8001970 <_test_assert>
 800571c:	2300      	movs	r3, #0
 800571e:	2800      	cmp	r0, #0
 8005720:	d183      	bne.n	800562a <mbox1_execute.lto_priv.140+0x13a>
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	2405      	movs	r4, #5
 8005728:	e005      	b.n	8005736 <mbox1_execute.lto_priv.140+0x246>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 800572a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800572e:	f7fc f937 	bl	80019a0 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 8005732:	3c01      	subs	r4, #1
 8005734:	d010      	beq.n	8005758 <mbox1_execute.lto_priv.140+0x268>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8005736:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800573a:	a801      	add	r0, sp, #4
 800573c:	f003 fc30 	bl	8008fa0 <chMBFetch.constprop.20>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 8005740:	fab0 f180 	clz	r1, r0
 8005744:	200b      	movs	r0, #11
 8005746:	0949      	lsrs	r1, r1, #5
 8005748:	f7fc f912 	bl	8001970 <_test_assert>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0ec      	beq.n	800572a <mbox1_execute.lto_priv.140+0x23a>
 8005750:	e700      	b.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005752:	bf00      	nop
 8005754:	20000ce4 	.word	0x20000ce4
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8005758:	200c      	movs	r0, #12
 800575a:	49d5      	ldr	r1, [pc, #852]	; (8005ab0 <mbox1_execute.lto_priv.140+0x5c0>)
 800575c:	f7fc f8e0 	bl	8001920 <_test_assert_sequence>
 8005760:	2800      	cmp	r0, #0
 8005762:	f47f aef7 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 8005766:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800576a:	2047      	movs	r0, #71	; 0x47
 800576c:	f003 fb88 	bl	8008e80 <chMBPost.constprop.24>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8005770:	fab0 f180 	clz	r1, r0
 8005774:	200d      	movs	r0, #13
 8005776:	0949      	lsrs	r1, r1, #5
 8005778:	f7fc f8fa 	bl	8001970 <_test_assert>
 800577c:	2800      	cmp	r0, #0
 800577e:	f47f aee9 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8005782:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005786:	a801      	add	r0, sp, #4
 8005788:	f003 fc0a 	bl	8008fa0 <chMBFetch.constprop.20>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 800578c:	fab0 f180 	clz	r1, r0
 8005790:	200e      	movs	r0, #14
 8005792:	0949      	lsrs	r1, r1, #5
 8005794:	f7fc f8ec 	bl	8001970 <_test_assert>
 8005798:	2800      	cmp	r0, #0
 800579a:	f47f aedb 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 800579e:	6829      	ldr	r1, [r5, #0]
 80057a0:	68ab      	ldr	r3, [r5, #8]
 80057a2:	200f      	movs	r0, #15
 80057a4:	1ace      	subs	r6, r1, r3
 80057a6:	4271      	negs	r1, r6
 80057a8:	4171      	adcs	r1, r6
 80057aa:	4ec2      	ldr	r6, [pc, #776]	; (8005ab4 <mbox1_execute.lto_priv.140+0x5c4>)
 80057ac:	f7fc f8e0 	bl	8001970 <_test_assert>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f47f aecf 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80057b6:	6831      	ldr	r1, [r6, #0]
 80057b8:	68f3      	ldr	r3, [r6, #12]
 80057ba:	2010      	movs	r0, #16
 80057bc:	1aca      	subs	r2, r1, r3
 80057be:	4251      	negs	r1, r2
 80057c0:	4151      	adcs	r1, r2
 80057c2:	f7fc f8d5 	bl	8001970 <_test_assert>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f47f aec4 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 80057cc:	2101      	movs	r1, #1
 80057ce:	a801      	add	r0, sp, #4
 80057d0:	f003 fbe6 	bl	8008fa0 <chMBFetch.constprop.20>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	4259      	negs	r1, r3
 80057d8:	4159      	adcs	r1, r3
 80057da:	2011      	movs	r0, #17
 80057dc:	f7fc f8c8 	bl	8001970 <_test_assert>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	f47f aeb7 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 80057e6:	2720      	movs	r7, #32
 80057e8:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 80057ec:	a801      	add	r0, sp, #4
 80057ee:	f003 fbff 	bl	8008ff0 <chMBFetchI.constprop.19>
 80057f2:	4601      	mov	r1, r0
 80057f4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80057f8:	f101 0801 	add.w	r8, r1, #1
 80057fc:	f1d8 0100 	rsbs	r1, r8, #0
 8005800:	eb41 0108 	adc.w	r1, r1, r8
 8005804:	2012      	movs	r0, #18
 8005806:	f7fc f8b3 	bl	8001970 <_test_assert>
 800580a:	2800      	cmp	r0, #0
 800580c:	f47f aea2 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005810:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005814:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8005816:	2013      	movs	r0, #19
 8005818:	f1a1 0c05 	sub.w	ip, r1, #5
 800581c:	f1dc 0100 	rsbs	r1, ip, #0
 8005820:	eb41 010c 	adc.w	r1, r1, ip
 8005824:	f7fc f8a4 	bl	8001970 <_test_assert>
 8005828:	2800      	cmp	r0, #0
 800582a:	f47f aefd 	bne.w	8005628 <mbox1_execute.lto_priv.140+0x138>
 800582e:	f04f 0800 	mov.w	r8, #0
 8005832:	f388 8811 	msr	BASEPRI, r8
 8005836:	2420      	movs	r4, #32
 8005838:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800583c:	69a9      	ldr	r1, [r5, #24]
 800583e:	2014      	movs	r0, #20
 8005840:	fab1 f181 	clz	r1, r1
 8005844:	0949      	lsrs	r1, r1, #5
 8005846:	f7fc f893 	bl	8001970 <_test_assert>
 800584a:	4e9a      	ldr	r6, [pc, #616]	; (8005ab4 <mbox1_execute.lto_priv.140+0x5c4>)
 800584c:	4607      	mov	r7, r0
 800584e:	2800      	cmp	r0, #0
 8005850:	f47f af43 	bne.w	80056da <mbox1_execute.lto_priv.140+0x1ea>
 8005854:	f380 8811 	msr	BASEPRI, r0
 8005858:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800585c:	68f1      	ldr	r1, [r6, #12]
 800585e:	68b3      	ldr	r3, [r6, #8]
 8005860:	2015      	movs	r0, #21
 8005862:	ebc3 0e01 	rsb	lr, r3, r1
 8005866:	f1de 0100 	rsbs	r1, lr, #0
 800586a:	eb41 010e 	adc.w	r1, r1, lr
 800586e:	f7fc f87f 	bl	8001970 <_test_assert>
 8005872:	2800      	cmp	r0, #0
 8005874:	f47f af43 	bne.w	80056fe <mbox1_execute.lto_priv.140+0x20e>
 8005878:	f380 8811 	msr	BASEPRI, r0
 800587c:	f384 8811 	msr	BASEPRI, r4

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 8005880:	2041      	movs	r0, #65	; 0x41
 8005882:	f003 fb25 	bl	8008ed0 <chMBPostI.constprop.23>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 8005886:	fab0 f180 	clz	r1, r0
 800588a:	2016      	movs	r0, #22
 800588c:	0949      	lsrs	r1, r1, #5
 800588e:	f7fc f86f 	bl	8001970 <_test_assert>
 8005892:	2800      	cmp	r0, #0
 8005894:	f47f ae5e 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'B');
 8005898:	2042      	movs	r0, #66	; 0x42
 800589a:	f003 fb19 	bl	8008ed0 <chMBPostI.constprop.23>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 800589e:	fab0 f180 	clz	r1, r0
 80058a2:	2017      	movs	r0, #23
 80058a4:	0949      	lsrs	r1, r1, #5
 80058a6:	f7fc f863 	bl	8001970 <_test_assert>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f47f ae52 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'C');
 80058b0:	2043      	movs	r0, #67	; 0x43
 80058b2:	f003 fb0d 	bl	8008ed0 <chMBPostI.constprop.23>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80058b6:	fab0 f180 	clz	r1, r0
 80058ba:	2018      	movs	r0, #24
 80058bc:	0949      	lsrs	r1, r1, #5
 80058be:	f7fc f857 	bl	8001970 <_test_assert>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f47f ae46 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'D');
 80058c8:	2044      	movs	r0, #68	; 0x44
 80058ca:	f003 fb01 	bl	8008ed0 <chMBPostI.constprop.23>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 80058ce:	fab0 f180 	clz	r1, r0
 80058d2:	2019      	movs	r0, #25
 80058d4:	0949      	lsrs	r1, r1, #5
 80058d6:	f7fc f84b 	bl	8001970 <_test_assert>
 80058da:	4607      	mov	r7, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	f47f ae39 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostI(&mb1, 'E');
 80058e2:	2045      	movs	r0, #69	; 0x45
 80058e4:	f003 faf4 	bl	8008ed0 <chMBPostI.constprop.23>
 80058e8:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 80058ec:	fab0 f180 	clz	r1, r0
 80058f0:	201a      	movs	r0, #26
 80058f2:	0949      	lsrs	r1, r1, #5
 80058f4:	f7fc f83c 	bl	8001970 <_test_assert>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f47f ae2b 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80058fe:	68f1      	ldr	r1, [r6, #12]
 8005900:	68b3      	ldr	r3, [r6, #8]
 8005902:	201b      	movs	r0, #27
 8005904:	1ace      	subs	r6, r1, r3
 8005906:	4271      	negs	r1, r6
 8005908:	4171      	adcs	r1, r6
 800590a:	f7fc f831 	bl	8001970 <_test_assert>
 800590e:	2800      	cmp	r0, #0
 8005910:	f47f ae20 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005914:	4680      	mov	r8, r0
 8005916:	4626      	mov	r6, r4
 8005918:	2405      	movs	r4, #5
 800591a:	2720      	movs	r7, #32
 800591c:	f386 8811 	msr	BASEPRI, r6
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8005920:	a801      	add	r0, sp, #4
 8005922:	f003 fb65 	bl	8008ff0 <chMBFetchI.constprop.19>
 8005926:	f388 8811 	msr	BASEPRI, r8
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 800592a:	fab0 f180 	clz	r1, r0
 800592e:	201c      	movs	r0, #28
 8005930:	0949      	lsrs	r1, r1, #5
 8005932:	f7fc f81d 	bl	8001970 <_test_assert>
 8005936:	2800      	cmp	r0, #0
 8005938:	f47f ae0c 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
    test_emit_token(msg2);
 800593c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005940:	f7fc f82e 	bl	80019a0 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8005944:	3c01      	subs	r4, #1
 8005946:	d1e8      	bne.n	800591a <mbox1_execute.lto_priv.140+0x42a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 8005948:	201d      	movs	r0, #29
 800594a:	4959      	ldr	r1, [pc, #356]	; (8005ab0 <mbox1_execute.lto_priv.140+0x5c0>)
 800594c:	f7fb ffe8 	bl	8001920 <_test_assert_sequence>
 8005950:	2800      	cmp	r0, #0
 8005952:	f47f adff 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005956:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800595a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800595c:	201e      	movs	r0, #30
 800595e:	1f4a      	subs	r2, r1, #5
 8005960:	4251      	negs	r1, r2
 8005962:	4151      	adcs	r1, r2
 8005964:	4e53      	ldr	r6, [pc, #332]	; (8005ab4 <mbox1_execute.lto_priv.140+0x5c4>)
 8005966:	f7fc f803 	bl	8001970 <_test_assert>
 800596a:	b110      	cbz	r0, 8005972 <mbox1_execute.lto_priv.140+0x482>
 800596c:	f384 8811 	msr	BASEPRI, r4
 8005970:	e5f0      	b.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005972:	f384 8811 	msr	BASEPRI, r4
 8005976:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 800597a:	69b1      	ldr	r1, [r6, #24]
 800597c:	201f      	movs	r0, #31
 800597e:	fab1 f181 	clz	r1, r1
 8005982:	0949      	lsrs	r1, r1, #5
 8005984:	f7fb fff4 	bl	8001970 <_test_assert>
 8005988:	2800      	cmp	r0, #0
 800598a:	d1ef      	bne.n	800596c <mbox1_execute.lto_priv.140+0x47c>
 800598c:	f384 8811 	msr	BASEPRI, r4
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8005990:	68f1      	ldr	r1, [r6, #12]
 8005992:	68b3      	ldr	r3, [r6, #8]
 8005994:	4638      	mov	r0, r7
 8005996:	1acb      	subs	r3, r1, r3
 8005998:	4259      	negs	r1, r3
 800599a:	4159      	adcs	r1, r3
 800599c:	f7fb ffe8 	bl	8001970 <_test_assert>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f47f add7 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 80059a6:	f387 8811 	msr	BASEPRI, r7

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 80059aa:	2045      	movs	r0, #69	; 0x45
 80059ac:	f003 fad8 	bl	8008f60 <chMBPostAheadI.constprop.21>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 80059b0:	fab0 f180 	clz	r1, r0
 80059b4:	2021      	movs	r0, #33	; 0x21
 80059b6:	0949      	lsrs	r1, r1, #5
 80059b8:	f7fb ffda 	bl	8001970 <_test_assert>
 80059bc:	2800      	cmp	r0, #0
 80059be:	f47f adc9 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'D');
 80059c2:	2044      	movs	r0, #68	; 0x44
 80059c4:	f003 facc 	bl	8008f60 <chMBPostAheadI.constprop.21>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 80059c8:	fab0 f180 	clz	r1, r0
 80059cc:	2022      	movs	r0, #34	; 0x22
 80059ce:	0949      	lsrs	r1, r1, #5
 80059d0:	f7fb ffce 	bl	8001970 <_test_assert>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f47f adbd 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'C');
 80059da:	2043      	movs	r0, #67	; 0x43
 80059dc:	f003 fac0 	bl	8008f60 <chMBPostAheadI.constprop.21>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 80059e0:	fab0 f180 	clz	r1, r0
 80059e4:	2023      	movs	r0, #35	; 0x23
 80059e6:	0949      	lsrs	r1, r1, #5
 80059e8:	f7fb ffc2 	bl	8001970 <_test_assert>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f47f adb1 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'B');
 80059f2:	2042      	movs	r0, #66	; 0x42
 80059f4:	f003 fab4 	bl	8008f60 <chMBPostAheadI.constprop.21>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 80059f8:	fab0 f180 	clz	r1, r0
 80059fc:	2024      	movs	r0, #36	; 0x24
 80059fe:	0949      	lsrs	r1, r1, #5
 8005a00:	f7fb ffb6 	bl	8001970 <_test_assert>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	f47f ada5 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  msg1 = chMBPostAheadI(&mb1, 'A');
 8005a0a:	2041      	movs	r0, #65	; 0x41
 8005a0c:	f003 faa8 	bl	8008f60 <chMBPostAheadI.constprop.21>
 8005a10:	2300      	movs	r3, #0
 8005a12:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8005a16:	fab0 f180 	clz	r1, r0
 8005a1a:	2025      	movs	r0, #37	; 0x25
 8005a1c:	0949      	lsrs	r1, r1, #5
 8005a1e:	f7fb ffa7 	bl	8001970 <_test_assert>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f47f ad96 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8005a28:	68e9      	ldr	r1, [r5, #12]
 8005a2a:	68ab      	ldr	r3, [r5, #8]
 8005a2c:	2026      	movs	r0, #38	; 0x26
 8005a2e:	ebc3 0801 	rsb	r8, r3, r1
 8005a32:	f1d8 0100 	rsbs	r1, r8, #0
 8005a36:	eb41 0108 	adc.w	r1, r1, r8
 8005a3a:	f7fb ff99 	bl	8001970 <_test_assert>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f47f ad88 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005a44:	4604      	mov	r4, r0
 8005a46:	2605      	movs	r6, #5
 8005a48:	f04f 0820 	mov.w	r8, #32
 8005a4c:	2720      	movs	r7, #32
 8005a4e:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8005a52:	a801      	add	r0, sp, #4
 8005a54:	f003 facc 	bl	8008ff0 <chMBFetchI.constprop.19>
 8005a58:	f384 8811 	msr	BASEPRI, r4
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8005a5c:	fab0 f180 	clz	r1, r0
 8005a60:	2027      	movs	r0, #39	; 0x27
 8005a62:	0949      	lsrs	r1, r1, #5
 8005a64:	f7fb ff84 	bl	8001970 <_test_assert>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f47f ad73 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
    test_emit_token(msg2);
 8005a6e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005a72:	f7fb ff95 	bl	80019a0 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8005a76:	3e01      	subs	r6, #1
 8005a78:	d1e8      	bne.n	8005a4c <mbox1_execute.lto_priv.140+0x55c>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8005a7a:	2028      	movs	r0, #40	; 0x28
 8005a7c:	490c      	ldr	r1, [pc, #48]	; (8005ab0 <mbox1_execute.lto_priv.140+0x5c0>)
 8005a7e:	f7fb ff4f 	bl	8001920 <_test_assert_sequence>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	f47f ad66 	bne.w	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005a88:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8005a8c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005a8e:	2029      	movs	r0, #41	; 0x29
 8005a90:	f1a1 0c05 	sub.w	ip, r1, #5
 8005a94:	f1dc 0100 	rsbs	r1, ip, #0
 8005a98:	eb41 010c 	adc.w	r1, r1, ip
 8005a9c:	4c05      	ldr	r4, [pc, #20]	; (8005ab4 <mbox1_execute.lto_priv.140+0x5c4>)
 8005a9e:	f7fb ff67 	bl	8001970 <_test_assert>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f43f ad59 	beq.w	800555a <mbox1_execute.lto_priv.140+0x6a>
 8005aa8:	f386 8811 	msr	BASEPRI, r6
 8005aac:	e552      	b.n	8005554 <mbox1_execute.lto_priv.140+0x64>
 8005aae:	bf00      	nop
 8005ab0:	08009f8c 	.word	0x08009f8c
 8005ab4:	20000ce4 	.word	0x20000ce4
 8005ab8:	f3af 8000 	nop.w
 8005abc:	f3af 8000 	nop.w

08005ac0 <thread>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8005ac4:	2141      	movs	r1, #65	; 0x41
 8005ac6:	f7fc fbb3 	bl	8002230 <chMsgSend>
  chMsgSend(p, 'B');
 8005aca:	4620      	mov	r0, r4
 8005acc:	2142      	movs	r1, #66	; 0x42
 8005ace:	f7fc fbaf 	bl	8002230 <chMsgSend>
  chMsgSend(p, 'C');
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	2143      	movs	r1, #67	; 0x43
 8005ad6:	f7fc fbab 	bl	8002230 <chMsgSend>
  return 0;
}
 8005ada:	2000      	movs	r0, #0
 8005adc:	bd10      	pop	{r4, pc}
 8005ade:	bf00      	nop

08005ae0 <msg1_execute.lto_priv.138>:

static void msg1_execute(void) {
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <msg1_execute.lto_priv.138+0x80>)
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	699c      	ldr	r4, [r3, #24]
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8005ae8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005aec:	68a2      	ldr	r2, [r4, #8]
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <msg1_execute.lto_priv.138+0x84>)
 8005af0:	3201      	adds	r2, #1
 8005af2:	9400      	str	r4, [sp, #0]
 8005af4:	481c      	ldr	r0, [pc, #112]	; (8005b68 <msg1_execute.lto_priv.138+0x88>)
 8005af6:	f7fc f94b 	bl	8001d90 <chThdCreateStatic>
 8005afa:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <msg1_execute.lto_priv.138+0x8c>)
 8005afc:	2520      	movs	r5, #32
 8005afe:	6018      	str	r0, [r3, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8005b00:	f7fc f99e 	bl	8001e40 <chMsgWait>
 8005b04:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005b06:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	f7fc f8c0 	bl	8001c90 <chSchWakeupS>
 8005b10:	2400      	movs	r4, #0
 8005b12:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8005b16:	b2f0      	uxtb	r0, r6
 8005b18:	f7fb ff42 	bl	80019a0 <test_emit_token>
  tp = chMsgWait();
 8005b1c:	f7fc f990 	bl	8001e40 <chMsgWait>
 8005b20:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005b22:	f385 8811 	msr	BASEPRI, r5
 8005b26:	4631      	mov	r1, r6
 8005b28:	f7fc f8b2 	bl	8001c90 <chSchWakeupS>
 8005b2c:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8005b30:	b2f0      	uxtb	r0, r6
 8005b32:	f7fb ff35 	bl	80019a0 <test_emit_token>
  tp = chMsgWait();
 8005b36:	f7fc f983 	bl	8001e40 <chMsgWait>
 8005b3a:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8005b3c:	f385 8811 	msr	BASEPRI, r5
 8005b40:	4631      	mov	r1, r6
 8005b42:	f7fc f8a5 	bl	8001c90 <chSchWakeupS>
 8005b46:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8005b4a:	b2f0      	uxtb	r0, r6
 8005b4c:	f7fb ff28 	bl	80019a0 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8005b50:	4907      	ldr	r1, [pc, #28]	; (8005b70 <msg1_execute.lto_priv.138+0x90>)
 8005b52:	2001      	movs	r0, #1
}
 8005b54:	b002      	add	sp, #8
 8005b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8005b5a:	f7fb bee1 	b.w	8001920 <_test_assert_sequence>
 8005b5e:	bf00      	nop
 8005b60:	20001e68 	.word	0x20001e68
 8005b64:	08005ac1 	.word	0x08005ac1
 8005b68:	200017c8 	.word	0x200017c8
 8005b6c:	2000173c 	.word	0x2000173c
 8005b70:	0800a1d0 	.word	0x0800a1d0
 8005b74:	f3af 8000 	nop.w
 8005b78:	f3af 8000 	nop.w
 8005b7c:	f3af 8000 	nop.w

08005b80 <mtx8_execute.lto_priv.137>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <mtx8_execute.lto_priv.137+0x68>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005b84:	4d19      	ldr	r5, [pc, #100]	; (8005bec <mtx8_execute.lto_priv.137+0x6c>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <mtx8_execute.lto_priv.137+0x70>)
 8005b8a:	6896      	ldr	r6, [r2, #8]
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005b8c:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005b8e:	1c72      	adds	r2, r6, #1
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	4628      	mov	r0, r5
 8005b94:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <mtx8_execute.lto_priv.137+0x74>)
 8005b9a:	f7fc f8f9 	bl	8001d90 <chThdCreateStatic>
 8005b9e:	4c16      	ldr	r4, [pc, #88]	; (8005bf8 <mtx8_execute.lto_priv.137+0x78>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <mtx8_execute.lto_priv.137+0x7c>)
}

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005ba2:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005ba4:	1cb2      	adds	r2, r6, #2
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 8005bac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <mtx8_execute.lto_priv.137+0x80>)
 8005bb2:	f7fc f8ed 	bl	8001d90 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005bb6:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <mtx8_execute.lto_priv.137+0x84>)
 8005bb8:	1cf2      	adds	r2, r6, #3
 8005bba:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx8_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005bbe:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <mtx8_execute.lto_priv.137+0x88>)
 8005bc8:	f7fc f8e2 	bl	8001d90 <chThdCreateStatic>
 8005bcc:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8005bce:	f003 f8d7 	bl	8008d80 <chCondSignal.constprop.52>
  chCondSignal(&c1);
 8005bd2:	f003 f8d5 	bl	8008d80 <chCondSignal.constprop.52>
  test_wait_threads();
 8005bd6:	f7fc fd23 	bl	8002620 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 8005bda:	490c      	ldr	r1, [pc, #48]	; (8005c0c <mtx8_execute.lto_priv.137+0x8c>)
 8005bdc:	2001      	movs	r0, #1
}
 8005bde:	b002      	add	sp, #8
 8005be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 8005be4:	f7fb be9c 	b.w	8001920 <_test_assert_sequence>
 8005be8:	20001e68 	.word	0x20001e68
 8005bec:	200017c8 	.word	0x200017c8
 8005bf0:	08009f84 	.word	0x08009f84
 8005bf4:	08005c31 	.word	0x08005c31
 8005bf8:	2000173c 	.word	0x2000173c
 8005bfc:	08009f88 	.word	0x08009f88
 8005c00:	08005cc1 	.word	0x08005cc1
 8005c04:	08009f80 	.word	0x08009f80
 8005c08:	08005c11 	.word	0x08005c11
 8005c0c:	0800a1d0 	.word	0x0800a1d0

08005c10 <thread12>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8005c14:	4c05      	ldr	r4, [pc, #20]	; (8005c2c <thread12+0x1c>)
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7fc fc1a 	bl	8002450 <chMtxLock>
  test_emit_token(*(char *)p);
 8005c1c:	7828      	ldrb	r0, [r5, #0]
 8005c1e:	f7fb febf 	bl	80019a0 <test_emit_token>
  chMtxUnlock(&m2);
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7fc f864 	bl	8001cf0 <chMtxUnlock>
  return 0;
}
 8005c28:	2000      	movs	r0, #0
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	20000830 	.word	0x20000830

08005c30 <thread11>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	4606      	mov	r6, r0

  chMtxLock(&m2);
 8005c34:	481c      	ldr	r0, [pc, #112]	; (8005ca8 <thread11+0x78>)
 8005c36:	f7fc fc0b 	bl	8002450 <chMtxLock>
  chMtxLock(&m1);
 8005c3a:	481c      	ldr	r0, [pc, #112]	; (8005cac <thread11+0x7c>)
 8005c3c:	f7fc fc08 	bl	8002450 <chMtxLock>
 8005c40:	2320      	movs	r3, #32
 8005c42:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005c46:	4d1a      	ldr	r5, [pc, #104]	; (8005cb0 <thread11+0x80>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8005c48:	69ab      	ldr	r3, [r5, #24]
 8005c4a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	f7fc fb6f 	bl	8002330 <chMtxUnlockS>
  currp->p_u.wtobjp = cp;
 8005c52:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <thread11+0x84>)
 8005c54:	69ac      	ldr	r4, [r5, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005c56:	4610      	mov	r0, r2
 8005c58:	4613      	mov	r3, r2
 8005c5a:	6222      	str	r2, [r4, #32]
 8005c5c:	e003      	b.n	8005c66 <thread11+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005c5e:	6899      	ldr	r1, [r3, #8]
 8005c60:	68a2      	ldr	r2, [r4, #8]
 8005c62:	4291      	cmp	r1, r2
 8005c64:	d302      	bcc.n	8005c6c <thread11+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8005c66:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005c68:	4283      	cmp	r3, r0
 8005c6a:	d1f8      	bne.n	8005c5e <thread11+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005c6c:	685a      	ldr	r2, [r3, #4]
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8005c6e:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005c70:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8005c72:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8005c74:	605c      	str	r4, [r3, #4]
 8005c76:	6014      	str	r4, [r2, #0]
 8005c78:	f7fc f8ca 	bl	8001e10 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8005c7c:	69ab      	ldr	r3, [r5, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	3301      	adds	r3, #1
 8005c82:	d002      	beq.n	8005c8a <thread11+0x5a>
    chMtxLockS(mp);
 8005c84:	4638      	mov	r0, r7
 8005c86:	f7fc fb7b 	bl	8002380 <chMtxLockS>
 8005c8a:	2400      	movs	r4, #0
 8005c8c:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8005c90:	7830      	ldrb	r0, [r6, #0]
 8005c92:	f7fb fe85 	bl	80019a0 <test_emit_token>
  chMtxUnlock(&m1);
 8005c96:	4805      	ldr	r0, [pc, #20]	; (8005cac <thread11+0x7c>)
 8005c98:	f7fc f82a 	bl	8001cf0 <chMtxUnlock>
  chMtxUnlock(&m2);
 8005c9c:	4802      	ldr	r0, [pc, #8]	; (8005ca8 <thread11+0x78>)
 8005c9e:	f7fc f827 	bl	8001cf0 <chMtxUnlock>
  return 0;
}
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000830 	.word	0x20000830
 8005cac:	20000820 	.word	0x20000820
 8005cb0:	20001e68 	.word	0x20001e68
 8005cb4:	20000cac 	.word	0x20000cac
 8005cb8:	f3af 8000 	nop.w
 8005cbc:	f3af 8000 	nop.w

08005cc0 <thread10>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	4606      	mov	r6, r0

  chMtxLock(&m1);
 8005cc4:	4816      	ldr	r0, [pc, #88]	; (8005d20 <thread10+0x60>)
 8005cc6:	f7fc fbc3 	bl	8002450 <chMtxLock>
 8005cca:	2320      	movs	r3, #32
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <thread10+0x64>)
 8005cd2:	699c      	ldr	r4, [r3, #24]
 8005cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7fc fb2a 	bl	8002330 <chMtxUnlockS>
  ctp->p_u.wtobjp = cp;
 8005cdc:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <thread10+0x68>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005cde:	4610      	mov	r0, r2
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	6222      	str	r2, [r4, #32]
 8005ce4:	e003      	b.n	8005cee <thread10+0x2e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	68a2      	ldr	r2, [r4, #8]
 8005cea:	4291      	cmp	r1, r2
 8005cec:	d302      	bcc.n	8005cf4 <thread10+0x34>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8005cee:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005cf0:	4283      	cmp	r3, r0
 8005cf2:	d1f8      	bne.n	8005ce6 <thread10+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005cf4:	685a      	ldr	r2, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8005cf6:	2007      	movs	r0, #7

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005cf8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8005cfa:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8005cfc:	605c      	str	r4, [r3, #4]
 8005cfe:	6014      	str	r4, [r2, #0]
 8005d00:	f7fc f886 	bl	8001e10 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7fc fb3b 	bl	8002380 <chMtxLockS>
 8005d0a:	2400      	movs	r4, #0
 8005d0c:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8005d10:	7830      	ldrb	r0, [r6, #0]
 8005d12:	f7fb fe45 	bl	80019a0 <test_emit_token>
  chMtxUnlock(&m1);
 8005d16:	4802      	ldr	r0, [pc, #8]	; (8005d20 <thread10+0x60>)
 8005d18:	f7fb ffea 	bl	8001cf0 <chMtxUnlock>
  return 0;
}
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	20000820 	.word	0x20000820
 8005d24:	20001e68 	.word	0x20001e68
 8005d28:	20000cac 	.word	0x20000cac
 8005d2c:	f3af 8000 	nop.w

08005d30 <mtx7_execute.lto_priv.135>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005d30:	b530      	push	{r4, r5, lr}
 8005d32:	4a2c      	ldr	r2, [pc, #176]	; (8005de4 <mtx7_execute.lto_priv.135+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005d34:	4b2c      	ldr	r3, [pc, #176]	; (8005de8 <mtx7_execute.lto_priv.135+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005d36:	6992      	ldr	r2, [r2, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8005d38:	b083      	sub	sp, #12
 8005d3a:	6895      	ldr	r5, [r2, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005d3c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d40:	1c6a      	adds	r2, r5, #1
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	4829      	ldr	r0, [pc, #164]	; (8005dec <mtx7_execute.lto_priv.135+0xbc>)
 8005d46:	4b2a      	ldr	r3, [pc, #168]	; (8005df0 <mtx7_execute.lto_priv.135+0xc0>)
 8005d48:	f7fc f822 	bl	8001d90 <chThdCreateStatic>
 8005d4c:	4c29      	ldr	r4, [pc, #164]	; (8005df4 <mtx7_execute.lto_priv.135+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005d4e:	4b2a      	ldr	r3, [pc, #168]	; (8005df8 <mtx7_execute.lto_priv.135+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005d50:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005d52:	1caa      	adds	r2, r5, #2
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d5a:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <mtx7_execute.lto_priv.135+0xc0>)
 8005d5c:	4827      	ldr	r0, [pc, #156]	; (8005dfc <mtx7_execute.lto_priv.135+0xcc>)
 8005d5e:	f7fc f817 	bl	8001d90 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005d62:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <mtx7_execute.lto_priv.135+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005d64:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005d66:	1cea      	adds	r2, r5, #3
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d6e:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <mtx7_execute.lto_priv.135+0xc0>)
 8005d70:	4824      	ldr	r0, [pc, #144]	; (8005e04 <mtx7_execute.lto_priv.135+0xd4>)
 8005d72:	f7fc f80d 	bl	8001d90 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005d76:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <mtx7_execute.lto_priv.135+0xd8>)
static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005d78:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005d7a:	1d2a      	adds	r2, r5, #4
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d82:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <mtx7_execute.lto_priv.135+0xc0>)
 8005d84:	4821      	ldr	r0, [pc, #132]	; (8005e0c <mtx7_execute.lto_priv.135+0xdc>)
 8005d86:	f7fc f803 	bl	8001d90 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005d8a:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <mtx7_execute.lto_priv.135+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005d8c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005d8e:	1d6a      	adds	r2, r5, #5
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005d96:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <mtx7_execute.lto_priv.135+0xc0>)
 8005d98:	481e      	ldr	r0, [pc, #120]	; (8005e14 <mtx7_execute.lto_priv.135+0xe4>)
 8005d9a:	f7fb fff9 	bl	8001d90 <chThdCreateStatic>
 8005d9e:	2320      	movs	r3, #32
 8005da0:	6120      	str	r0, [r4, #16]
 8005da2:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005da6:	4c1c      	ldr	r4, [pc, #112]	; (8005e18 <mtx7_execute.lto_priv.135+0xe8>)
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005dac:	bf18      	it	ne
 8005dae:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005db2:	d009      	beq.n	8005dc8 <mtx7_execute.lto_priv.135+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005db4:	681a      	ldr	r2, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005db6:	4618      	mov	r0, r3
 8005db8:	6054      	str	r4, [r2, #4]
 8005dba:	6022      	str	r2, [r4, #0]
 8005dbc:	f7fc f9f0 	bl	80021a0 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005dc0:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8005dc2:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d1f5      	bne.n	8005db4 <mtx7_execute.lto_priv.135+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8005dc8:	f7fb ff3a 	bl	8001c40 <chSchRescheduleS>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcast(&c1);
  test_wait_threads();
 8005dd2:	f7fc fc25 	bl	8002620 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005dd6:	4911      	ldr	r1, [pc, #68]	; (8005e1c <mtx7_execute.lto_priv.135+0xec>)
 8005dd8:	2001      	movs	r0, #1
}
 8005dda:	b003      	add	sp, #12
 8005ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005de0:	f7fb bd9e 	b.w	8001920 <_test_assert_sequence>
 8005de4:	20001e68 	.word	0x20001e68
 8005de8:	08009f90 	.word	0x08009f90
 8005dec:	200017c8 	.word	0x200017c8
 8005df0:	08005cc1 	.word	0x08005cc1
 8005df4:	2000173c 	.word	0x2000173c
 8005df8:	0800a5ac 	.word	0x0800a5ac
 8005dfc:	20001910 	.word	0x20001910
 8005e00:	08009f88 	.word	0x08009f88
 8005e04:	20001a58 	.word	0x20001a58
 8005e08:	08009f80 	.word	0x08009f80
 8005e0c:	20001ba0 	.word	0x20001ba0
 8005e10:	08009f84 	.word	0x08009f84
 8005e14:	20001ce8 	.word	0x20001ce8
 8005e18:	20000cac 	.word	0x20000cac
 8005e1c:	08009f8c 	.word	0x08009f8c

08005e20 <mtx6_execute.lto_priv.133>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005e22:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <mtx6_execute.lto_priv.133+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005e24:	4e2c      	ldr	r6, [pc, #176]	; (8005ed8 <mtx6_execute.lto_priv.133+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	4d2c      	ldr	r5, [pc, #176]	; (8005edc <mtx6_execute.lto_priv.133+0xbc>)
 8005e2a:	689f      	ldr	r7, [r3, #8]
 8005e2c:	492c      	ldr	r1, [pc, #176]	; (8005ee0 <mtx6_execute.lto_priv.133+0xc0>)
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005e2e:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005e30:	1c7a      	adds	r2, r7, #1
 8005e32:	462b      	mov	r3, r5
 8005e34:	9100      	str	r1, [sp, #0]
 8005e36:	4630      	mov	r0, r6
 8005e38:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e3c:	f7fb ffa8 	bl	8001d90 <chThdCreateStatic>
 8005e40:	4c28      	ldr	r4, [pc, #160]	; (8005ee4 <mtx6_execute.lto_priv.133+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005e42:	4929      	ldr	r1, [pc, #164]	; (8005ee8 <mtx6_execute.lto_priv.133+0xc8>)
}

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8005e44:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005e46:	1cba      	adds	r2, r7, #2
 8005e48:	462b      	mov	r3, r5
 8005e4a:	9100      	str	r1, [sp, #0]
 8005e4c:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8005e50:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e54:	f7fb ff9c 	bl	8001d90 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005e58:	4924      	ldr	r1, [pc, #144]	; (8005eec <mtx6_execute.lto_priv.133+0xcc>)

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005e5a:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005e5c:	1cfa      	adds	r2, r7, #3
 8005e5e:	462b      	mov	r3, r5
 8005e60:	9100      	str	r1, [sp, #0]
 8005e62:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8005e66:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e6a:	f7fb ff91 	bl	8001d90 <chThdCreateStatic>
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005e6e:	4920      	ldr	r1, [pc, #128]	; (8005ef0 <mtx6_execute.lto_priv.133+0xd0>)
static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8005e70:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005e72:	1d3a      	adds	r2, r7, #4
 8005e74:	462b      	mov	r3, r5
 8005e76:	9100      	str	r1, [sp, #0]
 8005e78:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8005e7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e80:	f7fb ff86 	bl	8001d90 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005e84:	491b      	ldr	r1, [pc, #108]	; (8005ef4 <mtx6_execute.lto_priv.133+0xd4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8005e86:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8005e88:	462b      	mov	r3, r5
 8005e8a:	9100      	str	r1, [sp, #0]
 8005e8c:	1d7a      	adds	r2, r7, #5
 8005e8e:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8005e92:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005e96:	f7fb ff7b 	bl	8001d90 <chThdCreateStatic>
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	6120      	str	r0, [r4, #16]
 8005e9e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005ea2:	f002 ff85 	bl	8008db0 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8005ea6:	f002 ff83 	bl	8008db0 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8005eaa:	f002 ff81 	bl	8008db0 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8005eae:	f002 ff7f 	bl	8008db0 <chCondSignalI.constprop.51>
  chCondSignalI(&c1);
 8005eb2:	f002 ff7d 	bl	8008db0 <chCondSignalI.constprop.51>
  chSchRescheduleS();
 8005eb6:	f7fb fec3 	bl	8001c40 <chSchRescheduleS>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  test_wait_threads();
 8005ec0:	f7fc fbae 	bl	8002620 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005ec4:	490c      	ldr	r1, [pc, #48]	; (8005ef8 <mtx6_execute.lto_priv.133+0xd8>)
 8005ec6:	2001      	movs	r0, #1
}
 8005ec8:	b003      	add	sp, #12
 8005eca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005ece:	f7fb bd27 	b.w	8001920 <_test_assert_sequence>
 8005ed2:	bf00      	nop
 8005ed4:	20001e68 	.word	0x20001e68
 8005ed8:	200017c8 	.word	0x200017c8
 8005edc:	08005cc1 	.word	0x08005cc1
 8005ee0:	08009f90 	.word	0x08009f90
 8005ee4:	2000173c 	.word	0x2000173c
 8005ee8:	0800a5ac 	.word	0x0800a5ac
 8005eec:	08009f88 	.word	0x08009f88
 8005ef0:	08009f80 	.word	0x08009f80
 8005ef4:	08009f84 	.word	0x08009f84
 8005ef8:	08009f8c 	.word	0x08009f8c
 8005efc:	f3af 8000 	nop.w

08005f00 <mtx5_execute.lto_priv.131>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8005f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005f04:	4d3b      	ldr	r5, [pc, #236]	; (8005ff4 <mtx5_execute.lto_priv.131+0xf4>)
 8005f06:	2320      	movs	r3, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005f08:	69aa      	ldr	r2, [r5, #24]
 8005f0a:	6896      	ldr	r6, [r2, #8]
 8005f0c:	f383 8811 	msr	BASEPRI, r3
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8005f10:	4c39      	ldr	r4, [pc, #228]	; (8005ff8 <mtx5_execute.lto_priv.131+0xf8>)
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8005f12:	2100      	movs	r1, #0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05e      	beq.n	8005fd8 <mtx5_execute.lto_priv.131+0xd8>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f383 8811 	msr	BASEPRI, r3
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8005f20:	2001      	movs	r0, #1
 8005f22:	f7fb fd25 	bl	8001970 <_test_assert>
 8005f26:	4601      	mov	r1, r0
 8005f28:	b108      	cbz	r0, 8005f2e <mtx5_execute.lto_priv.131+0x2e>
 8005f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f2e:	2320      	movs	r3, #32
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	68a3      	ldr	r3, [r4, #8]
 8005f36:	4a30      	ldr	r2, [pc, #192]	; (8005ff8 <mtx5_execute.lto_priv.131+0xf8>)
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d054      	beq.n	8005fe6 <mtx5_execute.lto_priv.131+0xe6>
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f383 8811 	msr	BASEPRI, r3

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8005f44:	2002      	movs	r0, #2
 8005f46:	f7fb fd13 	bl	8001970 <_test_assert>
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1ec      	bne.n	8005f2a <mtx5_execute.lto_priv.131+0x2a>
 8005f50:	2320      	movs	r3, #32
 8005f52:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxUnlockS(&m1);
 8005f56:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005ff8 <mtx5_execute.lto_priv.131+0xf8>
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	f7fc f9e8 	bl	8002330 <chMtxUnlockS>
 8005f60:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8005f64:	6821      	ldr	r1, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8005f66:	2003      	movs	r0, #3
 8005f68:	1b09      	subs	r1, r1, r4
 8005f6a:	fab1 f181 	clz	r1, r1
 8005f6e:	0949      	lsrs	r1, r1, #5
 8005f70:	f7fb fcfe 	bl	8001970 <_test_assert>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d1d8      	bne.n	8005f2a <mtx5_execute.lto_priv.131+0x2a>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8005f78:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8005f7c:	2004      	movs	r0, #4
 8005f7e:	fab1 f181 	clz	r1, r1
 8005f82:	0949      	lsrs	r1, r1, #5
 8005f84:	f7fb fcf4 	bl	8001970 <_test_assert>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d1ce      	bne.n	8005f2a <mtx5_execute.lto_priv.131+0x2a>
 8005f8c:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8005f8e:	2005      	movs	r0, #5
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	1a71      	subs	r1, r6, r1
 8005f94:	fab1 f181 	clz	r1, r1
 8005f98:	0949      	lsrs	r1, r1, #5
 8005f9a:	f7fb fce9 	bl	8001970 <_test_assert>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d1c3      	bne.n	8005f2a <mtx5_execute.lto_priv.131+0x2a>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7fc fa54 	bl	8002450 <chMtxLock>
  chMtxUnlockAll();
 8005fa8:	f7fc f992 	bl	80022d0 <chMtxUnlockAll>
 8005fac:	f8d8 1000 	ldr.w	r1, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8005fb0:	2006      	movs	r0, #6
 8005fb2:	ebc8 0101 	rsb	r1, r8, r1
 8005fb6:	fab1 f181 	clz	r1, r1
 8005fba:	0949      	lsrs	r1, r1, #5
 8005fbc:	f7fb fcd8 	bl	8001970 <_test_assert>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d1b2      	bne.n	8005f2a <mtx5_execute.lto_priv.131+0x2a>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8005fc4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8005fc8:	2007      	movs	r0, #7
 8005fca:	fab1 f181 	clz	r1, r1
}
 8005fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8005fd2:	0949      	lsrs	r1, r1, #5
 8005fd4:	f7fb bccc 	b.w	8001970 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8005fd8:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 8005fda:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8005fde:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8005fe0:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8005fe2:	639c      	str	r4, [r3, #56]	; 0x38
 8005fe4:	e799      	b.n	8005f1a <mtx5_execute.lto_priv.131+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8005fe6:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8005fe8:	6b98      	ldr	r0, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8005fea:	6093      	str	r3, [r2, #8]
  mp->m_next = currp->p_mtxlist;
 8005fec:	60d0      	str	r0, [r2, #12]
  currp->p_mtxlist = mp;
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
 8005ff0:	e7a5      	b.n	8005f3e <mtx5_execute.lto_priv.131+0x3e>
 8005ff2:	bf00      	nop
 8005ff4:	20001e68 	.word	0x20001e68
 8005ff8:	20000820 	.word	0x20000820
 8005ffc:	f3af 8000 	nop.w

08006000 <spicb.lto_priv.77>:
 8006000:	2320      	movs	r3, #32
 8006002:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8006006:	6842      	ldr	r2, [r0, #4]
 8006008:	2301      	movs	r3, #1
 800600a:	8911      	ldrh	r1, [r2, #8]
 800600c:	6852      	ldr	r2, [r2, #4]
 800600e:	408b      	lsls	r3, r1
 8006010:	6113      	str	r3, [r2, #16]
 8006012:	2300      	movs	r3, #0
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	f3af 8000 	nop.w

08006020 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8006020:	2902      	cmp	r1, #2
 8006022:	d006      	beq.n	8006032 <get_descriptor+0x12>
 8006024:	2903      	cmp	r1, #3
 8006026:	d006      	beq.n	8006036 <get_descriptor+0x16>
 8006028:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 800602a:	4806      	ldr	r0, [pc, #24]	; (8006044 <get_descriptor+0x24>)
 800602c:	bf18      	it	ne
 800602e:	2000      	movne	r0, #0
 8006030:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8006032:	4805      	ldr	r0, [pc, #20]	; (8006048 <get_descriptor+0x28>)
 8006034:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8006036:	2a03      	cmp	r2, #3
      return &vcom_strings[dindex];
 8006038:	bf9a      	itte	ls
 800603a:	4b04      	ldrls	r3, [pc, #16]	; (800604c <get_descriptor+0x2c>)
 800603c:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
  }
  return NULL;
 8006040:	2000      	movhi	r0, #0
}
 8006042:	4770      	bx	lr
 8006044:	0800a270 	.word	0x0800a270
 8006048:	0800a390 	.word	0x0800a390
 800604c:	0800a250 	.word	0x0800a250

08006050 <Thread1>:

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 8006050:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006054:	46b0      	mov	r8, r6
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <Thread1+0x38>)
 8006058:	4a0c      	ldr	r2, [pc, #48]	; (800608c <Thread1+0x3c>)
 800605a:	699b      	ldr	r3, [r3, #24]

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 800605c:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 800605e:	4d0c      	ldr	r5, [pc, #48]	; (8006090 <Thread1+0x40>)
 8006060:	4f0c      	ldr	r7, [pc, #48]	; (8006094 <Thread1+0x44>)
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8006062:	619a      	str	r2, [r3, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8006064:	783b      	ldrb	r3, [r7, #0]
    palClearPad(GPIOB, GPIOB_LED);
 8006066:	f8c5 8014 	str.w	r8, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800606a:	2b04      	cmp	r3, #4
 800606c:	bf0c      	ite	eq
 800606e:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
 8006072:	f44f 747a 	movne.w	r4, #1000	; 0x3e8
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 8006076:	4620      	mov	r0, r4
 8006078:	f7fc f872 	bl	8002160 <chThdSleep>
    palSetPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 800607c:	4620      	mov	r0, r4
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
    palSetPad(GPIOB, GPIOB_LED);
 800607e:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8006080:	f7fc f86e 	bl	8002160 <chThdSleep>
 8006084:	e7ee      	b.n	8006064 <Thread1+0x14>
 8006086:	bf00      	nop
 8006088:	20001e68 	.word	0x20001e68
 800608c:	0800a3a0 	.word	0x0800a3a0
 8006090:	40010c00 	.word	0x40010c00
 8006094:	2000121c 	.word	0x2000121c
 8006098:	f3af 8000 	nop.w
 800609c:	f3af 8000 	nop.w

080060a0 <switch_off_callback.lto_priv.79>:
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80060a0:	4903      	ldr	r1, [pc, #12]	; (80060b0 <switch_off_callback.lto_priv.79+0x10>)
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80060a2:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <switch_off_callback.lto_priv.79+0x14>)
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80060a4:	2010      	movs	r0, #16
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80060a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80060aa:	6148      	str	r0, [r1, #20]
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80060ac:	615a      	str	r2, [r3, #20]
 80060ae:	4770      	bx	lr
 80060b0:	40010c00 	.word	0x40010c00
 80060b4:	40010800 	.word	0x40010800
 80060b8:	f3af 8000 	nop.w
 80060bc:	f3af 8000 	nop.w

080060c0 <switch_output_callback.lto_priv.78>:
  GPIOA,
  GPIOA_NSEL,
  SPI_CR1_MSTR | SPI_CR1_BR_0
};

static void switch_output_callback(GPTDriver *gpt_ptr) {
 80060c0:	b508      	push	{r3, lr}
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <switch_output_callback.lto_priv.78+0x24>)
 80060c4:	2210      	movs	r2, #16
 80060c6:	611a      	str	r2, [r3, #16]
 80060c8:	2320      	movs	r3, #32
 80060ca:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <switch_output_callback.lto_priv.78+0x28>)
 80060d0:	2204      	movs	r2, #4
  gpt_lld_start_timer(gptp, interval);
 80060d2:	4618      	mov	r0, r3
 80060d4:	2123      	movs	r1, #35	; 0x23
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80060d6:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
 80060d8:	f7fe fc0a 	bl	80048f0 <gpt_lld_start_timer>
 80060dc:	2300      	movs	r3, #0
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	bd08      	pop	{r3, pc}
 80060e4:	40010c00 	.word	0x40010c00
 80060e8:	20001fbc 	.word	0x20001fbc
 80060ec:	f3af 8000 	nop.w

080060f0 <chprintf.lto_priv.82>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80060f0:	b40e      	push	{r1, r2, r3}
 80060f2:	b500      	push	{lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	ab03      	add	r3, sp, #12
 80060f8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80060fc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80060fe:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8006100:	f7fd fd76 	bl	8003bf0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8006104:	b002      	add	sp, #8
 8006106:	f85d eb04 	ldr.w	lr, [sp], #4
 800610a:	b003      	add	sp, #12
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <silabs_get_part_id>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
 8006110:	b929      	cbnz	r1, 800611e <silabs_get_part_id+0xe>
		chprintf(chp, "Gets part ID, Usage: p \r\n");
		return;
	}
	chprintf(chp, "%4X\r\n",Silabs_Part_ID);
 8006112:	4b04      	ldr	r3, [pc, #16]	; (8006124 <silabs_get_part_id+0x14>)
 8006114:	4904      	ldr	r1, [pc, #16]	; (8006128 <silabs_get_part_id+0x18>)
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	b292      	uxth	r2, r2
 800611a:	f7ff bfe9 	b.w	80060f0 <chprintf.lto_priv.82>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
		chprintf(chp, "Gets part ID, Usage: p \r\n");
 800611e:	4903      	ldr	r1, [pc, #12]	; (800612c <silabs_get_part_id+0x1c>)
 8006120:	f7ff bfe6 	b.w	80060f0 <chprintf.lto_priv.82>
 8006124:	200017b0 	.word	0x200017b0
 8006128:	0800a3c4 	.word	0x0800a3c4
 800612c:	0800a3a8 	.word	0x0800a3a8

08006130 <silabs_send_command>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8006130:	2901      	cmp	r1, #1
 8006132:	d128      	bne.n	8006186 <silabs_send_command+0x56>
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006134:	b538      	push	{r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
 8006136:	6815      	ldr	r5, [r2, #0]
 8006138:	4604      	mov	r4, r0
 800613a:	4628      	mov	r0, r5
 800613c:	f003 f8f8 	bl	8009330 <strlen>
 8006140:	2806      	cmp	r0, #6
 8006142:	d005      	beq.n	8006150 <silabs_send_command+0x20>
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8006144:	4620      	mov	r0, r4
	}
	strncpy(Command_string,argv[0],6);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8006146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 800614a:	4912      	ldr	r1, [pc, #72]	; (8006194 <silabs_send_command+0x64>)
 800614c:	f7ff bfd0 	b.w	80060f0 <chprintf.lto_priv.82>
		return;
	}
	strncpy(Command_string,argv[0],6);
 8006150:	4602      	mov	r2, r0
 8006152:	4629      	mov	r1, r5
 8006154:	4810      	ldr	r0, [pc, #64]	; (8006198 <silabs_send_command+0x68>)
 8006156:	f003 f91b 	bl	8009390 <strncpy>
	Command=3;	
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <silabs_send_command+0x6c>)
 800615c:	2203      	movs	r2, #3
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	2320      	movs	r3, #32
 8006162:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8006166:	480e      	ldr	r0, [pc, #56]	; (80061a0 <silabs_send_command+0x70>)
 8006168:	6883      	ldr	r3, [r0, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	dd0e      	ble.n	800618c <silabs_send_command+0x5c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800616e:	f7fb fd67 	bl	8001c40 <chSchRescheduleS>
 8006172:	2300      	movs	r3, #0
 8006174:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8006178:	480a      	ldr	r0, [pc, #40]	; (80061a4 <silabs_send_command+0x74>)
 800617a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800617e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006182:	f7fb beed 	b.w	8001f60 <chSemWaitTimeout>
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8006186:	4908      	ldr	r1, [pc, #32]	; (80061a8 <silabs_send_command+0x78>)
 8006188:	f7ff bfb2 	b.w	80060f0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800618c:	f7fc fc88 	bl	8002aa0 <chSemSignalI>
 8006190:	e7ed      	b.n	800616e <silabs_send_command+0x3e>
 8006192:	bf00      	nop
 8006194:	0800a3f0 	.word	0x0800a3f0
 8006198:	200017c0 	.word	0x200017c0
 800619c:	20001774 	.word	0x20001774
 80061a0:	20001794 	.word	0x20001794
 80061a4:	200017b4 	.word	0x200017b4
 80061a8:	0800a3cc 	.word	0x0800a3cc
 80061ac:	f3af 8000 	nop.w

080061b0 <silabs_tune_down>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 80061b0:	2900      	cmp	r1, #0
 80061b2:	dd02      	ble.n	80061ba <silabs_tune_down+0xa>
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 80061b4:	4912      	ldr	r1, [pc, #72]	; (8006200 <silabs_tune_down+0x50>)
 80061b6:	f7ff bf9b 	b.w	80060f0 <chprintf.lto_priv.82>
		return;
	}
	Command=2;
 80061ba:	4b12      	ldr	r3, [pc, #72]	; (8006204 <silabs_tune_down+0x54>)
 80061bc:	2202      	movs	r2, #2
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
 80061be:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
		return;
	}
	Command=2;
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	4604      	mov	r4, r0
 80061c4:	2320      	movs	r3, #32
 80061c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80061ca:	480f      	ldr	r0, [pc, #60]	; (8006208 <silabs_tune_down+0x58>)
 80061cc:	6883      	ldr	r3, [r0, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd13      	ble.n	80061fa <silabs_tune_down+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80061d2:	f7fb fd35 	bl	8001c40 <chSchRescheduleS>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80061dc:	480b      	ldr	r0, [pc, #44]	; (800620c <silabs_tune_down+0x5c>)
 80061de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80061e2:	f7fb febd 	bl	8001f60 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80061e6:	b100      	cbz	r0, 80061ea <silabs_tune_down+0x3a>
 80061e8:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <silabs_tune_down+0x60>)
 80061ec:	4620      	mov	r0, r4
	}
}
 80061ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4907      	ldr	r1, [pc, #28]	; (8006214 <silabs_tune_down+0x64>)
 80061f6:	f7ff bf7b 	b.w	80060f0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80061fa:	f7fc fc51 	bl	8002aa0 <chSemSignalI>
 80061fe:	e7e8      	b.n	80061d2 <silabs_tune_down+0x22>
 8006200:	0800a418 	.word	0x0800a418
 8006204:	20001774 	.word	0x20001774
 8006208:	20001794 	.word	0x20001794
 800620c:	200017b4 	.word	0x200017b4
 8006210:	20000ca0 	.word	0x20000ca0
 8006214:	0800a438 	.word	0x0800a438
 8006218:	f3af 8000 	nop.w
 800621c:	f3af 8000 	nop.w

08006220 <silabs_tune_up>:
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8006220:	2900      	cmp	r1, #0
 8006222:	dd02      	ble.n	800622a <silabs_tune_up+0xa>
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 8006224:	4912      	ldr	r1, [pc, #72]	; (8006270 <silabs_tune_up+0x50>)
 8006226:	f7ff bf63 	b.w	80060f0 <chprintf.lto_priv.82>
		return;
	}
	Command=1;
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <silabs_tune_up+0x54>)
 800622c:	2201      	movs	r2, #1
#define VCXO_FREQ 26000000UL
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
 800622e:	b510      	push	{r4, lr}
	if (argc > 0) {
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
		return;
	}
	Command=1;
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	4604      	mov	r4, r0
 8006234:	2320      	movs	r3, #32
 8006236:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800623a:	480f      	ldr	r0, [pc, #60]	; (8006278 <silabs_tune_up+0x58>)
 800623c:	6883      	ldr	r3, [r0, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dd13      	ble.n	800626a <silabs_tune_up+0x4a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8006242:	f7fb fcfd 	bl	8001c40 <chSchRescheduleS>
 8006246:	2300      	movs	r3, #0
 8006248:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 800624c:	480b      	ldr	r0, [pc, #44]	; (800627c <silabs_tune_up+0x5c>)
 800624e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006252:	f7fb fe85 	bl	8001f60 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 8006256:	b100      	cbz	r0, 800625a <silabs_tune_up+0x3a>
 8006258:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <silabs_tune_up+0x60>)
 800625c:	4620      	mov	r0, r4
	}
}
 800625e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4907      	ldr	r1, [pc, #28]	; (8006284 <silabs_tune_up+0x64>)
 8006266:	f7ff bf43 	b.w	80060f0 <chprintf.lto_priv.82>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800626a:	f7fc fc19 	bl	8002aa0 <chSemSignalI>
 800626e:	e7e8      	b.n	8006242 <silabs_tune_up+0x22>
 8006270:	0800a44c 	.word	0x0800a44c
 8006274:	20001774 	.word	0x20001774
 8006278:	20001794 	.word	0x20001794
 800627c:	200017b4 	.word	0x200017b4
 8006280:	20000ca0 	.word	0x20000ca0
 8006284:	0800a438 	.word	0x0800a438
 8006288:	f3af 8000 	nop.w
 800628c:	f3af 8000 	nop.w

08006290 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8006290:	2902      	cmp	r1, #2
 8006292:	d149      	bne.n	8006328 <usb_event+0x98>
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	4606      	mov	r6, r0
 8006298:	460d      	mov	r5, r1
 800629a:	2320      	movs	r3, #32
 800629c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 80062a0:	4c22      	ldr	r4, [pc, #136]	; (800632c <usb_event+0x9c>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 80062a2:	2101      	movs	r1, #1
 80062a4:	4a22      	ldr	r2, [pc, #136]	; (8006330 <usb_event+0xa0>)
 80062a6:	f7ff f8ab 	bl	8005400 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 80062aa:	4630      	mov	r0, r6
 80062ac:	4629      	mov	r1, r5
 80062ae:	4a21      	ldr	r2, [pc, #132]	; (8006334 <usb_event+0xa4>)
 80062b0:	f7ff f8a6 	bl	8005400 <usbInitEndpointI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 80062b4:	69a3      	ldr	r3, [r4, #24]
 80062b6:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80062ba:	f104 070c 	add.w	r7, r4, #12
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80062be:	2500      	movs	r5, #0
 80062c0:	6816      	ldr	r6, [r2, #0]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80062c2:	4638      	mov	r0, r7
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 80062c4:	6223      	str	r3, [r4, #32]
 80062c6:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80062c8:	f06f 0101 	mvn.w	r1, #1
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 80062cc:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 80062ce:	f7fc fc17 	bl	8002b00 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80062d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_counter = chQSizeI(oqp);
 80062d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80062d6:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = chQSizeI(oqp);
 80062d8:	1a9b      	subs	r3, r3, r2
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80062da:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_counter = chQSizeI(oqp);
 80062dc:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 80062de:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80062e2:	f06f 0101 	mvn.w	r1, #1
 80062e6:	f7fc fc0b 	bl	8002b00 <chThdDequeueAllI>
 80062ea:	1d20      	adds	r0, r4, #4
 80062ec:	2101      	movs	r1, #1
 80062ee:	f7fb ffd7 	bl	80022a0 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 80062f2:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80062f6:	2201      	movs	r2, #1
 80062f8:	7959      	ldrb	r1, [r3, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80062fa:	4630      	mov	r0, r6
 80062fc:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8006300:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8006302:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006306:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = TRUE;
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
 8006308:	f8c3 e004 	str.w	lr, [r3, #4]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 800630c:	701a      	strb	r2, [r3, #0]
  osp->mode.queue.rxqueue = iqp;
 800630e:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8006310:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8006312:	f7fe f87d 	bl	8004410 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  usbStartReceiveI(usbp, sdup->config->bulk_out);
 8006316:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 800631a:	4630      	mov	r0, r6
 800631c:	7959      	ldrb	r1, [r3, #5]
 800631e:	f7fe fd77 	bl	8004e10 <usbStartReceiveI>
 8006322:	f385 8811 	msr	BASEPRI, r5
 8006326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	200012c8 	.word	0x200012c8
 8006330:	0800a720 	.word	0x0800a720
 8006334:	0800a1f0 	.word	0x0800a1f0
 8006338:	f3af 8000 	nop.w
 800633c:	f3af 8000 	nop.w

08006340 <cmd_write>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 8006340:	2900      	cmp	r1, #0
 8006342:	dc17      	bgt.n	8006374 <cmd_write+0x34>
    return;
  }
  chThdWait(tp);
}

static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4604      	mov	r4, r0
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 8006348:	4d0c      	ldr	r5, [pc, #48]	; (800637c <cmd_write+0x3c>)
 800634a:	e002      	b.n	8006352 <cmd_write+0x12>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4798      	blx	r3
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	2100      	movs	r1, #0
 8006356:	4620      	mov	r0, r4
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	4798      	blx	r3
 800635c:	3001      	adds	r0, #1
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 800635e:	4908      	ldr	r1, [pc, #32]	; (8006380 <cmd_write+0x40>)
 8006360:	4806      	ldr	r0, [pc, #24]	; (800637c <cmd_write+0x3c>)
 8006362:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8006366:	d0f1      	beq.n	800634c <cmd_write+0xc>
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8006368:	4620      	mov	r0, r4
}
 800636a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 800636e:	4905      	ldr	r1, [pc, #20]	; (8006384 <cmd_write+0x44>)
 8006370:	f7fd be4e 	b.w	8004010 <chprintf.lto_priv.81>
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 8006374:	4904      	ldr	r1, [pc, #16]	; (8006388 <cmd_write+0x48>)
 8006376:	f7fd be4b 	b.w	8004010 <chprintf.lto_priv.81>
 800637a:	bf00      	nop
 800637c:	200012c8 	.word	0x200012c8
 8006380:	20000840 	.word	0x20000840
 8006384:	0800a46c 	.word	0x0800a46c
 8006388:	0800a47c 	.word	0x0800a47c
 800638c:	f3af 8000 	nop.w

08006390 <cmd_test>:

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8006390:	2900      	cmp	r1, #0
 8006392:	dd02      	ble.n	800639a <cmd_test+0xa>
    chprintf(chp, "Usage: test\r\n");
 8006394:	490e      	ldr	r1, [pc, #56]	; (80063d0 <cmd_test+0x40>)
 8006396:	f7fd be3b 	b.w	8004010 <chprintf.lto_priv.81>
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 800639a:	b510      	push	{r4, lr}
 800639c:	4604      	mov	r4, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800639e:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <cmd_test+0x44>)
 80063a0:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80063a2:	699b      	ldr	r3, [r3, #24]
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 80063a4:	2000      	movs	r0, #0
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <cmd_test+0x48>)
 80063ae:	9400      	str	r4, [sp, #0]
 80063b0:	f7fc fb2e 	bl	8002a10 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 80063b4:	b120      	cbz	r0, 80063c0 <cmd_test+0x30>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 80063b6:	b002      	add	sp, #8
 80063b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 80063bc:	f7fc b910 	b.w	80025e0 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80063c0:	4620      	mov	r0, r4
 80063c2:	4906      	ldr	r1, [pc, #24]	; (80063dc <cmd_test+0x4c>)
    return;
  }
  chThdWait(tp);
}
 80063c4:	b002      	add	sp, #8
 80063c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80063ca:	f7fd be21 	b.w	8004010 <chprintf.lto_priv.81>
 80063ce:	bf00      	nop
 80063d0:	0800a48c 	.word	0x0800a48c
 80063d4:	20001e68 	.word	0x20001e68
 80063d8:	08002651 	.word	0x08002651
 80063dc:	0800a49c 	.word	0x0800a49c

080063e0 <cmd_threads>:
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80063e0:	2900      	cmp	r1, #0
 80063e2:	dd02      	ble.n	80063ea <cmd_threads+0xa>
    chprintf(chp, "Usage: threads\r\n");
 80063e4:	4915      	ldr	r1, [pc, #84]	; (800643c <cmd_threads+0x5c>)
 80063e6:	f7fd be13 	b.w	8004010 <chprintf.lto_priv.81>
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80063ea:	b570      	push	{r4, r5, r6, lr}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80063ec:	4914      	ldr	r1, [pc, #80]	; (8006440 <cmd_threads+0x60>)
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80063ee:	b084      	sub	sp, #16
 80063f0:	4605      	mov	r5, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80063f2:	f7fd fe0d 	bl	8004010 <chprintf.lto_priv.81>
 80063f6:	2320      	movs	r3, #32
 80063f8:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <cmd_threads+0x64>)
 80063fe:	2200      	movs	r2, #0
 8006400:	691c      	ldr	r4, [r3, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8006402:	7fa3      	ldrb	r3, [r4, #30]
 8006404:	3301      	adds	r3, #1
 8006406:	77a3      	strb	r3, [r4, #30]
 8006408:	f382 8811 	msr	BASEPRI, r2
 800640c:	4e0e      	ldr	r6, [pc, #56]	; (8006448 <cmd_threads+0x68>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 800640e:	68a2      	ldr	r2, [r4, #8]
 8006410:	68e3      	ldr	r3, [r4, #12]
 8006412:	9200      	str	r2, [sp, #0]
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8006414:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 8006416:	490d      	ldr	r1, [pc, #52]	; (800644c <cmd_threads+0x6c>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 8006418:	3a01      	subs	r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 800641a:	9201      	str	r2, [sp, #4]
 800641c:	7f22      	ldrb	r2, [r4, #28]
 800641e:	4628      	mov	r0, r5
 8006420:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006424:	9202      	str	r2, [sp, #8]
 8006426:	4622      	mov	r2, r4
 8006428:	f7fd fdf2 	bl	8004010 <chprintf.lto_priv.81>
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
 800642c:	4620      	mov	r0, r4
 800642e:	f7fc f8bf 	bl	80025b0 <chRegNextThread>
  } while (tp != NULL);
 8006432:	4604      	mov	r4, r0
 8006434:	2800      	cmp	r0, #0
 8006436:	d1ea      	bne.n	800640e <cmd_threads+0x2e>
}
 8006438:	b004      	add	sp, #16
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	0800a4ac 	.word	0x0800a4ac
 8006440:	0800a4c0 	.word	0x0800a4c0
 8006444:	20001e68 	.word	0x20001e68
 8006448:	0800a6d0 	.word	0x0800a6d0
 800644c:	0800a4e8 	.word	0x0800a4e8

08006450 <cmd_mem>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006450:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006452:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8006454:	b083      	sub	sp, #12
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8006456:	dd04      	ble.n	8006462 <cmd_mem+0x12>
    chprintf(chp, "Usage: mem\r\n");
 8006458:	490f      	ldr	r1, [pc, #60]	; (8006498 <cmd_mem+0x48>)
 800645a:	f7fd fdd9 	bl	8004010 <chprintf.lto_priv.81>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 800645e:	b003      	add	sp, #12
 8006460:	bd30      	pop	{r4, r5, pc}
 8006462:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8006464:	a901      	add	r1, sp, #4
 8006466:	2000      	movs	r0, #0
 8006468:	f7fc f802 	bl	8002470 <chHeapStatus>
 800646c:	4605      	mov	r5, r0
 *
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  return (size_t)(endmem - nextmem);
 800646e:	4a0b      	ldr	r2, [pc, #44]	; (800649c <cmd_mem+0x4c>)
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <cmd_mem+0x50>)
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8006476:	4620      	mov	r0, r4
 8006478:	1ad2      	subs	r2, r2, r3
 800647a:	490a      	ldr	r1, [pc, #40]	; (80064a4 <cmd_mem+0x54>)
 800647c:	f7fd fdc8 	bl	8004010 <chprintf.lto_priv.81>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8006480:	462a      	mov	r2, r5
 8006482:	4620      	mov	r0, r4
 8006484:	4908      	ldr	r1, [pc, #32]	; (80064a8 <cmd_mem+0x58>)
 8006486:	f7fd fdc3 	bl	8004010 <chprintf.lto_priv.81>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 800648a:	4620      	mov	r0, r4
 800648c:	4907      	ldr	r1, [pc, #28]	; (80064ac <cmd_mem+0x5c>)
 800648e:	9a01      	ldr	r2, [sp, #4]
 8006490:	f7fd fdbe 	bl	8004010 <chprintf.lto_priv.81>
}
 8006494:	b003      	add	sp, #12
 8006496:	bd30      	pop	{r4, r5, pc}
 8006498:	0800a504 	.word	0x0800a504
 800649c:	20001530 	.word	0x20001530
 80064a0:	20001218 	.word	0x20001218
 80064a4:	0800a514 	.word	0x0800a514
 80064a8:	0800a534 	.word	0x0800a534
 80064ac:	0800a54c 	.word	0x0800a54c

080064b0 <si446x_spi>:
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 80064b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 80064b4:	2500      	movs	r5, #0
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 80064b6:	b086      	sub	sp, #24
 80064b8:	4617      	mov	r7, r2
 80064ba:	4699      	mov	r9, r3
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 80064bc:	9501      	str	r5, [sp, #4]
 80064be:	9502      	str	r5, [sp, #8]
 80064c0:	9503      	str	r5, [sp, #12]
 80064c2:	9504      	str	r5, [sp, #16]
 80064c4:	9505      	str	r5, [sp, #20]
 80064c6:	2620      	movs	r6, #32
 80064c8:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80064cc:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80065c4 <si446x_spi+0x114>
 80064d0:	2401      	movs	r4, #1
 80064d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064d6:	891a      	ldrh	r2, [r3, #8]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	fa04 f202 	lsl.w	r2, r4, r2
 80064de:	615a      	str	r2, [r3, #20]
 80064e0:	f385 8811 	msr	BASEPRI, r5
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
 80064e4:	aa01      	add	r2, sp, #4
 80064e6:	f002 fe3b 	bl	8009160 <spiExchange.constprop.4>
 80064ea:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80064ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064f2:	891a      	ldrh	r2, [r3, #8]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	4094      	lsls	r4, r2
 80064f8:	611c      	str	r4, [r3, #16]
 80064fa:	f385 8811 	msr	BASEPRI, r5
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 80064fe:	2344      	movs	r3, #68	; 0x44
 8006500:	f88d 3004 	strb.w	r3, [sp, #4]
 8006504:	f386 8811 	msr	BASEPRI, r6
 8006508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800650c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800650e:	f385 8811 	msr	BASEPRI, r5
	uint32_t millis = MS2ST(chVTGetSystemTime());
 8006512:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006516:	b2a4      	uxth	r4, r4
 8006518:	fb03 f404 	mul.w	r4, r3, r4
 800651c:	4d27      	ldr	r5, [pc, #156]	; (80065bc <si446x_spi+0x10c>)
 800651e:	3c01      	subs	r4, #1
 8006520:	fba5 3404 	umull	r3, r4, r5, r4
 8006524:	09a4      	lsrs	r4, r4, #6
 8006526:	3401      	adds	r4, #1
 8006528:	b2a4      	uxth	r4, r4
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 800652a:	4e25      	ldr	r6, [pc, #148]	; (80065c0 <si446x_spi+0x110>)
 800652c:	e017      	b.n	800655e <si446x_spi+0xae>
		chThdSleepMicroseconds(20);
 800652e:	f7fb fe17 	bl	8002160 <chThdSleep>
 8006532:	2320      	movs	r3, #32
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f38a 8811 	msr	BASEPRI, sl
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
 8006542:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006546:	b29b      	uxth	r3, r3
 8006548:	fb02 f303 	mul.w	r3, r2, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	fba5 2303 	umull	r2, r3, r5, r3
 8006552:	099b      	lsrs	r3, r3, #6
 8006554:	3301      	adds	r3, #1
 8006556:	b29b      	uxth	r3, r3
 8006558:	1b1b      	subs	r3, r3, r4
 800655a:	2b0a      	cmp	r3, #10
 800655c:	d809      	bhi.n	8006572 <si446x_spi+0xc2>
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 800655e:	68b3      	ldr	r3, [r6, #8]
		chThdSleepMicroseconds(20);
 8006560:	2001      	movs	r0, #1
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 8006562:	f413 6a00 	ands.w	sl, r3, #2048	; 0x800
 8006566:	d0e2      	beq.n	800652e <si446x_spi+0x7e>
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
 8006568:	b93f      	cbnz	r7, 800657a <si446x_spi+0xca>
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 800656a:	4638      	mov	r0, r7
}
 800656c:	b006      	add	sp, #24
 800656e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
 8006572:	2001      	movs	r0, #1
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
}
 8006574:	b006      	add	sp, #24
 8006576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657a:	2620      	movs	r6, #32
 800657c:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8006580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006584:	4604      	mov	r4, r0
 8006586:	891a      	ldrh	r2, [r3, #8]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	fa00 f202 	lsl.w	r2, r0, r2
 800658e:	615a      	str	r2, [r3, #20]
 8006590:	2500      	movs	r5, #0
 8006592:	f385 8811 	msr	BASEPRI, r5
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
 8006596:	4638      	mov	r0, r7
 8006598:	a901      	add	r1, sp, #4
 800659a:	464a      	mov	r2, r9
 800659c:	f002 fde0 	bl	8009160 <spiExchange.constprop.4>
 80065a0:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80065a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80065a8:	891a      	ldrh	r2, [r3, #8]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	4094      	lsls	r4, r2
 80065ae:	611c      	str	r4, [r3, #16]
 80065b0:	f385 8811 	msr	BASEPRI, r5
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 80065b4:	4628      	mov	r0, r5
}
 80065b6:	b006      	add	sp, #24
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	10624dd3 	.word	0x10624dd3
 80065c0:	40010c00 	.word	0x40010c00
 80065c4:	20001fcc 	.word	0x20001fcc
 80065c8:	f3af 8000 	nop.w
 80065cc:	f3af 8000 	nop.w

080065d0 <notify.lto_priv.74>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	f3af 8000 	nop.w
 80065d8:	f3af 8000 	nop.w
 80065dc:	f3af 8000 	nop.w

080065e0 <queues2_setup.lto_priv.159>:
 * This test case tests sysnchronos and asynchronous operations on an
 * @p OutputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues2_setup(void) {
 80065e0:	b430      	push	{r4, r5}
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <queues2_setup.lto_priv.159+0x24>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80065e4:	4b08      	ldr	r3, [pc, #32]	; (8006608 <queues2_setup.lto_priv.159+0x28>)
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80065e6:	4809      	ldr	r0, [pc, #36]	; (800660c <queues2_setup.lto_priv.159+0x2c>)
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80065e8:	1d15      	adds	r5, r2, #4
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80065ea:	2404      	movs	r4, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 80065ec:	2100      	movs	r1, #0
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80065ee:	611d      	str	r5, [r3, #16]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80065f0:	609c      	str	r4, [r3, #8]
 80065f2:	605b      	str	r3, [r3, #4]
 80065f4:	601b      	str	r3, [r3, #0]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80065f6:	615a      	str	r2, [r3, #20]
 80065f8:	619a      	str	r2, [r3, #24]
 80065fa:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80065fc:	61d8      	str	r0, [r3, #28]
  oqp->q_link = link;
 80065fe:	6219      	str	r1, [r3, #32]

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 8006600:	bc30      	pop	{r4, r5}
 8006602:	4770      	bx	lr
 8006604:	200017c8 	.word	0x200017c8
 8006608:	20000cc0 	.word	0x20000cc0
 800660c:	080065d1 	.word	0x080065d1

08006610 <queues1_setup.lto_priv.157>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <queues1_setup.lto_priv.157+0x24>)
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <queues1_setup.lto_priv.157+0x28>)
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8006614:	4809      	ldr	r0, [pc, #36]	; (800663c <queues1_setup.lto_priv.157+0x2c>)
 * This test case tests sysnchronos and asynchronous operations on an
 * @p InputQueue object including timeouts. The queue state must remain
 * consistent through the whole test.
 */

static void queues1_setup(void) {
 8006616:	b410      	push	{r4}
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8006618:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 800661a:	1d14      	adds	r4, r2, #4
 800661c:	611c      	str	r4, [r3, #16]
 800661e:	605b      	str	r3, [r3, #4]
 8006620:	601b      	str	r3, [r3, #0]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8006622:	615a      	str	r2, [r3, #20]
 8006624:	619a      	str	r2, [r3, #24]
 8006626:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8006628:	61d8      	str	r0, [r3, #28]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800662a:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 800662c:	6219      	str	r1, [r3, #32]

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}
 800662e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	200017c8 	.word	0x200017c8
 8006638:	20000c50 	.word	0x20000c50
 800663c:	080065d1 	.word	0x080065d1

08006640 <dyn3_setup.lto_priv.155>:
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8006640:	4909      	ldr	r1, [pc, #36]	; (8006668 <dyn3_setup.lto_priv.155+0x28>)
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8006642:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006644:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8006646:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800664a:	4b08      	ldr	r3, [pc, #32]	; (800666c <dyn3_setup.lto_priv.155+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800664c:	e881 0014 	stmia.w	r1, {r2, r4}
 8006650:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 8006654:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8006656:	6099      	str	r1, [r3, #8]
 8006658:	6158      	str	r0, [r3, #20]
 800665a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800665c:	601a      	str	r2, [r3, #0]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800665e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8006660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	200017c8 	.word	0x200017c8
 800666c:	200016c8 	.word	0x200016c8

08006670 <dyn2_setup.lto_priv.153>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <dyn2_setup.lto_priv.153+0x10>)
 8006672:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 8006674:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006678:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800667a:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 800667c:	609a      	str	r2, [r3, #8]
 800667e:	4770      	bx	lr
 8006680:	20002010 	.word	0x20002010
 8006684:	f3af 8000 	nop.w
 8006688:	f3af 8000 	nop.w
 800668c:	f3af 8000 	nop.w

08006690 <dyn1_setup.lto_priv.151>:
  heapp->h_free.h.u.next = hp = buf;
 8006690:	4909      	ldr	r1, [pc, #36]	; (80066b8 <dyn1_setup.lto_priv.151+0x28>)
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8006692:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006694:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8006696:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <dyn1_setup.lto_priv.151+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 800669c:	e881 0014 	stmia.w	r1, {r2, r4}
 80066a0:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 80066a4:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 80066a6:	6099      	str	r1, [r3, #8]
 80066a8:	6158      	str	r0, [r3, #20]
 80066aa:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 80066b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	200017c8 	.word	0x200017c8
 80066bc:	200016c8 	.word	0x200016c8

080066c0 <null_provider>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 80066c0:	2000      	movs	r0, #0
 80066c2:	4770      	bx	lr
 80066c4:	f3af 8000 	nop.w
 80066c8:	f3af 8000 	nop.w
 80066cc:	f3af 8000 	nop.w

080066d0 <pools1_setup.lto_priv.149>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <pools1_setup.lto_priv.149+0x10>)
 80066d2:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80066d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80066d8:	6059      	str	r1, [r3, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80066da:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80066dc:	609a      	str	r2, [r3, #8]
 80066de:	4770      	bx	lr
 80066e0:	20000c44 	.word	0x20000c44
 80066e4:	f3af 8000 	nop.w
 80066e8:	f3af 8000 	nop.w
 80066ec:	f3af 8000 	nop.w

080066f0 <heap1_setup.lto_priv.147>:
  heapp->h_free.h.u.next = hp = buf;
 80066f0:	4909      	ldr	r1, [pc, #36]	; (8006718 <heap1_setup.lto_priv.147+0x28>)
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 80066f2:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80066f4:	2200      	movs	r2, #0
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80066f6:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <heap1_setup.lto_priv.147+0x2c>)
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80066fc:	e881 0014 	stmia.w	r1, {r2, r4}
 8006700:	f103 0010 	add.w	r0, r3, #16

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
  heapp->h_free.h.size = 0;
 8006704:	60da      	str	r2, [r3, #12]
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
  heapp->h_free.h.u.next = hp = buf;
 8006706:	6099      	str	r1, [r3, #8]
 8006708:	6158      	str	r0, [r3, #20]
 800670a:	6118      	str	r0, [r3, #16]
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	619a      	str	r2, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	200017c8 	.word	0x200017c8
 800671c:	200016a8 	.word	0x200016a8

08006720 <thread1>:

static msg_t thread1(void *p) {
 8006720:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8006722:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006726:	4802      	ldr	r0, [pc, #8]	; (8006730 <thread1+0x10>)
 8006728:	f7fb fcf2 	bl	8002110 <chIQGetTimeout>
  return 0;
}
 800672c:	2000      	movs	r0, #0
 800672e:	bd08      	pop	{r3, pc}
 8006730:	20000c50 	.word	0x20000c50
 8006734:	f3af 8000 	nop.w
 8006738:	f3af 8000 	nop.w
 800673c:	f3af 8000 	nop.w

08006740 <thread.lto_priv.72>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 8006740:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8006742:	7800      	ldrb	r0, [r0, #0]
 8006744:	f7fb f92c 	bl	80019a0 <test_emit_token>
  return 0;
}
 8006748:	2000      	movs	r0, #0
 800674a:	bd08      	pop	{r3, pc}
 800674c:	f3af 8000 	nop.w

08006750 <queues1_execute.lto_priv.158>:

static void queues1_execute(void) {
 8006750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006752:	2420      	movs	r4, #32
 8006754:	b083      	sub	sp, #12
 8006756:	f384 8811 	msr	BASEPRI, r4
 800675a:	4b90      	ldr	r3, [pc, #576]	; (800699c <queues1_execute.lto_priv.158+0x24c>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 800675c:	2001      	movs	r0, #1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 800675e:	6899      	ldr	r1, [r3, #8]
 8006760:	fab1 f181 	clz	r1, r1
 8006764:	0949      	lsrs	r1, r1, #5
 8006766:	f7fb f903 	bl	8001970 <_test_assert>
 800676a:	4606      	mov	r6, r0
 800676c:	b9e8      	cbnz	r0, 80067aa <queues1_execute.lto_priv.158+0x5a>
 800676e:	f380 8811 	msr	BASEPRI, r0
 8006772:	f384 8811 	msr	BASEPRI, r4
 8006776:	2441      	movs	r4, #65	; 0x41

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8006778:	4d88      	ldr	r5, [pc, #544]	; (800699c <queues1_execute.lto_priv.158+0x24c>)
 800677a:	4621      	mov	r1, r4
 800677c:	3401      	adds	r4, #1
 800677e:	4628      	mov	r0, r5
 8006780:	b2e4      	uxtb	r4, r4
 8006782:	f7fb fd25 	bl	80021d0 <chIQPutI>
  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8006786:	2c45      	cmp	r4, #69	; 0x45
 8006788:	d1f6      	bne.n	8006778 <queues1_execute.lto_priv.158+0x28>
 800678a:	2300      	movs	r3, #0
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	2320      	movs	r3, #32
 8006792:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8006796:	69aa      	ldr	r2, [r5, #24]
 8006798:	696b      	ldr	r3, [r5, #20]
 800679a:	429a      	cmp	r2, r3
 800679c:	d038      	beq.n	8006810 <queues1_execute.lto_priv.158+0xc0>
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 800679e:	4631      	mov	r1, r6
 80067a0:	2002      	movs	r0, #2
 80067a2:	f7fb f8e5 	bl	8001970 <_test_assert>
 80067a6:	4604      	mov	r4, r0
 80067a8:	b120      	cbz	r0, 80067b4 <queues1_execute.lto_priv.158+0x64>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80067b0:	b003      	add	sp, #12
 80067b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b4:	f380 8811 	msr	BASEPRI, r0
 80067b8:	2320      	movs	r3, #32
 80067ba:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 80067be:	4877      	ldr	r0, [pc, #476]	; (800699c <queues1_execute.lto_priv.158+0x24c>)
 80067c0:	4621      	mov	r1, r4
 80067c2:	f7fb fd05 	bl	80021d0 <chIQPutI>
 80067c6:	3004      	adds	r0, #4
 80067c8:	bf14      	ite	ne
 80067ca:	2100      	movne	r1, #0
 80067cc:	2101      	moveq	r1, #1
 80067ce:	2003      	movs	r0, #3
 80067d0:	f7fb f8ce 	bl	8001970 <_test_assert>
 80067d4:	b9c0      	cbnz	r0, 8006808 <queues1_execute.lto_priv.158+0xb8>
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	2404      	movs	r4, #4
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80067dc:	4d6f      	ldr	r5, [pc, #444]	; (800699c <queues1_execute.lto_priv.158+0x24c>)
 80067de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7fb fc94 	bl	8002110 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 80067e8:	b2c0      	uxtb	r0, r0
 80067ea:	f7fb f8d9 	bl	80019a0 <test_emit_token>
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 80067ee:	3c01      	subs	r4, #1
 80067f0:	d1f4      	bne.n	80067dc <queues1_execute.lto_priv.158+0x8c>
 80067f2:	2620      	movs	r6, #32
 80067f4:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 80067f8:	68a9      	ldr	r1, [r5, #8]
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 80067fa:	2004      	movs	r0, #4
 80067fc:	fab1 f181 	clz	r1, r1
 8006800:	0949      	lsrs	r1, r1, #5
 8006802:	f7fb f8b5 	bl	8001970 <_test_assert>
 8006806:	b140      	cbz	r0, 800681a <queues1_execute.lto_priv.158+0xca>
 8006808:	f384 8811 	msr	BASEPRI, r4
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 800680c:	b003      	add	sp, #12
 800680e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8006810:	68ae      	ldr	r6, [r5, #8]
 8006812:	3600      	adds	r6, #0
 8006814:	bf18      	it	ne
 8006816:	2601      	movne	r6, #1
 8006818:	e7c1      	b.n	800679e <queues1_execute.lto_priv.158+0x4e>
 800681a:	f384 8811 	msr	BASEPRI, r4

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");
 800681e:	2005      	movs	r0, #5
 8006820:	495f      	ldr	r1, [pc, #380]	; (80069a0 <queues1_execute.lto_priv.158+0x250>)
 8006822:	f7fb f87d 	bl	8001920 <_test_assert_sequence>
 8006826:	2800      	cmp	r0, #0
 8006828:	d1c2      	bne.n	80067b0 <queues1_execute.lto_priv.158+0x60>
 800682a:	f386 8811 	msr	BASEPRI, r6
 800682e:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8006830:	4d5a      	ldr	r5, [pc, #360]	; (800699c <queues1_execute.lto_priv.158+0x24c>)
 8006832:	4621      	mov	r1, r4
 8006834:	3401      	adds	r4, #1
 8006836:	4628      	mov	r0, r5
 8006838:	b2e4      	uxtb	r4, r4
 800683a:	f7fb fcc9 	bl	80021d0 <chIQPutI>
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
  test_assert_sequence(5, "ABCD");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 800683e:	2c45      	cmp	r4, #69	; 0x45
 8006840:	d1f6      	bne.n	8006830 <queues1_execute.lto_priv.158+0xe0>
 8006842:	2300      	movs	r3, #0
 8006844:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8006848:	4956      	ldr	r1, [pc, #344]	; (80069a4 <queues1_execute.lto_priv.158+0x254>)
 800684a:	2208      	movs	r2, #8
 800684c:	4628      	mov	r0, r5
 800684e:	f7fb fc1f 	bl	8002090 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8006852:	f1a0 0104 	sub.w	r1, r0, #4
 8006856:	fab1 f181 	clz	r1, r1
 800685a:	2006      	movs	r0, #6
 800685c:	0949      	lsrs	r1, r1, #5
 800685e:	f7fb f887 	bl	8001970 <_test_assert>
 8006862:	4604      	mov	r4, r0
 8006864:	2800      	cmp	r0, #0
 8006866:	d1a3      	bne.n	80067b0 <queues1_execute.lto_priv.158+0x60>
 8006868:	2620      	movs	r6, #32
 800686a:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 800686e:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8006870:	2007      	movs	r0, #7
 8006872:	fab1 f181 	clz	r1, r1
 8006876:	0949      	lsrs	r1, r1, #5
 8006878:	f7fb f87a 	bl	8001970 <_test_assert>
 800687c:	2800      	cmp	r0, #0
 800687e:	d1c3      	bne.n	8006808 <queues1_execute.lto_priv.158+0xb8>
 8006880:	f380 8811 	msr	BASEPRI, r0
 8006884:	f386 8811 	msr	BASEPRI, r6
 8006888:	2441      	movs	r4, #65	; 0x41

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 800688a:	4d44      	ldr	r5, [pc, #272]	; (800699c <queues1_execute.lto_priv.158+0x24c>)
 800688c:	4621      	mov	r1, r4
 800688e:	3401      	adds	r4, #1
 8006890:	4628      	mov	r0, r5
 8006892:	b2e4      	uxtb	r4, r4
 8006894:	f7fb fc9c 	bl	80021d0 <chIQPutI>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8006898:	2c45      	cmp	r4, #69	; 0x45
 800689a:	d1f6      	bne.n	800688a <queues1_execute.lto_priv.158+0x13a>
 800689c:	2300      	movs	r3, #0
 800689e:	f383 8811 	msr	BASEPRI, r3
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80068a2:	4940      	ldr	r1, [pc, #256]	; (80069a4 <queues1_execute.lto_priv.158+0x254>)
 80068a4:	4628      	mov	r0, r5
 80068a6:	2202      	movs	r2, #2
 80068a8:	f7fb fbf2 	bl	8002090 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80068ac:	f1a0 0102 	sub.w	r1, r0, #2
 80068b0:	fab1 f181 	clz	r1, r1
 80068b4:	2008      	movs	r0, #8
 80068b6:	0949      	lsrs	r1, r1, #5
 80068b8:	f7fb f85a 	bl	8001970 <_test_assert>
 80068bc:	2800      	cmp	r0, #0
 80068be:	f47f af77 	bne.w	80067b0 <queues1_execute.lto_priv.158+0x60>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80068c2:	4603      	mov	r3, r0
 80068c4:	4937      	ldr	r1, [pc, #220]	; (80069a4 <queues1_execute.lto_priv.158+0x254>)
 80068c6:	2202      	movs	r2, #2
 80068c8:	4628      	mov	r0, r5
 80068ca:	f7fb fbe1 	bl	8002090 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80068ce:	f1a0 0102 	sub.w	r1, r0, #2
 80068d2:	fab1 f181 	clz	r1, r1
 80068d6:	2009      	movs	r0, #9
 80068d8:	0949      	lsrs	r1, r1, #5
 80068da:	f7fb f849 	bl	8001970 <_test_assert>
 80068de:	4606      	mov	r6, r0
 80068e0:	2800      	cmp	r0, #0
 80068e2:	f47f af65 	bne.w	80067b0 <queues1_execute.lto_priv.158+0x60>
 80068e6:	2720      	movs	r7, #32
 80068e8:	f387 8811 	msr	BASEPRI, r7
 80068ec:	68a9      	ldr	r1, [r5, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 80068ee:	200a      	movs	r0, #10
 80068f0:	fab1 f181 	clz	r1, r1
 80068f4:	0949      	lsrs	r1, r1, #5
 80068f6:	f7fb f83b 	bl	8001970 <_test_assert>
 80068fa:	4604      	mov	r4, r0
 80068fc:	b110      	cbz	r0, 8006904 <queues1_execute.lto_priv.158+0x1b4>
 80068fe:	f386 8811 	msr	BASEPRI, r6
 8006902:	e755      	b.n	80067b0 <queues1_execute.lto_priv.158+0x60>
 8006904:	f380 8811 	msr	BASEPRI, r0
 8006908:	f387 8811 	msr	BASEPRI, r7

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 800690c:	4621      	mov	r1, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f7fb fc5e 	bl	80021d0 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8006914:	68eb      	ldr	r3, [r5, #12]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8006916:	4628      	mov	r0, r5
 8006918:	f06f 0101 	mvn.w	r1, #1
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 800691c:	60ac      	str	r4, [r5, #8]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 800691e:	616b      	str	r3, [r5, #20]
 8006920:	61ab      	str	r3, [r5, #24]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8006922:	f7fc f8ed 	bl	8002b00 <chThdDequeueAllI>
 8006926:	f384 8811 	msr	BASEPRI, r4
 800692a:	f387 8811 	msr	BASEPRI, r7
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 800692e:	68a9      	ldr	r1, [r5, #8]
 8006930:	200b      	movs	r0, #11
 8006932:	fab1 f181 	clz	r1, r1
 8006936:	0949      	lsrs	r1, r1, #5
 8006938:	f7fb f81a 	bl	8001970 <_test_assert>
 800693c:	4606      	mov	r6, r0
 800693e:	2800      	cmp	r0, #0
 8006940:	f47f af62 	bne.w	8006808 <queues1_execute.lto_priv.158+0xb8>
 8006944:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006948:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <queues1_execute.lto_priv.158+0x258>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 800694a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	4816      	ldr	r0, [pc, #88]	; (80069ac <queues1_execute.lto_priv.158+0x25c>)
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <queues1_execute.lto_priv.158+0x260>)
 8006956:	3201      	adds	r2, #1
 8006958:	9600      	str	r6, [sp, #0]
 800695a:	f7fb fa19 	bl	8001d90 <chThdCreateStatic>
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <queues1_execute.lto_priv.158+0x264>)
 8006960:	6018      	str	r0, [r3, #0]
 8006962:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8006966:	68a9      	ldr	r1, [r5, #8]
 8006968:	200c      	movs	r0, #12
 800696a:	fab1 f181 	clz	r1, r1
 800696e:	0949      	lsrs	r1, r1, #5
 8006970:	f7fa fffe 	bl	8001970 <_test_assert>
 8006974:	2800      	cmp	r0, #0
 8006976:	d1c2      	bne.n	80068fe <queues1_execute.lto_priv.158+0x1ae>
 8006978:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 800697c:	f7fb fe50 	bl	8002620 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8006980:	4628      	mov	r0, r5
 8006982:	210a      	movs	r1, #10
 8006984:	f7fb fbc4 	bl	8002110 <chIQGetTimeout>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	4259      	negs	r1, r3
 800698c:	4159      	adcs	r1, r3
 800698e:	200d      	movs	r0, #13
}
 8006990:	b003      	add	sp, #12
 8006992:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8006996:	f7fa bfeb 	b.w	8001970 <_test_assert>
 800699a:	bf00      	nop
 800699c:	20000c50 	.word	0x20000c50
 80069a0:	0800a750 	.word	0x0800a750
 80069a4:	20001910 	.word	0x20001910
 80069a8:	20001e68 	.word	0x20001e68
 80069ac:	200017c8 	.word	0x200017c8
 80069b0:	08006721 	.word	0x08006721
 80069b4:	2000173c 	.word	0x2000173c
 80069b8:	f3af 8000 	nop.w
 80069bc:	f3af 8000 	nop.w

080069c0 <regfind>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4605      	mov	r5, r0
 80069c4:	2320      	movs	r3, #32
 80069c6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <regfind+0x34>)
 80069cc:	2400      	movs	r4, #0
 80069ce:	691b      	ldr	r3, [r3, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 80069d0:	7f9a      	ldrb	r2, [r3, #30]
 80069d2:	3201      	adds	r2, #1
 80069d4:	779a      	strb	r2, [r3, #30]
 80069d6:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 80069da:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 80069dc:	42ab      	cmp	r3, r5
 80069de:	bf08      	it	eq
 80069e0:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 80069e4:	f7fb fde4 	bl	80025b0 <chRegNextThread>
  } while (ftp != NULL);
 80069e8:	4603      	mov	r3, r0
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d1f5      	bne.n	80069da <regfind+0x1a>
  return found;
}
 80069ee:	4620      	mov	r0, r4
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
 80069f2:	bf00      	nop
 80069f4:	20001e68 	.word	0x20001e68
 80069f8:	f3af 8000 	nop.w
 80069fc:	f3af 8000 	nop.w

08006a00 <dyn3_execute.lto_priv.156>:
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8006a00:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006a02:	4a4a      	ldr	r2, [pc, #296]	; (8006b2c <dyn3_execute.lto_priv.156+0x12c>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8006a04:	4b4a      	ldr	r3, [pc, #296]	; (8006b30 <dyn3_execute.lto_priv.156+0x130>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006a06:	6992      	ldr	r2, [r2, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8006a08:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8006a0a:	6892      	ldr	r2, [r2, #8]
 8006a0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4848      	ldr	r0, [pc, #288]	; (8006b34 <dyn3_execute.lto_priv.156+0x134>)
 8006a14:	3a01      	subs	r2, #1
 8006a16:	4b48      	ldr	r3, [pc, #288]	; (8006b38 <dyn3_execute.lto_priv.156+0x138>)
 8006a18:	f7fb fffa 	bl	8002a10 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8006a1c:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8006a1e:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8006a20:	2001      	movs	r0, #1
 8006a22:	1a09      	subs	r1, r1, r0
 8006a24:	fab1 f181 	clz	r1, r1
 8006a28:	0949      	lsrs	r1, r1, #5
 8006a2a:	f7fa ffa1 	bl	8001970 <_test_assert>
 8006a2e:	b108      	cbz	r0, 8006a34 <dyn3_execute.lto_priv.156+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8006a30:	b002      	add	sp, #8
 8006a32:	bd10      	pop	{r4, pc}
 8006a34:	2320      	movs	r3, #32
 8006a36:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 8006a3a:	7fa3      	ldrb	r3, [r4, #30]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	77a3      	strb	r3, [r4, #30]
 8006a40:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8006a44:	7fa1      	ldrb	r1, [r4, #30]
 8006a46:	2002      	movs	r0, #2
 8006a48:	1a09      	subs	r1, r1, r0
 8006a4a:	fab1 f181 	clz	r1, r1
 8006a4e:	0949      	lsrs	r1, r1, #5
 8006a50:	f7fa ff8e 	bl	8001970 <_test_assert>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d1eb      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  chThdRelease(tp);
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7fb fd79 	bl	8002550 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8006a5e:	7fa1      	ldrb	r1, [r4, #30]
 8006a60:	2003      	movs	r0, #3
 8006a62:	f1a1 0101 	sub.w	r1, r1, #1
 8006a66:	fab1 f181 	clz	r1, r1
 8006a6a:	0949      	lsrs	r1, r1, #5
 8006a6c:	f7fa ff80 	bl	8001970 <_test_assert>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d1dd      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7ff ffa3 	bl	80069c0 <regfind>
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	2004      	movs	r0, #4
 8006a7e:	f7fa ff77 	bl	8001970 <_test_assert>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d1d4      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff ff9a 	bl	80069c0 <regfind>
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	2005      	movs	r0, #5
 8006a90:	f7fa ff6e 	bl	8001970 <_test_assert>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d1cb      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7fb fd59 	bl	8002550 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8006a9e:	7fa1      	ldrb	r1, [r4, #30]
 8006aa0:	2006      	movs	r0, #6
 8006aa2:	fab1 f181 	clz	r1, r1
 8006aa6:	0949      	lsrs	r1, r1, #5
 8006aa8:	f7fa ff62 	bl	8001970 <_test_assert>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d1bf      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8006ab0:	7f21      	ldrb	r1, [r4, #28]
 8006ab2:	2007      	movs	r0, #7
 8006ab4:	fab1 f181 	clz	r1, r1
 8006ab8:	0949      	lsrs	r1, r1, #5
 8006aba:	f7fa ff59 	bl	8001970 <_test_assert>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d1b6      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff ff7c 	bl	80069c0 <regfind>
 8006ac8:	4601      	mov	r1, r0
 8006aca:	2008      	movs	r0, #8
 8006acc:	f7fa ff50 	bl	8001970 <_test_assert>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d1ad      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f7ff ff73 	bl	80069c0 <regfind>
 8006ada:	4601      	mov	r1, r0
 8006adc:	2009      	movs	r0, #9
 8006ade:	f7fa ff47 	bl	8001970 <_test_assert>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d1a4      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8006ae6:	2064      	movs	r0, #100	; 0x64
 8006ae8:	f7fb fb3a 	bl	8002160 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8006aec:	7f21      	ldrb	r1, [r4, #28]
 8006aee:	200a      	movs	r0, #10
 8006af0:	f1a1 030f 	sub.w	r3, r1, #15
 8006af4:	4259      	negs	r1, r3
 8006af6:	4159      	adcs	r1, r3
 8006af8:	f7fa ff3a 	bl	8001970 <_test_assert>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d197      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff ff5d 	bl	80069c0 <regfind>
 8006b06:	4601      	mov	r1, r0
 8006b08:	200b      	movs	r0, #11
 8006b0a:	f7fa ff31 	bl	8001970 <_test_assert>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d18e      	bne.n	8006a30 <dyn3_execute.lto_priv.156+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7ff ff54 	bl	80069c0 <regfind>
 8006b18:	f080 0101 	eor.w	r1, r0, #1
 8006b1c:	b2c9      	uxtb	r1, r1
 8006b1e:	200c      	movs	r0, #12
}
 8006b20:	b002      	add	sp, #8
 8006b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8006b26:	f7fa bf23 	b.w	8001970 <_test_assert>
 8006b2a:	bf00      	nop
 8006b2c:	20001e68 	.word	0x20001e68
 8006b30:	08009f84 	.word	0x08009f84
 8006b34:	200016c8 	.word	0x200016c8
 8006b38:	08006741 	.word	0x08006741
 8006b3c:	f3af 8000 	nop.w

08006b40 <pools1_execute.lto_priv.150>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4b2f      	ldr	r3, [pc, #188]	; (8006c00 <pools1_execute.lto_priv.150+0xc0>)
 8006b44:	4c2f      	ldr	r4, [pc, #188]	; (8006c04 <pools1_execute.lto_priv.150+0xc4>)
 8006b46:	2205      	movs	r2, #5
 8006b48:	2520      	movs	r5, #32
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	f385 8811 	msr	BASEPRI, r5
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006b50:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8006b52:	6023      	str	r3, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006b54:	6019      	str	r1, [r3, #0]
 8006b56:	f380 8811 	msr	BASEPRI, r0

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8006b5a:	6861      	ldr	r1, [r4, #4]
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 8006b5c:	3a01      	subs	r2, #1
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8006b5e:	440b      	add	r3, r1
 */
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
 8006b60:	d1f4      	bne.n	8006b4c <pools1_execute.lto_priv.150+0xc>
 8006b62:	2505      	movs	r5, #5
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8006b64:	4827      	ldr	r0, [pc, #156]	; (8006c04 <pools1_execute.lto_priv.150+0xc4>)
 8006b66:	f7fa ff93 	bl	8001a90 <chPoolAlloc>
 8006b6a:	1c01      	adds	r1, r0, #0
 8006b6c:	bf18      	it	ne
 8006b6e:	2101      	movne	r1, #1
 8006b70:	2001      	movs	r0, #1
 8006b72:	f7fa fefd 	bl	8001970 <_test_assert>
 8006b76:	bb90      	cbnz	r0, 8006bde <pools1_execute.lto_priv.150+0x9e>

  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006b78:	3d01      	subs	r5, #1
 8006b7a:	d1f3      	bne.n	8006b64 <pools1_execute.lto_priv.150+0x24>
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006b7c:	4821      	ldr	r0, [pc, #132]	; (8006c04 <pools1_execute.lto_priv.150+0xc4>)
 8006b7e:	f7fa ff87 	bl	8001a90 <chPoolAlloc>
 8006b82:	fab0 f180 	clz	r1, r0
 8006b86:	2002      	movs	r0, #2
 8006b88:	0949      	lsrs	r1, r1, #5
 8006b8a:	f7fa fef1 	bl	8001970 <_test_assert>
 8006b8e:	bb30      	cbnz	r0, 8006bde <pools1_execute.lto_priv.150+0x9e>
 8006b90:	4b1d      	ldr	r3, [pc, #116]	; (8006c08 <pools1_execute.lto_priv.150+0xc8>)
 8006b92:	2620      	movs	r6, #32
 8006b94:	f103 0014 	add.w	r0, r3, #20

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);
 8006b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b9c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	6011      	str	r1, [r2, #0]
  mp->mp_next = php;
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	f385 8811 	msr	BASEPRI, r5

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006baa:	4283      	cmp	r3, r0
 8006bac:	d1f4      	bne.n	8006b98 <pools1_execute.lto_priv.150+0x58>
 8006bae:	2405      	movs	r4, #5
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 8006bb0:	4d14      	ldr	r5, [pc, #80]	; (8006c04 <pools1_execute.lto_priv.150+0xc4>)
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f7fa ff6c 	bl	8001a90 <chPoolAlloc>
 8006bb8:	1c01      	adds	r1, r0, #0
 8006bba:	bf18      	it	ne
 8006bbc:	2101      	movne	r1, #1
 8006bbe:	2003      	movs	r0, #3
 8006bc0:	f7fa fed6 	bl	8001970 <_test_assert>
 8006bc4:	b958      	cbnz	r0, 8006bde <pools1_execute.lto_priv.150+0x9e>
  /* Adding the WAs to the pool, one by one this time.*/
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
 8006bc6:	3c01      	subs	r4, #1
 8006bc8:	d1f2      	bne.n	8006bb0 <pools1_execute.lto_priv.150+0x70>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f7fa ff60 	bl	8001a90 <chPoolAlloc>
 8006bd0:	fab0 f180 	clz	r1, r0
 8006bd4:	2004      	movs	r0, #4
 8006bd6:	0949      	lsrs	r1, r1, #5
 8006bd8:	f7fa feca 	bl	8001970 <_test_assert>
 8006bdc:	b100      	cbz	r0, 8006be0 <pools1_execute.lto_priv.150+0xa0>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8006be0:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <pools1_execute.lto_priv.150+0xcc>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8006be2:	2310      	movs	r3, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006be4:	4628      	mov	r0, r5
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8006be6:	602c      	str	r4, [r5, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 8006be8:	60aa      	str	r2, [r5, #8]
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 8006bea:	606b      	str	r3, [r5, #4]
 8006bec:	f7fa ff50 	bl	8001a90 <chPoolAlloc>
}
 8006bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 8006bf4:	fab0 f180 	clz	r1, r0
 8006bf8:	2005      	movs	r0, #5
 8006bfa:	0949      	lsrs	r1, r1, #5
 8006bfc:	f7fa beb8 	b.w	8001970 <_test_assert>
 8006c00:	200017c8 	.word	0x200017c8
 8006c04:	20000c44 	.word	0x20000c44
 8006c08:	0800a760 	.word	0x0800a760
 8006c0c:	080066c1 	.word	0x080066c1

08006c10 <dyn2_execute.lto_priv.154>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006c10:	4a2f      	ldr	r2, [pc, #188]	; (8006cd0 <dyn2_execute.lto_priv.154+0xc0>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8006c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006c14:	6992      	ldr	r2, [r2, #24]
 8006c16:	4b2f      	ldr	r3, [pc, #188]	; (8006cd4 <dyn2_execute.lto_priv.154+0xc4>)
 8006c18:	492f      	ldr	r1, [pc, #188]	; (8006cd8 <dyn2_execute.lto_priv.154+0xc8>)
 8006c1a:	6895      	ldr	r5, [r2, #8]
 8006c1c:	f103 0710 	add.w	r7, r3, #16
 8006c20:	2620      	movs	r6, #32
 8006c22:	2400      	movs	r4, #0
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);
 8006c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c28:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8006c2c:	6808      	ldr	r0, [r1, #0]
 8006c2e:	6010      	str	r0, [r2, #0]
  mp->mp_next = php;
 8006c30:	600a      	str	r2, [r1, #0]
 8006c32:	f384 8811 	msr	BASEPRI, r4
static void dyn2_execute(void) {
  int i;
  tprio_t prio = chThdGetPriorityX();

  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
 8006c36:	42bb      	cmp	r3, r7
 8006c38:	d1f4      	bne.n	8006c24 <dyn2_execute.lto_priv.154+0x14>
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006c3a:	4928      	ldr	r1, [pc, #160]	; (8006cdc <dyn2_execute.lto_priv.154+0xcc>)
 8006c3c:	1e68      	subs	r0, r5, #1
 8006c3e:	f002 f817 	bl	8008c70 <chThdCreateFromMemoryPool.constprop.59>
 8006c42:	4c27      	ldr	r4, [pc, #156]	; (8006ce0 <dyn2_execute.lto_priv.154+0xd0>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006c44:	4927      	ldr	r1, [pc, #156]	; (8006ce4 <dyn2_execute.lto_priv.154+0xd4>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8006c46:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006c48:	1ea8      	subs	r0, r5, #2
 8006c4a:	f002 f811 	bl	8008c70 <chThdCreateFromMemoryPool.constprop.59>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006c4e:	4926      	ldr	r1, [pc, #152]	; (8006ce8 <dyn2_execute.lto_priv.154+0xd8>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8006c50:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006c52:	1ee8      	subs	r0, r5, #3
 8006c54:	f002 f80c 	bl	8008c70 <chThdCreateFromMemoryPool.constprop.59>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006c58:	4924      	ldr	r1, [pc, #144]	; (8006cec <dyn2_execute.lto_priv.154+0xdc>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8006c5a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006c5c:	1f28      	subs	r0, r5, #4
 8006c5e:	f002 f807 	bl	8008c70 <chThdCreateFromMemoryPool.constprop.59>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006c62:	4923      	ldr	r1, [pc, #140]	; (8006cf0 <dyn2_execute.lto_priv.154+0xe0>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8006c64:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006c66:	1f68      	subs	r0, r5, #5
 8006c68:	f002 f802 	bl	8008c70 <chThdCreateFromMemoryPool.constprop.59>

  test_assert(1, (threads[0] != NULL) &&
 8006c6c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8006c6e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8006c70:	b141      	cbz	r1, 8006c84 <dyn2_execute.lto_priv.154+0x74>
 8006c72:	6861      	ldr	r1, [r4, #4]
 8006c74:	b131      	cbz	r1, 8006c84 <dyn2_execute.lto_priv.154+0x74>
 8006c76:	68a1      	ldr	r1, [r4, #8]
 8006c78:	b121      	cbz	r1, 8006c84 <dyn2_execute.lto_priv.154+0x74>
 8006c7a:	68e1      	ldr	r1, [r4, #12]
 8006c7c:	b111      	cbz	r1, 8006c84 <dyn2_execute.lto_priv.154+0x74>
 8006c7e:	fab0 f180 	clz	r1, r0
 8006c82:	0949      	lsrs	r1, r1, #5
 8006c84:	2001      	movs	r0, #1
 8006c86:	f7fa fe73 	bl	8001970 <_test_assert>
 8006c8a:	b100      	cbz	r0, 8006c8e <dyn2_execute.lto_priv.154+0x7e>
 8006c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8006c8e:	f7fb fcc7 	bl	8002620 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 8006c92:	2002      	movs	r0, #2
 8006c94:	4917      	ldr	r1, [pc, #92]	; (8006cf4 <dyn2_execute.lto_priv.154+0xe4>)
 8006c96:	f7fa fe43 	bl	8001920 <_test_assert_sequence>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d1f6      	bne.n	8006c8c <dyn2_execute.lto_priv.154+0x7c>
 8006c9e:	2404      	movs	r4, #4

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 8006ca0:	480d      	ldr	r0, [pc, #52]	; (8006cd8 <dyn2_execute.lto_priv.154+0xc8>)
 8006ca2:	f7fa fef5 	bl	8001a90 <chPoolAlloc>
 8006ca6:	1c01      	adds	r1, r0, #0
 8006ca8:	bf18      	it	ne
 8006caa:	2101      	movne	r1, #1
 8006cac:	2003      	movs	r0, #3
 8006cae:	f7fa fe5f 	bl	8001970 <_test_assert>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d1ea      	bne.n	8006c8c <dyn2_execute.lto_priv.154+0x7c>
  /* Claiming the memory from terminated threads. */
  test_wait_threads();
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
 8006cb6:	3c01      	subs	r4, #1
 8006cb8:	d1f2      	bne.n	8006ca0 <dyn2_execute.lto_priv.154+0x90>
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8006cba:	4807      	ldr	r0, [pc, #28]	; (8006cd8 <dyn2_execute.lto_priv.154+0xc8>)
 8006cbc:	f7fa fee8 	bl	8001a90 <chPoolAlloc>
}
 8006cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8006cc4:	fab0 f180 	clz	r1, r0
 8006cc8:	2004      	movs	r0, #4
 8006cca:	0949      	lsrs	r1, r1, #5
 8006ccc:	f7fa be50 	b.w	8001970 <_test_assert>
 8006cd0:	20001e68 	.word	0x20001e68
 8006cd4:	0800a760 	.word	0x0800a760
 8006cd8:	20002010 	.word	0x20002010
 8006cdc:	08009f84 	.word	0x08009f84
 8006ce0:	2000173c 	.word	0x2000173c
 8006ce4:	08009f80 	.word	0x08009f80
 8006ce8:	08009f88 	.word	0x08009f88
 8006cec:	0800a5ac 	.word	0x0800a5ac
 8006cf0:	08009f90 	.word	0x08009f90
 8006cf4:	0800a750 	.word	0x0800a750
 8006cf8:	f3af 8000 	nop.w
 8006cfc:	f3af 8000 	nop.w

08006d00 <dyn1_execute.lto_priv.152>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8006d00:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006d02:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <dyn1_execute.lto_priv.152+0xd4>)
 8006d04:	b084      	sub	sp, #16
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006d06:	699b      	ldr	r3, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8006d08:	a903      	add	r1, sp, #12
 8006d0a:	4833      	ldr	r0, [pc, #204]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d0c:	689d      	ldr	r5, [r3, #8]
 8006d0e:	f7fb fbaf 	bl	8002470 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8006d12:	4b32      	ldr	r3, [pc, #200]	; (8006ddc <dyn1_execute.lto_priv.152+0xdc>)
 8006d14:	1e6a      	subs	r2, r5, #1
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d1c:	4b30      	ldr	r3, [pc, #192]	; (8006de0 <dyn1_execute.lto_priv.152+0xe0>)
 8006d1e:	482e      	ldr	r0, [pc, #184]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d20:	f7fb fe76 	bl	8002a10 <chThdCreateFromHeap>
 8006d24:	4c2f      	ldr	r4, [pc, #188]	; (8006de4 <dyn1_execute.lto_priv.152+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006d26:	4b30      	ldr	r3, [pc, #192]	; (8006de8 <dyn1_execute.lto_priv.152+0xe8>)
 8006d28:	1eaa      	subs	r2, r5, #2
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8006d2a:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d32:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <dyn1_execute.lto_priv.152+0xe0>)
 8006d34:	4828      	ldr	r0, [pc, #160]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d36:	f7fb fe6b 	bl	8002a10 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8006d3a:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8006d3c:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 8006d3e:	4826      	ldr	r0, [pc, #152]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d40:	f7fb fb96 	bl	8002470 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8006d44:	9902      	ldr	r1, [sp, #8]
 8006d46:	4824      	ldr	r0, [pc, #144]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d48:	f7fb fe1a 	bl	8002980 <chHeapAlloc>
  threads[2] = chThdCreateFromHeap(&heap1,
 8006d4c:	4b27      	ldr	r3, [pc, #156]	; (8006dec <dyn1_execute.lto_priv.152+0xec>)
 8006d4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
  threads[1] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
  p1 = chHeapAlloc(&heap1, n);
 8006d52:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 8006d54:	1eea      	subs	r2, r5, #3
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	481f      	ldr	r0, [pc, #124]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d5a:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <dyn1_execute.lto_priv.152+0xe0>)
 8006d5c:	f7fb fe58 	bl	8002a10 <chThdCreateFromHeap>
 8006d60:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7fb fbac 	bl	80024c0 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8006d68:	6821      	ldr	r1, [r4, #0]
 8006d6a:	b121      	cbz	r1, 8006d76 <dyn1_execute.lto_priv.152+0x76>
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	b111      	cbz	r1, 8006d76 <dyn1_execute.lto_priv.152+0x76>
 8006d70:	68a1      	ldr	r1, [r4, #8]
 8006d72:	b331      	cbz	r1, 8006dc2 <dyn1_execute.lto_priv.152+0xc2>
 8006d74:	2100      	movs	r1, #0
 8006d76:	2001      	movs	r0, #1
 8006d78:	f7fa fdfa 	bl	8001970 <_test_assert>
 8006d7c:	b108      	cbz	r0, 8006d82 <dyn1_execute.lto_priv.152+0x82>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8006d7e:	b004      	add	sp, #16
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8006d82:	f7fb fc4d 	bl	8002620 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8006d86:	2002      	movs	r0, #2
 8006d88:	4919      	ldr	r1, [pc, #100]	; (8006df0 <dyn1_execute.lto_priv.152+0xf0>)
 8006d8a:	f7fa fdc9 	bl	8001920 <_test_assert_sequence>
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d1f5      	bne.n	8006d7e <dyn1_execute.lto_priv.152+0x7e>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8006d92:	a902      	add	r1, sp, #8
 8006d94:	4810      	ldr	r0, [pc, #64]	; (8006dd8 <dyn1_execute.lto_priv.152+0xd8>)
 8006d96:	f7fb fb6b 	bl	8002470 <chHeapStatus>
 8006d9a:	f1a0 0101 	sub.w	r1, r0, #1
 8006d9e:	fab1 f181 	clz	r1, r1
 8006da2:	2003      	movs	r0, #3
 8006da4:	0949      	lsrs	r1, r1, #5
 8006da6:	f7fa fde3 	bl	8001970 <_test_assert>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d1e7      	bne.n	8006d7e <dyn1_execute.lto_priv.152+0x7e>
  test_assert(4, n == sz, "heap size changed");
 8006dae:	9902      	ldr	r1, [sp, #8]
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	2004      	movs	r0, #4
 8006db4:	1ac9      	subs	r1, r1, r3
 8006db6:	fab1 f181 	clz	r1, r1
 8006dba:	0949      	lsrs	r1, r1, #5
 8006dbc:	f7fa fdd8 	bl	8001970 <_test_assert>
 8006dc0:	e7dd      	b.n	8006d7e <dyn1_execute.lto_priv.152+0x7e>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1d6      	bne.n	8006d76 <dyn1_execute.lto_priv.152+0x76>
 8006dc8:	6921      	ldr	r1, [r4, #16]
 8006dca:	fab1 f181 	clz	r1, r1
 8006dce:	0949      	lsrs	r1, r1, #5
 8006dd0:	e7d1      	b.n	8006d76 <dyn1_execute.lto_priv.152+0x76>
 8006dd2:	bf00      	nop
 8006dd4:	20001e68 	.word	0x20001e68
 8006dd8:	200016c8 	.word	0x200016c8
 8006ddc:	08009f84 	.word	0x08009f84
 8006de0:	08006741 	.word	0x08006741
 8006de4:	2000173c 	.word	0x2000173c
 8006de8:	08009f80 	.word	0x08009f80
 8006dec:	08009f88 	.word	0x08009f88
 8006df0:	0800a758 	.word	0x0800a758
 8006df4:	f3af 8000 	nop.w
 8006df8:	f3af 8000 	nop.w
 8006dfc:	f3af 8000 	nop.w

08006e00 <heap1_execute.lto_priv.148>:

static void heap1_execute(void) {
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8006e04:	a901      	add	r1, sp, #4
 8006e06:	2000      	movs	r0, #0
 8006e08:	f7fb fb32 	bl	8002470 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	2000      	movs	r0, #0
 8006e10:	f7fb fdb6 	bl	8002980 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8006e14:	1c01      	adds	r1, r0, #0
 8006e16:	4605      	mov	r5, r0
 8006e18:	bf18      	it	ne
 8006e1a:	2101      	movne	r1, #1
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f7fa fda7 	bl	8001970 <_test_assert>
 8006e22:	4604      	mov	r4, r0
 8006e24:	b108      	cbz	r0, 8006e2a <heap1_execute.lto_priv.148+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8006e26:	b002      	add	sp, #8
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f7fb fb48 	bl	80024c0 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8006e30:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7fb fda3 	bl	8002980 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 8006e3a:	fab0 f180 	clz	r1, r0
 8006e3e:	2002      	movs	r0, #2
 8006e40:	0949      	lsrs	r1, r1, #5
 8006e42:	f7fa fd95 	bl	8001970 <_test_assert>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d1ed      	bne.n	8006e26 <heap1_execute.lto_priv.148+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 8006e4a:	a901      	add	r1, sp, #4
 8006e4c:	487b      	ldr	r0, [pc, #492]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006e4e:	f7fb fb0f 	bl	8002470 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006e52:	2110      	movs	r1, #16
 8006e54:	4879      	ldr	r0, [pc, #484]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006e56:	f7fb fd93 	bl	8002980 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006e5a:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006e5c:	4606      	mov	r6, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006e5e:	4877      	ldr	r0, [pc, #476]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006e60:	f7fb fd8e 	bl	8002980 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006e64:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006e66:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006e68:	4874      	ldr	r0, [pc, #464]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006e6a:	f7fb fd89 	bl	8002980 <chHeapAlloc>
 8006e6e:	4604      	mov	r4, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7fb fb25 	bl	80024c0 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8006e76:	4628      	mov	r0, r5
 8006e78:	f7fb fb22 	bl	80024c0 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f7fb fb1f 	bl	80024c0 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006e82:	4669      	mov	r1, sp
 8006e84:	486d      	ldr	r0, [pc, #436]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006e86:	f7fb faf3 	bl	8002470 <chHeapStatus>
 8006e8a:	f1a0 0101 	sub.w	r1, r0, #1
 8006e8e:	fab1 f181 	clz	r1, r1
 8006e92:	2003      	movs	r0, #3
 8006e94:	0949      	lsrs	r1, r1, #5
 8006e96:	f7fa fd6b 	bl	8001970 <_test_assert>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d1c3      	bne.n	8006e26 <heap1_execute.lto_priv.148+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006e9e:	2110      	movs	r1, #16
 8006ea0:	4866      	ldr	r0, [pc, #408]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006ea2:	f7fb fd6d 	bl	8002980 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006ea6:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006ea8:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006eaa:	4864      	ldr	r0, [pc, #400]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006eac:	f7fb fd68 	bl	8002980 <chHeapAlloc>
 8006eb0:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 8006eb2:	2110      	movs	r1, #16
 8006eb4:	4861      	ldr	r0, [pc, #388]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006eb6:	f7fb fd63 	bl	8002980 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 8006eba:	f7fb fb01 	bl	80024c0 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f7fb fafe 	bl	80024c0 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7fb fafb 	bl	80024c0 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006eca:	4669      	mov	r1, sp
 8006ecc:	485b      	ldr	r0, [pc, #364]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006ece:	f7fb facf 	bl	8002470 <chHeapStatus>
 8006ed2:	f1a0 0101 	sub.w	r1, r0, #1
 8006ed6:	fab1 f181 	clz	r1, r1
 8006eda:	2004      	movs	r0, #4
 8006edc:	0949      	lsrs	r1, r1, #5
 8006ede:	f7fa fd47 	bl	8001970 <_test_assert>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d19f      	bne.n	8006e26 <heap1_execute.lto_priv.148+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8006ee6:	2111      	movs	r1, #17
 8006ee8:	4854      	ldr	r0, [pc, #336]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006eea:	f7fb fd49 	bl	8002980 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006eee:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8006ef0:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006ef2:	4852      	ldr	r0, [pc, #328]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006ef4:	f7fb fd44 	bl	8002980 <chHeapAlloc>
 8006ef8:	4605      	mov	r5, r0
  chHeapFree(p1);
 8006efa:	4620      	mov	r0, r4
 8006efc:	f7fb fae0 	bl	80024c0 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006f00:	4669      	mov	r1, sp
 8006f02:	484e      	ldr	r0, [pc, #312]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f04:	f7fb fab4 	bl	8002470 <chHeapStatus>
 8006f08:	f1a0 0102 	sub.w	r1, r0, #2
 8006f0c:	fab1 f181 	clz	r1, r1
 8006f10:	2005      	movs	r0, #5
 8006f12:	0949      	lsrs	r1, r1, #5
 8006f14:	f7fa fd2c 	bl	8001970 <_test_assert>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d184      	bne.n	8006e26 <heap1_execute.lto_priv.148+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006f1c:	2110      	movs	r1, #16
 8006f1e:	4847      	ldr	r0, [pc, #284]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f20:	f7fb fd2e 	bl	8002980 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006f24:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006f26:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8006f28:	4844      	ldr	r0, [pc, #272]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f2a:	f7fb faa1 	bl	8002470 <chHeapStatus>
 8006f2e:	2801      	cmp	r0, #1
 8006f30:	f000 8081 	beq.w	8007036 <heap1_execute.lto_priv.148+0x236>
 8006f34:	4669      	mov	r1, sp
 8006f36:	4841      	ldr	r0, [pc, #260]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f38:	f7fb fa9a 	bl	8002470 <chHeapStatus>
 8006f3c:	f1a0 0102 	sub.w	r1, r0, #2
 8006f40:	fab1 f181 	clz	r1, r1
 8006f44:	0949      	lsrs	r1, r1, #5
 8006f46:	2006      	movs	r0, #6
 8006f48:	f7fa fd12 	bl	8001970 <_test_assert>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f47f af6a 	bne.w	8006e26 <heap1_execute.lto_priv.148+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8006f52:	4628      	mov	r0, r5
 8006f54:	f7fb fab4 	bl	80024c0 <chHeapFree>
  chHeapFree(p1);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7fb fab1 	bl	80024c0 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006f5e:	4669      	mov	r1, sp
 8006f60:	4836      	ldr	r0, [pc, #216]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f62:	f7fb fa85 	bl	8002470 <chHeapStatus>
 8006f66:	1e46      	subs	r6, r0, #1
 8006f68:	4271      	negs	r1, r6
 8006f6a:	4171      	adcs	r1, r6
 8006f6c:	2007      	movs	r0, #7
 8006f6e:	f7fa fcff 	bl	8001970 <_test_assert>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f47f af57 	bne.w	8006e26 <heap1_execute.lto_priv.148+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006f78:	2110      	movs	r1, #16
 8006f7a:	4830      	ldr	r0, [pc, #192]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f7c:	f7fb fd00 	bl	8002980 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006f80:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8006f82:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8006f84:	482d      	ldr	r0, [pc, #180]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f86:	f7fb fcfb 	bl	8002980 <chHeapAlloc>
 8006f8a:	4604      	mov	r4, r0
  chHeapFree(p1);
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7fb fa97 	bl	80024c0 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8006f92:	4669      	mov	r1, sp
 8006f94:	4829      	ldr	r0, [pc, #164]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006f96:	f7fb fa6b 	bl	8002470 <chHeapStatus>
 8006f9a:	1e85      	subs	r5, r0, #2
 8006f9c:	4269      	negs	r1, r5
 8006f9e:	4169      	adcs	r1, r5
 8006fa0:	2008      	movs	r0, #8
 8006fa2:	f7fa fce5 	bl	8001970 <_test_assert>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f47f af3d 	bne.w	8006e26 <heap1_execute.lto_priv.148+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 8006fac:	2120      	movs	r1, #32
 8006fae:	4823      	ldr	r0, [pc, #140]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006fb0:	f7fb fce6 	bl	8002980 <chHeapAlloc>
  chHeapFree(p1);
 8006fb4:	f7fb fa84 	bl	80024c0 <chHeapFree>
  chHeapFree(p2);
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7fb fa81 	bl	80024c0 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8006fbe:	4669      	mov	r1, sp
 8006fc0:	481e      	ldr	r0, [pc, #120]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006fc2:	f7fb fa55 	bl	8002470 <chHeapStatus>
 8006fc6:	3801      	subs	r0, #1
 8006fc8:	4241      	negs	r1, r0
 8006fca:	4141      	adcs	r1, r0
 8006fcc:	2009      	movs	r0, #9
 8006fce:	f7fa fccf 	bl	8001970 <_test_assert>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f47f af27 	bne.w	8006e26 <heap1_execute.lto_priv.148+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 8006fd8:	4669      	mov	r1, sp
 8006fda:	4818      	ldr	r0, [pc, #96]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006fdc:	f7fb fa48 	bl	8002470 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8006fe0:	9900      	ldr	r1, [sp, #0]
 8006fe2:	4816      	ldr	r0, [pc, #88]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006fe4:	f7fb fccc 	bl	8002980 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8006fe8:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8006fea:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8006fec:	4813      	ldr	r0, [pc, #76]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 8006fee:	f7fb fa3f 	bl	8002470 <chHeapStatus>
 8006ff2:	fab0 f180 	clz	r1, r0
 8006ff6:	200a      	movs	r0, #10
 8006ff8:	0949      	lsrs	r1, r1, #5
 8006ffa:	f7fa fcb9 	bl	8001970 <_test_assert>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f47f af11 	bne.w	8006e26 <heap1_execute.lto_priv.148+0x26>
  chHeapFree(p1);
 8007004:	4620      	mov	r0, r4
 8007006:	f7fb fa5b 	bl	80024c0 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800700a:	4669      	mov	r1, sp
 800700c:	480b      	ldr	r0, [pc, #44]	; (800703c <heap1_execute.lto_priv.148+0x23c>)
 800700e:	f7fb fa2f 	bl	8002470 <chHeapStatus>
 8007012:	1e42      	subs	r2, r0, #1
 8007014:	4251      	negs	r1, r2
 8007016:	4151      	adcs	r1, r2
 8007018:	200b      	movs	r0, #11
 800701a:	f7fa fca9 	bl	8001970 <_test_assert>
 800701e:	2800      	cmp	r0, #0
 8007020:	f47f af01 	bne.w	8006e26 <heap1_execute.lto_priv.148+0x26>
  test_assert(12, n == sz, "size changed");
 8007024:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8007028:	1acb      	subs	r3, r1, r3
 800702a:	4259      	negs	r1, r3
 800702c:	4159      	adcs	r1, r3
 800702e:	200c      	movs	r0, #12
 8007030:	f7fa fc9e 	bl	8001970 <_test_assert>
 8007034:	e6f7      	b.n	8006e26 <heap1_execute.lto_priv.148+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8007036:	4601      	mov	r1, r0
 8007038:	e785      	b.n	8006f46 <heap1_execute.lto_priv.148+0x146>
 800703a:	bf00      	nop
 800703c:	200016a8 	.word	0x200016a8

08007040 <bmk12_setup.lto_priv.174>:
 8007040:	4b02      	ldr	r3, [pc, #8]	; (800704c <bmk12_setup.lto_priv.174+0xc>)
 8007042:	2200      	movs	r2, #0
 8007044:	605b      	str	r3, [r3, #4]
 8007046:	601b      	str	r3, [r3, #0]
 8007048:	609a      	str	r2, [r3, #8]
 800704a:	4770      	bx	lr
 800704c:	20001720 	.word	0x20001720

08007050 <bmk11_setup.lto_priv.172>:
 8007050:	4b02      	ldr	r3, [pc, #8]	; (800705c <bmk11_setup.lto_priv.172+0xc>)
 8007052:	2201      	movs	r2, #1
 8007054:	605b      	str	r3, [r3, #4]
 8007056:	601b      	str	r3, [r3, #0]
 8007058:	609a      	str	r2, [r3, #8]
 800705a:	4770      	bx	lr
 800705c:	20001730 	.word	0x20001730

08007060 <tmo>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	f3af 8000 	nop.w
 8007068:	f3af 8000 	nop.w
 800706c:	f3af 8000 	nop.w

08007070 <bmk7_setup.lto_priv.167>:
 8007070:	4b02      	ldr	r3, [pc, #8]	; (800707c <bmk7_setup.lto_priv.167+0xc>)
 8007072:	2200      	movs	r2, #0
 8007074:	605b      	str	r3, [r3, #4]
 8007076:	601b      	str	r3, [r3, #0]
 8007078:	609a      	str	r2, [r3, #8]
 800707a:	4770      	bx	lr
 800707c:	20001730 	.word	0x20001730

08007080 <thread1>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	f3af 8000 	nop.w
 8007088:	f3af 8000 	nop.w
 800708c:	f3af 8000 	nop.w

08007090 <bmk13_execute.lto_priv.176>:
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8007090:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8007092:	482f      	ldr	r0, [pc, #188]	; (8007150 <bmk13_execute.lto_priv.176+0xc0>)
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 8007094:	4c2f      	ldr	r4, [pc, #188]	; (8007154 <bmk13_execute.lto_priv.176+0xc4>)
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8007096:	f7fa fcbb 	bl	8001a10 <test_print>
  test_printn(sizeof(ch_system_t));
 800709a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800709e:	f7fa fcc7 	bl	8001a30 <test_printn>
  test_println(" bytes");
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7fa fc94 	bl	80019d0 <test_println>
  test_print("--- Thread: ");
 80070a8:	482b      	ldr	r0, [pc, #172]	; (8007158 <bmk13_execute.lto_priv.176+0xc8>)
 80070aa:	f7fa fcb1 	bl	8001a10 <test_print>
  test_printn(sizeof(thread_t));
 80070ae:	2044      	movs	r0, #68	; 0x44
 80070b0:	f7fa fcbe 	bl	8001a30 <test_printn>
  test_println(" bytes");
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7fa fc8b 	bl	80019d0 <test_println>
  test_print("--- Timer : ");
 80070ba:	4828      	ldr	r0, [pc, #160]	; (800715c <bmk13_execute.lto_priv.176+0xcc>)
 80070bc:	f7fa fca8 	bl	8001a10 <test_print>
  test_printn(sizeof(virtual_timer_t));
 80070c0:	2014      	movs	r0, #20
 80070c2:	f7fa fcb5 	bl	8001a30 <test_printn>
  test_println(" bytes");
 80070c6:	4620      	mov	r0, r4
 80070c8:	f7fa fc82 	bl	80019d0 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 80070cc:	4824      	ldr	r0, [pc, #144]	; (8007160 <bmk13_execute.lto_priv.176+0xd0>)
 80070ce:	f7fa fc9f 	bl	8001a10 <test_print>
  test_printn(sizeof(semaphore_t));
 80070d2:	200c      	movs	r0, #12
 80070d4:	f7fa fcac 	bl	8001a30 <test_printn>
  test_println(" bytes");
 80070d8:	4620      	mov	r0, r4
 80070da:	f7fa fc79 	bl	80019d0 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 80070de:	4821      	ldr	r0, [pc, #132]	; (8007164 <bmk13_execute.lto_priv.176+0xd4>)
 80070e0:	f7fa fc96 	bl	8001a10 <test_print>
  test_printn(sizeof(event_source_t));
 80070e4:	2004      	movs	r0, #4
 80070e6:	f7fa fca3 	bl	8001a30 <test_printn>
  test_println(" bytes");
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7fa fc70 	bl	80019d0 <test_println>
  test_print("--- EventL: ");
 80070f0:	481d      	ldr	r0, [pc, #116]	; (8007168 <bmk13_execute.lto_priv.176+0xd8>)
 80070f2:	f7fa fc8d 	bl	8001a10 <test_print>
  test_printn(sizeof(event_listener_t));
 80070f6:	2014      	movs	r0, #20
 80070f8:	f7fa fc9a 	bl	8001a30 <test_printn>
  test_println(" bytes");
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7fa fc67 	bl	80019d0 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 8007102:	481a      	ldr	r0, [pc, #104]	; (800716c <bmk13_execute.lto_priv.176+0xdc>)
 8007104:	f7fa fc84 	bl	8001a10 <test_print>
  test_printn(sizeof(mutex_t));
 8007108:	2010      	movs	r0, #16
 800710a:	f7fa fc91 	bl	8001a30 <test_printn>
  test_println(" bytes");
 800710e:	4620      	mov	r0, r4
 8007110:	f7fa fc5e 	bl	80019d0 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8007114:	4816      	ldr	r0, [pc, #88]	; (8007170 <bmk13_execute.lto_priv.176+0xe0>)
 8007116:	f7fa fc7b 	bl	8001a10 <test_print>
  test_printn(sizeof(condition_variable_t));
 800711a:	2008      	movs	r0, #8
 800711c:	f7fa fc88 	bl	8001a30 <test_printn>
  test_println(" bytes");
 8007120:	4620      	mov	r0, r4
 8007122:	f7fa fc55 	bl	80019d0 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 8007126:	4813      	ldr	r0, [pc, #76]	; (8007174 <bmk13_execute.lto_priv.176+0xe4>)
 8007128:	f7fa fc72 	bl	8001a10 <test_print>
  test_printn(sizeof(io_queue_t));
 800712c:	2024      	movs	r0, #36	; 0x24
 800712e:	f7fa fc7f 	bl	8001a30 <test_printn>
  test_println(" bytes");
 8007132:	4620      	mov	r0, r4
 8007134:	f7fa fc4c 	bl	80019d0 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8007138:	480f      	ldr	r0, [pc, #60]	; (8007178 <bmk13_execute.lto_priv.176+0xe8>)
 800713a:	f7fa fc69 	bl	8001a10 <test_print>
  test_printn(sizeof(mailbox_t));
 800713e:	2028      	movs	r0, #40	; 0x28
 8007140:	f7fa fc76 	bl	8001a30 <test_printn>
  test_println(" bytes");
 8007144:	4620      	mov	r0, r4
#endif
}
 8007146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 800714a:	f7fa bc41 	b.w	80019d0 <test_println>
 800714e:	bf00      	nop
 8007150:	0800a780 	.word	0x0800a780
 8007154:	0800a790 	.word	0x0800a790
 8007158:	0800a798 	.word	0x0800a798
 800715c:	0800a7a8 	.word	0x0800a7a8
 8007160:	0800a7b8 	.word	0x0800a7b8
 8007164:	0800a7c8 	.word	0x0800a7c8
 8007168:	0800a7d8 	.word	0x0800a7d8
 800716c:	0800a7e8 	.word	0x0800a7e8
 8007170:	0800a7f8 	.word	0x0800a7f8
 8007174:	0800a808 	.word	0x0800a808
 8007178:	0800a818 	.word	0x0800a818
 800717c:	f3af 8000 	nop.w

08007180 <bmk12_execute.lto_priv.175>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8007180:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8007182:	f7fa fffd 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 8007186:	f001 ff7b 	bl	8009080 <test_start_timer.constprop.14>
 800718a:	4d14      	ldr	r5, [pc, #80]	; (80071dc <bmk12_execute.lto_priv.175+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800718c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800718e:	4814      	ldr	r0, [pc, #80]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 8007190:	f7fb f95e 	bl	8002450 <chMtxLock>
    chMtxUnlock(&mtx1);
 8007194:	4812      	ldr	r0, [pc, #72]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 8007196:	f7fa fdab 	bl	8001cf0 <chMtxUnlock>
    chMtxLock(&mtx1);
 800719a:	4811      	ldr	r0, [pc, #68]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 800719c:	f7fb f958 	bl	8002450 <chMtxLock>
    chMtxUnlock(&mtx1);
 80071a0:	480f      	ldr	r0, [pc, #60]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 80071a2:	f7fa fda5 	bl	8001cf0 <chMtxUnlock>
    chMtxLock(&mtx1);
 80071a6:	480e      	ldr	r0, [pc, #56]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 80071a8:	f7fb f952 	bl	8002450 <chMtxLock>
    chMtxUnlock(&mtx1);
 80071ac:	480c      	ldr	r0, [pc, #48]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 80071ae:	f7fa fd9f 	bl	8001cf0 <chMtxUnlock>
    chMtxLock(&mtx1);
 80071b2:	480b      	ldr	r0, [pc, #44]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 80071b4:	f7fb f94c 	bl	8002450 <chMtxLock>
    chMtxUnlock(&mtx1);
 80071b8:	4809      	ldr	r0, [pc, #36]	; (80071e0 <bmk12_execute.lto_priv.175+0x60>)
 80071ba:	f7fa fd99 	bl	8001cf0 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80071be:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 80071c0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0e3      	beq.n	800718e <bmk12_execute.lto_priv.175+0xe>
  test_print("--- Score : ");
 80071c6:	4807      	ldr	r0, [pc, #28]	; (80071e4 <bmk12_execute.lto_priv.175+0x64>)
 80071c8:	f7fa fc22 	bl	8001a10 <test_print>
  test_printn(n * 4);
 80071cc:	00a0      	lsls	r0, r4, #2
 80071ce:	f7fa fc2f 	bl	8001a30 <test_printn>
  test_println(" lock+unlock/S");
}
 80071d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 80071d6:	4804      	ldr	r0, [pc, #16]	; (80071e8 <bmk12_execute.lto_priv.175+0x68>)
 80071d8:	f7fa bbfa 	b.w	80019d0 <test_println>
 80071dc:	20001fb8 	.word	0x20001fb8
 80071e0:	20001720 	.word	0x20001720
 80071e4:	0800a828 	.word	0x0800a828
 80071e8:	0800a838 	.word	0x0800a838
 80071ec:	f3af 8000 	nop.w

080071f0 <bmk11_execute.lto_priv.173>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 80071f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 80071f2:	f7fa ffc5 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 80071f6:	f001 ff43 	bl	8009080 <test_start_timer.constprop.14>
 80071fa:	4d14      	ldr	r5, [pc, #80]	; (800724c <bmk11_execute.lto_priv.173+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 80071fc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 80071fe:	4814      	ldr	r0, [pc, #80]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 8007200:	f7fa fe3e 	bl	8001e80 <chSemWait>
    chSemSignal(&sem1);
 8007204:	4812      	ldr	r0, [pc, #72]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 8007206:	f7fa fda3 	bl	8001d50 <chSemSignal>
    chSemWait(&sem1);
 800720a:	4811      	ldr	r0, [pc, #68]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 800720c:	f7fa fe38 	bl	8001e80 <chSemWait>
    chSemSignal(&sem1);
 8007210:	480f      	ldr	r0, [pc, #60]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 8007212:	f7fa fd9d 	bl	8001d50 <chSemSignal>
    chSemWait(&sem1);
 8007216:	480e      	ldr	r0, [pc, #56]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 8007218:	f7fa fe32 	bl	8001e80 <chSemWait>
    chSemSignal(&sem1);
 800721c:	480c      	ldr	r0, [pc, #48]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 800721e:	f7fa fd97 	bl	8001d50 <chSemSignal>
    chSemWait(&sem1);
 8007222:	480b      	ldr	r0, [pc, #44]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 8007224:	f7fa fe2c 	bl	8001e80 <chSemWait>
    chSemSignal(&sem1);
 8007228:	4809      	ldr	r0, [pc, #36]	; (8007250 <bmk11_execute.lto_priv.173+0x60>)
 800722a:	f7fa fd91 	bl	8001d50 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800722e:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8007230:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0e3      	beq.n	80071fe <bmk11_execute.lto_priv.173+0xe>
  test_print("--- Score : ");
 8007236:	4807      	ldr	r0, [pc, #28]	; (8007254 <bmk11_execute.lto_priv.173+0x64>)
 8007238:	f7fa fbea 	bl	8001a10 <test_print>
  test_printn(n * 4);
 800723c:	00a0      	lsls	r0, r4, #2
 800723e:	f7fa fbf7 	bl	8001a30 <test_printn>
  test_println(" wait+signal/S");
}
 8007242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8007246:	4804      	ldr	r0, [pc, #16]	; (8007258 <bmk11_execute.lto_priv.173+0x68>)
 8007248:	f7fa bbc2 	b.w	80019d0 <test_println>
 800724c:	20001fb8 	.word	0x20001fb8
 8007250:	20001730 	.word	0x20001730
 8007254:	0800a828 	.word	0x0800a828
 8007258:	0800a848 	.word	0x0800a848
 800725c:	f3af 8000 	nop.w

08007260 <thread3>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 8007260:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007262:	4c07      	ldr	r4, [pc, #28]	; (8007280 <thread3+0x20>)
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8007264:	69a3      	ldr	r3, [r4, #24]
 8007266:	7f5b      	ldrb	r3, [r3, #29]

  (void)p;
  while (!chThdShouldTerminateX())
 8007268:	075a      	lsls	r2, r3, #29
 800726a:	d406      	bmi.n	800727a <thread3+0x1a>
    chSemWait(&sem1);
 800726c:	4805      	ldr	r0, [pc, #20]	; (8007284 <thread3+0x24>)
 800726e:	f7fa fe07 	bl	8001e80 <chSemWait>
 8007272:	69a3      	ldr	r3, [r4, #24]
 8007274:	7f5b      	ldrb	r3, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8007276:	075b      	lsls	r3, r3, #29
 8007278:	d5f8      	bpl.n	800726c <thread3+0xc>
    chSemWait(&sem1);
  return 0;
}
 800727a:	2000      	movs	r0, #0
 800727c:	bd10      	pop	{r4, pc}
 800727e:	bf00      	nop
 8007280:	20001e68 	.word	0x20001e68
 8007284:	20001730 	.word	0x20001730
 8007288:	f3af 8000 	nop.w
 800728c:	f3af 8000 	nop.w

08007290 <bmk10_execute.lto_priv.171>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8007290:	b538      	push	{r3, r4, r5, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8007292:	f7fa ff75 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 8007296:	f001 fef3 	bl	8009080 <test_start_timer.constprop.14>
 800729a:	4d15      	ldr	r5, [pc, #84]	; (80072f0 <bmk10_execute.lto_priv.171+0x60>)

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 800729c:	2400      	movs	r4, #0
 800729e:	2320      	movs	r3, #32
 80072a0:	f383 8811 	msr	BASEPRI, r3

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 80072a4:	4813      	ldr	r0, [pc, #76]	; (80072f4 <bmk10_execute.lto_priv.171+0x64>)
 80072a6:	2101      	movs	r1, #1
 80072a8:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <bmk10_execute.lto_priv.171+0x68>)
 80072aa:	2300      	movs	r3, #0
 80072ac:	f7fa fc80 	bl	8001bb0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 80072b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80072b4:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <bmk10_execute.lto_priv.171+0x68>)
 80072b6:	2300      	movs	r3, #0
 80072b8:	4810      	ldr	r0, [pc, #64]	; (80072fc <bmk10_execute.lto_priv.171+0x6c>)
 80072ba:	f7fa fc79 	bl	8001bb0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 80072be:	480d      	ldr	r0, [pc, #52]	; (80072f4 <bmk10_execute.lto_priv.171+0x64>)
 80072c0:	f7fa fc46 	bl	8001b50 <chVTDoResetI>
    chVTDoResetI(&vt2);
 80072c4:	480d      	ldr	r0, [pc, #52]	; (80072fc <bmk10_execute.lto_priv.171+0x6c>)
 80072c6:	f7fa fc43 	bl	8001b50 <chVTDoResetI>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80072d0:	782b      	ldrb	r3, [r5, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 80072d2:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0e2      	beq.n	800729e <bmk10_execute.lto_priv.171+0xe>
  test_print("--- Score : ");
 80072d8:	4809      	ldr	r0, [pc, #36]	; (8007300 <bmk10_execute.lto_priv.171+0x70>)
 80072da:	f7fa fb99 	bl	8001a10 <test_print>
  test_printn(n * 2);
 80072de:	0060      	lsls	r0, r4, #1
 80072e0:	f7fa fba6 	bl	8001a30 <test_printn>
  test_println(" timers/S");
}
 80072e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 80072e8:	4806      	ldr	r0, [pc, #24]	; (8007304 <bmk10_execute.lto_priv.171+0x74>)
 80072ea:	f7fa bb71 	b.w	80019d0 <test_println>
 80072ee:	bf00      	nop
 80072f0:	20001fb8 	.word	0x20001fb8
 80072f4:	200016e8 	.word	0x200016e8
 80072f8:	08007061 	.word	0x08007061
 80072fc:	20001750 	.word	0x20001750
 8007300:	0800a828 	.word	0x0800a828
 8007304:	0800a858 	.word	0x0800a858
 8007308:	f3af 8000 	nop.w
 800730c:	f3af 8000 	nop.w

08007310 <bmk9_execute.lto_priv.170>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8007312:	4926      	ldr	r1, [pc, #152]	; (80073ac <bmk9_execute.lto_priv.170+0x9c>)
 8007314:	4b26      	ldr	r3, [pc, #152]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8007316:	2200      	movs	r2, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8007318:	f101 0010 	add.w	r0, r1, #16
 800731c:	605b      	str	r3, [r3, #4]
 800731e:	601b      	str	r3, [r3, #0]
  uint32_t n;
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
 8007320:	4614      	mov	r4, r2
 8007322:	6118      	str	r0, [r3, #16]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8007324:	6159      	str	r1, [r3, #20]
 8007326:	6199      	str	r1, [r3, #24]
 8007328:	60d9      	str	r1, [r3, #12]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800732a:	609a      	str	r2, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 800732c:	61da      	str	r2, [r3, #28]
  iqp->q_link = link;
 800732e:	621a      	str	r2, [r3, #32]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8007330:	4617      	mov	r7, r2
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 8007332:	f7fa ff25 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 8007336:	f001 fea3 	bl	8009080 <test_start_timer.constprop.14>
 800733a:	4e1e      	ldr	r6, [pc, #120]	; (80073b4 <bmk9_execute.lto_priv.170+0xa4>)
 800733c:	2520      	movs	r5, #32
 800733e:	f385 8811 	msr	BASEPRI, r5
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 8007342:	2100      	movs	r1, #0
 8007344:	481a      	ldr	r0, [pc, #104]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 8007346:	f7fa ff43 	bl	80021d0 <chIQPutI>
    chIQPutI(&iq, 1);
 800734a:	2101      	movs	r1, #1
 800734c:	4818      	ldr	r0, [pc, #96]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 800734e:	f7fa ff3f 	bl	80021d0 <chIQPutI>
    chIQPutI(&iq, 2);
 8007352:	2102      	movs	r1, #2
 8007354:	4816      	ldr	r0, [pc, #88]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 8007356:	f7fa ff3b 	bl	80021d0 <chIQPutI>
    chIQPutI(&iq, 3);
 800735a:	2103      	movs	r1, #3
 800735c:	4814      	ldr	r0, [pc, #80]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 800735e:	f7fa ff37 	bl	80021d0 <chIQPutI>
 8007362:	f387 8811 	msr	BASEPRI, r7
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8007366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800736a:	4811      	ldr	r0, [pc, #68]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 800736c:	f7fa fed0 	bl	8002110 <chIQGetTimeout>
 8007370:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007374:	480e      	ldr	r0, [pc, #56]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 8007376:	f7fa fecb 	bl	8002110 <chIQGetTimeout>
 800737a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800737e:	480c      	ldr	r0, [pc, #48]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 8007380:	f7fa fec6 	bl	8002110 <chIQGetTimeout>
 8007384:	480a      	ldr	r0, [pc, #40]	; (80073b0 <bmk9_execute.lto_priv.170+0xa0>)
 8007386:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800738a:	f7fa fec1 	bl	8002110 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800738e:	7833      	ldrb	r3, [r6, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 8007390:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0d3      	beq.n	800733e <bmk9_execute.lto_priv.170+0x2e>
  test_print("--- Score : ");
 8007396:	4808      	ldr	r0, [pc, #32]	; (80073b8 <bmk9_execute.lto_priv.170+0xa8>)
 8007398:	f7fa fb3a 	bl	8001a10 <test_print>
  test_printn(n * 4);
 800739c:	00a0      	lsls	r0, r4, #2
 800739e:	f7fa fb47 	bl	8001a30 <test_printn>
  test_println(" bytes/S");
}
 80073a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 80073a6:	4805      	ldr	r0, [pc, #20]	; (80073bc <bmk9_execute.lto_priv.170+0xac>)
 80073a8:	f7fa bb12 	b.w	80019d0 <test_println>
 80073ac:	20001764 	.word	0x20001764
 80073b0:	200016fc 	.word	0x200016fc
 80073b4:	20001fb8 	.word	0x20001fb8
 80073b8:	0800a828 	.word	0x0800a828
 80073bc:	0800a864 	.word	0x0800a864

080073c0 <bmk8_execute.lto_priv.169>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 80073c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80073c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007498 <bmk8_execute.lto_priv.169+0xd8>
 80073c8:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 80073ca:	ac04      	add	r4, sp, #16
 80073cc:	2300      	movs	r3, #0
 80073ce:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 80073d2:	f7fa fed5 	bl	8002180 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80073d6:	f8d8 3018 	ldr.w	r3, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80073da:	4f2a      	ldr	r7, [pc, #168]	; (8007484 <bmk8_execute.lto_priv.169+0xc4>)
 80073dc:	4e2a      	ldr	r6, [pc, #168]	; (8007488 <bmk8_execute.lto_priv.169+0xc8>)
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	4638      	mov	r0, r7
 80073e2:	4633      	mov	r3, r6
 80073e4:	3a01      	subs	r2, #1
 80073e6:	9400      	str	r4, [sp, #0]
 80073e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80073ec:	f7fa fcd0 	bl	8001d90 <chThdCreateStatic>
 80073f0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80073f4:	4d25      	ldr	r5, [pc, #148]	; (800748c <bmk8_execute.lto_priv.169+0xcc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80073fc:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80073fe:	4633      	mov	r3, r6
 8007400:	3a01      	subs	r2, #1
 8007402:	9400      	str	r4, [sp, #0]
 8007404:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8007408:	f7fa fcc2 	bl	8001d90 <chThdCreateStatic>
 800740c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007410:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8007418:	4633      	mov	r3, r6
 800741a:	3a01      	subs	r2, #1
 800741c:	9400      	str	r4, [sp, #0]
 800741e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007422:	f7fa fcb5 	bl	8001d90 <chThdCreateStatic>
 8007426:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800742a:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8007432:	4633      	mov	r3, r6
 8007434:	3a01      	subs	r2, #1
 8007436:	9400      	str	r4, [sp, #0]
 8007438:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800743c:	f7fa fca8 	bl	8001d90 <chThdCreateStatic>
 8007440:	f8d8 3018 	ldr.w	r3, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8007444:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007448:	689a      	ldr	r2, [r3, #8]
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800744a:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800744c:	3a01      	subs	r2, #1
 800744e:	4633      	mov	r3, r6
 8007450:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8007454:	9400      	str	r4, [sp, #0]
 8007456:	f7fa fc9b 	bl	8001d90 <chThdCreateStatic>
 800745a:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 800745c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007460:	f7fa fe7e 	bl	8002160 <chThdSleep>
  test_terminate_threads();
 8007464:	f7fa fa24 	bl	80018b0 <test_terminate_threads>
  test_wait_threads();
 8007468:	f7fb f8da 	bl	8002620 <test_wait_threads>

  test_print("--- Score : ");
 800746c:	4808      	ldr	r0, [pc, #32]	; (8007490 <bmk8_execute.lto_priv.169+0xd0>)
 800746e:	f7fa facf 	bl	8001a10 <test_print>
  test_printn(n);
 8007472:	9803      	ldr	r0, [sp, #12]
 8007474:	f7fa fadc 	bl	8001a30 <test_printn>
  test_println(" ctxswc/S");
 8007478:	4806      	ldr	r0, [pc, #24]	; (8007494 <bmk8_execute.lto_priv.169+0xd4>)
 800747a:	f7fa faa9 	bl	80019d0 <test_println>
}
 800747e:	b004      	add	sp, #16
 8007480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007484:	200017c8 	.word	0x200017c8
 8007488:	08007511 	.word	0x08007511
 800748c:	2000173c 	.word	0x2000173c
 8007490:	0800a828 	.word	0x0800a828
 8007494:	0800a870 	.word	0x0800a870
 8007498:	20001e68 	.word	0x20001e68
 800749c:	f3af 8000 	nop.w

080074a0 <bmk6_execute.lto_priv.166>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 80074a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <bmk6_execute.lto_priv.166+0x4c>)
 80074a4:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80074a6:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 80074a8:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 80074aa:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 80074ac:	4627      	mov	r7, r4
 80074ae:	4e10      	ldr	r6, [pc, #64]	; (80074f0 <bmk6_execute.lto_priv.166+0x50>)

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 80074b0:	3501      	adds	r5, #1
  test_wait_tick();
 80074b2:	f7fa fe65 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 80074b6:	f001 fde3 	bl	8009080 <test_start_timer.constprop.14>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <bmk6_execute.lto_priv.166+0x54>)
 80074bc:	9700      	str	r7, [sp, #0]
 80074be:	480e      	ldr	r0, [pc, #56]	; (80074f8 <bmk6_execute.lto_priv.166+0x58>)
 80074c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80074c4:	462a      	mov	r2, r5
 80074c6:	f7fa fc63 	bl	8001d90 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80074ca:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 80074cc:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f3      	beq.n	80074ba <bmk6_execute.lto_priv.166+0x1a>
  test_print("--- Score : ");
 80074d2:	480a      	ldr	r0, [pc, #40]	; (80074fc <bmk6_execute.lto_priv.166+0x5c>)
 80074d4:	f7fa fa9c 	bl	8001a10 <test_print>
  test_printn(n);
 80074d8:	4620      	mov	r0, r4
 80074da:	f7fa faa9 	bl	8001a30 <test_printn>
  test_println(" threads/S");
 80074de:	4808      	ldr	r0, [pc, #32]	; (8007500 <bmk6_execute.lto_priv.166+0x60>)
}
 80074e0:	b003      	add	sp, #12
 80074e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80074e6:	f7fa ba73 	b.w	80019d0 <test_println>
 80074ea:	bf00      	nop
 80074ec:	20001e68 	.word	0x20001e68
 80074f0:	20001fb8 	.word	0x20001fb8
 80074f4:	08007081 	.word	0x08007081
 80074f8:	200017c8 	.word	0x200017c8
 80074fc:	0800a828 	.word	0x0800a828
 8007500:	0800a87c 	.word	0x0800a87c
 8007504:	f3af 8000 	nop.w
 8007508:	f3af 8000 	nop.w
 800750c:	f3af 8000 	nop.w

08007510 <thread8>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	4d08      	ldr	r5, [pc, #32]	; (8007538 <thread8+0x28>)

  do {
    chThdYield();
 8007516:	f7fa faeb 	bl	8001af0 <chThdYield>
    chThdYield();
 800751a:	f7fa fae9 	bl	8001af0 <chThdYield>
    chThdYield();
 800751e:	f7fa fae7 	bl	8001af0 <chThdYield>
    chThdYield();
 8007522:	f7fa fae5 	bl	8001af0 <chThdYield>
    (*(uint32_t *)p) += 4;
 8007526:	6823      	ldr	r3, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8007528:	69aa      	ldr	r2, [r5, #24]
 800752a:	3304      	adds	r3, #4
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	7f53      	ldrb	r3, [r2, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8007530:	075b      	lsls	r3, r3, #29
 8007532:	d5f0      	bpl.n	8007516 <thread8+0x6>
  return 0;
}
 8007534:	2000      	movs	r0, #0
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20001e68 	.word	0x20001e68
 800753c:	f3af 8000 	nop.w

08007540 <bmk7_execute.lto_priv.168>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8007540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007544:	4e3a      	ldr	r6, [pc, #232]	; (8007630 <bmk7_execute.lto_priv.168+0xf0>)
 8007546:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007548:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 800754a:	2400      	movs	r4, #0
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007552:	3205      	adds	r2, #5
 8007554:	4b37      	ldr	r3, [pc, #220]	; (8007634 <bmk7_execute.lto_priv.168+0xf4>)
 8007556:	4838      	ldr	r0, [pc, #224]	; (8007638 <bmk7_execute.lto_priv.168+0xf8>)
 8007558:	9400      	str	r4, [sp, #0]
 800755a:	f7fa fc19 	bl	8001d90 <chThdCreateStatic>
 800755e:	69b3      	ldr	r3, [r6, #24]
 8007560:	4d36      	ldr	r5, [pc, #216]	; (800763c <bmk7_execute.lto_priv.168+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8007568:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 800756a:	3204      	adds	r2, #4
 800756c:	4b31      	ldr	r3, [pc, #196]	; (8007634 <bmk7_execute.lto_priv.168+0xf4>)
 800756e:	9400      	str	r4, [sp, #0]
 8007570:	4833      	ldr	r0, [pc, #204]	; (8007640 <bmk7_execute.lto_priv.168+0x100>)
 8007572:	f7fa fc0d 	bl	8001d90 <chThdCreateStatic>
 8007576:	69b3      	ldr	r3, [r6, #24]
 8007578:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007580:	3203      	adds	r2, #3
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <bmk7_execute.lto_priv.168+0xf4>)
 8007584:	482f      	ldr	r0, [pc, #188]	; (8007644 <bmk7_execute.lto_priv.168+0x104>)
 8007586:	9400      	str	r4, [sp, #0]
 8007588:	f7fa fc02 	bl	8001d90 <chThdCreateStatic>
 800758c:	69b3      	ldr	r3, [r6, #24]
 800758e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007596:	3202      	adds	r2, #2
 8007598:	4b26      	ldr	r3, [pc, #152]	; (8007634 <bmk7_execute.lto_priv.168+0xf4>)
 800759a:	482b      	ldr	r0, [pc, #172]	; (8007648 <bmk7_execute.lto_priv.168+0x108>)
 800759c:	9400      	str	r4, [sp, #0]
 800759e:	f7fa fbf7 	bl	8001d90 <chThdCreateStatic>
 80075a2:	69b3      	ldr	r3, [r6, #24]
 80075a4:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80075ac:	3201      	adds	r2, #1
 80075ae:	4b21      	ldr	r3, [pc, #132]	; (8007634 <bmk7_execute.lto_priv.168+0xf4>)
 80075b0:	4826      	ldr	r0, [pc, #152]	; (800764c <bmk7_execute.lto_priv.168+0x10c>)
 80075b2:	9400      	str	r4, [sp, #0]
 80075b4:	f7fa fbec 	bl	8001d90 <chThdCreateStatic>
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80075b8:	46a1      	mov	r9, r4
 80075ba:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 80075bc:	f7fa fde0 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 80075c0:	f001 fd5e 	bl	8009080 <test_start_timer.constprop.14>
 80075c4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007660 <bmk7_execute.lto_priv.168+0x120>
 80075c8:	2720      	movs	r7, #32
 80075ca:	2620      	movs	r6, #32
 80075cc:	f387 8811 	msr	BASEPRI, r7
 80075d0:	481f      	ldr	r0, [pc, #124]	; (8007650 <bmk7_execute.lto_priv.168+0x110>)
 80075d2:	2100      	movs	r1, #0
 80075d4:	f7fb fa7c 	bl	8002ad0 <chSemResetI>
 80075d8:	2500      	movs	r5, #0
  chSchRescheduleS();
 80075da:	f7fa fb31 	bl	8001c40 <chSchRescheduleS>
 80075de:	f389 8811 	msr	BASEPRI, r9
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80075e2:	f898 3000 	ldrb.w	r3, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 80075e6:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0ee      	beq.n	80075ca <bmk7_execute.lto_priv.168+0x8a>
  test_terminate_threads();
 80075ec:	f7fa f960 	bl	80018b0 <test_terminate_threads>
 80075f0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 80075f4:	4816      	ldr	r0, [pc, #88]	; (8007650 <bmk7_execute.lto_priv.168+0x110>)
 80075f6:	4629      	mov	r1, r5
 80075f8:	f7fb fa6a 	bl	8002ad0 <chSemResetI>
  chSchRescheduleS();
 80075fc:	f7fa fb20 	bl	8001c40 <chSchRescheduleS>
 8007600:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8007604:	f7fb f80c 	bl	8002620 <test_wait_threads>

  test_print("--- Score : ");
 8007608:	4812      	ldr	r0, [pc, #72]	; (8007654 <bmk7_execute.lto_priv.168+0x114>)
 800760a:	f7fa fa01 	bl	8001a10 <test_print>
  test_printn(n);
 800760e:	4620      	mov	r0, r4
 8007610:	f7fa fa0e 	bl	8001a30 <test_printn>
  test_print(" reschedules/S, ");
 8007614:	4810      	ldr	r0, [pc, #64]	; (8007658 <bmk7_execute.lto_priv.168+0x118>)
 8007616:	f7fa f9fb 	bl	8001a10 <test_print>
  test_printn(n * 6);
 800761a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800761e:	0040      	lsls	r0, r0, #1
 8007620:	f7fa fa06 	bl	8001a30 <test_printn>
  test_println(" ctxswc/S");
 8007624:	480d      	ldr	r0, [pc, #52]	; (800765c <bmk7_execute.lto_priv.168+0x11c>)
}
 8007626:	b003      	add	sp, #12
 8007628:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 800762c:	f7fa b9d0 	b.w	80019d0 <test_println>
 8007630:	20001e68 	.word	0x20001e68
 8007634:	08007261 	.word	0x08007261
 8007638:	200017c8 	.word	0x200017c8
 800763c:	2000173c 	.word	0x2000173c
 8007640:	20001910 	.word	0x20001910
 8007644:	20001a58 	.word	0x20001a58
 8007648:	20001ba0 	.word	0x20001ba0
 800764c:	20001ce8 	.word	0x20001ce8
 8007650:	20001730 	.word	0x20001730
 8007654:	0800a828 	.word	0x0800a828
 8007658:	0800a888 	.word	0x0800a888
 800765c:	0800a870 	.word	0x0800a870
 8007660:	20001fb8 	.word	0x20001fb8
 8007664:	f3af 8000 	nop.w
 8007668:	f3af 8000 	nop.w
 800766c:	f3af 8000 	nop.w

08007670 <bmk5_execute.lto_priv.165>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8007670:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <bmk5_execute.lto_priv.165+0x50>)
 8007674:	b083      	sub	sp, #12
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007676:	699b      	ldr	r3, [r3, #24]

  uint32_t n = 0;
 8007678:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 800767a:	689d      	ldr	r5, [r3, #8]
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800767c:	4627      	mov	r7, r4
 800767e:	4e11      	ldr	r6, [pc, #68]	; (80076c4 <bmk5_execute.lto_priv.165+0x54>)

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8007680:	3d01      	subs	r5, #1
  test_wait_tick();
 8007682:	f7fa fd7d 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 8007686:	f001 fcfb 	bl	8009080 <test_start_timer.constprop.14>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 800768a:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <bmk5_execute.lto_priv.165+0x58>)
 800768c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007690:	462a      	mov	r2, r5
 8007692:	9700      	str	r7, [sp, #0]
 8007694:	480d      	ldr	r0, [pc, #52]	; (80076cc <bmk5_execute.lto_priv.165+0x5c>)
 8007696:	f7fa fb7b 	bl	8001d90 <chThdCreateStatic>
 800769a:	f7fa ffa1 	bl	80025e0 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800769e:	7833      	ldrb	r3, [r6, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 80076a0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0f1      	beq.n	800768a <bmk5_execute.lto_priv.165+0x1a>
  test_print("--- Score : ");
 80076a6:	480a      	ldr	r0, [pc, #40]	; (80076d0 <bmk5_execute.lto_priv.165+0x60>)
 80076a8:	f7fa f9b2 	bl	8001a10 <test_print>
  test_printn(n);
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7fa f9bf 	bl	8001a30 <test_printn>
  test_println(" threads/S");
 80076b2:	4808      	ldr	r0, [pc, #32]	; (80076d4 <bmk5_execute.lto_priv.165+0x64>)
}
 80076b4:	b003      	add	sp, #12
 80076b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 80076ba:	f7fa b989 	b.w	80019d0 <test_println>
 80076be:	bf00      	nop
 80076c0:	20001e68 	.word	0x20001e68
 80076c4:	20001fb8 	.word	0x20001fb8
 80076c8:	08007081 	.word	0x08007081
 80076cc:	200017c8 	.word	0x200017c8
 80076d0:	0800a828 	.word	0x0800a828
 80076d4:	0800a87c 	.word	0x0800a87c
 80076d8:	f3af 8000 	nop.w
 80076dc:	f3af 8000 	nop.w

080076e0 <bmk4_execute.lto_priv.164>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 80076e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80076e4:	4b25      	ldr	r3, [pc, #148]	; (800777c <bmk4_execute.lto_priv.164+0x9c>)
 80076e6:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80076e8:	699b      	ldr	r3, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 80076ea:	2500      	movs	r5, #0
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80076f2:	3201      	adds	r2, #1
 80076f4:	4b22      	ldr	r3, [pc, #136]	; (8007780 <bmk4_execute.lto_priv.164+0xa0>)
 80076f6:	4823      	ldr	r0, [pc, #140]	; (8007784 <bmk4_execute.lto_priv.164+0xa4>)
 80076f8:	9500      	str	r5, [sp, #0]
 80076fa:	f7fa fb49 	bl	8001d90 <chThdCreateStatic>
 80076fe:	4b22      	ldr	r3, [pc, #136]	; (8007788 <bmk4_execute.lto_priv.164+0xa8>)
 8007700:	4604      	mov	r4, r0
 8007702:	6018      	str	r0, [r3, #0]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8007704:	46aa      	mov	sl, r5
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8007706:	f7fa fd3b 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 800770a:	f001 fcb9 	bl	8009080 <test_start_timer.constprop.14>
 800770e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8007794 <bmk4_execute.lto_priv.164+0xb4>
 8007712:	f04f 0820 	mov.w	r8, #32
 8007716:	2720      	movs	r7, #32
 8007718:	f388 8811 	msr	BASEPRI, r8
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 800771c:	2100      	movs	r1, #0
 800771e:	4620      	mov	r0, r4
 8007720:	f7fa fab6 	bl	8001c90 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007724:	4620      	mov	r0, r4
 8007726:	2100      	movs	r1, #0
 8007728:	f7fa fab2 	bl	8001c90 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 800772c:	4620      	mov	r0, r4
 800772e:	2100      	movs	r1, #0
 8007730:	f7fa faae 	bl	8001c90 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007734:	4620      	mov	r0, r4
 8007736:	2100      	movs	r1, #0
 8007738:	f7fa faaa 	bl	8001c90 <chSchWakeupS>
 800773c:	2600      	movs	r6, #0
 800773e:	f38a 8811 	msr	BASEPRI, sl
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007742:	f899 3000 	ldrb.w	r3, [r9]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8007746:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0e4      	beq.n	8007716 <bmk4_execute.lto_priv.164+0x36>
 800774c:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8007750:	f04f 31ff 	mov.w	r1, #4294967295
 8007754:	4620      	mov	r0, r4
 8007756:	f7fa fa9b 	bl	8001c90 <chSchWakeupS>
 800775a:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  test_wait_threads();
 800775e:	f7fa ff5f 	bl	8002620 <test_wait_threads>
  test_print("--- Score : ");
 8007762:	480a      	ldr	r0, [pc, #40]	; (800778c <bmk4_execute.lto_priv.164+0xac>)
 8007764:	f7fa f954 	bl	8001a10 <test_print>
  test_printn(n * 2);
 8007768:	0068      	lsls	r0, r5, #1
 800776a:	f7fa f961 	bl	8001a30 <test_printn>
  test_println(" ctxswc/S");
 800776e:	4808      	ldr	r0, [pc, #32]	; (8007790 <bmk4_execute.lto_priv.164+0xb0>)
}
 8007770:	b002      	add	sp, #8
 8007772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8007776:	f7fa b92b 	b.w	80019d0 <test_println>
 800777a:	bf00      	nop
 800777c:	20001e68 	.word	0x20001e68
 8007780:	080077a1 	.word	0x080077a1
 8007784:	200017c8 	.word	0x200017c8
 8007788:	2000173c 	.word	0x2000173c
 800778c:	0800a828 	.word	0x0800a828
 8007790:	0800a870 	.word	0x0800a870
 8007794:	20001fb8 	.word	0x20001fb8
 8007798:	f3af 8000 	nop.w
 800779c:	f3af 8000 	nop.w

080077a0 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80077a0:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 80077a2:	b510      	push	{r4, lr}
 80077a4:	2320      	movs	r3, #32
 80077a6:	6994      	ldr	r4, [r2, #24]
 80077a8:	f383 8811 	msr	BASEPRI, r3
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 80077ac:	2003      	movs	r0, #3
 80077ae:	f7fa fb2f 	bl	8001e10 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 80077b2:	6a23      	ldr	r3, [r4, #32]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f9      	beq.n	80077ac <thread4+0xc>
 80077b8:	2000      	movs	r0, #0
 80077ba:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 80077be:	bd10      	pop	{r4, pc}
 80077c0:	20001e68 	.word	0x20001e68
 80077c4:	f3af 8000 	nop.w
 80077c8:	f3af 8000 	nop.w
 80077cc:	f3af 8000 	nop.w

080077d0 <thread2.lto_priv.100>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	2620      	movs	r6, #32
 80077d4:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80077d6:	f7fa fb33 	bl	8001e40 <chMsgWait>
 80077da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80077dc:	f386 8811 	msr	BASEPRI, r6
 80077e0:	4621      	mov	r1, r4
 80077e2:	f7fa fa55 	bl	8001c90 <chSchWakeupS>
 80077e6:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	d1f3      	bne.n	80077d6 <thread2.lto_priv.100+0x6>
  return 0;
}
 80077ee:	4620      	mov	r0, r4
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	bf00      	nop
 80077f4:	f3af 8000 	nop.w
 80077f8:	f3af 8000 	nop.w
 80077fc:	f3af 8000 	nop.w

08007800 <msg_loop_test>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8007804:	f7fa fcbc 	bl	8002180 <test_wait_tick>
  test_start_timer(1000);
 8007808:	f001 fc3a 	bl	8009080 <test_start_timer.constprop.14>
 800780c:	4e07      	ldr	r6, [pc, #28]	; (800782c <msg_loop_test+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 800780e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8007810:	4628      	mov	r0, r5
 8007812:	2101      	movs	r1, #1
 8007814:	f7fa fd0c 	bl	8002230 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007818:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 800781a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f7      	beq.n	8007810 <msg_loop_test+0x10>
  (void)chMsgSend(tp, 0);
 8007820:	4628      	mov	r0, r5
 8007822:	2100      	movs	r1, #0
 8007824:	f7fa fd04 	bl	8002230 <chMsgSend>
  return n;
}
 8007828:	4620      	mov	r0, r4
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	20001fb8 	.word	0x20001fb8

08007830 <bmk3_execute.lto_priv.163>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	4f2c      	ldr	r7, [pc, #176]	; (80078e8 <bmk3_execute.lto_priv.163+0xb8>)
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007836:	4e2d      	ldr	r6, [pc, #180]	; (80078ec <bmk3_execute.lto_priv.163+0xbc>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007838:	69bb      	ldr	r3, [r7, #24]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 800783a:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	2500      	movs	r5, #0
 8007840:	4630      	mov	r0, r6
 8007842:	3201      	adds	r2, #1
 8007844:	9500      	str	r5, [sp, #0]
 8007846:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800784a:	4b29      	ldr	r3, [pc, #164]	; (80078f0 <bmk3_execute.lto_priv.163+0xc0>)
 800784c:	f7fa faa0 	bl	8001d90 <chThdCreateStatic>
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	4c28      	ldr	r4, [pc, #160]	; (80078f4 <bmk3_execute.lto_priv.163+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007904 <bmk3_execute.lto_priv.163+0xd4>
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800785a:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 800785c:	4643      	mov	r3, r8
 800785e:	3a02      	subs	r2, #2
 8007860:	9500      	str	r5, [sp, #0]
 8007862:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 8007866:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800786a:	f7fa fa91 	bl	8001d90 <chThdCreateStatic>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8007878:	4643      	mov	r3, r8
 800787a:	3a03      	subs	r2, #3
 800787c:	9500      	str	r5, [sp, #0]
 800787e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007882:	f7fa fa85 	bl	8001d90 <chThdCreateStatic>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8007890:	4643      	mov	r3, r8
 8007892:	3a04      	subs	r2, #4
 8007894:	9500      	str	r5, [sp, #0]
 8007896:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800789a:	f7fa fa79 	bl	8001d90 <chThdCreateStatic>
 800789e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 80078a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80078a4:	689a      	ldr	r2, [r3, #8]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 80078a6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 80078a8:	3a05      	subs	r2, #5
 80078aa:	4643      	mov	r3, r8
 80078ac:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80078b0:	9500      	str	r5, [sp, #0]
 80078b2:	f7fa fa6d 	bl	8001d90 <chThdCreateStatic>
 80078b6:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	f7ff ffa1 	bl	8007800 <msg_loop_test>
 80078be:	4604      	mov	r4, r0
  test_wait_threads();
 80078c0:	f7fa feae 	bl	8002620 <test_wait_threads>
  test_print("--- Score : ");
 80078c4:	480c      	ldr	r0, [pc, #48]	; (80078f8 <bmk3_execute.lto_priv.163+0xc8>)
 80078c6:	f7fa f8a3 	bl	8001a10 <test_print>
  test_printn(n);
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7fa f8b0 	bl	8001a30 <test_printn>
  test_print(" msgs/S, ");
 80078d0:	480a      	ldr	r0, [pc, #40]	; (80078fc <bmk3_execute.lto_priv.163+0xcc>)
 80078d2:	f7fa f89d 	bl	8001a10 <test_print>
  test_printn(n << 1);
 80078d6:	0060      	lsls	r0, r4, #1
 80078d8:	f7fa f8aa 	bl	8001a30 <test_printn>
  test_println(" ctxswc/S");
 80078dc:	4808      	ldr	r0, [pc, #32]	; (8007900 <bmk3_execute.lto_priv.163+0xd0>)
}
 80078de:	b002      	add	sp, #8
 80078e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80078e4:	f7fa b874 	b.w	80019d0 <test_println>
 80078e8:	20001e68 	.word	0x20001e68
 80078ec:	200017c8 	.word	0x200017c8
 80078f0:	080077d1 	.word	0x080077d1
 80078f4:	2000173c 	.word	0x2000173c
 80078f8:	0800a828 	.word	0x0800a828
 80078fc:	0800a89c 	.word	0x0800a89c
 8007900:	0800a870 	.word	0x0800a870
 8007904:	08007081 	.word	0x08007081
 8007908:	f3af 8000 	nop.w
 800790c:	f3af 8000 	nop.w

08007910 <bmk2_execute.lto_priv.162>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8007910:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007912:	4a13      	ldr	r2, [pc, #76]	; (8007960 <bmk2_execute.lto_priv.162+0x50>)
 8007914:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007916:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007918:	2300      	movs	r3, #0
 800791a:	6892      	ldr	r2, [r2, #8]
 800791c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007920:	3201      	adds	r2, #1
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	480f      	ldr	r0, [pc, #60]	; (8007964 <bmk2_execute.lto_priv.162+0x54>)
 8007926:	4b10      	ldr	r3, [pc, #64]	; (8007968 <bmk2_execute.lto_priv.162+0x58>)
 8007928:	f7fa fa32 	bl	8001d90 <chThdCreateStatic>
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <bmk2_execute.lto_priv.162+0x5c>)
 800792e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 8007930:	f7ff ff66 	bl	8007800 <msg_loop_test>
 8007934:	4604      	mov	r4, r0
  test_wait_threads();
 8007936:	f7fa fe73 	bl	8002620 <test_wait_threads>
  test_print("--- Score : ");
 800793a:	480d      	ldr	r0, [pc, #52]	; (8007970 <bmk2_execute.lto_priv.162+0x60>)
 800793c:	f7fa f868 	bl	8001a10 <test_print>
  test_printn(n);
 8007940:	4620      	mov	r0, r4
 8007942:	f7fa f875 	bl	8001a30 <test_printn>
  test_print(" msgs/S, ");
 8007946:	480b      	ldr	r0, [pc, #44]	; (8007974 <bmk2_execute.lto_priv.162+0x64>)
 8007948:	f7fa f862 	bl	8001a10 <test_print>
  test_printn(n << 1);
 800794c:	0060      	lsls	r0, r4, #1
 800794e:	f7fa f86f 	bl	8001a30 <test_printn>
  test_println(" ctxswc/S");
 8007952:	4809      	ldr	r0, [pc, #36]	; (8007978 <bmk2_execute.lto_priv.162+0x68>)
}
 8007954:	b002      	add	sp, #8
 8007956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800795a:	f7fa b839 	b.w	80019d0 <test_println>
 800795e:	bf00      	nop
 8007960:	20001e68 	.word	0x20001e68
 8007964:	200017c8 	.word	0x200017c8
 8007968:	080077d1 	.word	0x080077d1
 800796c:	2000173c 	.word	0x2000173c
 8007970:	0800a828 	.word	0x0800a828
 8007974:	0800a89c 	.word	0x0800a89c
 8007978:	0800a870 	.word	0x0800a870
 800797c:	f3af 8000 	nop.w

08007980 <bmk1_execute.lto_priv.161>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8007980:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007982:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <bmk1_execute.lto_priv.161+0x50>)
 8007984:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007986:	6992      	ldr	r2, [r2, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8007988:	2300      	movs	r3, #0
 800798a:	6892      	ldr	r2, [r2, #8]
 800798c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007990:	3a01      	subs	r2, #1
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	480f      	ldr	r0, [pc, #60]	; (80079d4 <bmk1_execute.lto_priv.161+0x54>)
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <bmk1_execute.lto_priv.161+0x58>)
 8007998:	f7fa f9fa 	bl	8001d90 <chThdCreateStatic>
 800799c:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <bmk1_execute.lto_priv.161+0x5c>)
 800799e:	6018      	str	r0, [r3, #0]
  n = msg_loop_test(threads[0]);
 80079a0:	f7ff ff2e 	bl	8007800 <msg_loop_test>
 80079a4:	4604      	mov	r4, r0
  test_wait_threads();
 80079a6:	f7fa fe3b 	bl	8002620 <test_wait_threads>
  test_print("--- Score : ");
 80079aa:	480d      	ldr	r0, [pc, #52]	; (80079e0 <bmk1_execute.lto_priv.161+0x60>)
 80079ac:	f7fa f830 	bl	8001a10 <test_print>
  test_printn(n);
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7fa f83d 	bl	8001a30 <test_printn>
  test_print(" msgs/S, ");
 80079b6:	480b      	ldr	r0, [pc, #44]	; (80079e4 <bmk1_execute.lto_priv.161+0x64>)
 80079b8:	f7fa f82a 	bl	8001a10 <test_print>
  test_printn(n << 1);
 80079bc:	0060      	lsls	r0, r4, #1
 80079be:	f7fa f837 	bl	8001a30 <test_printn>
  test_println(" ctxswc/S");
 80079c2:	4809      	ldr	r0, [pc, #36]	; (80079e8 <bmk1_execute.lto_priv.161+0x68>)
}
 80079c4:	b002      	add	sp, #8
 80079c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80079ca:	f7fa b801 	b.w	80019d0 <test_println>
 80079ce:	bf00      	nop
 80079d0:	20001e68 	.word	0x20001e68
 80079d4:	200017c8 	.word	0x200017c8
 80079d8:	080077d1 	.word	0x080077d1
 80079dc:	2000173c 	.word	0x2000173c
 80079e0:	0800a828 	.word	0x0800a828
 80079e4:	0800a89c 	.word	0x0800a89c
 80079e8:	0800a870 	.word	0x0800a870
 80079ec:	f3af 8000 	nop.w

080079f0 <thread2.lto_priv.99>:
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 80079f0:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 80079f2:	2100      	movs	r1, #0
 80079f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80079f8:	4802      	ldr	r0, [pc, #8]	; (8007a04 <thread2.lto_priv.99+0x14>)
 80079fa:	f7fa fb21 	bl	8002040 <chOQPutTimeout>
  return 0;
}
 80079fe:	2000      	movs	r0, #0
 8007a00:	bd08      	pop	{r3, pc}
 8007a02:	bf00      	nop
 8007a04:	20000cc0 	.word	0x20000cc0
 8007a08:	f3af 8000 	nop.w
 8007a0c:	f3af 8000 	nop.w

08007a10 <queues2_execute.lto_priv.160>:

static void queues2_execute(void) {
 8007a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a14:	2320      	movs	r3, #32
 8007a16:	b083      	sub	sp, #12
 8007a18:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8007a1c:	4e86      	ldr	r6, [pc, #536]	; (8007c38 <queues2_execute.lto_priv.160+0x228>)
 8007a1e:	6972      	ldr	r2, [r6, #20]
 8007a20:	69b3      	ldr	r3, [r6, #24]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d05b      	beq.n	8007ade <queues2_execute.lto_priv.160+0xce>
 8007a26:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7f9 ffa1 	bl	8001970 <_test_assert>
 8007a2e:	bbb8      	cbnz	r0, 8007aa0 <queues2_execute.lto_priv.160+0x90>
 8007a30:	f380 8811 	msr	BASEPRI, r0
 8007a34:	2441      	movs	r4, #65	; 0x41
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8007a36:	4d80      	ldr	r5, [pc, #512]	; (8007c38 <queues2_execute.lto_priv.160+0x228>)
 8007a38:	4621      	mov	r1, r4
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a42:	b2e4      	uxtb	r4, r4
 8007a44:	f7fa fafc 	bl	8002040 <chOQPutTimeout>

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
 8007a48:	2c45      	cmp	r4, #69	; 0x45
 8007a4a:	d1f4      	bne.n	8007a36 <queues2_execute.lto_priv.160+0x26>
 8007a4c:	2420      	movs	r4, #32
 8007a4e:	f384 8811 	msr	BASEPRI, r4
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8007a52:	68a9      	ldr	r1, [r5, #8]
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8007a54:	2002      	movs	r0, #2
 8007a56:	fab1 f181 	clz	r1, r1
 8007a5a:	0949      	lsrs	r1, r1, #5
 8007a5c:	f7f9 ff88 	bl	8001970 <_test_assert>
 8007a60:	4607      	mov	r7, r0
 8007a62:	b9e8      	cbnz	r0, 8007aa0 <queues2_execute.lto_priv.160+0x90>
 8007a64:	f380 8811 	msr	BASEPRI, r0
 8007a68:	4681      	mov	r9, r0
 8007a6a:	4625      	mov	r5, r4
 8007a6c:	2404      	movs	r4, #4
 8007a6e:	f04f 0820 	mov.w	r8, #32
 8007a72:	f385 8811 	msr	BASEPRI, r5
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8007a76:	f001 fadb 	bl	8009030 <chOQGetI.constprop.18>
 8007a7a:	f389 8811 	msr	BASEPRI, r9
    chSysUnlock();
    test_emit_token(c);
 8007a7e:	b2c0      	uxtb	r0, r0
 8007a80:	f7f9 ff8e 	bl	80019a0 <test_emit_token>
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
 8007a84:	3c01      	subs	r4, #1
 8007a86:	d1f2      	bne.n	8007a6e <queues2_execute.lto_priv.160+0x5e>
 8007a88:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8007a8c:	6972      	ldr	r2, [r6, #20]
 8007a8e:	69b3      	ldr	r3, [r6, #24]
 8007a90:	4969      	ldr	r1, [pc, #420]	; (8007c38 <queues2_execute.lto_priv.160+0x228>)
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d028      	beq.n	8007ae8 <queues2_execute.lto_priv.160+0xd8>
    chSysLock();
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 8007a96:	4639      	mov	r1, r7
 8007a98:	2003      	movs	r0, #3
 8007a9a:	f7f9 ff69 	bl	8001970 <_test_assert>
 8007a9e:	b128      	cbz	r0, 8007aac <queues2_execute.lto_priv.160+0x9c>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f383 8811 	msr	BASEPRI, r3
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aac:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 8007ab0:	2004      	movs	r0, #4
 8007ab2:	4962      	ldr	r1, [pc, #392]	; (8007c3c <queues2_execute.lto_priv.160+0x22c>)
 8007ab4:	f7f9 ff34 	bl	8001920 <_test_assert_sequence>
 8007ab8:	4604      	mov	r4, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d1f3      	bne.n	8007aa6 <queues2_execute.lto_priv.160+0x96>
 8007abe:	2520      	movs	r5, #32
 8007ac0:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8007ac4:	f001 fab4 	bl	8009030 <chOQGetI.constprop.18>
 8007ac8:	3003      	adds	r0, #3
 8007aca:	bf14      	ite	ne
 8007acc:	2100      	movne	r1, #0
 8007ace:	2101      	moveq	r1, #1
 8007ad0:	2005      	movs	r0, #5
 8007ad2:	f7f9 ff4d 	bl	8001970 <_test_assert>
 8007ad6:	b160      	cbz	r0, 8007af2 <queues2_execute.lto_priv.160+0xe2>
 8007ad8:	f384 8811 	msr	BASEPRI, r4
 8007adc:	e7e3      	b.n	8007aa6 <queues2_execute.lto_priv.160+0x96>
 8007ade:	68b1      	ldr	r1, [r6, #8]
 8007ae0:	3100      	adds	r1, #0
 8007ae2:	bf18      	it	ne
 8007ae4:	2101      	movne	r1, #1
 8007ae6:	e79f      	b.n	8007a28 <queues2_execute.lto_priv.160+0x18>
 8007ae8:	688f      	ldr	r7, [r1, #8]
 8007aea:	3700      	adds	r7, #0
 8007aec:	bf18      	it	ne
 8007aee:	2701      	movne	r7, #1
 8007af0:	e7d1      	b.n	8007a96 <queues2_execute.lto_priv.160+0x86>
 8007af2:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8007af6:	4c50      	ldr	r4, [pc, #320]	; (8007c38 <queues2_execute.lto_priv.160+0x228>)
 8007af8:	4603      	mov	r3, r0
 8007afa:	4951      	ldr	r1, [pc, #324]	; (8007c40 <queues2_execute.lto_priv.160+0x230>)
 8007afc:	2208      	movs	r2, #8
 8007afe:	4620      	mov	r0, r4
 8007b00:	f7fa fa56 	bl	8001fb0 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8007b04:	f1a0 0104 	sub.w	r1, r0, #4
 8007b08:	fab1 f181 	clz	r1, r1
 8007b0c:	2006      	movs	r0, #6
 8007b0e:	0949      	lsrs	r1, r1, #5
 8007b10:	f7f9 ff2e 	bl	8001970 <_test_assert>
 8007b14:	4606      	mov	r6, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d1c5      	bne.n	8007aa6 <queues2_execute.lto_priv.160+0x96>
 8007b1a:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8007b1e:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8007b20:	2007      	movs	r0, #7
 8007b22:	fab1 f181 	clz	r1, r1
 8007b26:	0949      	lsrs	r1, r1, #5
 8007b28:	f7f9 ff22 	bl	8001970 <_test_assert>
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	b110      	cbz	r0, 8007b36 <queues2_execute.lto_priv.160+0x126>
 8007b30:	f386 8811 	msr	BASEPRI, r6
 8007b34:	e7b7      	b.n	8007aa6 <queues2_execute.lto_priv.160+0x96>
 8007b36:	f380 8811 	msr	BASEPRI, r0
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007b3a:	4b42      	ldr	r3, [pc, #264]	; (8007c44 <queues2_execute.lto_priv.160+0x234>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007b3c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	4841      	ldr	r0, [pc, #260]	; (8007c48 <queues2_execute.lto_priv.160+0x238>)
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <queues2_execute.lto_priv.160+0x23c>)
 8007b48:	3201      	adds	r2, #1
 8007b4a:	9700      	str	r7, [sp, #0]
 8007b4c:	f7fa f920 	bl	8001d90 <chThdCreateStatic>
 8007b50:	4b3f      	ldr	r3, [pc, #252]	; (8007c50 <queues2_execute.lto_priv.160+0x240>)
 8007b52:	6018      	str	r0, [r3, #0]
 8007b54:	f385 8811 	msr	BASEPRI, r5
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8007b58:	68e1      	ldr	r1, [r4, #12]
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	68a2      	ldr	r2, [r4, #8]
 8007b5e:	1a5b      	subs	r3, r3, r1
 8007b60:	1a99      	subs	r1, r3, r2
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 8007b62:	f1a1 0104 	sub.w	r1, r1, #4
 8007b66:	fab1 f181 	clz	r1, r1
 8007b6a:	2008      	movs	r0, #8
 8007b6c:	0949      	lsrs	r1, r1, #5
 8007b6e:	f7f9 feff 	bl	8001970 <_test_assert>
 8007b72:	4606      	mov	r6, r0
 8007b74:	b110      	cbz	r0, 8007b7c <queues2_execute.lto_priv.160+0x16c>
 8007b76:	f387 8811 	msr	BASEPRI, r7
 8007b7a:	e794      	b.n	8007aa6 <queues2_execute.lto_priv.160+0x96>
 8007b7c:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8007b80:	f7fa fd4e 	bl	8002620 <test_wait_threads>
 8007b84:	f385 8811 	msr	BASEPRI, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8007b88:	68e2      	ldr	r2, [r4, #12]
  oqp->q_counter = chQSizeI(oqp);
 8007b8a:	6923      	ldr	r3, [r4, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8007b8c:	4620      	mov	r0, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 8007b8e:	1a9b      	subs	r3, r3, r2
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8007b90:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8007b94:	6162      	str	r2, [r4, #20]
 8007b96:	61a2      	str	r2, [r4, #24]
  oqp->q_counter = chQSizeI(oqp);
 8007b98:	60a3      	str	r3, [r4, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8007b9a:	f7fa ffb1 	bl	8002b00 <chThdDequeueAllI>
 8007b9e:	f386 8811 	msr	BASEPRI, r6
 8007ba2:	f385 8811 	msr	BASEPRI, r5

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 8007ba6:	f104 0108 	add.w	r1, r4, #8
 8007baa:	c90e      	ldmia	r1, {r1, r2, r3}
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	1a59      	subs	r1, r3, r1
 8007bb0:	fab1 f181 	clz	r1, r1
 8007bb4:	2009      	movs	r0, #9
 8007bb6:	0949      	lsrs	r1, r1, #5
 8007bb8:	f7f9 feda 	bl	8001970 <_test_assert>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d1b6      	bne.n	8007b30 <queues2_execute.lto_priv.160+0x120>
 8007bc2:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8007bc6:	491e      	ldr	r1, [pc, #120]	; (8007c40 <queues2_execute.lto_priv.160+0x230>)
 8007bc8:	2202      	movs	r2, #2
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7fa f9f0 	bl	8001fb0 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8007bd0:	3802      	subs	r0, #2
 8007bd2:	4241      	negs	r1, r0
 8007bd4:	4141      	adcs	r1, r0
 8007bd6:	200a      	movs	r0, #10
 8007bd8:	f7f9 feca 	bl	8001970 <_test_assert>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f47f af61 	bne.w	8007aa6 <queues2_execute.lto_priv.160+0x96>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8007be4:	4916      	ldr	r1, [pc, #88]	; (8007c40 <queues2_execute.lto_priv.160+0x230>)
 8007be6:	2202      	movs	r2, #2
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7fa f9e1 	bl	8001fb0 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8007bee:	1e82      	subs	r2, r0, #2
 8007bf0:	4251      	negs	r1, r2
 8007bf2:	4151      	adcs	r1, r2
 8007bf4:	200b      	movs	r0, #11
 8007bf6:	f7f9 febb 	bl	8001970 <_test_assert>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f47f af53 	bne.w	8007aa6 <queues2_execute.lto_priv.160+0x96>
 8007c00:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8007c04:	68a1      	ldr	r1, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8007c06:	200c      	movs	r0, #12
 8007c08:	fab1 f181 	clz	r1, r1
 8007c0c:	0949      	lsrs	r1, r1, #5
 8007c0e:	f7f9 feaf 	bl	8001970 <_test_assert>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f47f af44 	bne.w	8007aa0 <queues2_execute.lto_priv.160+0x90>
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8007c1e:	220a      	movs	r2, #10
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <queues2_execute.lto_priv.160+0x228>)
 8007c22:	f7fa fa0d 	bl	8002040 <chOQPutTimeout>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	4259      	negs	r1, r3
 8007c2a:	4159      	adcs	r1, r3
 8007c2c:	200d      	movs	r0, #13
}
 8007c2e:	b003      	add	sp, #12
 8007c30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8007c34:	f7f9 be9c 	b.w	8001970 <_test_assert>
 8007c38:	20000cc0 	.word	0x20000cc0
 8007c3c:	0800a750 	.word	0x0800a750
 8007c40:	20001910 	.word	0x20001910
 8007c44:	20001e68 	.word	0x20001e68
 8007c48:	200017c8 	.word	0x200017c8
 8007c4c:	080079f1 	.word	0x080079f1
 8007c50:	2000173c 	.word	0x2000173c
 8007c54:	f3af 8000 	nop.w
 8007c58:	f3af 8000 	nop.w
 8007c5c:	f3af 8000 	nop.w

08007c60 <gptStart>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] config    pointer to the @p GPTConfig object
 *
 * @api
 */
void gptStart(GPTDriver *gptp, const GPTConfig *config) {
 8007c60:	b4f0      	push	{r4, r5, r6, r7}
 8007c62:	2320      	movs	r3, #32
 8007c64:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 8007c68:	7803      	ldrb	r3, [r0, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8007c6a:	6041      	str	r1, [r0, #4]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d017      	beq.n	8007ca0 <gptStart+0x40>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007c70:	6842      	ldr	r2, [r0, #4]
 8007c72:	6883      	ldr	r3, [r0, #8]
 8007c74:	6811      	ldr	r1, [r2, #0]
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8007c76:	68d4      	ldr	r4, [r2, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007c78:	fbb3 f3f1 	udiv	r3, r3, r1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
 8007c7c:	6896      	ldr	r6, [r2, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007c7e:	3b01      	subs	r3, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8007c80:	68c2      	ldr	r2, [r0, #12]
 8007c82:	2100      	movs	r1, #0
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 8007c84:	b29b      	uxth	r3, r3
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8007c86:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
 8007c8a:	2502      	movs	r5, #2
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 8007c8c:	6011      	str	r1, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 8007c8e:	6056      	str	r6, [r2, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 8007c90:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 8007c92:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 8007c94:	60d4      	str	r4, [r2, #12]
 8007c96:	7005      	strb	r5, [r0, #0]
 8007c98:	f381 8811 	msr	BASEPRI, r1
  osalSysUnlock();
}
 8007c9c:	bcf0      	pop	{r4, r5, r6, r7}
 8007c9e:	4770      	bx	lr
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 8007ca0:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <gptStart+0xa8>)
 8007ca2:	4298      	cmp	r0, r3
 8007ca4:	d019      	beq.n	8007cda <gptStart+0x7a>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 8007ca6:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <gptStart+0xac>)
 8007ca8:	4298      	cmp	r0, r3
 8007caa:	d1e1      	bne.n	8007c70 <gptStart+0x10>
      rccEnableTIM4(FALSE);
 8007cac:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <gptStart+0xb0>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8007cae:	4a19      	ldr	r2, [pc, #100]	; (8007d14 <gptStart+0xb4>)
 8007cb0:	69d9      	ldr	r1, [r3, #28]
      rccResetTIM4();
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8007cb2:	4d19      	ldr	r5, [pc, #100]	; (8007d18 <gptStart+0xb8>)
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
 8007cb4:	f041 0104 	orr.w	r1, r1, #4
 8007cb8:	61d9      	str	r1, [r3, #28]
      rccResetTIM4();
 8007cba:	6919      	ldr	r1, [r3, #16]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8007cbc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8007cc0:	2700      	movs	r7, #0
 8007cc2:	f041 0104 	orr.w	r1, r1, #4
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8007cc6:	2670      	movs	r6, #112	; 0x70
 8007cc8:	6119      	str	r1, [r3, #16]
 8007cca:	611f      	str	r7, [r3, #16]
 8007ccc:	f882 631e 	strb.w	r6, [r2, #798]	; 0x31e
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8007cd0:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8007cd4:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8007cd6:	6085      	str	r5, [r0, #8]
 8007cd8:	e7ca      	b.n	8007c70 <gptStart+0x10>
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 8007cda:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <gptStart+0xb0>)
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8007cdc:	4a0d      	ldr	r2, [pc, #52]	; (8007d14 <gptStart+0xb4>)
 8007cde:	69d9      	ldr	r1, [r3, #28]
      rccResetTIM3();
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8007ce0:	4d0d      	ldr	r5, [pc, #52]	; (8007d18 <gptStart+0xb8>)
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 8007ce2:	f041 0102 	orr.w	r1, r1, #2
 8007ce6:	61d9      	str	r1, [r3, #28]
      rccResetTIM3();
 8007ce8:	6919      	ldr	r1, [r3, #16]
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8007cea:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8007cee:	2700      	movs	r7, #0
 8007cf0:	f041 0102 	orr.w	r1, r1, #2
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8007cf4:	2670      	movs	r6, #112	; 0x70
 8007cf6:	6119      	str	r1, [r3, #16]
 8007cf8:	611f      	str	r7, [r3, #16]
 8007cfa:	f882 631d 	strb.w	r6, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8007cfe:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8007d02:	6014      	str	r4, [r2, #0]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8007d04:	6085      	str	r5, [r0, #8]
 8007d06:	e7b3      	b.n	8007c70 <gptStart+0x10>
 8007d08:	20001fbc 	.word	0x20001fbc
 8007d0c:	20001784 	.word	0x20001784
 8007d10:	40021000 	.word	0x40021000
 8007d14:	e000e100 	.word	0xe000e100
 8007d18:	02dc6c00 	.word	0x02dc6c00
 8007d1c:	f3af 8000 	nop.w

08007d20 <si446x_set_frequency>:
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007d24:	4b64      	ldr	r3, [pc, #400]	; (8007eb8 <si446x_set_frequency+0x198>)
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8007d26:	b087      	sub	sp, #28
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007d28:	4298      	cmp	r0, r3
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8007d2a:	4604      	mov	r4, r0
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007d2c:	f200 8096 	bhi.w	8007e5c <si446x_set_frequency+0x13c>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8007d30:	4b62      	ldr	r3, [pc, #392]	; (8007ebc <si446x_set_frequency+0x19c>)
 8007d32:	4298      	cmp	r0, r3
 8007d34:	f200 80a0 	bhi.w	8007e78 <si446x_set_frequency+0x158>
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8007d38:	4b61      	ldr	r3, [pc, #388]	; (8007ec0 <si446x_set_frequency+0x1a0>)
 8007d3a:	4298      	cmp	r0, r3
 8007d3c:	f200 80b4 	bhi.w	8007ea8 <si446x_set_frequency+0x188>
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8007d40:	4b60      	ldr	r3, [pc, #384]	; (8007ec4 <si446x_set_frequency+0x1a4>)
 8007d42:	4298      	cmp	r0, r3
 8007d44:	f200 80a8 	bhi.w	8007e98 <si446x_set_frequency+0x178>
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
 8007d48:	4b5f      	ldr	r3, [pc, #380]	; (8007ec8 <si446x_set_frequency+0x1a8>)
 8007d4a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8007ef0 <si446x_set_frequency+0x1d0>
 8007d4e:	4298      	cmp	r0, r3
 8007d50:	f200 809a 	bhi.w	8007e88 <si446x_set_frequency+0x168>
 8007d54:	2318      	movs	r3, #24
 8007d56:	4e5d      	ldr	r6, [pc, #372]	; (8007ecc <si446x_set_frequency+0x1ac>)
 8007d58:	4d5d      	ldr	r5, [pc, #372]	; (8007ed0 <si446x_set_frequency+0x1b0>)
 8007d5a:	f88a 3000 	strb.w	r3, [sl]
 8007d5e:	f04f 0b0d 	mov.w	fp, #13
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7f9 f9ca 	bl	80010fc <__aeabi_ui2f>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8007d68:	fbb4 f8f5 	udiv	r8, r4, r5
	float ratio = (float)freq / (float)f_pfd;
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	f7f9 fad3 	bl	8001318 <__aeabi_fdiv>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8007d72:	f108 38ff 	add.w	r8, r8, #4294967295
	float ratio = (float)freq / (float)f_pfd;
 8007d76:	4604      	mov	r4, r0
	float rest = ratio - (float)n;
 8007d78:	4640      	mov	r0, r8
 8007d7a:	f7f9 f9bf 	bl	80010fc <__aeabi_ui2f>
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7f9 f909 	bl	8000f98 <__aeabi_fsub>
	uint32_t m = (unsigned long)(rest * 524288UL);
 8007d86:	f04f 4192 	mov.w	r1, #1224736768	; 0x49000000
 8007d8a:	f7f9 fa11 	bl	80011b0 <__aeabi_fmul>
 8007d8e:	f7f9 fbff 	bl	8001590 <__aeabi_f2uiz>
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 8007d92:	4a50      	ldr	r2, [pc, #320]	; (8007ed4 <si446x_set_frequency+0x1b4>)
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
 8007d94:	4681      	mov	r9, r0
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8007d96:	2711      	movs	r7, #17
 8007d98:	2601      	movs	r6, #1
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007d9a:	a902      	add	r1, sp, #8
 8007d9c:	ab01      	add	r3, sp, #4
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 8007d9e:	f882 b000 	strb.w	fp, [r2]
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8007da2:	2520      	movs	r5, #32
 8007da4:	2451      	movs	r4, #81	; 0x51
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2005      	movs	r0, #5
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8007daa:	f88d 5009 	strb.w	r5, [sp, #9]
 8007dae:	f88d 400b 	strb.w	r4, [sp, #11]
 8007db2:	f88d b00c 	strb.w	fp, [sp, #12]
 8007db6:	f88d 7008 	strb.w	r7, [sp, #8]
 8007dba:	f88d 600a 	strb.w	r6, [sp, #10]
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007dbe:	f7fe fb77 	bl	80064b0 <si446x_spi>
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 8007dc2:	4b45      	ldr	r3, [pc, #276]	; (8007ed8 <si446x_set_frequency+0x1b8>)
 8007dc4:	f99a 5000 	ldrsb.w	r5, [sl]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	04ed      	lsls	r5, r5, #19
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	fb03 f505 	mul.w	r5, r3, r5
 8007dd2:	4b42      	ldr	r3, [pc, #264]	; (8007edc <si446x_set_frequency+0x1bc>)
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
 8007dd4:	ea4f 4e19 	mov.w	lr, r9, lsr #16
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 8007dd8:	fba3 3505 	umull	r3, r5, r3, r5
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8007ddc:	eba9 490e 	sub.w	r9, r9, lr, lsl #16
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8007de0:	f04f 0a00 	mov.w	sl, #0
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
 8007de4:	0e6d      	lsrs	r5, r5, #25
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8007de6:	ea4f 2c19 	mov.w	ip, r9, lsr #8
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007dea:	a902      	add	r1, sp, #8
 8007dec:	ab01      	add	r3, sp, #4
 8007dee:	4652      	mov	r2, sl
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8007df0:	f88d 800c 	strb.w	r8, [sp, #12]
 8007df4:	f88d 5011 	strb.w	r5, [sp, #17]
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007df8:	4604      	mov	r4, r0
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8007dfa:	f04f 0840 	mov.w	r8, #64	; 0x40
 8007dfe:	2506      	movs	r5, #6
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007e00:	200a      	movs	r0, #10
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8007e02:	f88d c00e 	strb.w	ip, [sp, #14]
 8007e06:	f88d e00d 	strb.w	lr, [sp, #13]
 8007e0a:	f88d 500a 	strb.w	r5, [sp, #10]
 8007e0e:	f88d 7008 	strb.w	r7, [sp, #8]
 8007e12:	f88d 900f 	strb.w	r9, [sp, #15]
 8007e16:	f88d a00b 	strb.w	sl, [sp, #11]
 8007e1a:	f88d a010 	strb.w	sl, [sp, #16]
 8007e1e:	f88d 8009 	strb.w	r8, [sp, #9]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007e22:	f7fe fb45 	bl	80064b0 <si446x_spi>
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007e26:	4b2e      	ldr	r3, [pc, #184]	; (8007ee0 <si446x_set_frequency+0x1c0>)
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007e28:	4304      	orrs	r4, r0
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007e2a:	f893 e000 	ldrb.w	lr, [r3]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007e2e:	a902      	add	r1, sp, #8
 8007e30:	4652      	mov	r2, sl
 8007e32:	ab01      	add	r3, sp, #4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007e34:	2522      	movs	r5, #34	; 0x22
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007e36:	2005      	movs	r0, #5
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8007e38:	f88d 7008 	strb.w	r7, [sp, #8]
 8007e3c:	f88d 600a 	strb.w	r6, [sp, #10]
 8007e40:	f88d 600b 	strb.w	r6, [sp, #11]
 8007e44:	f88d e00c 	strb.w	lr, [sp, #12]
 8007e48:	f88d 5009 	strb.w	r5, [sp, #9]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007e4c:	f7fe fb30 	bl	80064b0 <si446x_spi>
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8007e50:	b2e4      	uxtb	r4, r4
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8007e52:	4320      	orrs	r0, r4
	return failure;
 8007e54:	b2c0      	uxtb	r0, r0
}
 8007e56:	b007      	add	sp, #28
 8007e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007ef0 <si446x_set_frequency+0x1d0>
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8007e60:	f04f 0b08 	mov.w	fp, #8
 8007e64:	4b1f      	ldr	r3, [pc, #124]	; (8007ee4 <si446x_set_frequency+0x1c4>)
 8007e66:	f99a 5000 	ldrsb.w	r5, [sl]
 8007e6a:	fbb3 f5f5 	udiv	r5, r3, r5
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f7f9 f944 	bl	80010fc <__aeabi_ui2f>
 8007e74:	4606      	mov	r6, r0
 8007e76:	e774      	b.n	8007d62 <si446x_set_frequency+0x42>
 8007e78:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007ef0 <si446x_set_frequency+0x1d0>
 8007e7c:	2306      	movs	r3, #6
 8007e7e:	f88a 3000 	strb.w	r3, [sl]
 8007e82:	f04f 0b09 	mov.w	fp, #9
 8007e86:	e7ed      	b.n	8007e64 <si446x_set_frequency+0x144>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8007e88:	2310      	movs	r3, #16
 8007e8a:	f88a 3000 	strb.w	r3, [sl]
 8007e8e:	f04f 0b0c 	mov.w	fp, #12
 8007e92:	4e15      	ldr	r6, [pc, #84]	; (8007ee8 <si446x_set_frequency+0x1c8>)
 8007e94:	4d15      	ldr	r5, [pc, #84]	; (8007eec <si446x_set_frequency+0x1cc>)
 8007e96:	e764      	b.n	8007d62 <si446x_set_frequency+0x42>
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8007e98:	f8df a054 	ldr.w	sl, [pc, #84]	; 8007ef0 <si446x_set_frequency+0x1d0>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	f88a 3000 	strb.w	r3, [sl]
 8007ea2:	f04f 0b0b 	mov.w	fp, #11
 8007ea6:	e7dd      	b.n	8007e64 <si446x_set_frequency+0x144>
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8007ea8:	f8df a044 	ldr.w	sl, [pc, #68]	; 8007ef0 <si446x_set_frequency+0x1d0>
 8007eac:	2308      	movs	r3, #8
 8007eae:	f88a 3000 	strb.w	r3, [sl]
 8007eb2:	f04f 0b0a 	mov.w	fp, #10
 8007eb6:	e7d5      	b.n	8007e64 <si446x_set_frequency+0x144>
 8007eb8:	2a05723f 	.word	0x2a05723f
 8007ebc:	1f4add3f 	.word	0x1f4add3f
 8007ec0:	150a5a3f 	.word	0x150a5a3f
 8007ec4:	0e3ed9bf 	.word	0x0e3ed9bf
 8007ec8:	0a8cce3f 	.word	0x0a8cce3f
 8007ecc:	4a043e28 	.word	0x4a043e28
 8007ed0:	00210f8a 	.word	0x00210f8a
 8007ed4:	20000c88 	.word	0x20000c88
 8007ed8:	20000c86 	.word	0x20000c86
 8007edc:	a530e8a5 	.word	0xa530e8a5
 8007ee0:	20000c84 	.word	0x20000c84
 8007ee4:	03197500 	.word	0x03197500
 8007ee8:	4a465d40 	.word	0x4a465d40
 8007eec:	00319750 	.word	0x00319750
 8007ef0:	20000c9c 	.word	0x20000c9c
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	f3af 8000 	nop.w
 8007efc:	f3af 8000 	nop.w

08007f00 <si446x_initialise>:
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Reset the radio */
	SDN_HIGH;
 8007f04:	4c13      	ldr	r4, [pc, #76]	; (8007f54 <si446x_initialise+0x54>)
 8007f06:	f44f 7500 	mov.w	r5, #512	; 0x200
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8007f0a:	b0ad      	sub	sp, #180	; 0xb4
	/* Reset the radio */
	SDN_HIGH;
 8007f0c:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(10);
 8007f0e:	2014      	movs	r0, #20
 8007f10:	f7fa f926 	bl	8002160 <chThdSleep>
	SDN_LOW;						/*Radio is now reset*/
 8007f14:	6165      	str	r5, [r4, #20]
	chThdSleepMilliseconds(10);				/*Wait another 10ms to boot*/
 8007f16:	2014      	movs	r0, #20
 8007f18:	f7fa f922 	bl	8002160 <chThdSleep>
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMilliseconds(10);}/*Wait for CTS high after POR*/
 8007f1c:	68a3      	ldr	r3, [r4, #8]
 8007f1e:	051a      	lsls	r2, r3, #20
 8007f20:	d5f9      	bpl.n	8007f16 <si446x_initialise+0x16>
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8007f22:	4c0d      	ldr	r4, [pc, #52]	; (8007f58 <si446x_initialise+0x58>)
 8007f24:	2501      	movs	r5, #1
 8007f26:	2602      	movs	r6, #2
 8007f28:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8007f2c:	f04f 0eba 	mov.w	lr, #186	; 0xba
 8007f30:	2780      	movs	r7, #128	; 0x80
 8007f32:	7065      	strb	r5, [r4, #1]
 8007f34:	70a5      	strb	r5, [r4, #2]
 8007f36:	70e5      	strb	r5, [r4, #3]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	2007      	movs	r0, #7
 8007f3e:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <si446x_initialise+0x5c>)
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8007f40:	f884 c004 	strb.w	ip, [r4, #4]
 8007f44:	f884 e005 	strb.w	lr, [r4, #5]
 8007f48:	71a7      	strb	r7, [r4, #6]
 8007f4a:	7026      	strb	r6, [r4, #0]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8007f4c:	f7fe fab0 	bl	80064b0 <si446x_spi>
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8007f50:	4d00      	ldr	r5, [pc, #0]	; (8007f54 <si446x_initialise+0x54>)
 8007f52:	e008      	b.n	8007f66 <si446x_initialise+0x66>
 8007f54:	40010c00 	.word	0x40010c00
 8007f58:	200017a0 	.word	0x200017a0
 8007f5c:	20001778 	.word	0x20001778
 8007f60:	2014      	movs	r0, #20
 8007f62:	f7fa f8fd 	bl	8002160 <chThdSleep>
 8007f66:	68aa      	ldr	r2, [r5, #8]
 8007f68:	68ab      	ldr	r3, [r5, #8]
 8007f6a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8007f6e:	f083 0301 	eor.w	r3, r3, #1
 8007f72:	4313      	orrs	r3, r2
 8007f74:	07db      	lsls	r3, r3, #31
 8007f76:	d4f3      	bmi.n	8007f60 <si446x_initialise+0x60>
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8007f78:	2500      	movs	r5, #0
 8007f7a:	2620      	movs	r6, #32
	si446x_spi( 4, tx_buffer, 0, NULL);
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	462b      	mov	r3, r5
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8007f80:	7026      	strb	r6, [r4, #0]
	si446x_spi( 4, tx_buffer, 0, NULL);
 8007f82:	49df      	ldr	r1, [pc, #892]	; (8008300 <si446x_initialise+0x400>)
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8007f84:	7065      	strb	r5, [r4, #1]
 8007f86:	70a5      	strb	r5, [r4, #2]
 8007f88:	70e5      	strb	r5, [r4, #3]
	si446x_spi( 4, tx_buffer, 0, NULL);
 8007f8a:	2004      	movs	r0, #4
 8007f8c:	f7fe fa90 	bl	80064b0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8007f90:	4bdc      	ldr	r3, [pc, #880]	; (8008304 <si446x_initialise+0x404>)
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8007f92:	f8df 8394 	ldr.w	r8, [pc, #916]	; 8008328 <si446x_initialise+0x428>
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8007f96:	881b      	ldrh	r3, [r3, #0]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8007f98:	49d9      	ldr	r1, [pc, #868]	; (8008300 <si446x_initialise+0x400>)
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8007f9a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007f9e:	f8bd 6008 	ldrh.w	r6, [sp, #8]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8007fa2:	4643      	mov	r3, r8
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8007fa4:	8026      	strh	r6, [r4, #0]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8007fa6:	220c      	movs	r2, #12
 8007fa8:	2002      	movs	r0, #2
 8007faa:	f7fe fa81 	bl	80064b0 <si446x_spi>
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8007fae:	4ad5      	ldr	r2, [pc, #852]	; (8008304 <si446x_initialise+0x404>)
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8007fb0:	f8b8 e003 	ldrh.w	lr, [r8, #3]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8007fb4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8007fb8:	ab07      	add	r3, sp, #28
 8007fba:	8892      	ldrh	r2, [r2, #4]
 8007fbc:	9007      	str	r0, [sp, #28]
 8007fbe:	f8ad 2020 	strh.w	r2, [sp, #32]
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8007fc2:	4ed1      	ldr	r6, [pc, #836]	; (8008308 <si446x_initialise+0x408>)
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 8007fc4:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8007fc6:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
 8007fca:	462b      	mov	r3, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8007fcc:	6020      	str	r0, [r4, #0]
 8007fce:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, NULL);
 8007fd0:	2006      	movs	r0, #6
 8007fd2:	49cb      	ldr	r1, [pc, #812]	; (8008300 <si446x_initialise+0x400>)
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8007fd4:	f8a6 e000 	strh.w	lr, [r6]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 8007fd8:	f7fe fa6a 	bl	80064b0 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8007fdc:	4bcb      	ldr	r3, [pc, #812]	; (800830c <si446x_initialise+0x40c>)
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8007fde:	2720      	movs	r7, #32
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	f7ff fe9d 	bl	8007d20 <si446x_set_frequency>
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8007fe6:	4bca      	ldr	r3, [pc, #808]	; (8008310 <si446x_initialise+0x410>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007fe8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8007fec:	f993 0000 	ldrsb.w	r0, [r3]
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8007ff0:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8007ff4:	0480      	lsls	r0, r0, #18
 8007ff6:	f7f9 f885 	bl	8001104 <__aeabi_i2f>
 8007ffa:	49c6      	ldr	r1, [pc, #792]	; (8008314 <si446x_initialise+0x414>)
 8007ffc:	f7f9 f98c 	bl	8001318 <__aeabi_fdiv>
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8008000:	49c5      	ldr	r1, [pc, #788]	; (8008318 <si446x_initialise+0x418>)
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8008002:	4682      	mov	sl, r0
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
 8008004:	f7f9 f8d4 	bl	80011b0 <__aeabi_fmul>
 8008008:	f7f8 fcbe 	bl	8000988 <__aeabi_f2d>
 800800c:	2200      	movs	r2, #0
 800800e:	4bc3      	ldr	r3, [pc, #780]	; (800831c <si446x_initialise+0x41c>)
 8008010:	f7f8 fd0e 	bl	8000a30 <__aeabi_dmul>
 8008014:	f7f8 ff4c 	bl	8000eb0 <__aeabi_d2uiz>
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8008018:	0c03      	lsrs	r3, r0, #16
 800801a:	9301      	str	r3, [sp, #4]
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800801c:	f88d 70a1 	strb.w	r7, [sp, #161]	; 0xa1
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8008020:	f89d 7004 	ldrb.w	r7, [sp, #4]
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8008024:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008028:	462a      	mov	r2, r5
 800802a:	465b      	mov	r3, fp
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800802c:	f04f 0e0a 	mov.w	lr, #10
 8008030:	2603      	movs	r6, #3
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008032:	4649      	mov	r1, r9
	//Outdiv = 8;
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
 8008034:	f88d 00a6 	strb.w	r0, [sp, #166]	; 0xa6
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8008038:	f88d 70a4 	strb.w	r7, [sp, #164]	; 0xa4
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 800803c:	2007      	movs	r0, #7
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800803e:	2711      	movs	r7, #17
	float units_per_hz = ((float)( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * (float)deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8008040:	f88d c0a5 	strb.w	ip, [sp, #165]	; 0xa5
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8008044:	f88d e0a3 	strb.w	lr, [sp, #163]	; 0xa3
 8008048:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
 800804c:	f88d 60a2 	strb.w	r6, [sp, #162]	; 0xa2
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008050:	f7fe fa2e 	bl	80064b0 <si446x_spi>
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
 8008054:	49b2      	ldr	r1, [pc, #712]	; (8008320 <si446x_initialise+0x420>)
 8008056:	4650      	mov	r0, sl
 8008058:	f7f9 f8aa 	bl	80011b0 <__aeabi_fmul>
 800805c:	f7f9 fa98 	bl	8001590 <__aeabi_f2uiz>
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008060:	4649      	mov	r1, r9
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8008062:	ea4f 2a10 	mov.w	sl, r0, lsr #8
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008066:	462a      	mov	r2, r5
 8008068:	465b      	mov	r3, fp
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 800806a:	f04f 0c40 	mov.w	ip, #64	; 0x40
 800806e:	f04f 0e02 	mov.w	lr, #2
 8008072:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
 8008076:	f88d 00a5 	strb.w	r0, [sp, #165]	; 0xa5
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 800807a:	2704      	movs	r7, #4
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 800807c:	2006      	movs	r0, #6
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 800807e:	f88d a0a4 	strb.w	sl, [sp, #164]	; 0xa4
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8008082:	f88d c0a1 	strb.w	ip, [sp, #161]	; 0xa1
 8008086:	f88d e0a2 	strb.w	lr, [sp, #162]	; 0xa2
 800808a:	f88d 70a3 	strb.w	r7, [sp, #163]	; 0xa3
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 800808e:	f7fe fa0f 	bl	80064b0 <si446x_spi>
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8008092:	4ba4      	ldr	r3, [pc, #656]	; (8008324 <si446x_initialise+0x424>)
 8008094:	20c8      	movs	r0, #200	; 0xc8
 8008096:	781b      	ldrb	r3, [r3, #0]
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 8008098:	f88d 60a3 	strb.w	r6, [sp, #163]	; 0xa3
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space);
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 800809c:	fb00 f003 	mul.w	r0, r0, r3
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80080a0:	268c      	movs	r6, #140	; 0x8c
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 80080a2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80080a6:	2711      	movs	r7, #17
 80080a8:	f04f 0e01 	mov.w	lr, #1
 80080ac:	f04f 0a07 	mov.w	sl, #7
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 80080b0:	4649      	mov	r1, r9
 80080b2:	462a      	mov	r2, r5
 80080b4:	465b      	mov	r3, fp
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80080b6:	f88d 70a0 	strb.w	r7, [sp, #160]	; 0xa0
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
 80080ba:	f88d 00a6 	strb.w	r0, [sp, #166]	; 0xa6
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80080be:	2720      	movs	r7, #32
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 80080c0:	f88d c0a5 	strb.w	ip, [sp, #165]	; 0xa5
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80080c4:	f88d 60a8 	strb.w	r6, [sp, #168]	; 0xa8
 80080c8:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80080cc:	26ba      	movs	r6, #186	; 0xba
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 80080ce:	200b      	movs	r0, #11
	//divide VCXO_FREQ into its bytes; MSB first, this is needed for the NCO frequency for Tx mode - equal to the xtal for <200kbps
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [11]){0x11, 0x20, 0x07, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0, x3, x2, x1, x0},11*sizeof(uint8_t));
 80080d0:	f88d c0aa 	strb.w	ip, [sp, #170]	; 0xaa
 80080d4:	f88d e0a7 	strb.w	lr, [sp, #167]	; 0xa7
 80080d8:	f88d 70a1 	strb.w	r7, [sp, #161]	; 0xa1
 80080dc:	f88d a0a2 	strb.w	sl, [sp, #162]	; 0xa2
 80080e0:	f88d 60a9 	strb.w	r6, [sp, #169]	; 0xa9
 80080e4:	f88d 50a4 	strb.w	r5, [sp, #164]	; 0xa4
	si446x_spi( 11, tx_buffer, 0, rx_buffer);
 80080e8:	f7fe f9e2 	bl	80064b0 <si446x_spi>
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 80080ec:	4a85      	ldr	r2, [pc, #532]	; (8008304 <si446x_initialise+0x404>)
 80080ee:	ab0f      	add	r3, sp, #60	; 0x3c
 80080f0:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80080f4:	8892      	ldrh	r2, [r2, #4]
 80080f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80080f8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80080fc:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008100:	462a      	mov	r2, r5
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8008102:	6020      	str	r0, [r4, #0]
 8008104:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008106:	4643      	mov	r3, r8
 8008108:	497d      	ldr	r1, [pc, #500]	; (8008300 <si446x_initialise+0x400>)
 800810a:	2005      	movs	r0, #5
 800810c:	f7fe f9d0 	bl	80064b0 <si446x_spi>
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8008110:	4a7c      	ldr	r2, [pc, #496]	; (8008304 <si446x_initialise+0x404>)
 8008112:	ab13      	add	r3, sp, #76	; 0x4c
 8008114:	f852 0f14 	ldr.w	r0, [r2, #20]!
 8008118:	8891      	ldrh	r1, [r2, #4]
 800811a:	7992      	ldrb	r2, [r2, #6]
 800811c:	9013      	str	r0, [sp, #76]	; 0x4c
 800811e:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
 8008122:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 8008126:	e893 0003 	ldmia.w	r3, {r0, r1}
 800812a:	0c0e      	lsrs	r6, r1, #16
 800812c:	71a6      	strb	r6, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 800812e:	4e75      	ldr	r6, [pc, #468]	; (8008304 <si446x_initialise+0x404>)
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008130:	462a      	mov	r2, r5
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8008132:	6020      	str	r0, [r4, #0]
 8008134:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008136:	4643      	mov	r3, r8
 8008138:	4650      	mov	r0, sl
 800813a:	4971      	ldr	r1, [pc, #452]	; (8008300 <si446x_initialise+0x400>)
 800813c:	f7fe f9b8 	bl	80064b0 <si446x_spi>
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8008140:	f856 0f1c 	ldr.w	r0, [r6, #28]!
 8008144:	ab18      	add	r3, sp, #96	; 0x60
 8008146:	6871      	ldr	r1, [r6, #4]
 8008148:	68b2      	ldr	r2, [r6, #8]
 800814a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800814e:	c307      	stmia	r3!, {r0, r1, r2}
 8008150:	7bb2      	ldrb	r2, [r6, #14]
 8008152:	4e6b      	ldr	r6, [pc, #428]	; (8008300 <si446x_initialise+0x400>)
 8008154:	f8a3 e000 	strh.w	lr, [r3]
 8008158:	709a      	strb	r2, [r3, #2]
 800815a:	ab18      	add	r3, sp, #96	; 0x60
 800815c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800815e:	c607      	stmia	r6!, {r0, r1, r2}
 8008160:	f826 3b02 	strh.w	r3, [r6], #2
 8008164:	4631      	mov	r1, r6
 8008166:	0c1b      	lsrs	r3, r3, #16
 8008168:	f801 390e 	strb.w	r3, [r1], #-14
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 800816c:	462a      	mov	r2, r5
 800816e:	4643      	mov	r3, r8
 8008170:	200f      	movs	r0, #15
 8008172:	f7fe f99d 	bl	80064b0 <si446x_spi>
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8008176:	46ce      	mov	lr, r9
 8008178:	4b62      	ldr	r3, [pc, #392]	; (8008304 <si446x_initialise+0x404>)
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 800817a:	f04f 090c 	mov.w	r9, #12
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 800817e:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8008182:	6859      	ldr	r1, [r3, #4]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800818c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008190:	f1a6 010e 	sub.w	r1, r6, #14
 8008194:	462a      	mov	r2, r5
 8008196:	4643      	mov	r3, r8
 8008198:	2010      	movs	r0, #16
 800819a:	f7fe f989 	bl	80064b0 <si446x_spi>
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 800819e:	4a59      	ldr	r2, [pc, #356]	; (8008304 <si446x_initialise+0x404>)
 80081a0:	ab11      	add	r3, sp, #68	; 0x44
 80081a2:	f852 0f3c 	ldr.w	r0, [r2, #60]!
 80081a6:	8891      	ldrh	r1, [r2, #4]
 80081a8:	7992      	ldrb	r2, [r2, #6]
 80081aa:	9011      	str	r0, [sp, #68]	; 0x44
 80081ac:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
 80081b0:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 80081b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80081b8:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 80081bc:	f884 e006 	strb.w	lr, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80081c0:	462a      	mov	r2, r5
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80081c2:	80a1      	strh	r1, [r4, #4]
 80081c4:	6020      	str	r0, [r4, #0]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80081c6:	f1a6 010e 	sub.w	r1, r6, #14
 80081ca:	4643      	mov	r3, r8
 80081cc:	4650      	mov	r0, sl
 80081ce:	f7fe f96f 	bl	80064b0 <si446x_spi>
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 80081d2:	4a4c      	ldr	r2, [pc, #304]	; (8008304 <si446x_initialise+0x404>)
 80081d4:	ab0d      	add	r3, sp, #52	; 0x34
 80081d6:	f852 0f44 	ldr.w	r0, [r2, #68]!
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80081da:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 80081de:	8892      	ldrh	r2, [r2, #4]
 80081e0:	900d      	str	r0, [sp, #52]	; 0x34
 80081e2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80081e6:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80081ea:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 80081ec:	80a1      	strh	r1, [r4, #4]
 80081ee:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80081f0:	f1a6 010e 	sub.w	r1, r6, #14
 80081f4:	4643      	mov	r3, r8
 80081f6:	2006      	movs	r0, #6
 80081f8:	f7fe f95a 	bl	80064b0 <si446x_spi>
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 80081fc:	4a41      	ldr	r2, [pc, #260]	; (8008304 <si446x_initialise+0x404>)
 80081fe:	ab0b      	add	r3, sp, #44	; 0x2c
 8008200:	f852 0f4c 	ldr.w	r0, [r2, #76]!
 8008204:	8892      	ldrh	r2, [r2, #4]
 8008206:	900b      	str	r0, [sp, #44]	; 0x2c
 8008208:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800820c:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008210:	462a      	mov	r2, r5
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8008212:	80a1      	strh	r1, [r4, #4]
 8008214:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008216:	f1a6 010e 	sub.w	r1, r6, #14
 800821a:	4643      	mov	r3, r8
 800821c:	2006      	movs	r0, #6
 800821e:	f7fe f947 	bl	80064b0 <si446x_spi>
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8008222:	4a38      	ldr	r2, [pc, #224]	; (8008304 <si446x_initialise+0x404>)
 8008224:	ab15      	add	r3, sp, #84	; 0x54
 8008226:	f852 0f54 	ldr.w	r0, [r2, #84]!
 800822a:	f1a6 0e0e 	sub.w	lr, r6, #14
 800822e:	6851      	ldr	r1, [r2, #4]
 8008230:	7a12      	ldrb	r2, [r2, #8]
 8008232:	c303      	stmia	r3!, {r0, r1}
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	ab15      	add	r3, sp, #84	; 0x54
 8008238:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800823c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008240:	4643      	mov	r3, r8
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8008242:	f88e 2000 	strb.w	r2, [lr]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008246:	f1a6 010e 	sub.w	r1, r6, #14
 800824a:	462a      	mov	r2, r5
 800824c:	2009      	movs	r0, #9
 800824e:	f7fe f92f 	bl	80064b0 <si446x_spi>
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8008252:	46de      	mov	lr, fp
 8008254:	4b2b      	ldr	r3, [pc, #172]	; (8008304 <si446x_initialise+0x404>)
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8008256:	f04f 0b4a 	mov.w	fp, #74	; 0x4a
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 800825a:	f853 0f60 	ldr.w	r0, [r3, #96]!
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 800826c:	f1a6 010e 	sub.w	r1, r6, #14
 8008270:	462a      	mov	r2, r5
 8008272:	4643      	mov	r3, r8
 8008274:	2009      	movs	r0, #9
 8008276:	f7fe f91b 	bl	80064b0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 800827a:	4b22      	ldr	r3, [pc, #136]	; (8008304 <si446x_initialise+0x404>)
 800827c:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 8008280:	f853 0f70 	ldr.w	r0, [r3, #112]!
 8008284:	6859      	ldr	r1, [r3, #4]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800828e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008292:	f1a6 010e 	sub.w	r1, r6, #14
 8008296:	462a      	mov	r2, r5
 8008298:	4643      	mov	r3, r8
 800829a:	2009      	movs	r0, #9
 800829c:	f7fe f908 	bl	80064b0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 80082a0:	4b18      	ldr	r3, [pc, #96]	; (8008304 <si446x_initialise+0x404>)
 80082a2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
 80082a6:	f853 0f80 	ldr.w	r0, [r3, #128]!
 80082aa:	6859      	ldr	r1, [r3, #4]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80082b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 80082b8:	f1a6 010e 	sub.w	r1, r6, #14
 80082bc:	462a      	mov	r2, r5
 80082be:	4643      	mov	r3, r8
 80082c0:	2009      	movs	r0, #9
 80082c2:	f7fe f8f5 	bl	80064b0 <si446x_spi>
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80082c6:	7067      	strb	r7, [r4, #1]
 80082c8:	2711      	movs	r7, #17
 80082ca:	f04f 0c12 	mov.w	ip, #18
 80082ce:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 80082d2:	7027      	strb	r7, [r4, #0]
 80082d4:	2704      	movs	r7, #4
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 80082d6:	f1a6 010e 	sub.w	r1, r6, #14
 80082da:	462a      	mov	r2, r5
 80082dc:	4643      	mov	r3, r8
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80082de:	70a7      	strb	r7, [r4, #2]
 80082e0:	f884 b003 	strb.w	fp, [r4, #3]
 80082e4:	f884 a004 	strb.w	sl, [r4, #4]
 80082e8:	f884 9005 	strb.w	r9, [r4, #5]
 80082ec:	f884 c006 	strb.w	ip, [r4, #6]
 80082f0:	f884 e007 	strb.w	lr, [r4, #7]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 80082f4:	2711      	movs	r7, #17
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 80082f6:	2008      	movs	r0, #8
 80082f8:	f7fe f8da 	bl	80064b0 <si446x_spi>
 80082fc:	e016      	b.n	800832c <si446x_initialise+0x42c>
 80082fe:	bf00      	nop
 8008300:	200017a0 	.word	0x200017a0
 8008304:	08009490 	.word	0x08009490
 8008308:	200017b0 	.word	0x200017b0
 800830c:	20000ca0 	.word	0x20000ca0
 8008310:	20000c9c 	.word	0x20000c9c
 8008314:	4bc65d40 	.word	0x4bc65d40
 8008318:	43960000 	.word	0x43960000
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	453b8000 	.word	0x453b8000
 8008324:	20000c88 	.word	0x20000c88
 8008328:	20001778 	.word	0x20001778
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 800832c:	7027      	strb	r7, [r4, #0]
 800832e:	2741      	movs	r7, #65	; 0x41
 8008330:	71a7      	strb	r7, [r4, #6]
 8008332:	2742      	movs	r7, #66	; 0x42
 8008334:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8008338:	f04f 0c24 	mov.w	ip, #36	; 0x24
 800833c:	f884 9002 	strb.w	r9, [r4, #2]
 8008340:	7267      	strb	r7, [r4, #9]
 8008342:	2030      	movs	r0, #48	; 0x30
 8008344:	f04f 0b43 	mov.w	fp, #67	; 0x43
 8008348:	f04f 0a4f 	mov.w	sl, #79	; 0x4f
 800834c:	f04f 0944 	mov.w	r9, #68	; 0x44
 8008350:	2752      	movs	r7, #82	; 0x52
 8008352:	f884 c004 	strb.w	ip, [r4, #4]
 8008356:	f884 c007 	strb.w	ip, [r4, #7]
 800835a:	f884 e005 	strb.w	lr, [r4, #5]
 800835e:	f884 e008 	strb.w	lr, [r4, #8]
 8008362:	f884 e00b 	strb.w	lr, [r4, #11]
 8008366:	f884 e00e 	strb.w	lr, [r4, #14]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 800836a:	f1a6 010e 	sub.w	r1, r6, #14
 800836e:	462a      	mov	r2, r5
 8008370:	4643      	mov	r3, r8
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8008372:	7060      	strb	r0, [r4, #1]
 8008374:	72a7      	strb	r7, [r4, #10]
 8008376:	70e5      	strb	r5, [r4, #3]
 8008378:	f884 b00c 	strb.w	fp, [r4, #12]
 800837c:	f884 a00d 	strb.w	sl, [r4, #13]
 8008380:	f884 900f 	strb.w	r9, [r4, #15]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008384:	2010      	movs	r0, #16
 8008386:	f7fe f893 	bl	80064b0 <si446x_spi>
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 800838a:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <si446x_initialise+0x504>)
 800838c:	ab05      	add	r3, sp, #20
 800838e:	f852 0f90 	ldr.w	r0, [r2, #144]!
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 8008392:	4f1c      	ldr	r7, [pc, #112]	; (8008404 <si446x_initialise+0x504>)
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 8008394:	7912      	ldrb	r2, [r2, #4]
 8008396:	9005      	str	r0, [sp, #20]
 8008398:	f88d 2018 	strb.w	r2, [sp, #24]
 800839c:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80083a0:	462a      	mov	r2, r5
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 80083a2:	7121      	strb	r1, [r4, #4]
 80083a4:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80083a6:	f1a6 010e 	sub.w	r1, r6, #14
 80083aa:	4643      	mov	r3, r8
 80083ac:	2005      	movs	r0, #5
 80083ae:	f7fe f87f 	bl	80064b0 <si446x_spi>
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 80083b2:	4a14      	ldr	r2, [pc, #80]	; (8008404 <si446x_initialise+0x504>)
 80083b4:	ab03      	add	r3, sp, #12
 80083b6:	f852 0f98 	ldr.w	r0, [r2, #152]!
 80083ba:	7912      	ldrb	r2, [r2, #4]
 80083bc:	9003      	str	r0, [sp, #12]
 80083be:	f88d 2010 	strb.w	r2, [sp, #16]
 80083c2:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80083c6:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 80083c8:	7121      	strb	r1, [r4, #4]
 80083ca:	6020      	str	r0, [r4, #0]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80083cc:	f1a6 010e 	sub.w	r1, r6, #14
 80083d0:	4643      	mov	r3, r8
 80083d2:	2005      	movs	r0, #5
 80083d4:	f7fe f86c 	bl	80064b0 <si446x_spi>
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80083d8:	f857 0fa0 	ldr.w	r0, [r7, #160]!
 80083dc:	ab09      	add	r3, sp, #36	; 0x24
 80083de:	88ba      	ldrh	r2, [r7, #4]
 80083e0:	9009      	str	r0, [sp, #36]	; 0x24
 80083e2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80083e6:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80083ea:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80083ec:	80a1      	strh	r1, [r4, #4]
 80083ee:	6020      	str	r0, [r4, #0]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80083f0:	4643      	mov	r3, r8
 80083f2:	f1a6 010e 	sub.w	r1, r6, #14
 80083f6:	2006      	movs	r0, #6
 80083f8:	f7fe f85a 	bl	80064b0 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
	//Setup default channel config
	si446x_set_deviation_channel_bps(300, 3000, 200);
	si446x_set_modem();
}
 80083fc:	b02d      	add	sp, #180	; 0xb4
 80083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008402:	bf00      	nop
 8008404:	08009490 	.word	0x08009490
 8008408:	f3af 8000 	nop.w
 800840c:	f3af 8000 	nop.w

08008410 <SI_Thread.lto_priv.84>:

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 8008410:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  (void)arg;
  chRegSetThreadName("si4432");
 8008414:	4b78      	ldr	r3, [pc, #480]	; (80085f8 <SI_Thread.lto_priv.84+0x1e8>)
 8008416:	4979      	ldr	r1, [pc, #484]	; (80085fc <SI_Thread.lto_priv.84+0x1ec>)
 8008418:	699a      	ldr	r2, [r3, #24]

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 800841a:	b083      	sub	sp, #12
 800841c:	2320      	movs	r3, #32

  (void)arg;
  chRegSetThreadName("si4432");
 800841e:	6191      	str	r1, [r2, #24]
 8008420:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8008424:	4c76      	ldr	r4, [pc, #472]	; (8008600 <SI_Thread.lto_priv.84+0x1f0>)
 8008426:	4b77      	ldr	r3, [pc, #476]	; (8008604 <SI_Thread.lto_priv.84+0x1f4>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8008428:	7822      	ldrb	r2, [r4, #0]
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	2a01      	cmp	r2, #1
 800842e:	d115      	bne.n	800845c <SI_Thread.lto_priv.84+0x4c>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8008430:	4975      	ldr	r1, [pc, #468]	; (8008608 <SI_Thread.lto_priv.84+0x1f8>)
 8008432:	6a20      	ldr	r0, [r4, #32]
 8008434:	f000 fe44 	bl	80090c0 <dmaStreamAllocate.constprop.11>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8008438:	4974      	ldr	r1, [pc, #464]	; (800860c <SI_Thread.lto_priv.84+0x1fc>)
 800843a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800843c:	f000 fe40 	bl	80090c0 <dmaStreamAllocate.constprop.11>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008440:	4973      	ldr	r1, [pc, #460]	; (8008610 <SI_Thread.lto_priv.84+0x200>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008442:	6a25      	ldr	r5, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008444:	6a60      	ldr	r0, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008446:	698b      	ldr	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008448:	69e2      	ldr	r2, [r4, #28]
 800844a:	682d      	ldr	r5, [r5, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800844c:	6800      	ldr	r0, [r0, #0]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 800844e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008452:	618b      	str	r3, [r1, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008454:	320c      	adds	r2, #12
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	60aa      	str	r2, [r5, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800845a:	6082      	str	r2, [r0, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800845c:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800845e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8008462:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008464:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008468:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800846c:	bf48      	it	mi
 800846e:	f443 63a0 	orrmi.w	r3, r3, #1280	; 0x500
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008472:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008474:	bf48      	it	mi
 8008476:	f442 62a0 	orrmi.w	r2, r2, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800847a:	69e3      	ldr	r3, [r4, #28]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800847c:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800847e:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8008482:	2500      	movs	r5, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8008484:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8008486:	801d      	strh	r5, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8008488:	8019      	strh	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800848a:	809a      	strh	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 800848c:	881a      	ldrh	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 800848e:	2102      	movs	r1, #2
 8008490:	b292      	uxth	r2, r2
 8008492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	7021      	strb	r1, [r4, #0]
 800849a:	f385 8811 	msr	BASEPRI, r5
  /* Configuration goes here - setup the PLL carrier, TX modem settings and the Packet handler Tx functionality*/
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	si446x_initialise();
 800849e:	f7ff fd2f 	bl	8007f00 <si446x_initialise>
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80084a2:	4c5c      	ldr	r4, [pc, #368]	; (8008614 <SI_Thread.lto_priv.84+0x204>)
	gptInit();
	gptStart(&GPTD4, &gpt4cfg);
 80084a4:	485c      	ldr	r0, [pc, #368]	; (8008618 <SI_Thread.lto_priv.84+0x208>)
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80084a6:	4a5d      	ldr	r2, [pc, #372]	; (800861c <SI_Thread.lto_priv.84+0x20c>)
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80084a8:	4e5d      	ldr	r6, [pc, #372]	; (8008620 <SI_Thread.lto_priv.84+0x210>)
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80084aa:	2301      	movs	r3, #1
 80084ac:	495d      	ldr	r1, [pc, #372]	; (8008624 <SI_Thread.lto_priv.84+0x214>)
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80084ae:	60c2      	str	r2, [r0, #12]
 80084b0:	7003      	strb	r3, [r0, #0]
  gptp->config = NULL;
 80084b2:	6045      	str	r5, [r0, #4]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80084b4:	7023      	strb	r3, [r4, #0]
  gptp->config = NULL;
 80084b6:	6065      	str	r5, [r4, #4]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80084b8:	60e6      	str	r6, [r4, #12]
 80084ba:	f7ff fbd1 	bl	8007c60 <gptStart>
	gptStart(&GPTD3, &gpt3cfg);
 80084be:	4620      	mov	r0, r4
 80084c0:	4959      	ldr	r1, [pc, #356]	; (8008628 <SI_Thread.lto_priv.84+0x218>)
 80084c2:	f7ff fbcd 	bl	8007c60 <gptStart>
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 80084c6:	4b59      	ldr	r3, [pc, #356]	; (800862c <SI_Thread.lto_priv.84+0x21c>)
 80084c8:	2210      	movs	r2, #16
 80084ca:	4e59      	ldr	r6, [pc, #356]	; (8008630 <SI_Thread.lto_priv.84+0x220>)
 80084cc:	611a      	str	r2, [r3, #16]
 80084ce:	f000 fea7 	bl	8009220 <RF_switch.part.4.lto_priv.80>
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 80084d2:	4635      	mov	r5, r6
 80084d4:	46e9      	mov	r9, sp
 80084d6:	f8df a174 	ldr.w	sl, [pc, #372]	; 800864c <SI_Thread.lto_priv.84+0x23c>
 80084da:	4f56      	ldr	r7, [pc, #344]	; (8008634 <SI_Thread.lto_priv.84+0x224>)
 80084dc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800863c <SI_Thread.lto_priv.84+0x22c>
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80084e0:	4855      	ldr	r0, [pc, #340]	; (8008638 <SI_Thread.lto_priv.84+0x228>)
 80084e2:	21c8      	movs	r1, #200	; 0xc8
 80084e4:	f7f9 fd3c 	bl	8001f60 <chSemWaitTimeout>
	gptInit();
	gptStart(&GPTD4, &gpt4cfg);
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
 80084e8:	4604      	mov	r4, r0
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d1f8      	bne.n	80084e0 <SI_Thread.lto_priv.84+0xd0>
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 80084ee:	7833      	ldrb	r3, [r6, #0]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d017      	beq.n	8008524 <SI_Thread.lto_priv.84+0x114>
			Active_Frequency+=50;
		else if(Command==2)
 80084f4:	782b      	ldrb	r3, [r5, #0]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d018      	beq.n	800852c <SI_Thread.lto_priv.84+0x11c>
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
 80084fa:	782b      	ldrb	r3, [r5, #0]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d030      	beq.n	8008562 <SI_Thread.lto_priv.84+0x152>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 8008500:	7833      	ldrb	r3, [r6, #0]
 8008502:	b113      	cbz	r3, 800850a <SI_Thread.lto_priv.84+0xfa>
 8008504:	782b      	ldrb	r3, [r5, #0]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d918      	bls.n	800853c <SI_Thread.lto_priv.84+0x12c>
 800850a:	2320      	movs	r3, #32
 800850c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008510:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	dd0d      	ble.n	8008534 <SI_Thread.lto_priv.84+0x124>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008518:	f7f9 fb92 	bl	8001c40 <chSchRescheduleS>
 800851c:	2300      	movs	r3, #0
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	e7dd      	b.n	80084e0 <SI_Thread.lto_priv.84+0xd0>
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
			Active_Frequency+=50;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3332      	adds	r3, #50	; 0x32
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	e7e9      	b.n	8008500 <SI_Thread.lto_priv.84+0xf0>
		else if(Command==2)
			Active_Frequency-=50;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	3b32      	subs	r3, #50	; 0x32
 8008530:	603b      	str	r3, [r7, #0]
 8008532:	e7e5      	b.n	8008500 <SI_Thread.lto_priv.84+0xf0>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8008534:	4841      	ldr	r0, [pc, #260]	; (800863c <SI_Thread.lto_priv.84+0x22c>)
 8008536:	f7fa fab3 	bl	8002aa0 <chSemSignalI>
 800853a:	e7ed      	b.n	8008518 <SI_Thread.lto_priv.84+0x108>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 800853c:	f04f 0b00 	mov.w	fp, #0
			si446x_failure|=si446x_set_frequency(Active_Frequency);
 8008540:	6838      	ldr	r0, [r7, #0]
 8008542:	f7ff fbed 	bl	8007d20 <si446x_set_frequency>
 8008546:	ea40 000b 	orr.w	r0, r0, fp
 800854a:	fa5f fb80 	uxtb.w	fp, r0
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 800854e:	f1bb 0f00 	cmp.w	fp, #0
 8008552:	d0da      	beq.n	800850a <SI_Thread.lto_priv.84+0xfa>
			chThdSleepMilliseconds(400);/*Wait in case radio can finish what it was doing*/
 8008554:	f44f 7048 	mov.w	r0, #800	; 0x320
 8008558:	f7f9 fe02 	bl	8002160 <chThdSleep>
			si446x_initialise();
 800855c:	f7ff fcd0 	bl	8007f00 <si446x_initialise>
 8008560:	e7d3      	b.n	800850a <SI_Thread.lto_priv.84+0xfa>
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 8008562:	4a37      	ldr	r2, [pc, #220]	; (8008640 <SI_Thread.lto_priv.84+0x230>)
 8008564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008568:	6113      	str	r3, [r2, #16]
 800856a:	f000 fe59 	bl	8009220 <RF_switch.part.4.lto_priv.80>
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
 800856e:	2050      	movs	r0, #80	; 0x50
 8008570:	f7f9 fdf6 	bl	8002160 <chThdSleep>
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8008574:	2366      	movs	r3, #102	; 0x66
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 8008576:	4933      	ldr	r1, [pc, #204]	; (8008644 <SI_Thread.lto_priv.84+0x234>)
 8008578:	2206      	movs	r2, #6
 800857a:	4833      	ldr	r0, [pc, #204]	; (8008648 <SI_Thread.lto_priv.84+0x238>)
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 800857c:	f88a 3000 	strb.w	r3, [sl]
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 8008580:	f000 ff06 	bl	8009390 <strncpy>
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008584:	482f      	ldr	r0, [pc, #188]	; (8008644 <SI_Thread.lto_priv.84+0x234>)
 8008586:	f000 fed3 	bl	8009330 <strlen>
 800858a:	3001      	adds	r0, #1
 800858c:	4622      	mov	r2, r4
 800858e:	492f      	ldr	r1, [pc, #188]	; (800864c <SI_Thread.lto_priv.84+0x23c>)
 8008590:	4b2f      	ldr	r3, [pc, #188]	; (8008650 <SI_Thread.lto_priv.84+0x240>)
 8008592:	b2c0      	uxtb	r0, r0
 8008594:	f7fd ff8c 	bl	80064b0 <si446x_spi>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008598:	4b2e      	ldr	r3, [pc, #184]	; (8008654 <SI_Thread.lto_priv.84+0x244>)
 800859a:	4a2e      	ldr	r2, [pc, #184]	; (8008654 <SI_Thread.lto_priv.84+0x244>)
 800859c:	791b      	ldrb	r3, [r3, #4]
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 800859e:	4683      	mov	fp, r0
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 80085a0:	6810      	ldr	r0, [r2, #0]
 80085a2:	f889 3004 	strb.w	r3, [r9, #4]
 80085a6:	4b2c      	ldr	r3, [pc, #176]	; (8008658 <SI_Thread.lto_priv.84+0x248>)
 80085a8:	f8c9 0000 	str.w	r0, [r9]
 80085ac:	e899 0003 	ldmia.w	r9, {r0, r1}
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80085b0:	4622      	mov	r2, r4
			chThdSleepMilliseconds(40);/*Wait for the switch to activate before proceeding*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 80085b2:	f8ca 0000 	str.w	r0, [sl]
 80085b6:	7019      	strb	r1, [r3, #0]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80085b8:	2005      	movs	r0, #5
 80085ba:	1f19      	subs	r1, r3, #4
 80085bc:	4b24      	ldr	r3, [pc, #144]	; (8008650 <SI_Thread.lto_priv.84+0x240>)
 80085be:	f7fd ff77 	bl	80064b0 <si446x_spi>
 80085c2:	ea40 000b 	orr.w	r0, r0, fp
 80085c6:	fa5f fb80 	uxtb.w	fp, r0
 80085ca:	2320      	movs	r3, #32
 80085cc:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
  gpt_lld_start_timer(gptp, interval);
 80085d0:	4811      	ldr	r0, [pc, #68]	; (8008618 <SI_Thread.lto_priv.84+0x208>)
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80085d2:	2304      	movs	r3, #4
  gpt_lld_start_timer(gptp, interval);
 80085d4:	f44f 7161 	mov.w	r1, #900	; 0x384
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80085d8:	7003      	strb	r3, [r0, #0]
  gpt_lld_start_timer(gptp, interval);
 80085da:	f7fc f989 	bl	80048f0 <gpt_lld_start_timer>
 80085de:	f384 8811 	msr	BASEPRI, r4
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 80085e2:	782b      	ldrb	r3, [r5, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0b2      	beq.n	800854e <SI_Thread.lto_priv.84+0x13e>
 80085e8:	782b      	ldrb	r3, [r5, #0]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d9a8      	bls.n	8008540 <SI_Thread.lto_priv.84+0x130>
			si446x_failure|=si446x_set_frequency(Active_Frequency);
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 80085ee:	f1bb 0f00 	cmp.w	fp, #0
 80085f2:	d08a      	beq.n	800850a <SI_Thread.lto_priv.84+0xfa>
 80085f4:	e7ae      	b.n	8008554 <SI_Thread.lto_priv.84+0x144>
 80085f6:	bf00      	nop
 80085f8:	20001e68 	.word	0x20001e68
 80085fc:	0800a8c0 	.word	0x0800a8c0
 8008600:	20001fcc 	.word	0x20001fcc
 8008604:	0800a8b0 	.word	0x0800a8b0
 8008608:	08004a01 	.word	0x08004a01
 800860c:	08004921 	.word	0x08004921
 8008610:	40021000 	.word	0x40021000
 8008614:	20001fbc 	.word	0x20001fbc
 8008618:	20001784 	.word	0x20001784
 800861c:	40000800 	.word	0x40000800
 8008620:	40000400 	.word	0x40000400
 8008624:	20000c8c 	.word	0x20000c8c
 8008628:	20000c74 	.word	0x20000c74
 800862c:	40010c00 	.word	0x40010c00
 8008630:	20001774 	.word	0x20001774
 8008634:	20000ca0 	.word	0x20000ca0
 8008638:	20001794 	.word	0x20001794
 800863c:	200017b4 	.word	0x200017b4
 8008640:	40010800 	.word	0x40010800
 8008644:	200017c0 	.word	0x200017c0
 8008648:	200017a1 	.word	0x200017a1
 800864c:	200017a0 	.word	0x200017a0
 8008650:	20001778 	.word	0x20001778
 8008654:	08009538 	.word	0x08009538
 8008658:	200017a4 	.word	0x200017a4
 800865c:	f3af 8000 	nop.w

08008660 <evt3_execute.lto_priv.146>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8008660:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8008662:	4c55      	ldr	r4, [pc, #340]	; (80087b8 <evt3_execute.lto_priv.146+0x158>)
 8008664:	2320      	movs	r3, #32
 8008666:	69a2      	ldr	r2, [r4, #24]
 8008668:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 800866c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800866e:	b93b      	cbnz	r3, 8008680 <evt3_execute.lto_priv.146+0x20>
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8008676:	2001      	movs	r0, #1
 8008678:	f7f9 f97a 	bl	8001970 <_test_assert>
 800867c:	b180      	cbz	r0, 80086a0 <evt3_execute.lto_priv.146+0x40>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 8008680:	4259      	negs	r1, r3
 8008682:	4019      	ands	r1, r3
  ctp->p_epending &= ~m;
 8008684:	ea23 0301 	bic.w	r3, r3, r1
 8008688:	6353      	str	r3, [r2, #52]	; 0x34
 800868a:	2300      	movs	r3, #0
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	fab1 f181 	clz	r1, r1
 8008694:	2001      	movs	r0, #1
 8008696:	0949      	lsrs	r1, r1, #5
 8008698:	f7f9 f96a 	bl	8001970 <_test_assert>
 800869c:	2800      	cmp	r0, #0
 800869e:	d1ee      	bne.n	800867e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80086a0:	69a3      	ldr	r3, [r4, #24]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80086a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d06f      	beq.n	800878e <evt3_execute.lto_priv.146+0x12e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 80086ae:	6358      	str	r0, [r3, #52]	; 0x34
 80086b0:	f380 8811 	msr	BASEPRI, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 80086b4:	4601      	mov	r1, r0
 80086b6:	2002      	movs	r0, #2
 80086b8:	f7f9 f95a 	bl	8001970 <_test_assert>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d1de      	bne.n	800867e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80086c0:	69a3      	ldr	r3, [r4, #24]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 80086c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ca:	3201      	adds	r2, #1
 80086cc:	d063      	beq.n	8008796 <evt3_execute.lto_priv.146+0x136>
 80086ce:	f380 8811 	msr	BASEPRI, r0
 80086d2:	2001      	movs	r0, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 80086d4:	4601      	mov	r1, r0
 80086d6:	2003      	movs	r0, #3
 80086d8:	f7f9 f94a 	bl	8001970 <_test_assert>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1ce      	bne.n	800867e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80086e0:	69a6      	ldr	r6, [r4, #24]
 80086e2:	2320      	movs	r3, #32
 80086e4:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80086e8:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80086ea:	b94d      	cbnz	r5, 8008700 <evt3_execute.lto_priv.146+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80086ec:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80086f0:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80086f2:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80086f4:	4601      	mov	r1, r0
 80086f6:	f7f9 fbeb 	bl	8001ed0 <chSchGoSleepTimeoutS>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	db4f      	blt.n	800879e <evt3_execute.lto_priv.146+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80086fe:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8008700:	4269      	negs	r1, r5
 8008702:	4029      	ands	r1, r5
  ctp->p_epending &= ~m;
 8008704:	ea25 0501 	bic.w	r5, r5, r1
 8008708:	6375      	str	r5, [r6, #52]	; 0x34
 800870a:	2300      	movs	r3, #0
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	fab1 f181 	clz	r1, r1
 8008714:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8008716:	2004      	movs	r0, #4
 8008718:	f7f9 f92a 	bl	8001970 <_test_assert>
 800871c:	2800      	cmp	r0, #0
 800871e:	d1ae      	bne.n	800867e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8008720:	69a6      	ldr	r6, [r4, #24]
 8008722:	2320      	movs	r3, #32
 8008724:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8008728:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800872a:	b94d      	cbnz	r5, 8008740 <evt3_execute.lto_priv.146+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8008730:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8008732:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8008734:	4601      	mov	r1, r0
 8008736:	f7f9 fbcb 	bl	8001ed0 <chSchGoSleepTimeoutS>
 800873a:	2800      	cmp	r0, #0
 800873c:	db33      	blt.n	80087a6 <evt3_execute.lto_priv.146+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800873e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8008740:	2300      	movs	r3, #0
 8008742:	6373      	str	r3, [r6, #52]	; 0x34
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	fab5 f185 	clz	r1, r5
 800874c:	0949      	lsrs	r1, r1, #5
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 800874e:	2005      	movs	r0, #5
 8008750:	f7f9 f90e 	bl	8001970 <_test_assert>
 8008754:	4605      	mov	r5, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d191      	bne.n	800867e <evt3_execute.lto_priv.146+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 800875a:	69a4      	ldr	r4, [r4, #24]
 800875c:	2320      	movs	r3, #32
 800875e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8008762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008764:	3301      	adds	r3, #1
 8008766:	d008      	beq.n	800877a <evt3_execute.lto_priv.146+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 800876e:	200b      	movs	r0, #11
 8008770:	210a      	movs	r1, #10
 8008772:	f7f9 fbad 	bl	8001ed0 <chSchGoSleepTimeoutS>
 8008776:	2800      	cmp	r0, #0
 8008778:	db19      	blt.n	80087ae <evt3_execute.lto_priv.146+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 800877a:	2300      	movs	r3, #0
 800877c:	6363      	str	r3, [r4, #52]	; 0x34
 800877e:	f383 8811 	msr	BASEPRI, r3
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8008782:	4629      	mov	r1, r5
}
 8008784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8008788:	2006      	movs	r0, #6
 800878a:	f7f9 b8f1 	b.w	8001970 <_test_assert>
 800878e:	f380 8811 	msr	BASEPRI, r0
 8008792:	2001      	movs	r0, #1
 8008794:	e78e      	b.n	80086b4 <evt3_execute.lto_priv.146+0x54>
 8008796:	6358      	str	r0, [r3, #52]	; 0x34
 8008798:	f380 8811 	msr	BASEPRI, r0
 800879c:	e79a      	b.n	80086d4 <evt3_execute.lto_priv.146+0x74>
 800879e:	f385 8811 	msr	BASEPRI, r5
 80087a2:	2101      	movs	r1, #1
 80087a4:	e7b7      	b.n	8008716 <evt3_execute.lto_priv.146+0xb6>
 80087a6:	f385 8811 	msr	BASEPRI, r5
 80087aa:	2101      	movs	r1, #1
 80087ac:	e7cf      	b.n	800874e <evt3_execute.lto_priv.146+0xee>
 80087ae:	f385 8811 	msr	BASEPRI, r5
 80087b2:	2501      	movs	r5, #1
 80087b4:	e7e5      	b.n	8008782 <evt3_execute.lto_priv.146+0x122>
 80087b6:	bf00      	nop
 80087b8:	20001e68 	.word	0x20001e68
 80087bc:	f3af 8000 	nop.w

080087c0 <evt3_setup.lto_priv.145>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80087c0:	f000 bb0e 	b.w	8008de0 <chEvtGetAndClearEvents.constprop.43>
 80087c4:	f3af 8000 	nop.w
 80087c8:	f3af 8000 	nop.w
 80087cc:	f3af 8000 	nop.w

080087d0 <evt2_setup.lto_priv.143>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80087d0:	f000 bb06 	b.w	8008de0 <chEvtGetAndClearEvents.constprop.43>
 80087d4:	f3af 8000 	nop.w
 80087d8:	f3af 8000 	nop.w
 80087dc:	f3af 8000 	nop.w

080087e0 <evt1_setup.lto_priv.141>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80087e0:	f000 bafe 	b.w	8008de0 <chEvtGetAndClearEvents.constprop.43>
 80087e4:	f3af 8000 	nop.w
 80087e8:	f3af 8000 	nop.w
 80087ec:	f3af 8000 	nop.w

080087f0 <evt2_execute.lto_priv.144>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	2520      	movs	r5, #32
 80087f6:	b08d      	sub	sp, #52	; 0x34
 80087f8:	f385 8811 	msr	BASEPRI, r5
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();

  events = (currp->p_epending |= events);
 80087fc:	4cad      	ldr	r4, [pc, #692]	; (8008ab4 <evt2_execute.lto_priv.144+0x2c4>)
 80087fe:	2100      	movs	r1, #0
 8008800:	69a2      	ldr	r2, [r4, #24]
 8008802:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008804:	f043 0307 	orr.w	r3, r3, #7
 8008808:	6353      	str	r3, [r2, #52]	; 0x34
 800880a:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 800880e:	f000 faf7 	bl	8008e00 <chEvtWaitOne.constprop.39>
  test_assert(1, m == 1, "single event error");
 8008812:	f1a0 0101 	sub.w	r1, r0, #1
 8008816:	fab1 f181 	clz	r1, r1
 800881a:	2001      	movs	r0, #1
 800881c:	0949      	lsrs	r1, r1, #5
 800881e:	f7f9 f8a7 	bl	8001970 <_test_assert>
 8008822:	b110      	cbz	r0, 800882a <evt2_execute.lto_priv.144+0x3a>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8008824:	b00d      	add	sp, #52	; 0x34
 8008826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800882a:	f000 fae9 	bl	8008e00 <chEvtWaitOne.constprop.39>
  test_assert(2, m == 2, "single event error");
 800882e:	f1a0 0102 	sub.w	r1, r0, #2
 8008832:	fab1 f181 	clz	r1, r1
 8008836:	2002      	movs	r0, #2
 8008838:	0949      	lsrs	r1, r1, #5
 800883a:	f7f9 f899 	bl	8001970 <_test_assert>
 800883e:	2800      	cmp	r0, #0
 8008840:	d1f0      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>
  m = chEvtWaitOne(ALL_EVENTS);
 8008842:	f000 fadd 	bl	8008e00 <chEvtWaitOne.constprop.39>
  test_assert(3, m == 4, "single event error");
 8008846:	f1a0 0104 	sub.w	r1, r0, #4
 800884a:	fab1 f181 	clz	r1, r1
 800884e:	2003      	movs	r0, #3
 8008850:	0949      	lsrs	r1, r1, #5
 8008852:	f7f9 f88d 	bl	8001970 <_test_assert>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1e4      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800885a:	f000 fac1 	bl	8008de0 <chEvtGetAndClearEvents.constprop.43>
  test_assert(4, m == 0, "stuck event");
 800885e:	fab0 f180 	clz	r1, r0
 8008862:	2004      	movs	r0, #4
 8008864:	0949      	lsrs	r1, r1, #5
 8008866:	f7f9 f883 	bl	8001970 <_test_assert>
 800886a:	4606      	mov	r6, r0
 800886c:	2800      	cmp	r0, #0
 800886e:	d1d9      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 8008870:	f7f9 fc86 	bl	8002180 <test_wait_tick>
 8008874:	f385 8811 	msr	BASEPRI, r5
 8008878:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800887c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8008880:	b2bf      	uxth	r7, r7
 8008882:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008886:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008888:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	488a      	ldr	r0, [pc, #552]	; (8008ab8 <evt2_execute.lto_priv.144+0x2c8>)
 8008890:	3a01      	subs	r2, #1
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4b89      	ldr	r3, [pc, #548]	; (8008abc <evt2_execute.lto_priv.144+0x2cc>)
 8008896:	f7f9 fa7b 	bl	8001d90 <chThdCreateStatic>
 800889a:	4e89      	ldr	r6, [pc, #548]	; (8008ac0 <evt2_execute.lto_priv.144+0x2d0>)
 800889c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800889e:	f000 faaf 	bl	8008e00 <chEvtWaitOne.constprop.39>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80088a2:	f107 0164 	add.w	r1, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 80088a6:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 80088aa:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 80088ac:	b289      	uxth	r1, r1
 80088ae:	b292      	uxth	r2, r2
 80088b0:	2005      	movs	r0, #5
 80088b2:	f7f9 f815 	bl	80018e0 <_test_assert_time_window>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d1b4      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>
  test_assert(6, m == 1, "single event error");
 80088ba:	f1a9 0101 	sub.w	r1, r9, #1
 80088be:	fab1 f181 	clz	r1, r1
 80088c2:	2006      	movs	r0, #6
 80088c4:	0949      	lsrs	r1, r1, #5
 80088c6:	f7f9 f853 	bl	8001970 <_test_assert>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d1aa      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80088ce:	f000 fa87 	bl	8008de0 <chEvtGetAndClearEvents.constprop.43>
  test_assert(7, m == 0, "stuck event");
 80088d2:	fab0 f180 	clz	r1, r0
 80088d6:	2007      	movs	r0, #7
 80088d8:	0949      	lsrs	r1, r1, #5
 80088da:	f7f9 f849 	bl	8001970 <_test_assert>
 80088de:	4607      	mov	r7, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d19f      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>
  test_wait_threads();
 80088e4:	f7f9 fe9c 	bl	8002620 <test_wait_threads>
 80088e8:	f385 8811 	msr	BASEPRI, r5
 80088ec:	69a2      	ldr	r2, [r4, #24]
 80088ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80088f0:	f043 0305 	orr.w	r3, r3, #5
 80088f4:	6353      	str	r3, [r2, #52]	; 0x34
 80088f6:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 80088fa:	f000 faa1 	bl	8008e40 <chEvtWaitAny.constprop.38>
  test_assert(8, m == 5, "unexpected pending bit");
 80088fe:	1f47      	subs	r7, r0, #5
 8008900:	4279      	negs	r1, r7
 8008902:	4179      	adcs	r1, r7
 8008904:	2008      	movs	r0, #8
 8008906:	f7f9 f833 	bl	8001970 <_test_assert>
 800890a:	2800      	cmp	r0, #0
 800890c:	d18a      	bne.n	8008824 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800890e:	f000 fa67 	bl	8008de0 <chEvtGetAndClearEvents.constprop.43>
  test_assert(9, m == 0, "stuck event");
 8008912:	fab0 f180 	clz	r1, r0
 8008916:	2009      	movs	r0, #9
 8008918:	0949      	lsrs	r1, r1, #5
 800891a:	f7f9 f829 	bl	8001970 <_test_assert>
 800891e:	4607      	mov	r7, r0
 8008920:	2800      	cmp	r0, #0
 8008922:	f47f af7f 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 8008926:	f7f9 fc2b 	bl	8002180 <test_wait_tick>
 800892a:	f385 8811 	msr	BASEPRI, r5
 800892e:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8008932:	b2ad      	uxth	r5, r5
 8008934:	f387 8811 	msr	BASEPRI, r7
 8008938:	69a3      	ldr	r3, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800893a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	485d      	ldr	r0, [pc, #372]	; (8008ab8 <evt2_execute.lto_priv.144+0x2c8>)
 8008942:	3a01      	subs	r2, #1
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	4b5d      	ldr	r3, [pc, #372]	; (8008abc <evt2_execute.lto_priv.144+0x2cc>)
 8008948:	f7f9 fa22 	bl	8001d90 <chThdCreateStatic>
 800894c:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800894e:	f000 fa77 	bl	8008e40 <chEvtWaitAny.constprop.38>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8008952:	f105 0164 	add.w	r1, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8008956:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 800895a:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800895c:	b289      	uxth	r1, r1
 800895e:	b292      	uxth	r2, r2
 8008960:	200a      	movs	r0, #10
 8008962:	f7f8 ffbd 	bl	80018e0 <_test_assert_time_window>
 8008966:	2800      	cmp	r0, #0
 8008968:	f47f af5c 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>
  test_assert(11, m == 1, "single event error");
 800896c:	1e78      	subs	r0, r7, #1
 800896e:	4241      	negs	r1, r0
 8008970:	4141      	adcs	r1, r0
 8008972:	200b      	movs	r0, #11
 8008974:	f7f8 fffc 	bl	8001970 <_test_assert>
 8008978:	2800      	cmp	r0, #0
 800897a:	f47f af53 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800897e:	f000 fa2f 	bl	8008de0 <chEvtGetAndClearEvents.constprop.43>
  test_assert(12, m == 0, "stuck event");
 8008982:	fab0 f180 	clz	r1, r0
 8008986:	200c      	movs	r0, #12
 8008988:	0949      	lsrs	r1, r1, #5
 800898a:	f7f8 fff1 	bl	8001970 <_test_assert>
 800898e:	4680      	mov	r8, r0
 8008990:	2800      	cmp	r0, #0
 8008992:	f47f af47 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>
  test_wait_threads();
 8008996:	f7f9 fe43 	bl	8002620 <test_wait_threads>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 800899a:	4d4a      	ldr	r5, [pc, #296]	; (8008ac4 <evt2_execute.lto_priv.144+0x2d4>)
 800899c:	4b4a      	ldr	r3, [pc, #296]	; (8008ac8 <evt2_execute.lto_priv.144+0x2d8>)
 800899e:	602d      	str	r5, [r5, #0]
 80089a0:	601b      	str	r3, [r3, #0]
 80089a2:	f04f 0b20 	mov.w	fp, #32
 80089a6:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80089aa:	6829      	ldr	r1, [r5, #0]
 80089ac:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80089b0:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 80089b2:	2701      	movs	r7, #1
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80089b4:	f84a 1d28 	str.w	r1, [sl, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 80089bc:	f8cd 8014 	str.w	r8, [sp, #20]
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80089c0:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 80089c2:	9704      	str	r7, [sp, #16]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80089c4:	f8c5 a000 	str.w	sl, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80089c8:	9006      	str	r0, [sp, #24]
 80089ca:	f388 8811 	msr	BASEPRI, r8
 80089ce:	f38b 8811 	msr	BASEPRI, fp
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80089d8:	69a2      	ldr	r2, [r4, #24]
  elp->el_events   = events;
 80089da:	2704      	movs	r7, #4
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80089dc:	f849 1d14 	str.w	r1, [r9, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 80089e0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  elp->el_wflags   = wflags;
 80089e4:	900b      	str	r0, [sp, #44]	; 0x2c
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80089e6:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 80089e8:	9709      	str	r7, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80089ea:	f8c3 9000 	str.w	r9, [r3]
 80089ee:	f388 8811 	msr	BASEPRI, r8
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 80089f2:	f7f9 fbc5 	bl	8002180 <test_wait_tick>
 80089f6:	f38b 8811 	msr	BASEPRI, fp
 80089fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089fe:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8008a00:	b2bf      	uxth	r7, r7
 8008a02:	f388 8811 	msr	BASEPRI, r8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008a06:	69a2      	ldr	r2, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008a08:	4b30      	ldr	r3, [pc, #192]	; (8008acc <evt2_execute.lto_priv.144+0x2dc>)
 8008a0a:	6892      	ldr	r2, [r2, #8]
 8008a0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	3a01      	subs	r2, #1
 8008a14:	4b2e      	ldr	r3, [pc, #184]	; (8008ad0 <evt2_execute.lto_priv.144+0x2e0>)
 8008a16:	4828      	ldr	r0, [pc, #160]	; (8008ab8 <evt2_execute.lto_priv.144+0x2c8>)
 8008a18:	f7f9 f9ba 	bl	8001d90 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8008a1c:	f107 0864 	add.w	r8, r7, #100	; 0x64
 8008a20:	fa1f f888 	uxth.w	r8, r8
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 8008a24:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008a26:	6030      	str	r0, [r6, #0]
 8008a28:	f38b 8811 	msr	BASEPRI, fp

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8008a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a2e:	f003 0205 	and.w	r2, r3, #5
 8008a32:	2a05      	cmp	r2, #5
 8008a34:	d005      	beq.n	8008a42 <evt2_execute.lto_priv.144+0x252>
    ctp->p_u.ewmask = events;
 8008a36:	2305      	movs	r3, #5
 8008a38:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8008a3a:	200b      	movs	r0, #11
 8008a3c:	f7f9 f9e8 	bl	8001e10 <chSchGoSleepS>
 8008a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 8008a42:	f023 0305 	bic.w	r3, r3, #5
 8008a46:	6363      	str	r3, [r4, #52]	; 0x34
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f383 8811 	msr	BASEPRI, r3
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8008a4e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8008a52:	b292      	uxth	r2, r2
 8008a54:	4641      	mov	r1, r8
 8008a56:	200d      	movs	r0, #13
 8008a58:	f7f8 ff42 	bl	80018e0 <_test_assert_time_window>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f47f aee1 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008a62:	f000 f9bd 	bl	8008de0 <chEvtGetAndClearEvents.constprop.43>
  test_assert(14, m == 0, "stuck event");
 8008a66:	fab0 f180 	clz	r1, r0
 8008a6a:	200e      	movs	r0, #14
 8008a6c:	0949      	lsrs	r1, r1, #5
 8008a6e:	f7f8 ff7f 	bl	8001970 <_test_assert>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f47f aed6 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8008a78:	4c13      	ldr	r4, [pc, #76]	; (8008ac8 <evt2_execute.lto_priv.144+0x2d8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8008a7a:	f7f9 fdd1 	bl	8002620 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 8008a7e:	4651      	mov	r1, sl
 8008a80:	4810      	ldr	r0, [pc, #64]	; (8008ac4 <evt2_execute.lto_priv.144+0x2d4>)
 8008a82:	f7f9 f81d 	bl	8001ac0 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8008a86:	4649      	mov	r1, r9
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7f9 f819 	bl	8001ac0 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 8008a8e:	6829      	ldr	r1, [r5, #0]
 8008a90:	200f      	movs	r0, #15
 8008a92:	1b4a      	subs	r2, r1, r5
 8008a94:	4251      	negs	r1, r2
 8008a96:	4151      	adcs	r1, r2
 8008a98:	f7f8 ff6a 	bl	8001970 <_test_assert>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	f47f aec1 	bne.w	8008824 <evt2_execute.lto_priv.144+0x34>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8008aa2:	6821      	ldr	r1, [r4, #0]
 8008aa4:	2010      	movs	r0, #16
 8008aa6:	1b0b      	subs	r3, r1, r4
 8008aa8:	4259      	negs	r1, r3
 8008aaa:	4159      	adcs	r1, r3
 8008aac:	f7f8 ff60 	bl	8001970 <_test_assert>
 8008ab0:	e6b8      	b.n	8008824 <evt2_execute.lto_priv.144+0x34>
 8008ab2:	bf00      	nop
 8008ab4:	20001e68 	.word	0x20001e68
 8008ab8:	200017c8 	.word	0x200017c8
 8008abc:	08008b21 	.word	0x08008b21
 8008ac0:	2000173c 	.word	0x2000173c
 8008ac4:	20000ca4 	.word	0x20000ca4
 8008ac8:	20000ca8 	.word	0x20000ca8
 8008acc:	08009f84 	.word	0x08009f84
 8008ad0:	08008ae1 	.word	0x08008ae1
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	f3af 8000 	nop.w
 8008adc:	f3af 8000 	nop.w

08008ae0 <thread2>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	2520      	movs	r5, #32
 8008ae4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8008ae8:	480b      	ldr	r0, [pc, #44]	; (8008b18 <thread2+0x38>)
 8008aea:	2100      	movs	r1, #0
 8008aec:	f7f9 fbd8 	bl	80022a0 <chEvtBroadcastFlagsI>
 8008af0:	2400      	movs	r4, #0
  chSchRescheduleS();
 8008af2:	f7f9 f8a5 	bl	8001c40 <chSchRescheduleS>
 8008af6:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 8008afa:	2064      	movs	r0, #100	; 0x64
 8008afc:	f7f9 fb30 	bl	8002160 <chThdSleep>
 8008b00:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8008b04:	4805      	ldr	r0, [pc, #20]	; (8008b1c <thread2+0x3c>)
 8008b06:	4621      	mov	r1, r4
 8008b08:	f7f9 fbca 	bl	80022a0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8008b0c:	f7f9 f898 	bl	8001c40 <chSchRescheduleS>
 8008b10:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 8008b14:	4620      	mov	r0, r4
 8008b16:	bd38      	pop	{r3, r4, r5, pc}
 8008b18:	20000ca4 	.word	0x20000ca4
 8008b1c:	20000ca8 	.word	0x20000ca8

08008b20 <thread1>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8008b20:	b510      	push	{r4, lr}
 8008b22:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8008b24:	2064      	movs	r0, #100	; 0x64
 8008b26:	f7f9 fb1b 	bl	8002160 <chThdSleep>
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8008b30:	2101      	movs	r1, #1
 8008b32:	4620      	mov	r0, r4
 8008b34:	f7f9 fb9c 	bl	8002270 <chEvtSignalI>
  chSchRescheduleS();
 8008b38:	f7f9 f882 	bl	8001c40 <chSchRescheduleS>
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8008b42:	bd10      	pop	{r4, pc}
 8008b44:	f3af 8000 	nop.w
 8008b48:	f3af 8000 	nop.w
 8008b4c:	f3af 8000 	nop.w

08008b50 <evt1_execute.lto_priv.142>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8008b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4c31      	ldr	r4, [pc, #196]	; (8008c1c <evt1_execute.lto_priv.142+0xcc>)
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	2020      	movs	r0, #32
 8008b5a:	6024      	str	r4, [r4, #0]
 8008b5c:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008b60:	492f      	ldr	r1, [pc, #188]	; (8008c20 <evt1_execute.lto_priv.142+0xd0>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008b66:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008b68:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8008b6c:	2701      	movs	r7, #1
  elp->el_flags    = 0;
 8008b6e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8008b70:	f04f 32ff 	mov.w	r2, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008b74:	9601      	str	r6, [sp, #4]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8008b76:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8008b78:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 8008b7a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 8008b7c:	9204      	str	r2, [sp, #16]
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008b8a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008b8c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8008b90:	f04f 0802 	mov.w	r8, #2
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008b94:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
  elp->el_flags    = 0;
 8008b96:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8008b98:	9209      	str	r2, [sp, #36]	; 0x24

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8008b9a:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
  elp->el_events   = events;
 8008b9c:	f8cd 801c 	str.w	r8, [sp, #28]
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 8008ba4:	6821      	ldr	r1, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	1b09      	subs	r1, r1, r4
 8008baa:	bf18      	it	ne
 8008bac:	2101      	movne	r1, #1
 8008bae:	f7f8 fedf 	bl	8001970 <_test_assert>
 8008bb2:	b110      	cbz	r0, 8008bba <evt1_execute.lto_priv.142+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8008bb4:	b00a      	add	sp, #40	; 0x28
 8008bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f7f8 ff7f 	bl	8001ac0 <chEvtUnregister>
 8008bc2:	6821      	ldr	r1, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	1b09      	subs	r1, r1, r4
 8008bc8:	bf18      	it	ne
 8008bca:	2101      	movne	r1, #1
 8008bcc:	f7f8 fed0 	bl	8001970 <_test_assert>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d1ef      	bne.n	8008bb4 <evt1_execute.lto_priv.142+0x64>
  chEvtUnregister(&es1, &el2);
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7f8 ff72 	bl	8001ac0 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 8008bdc:	6821      	ldr	r1, [r4, #0]
 8008bde:	2003      	movs	r0, #3
 8008be0:	1b09      	subs	r1, r1, r4
 8008be2:	fab1 f181 	clz	r1, r1
 8008be6:	0949      	lsrs	r1, r1, #5
 8008be8:	f7f8 fec2 	bl	8001970 <_test_assert>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1e1      	bne.n	8008bb4 <evt1_execute.lto_priv.142+0x64>
 8008bf0:	4604      	mov	r4, r0
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8008bf2:	4e0c      	ldr	r6, [pc, #48]	; (8008c24 <evt1_execute.lto_priv.142+0xd4>)
 8008bf4:	2507      	movs	r5, #7
 8008bf6:	e001      	b.n	8008bfc <evt1_execute.lto_priv.142+0xac>
    }
    eid++;
 8008bf8:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 8008bfa:	b155      	cbz	r5, 8008c12 <evt1_execute.lto_priv.142+0xc2>
    if (events & EVENT_MASK(eid)) {
 8008bfc:	fa07 f304 	lsl.w	r3, r7, r4
 8008c00:	422b      	tst	r3, r5
 8008c02:	d0f9      	beq.n	8008bf8 <evt1_execute.lto_priv.142+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8008c04:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008c08:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8008c0a:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8008c0e:	4790      	blx	r2
 8008c10:	e7f2      	b.n	8008bf8 <evt1_execute.lto_priv.142+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8008c12:	4905      	ldr	r1, [pc, #20]	; (8008c28 <evt1_execute.lto_priv.142+0xd8>)
 8008c14:	2004      	movs	r0, #4
 8008c16:	f7f8 fe83 	bl	8001920 <_test_assert_sequence>
 8008c1a:	e7cb      	b.n	8008bb4 <evt1_execute.lto_priv.142+0x64>
 8008c1c:	20000ca4 	.word	0x20000ca4
 8008c20:	20001e68 	.word	0x20001e68
 8008c24:	0800a8d0 	.word	0x0800a8d0
 8008c28:	0800a1d0 	.word	0x0800a1d0
 8008c2c:	f3af 8000 	nop.w

08008c30 <h3>:
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8008c30:	2043      	movs	r0, #67	; 0x43
 8008c32:	f7f8 beb5 	b.w	80019a0 <test_emit_token>
 8008c36:	bf00      	nop
 8008c38:	f3af 8000 	nop.w
 8008c3c:	f3af 8000 	nop.w

08008c40 <h2>:

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8008c40:	2042      	movs	r0, #66	; 0x42
 8008c42:	f7f8 bead 	b.w	80019a0 <test_emit_token>
 8008c46:	bf00      	nop
 8008c48:	f3af 8000 	nop.w
 8008c4c:	f3af 8000 	nop.w

08008c50 <h1>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8008c50:	2041      	movs	r0, #65	; 0x41
 8008c52:	f7f8 bea5 	b.w	80019a0 <test_emit_token>
 8008c56:	bf00      	nop
 8008c58:	f3af 8000 	nop.w
 8008c5c:	f3af 8000 	nop.w

08008c60 <chTMStartMeasurementX.constprop.66>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8008c60:	4b01      	ldr	r3, [pc, #4]	; (8008c68 <chTMStartMeasurementX.constprop.66+0x8>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8008c64:	6083      	str	r3, [r0, #8]
 8008c66:	4770      	bx	lr
 8008c68:	e0001000 	.word	0xe0001000
 8008c6c:	f3af 8000 	nop.w

08008c70 <chThdCreateFromMemoryPool.constprop.59>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008c74:	4e21      	ldr	r6, [pc, #132]	; (8008cfc <chThdCreateFromMemoryPool.constprop.59+0x8c>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008c76:	4680      	mov	r8, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008c78:	4630      	mov	r0, r6
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8008c7a:	4689      	mov	r9, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8008c7c:	f7f8 ff08 	bl	8001a90 <chPoolAlloc>
  if (wsp == NULL)
 8008c80:	4604      	mov	r4, r0
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d037      	beq.n	8008cf6 <chThdCreateFromMemoryPool.constprop.59+0x86>
 8008c86:	2320      	movs	r3, #32
 8008c88:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c8c:	6873      	ldr	r3, [r6, #4]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008c8e:	4f1c      	ldr	r7, [pc, #112]	; (8008d00 <chThdCreateFromMemoryPool.constprop.59+0x90>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c90:	3b24      	subs	r3, #36	; 0x24
 8008c92:	4d1c      	ldr	r5, [pc, #112]	; (8008d04 <chThdCreateFromMemoryPool.constprop.59+0x94>)
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008c94:	f8d7 a014 	ldr.w	sl, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008c98:	eb00 0e03 	add.w	lr, r0, r3
 8008c9c:	491a      	ldr	r1, [pc, #104]	; (8008d08 <chThdCreateFromMemoryPool.constprop.59+0x98>)
 8008c9e:	f8c0 e00c 	str.w	lr, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8008ca2:	f04f 0c02 	mov.w	ip, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008ca6:	50c5      	str	r5, [r0, r3]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8008ca8:	f100 0224 	add.w	r2, r0, #36	; 0x24
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8008cac:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8008cae:	f100 0328 	add.w	r3, r0, #40	; 0x28
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8008cb2:	f04f 0b01 	mov.w	fp, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8008cb6:	f8ce 9004 	str.w	r9, [lr, #4]
 8008cba:	f8ce 1020 	str.w	r1, [lr, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8008cbe:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008cc2:	6107      	str	r7, [r0, #16]
 8008cc4:	f8c0 a014 	str.w	sl, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8008cc8:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8008ccc:	f880 b01e 	strb.w	fp, [r0, #30]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8008cd0:	f880 c01c 	strb.w	ip, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8008cd4:	6178      	str	r0, [r7, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8008cd6:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8008cd8:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8008cda:	6185      	str	r5, [r0, #24]

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8008cdc:	4629      	mov	r1, r5
  REG_INSERT(tp);
 8008cde:	f8ca 0010 	str.w	r0, [sl, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8008ce2:	6242      	str	r2, [r0, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8008ce4:	f880 c01d 	strb.w	ip, [r0, #29]
  tp->p_mpool = mp;
 8008ce8:	6406      	str	r6, [r0, #64]	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8008cea:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008cec:	6283      	str	r3, [r0, #40]	; 0x28
  chSchWakeupS(tp, MSG_OK);
 8008cee:	f7f8 ffcf 	bl	8001c90 <chSchWakeupS>
 8008cf2:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	20002010 	.word	0x20002010
 8008d00:	20001e68 	.word	0x20001e68
 8008d04:	08006741 	.word	0x08006741
 8008d08:	080006a1 	.word	0x080006a1
 8008d0c:	f3af 8000 	nop.w

08008d10 <chSemSignalWait.constprop.56>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8008d10:	b510      	push	{r4, lr}
 8008d12:	2320      	movs	r3, #32
 8008d14:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
 8008d18:	4c15      	ldr	r4, [pc, #84]	; (8008d70 <chSemSignalWait.constprop.56+0x60>)
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	dd1b      	ble.n	8008d5c <chSemSignalWait.constprop.56+0x4c>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
 8008d24:	3b01      	subs	r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	60a3      	str	r3, [r4, #8]
 8008d2a:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <chSemSignalWait.constprop.56+0x60>)
 8008d2c:	db06      	blt.n	8008d3c <chSemSignalWait.constprop.56+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8008d2e:	f7f8 ff87 	bl	8001c40 <chSchRescheduleS>
    msg = MSG_OK;
 8008d32:	2000      	movs	r0, #0
 8008d34:	2300      	movs	r3, #0
 8008d36:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
  return msg;
}
 8008d3a:	bd10      	pop	{r4, pc}

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 8008d3c:	490d      	ldr	r1, [pc, #52]	; (8008d74 <chSemSignalWait.constprop.56+0x64>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8008d3e:	6853      	ldr	r3, [r2, #4]
 8008d40:	698c      	ldr	r4, [r1, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8008d42:	2005      	movs	r0, #5
 8008d44:	e884 000c 	stmia.w	r4, {r2, r3}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8008d48:	6054      	str	r4, [r2, #4]
 8008d4a:	601c      	str	r4, [r3, #0]
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 8008d4c:	6222      	str	r2, [r4, #32]
    chSchGoSleepS(CH_STATE_WTSEM);
 8008d4e:	f7f9 f85f 	bl	8001e10 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8008d52:	6a20      	ldr	r0, [r4, #32]
 8008d54:	2300      	movs	r3, #0
 8008d56:	f383 8811 	msr	BASEPRI, r3
    chSchRescheduleS();
    msg = MSG_OK;
  }
  chSysUnlock();
  return msg;
}
 8008d5a:	bd10      	pop	{r4, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8008d5c:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	605c      	str	r4, [r3, #4]
 8008d62:	6023      	str	r3, [r4, #0]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 8008d64:	f7f9 fa1c 	bl	80021a0 <chSchReadyI>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	6202      	str	r2, [r0, #32]
 8008d6e:	e7d9      	b.n	8008d24 <chSemSignalWait.constprop.56+0x14>
 8008d70:	20000cb4 	.word	0x20000cb4
 8008d74:	20001e68 	.word	0x20001e68
 8008d78:	f3af 8000 	nop.w
 8008d7c:	f3af 8000 	nop.w

08008d80 <chCondSignal.constprop.52>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8008d80:	b508      	push	{r3, lr}
 8008d82:	2320      	movs	r3, #32
 8008d84:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <chCondSignal.constprop.52+0x24>)
 8008d8a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue))
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	d005      	beq.n	8008d9c <chCondSignal.constprop.52+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8008d90:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8008d92:	2100      	movs	r1, #0
 8008d94:	6053      	str	r3, [r2, #4]
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	f7f8 ff7a 	bl	8001c90 <chSchWakeupS>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	bd08      	pop	{r3, pc}
 8008da4:	20000cac 	.word	0x20000cac
 8008da8:	f3af 8000 	nop.w
 8008dac:	f3af 8000 	nop.w

08008db0 <chCondSignalI.constprop.51>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <chCondSignalI.constprop.51+0x20>)
 8008db2:	681a      	ldr	r2, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d00a      	beq.n	8008dce <chCondSignalI.constprop.51+0x1e>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8008db8:	6811      	ldr	r1, [r2, #0]
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondSignalI(condition_variable_t *cp) {
 8008dba:	b410      	push	{r4}
  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 8008dbc:	2400      	movs	r4, #0
 8008dbe:	604b      	str	r3, [r1, #4]
 8008dc0:	6214      	str	r4, [r2, #32]
    chSchReadyI(tp);
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	6019      	str	r1, [r3, #0]
  }
}
 8008dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8008dca:	f7f9 b9e9 	b.w	80021a0 <chSchReadyI>
 8008dce:	4770      	bx	lr
 8008dd0:	20000cac 	.word	0x20000cac
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	f3af 8000 	nop.w
 8008ddc:	f3af 8000 	nop.w

08008de0 <chEvtGetAndClearEvents.constprop.43>:
 8008de0:	2320      	movs	r3, #32
 8008de2:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8008de6:	4a04      	ldr	r2, [pc, #16]	; (8008df8 <chEvtGetAndClearEvents.constprop.43+0x18>)
  currp->p_epending &= ~events;
 8008de8:	2300      	movs	r3, #0
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8008dea:	6992      	ldr	r2, [r2, #24]
 8008dec:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8008dee:	6353      	str	r3, [r2, #52]	; 0x34
 8008df0:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20001e68 	.word	0x20001e68
 8008dfc:	f3af 8000 	nop.w

08008e00 <chEvtWaitOne.constprop.39>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8008e00:	4a0b      	ldr	r2, [pc, #44]	; (8008e30 <chEvtWaitOne.constprop.39+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8008e02:	b510      	push	{r4, lr}
 8008e04:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008e06:	6994      	ldr	r4, [r2, #24]
 8008e08:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8008e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e0e:	b933      	cbnz	r3, 8008e1e <chEvtWaitOne.constprop.39+0x1e>
    ctp->p_u.ewmask = events;
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008e16:	200a      	movs	r0, #10
 8008e18:	f7f8 fffa 	bl	8001e10 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8008e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8008e1e:	4258      	negs	r0, r3
 8008e20:	4018      	ands	r0, r3
  ctp->p_epending &= ~m;
 8008e22:	ea23 0300 	bic.w	r3, r3, r0
 8008e26:	6363      	str	r3, [r4, #52]	; 0x34
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 8008e2e:	bd10      	pop	{r4, pc}
 8008e30:	20001e68 	.word	0x20001e68
 8008e34:	f3af 8000 	nop.w
 8008e38:	f3af 8000 	nop.w
 8008e3c:	f3af 8000 	nop.w

08008e40 <chEvtWaitAny.constprop.38>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8008e40:	4a0b      	ldr	r2, [pc, #44]	; (8008e70 <chEvtWaitAny.constprop.38+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8008e42:	b510      	push	{r4, lr}
 8008e44:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8008e46:	6994      	ldr	r4, [r2, #24]
 8008e48:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8008e4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008e4e:	b930      	cbnz	r0, 8008e5e <chEvtWaitAny.constprop.38+0x1e>
    ctp->p_u.ewmask = events;
 8008e50:	f04f 33ff 	mov.w	r3, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008e54:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8008e56:	6223      	str	r3, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008e58:	f7f8 ffda 	bl	8001e10 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8008e5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8008e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e60:	2200      	movs	r2, #0
 8008e62:	ea23 0300 	bic.w	r3, r3, r0
 8008e66:	6363      	str	r3, [r4, #52]	; 0x34
 8008e68:	f382 8811 	msr	BASEPRI, r2

  chSysUnlock();
  return m;
}
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001e68 	.word	0x20001e68
	...

08008e80 <chMBPost.constprop.24>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	2320      	movs	r3, #32
 8008e84:	4606      	mov	r6, r0
 8008e86:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8008e8a:	4c0d      	ldr	r4, [pc, #52]	; (8008ec0 <chMBPost.constprop.24+0x40>)
 8008e8c:	f104 001c 	add.w	r0, r4, #28
 8008e90:	f7f9 f846 	bl	8001f20 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8008e94:	4605      	mov	r5, r0
 8008e96:	b970      	cbnz	r0, 8008eb6 <chMBPost.constprop.24+0x36>
    *mbp->mb_wrptr++ = msg;
 8008e98:	68a2      	ldr	r2, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8008e9a:	6861      	ldr	r1, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8008e9c:	1d13      	adds	r3, r2, #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8008e9e:	428b      	cmp	r3, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8008ea0:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8008ea2:	bf28      	it	cs
 8008ea4:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8008ea6:	6016      	str	r6, [r2, #0]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8008ea8:	4806      	ldr	r0, [pc, #24]	; (8008ec4 <chMBPost.constprop.24+0x44>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8008eaa:	bf28      	it	cs
 8008eac:	60a3      	strcs	r3, [r4, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8008eae:	f7f9 fdf7 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8008eb2:	f7f8 fec5 	bl	8001c40 <chSchRescheduleS>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	20000ce4 	.word	0x20000ce4
 8008ec4:	20000cf4 	.word	0x20000cf4
 8008ec8:	f3af 8000 	nop.w
 8008ecc:	f3af 8000 	nop.w

08008ed0 <chMBPostI.constprop.23>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <chMBPostI.constprop.23+0x34>)
 8008ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8008ed6:	2a00      	cmp	r2, #0
 8008ed8:	dd10      	ble.n	8008efc <chMBPostI.constprop.23+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8008eda:	689c      	ldr	r4, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top)
 8008edc:	685d      	ldr	r5, [r3, #4]
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8008ede:	1d21      	adds	r1, r4, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8008ee0:	3a01      	subs	r2, #1
  if (mbp->mb_wrptr >= mbp->mb_top)
 8008ee2:	42a9      	cmp	r1, r5
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24
    mbp->mb_wrptr = mbp->mb_buffer;
 8008ee6:	bf28      	it	cs
 8008ee8:	681a      	ldrcs	r2, [r3, #0]
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8008eea:	6099      	str	r1, [r3, #8]
 8008eec:	6020      	str	r0, [r4, #0]
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
 8008eee:	4806      	ldr	r0, [pc, #24]	; (8008f08 <chMBPostI.constprop.23+0x38>)
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 8008ef0:	bf28      	it	cs
 8008ef2:	609a      	strcs	r2, [r3, #8]
  chSemSignalI(&mbp->mb_fullsem);
 8008ef4:	f7f9 fdd4 	bl	8002aa0 <chSemSignalI>
  return MSG_OK;
 8008ef8:	2000      	movs	r0, #0
 8008efa:	bd38      	pop	{r3, r4, r5, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	bf00      	nop
 8008f04:	20000ce4 	.word	0x20000ce4
 8008f08:	20000cf4 	.word	0x20000cf4
 8008f0c:	f3af 8000 	nop.w

08008f10 <chMBPostAhead.constprop.22>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t time) {
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	2320      	movs	r3, #32
 8008f14:	4606      	mov	r6, r0
 8008f16:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8008f1a:	4c0e      	ldr	r4, [pc, #56]	; (8008f54 <chMBPostAhead.constprop.22+0x44>)
 8008f1c:	f104 001c 	add.w	r0, r4, #28
 8008f20:	f7f8 fffe 	bl	8001f20 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8008f24:	4605      	mov	r5, r0
 8008f26:	b958      	cbnz	r0, 8008f40 <chMBPostAhead.constprop.22+0x30>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 8008f28:	68e3      	ldr	r3, [r4, #12]
 8008f2a:	6822      	ldr	r2, [r4, #0]
 8008f2c:	3b04      	subs	r3, #4
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	60e3      	str	r3, [r4, #12]
 8008f32:	d30a      	bcc.n	8008f4a <chMBPostAhead.constprop.22+0x3a>
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 8008f34:	601e      	str	r6, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8008f36:	4808      	ldr	r0, [pc, #32]	; (8008f58 <chMBPostAhead.constprop.22+0x48>)
 8008f38:	f7f9 fdb2 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8008f3c:	f7f8 fe80 	bl	8001c40 <chSchRescheduleS>
 8008f40:	2300      	movs	r3, #0
 8008f42:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostAheadS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8008f46:	4628      	mov	r0, r5
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
 8008f4a:	6863      	ldr	r3, [r4, #4]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	60e3      	str	r3, [r4, #12]
 8008f50:	e7f0      	b.n	8008f34 <chMBPostAhead.constprop.22+0x24>
 8008f52:	bf00      	nop
 8008f54:	20000ce4 	.word	0x20000ce4
 8008f58:	20000cf4 	.word	0x20000cf4
 8008f5c:	f3af 8000 	nop.w

08008f60 <chMBPostAheadI.constprop.21>:
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8008f60:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <chMBPostAheadI.constprop.21+0x34>)
 8008f62:	6a51      	ldr	r1, [r2, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8008f64:	2900      	cmp	r1, #0
 8008f66:	dd11      	ble.n	8008f8c <chMBPostAheadI.constprop.21+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 8008f68:	68d3      	ldr	r3, [r2, #12]
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8008f6a:	b510      	push	{r4, lr}
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 8008f6c:	6814      	ldr	r4, [r2, #0]
 8008f6e:	3b04      	subs	r3, #4
 8008f70:	3901      	subs	r1, #1
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	6251      	str	r1, [r2, #36]	; 0x24
 8008f76:	60d3      	str	r3, [r2, #12]
 8008f78:	d202      	bcs.n	8008f80 <chMBPostAheadI.constprop.21+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 8008f7a:	6853      	ldr	r3, [r2, #4]
 8008f7c:	3b04      	subs	r3, #4
 8008f7e:	60d3      	str	r3, [r2, #12]
  *mbp->mb_rdptr = msg;
 8008f80:	6018      	str	r0, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8008f82:	4805      	ldr	r0, [pc, #20]	; (8008f98 <chMBPostAheadI.constprop.21+0x38>)
 8008f84:	f7f9 fd8c 	bl	8002aa0 <chSemSignalI>
  return MSG_OK;
 8008f88:	2000      	movs	r0, #0
 8008f8a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000ce4 	.word	0x20000ce4
 8008f98:	20000cf4 	.word	0x20000cf4
 8008f9c:	f3af 8000 	nop.w

08008fa0 <chMBFetch.constprop.20>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	2320      	movs	r3, #32
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 8008faa:	4c0e      	ldr	r4, [pc, #56]	; (8008fe4 <chMBFetch.constprop.20+0x44>)
 8008fac:	f104 0010 	add.w	r0, r4, #16
 8008fb0:	f7f8 ffb6 	bl	8001f20 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	b978      	cbnz	r0, 8008fd8 <chMBFetch.constprop.20+0x38>
    *msgp = *mbp->mb_rdptr++;
 8008fb8:	68e3      	ldr	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
 8008fba:	6862      	ldr	r2, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	3304      	adds	r3, #4
    if (mbp->mb_rdptr >= mbp->mb_top)
 8008fc0:	4293      	cmp	r3, r2
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8008fc2:	60e3      	str	r3, [r4, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8008fc4:	bf28      	it	cs
 8008fc6:	6823      	ldrcs	r3, [r4, #0]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8008fc8:	6031      	str	r1, [r6, #0]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_emptysem);
 8008fca:	4807      	ldr	r0, [pc, #28]	; (8008fe8 <chMBFetch.constprop.20+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8008fcc:	bf28      	it	cs
 8008fce:	60e3      	strcs	r3, [r4, #12]
    chSemSignalI(&mbp->mb_emptysem);
 8008fd0:	f7f9 fd66 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8008fd4:	f7f8 fe34 	bl	8001c40 <chSchRescheduleS>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();
  return rdymsg;
}
 8008fde:	4628      	mov	r0, r5
 8008fe0:	bd70      	pop	{r4, r5, r6, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000ce4 	.word	0x20000ce4
 8008fe8:	20000d00 	.word	0x20000d00
 8008fec:	00000000 	.word	0x00000000

08008ff0 <chMBFetchI.constprop.19>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <chMBFetchI.constprop.19+0x34>)
 8008ff2:	699a      	ldr	r2, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	dd12      	ble.n	800901e <chMBFetchI.constprop.19+0x2e>
 8008ff8:	1e51      	subs	r1, r2, #1
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8008ffa:	68da      	ldr	r2, [r3, #12]
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	6199      	str	r1, [r3, #24]

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
 8009000:	6859      	ldr	r1, [r3, #4]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8009002:	6814      	ldr	r4, [r2, #0]
 8009004:	3204      	adds	r2, #4
  if (mbp->mb_rdptr >= mbp->mb_top)
 8009006:	428a      	cmp	r2, r1
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8009008:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 800900a:	bf28      	it	cs
 800900c:	681a      	ldrcs	r2, [r3, #0]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800900e:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_emptysem);
 8009010:	4805      	ldr	r0, [pc, #20]	; (8009028 <chMBFetchI.constprop.19+0x38>)
  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 8009012:	bf28      	it	cs
 8009014:	60da      	strcs	r2, [r3, #12]
  chSemSignalI(&mbp->mb_emptysem);
 8009016:	f7f9 fd43 	bl	8002aa0 <chSemSignalI>
  return MSG_OK;
 800901a:	2000      	movs	r0, #0
 800901c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	4770      	bx	lr
 8009024:	20000ce4 	.word	0x20000ce4
 8009028:	20000d00 	.word	0x20000d00
 800902c:	00000000 	.word	0x00000000

08009030 <chOQGetI.constprop.18>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8009030:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8009032:	4b12      	ldr	r3, [pc, #72]	; (800907c <chOQGetI.constprop.18+0x4c>)
 8009034:	695a      	ldr	r2, [r3, #20]
 8009036:	6999      	ldr	r1, [r3, #24]
 8009038:	428a      	cmp	r2, r1
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	d019      	beq.n	8009072 <chOQGetI.constprop.18+0x42>
  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 800903e:	691d      	ldr	r5, [r3, #16]
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 8009040:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
 8009042:	1c48      	adds	r0, r1, #1
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 8009044:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
 8009046:	6198      	str	r0, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top)
 8009048:	42a8      	cmp	r0, r5

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800904a:	780c      	ldrb	r4, [r1, #0]
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 800904c:	4a0b      	ldr	r2, [pc, #44]	; (800907c <chOQGetI.constprop.18+0x4c>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 800904e:	d20d      	bcs.n	800906c <chOQGetI.constprop.18+0x3c>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	490a      	ldr	r1, [pc, #40]	; (800907c <chOQGetI.constprop.18+0x4c>)
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8009054:	429a      	cmp	r2, r3
 8009056:	d007      	beq.n	8009068 <chOQGetI.constprop.18+0x38>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8009058:	6813      	ldr	r3, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800905a:	2500      	movs	r5, #0
 800905c:	6059      	str	r1, [r3, #4]
  chSchReadyI(tp);
 800905e:	4610      	mov	r0, r2

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8009060:	6215      	str	r5, [r2, #32]
 8009062:	600b      	str	r3, [r1, #0]
  chSchReadyI(tp);
 8009064:	f7f9 f89c 	bl	80021a0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 8009068:	4620      	mov	r0, r4
 800906a:	bd38      	pop	{r3, r4, r5, pc}
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
    oqp->q_rdptr = oqp->q_buffer;
 800906c:	68d1      	ldr	r1, [r2, #12]
 800906e:	6191      	str	r1, [r2, #24]
 8009070:	e7ee      	b.n	8009050 <chOQGetI.constprop.18+0x20>
 8009072:	2a00      	cmp	r2, #0
 8009074:	d0e3      	beq.n	800903e <chOQGetI.constprop.18+0xe>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;
 8009076:	f06f 0002 	mvn.w	r0, #2
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20000cc0 	.word	0x20000cc0

08009080 <test_start_timer.constprop.14>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8009080:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8009082:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <test_start_timer.constprop.14+0x30>)
 8009084:	2200      	movs	r2, #0
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	2320      	movs	r3, #32
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	4809      	ldr	r0, [pc, #36]	; (80090b4 <test_start_timer.constprop.14+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp))
 8009090:	68c3      	ldr	r3, [r0, #12]
 8009092:	b10b      	cbz	r3, 8009098 <test_start_timer.constprop.14+0x18>
    chVTDoResetI(vtp);
 8009094:	f7f8 fd5c 	bl	8001b50 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8009098:	4806      	ldr	r0, [pc, #24]	; (80090b4 <test_start_timer.constprop.14+0x34>)
 800909a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800909e:	4a06      	ldr	r2, [pc, #24]	; (80090b8 <test_start_timer.constprop.14+0x38>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	f7f8 fd85 	bl	8001bb0 <chVTDoSetI>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	bd08      	pop	{r3, pc}
 80090ae:	bf00      	nop
 80090b0:	20001fb8 	.word	0x20001fb8
 80090b4:	20001ffc 	.word	0x20001ffc
 80090b8:	08001601 	.word	0x08001601
 80090bc:	f3af 8000 	nop.w

080090c0 <dmaStreamAllocate.constprop.11>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 80090c0:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 80090c2:	4d21      	ldr	r5, [pc, #132]	; (8009148 <dmaStreamAllocate.constprop.11+0x88>)
 80090c4:	7a44      	ldrb	r4, [r0, #9]
 80090c6:	2301      	movs	r3, #1
 80090c8:	682a      	ldr	r2, [r5, #0]
 80090ca:	fa03 f604 	lsl.w	r6, r3, r4
 80090ce:	4216      	tst	r6, r2
 80090d0:	d135      	bne.n	800913e <dmaStreamAllocate.constprop.11+0x7e>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80090d2:	4b1e      	ldr	r3, [pc, #120]	; (800914c <dmaStreamAllocate.constprop.11+0x8c>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 80090d4:	4332      	orrs	r2, r6
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80090d6:	4f1e      	ldr	r7, [pc, #120]	; (8009150 <dmaStreamAllocate.constprop.11+0x90>)
 80090d8:	eb03 06c4 	add.w	r6, r3, r4, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80090dc:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 80090e0:	0653      	lsls	r3, r2, #25
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 80090e2:	602a      	str	r2, [r5, #0]
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80090e4:	6077      	str	r7, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 80090e6:	d004      	beq.n	80090f2 <dmaStreamAllocate.constprop.11+0x32>
    rccEnableDMA1(FALSE);
 80090e8:	4a1a      	ldr	r2, [pc, #104]	; (8009154 <dmaStreamAllocate.constprop.11+0x94>)
 80090ea:	6953      	ldr	r3, [r2, #20]
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6153      	str	r3, [r2, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80090f2:	6802      	ldr	r2, [r0, #0]
 80090f4:	6846      	ldr	r6, [r0, #4]
 80090f6:	6815      	ldr	r5, [r2, #0]
 80090f8:	240f      	movs	r4, #15
 80090fa:	f025 050f 	bic.w	r5, r5, #15
 80090fe:	6015      	str	r5, [r2, #0]
 8009100:	7a05      	ldrb	r5, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8009102:	2300      	movs	r3, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8009104:	40ac      	lsls	r4, r5
 8009106:	6034      	str	r4, [r6, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8009108:	6013      	str	r3, [r2, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800910a:	b1d1      	cbz	r1, 8009142 <dmaStreamAllocate.constprop.11+0x82>
    nvicEnableVector(dmastp->vector, priority);
 800910c:	7a81      	ldrb	r1, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800910e:	2001      	movs	r0, #1
 8009110:	094a      	lsrs	r2, r1, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8009112:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8009116:	f001 011f 	and.w	r1, r1, #31
 800911a:	fa00 f101 	lsl.w	r1, r0, r1
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800911e:	4618      	mov	r0, r3
 8009120:	0092      	lsls	r2, r2, #2
 8009122:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8009126:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800912a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800912e:	25a0      	movs	r5, #160	; 0xa0
 8009130:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8009134:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8009138:	6011      	str	r1, [r2, #0]

  return FALSE;
}
 800913a:	bcf0      	pop	{r4, r5, r6, r7}
 800913c:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 800913e:	4618      	mov	r0, r3
 8009140:	e7fb      	b.n	800913a <dmaStreamAllocate.constprop.11+0x7a>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8009142:	4608      	mov	r0, r1
 8009144:	e7f9      	b.n	800913a <dmaStreamAllocate.constprop.11+0x7a>
 8009146:	bf00      	nop
 8009148:	2000201c 	.word	0x2000201c
 800914c:	20001e30 	.word	0x20001e30
 8009150:	20001fcc 	.word	0x20001fcc
 8009154:	40021000 	.word	0x40021000
 8009158:	f3af 8000 	nop.w
 800915c:	f3af 8000 	nop.w

08009160 <spiExchange.constprop.4>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
 8009160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009162:	4684      	mov	ip, r0
 8009164:	b085      	sub	sp, #20
 8009166:	2320      	movs	r3, #32
 8009168:	f383 8811 	msr	BASEPRI, r3
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 800916c:	4b17      	ldr	r3, [pc, #92]	; (80091cc <spiExchange.constprop.4+0x6c>)
 800916e:	2003      	movs	r0, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009170:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8009172:	6a1d      	ldr	r5, [r3, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009174:	9701      	str	r7, [sp, #4]
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8009176:	6a9f      	ldr	r7, [r3, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009178:	6a5c      	ldr	r4, [r3, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800917a:	f047 0e80 	orr.w	lr, r7, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800917e:	9f01      	ldr	r7, [sp, #4]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8009180:	682d      	ldr	r5, [r5, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009182:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009184:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8009188:	60ea      	str	r2, [r5, #12]
 800918a:	7018      	strb	r0, [r3, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800918c:	f8c5 c004 	str.w	ip, [r5, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8009190:	f8c5 e000 	str.w	lr, [r5]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009194:	60e1      	str	r1, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8009196:	f8c4 c004 	str.w	ip, [r4, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800919a:	6027      	str	r7, [r4, #0]

  dmaStreamEnable(spip->dmarx);
 800919c:	682a      	ldr	r2, [r5, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 800919e:	490c      	ldr	r1, [pc, #48]	; (80091d0 <spiExchange.constprop.4+0x70>)
 80091a0:	f042 0201 	orr.w	r2, r2, #1
 80091a4:	602a      	str	r2, [r5, #0]
  dmaStreamEnable(spip->dmatx);
 80091a6:	6822      	ldr	r2, [r4, #0]
 80091a8:	6989      	ldr	r1, [r1, #24]
 80091aa:	f103 0508 	add.w	r5, r3, #8
 80091ae:	ae04      	add	r6, sp, #16
 80091b0:	f042 0201 	orr.w	r2, r2, #1
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	f846 5d04 	str.w	r5, [r6, #-4]!
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80091ba:	6099      	str	r1, [r3, #8]
  tp->p_u.wtobjp = &trp;
 80091bc:	620e      	str	r6, [r1, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80091be:	f7f8 fe27 	bl	8001e10 <chSchGoSleepS>
 80091c2:	2300      	movs	r3, #0
 80091c4:	f383 8811 	msr	BASEPRI, r3
  _spi_wait_s(spip);
  osalSysUnlock();
}
 80091c8:	b005      	add	sp, #20
 80091ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091cc:	20001fcc 	.word	0x20001fcc
 80091d0:	20001e68 	.word	0x20001e68
 80091d4:	f3af 8000 	nop.w
 80091d8:	f3af 8000 	nop.w
 80091dc:	f3af 8000 	nop.w

080091e0 <_strtok.constprop.3>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	460d      	mov	r5, r1
  char *token;
  if (str)
 80091e4:	4604      	mov	r4, r0
 80091e6:	b190      	cbz	r0, 800920e <_strtok.constprop.3+0x2e>
    *saveptr = str;
 80091e8:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 80091ea:	4620      	mov	r0, r4
 80091ec:	490b      	ldr	r1, [pc, #44]	; (800921c <_strtok.constprop.3+0x3c>)
 80091ee:	f000 f92f 	bl	8009450 <strspn>
 80091f2:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 80091f4:	4620      	mov	r0, r4
 80091f6:	4909      	ldr	r1, [pc, #36]	; (800921c <_strtok.constprop.3+0x3c>)
 80091f8:	f000 f902 	bl	8009400 <strpbrk>
  if (*saveptr)
 80091fc:	b160      	cbz	r0, 8009218 <_strtok.constprop.3+0x38>
    *(*saveptr)++ = '\0';
 80091fe:	1c42      	adds	r2, r0, #1
 8009200:	2300      	movs	r3, #0
 8009202:	602a      	str	r2, [r5, #0]
 8009204:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8009206:	7823      	ldrb	r3, [r4, #0]
 8009208:	b123      	cbz	r3, 8009214 <_strtok.constprop.3+0x34>
 800920a:	4620      	mov	r0, r4
}
 800920c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800920e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8009210:	2c00      	cmp	r4, #0
 8009212:	d1ea      	bne.n	80091ea <_strtok.constprop.3+0xa>
    return NULL;
 8009214:	2000      	movs	r0, #0
 8009216:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 8009218:	6028      	str	r0, [r5, #0]
 800921a:	e7f4      	b.n	8009206 <_strtok.constprop.3+0x26>
 800921c:	0800a8e0 	.word	0x0800a8e0

08009220 <RF_switch.part.4.lto_priv.80>:
}

/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
 8009220:	b508      	push	{r3, lr}
 8009222:	2320      	movs	r3, #32
 8009224:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <RF_switch.part.4.lto_priv.80+0x20>)
 800922a:	2204      	movs	r2, #4
  gpt_lld_start_timer(gptp, interval);
 800922c:	4618      	mov	r0, r3
 800922e:	2123      	movs	r1, #35	; 0x23
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8009230:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
 8009232:	f7fb fb5d 	bl	80048f0 <gpt_lld_start_timer>
 8009236:	2300      	movs	r3, #0
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	bd08      	pop	{r3, pc}
 800923e:	bf00      	nop
 8009240:	20001fbc 	.word	0x20001fbc
 8009244:	f3af 8000 	nop.w
 8009248:	f3af 8000 	nop.w
 800924c:	f3af 8000 	nop.w

08009250 <memset>:
 8009250:	b470      	push	{r4, r5, r6}
 8009252:	0784      	lsls	r4, r0, #30
 8009254:	d046      	beq.n	80092e4 <memset+0x94>
 8009256:	1e54      	subs	r4, r2, #1
 8009258:	2a00      	cmp	r2, #0
 800925a:	d041      	beq.n	80092e0 <memset+0x90>
 800925c:	b2cd      	uxtb	r5, r1
 800925e:	4603      	mov	r3, r0
 8009260:	e002      	b.n	8009268 <memset+0x18>
 8009262:	1e62      	subs	r2, r4, #1
 8009264:	b3e4      	cbz	r4, 80092e0 <memset+0x90>
 8009266:	4614      	mov	r4, r2
 8009268:	f803 5b01 	strb.w	r5, [r3], #1
 800926c:	079a      	lsls	r2, r3, #30
 800926e:	d1f8      	bne.n	8009262 <memset+0x12>
 8009270:	2c03      	cmp	r4, #3
 8009272:	d92e      	bls.n	80092d2 <memset+0x82>
 8009274:	b2cd      	uxtb	r5, r1
 8009276:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800927a:	2c0f      	cmp	r4, #15
 800927c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8009280:	d919      	bls.n	80092b6 <memset+0x66>
 8009282:	4626      	mov	r6, r4
 8009284:	f103 0210 	add.w	r2, r3, #16
 8009288:	3e10      	subs	r6, #16
 800928a:	2e0f      	cmp	r6, #15
 800928c:	f842 5c10 	str.w	r5, [r2, #-16]
 8009290:	f842 5c0c 	str.w	r5, [r2, #-12]
 8009294:	f842 5c08 	str.w	r5, [r2, #-8]
 8009298:	f842 5c04 	str.w	r5, [r2, #-4]
 800929c:	f102 0210 	add.w	r2, r2, #16
 80092a0:	d8f2      	bhi.n	8009288 <memset+0x38>
 80092a2:	f1a4 0210 	sub.w	r2, r4, #16
 80092a6:	f022 020f 	bic.w	r2, r2, #15
 80092aa:	f004 040f 	and.w	r4, r4, #15
 80092ae:	3210      	adds	r2, #16
 80092b0:	2c03      	cmp	r4, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	d90d      	bls.n	80092d2 <memset+0x82>
 80092b6:	461e      	mov	r6, r3
 80092b8:	4622      	mov	r2, r4
 80092ba:	3a04      	subs	r2, #4
 80092bc:	2a03      	cmp	r2, #3
 80092be:	f846 5b04 	str.w	r5, [r6], #4
 80092c2:	d8fa      	bhi.n	80092ba <memset+0x6a>
 80092c4:	1f22      	subs	r2, r4, #4
 80092c6:	f022 0203 	bic.w	r2, r2, #3
 80092ca:	3204      	adds	r2, #4
 80092cc:	4413      	add	r3, r2
 80092ce:	f004 0403 	and.w	r4, r4, #3
 80092d2:	b12c      	cbz	r4, 80092e0 <memset+0x90>
 80092d4:	b2c9      	uxtb	r1, r1
 80092d6:	441c      	add	r4, r3
 80092d8:	f803 1b01 	strb.w	r1, [r3], #1
 80092dc:	42a3      	cmp	r3, r4
 80092de:	d1fb      	bne.n	80092d8 <memset+0x88>
 80092e0:	bc70      	pop	{r4, r5, r6}
 80092e2:	4770      	bx	lr
 80092e4:	4614      	mov	r4, r2
 80092e6:	4603      	mov	r3, r0
 80092e8:	e7c2      	b.n	8009270 <memset+0x20>
 80092ea:	bf00      	nop
 80092ec:	0000      	movs	r0, r0
	...

080092f0 <strcasecmp>:
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <strcasecmp+0x3c>)
 80092f2:	b430      	push	{r4, r5}
 80092f4:	681d      	ldr	r5, [r3, #0]
 80092f6:	e002      	b.n	80092fe <strcasecmp+0xe>
 80092f8:	1a9b      	subs	r3, r3, r2
 80092fa:	d114      	bne.n	8009326 <strcasecmp+0x36>
 80092fc:	b19a      	cbz	r2, 8009326 <strcasecmp+0x36>
 80092fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009302:	18ea      	adds	r2, r5, r3
 8009304:	7852      	ldrb	r2, [r2, #1]
 8009306:	f002 0203 	and.w	r2, r2, #3
 800930a:	2a01      	cmp	r2, #1
 800930c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009310:	bf08      	it	eq
 8009312:	3320      	addeq	r3, #32
 8009314:	18ac      	adds	r4, r5, r2
 8009316:	7864      	ldrb	r4, [r4, #1]
 8009318:	f004 0403 	and.w	r4, r4, #3
 800931c:	2c01      	cmp	r4, #1
 800931e:	d1eb      	bne.n	80092f8 <strcasecmp+0x8>
 8009320:	3220      	adds	r2, #32
 8009322:	1a9b      	subs	r3, r3, r2
 8009324:	d0eb      	beq.n	80092fe <strcasecmp+0xe>
 8009326:	4618      	mov	r0, r3
 8009328:	bc30      	pop	{r4, r5}
 800932a:	4770      	bx	lr
 800932c:	20000d0c 	.word	0x20000d0c

08009330 <strlen>:
 8009330:	f020 0103 	bic.w	r1, r0, #3
 8009334:	f010 0003 	ands.w	r0, r0, #3
 8009338:	f1c0 0000 	rsb	r0, r0, #0
 800933c:	f851 3b04 	ldr.w	r3, [r1], #4
 8009340:	f100 0c04 	add.w	ip, r0, #4
 8009344:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009348:	f06f 0200 	mvn.w	r2, #0
 800934c:	bf1c      	itt	ne
 800934e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8009352:	4313      	orrne	r3, r2
 8009354:	f04f 0c01 	mov.w	ip, #1
 8009358:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800935c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8009360:	eba3 020c 	sub.w	r2, r3, ip
 8009364:	ea22 0203 	bic.w	r2, r2, r3
 8009368:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800936c:	bf04      	itt	eq
 800936e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009372:	3004      	addeq	r0, #4
 8009374:	d0f4      	beq.n	8009360 <strlen+0x30>
 8009376:	f1c2 0100 	rsb	r1, r2, #0
 800937a:	ea02 0201 	and.w	r2, r2, r1
 800937e:	fab2 f282 	clz	r2, r2
 8009382:	f1c2 021f 	rsb	r2, r2, #31
 8009386:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800938a:	4770      	bx	lr
 800938c:	0000      	movs	r0, r0
	...

08009390 <strncpy>:
 8009390:	ea40 0301 	orr.w	r3, r0, r1
 8009394:	079b      	lsls	r3, r3, #30
 8009396:	b470      	push	{r4, r5, r6}
 8009398:	d12b      	bne.n	80093f2 <strncpy+0x62>
 800939a:	2a03      	cmp	r2, #3
 800939c:	d929      	bls.n	80093f2 <strncpy+0x62>
 800939e:	460c      	mov	r4, r1
 80093a0:	4603      	mov	r3, r0
 80093a2:	4621      	mov	r1, r4
 80093a4:	f854 6b04 	ldr.w	r6, [r4], #4
 80093a8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 80093ac:	ea25 0506 	bic.w	r5, r5, r6
 80093b0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 80093b4:	d105      	bne.n	80093c2 <strncpy+0x32>
 80093b6:	3a04      	subs	r2, #4
 80093b8:	2a03      	cmp	r2, #3
 80093ba:	f843 6b04 	str.w	r6, [r3], #4
 80093be:	4621      	mov	r1, r4
 80093c0:	d8ef      	bhi.n	80093a2 <strncpy+0x12>
 80093c2:	b1a2      	cbz	r2, 80093ee <strncpy+0x5e>
 80093c4:	780c      	ldrb	r4, [r1, #0]
 80093c6:	3a01      	subs	r2, #1
 80093c8:	701c      	strb	r4, [r3, #0]
 80093ca:	3101      	adds	r1, #1
 80093cc:	3301      	adds	r3, #1
 80093ce:	b13c      	cbz	r4, 80093e0 <strncpy+0x50>
 80093d0:	b16a      	cbz	r2, 80093ee <strncpy+0x5e>
 80093d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d6:	3a01      	subs	r2, #1
 80093d8:	f803 4b01 	strb.w	r4, [r3], #1
 80093dc:	2c00      	cmp	r4, #0
 80093de:	d1f7      	bne.n	80093d0 <strncpy+0x40>
 80093e0:	b12a      	cbz	r2, 80093ee <strncpy+0x5e>
 80093e2:	441a      	add	r2, r3
 80093e4:	2100      	movs	r1, #0
 80093e6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d1fb      	bne.n	80093e6 <strncpy+0x56>
 80093ee:	bc70      	pop	{r4, r5, r6}
 80093f0:	4770      	bx	lr
 80093f2:	4603      	mov	r3, r0
 80093f4:	e7e5      	b.n	80093c2 <strncpy+0x32>
 80093f6:	bf00      	nop
	...

08009400 <strpbrk>:
 8009400:	b430      	push	{r4, r5}
 8009402:	7804      	ldrb	r4, [r0, #0]
 8009404:	b1ec      	cbz	r4, 8009442 <strpbrk+0x42>
 8009406:	780d      	ldrb	r5, [r1, #0]
 8009408:	b1ad      	cbz	r5, 8009436 <strpbrk+0x36>
 800940a:	42ac      	cmp	r4, r5
 800940c:	d00e      	beq.n	800942c <strpbrk+0x2c>
 800940e:	460a      	mov	r2, r1
 8009410:	e001      	b.n	8009416 <strpbrk+0x16>
 8009412:	429c      	cmp	r4, r3
 8009414:	d009      	beq.n	800942a <strpbrk+0x2a>
 8009416:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f9      	bne.n	8009412 <strpbrk+0x12>
 800941e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009422:	2c00      	cmp	r4, #0
 8009424:	d1f0      	bne.n	8009408 <strpbrk+0x8>
 8009426:	7815      	ldrb	r5, [r2, #0]
 8009428:	e000      	b.n	800942c <strpbrk+0x2c>
 800942a:	4625      	mov	r5, r4
 800942c:	2d00      	cmp	r5, #0
 800942e:	bf08      	it	eq
 8009430:	2000      	moveq	r0, #0
 8009432:	bc30      	pop	{r4, r5}
 8009434:	4770      	bx	lr
 8009436:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800943a:	460a      	mov	r2, r1
 800943c:	2c00      	cmp	r4, #0
 800943e:	d1e3      	bne.n	8009408 <strpbrk+0x8>
 8009440:	e7f1      	b.n	8009426 <strpbrk+0x26>
 8009442:	4620      	mov	r0, r4
 8009444:	bc30      	pop	{r4, r5}
 8009446:	4770      	bx	lr
	...

08009450 <strspn>:
 8009450:	b470      	push	{r4, r5, r6}
 8009452:	7804      	ldrb	r4, [r0, #0]
 8009454:	b1a4      	cbz	r4, 8009480 <strspn+0x30>
 8009456:	4605      	mov	r5, r0
 8009458:	780e      	ldrb	r6, [r1, #0]
 800945a:	b14e      	cbz	r6, 8009470 <strspn+0x20>
 800945c:	42b4      	cmp	r4, r6
 800945e:	d00a      	beq.n	8009476 <strspn+0x26>
 8009460:	460a      	mov	r2, r1
 8009462:	e001      	b.n	8009468 <strspn+0x18>
 8009464:	429c      	cmp	r4, r3
 8009466:	d006      	beq.n	8009476 <strspn+0x26>
 8009468:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1f9      	bne.n	8009464 <strspn+0x14>
 8009470:	1a28      	subs	r0, r5, r0
 8009472:	bc70      	pop	{r4, r5, r6}
 8009474:	4770      	bx	lr
 8009476:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800947a:	2c00      	cmp	r4, #0
 800947c:	d1ed      	bne.n	800945a <strspn+0xa>
 800947e:	e7f7      	b.n	8009470 <strspn+0x20>
 8009480:	4620      	mov	r0, r4
 8009482:	e7f6      	b.n	8009472 <strspn+0x22>
	...
 8009490:	00000101 	.word	0x00000101
 8009494:	00020111 	.word	0x00020111
 8009498:	00001001 	.word	0x00001001
 800949c:	00022011 	.word	0x00022011
 80094a0:	00000002 	.word	0x00000002
 80094a4:	0e031211 	.word	0x0e031211
 80094a8:	00aa0006 	.word	0x00aa0006
 80094ac:	190b2011 	.word	0x190b2011
 80094b0:	80030880 	.word	0x80030880
 80094b4:	7410f000 	.word	0x7410f000
 80094b8:	005500e8 	.word	0x005500e8
 80094bc:	240c2011 	.word	0x240c2011
 80094c0:	03ab0c06 	.word	0x03ab0c06
 80094c4:	00c20203 	.word	0x00c20203
 80094c8:	01c03204 	.word	0x01c03204
 80094cc:	30032011 	.word	0x30032011
 80094d0:	00c06403 	.word	0x00c06403
 80094d4:	50022011 	.word	0x50022011
 80094d8:	00000a84 	.word	0x00000a84
 80094dc:	54022011 	.word	0x54022011
 80094e0:	0000070f 	.word	0x0000070f
 80094e4:	5b052011 	.word	0x5b052011
 80094e8:	78210440 	.word	0x78210440
 80094ec:	00000020 	.word	0x00000020
 80094f0:	000c2111 	.word	0x000c2111
 80094f4:	510fbaff 	.word	0x510fbaff
 80094f8:	fcc9a9cf 	.word	0xfcc9a9cf
 80094fc:	010f1e1b 	.word	0x010f1e1b
 8009500:	0c0c2111 	.word	0x0c0c2111
 8009504:	ff15fdfc 	.word	0xff15fdfc
 8009508:	baff0f00 	.word	0xbaff0f00
 800950c:	a9cf510f 	.word	0xa9cf510f
 8009510:	180c2111 	.word	0x180c2111
 8009514:	1e1bfcc9 	.word	0x1e1bfcc9
 8009518:	fdfc010f 	.word	0xfdfc010f
 800951c:	0f00ff15 	.word	0x0f00ff15
 8009520:	06011211 	.word	0x06011211
 8009524:	00000000 	.word	0x00000000
 8009528:	00011211 	.word	0x00011211
 800952c:	00000085 	.word	0x00000085
 8009530:	01021111 	.word	0x01021111
 8009534:	000091d3 	.word	0x000091d3
 8009538:	00300031 	.word	0x00300031
 800953c:	00000000 	.word	0x00000000

08009540 <testmtx4>:
 8009540:	08009e40 08002c51 00000000 08002cb1     @...Q,.......,..

08009550 <testmtx5>:
 8009550:	08009e30 08002c41 00000000 08005f01     0...A,......._..

08009560 <testmtx6>:
 8009560:	08009e18 080054d1 00000000 08005e21     .....T......!^..

08009570 <testmtx7>:
 8009570:	08009e00 080054b1 00000000 08005d31     .....T......1]..

08009580 <testmtx8>:
 8009580:	08009dec 08005481 00000000 08005b81     .....T.......[..

08009590 <patternmsg>:
 8009590:	080097d0 00000000 00000000 00000000     ................

080095a0 <testbmk11>:
 80095a0:	08009b0c 08007051 00000000 080071f1     ....Qp.......q..

080095b0 <testbmk12>:
 80095b0:	08009aec 08007041 00000000 08007181     ....Ap.......q..

080095c0 <testevt2>:
 80095c0:	08009d7c 080087d1 00000000 080087f1     |...............

080095d0 <patterndyn>:
 80095d0:	08009770 08009780 08009790 00000000     p...............

080095e0 <testsem1>:
 80095e0:	08009ed8 08002ca1 00000000 08003521     .....,......!5..

080095f0 <testsem2>:
 80095f0:	08009ec4 08002c91 00000000 080033c1     .....,.......3..

08009600 <testsem3>:
 8009600:	08009ea4 08002c81 00000000 08003311     .....,.......3..

08009610 <testsem4>:
 8009610:	08009e80 00000000 00000000 080031b1     .............1..

08009620 <testbmk6>:
 8009620:	08009bcc 00000000 00000000 080074a1     .............t..

08009630 <testbmk10>:
 8009630:	08009b30 00000000 00000000 08007291     0............r..

08009640 <testbmk4>:
 8009640:	08009c0c 00000000 00000000 080076e1     .............v..

08009650 <patternthd>:
 8009650:	08009810 08009820 08009830 08009840     .... ...0...@...
	...

08009670 <testbmk13>:
 8009670:	08009ad0 00000000 00000000 08007091     .............p..

08009680 <testbmk1>:
 8009680:	08009c58 00000000 00000000 08007981     X............y..

08009690 <testbmk2>:
 8009690:	08009c40 00000000 00000000 08007911     @............y..

080096a0 <testbmk3>:
 80096a0:	08009c28 00000000 00000000 08007831     (...........1x..

080096b0 <testbmk5>:
 80096b0:	08009bec 00000000 00000000 08007671     ............qv..

080096c0 <testbmk8>:
 80096c0:	08009b78 00000000 00000000 080073c1     x............s..

080096d0 <testbmk7>:
 80096d0:	08009ba4 08007071 00000000 08007541     ....qp......Au..

080096e0 <testpools1>:
 80096e0:	08009d24 080066d1 00000000 08006b41     $....f......Ak..

080096f0 <testbmk9>:
 80096f0:	08009b54 00000000 00000000 08007311     T............s..

08009700 <patternbmk>:
 8009700:	08009680 08009690 080096a0 08009640     ............@...
 8009710:	080096b0 08009620 080096d0 080096c0     .... ...........
 8009720:	080096f0 08009630 080095a0 080095b0     ....0...........
 8009730:	08009670 00000000 00000000 00000000     p...............

08009740 <patterns>:
 8009740:	08009650 08009850 080098b0 08009590     P...P...........
 8009750:	08009800 080097b0 080097c0 08009f70     ............p...
 8009760:	080095d0 08009870 08009700 00000000     ....p...........

08009770 <testdyn1>:
 8009770:	08009cf8 08006691 00000000 08006d01     .....f.......m..

08009780 <testdyn2>:
 8009780:	08009cc8 08006671 00000000 08006c11     ....qf.......l..

08009790 <testdyn3>:
 8009790:	08009ca0 08006641 00000000 08006a01     ....Af.......j..

080097a0 <testmbox1>:
 80097a0:	08009dbc 08005441 00000000 080054f1     ....AT.......T..

080097b0 <patternevt>:
 80097b0:	08009880 080095c0 080098a0 00000000     ................

080097c0 <patternheap>:
 80097c0:	08009890 00000000 00000000 00000000     ................

080097d0 <testmsg1>:
 80097d0:	08009ddc 00000000 00000000 08005ae1     .............Z..

080097e0 <testqueues1>:
 80097e0:	08009c88 08006611 00000000 08006751     .....f......Qg..

080097f0 <testqueues2>:
 80097f0:	08009c70 080065e1 00000000 08007a11     p....e.......z..

08009800 <patternmbox>:
 8009800:	080097a0 00000000 00000000 00000000     ................

08009810 <testthd1>:
 8009810:	08009f38 00000000 00000000 08003031     8...........10..

08009820 <testthd2>:
 8009820:	08009f1c 00000000 00000000 08003691     .............6..

08009830 <testthd3>:
 8009830:	08009f00 00000000 00000000 080038b1     .............8..

08009840 <testthd4>:
 8009840:	08009ef0 00000000 00000000 080037e1     .............7..

08009850 <patternsem>:
 8009850:	080095e0 080095f0 08009600 08009610     ................
	...

08009870 <patternqueues>:
 8009870:	080097e0 080097f0 00000000 00000000     ................

08009880 <testevt1>:
 8009880:	08009d98 080087e1 00000000 08008b51     ............Q...

08009890 <testheap1>:
 8009890:	08009d40 080066f1 00000000 08006e01     @....f.......n..

080098a0 <testevt3>:
 80098a0:	08009d68 080087c1 00000000 08008661     h...........a...

080098b0 <patternmtx>:
 80098b0:	08009f60 08009540 08009550 08009560     `...@...P...`...
 80098c0:	08009570 08009580 00000000 00000000     p...............
 80098d0:	656c6469 00000000 202a2a2a 6e72654b     idle....*** Kern
 80098e0:	203a6c65 20202020 00002020 202a2a2a     el:       ..*** 
 80098f0:	706d6f43 64656c69 2020203a 00002020     Compiled:     ..
 8009900:	202a2a2a 706d6f43 72656c69 2020203a     *** Compiler:   
 8009910:	00002020 202a2a2a 68637241 63657469       ..*** Architec
 8009920:	65727574 0000203a 202a2a2a 65726f43     ture: ..*** Core
 8009930:	72615620 746e6169 0000203a 202a2a2a      Variant: ..*** 
 8009940:	74726f50 666e4920 20203a6f 00002020     Port Info:    ..
 8009950:	202a2a2a 74616c50 6d726f66 2020203a     *** Platform:   
 8009960:	00002020 202a2a2a 74736554 616f4220       ..*** Test Boa
 8009970:	203a6472 00002020 202d2d2d 74736554     rd:   ..--- Test
 8009980:	73614320 00002065 00002820 202d2d2d      Case .. (..--- 
 8009990:	75736552 203a746c 4c494146 20455255     Result: FAILURE 
 80099a0:	00002328 00005b20 616e6946 6572206c     (#.. [..Final re
 80099b0:	746c7573 0000203a 202a2a2a 62696843     sult: ..*** Chib
 80099c0:	2f534f69 74205452 20747365 74697573     iOS/RT test suit
 80099d0:	00000065 002a2a2a 00000029 0000295d     e...***.)...])..
 80099e0:	202d2d2d 75736552 203a746c 43435553     --- Result: SUCC
 80099f0:	00535345 4c494146 00455255 2e302e33     ESS.FAILURE.3.0.
 8009a00:	76656430 00000000 20626546 32203320     0dev....Feb  3 2
 8009a10:	20353130 3031202d 3a37333a 00003133     015 - 10:37:31..
 8009a20:	20434347 2e392e34 30322033 31313431     GCC 4.9.3 201411
 8009a30:	28203931 656c6572 29657361 52415b20     19 (release) [AR
 8009a40:	6d652f4d 64646562 342d6465 622d395f     M/embedded-4_9-b
 8009a50:	636e6172 65722068 69736976 32206e6f     ranch revision 2
 8009a60:	37323831 00005d38 764d5241 004d2d37     18278]..ARMv7-M.
 8009a70:	74726f43 4d2d7865 00000033 61766441     Cortex-M3...Adva
 8009a80:	6465636e 72656b20 206c656e 65646f6d     nced kernel mode
 8009a90:	00000000 334d5453 30314632 65502078     ....STM32F10x Pe
 8009aa0:	726f6672 636e616d 694c2065 4d20656e     rformance Line M
 8009ab0:	75696465 6544206d 7469736e 00000079     edium Density...
 8009ac0:	55207854 6e696c70 6f62206b 00647261     Tx Uplink board.
 8009ad0:	636e6542 72616d68 52202c6b 66204d41     Benchmark, RAM f
 8009ae0:	70746f6f 746e6972 00000000 636e6542     ootprint....Benc
 8009af0:	72616d68 6d202c6b 78657475 6c207365     hmark, mutexes l
 8009b00:	2f6b636f 6f6c6e75 00006b63 636e6542     ock/unlock..Benc
 8009b10:	72616d68 73202c6b 70616d65 65726f68     hmark, semaphore
 8009b20:	61772073 732f7469 616e6769 0000006c     s wait/signal...
 8009b30:	636e6542 72616d68 76202c6b 75747269     Benchmark, virtu
 8009b40:	74206c61 72656d69 65732073 65722f74     al timers set/re
 8009b50:	00746573 636e6542 72616d68 49202c6b     set.Benchmark, I
 8009b60:	51204f2f 65756575 68742073 67756f72     /O Queues throug
 8009b70:	74757068 00000000 636e6542 72616d68     hput....Benchmar
 8009b80:	72202c6b 646e756f 626f7220 63206e69     k, round robin c
 8009b90:	65746e6f 73207478 63746977 676e6968     ontext switching
 8009ba0:	00000000 636e6542 72616d68 6d202c6b     ....Benchmark, m
 8009bb0:	20737361 63736572 75646568 202c656c     ass reschedule, 
 8009bc0:	68742035 64616572 00000073 636e6542     5 threads...Benc
 8009bd0:	72616d68 74202c6b 61657268 202c7364     hmark, threads, 
 8009be0:	61657263 6f206574 00796c6e 636e6542     create only.Benc
 8009bf0:	72616d68 74202c6b 61657268 202c7364     hmark, threads, 
 8009c00:	6c6c7566 63796320 0000656c 636e6542     full cycle..Benc
 8009c10:	72616d68 63202c6b 65746e6f 73207478     hmark, context s
 8009c20:	63746977 00000068 636e6542 72616d68     witch...Benchmar
 8009c30:	6d202c6b 61737365 20736567 00003323     k, messages #3..
 8009c40:	636e6542 72616d68 6d202c6b 61737365     Benchmark, messa
 8009c50:	20736567 00003223 636e6542 72616d68     ges #2..Benchmar
 8009c60:	6d202c6b 61737365 20736567 00003123     k, messages #1..
 8009c70:	75657551 202c7365 7074756f 71207475     Queues, output q
 8009c80:	65756575 00000073 75657551 202c7365     ueues...Queues, 
 8009c90:	75706e69 75712074 73657565 00000000     input queues....
 8009ca0:	616e7944 2063696d 73495041 6572202c     Dynamic APIs, re
 8009cb0:	74736967 61207972 7220646e 72656665     gistry and refer
 8009cc0:	65636e65 00000073 616e7944 2063696d     ences...Dynamic 
 8009cd0:	73495041 6874202c 64616572 72632073     APIs, threads cr
 8009ce0:	69746165 66206e6f 206d6f72 6f6d656d     eation from memo
 8009cf0:	70207972 006c6f6f 616e7944 2063696d     ry pool.Dynamic 
 8009d00:	73495041 6874202c 64616572 72632073     APIs, threads cr
 8009d10:	69746165 66206e6f 206d6f72 70616568     eation from heap
 8009d20:	00000000 6f6d654d 50207972 736c6f6f     ....Memory Pools
 8009d30:	7571202c 2f657565 75716564 00657565     , queue/dequeue.
 8009d40:	70616548 6c61202c 61636f6c 6e6f6974     Heap, allocation
 8009d50:	646e6120 61726620 6e656d67 69746174      and fragmentati
 8009d60:	74206e6f 00747365 6e657645 202c7374     on test.Events, 
 8009d70:	656d6974 7374756f 00000000 6e657645     timeouts....Even
 8009d80:	202c7374 74696177 646e6120 6f726220     ts, wait and bro
 8009d90:	61636461 00007473 6e657645 202c7374     adcast..Events, 
 8009da0:	69676572 61727473 6e6f6974 646e6120     registration and
 8009db0:	73696420 63746170 00000068 6c69614d      dispatch...Mail
 8009dc0:	65786f62 71202c73 69756575 6120676e     boxes, queuing a
 8009dd0:	7420646e 6f656d69 00737475 7373654d     nd timeouts.Mess
 8009de0:	73656761 6f6c202c 0000706f 646e6f43     ages, loop..Cond
 8009df0:	2c726156 6f6f6220 74207473 00747365     Var, boost test.
 8009e00:	646e6f43 2c726156 6f726220 61636461     CondVar, broadca
 8009e10:	74207473 00747365 646e6f43 2c726156     st test.CondVar,
 8009e20:	67697320 206c616e 74736574 00000000      signal test....
 8009e30:	6574754d 2c736578 61747320 00737574     Mutexes, status.
 8009e40:	6574754d 2c736578 69727020 7469726f     Mutexes, priorit
 8009e50:	65722079 6e727574 00000000 6574754d     y return....Mute
 8009e60:	2c736578 69727020 7469726f 6e652079     xes, priority en
 8009e70:	75657571 20676e69 74736574 00000000     queuing test....
 8009e80:	616e6942 53207972 70616d65 65726f68     Binary Semaphore
 8009e90:	66202c73 74636e75 616e6f69 7974696c     s, functionality
 8009ea0:	00000000 616d6553 726f6870 202c7365     ....Semaphores, 
 8009eb0:	6d6f7461 73206369 616e6769 61772d6c     atomic signal-wa
 8009ec0:	00007469 616d6553 726f6870 202c7365     it..Semaphores, 
 8009ed0:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 8009ee0:	202c7365 75716e65 6e697565 00000067     es, enqueuing...
 8009ef0:	65726854 2c736461 6c656420 00737961     Threads, delays.
 8009f00:	65726854 2c736461 69727020 7469726f     Threads, priorit
 8009f10:	68632079 65676e61 00000000 65726854     y change....Thre
 8009f20:	2c736461 716e6520 69756575 7420676e     ads, enqueuing t
 8009f30:	20747365 00003223 65726854 2c736461     est #2..Threads,
 8009f40:	716e6520 69756575 7420676e 20747365      enqueuing test 
 8009f50:	00003123 00000000 00000000 00000000     #1..............

08009f60 <testmtx1>:
 8009f60:	08009e5c 08002c71 00000000 08002f41     \...q,......A/..

08009f70 <patternpools>:
 8009f70:	080096e0 00000000 00000000 00000000     ................
 8009f80:	00000042 00000041 00000043 44434241     B...A...C...ABCD
 8009f90:	00000045 00000000 00000000 00000000     E...............
 8009fa0:	6c756e28 0000296c 6c656873 0000006c     (null)..shell...
 8009fb0:	68430a0d 4f696269 54522f53 65685320     ..ChibiOS/RT She
 8009fc0:	0a0d6c6c 00000000 203e6863 00000000     ll......ch> ....
 8009fd0:	0000445e 206f6f74 796e616d 67726120     ^D..too many arg
 8009fe0:	6e656d75 0a0d7374 00000000 74697865     uments......exit
 8009ff0:	00000000 67617355 25203a65 000a0d73     ....Usage: %s...
 800a000:	706c6568 00000000 6d6d6f43 73646e61     help....Commands
 800a010:	6568203a 6520706c 20746978 00000000     : help exit ....
 800a020:	00207325 00007325 0a0d3f20 00000000     %s .%s.. ?......
 800a030:	6f6c0a0d 74756f67 00000000 74737973     ..logout....syst
 800a040:	00656d69 0d756c25 0000000a 6f666e69     ime.%lu.....info
 800a050:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 800a060:	73252020 00000a0d 706d6f43 72656c69       %s....Compiler
 800a070:	2020203a 73252020 00000a0d 68637241     :     %s....Arch
 800a080:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 800a090:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 800a0a0:	00000a0d 74726f50 666e4920 20203a6f     ....Port Info:  
 800a0b0:	73252020 00000a0d 74616c50 6d726f66       %s....Platform
 800a0c0:	2020203a 73252020 00000a0d 72616f42     :     %s....Boar
 800a0d0:	20203a64 20202020 73252020 00000a0d     d:        %s....
 800a0e0:	6c697542 69742064 203a656d 73252020     Build time:   %s
 800a0f0:	73257325 00000a0d 20626546 32203320     %s%s....Feb  3 2
 800a100:	00353130 00202d20 333a3031 36333a37     015. - .10:37:36
	...

0800a120 <ep0config>:
 800a120:	00000000 08004f31 08004e51 08004bd1     ....1O..QN...K..
 800a130:	00400040 20000d30 20000d30 00000001     @.@.0.. 0.. ....
 800a140:	20000d44 00000000 00000000 00000000     D.. ............

0800a150 <pow10>:
 800a150:	0000000a 00000064 000003e8 00002710     ....d........'..
 800a160:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 800a170:	3b9aca00 00000000 00000000 00000000     ...;............

0800a180 <CSWTCH.32>:
 800a180:	00000400 00000600 00000000 00000000     ................

0800a190 <zero_status>:
	...

0800a1a0 <active_status>:
	...
 800a1b0:	20414d44 6c696166 00657275 00000000     DMA failure.....

0800a1c0 <halted_status>:
 800a1c0:	00000001 00000000 00000000 00000000     ................
 800a1d0:	00434241 00000000 00000000 00000000     ABC.............

0800a1e0 <vcom_string0>:
 800a1e0:	04090304 00000000 00000000 00000000     ................

0800a1f0 <ep2config>:
 800a1f0:	00000003 00000000 080049b1 00000000     .........I......
 800a200:	00000010 20001520 00000000 00000001     .... .. ........
	...

0800a220 <vcom_string3>:
 800a220:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800a230 <vcom_string1>:
 800a230:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 800a240:	00000073 00000000 00000000 00000000     s...............

0800a250 <vcom_strings>:
 800a250:	00000004 0800a1e0 00000012 0800a230     ............0...
 800a260:	00000038 0800a2a0 00000008 0800a220     8........... ...

0800a270 <vcom_device_descriptor>:
 800a270:	00000012 0800a370 00000000 00000000     ....p...........

0800a280 <vmt>:
 800a280:	08004d91 08004d71 08004dd1 08004db1     .M..qM...M...M..
 800a290:	08004dc1 08004da1 08004d81 08004d61     .M...M...M..aM..

0800a2a0 <vcom_string2>:
 800a2a0:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800a2b0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800a2c0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800a2d0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800a2e0 <_stm32_dma_streams>:
 800a2e0:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 800a2f0:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 800a300:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 800a310:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 800a320:	40020004 00100514 40020080 40020004     ...@.......@...@
 800a330:	00110618 00000000 00000000 00000000     ................

0800a340 <usbcfg>:
 800a340:	08006291 08006021 080049c1 00000000     .b..!`...I......

0800a350 <ch_debug>:
 800a350:	6e69616d 18001600 08440204 1814100c     main......D.....
 800a360:	1e1d1c00 00000000 00000000 00000000     ................

0800a370 <vcom_device_descriptor_data>:
 800a370:	01100112 40000002 00041eaf 02010200     .......@........
 800a380:	00000103 00000000 00000000 00000000     ................

0800a390 <vcom_configuration_descriptor>:
 800a390:	00000043 0800a680 00000000 00000000     C...............
 800a3a0:	6e696c62 0072656b 73746547 72617020     blinker.Gets par
 800a3b0:	44492074 7355202c 3a656761 0d207020     t ID, Usage: p .
 800a3c0:	0000000a 0d583425 0000000a 646e6553     ....%4X.....Send
 800a3d0:	20612073 6b636170 202c7465 67617355     s a packet, Usag
 800a3e0:	73203a65 61703c20 74656b63 000a0d3e     e: s <packet>...
 800a3f0:	6361703c 3e74656b 73756d20 65622074     <packet> must be
 800a400:	61786520 796c7463 63203620 61726168      exactly 6 chara
 800a410:	72657463 000a0d73 656e7554 6f642073     cters...Tunes do
 800a420:	62206e77 30352079 202c7a68 67617355     wn by 50hz, Usag
 800a430:	64203a65 00000a0d 71657246 636e6575     e: d....Frequenc
 800a440:	73692079 7525203a 00000a0d 656e7554     y is: %u....Tune
 800a450:	70752073 20796220 7a683035 7355202c     s up by 50hz, Us
 800a460:	3a656761 0a0d7520 00000000 730a0a0d     age: u.........s
 800a470:	70706f74 0a0d6465 00000000 67617355     topped......Usag
 800a480:	77203a65 65746972 00000a0d 67617355     e: write....Usag
 800a490:	74203a65 0d747365 0000000a 2074756f     e: test.....out 
 800a4a0:	6d20666f 726f6d65 000a0d79 67617355     of memory...Usag
 800a4b0:	74203a65 61657268 0a0d7364 00000000     e: threads......
 800a4c0:	20202020 72646461 20202020 63617473         addr    stac
 800a4d0:	7270206b 72206f69 20736665 20202020     k prio refs     
 800a4e0:	74617473 000a0d65 6c383025 30252078     state...%08lx %0
 800a4f0:	20786c38 756c3425 6c342520 39252075     8lx %4lu %4lu %9
 800a500:	000a0d73 67617355 6d203a65 0a0d6d65     s...Usage: mem..
 800a510:	00000000 65726f63 65726620 656d2065     ....core free me
 800a520:	79726f6d 25203a20 79622075 0d736574     mory : %u bytes.
 800a530:	0000000a 70616568 61726620 6e656d67     ....heap fragmen
 800a540:	20207374 25203a20 000a0d75 70616568     ts   : %u...heap
 800a550:	65726620 6f742065 206c6174 25203a20      free total  : %
 800a560:	79622075 0d736574 0000000a 006d656d     u bytes.....mem.
 800a570:	65726874 00736461 74697277 00000065     threads.write...
 800a580:	00000075 00000064 00000070 44414552     u...d...p...READ
 800a590:	00000059 52525543 00544e45 54535457     Y...CURRENT.WTST
 800a5a0:	00545241 50535553 45444e45 00000044     ART.SUSPENDED...
 800a5b0:	55455551 00004445 45535457 0000004d     QUEUED..WTSEM...
 800a5c0:	544d5457 00000058 4f435457 0000444e     WTMTX...WTCOND..
 800a5d0:	45454c53 474e4950 00000000 58455457     SLEEPING....WTEX
 800a5e0:	00005449 524f5457 00545645 4e415457     IT..WTOREVT.WTAN
 800a5f0:	54564544 00000000 4d444e53 00514753     DEVT....SNDMSGQ.
 800a600:	4d444e53 00004753 534d5457 00000047     SNDMSG..WTMSG...
 800a610:	414e4946 0000004c 00000000 00000000     FINAL...........

0800a620 <serusbcfg>:
 800a620:	2000121c 00020101 00000000 00000000     ... ............

0800a630 <commands>:
 800a630:	0800a56c 08006451 0800a570 080063e1     l...Qd..p....c..
 800a640:	08009e78 08006391 0800a578 08006341     x....c..x...Ac..
 800a650:	0800a580 08006221 0800a584 080061b1     ....!b.......a..
 800a660:	08009bc8 08006131 0800a588 08006111     ....1a.......a..
	...

0800a680 <vcom_configuration_descriptor_data>:
 800a680:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800a690:	24050001 05011000 01000124 02022404     ...$....$....$..
 800a6a0:	00062405 82050701 ff000803 00010409     .$..............
 800a6b0:	00000a02 01050700 00004002 02810507     .........@......
 800a6c0:	00000040 00000000 00000000 00000000     @...............

0800a6d0 <states.8545>:
 800a6d0:	0800a58c 0800a594 0800a59c 0800a5a4     ................
 800a6e0:	0800a5b0 0800a5b8 0800a5c0 0800a5c8     ................
 800a6f0:	0800a5d0 0800a5dc 0800a5e4 0800a5ec     ................
 800a700:	0800a5f8 0800a600 0800a608 0800a610     ................

0800a710 <shell_cfg1>:
 800a710:	200012c8 0800a630 00000000 00000000     ... 0...........

0800a720 <ep1config>:
 800a720:	00000002 00000000 08004cd1 08005301     .........L...S..
 800a730:	00400040 2000154c 20001538 00000002     @.@.L.. 8.. ....
	...
 800a750:	44434241 00000000 00004241 00000000     ABCD....AB......

0800a760 <wa>:
 800a760:	200017c8 20001910 20001a58 20001ba0     ... ... X.. ... 
 800a770:	20001ce8 00000000 00000000 00000000     ... ............
 800a780:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 800a790:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 800a7a0:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 800a7b0:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 800a7c0:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 800a7d0:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 800a7e0:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 800a7f0:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 800a800:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 800a810:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 800a820:	203a2e42 00000000 202d2d2d 726f6353     B.: ....--- Scor
 800a830:	203a2065 00000000 636f6c20 6e752b6b     e : .... lock+un
 800a840:	6b636f6c 0000532f 69617720 69732b74     lock/S.. wait+si
 800a850:	6c616e67 0000532f 6d697420 2f737265     gnal/S.. timers/
 800a860:	00000053 74796220 532f7365 00000000     S... bytes/S....
 800a870:	78746320 2f637773 00000053 72687420      ctxswc/S... thr
 800a880:	73646165 0000532f 73657220 64656863     eads/S.. resched
 800a890:	73656c75 202c532f 00000000 67736d20     ules/S, .... msg
 800a8a0:	2c532f73 00000020 00000000 00000000     s/S, ...........

0800a8b0 <spicfg>:
 800a8b0:	08006001 40010800 000c0004 00000000     .`.....@........
 800a8c0:	34346973 00003233 00000000 00000000     si4432..........

0800a8d0 <evhndl>:
 800a8d0:	08008c51 08008c41 08008c31 00000000     Q...A...1.......
 800a8e0:	00000920 00000000 00000000 00000000      ...............

0800a8f0 <_ctype_>:
 800a8f0:	20202000 20202020 28282020 20282828     .         ((((( 
 800a900:	20202020 20202020 20202020 20202020                     
 800a910:	10108820 10101010 10101010 10101010      ...............
 800a920:	04040410 04040404 10040404 10101010     ................
 800a930:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800a940:	01010101 01010101 01010101 10101010     ................
 800a950:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800a960:	02020202 02020202 02020202 10101010     ................
 800a970:	00000020 00000000 00000000 00000000      ...............
	...
