
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <main.4378>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000140:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000144:	2400      	movs	r4, #0
 8000146:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800014a:	f04f 32ff 	mov.w	r2, #4294967295
 800014e:	6933      	ldr	r3, [r6, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8000150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000154:	6132      	str	r2, [r6, #16]
 8000156:	6134      	str	r4, [r6, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000158:	68f3      	ldr	r3, [r6, #12]
 800015a:	60f2      	str	r2, [r6, #12]
 800015c:	60f4      	str	r4, [r6, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800015e:	69f3      	ldr	r3, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000160:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000164:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
 8000168:	61f0      	str	r0, [r6, #28]
  rccEnableBKPInterface(FALSE);
 800016a:	69f5      	ldr	r5, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800016c:	f2c4 0100 	movt	r1, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8000170:	f045 6700 	orr.w	r7, r5, #134217728	; 0x8000000
 8000174:	61f7      	str	r7, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000176:	f8d1 b000 	ldr.w	fp, [r1]
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
 800017a:	4bbe      	ldr	r3, [pc, #760]	; (8000474 <__fini_array_end+0x334>)
 800017c:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
 8000180:	f8c1 b000 	str.w	fp, [r1]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000184:	276c      	movs	r7, #108	; 0x6c
 8000186:	2580      	movs	r5, #128	; 0x80
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 8000188:	4620      	mov	r0, r4
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800018a:	49bb      	ldr	r1, [pc, #748]	; (8000478 <__fini_array_end+0x338>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 800018c:	f04f 0a08 	mov.w	sl, #8
 8000190:	f04f 091c 	mov.w	r9, #28
 8000194:	f04f 0830 	mov.w	r8, #48	; 0x30
 8000198:	f04f 0c44 	mov.w	ip, #68	; 0x44
 800019c:	f04f 0e58 	mov.w	lr, #88	; 0x58
 80001a0:	f2c4 0a02 	movt	sl, #16386	; 0x4002
 80001a4:	f2c4 0902 	movt	r9, #16386	; 0x4002
 80001a8:	f2c4 0802 	movt	r8, #16386	; 0x4002
 80001ac:	f2c4 0c02 	movt	ip, #16386	; 0x4002
 80001b0:	f2c4 0e02 	movt	lr, #16386	; 0x4002
 80001b4:	f2c4 0702 	movt	r7, #16386	; 0x4002
 80001b8:	f2c4 0502 	movt	r5, #16386	; 0x4002
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 80001c0:	600c      	str	r4, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001c2:	f8ca 4000 	str.w	r4, [sl]
    dma_isr_redir[i].dma_func = NULL;
 80001c6:	601c      	str	r4, [r3, #0]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001c8:	f8c9 4000 	str.w	r4, [r9]
    dma_isr_redir[i].dma_func = NULL;
 80001cc:	609c      	str	r4, [r3, #8]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001ce:	f8c8 4000 	str.w	r4, [r8]
    dma_isr_redir[i].dma_func = NULL;
 80001d2:	611c      	str	r4, [r3, #16]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001d4:	f8cc 4000 	str.w	r4, [ip]
    dma_isr_redir[i].dma_func = NULL;
 80001d8:	619c      	str	r4, [r3, #24]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001da:	f8ce 4000 	str.w	r4, [lr]
    dma_isr_redir[i].dma_func = NULL;
 80001de:	621c      	str	r4, [r3, #32]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001e0:	603c      	str	r4, [r7, #0]
    dma_isr_redir[i].dma_func = NULL;
 80001e2:	629c      	str	r4, [r3, #40]	; 0x28
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001e4:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 80001e6:	631c      	str	r4, [r3, #48]	; 0x30
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001e8:	6042      	str	r2, [r0, #4]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001ea:	69b7      	ldr	r7, [r6, #24]
 80001ec:	b08f      	sub	sp, #60	; 0x3c
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80001ee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001f2:	9705      	str	r7, [sp, #20]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 80001f4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80001f8:	9003      	str	r0, [sp, #12]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001fa:	9805      	ldr	r0, [sp, #20]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001fc:	f44f 6e00 	mov.w	lr, #2048	; 0x800
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000200:	f040 007d 	orr.w	r0, r0, #125	; 0x7d
 8000204:	9005      	str	r0, [sp, #20]
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8000206:	f648 0088 	movw	r0, #34952	; 0x8888
 800020a:	f6c8 0082 	movt	r0, #34946	; 0x8882
 800020e:	9004      	str	r0, [sp, #16]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8000210:	f648 0044 	movw	r0, #34884	; 0x8844
 8000214:	f6c8 0088 	movt	r0, #34952	; 0x8888
 8000218:	9006      	str	r0, [sp, #24]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800021a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800021e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000222:	9007      	str	r0, [sp, #28]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000224:	9805      	ldr	r0, [sp, #20]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8000226:	f248 4ab8 	movw	sl, #33976	; 0x84b8
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800022a:	61b0      	str	r0, [r6, #24]
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 800022c:	f644 3988 	movw	r9, #19336	; 0x4b88
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8000230:	9804      	ldr	r0, [sp, #16]
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8000232:	f44f 6b40 	mov.w	fp, #3072	; 0xc00
 8000236:	f64e 58ef 	movw	r8, #60911	; 0xedef
  GPIOB->CRH = config->PBData.crh;
 800023a:	f648 0c38 	movw	ip, #34872	; 0x8838
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800023e:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8000242:	f2c4 0b01 	movt	fp, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8000246:	f6c2 0a88 	movt	sl, #10376	; 0x2888
  GPIOA->CRL = config->PAData.crl;
 800024a:	f6cb 09b3 	movt	r9, #47283	; 0xb8b3
  GPIOB->ODR = config->PBData.odr;
 800024e:	f6cf 78ff 	movt	r8, #65535	; 0xffff
  GPIOB->CRH = config->PBData.crh;
 8000252:	f6c8 0c82 	movt	ip, #34946	; 0x8882
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8000256:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800025a:	f8ce 200c 	str.w	r2, [lr, #12]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800025e:	f2c4 0701 	movt	r7, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8000262:	f8ce a004 	str.w	sl, [lr, #4]
  GPIOA->CRL = config->PAData.crl;
 8000266:	f8ce 9000 	str.w	r9, [lr]
  GPIOB->ODR = config->PBData.odr;
 800026a:	f8cb 800c 	str.w	r8, [fp, #12]
  GPIOB->CRH = config->PBData.crh;
 800026e:	f8cb c004 	str.w	ip, [fp, #4]
  GPIOB->CRL = config->PBData.crl;
 8000272:	f8cb 0000 	str.w	r0, [fp]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8000276:	f04f 3088 	mov.w	r0, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800027a:	60fa      	str	r2, [r7, #12]
  GPIOC->CRH = config->PCData.crh;
 800027c:	6078      	str	r0, [r7, #4]
  GPIOC->CRL = config->PCData.crl;
 800027e:	6038      	str	r0, [r7, #0]
  GPIOD->ODR = config->PDData.odr;
 8000280:	9f03      	ldr	r7, [sp, #12]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8000282:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8000286:	60fa      	str	r2, [r7, #12]
  GPIOD->CRH = config->PDData.crh;
 8000288:	6078      	str	r0, [r7, #4]
  GPIOD->CRL = config->PDData.crl;
 800028a:	9806      	ldr	r0, [sp, #24]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800028c:	f2c4 0101 	movt	r1, #16385	; 0x4001
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8000290:	6038      	str	r0, [r7, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
  GPIOE->CRH = config->PEData.crh;
 8000292:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8000296:	4b79      	ldr	r3, [pc, #484]	; (800047c <__fini_array_end+0x33c>)
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8000298:	60ca      	str	r2, [r1, #12]
  GPIOE->CRH = config->PEData.crh;
 800029a:	604f      	str	r7, [r1, #4]
  GPIOE->CRL = config->PEData.crl;
 800029c:	600f      	str	r7, [r1, #0]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 800029e:	4978      	ldr	r1, [pc, #480]	; (8000480 <__fini_array_end+0x340>)
 80002a0:	2001      	movs	r0, #1
 80002a2:	800a      	strh	r2, [r1, #0]
 80002a4:	7018      	strb	r0, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80002a6:	9907      	ldr	r1, [sp, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80002a8:	4876      	ldr	r0, [pc, #472]	; (8000484 <__fini_array_end+0x344>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80002aa:	f103 070c 	add.w	r7, r3, #12
 80002ae:	611f      	str	r7, [r3, #16]
 80002b0:	60df      	str	r7, [r3, #12]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80002b2:	61d9      	str	r1, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80002b4:	f100 070c 	add.w	r7, r0, #12
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80002b8:	f241 010a 	movw	r1, #4106	; 0x100a
  spip->config = NULL;
 80002bc:	605c      	str	r4, [r3, #4]
#if SPI_USE_WAIT
  spip->thread = NULL;
 80002be:	609c      	str	r4, [r3, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80002c0:	615c      	str	r4, [r3, #20]
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80002c2:	6218      	str	r0, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80002c4:	625f      	str	r7, [r3, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80002c6:	6299      	str	r1, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80002c8:	310e      	adds	r1, #14
 80002ca:	62d9      	str	r1, [r3, #44]	; 0x2c

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80002cc:	69f0      	ldr	r0, [r6, #28]
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 80002ce:	4d6e      	ldr	r5, [pc, #440]	; (8000488 <__fini_array_end+0x348>)
 80002d0:	2301      	movs	r3, #1
 80002d2:	f040 0701 	orr.w	r7, r0, #1
 80002d6:	702b      	strb	r3, [r5, #0]
  usbp->config       = NULL;
 80002d8:	606c      	str	r4, [r5, #4]
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002da:	62ec      	str	r4, [r5, #44]	; 0x2c
    usbp->out_params[i] = NULL;
 80002dc:	64ac      	str	r4, [r5, #72]	; 0x48
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002de:	632c      	str	r4, [r5, #48]	; 0x30
    usbp->out_params[i] = NULL;
 80002e0:	64ec      	str	r4, [r5, #76]	; 0x4c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002e2:	636c      	str	r4, [r5, #52]	; 0x34
    usbp->out_params[i] = NULL;
 80002e4:	652c      	str	r4, [r5, #80]	; 0x50
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002e6:	63ac      	str	r4, [r5, #56]	; 0x38
    usbp->out_params[i] = NULL;
 80002e8:	656c      	str	r4, [r5, #84]	; 0x54
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002ea:	63ec      	str	r4, [r5, #60]	; 0x3c
    usbp->out_params[i] = NULL;
 80002ec:	65ac      	str	r4, [r5, #88]	; 0x58
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002ee:	642c      	str	r4, [r5, #64]	; 0x40
    usbp->out_params[i] = NULL;
 80002f0:	65ec      	str	r4, [r5, #92]	; 0x5c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 80002f2:	646c      	str	r4, [r5, #68]	; 0x44
    usbp->out_params[i] = NULL;
 80002f4:	662c      	str	r4, [r5, #96]	; 0x60
  }
  usbp->transmitting = 0;
 80002f6:	812c      	strh	r4, [r5, #8]
  usbp->receiving    = 0;
 80002f8:	816c      	strh	r4, [r5, #10]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80002fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80002fe:	61f7      	str	r7, [r6, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000300:	f645 57bf 	movw	r7, #23999	; 0x5dbf
 8000304:	628f      	str	r7, [r1, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8000306:	f64f 7eff 	movw	lr, #65535	; 0xffff
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800030a:	2701      	movs	r7, #1
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800030c:	f44f 4861 	mov.w	r8, #57600	; 0xe100
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000310:	f44f 436d 	mov.w	r3, #60672	; 0xed00
  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000314:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 8000318:	f2ce 0300 	movt	r3, #57344	; 0xe000
  STM32_ST_TIM->CCMR1  = 0;
 800031c:	618c      	str	r4, [r1, #24]
 800031e:	f2ce 0800 	movt	r8, #57344	; 0xe000
  STM32_ST_TIM->CCR[0] = 0;
 8000322:	634c      	str	r4, [r1, #52]	; 0x34
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000324:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  STM32_ST_TIM->DIER   = 0;
 8000328:	60cc      	str	r4, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 800032a:	604c      	str	r4, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800032c:	614f      	str	r7, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800032e:	600f      	str	r7, [r1, #0]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	f888 131c 	strb.w	r1, [r8, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000336:	f8c8 0180 	str.w	r0, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800033a:	f8c8 0000 	str.w	r0, [r8]
 800033e:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000340:	68df      	ldr	r7, [r3, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000342:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                 |
 8000346:	f44f 7140 	mov.w	r1, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800034a:	4038      	ands	r0, r7
  reg_value  =  (reg_value                                 |
 800034c:	f2c0 51fa 	movt	r1, #1530	; 0x5fa
 8000350:	ea40 0701 	orr.w	r7, r0, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000354:	f64e 50f0 	movw	r0, #60912	; 0xedf0
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000358:	60df      	str	r7, [r3, #12]
 800035a:	f2ce 0000 	movt	r0, #57344	; 0xe000
 800035e:	68c7      	ldr	r7, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000360:	f44f 5180 	mov.w	r1, #4096	; 0x1000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000364:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8000368:	60c7      	str	r7, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800036a:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800036e:	6808      	ldr	r0, [r1, #0]
 8000370:	4f46      	ldr	r7, [pc, #280]	; (800048c <__fini_array_end+0x34c>)
 8000372:	f040 0901 	orr.w	r9, r0, #1
 8000376:	f8c1 9000 	str.w	r9, [r1]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800037a:	f04f 0a20 	mov.w	sl, #32
 800037e:	2110      	movs	r1, #16
 8000380:	77d9      	strb	r1, [r3, #31]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 8000382:	f107 0c1c 	add.w	ip, r7, #28
 8000386:	f883 a022 	strb.w	sl, [r3, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800038a:	eb0d 000a 	add.w	r0, sp, sl

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800038e:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000390:	9208      	str	r2, [sp, #32]
 8000392:	607f      	str	r7, [r7, #4]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000394:	2200      	movs	r2, #0
 8000396:	603f      	str	r7, [r7, #0]
 8000398:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800039c:	f8c7 c020 	str.w	ip, [r7, #32]
 80003a0:	f8c7 c01c 	str.w	ip, [r7, #28]
  ch.vtlist.vt_delta = (systime_t)-1;
 80003a4:	f8a7 e024 	strh.w	lr, [r7, #36]	; 0x24
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80003a8:	60bc      	str	r4, [r7, #8]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80003aa:	617f      	str	r7, [r7, #20]
 80003ac:	613f      	str	r7, [r7, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 80003ae:	84fc      	strh	r4, [r7, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 80003b0:	673c      	str	r4, [r7, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80003b2:	9409      	str	r4, [sp, #36]	; 0x24
  tmp->last       = (rtcnt_t)0;
 80003b4:	940a      	str	r4, [sp, #40]	; 0x28
  tmp->n          = (ucnt_t)0;
 80003b6:	940b      	str	r4, [sp, #44]	; 0x2c
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80003b8:	f002 f8aa 	bl	8002510 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80003bc:	eb0d 000a 	add.w	r0, sp, sl
 80003c0:	f002 f87e 	bl	80024c0 <chTMStopMeasurementX>
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 80003c4:	4b32      	ldr	r3, [pc, #200]	; (8000490 <__fini_array_end+0x350>)
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80003c6:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 80004a0 <__fini_array_end+0x360>
 80003ca:	f103 0e10 	add.w	lr, r3, #16
 80003ce:	f8c3 e010 	str.w	lr, [r3, #16]
 80003d2:	f8c3 e014 	str.w	lr, [r3, #20]
 80003d6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80004a4 <__fini_array_end+0x364>
 80003da:	f02c 0c07 	bic.w	ip, ip, #7
 80003de:	f8ce c000 	str.w	ip, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80003e2:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80004a8 <__fini_array_end+0x368>
 80003e6:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80004ac <__fini_array_end+0x36c>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 80003ea:	697a      	ldr	r2, [r7, #20]
 80003ec:	f02c 0c07 	bic.w	ip, ip, #7
 80003f0:	f8ce c000 	str.w	ip, [lr]
 80003f4:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80004b0 <__fini_array_end+0x370>
 80003f8:	9204      	str	r2, [sp, #16]
  ch.tm.offset = tm.last;
 80003fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80003fc:	619c      	str	r4, [r3, #24]
 80003fe:	f8c3 c000 	str.w	ip, [r3]
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 8000402:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000404:	60dc      	str	r4, [r3, #12]
 8000406:	9b04      	ldr	r3, [sp, #16]
 8000408:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800040c:	2040      	movs	r0, #64	; 0x40
 800040e:	f107 0954 	add.w	r9, r7, #84	; 0x54
 8000412:	6739      	str	r1, [r7, #112]	; 0x70
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000414:	617a      	str	r2, [r7, #20]
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8000416:	2101      	movs	r1, #1
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000418:	6378      	str	r0, [r7, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 800041a:	66b8      	str	r0, [r7, #104]	; 0x68
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800041c:	63ff      	str	r7, [r7, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800041e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000422:	611a      	str	r2, [r3, #16]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000424:	61ba      	str	r2, [r7, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000426:	2200      	movs	r2, #0
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000428:	643b      	str	r3, [r7, #64]	; 0x40
 800042a:	6538      	str	r0, [r7, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800042c:	f8c7 9058 	str.w	r9, [r7, #88]	; 0x58
 8000430:	f8c7 9054 	str.w	r9, [r7, #84]	; 0x54
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000434:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000438:	667c      	str	r4, [r7, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 800043a:	663c      	str	r4, [r7, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 800043c:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8000440:	647c      	str	r4, [r7, #68]	; 0x44
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000442:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000446:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800044a:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 800044c:	69bb      	ldr	r3, [r7, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 800044e:	f107 0078 	add.w	r0, r7, #120	; 0x78
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000452:	4f10      	ldr	r7, [pc, #64]	; (8000494 <__fini_array_end+0x354>)

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 8000454:	21d8      	movs	r1, #216	; 0xd8
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 8000456:	619f      	str	r7, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 8000458:	2201      	movs	r2, #1
 800045a:	9400      	str	r4, [sp, #0]
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <__fini_array_end+0x358>)
 800045e:	f001 fc6f 	bl	8001d40 <chThdCreateStatic>
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;/* Disable the JTAG but keep SWD in operation */
 8000462:	4620      	mov	r0, r4
 8000464:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000468:	6842      	ldr	r2, [r0, #4]
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 800046a:	4f0c      	ldr	r7, [pc, #48]	; (800049c <__fini_array_end+0x35c>)
 800046c:	f042 7300 	orr.w	r3, r2, #33554432	; 0x2000000
 8000470:	e020      	b.n	80004b4 <__fini_array_end+0x374>
 8000472:	bf00      	nop
 8000474:	20000f08 	.word	0x20000f08
 8000478:	20000db8 	.word	0x20000db8
 800047c:	20001500 	.word	0x20001500
 8000480:	20001430 	.word	0x20001430
 8000484:	0800a41c 	.word	0x0800a41c
 8000488:	20001438 	.word	0x20001438
 800048c:	20001e58 	.word	0x20001e58
 8000490:	20001410 	.word	0x20001410
 8000494:	0800a3a0 	.word	0x0800a3a0
 8000498:	08001641 	.word	0x08001641
 800049c:	20001544 	.word	0x20001544
 80004a0:	20001fc3 	.word	0x20001fc3
 80004a4:	20000f40 	.word	0x20000f40
 80004a8:	20005000 	.word	0x20005000
 80004ac:	20000db4 	.word	0x20000db4
 80004b0:	080015a1 	.word	0x080015a1
 80004b4:	6043      	str	r3, [r0, #4]
 80004b6:	4859      	ldr	r0, [pc, #356]	; (800061c <__fini_array_end+0x4dc>)
 80004b8:	4639      	mov	r1, r7
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80004ba:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80004be:	f841 0b04 	str.w	r0, [r1], #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80004c2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80004c6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 80004ca:	6079      	str	r1, [r7, #4]
  iqp->q_top = bp + size;
 80004cc:	61fb      	str	r3, [r7, #28]
  iqp->q_notify = infy;
 80004ce:	4954      	ldr	r1, [pc, #336]	; (8000620 <__fini_array_end+0x4e0>)
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80004d0:	647b      	str	r3, [r7, #68]	; 0x44
 80004d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80004d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80004d6:	4b53      	ldr	r3, [pc, #332]	; (8000624 <__fini_array_end+0x4e4>)
 80004d8:	f107 090c 	add.w	r9, r7, #12
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80004dc:	f507 7e15 	add.w	lr, r7, #596	; 0x254
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80004e0:	623a      	str	r2, [r7, #32]
 80004e2:	627a      	str	r2, [r7, #36]	; 0x24
 80004e4:	61ba      	str	r2, [r7, #24]
 80004e6:	6378      	str	r0, [r7, #52]	; 0x34
 80004e8:	6338      	str	r0, [r7, #48]	; 0x30
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80004ea:	f44f 7280 	mov.w	r2, #256	; 0x100
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80004ee:	2001      	movs	r0, #1
 80004f0:	f8c7 9010 	str.w	r9, [r7, #16]
 80004f4:	f8c7 900c 	str.w	r9, [r7, #12]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80004f8:	62b9      	str	r1, [r7, #40]	; 0x28
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80004fa:	63ba      	str	r2, [r7, #56]	; 0x38
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80004fc:	f8c7 e040 	str.w	lr, [r7, #64]	; 0x40
  oqp->q_notify = onfy;
 8000500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000502:	7238      	strb	r0, [r7, #8]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8000504:	617c      	str	r4, [r7, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 8000506:	62ff      	str	r7, [r7, #44]	; 0x2c
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 8000508:	653f      	str	r7, [r7, #80]	; 0x50

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800050a:	f38a 8811 	msr	BASEPRI, sl
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 800050e:	4946      	ldr	r1, [pc, #280]	; (8000628 <__fini_array_end+0x4e8>)
  sdup->state = SDU_READY;
 8000510:	2202      	movs	r2, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
 8000512:	62ef      	str	r7, [r5, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 8000514:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
 8000518:	64af      	str	r7, [r5, #72]	; 0x48
  usbp->in_params[config->int_in - 1]    = sdup;
 800051a:	632f      	str	r7, [r5, #48]	; 0x30
  sdup->config = config;
  sdup->state = SDU_READY;
 800051c:	723a      	strb	r2, [r7, #8]
 800051e:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 8000522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000526:	f8cb 3010 	str.w	r3, [fp, #16]
  chThdSleepMilliseconds(1500);
 800052a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800052e:	f006 fdbf 	bl	80070b0 <chThdSleep>
 8000532:	f38a 8811 	msr	BASEPRI, sl
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 8000536:	f895 b000 	ldrb.w	fp, [r5]
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800053a:	483c      	ldr	r0, [pc, #240]	; (800062c <__fini_array_end+0x4ec>)
 800053c:	f1bb 0f01 	cmp.w	fp, #1
 8000540:	6068      	str	r0, [r5, #4]
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8000542:	60ec      	str	r4, [r5, #12]
 8000544:	612c      	str	r4, [r5, #16]
 8000546:	616c      	str	r4, [r5, #20]
 8000548:	61ac      	str	r4, [r5, #24]
 800054a:	61ec      	str	r4, [r5, #28]
 800054c:	622c      	str	r4, [r5, #32]
 800054e:	626c      	str	r4, [r5, #36]	; 0x24
 8000550:	62ac      	str	r4, [r5, #40]	; 0x28
 8000552:	d042      	beq.n	80005da <__fini_array_end+0x49a>
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 8000554:	2402      	movs	r4, #2
 8000556:	702c      	strb	r4, [r5, #0]
 8000558:	2400      	movs	r4, #0
 800055a:	f384 8811 	msr	BASEPRI, r4
 800055e:	4d34      	ldr	r5, [pc, #208]	; (8000630 <__fini_array_end+0x4f0>)
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 8000560:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000564:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000568:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800056c:	615a      	str	r2, [r3, #20]
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800056e:	9400      	str	r4, [sp, #0]
 8000570:	602d      	str	r5, [r5, #0]
 8000572:	4d30      	ldr	r5, [pc, #192]	; (8000634 <__fini_array_end+0x4f4>)
 8000574:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <__fini_array_end+0x4f8>)
 800057c:	482f      	ldr	r0, [pc, #188]	; (800063c <__fini_array_end+0x4fc>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 800057e:	2601      	movs	r6, #1
 8000580:	f001 fbde 	bl	8001d40 <chThdCreateStatic>
thread_t* Spawn_Si446x_Thread(void) {
	chBSemObjectInit(&Silabs_busy,FALSE);/*Init it as not taken*/
	/*
	* Creates the thread. Thread has priority slightly above normal and takes no argument
	*/
	return chThdCreateStatic(waThreadSI, sizeof(waThreadSI), NORMALPRIO+1, SI_Thread, (void*)NULL);
 8000584:	9400      	str	r4, [sp, #0]
 8000586:	482e      	ldr	r0, [pc, #184]	; (8000640 <__fini_array_end+0x500>)
 8000588:	606d      	str	r5, [r5, #4]
 800058a:	602d      	str	r5, [r5, #0]
 800058c:	60ae      	str	r6, [r5, #8]
 800058e:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000592:	2241      	movs	r2, #65	; 0x41
 8000594:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <__fini_array_end+0x504>)
 8000596:	f001 fbd3 	bl	8001d40 <chThdCreateStatic>
 800059a:	4d2b      	ldr	r5, [pc, #172]	; (8000648 <__fini_array_end+0x508>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 800059c:	b144      	cbz	r4, 80005b0 <__fini_array_end+0x470>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 800059e:	7f22      	ldrb	r2, [r4, #28]
 80005a0:	2a0f      	cmp	r2, #15
 80005a2:	d015      	beq.n	80005d0 <__fini_array_end+0x490>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 80005a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a8:	f006 fd82 	bl	80070b0 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 80005ac:	2c00      	cmp	r4, #0
 80005ae:	d1f6      	bne.n	800059e <__fini_array_end+0x45e>
 80005b0:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 80005b4:	6801      	ldr	r1, [r0, #0]
 80005b6:	780b      	ldrb	r3, [r1, #0]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d1f0      	bne.n	800059e <__fini_array_end+0x45e>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 80005bc:	4620      	mov	r0, r4
 80005be:	9500      	str	r5, [sp, #0]
 80005c0:	f640 01c8 	movw	r1, #2248	; 0x8c8
 80005c4:	2240      	movs	r2, #64	; 0x40
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <__fini_array_end+0x50c>)
 80005c8:	f001 fef2 	bl	80023b0 <chThdCreateFromHeap>
 80005cc:	4604      	mov	r4, r0
 80005ce:	e7e9      	b.n	80005a4 <__fini_array_end+0x464>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 80005d0:	4620      	mov	r0, r4
 80005d2:	f001 fe15 	bl	8002200 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80005d6:	2400      	movs	r4, #0
 80005d8:	e7e4      	b.n	80005a4 <__fini_array_end+0x464>
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005da:	69f0      	ldr	r0, [r6, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80005dc:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 80005e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e4:	61f0      	str	r0, [r6, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 80005e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005ea:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005ee:	26d0      	movs	r6, #208	; 0xd0
 80005f0:	f8c3 b040 	str.w	fp, [r3, #64]	; 0x40
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80005f8:	f888 6313 	strb.w	r6, [r8, #787]	; 0x313
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80005fc:	f8c8 1180 	str.w	r1, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000600:	f8c8 1000 	str.w	r1, [r8]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000604:	21e0      	movs	r1, #224	; 0xe0
 8000606:	f888 1314 	strb.w	r1, [r8, #788]	; 0x314
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 800060a:	4628      	mov	r0, r5
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800060c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000610:	f8c8 2000 	str.w	r2, [r8]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 8000614:	641c      	str	r4, [r3, #64]	; 0x40
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 8000616:	f005 fbeb 	bl	8005df0 <_usb_reset>
 800061a:	e79b      	b.n	8000554 <__fini_array_end+0x414>
 800061c:	0800a3c0 	.word	0x0800a3c0
 8000620:	08005d71 	.word	0x08005d71
 8000624:	08004de1 	.word	0x08004de1
 8000628:	0800a690 	.word	0x0800a690
 800062c:	0800a6f0 	.word	0x0800a6f0
 8000630:	20001e50 	.word	0x20001e50
 8000634:	20001530 	.word	0x20001530
 8000638:	08007461 	.word	0x08007461
 800063c:	20000dc0 	.word	0x20000dc0
 8000640:	20000f48 	.word	0x20000f48
 8000644:	08008451 	.word	0x08008451
 8000648:	0800a7e0 	.word	0x0800a7e0
 800064c:	08009431 	.word	0x08009431

08000650 <_port_switch>:
 8000650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000654:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000658:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800065c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000660 <_port_thread_start>:
 8000660:	2300      	movs	r3, #0
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	4628      	mov	r0, r5
 8000668:	47a0      	blx	r4
 800066a:	f009 f981 	bl	8009970 <chThdExit>

0800066e <_port_switch_from_isr>:
 800066e:	f009 f987 	bl	8009980 <chSchDoReschedule>

08000672 <_port_exit_from_isr>:
 8000672:	df00      	svc	0
 8000674:	e7fe      	b.n	8000674 <_port_exit_from_isr+0x2>
	...

08000680 <__aeabi_drsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000684:	e002      	b.n	800068c <__adddf3>
 8000686:	bf00      	nop

08000688 <__aeabi_dsub>:
 8000688:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800068c <__adddf3>:
 800068c:	b530      	push	{r4, r5, lr}
 800068e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000692:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000696:	ea94 0f05 	teq	r4, r5
 800069a:	bf08      	it	eq
 800069c:	ea90 0f02 	teqeq	r0, r2
 80006a0:	bf1f      	itttt	ne
 80006a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006b2:	f000 80e2 	beq.w	800087a <__adddf3+0x1ee>
 80006b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80006ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80006be:	bfb8      	it	lt
 80006c0:	426d      	neglt	r5, r5
 80006c2:	dd0c      	ble.n	80006de <__adddf3+0x52>
 80006c4:	442c      	add	r4, r5
 80006c6:	ea80 0202 	eor.w	r2, r0, r2
 80006ca:	ea81 0303 	eor.w	r3, r1, r3
 80006ce:	ea82 0000 	eor.w	r0, r2, r0
 80006d2:	ea83 0101 	eor.w	r1, r3, r1
 80006d6:	ea80 0202 	eor.w	r2, r0, r2
 80006da:	ea81 0303 	eor.w	r3, r1, r3
 80006de:	2d36      	cmp	r5, #54	; 0x36
 80006e0:	bf88      	it	hi
 80006e2:	bd30      	pophi	{r4, r5, pc}
 80006e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80006ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80006f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80006f4:	d002      	beq.n	80006fc <__adddf3+0x70>
 80006f6:	4240      	negs	r0, r0
 80006f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000700:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000704:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000708:	d002      	beq.n	8000710 <__adddf3+0x84>
 800070a:	4252      	negs	r2, r2
 800070c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000710:	ea94 0f05 	teq	r4, r5
 8000714:	f000 80a7 	beq.w	8000866 <__adddf3+0x1da>
 8000718:	f1a4 0401 	sub.w	r4, r4, #1
 800071c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000720:	db0d      	blt.n	800073e <__adddf3+0xb2>
 8000722:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000726:	fa22 f205 	lsr.w	r2, r2, r5
 800072a:	1880      	adds	r0, r0, r2
 800072c:	f141 0100 	adc.w	r1, r1, #0
 8000730:	fa03 f20e 	lsl.w	r2, r3, lr
 8000734:	1880      	adds	r0, r0, r2
 8000736:	fa43 f305 	asr.w	r3, r3, r5
 800073a:	4159      	adcs	r1, r3
 800073c:	e00e      	b.n	800075c <__adddf3+0xd0>
 800073e:	f1a5 0520 	sub.w	r5, r5, #32
 8000742:	f10e 0e20 	add.w	lr, lr, #32
 8000746:	2a01      	cmp	r2, #1
 8000748:	fa03 fc0e 	lsl.w	ip, r3, lr
 800074c:	bf28      	it	cs
 800074e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000752:	fa43 f305 	asr.w	r3, r3, r5
 8000756:	18c0      	adds	r0, r0, r3
 8000758:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	d507      	bpl.n	8000772 <__adddf3+0xe6>
 8000762:	f04f 0e00 	mov.w	lr, #0
 8000766:	f1dc 0c00 	rsbs	ip, ip, #0
 800076a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800076e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000772:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000776:	d31b      	bcc.n	80007b0 <__adddf3+0x124>
 8000778:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800077c:	d30c      	bcc.n	8000798 <__adddf3+0x10c>
 800077e:	0849      	lsrs	r1, r1, #1
 8000780:	ea5f 0030 	movs.w	r0, r0, rrx
 8000784:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000788:	f104 0401 	add.w	r4, r4, #1
 800078c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000790:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000794:	f080 809a 	bcs.w	80008cc <__adddf3+0x240>
 8000798:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	ea41 0105 	orr.w	r1, r1, r5
 80007ae:	bd30      	pop	{r4, r5, pc}
 80007b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80007b4:	4140      	adcs	r0, r0
 80007b6:	eb41 0101 	adc.w	r1, r1, r1
 80007ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007be:	f1a4 0401 	sub.w	r4, r4, #1
 80007c2:	d1e9      	bne.n	8000798 <__adddf3+0x10c>
 80007c4:	f091 0f00 	teq	r1, #0
 80007c8:	bf04      	itt	eq
 80007ca:	4601      	moveq	r1, r0
 80007cc:	2000      	moveq	r0, #0
 80007ce:	fab1 f381 	clz	r3, r1
 80007d2:	bf08      	it	eq
 80007d4:	3320      	addeq	r3, #32
 80007d6:	f1a3 030b 	sub.w	r3, r3, #11
 80007da:	f1b3 0220 	subs.w	r2, r3, #32
 80007de:	da0c      	bge.n	80007fa <__adddf3+0x16e>
 80007e0:	320c      	adds	r2, #12
 80007e2:	dd08      	ble.n	80007f6 <__adddf3+0x16a>
 80007e4:	f102 0c14 	add.w	ip, r2, #20
 80007e8:	f1c2 020c 	rsb	r2, r2, #12
 80007ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80007f0:	fa21 f102 	lsr.w	r1, r1, r2
 80007f4:	e00c      	b.n	8000810 <__adddf3+0x184>
 80007f6:	f102 0214 	add.w	r2, r2, #20
 80007fa:	bfd8      	it	le
 80007fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000800:	fa01 f102 	lsl.w	r1, r1, r2
 8000804:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000808:	bfdc      	itt	le
 800080a:	ea41 010c 	orrle.w	r1, r1, ip
 800080e:	4090      	lslle	r0, r2
 8000810:	1ae4      	subs	r4, r4, r3
 8000812:	bfa2      	ittt	ge
 8000814:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000818:	4329      	orrge	r1, r5
 800081a:	bd30      	popge	{r4, r5, pc}
 800081c:	ea6f 0404 	mvn.w	r4, r4
 8000820:	3c1f      	subs	r4, #31
 8000822:	da1c      	bge.n	800085e <__adddf3+0x1d2>
 8000824:	340c      	adds	r4, #12
 8000826:	dc0e      	bgt.n	8000846 <__adddf3+0x1ba>
 8000828:	f104 0414 	add.w	r4, r4, #20
 800082c:	f1c4 0220 	rsb	r2, r4, #32
 8000830:	fa20 f004 	lsr.w	r0, r0, r4
 8000834:	fa01 f302 	lsl.w	r3, r1, r2
 8000838:	ea40 0003 	orr.w	r0, r0, r3
 800083c:	fa21 f304 	lsr.w	r3, r1, r4
 8000840:	ea45 0103 	orr.w	r1, r5, r3
 8000844:	bd30      	pop	{r4, r5, pc}
 8000846:	f1c4 040c 	rsb	r4, r4, #12
 800084a:	f1c4 0220 	rsb	r2, r4, #32
 800084e:	fa20 f002 	lsr.w	r0, r0, r2
 8000852:	fa01 f304 	lsl.w	r3, r1, r4
 8000856:	ea40 0003 	orr.w	r0, r0, r3
 800085a:	4629      	mov	r1, r5
 800085c:	bd30      	pop	{r4, r5, pc}
 800085e:	fa21 f004 	lsr.w	r0, r1, r4
 8000862:	4629      	mov	r1, r5
 8000864:	bd30      	pop	{r4, r5, pc}
 8000866:	f094 0f00 	teq	r4, #0
 800086a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800086e:	bf06      	itte	eq
 8000870:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000874:	3401      	addeq	r4, #1
 8000876:	3d01      	subne	r5, #1
 8000878:	e74e      	b.n	8000718 <__adddf3+0x8c>
 800087a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800087e:	bf18      	it	ne
 8000880:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000884:	d029      	beq.n	80008da <__adddf3+0x24e>
 8000886:	ea94 0f05 	teq	r4, r5
 800088a:	bf08      	it	eq
 800088c:	ea90 0f02 	teqeq	r0, r2
 8000890:	d005      	beq.n	800089e <__adddf3+0x212>
 8000892:	ea54 0c00 	orrs.w	ip, r4, r0
 8000896:	bf04      	itt	eq
 8000898:	4619      	moveq	r1, r3
 800089a:	4610      	moveq	r0, r2
 800089c:	bd30      	pop	{r4, r5, pc}
 800089e:	ea91 0f03 	teq	r1, r3
 80008a2:	bf1e      	ittt	ne
 80008a4:	2100      	movne	r1, #0
 80008a6:	2000      	movne	r0, #0
 80008a8:	bd30      	popne	{r4, r5, pc}
 80008aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008ae:	d105      	bne.n	80008bc <__adddf3+0x230>
 80008b0:	0040      	lsls	r0, r0, #1
 80008b2:	4149      	adcs	r1, r1
 80008b4:	bf28      	it	cs
 80008b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80008ba:	bd30      	pop	{r4, r5, pc}
 80008bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80008c0:	bf3c      	itt	cc
 80008c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80008c6:	bd30      	popcc	{r4, r5, pc}
 80008c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80008d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	bd30      	pop	{r4, r5, pc}
 80008da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008de:	bf1a      	itte	ne
 80008e0:	4619      	movne	r1, r3
 80008e2:	4610      	movne	r0, r2
 80008e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80008e8:	bf1c      	itt	ne
 80008ea:	460b      	movne	r3, r1
 80008ec:	4602      	movne	r2, r0
 80008ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008f2:	bf06      	itte	eq
 80008f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80008f8:	ea91 0f03 	teqeq	r1, r3
 80008fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000900:	bd30      	pop	{r4, r5, pc}
 8000902:	bf00      	nop

08000904 <__aeabi_ui2d>:
 8000904:	f090 0f00 	teq	r0, #0
 8000908:	bf04      	itt	eq
 800090a:	2100      	moveq	r1, #0
 800090c:	4770      	bxeq	lr
 800090e:	b530      	push	{r4, r5, lr}
 8000910:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000914:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000918:	f04f 0500 	mov.w	r5, #0
 800091c:	f04f 0100 	mov.w	r1, #0
 8000920:	e750      	b.n	80007c4 <__adddf3+0x138>
 8000922:	bf00      	nop

08000924 <__aeabi_i2d>:
 8000924:	f090 0f00 	teq	r0, #0
 8000928:	bf04      	itt	eq
 800092a:	2100      	moveq	r1, #0
 800092c:	4770      	bxeq	lr
 800092e:	b530      	push	{r4, r5, lr}
 8000930:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000934:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000938:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800093c:	bf48      	it	mi
 800093e:	4240      	negmi	r0, r0
 8000940:	f04f 0100 	mov.w	r1, #0
 8000944:	e73e      	b.n	80007c4 <__adddf3+0x138>
 8000946:	bf00      	nop

08000948 <__aeabi_f2d>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800094e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000952:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000956:	bf1f      	itttt	ne
 8000958:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800095c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000960:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000964:	4770      	bxne	lr
 8000966:	f092 0f00 	teq	r2, #0
 800096a:	bf14      	ite	ne
 800096c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000970:	4770      	bxeq	lr
 8000972:	b530      	push	{r4, r5, lr}
 8000974:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800097c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000980:	e720      	b.n	80007c4 <__adddf3+0x138>
 8000982:	bf00      	nop

08000984 <__aeabi_ul2d>:
 8000984:	ea50 0201 	orrs.w	r2, r0, r1
 8000988:	bf08      	it	eq
 800098a:	4770      	bxeq	lr
 800098c:	b530      	push	{r4, r5, lr}
 800098e:	f04f 0500 	mov.w	r5, #0
 8000992:	e00a      	b.n	80009aa <__aeabi_l2d+0x16>

08000994 <__aeabi_l2d>:
 8000994:	ea50 0201 	orrs.w	r2, r0, r1
 8000998:	bf08      	it	eq
 800099a:	4770      	bxeq	lr
 800099c:	b530      	push	{r4, r5, lr}
 800099e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80009a2:	d502      	bpl.n	80009aa <__aeabi_l2d+0x16>
 80009a4:	4240      	negs	r0, r0
 80009a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80009b6:	f43f aedc 	beq.w	8000772 <__adddf3+0xe6>
 80009ba:	f04f 0203 	mov.w	r2, #3
 80009be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009c2:	bf18      	it	ne
 80009c4:	3203      	addne	r2, #3
 80009c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009ca:	bf18      	it	ne
 80009cc:	3203      	addne	r2, #3
 80009ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	fa01 fe03 	lsl.w	lr, r1, r3
 80009e2:	ea40 000e 	orr.w	r0, r0, lr
 80009e6:	fa21 f102 	lsr.w	r1, r1, r2
 80009ea:	4414      	add	r4, r2
 80009ec:	e6c1      	b.n	8000772 <__adddf3+0xe6>
 80009ee:	bf00      	nop

080009f0 <__aeabi_dmul>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009fe:	bf1d      	ittte	ne
 8000a00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a04:	ea94 0f0c 	teqne	r4, ip
 8000a08:	ea95 0f0c 	teqne	r5, ip
 8000a0c:	f000 f8de 	bleq	8000bcc <__aeabi_dmul+0x1dc>
 8000a10:	442c      	add	r4, r5
 8000a12:	ea81 0603 	eor.w	r6, r1, r3
 8000a16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a22:	bf18      	it	ne
 8000a24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a30:	d038      	beq.n	8000aa4 <__aeabi_dmul+0xb4>
 8000a32:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a36:	f04f 0500 	mov.w	r5, #0
 8000a3a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000a42:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a46:	f04f 0600 	mov.w	r6, #0
 8000a4a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a4e:	f09c 0f00 	teq	ip, #0
 8000a52:	bf18      	it	ne
 8000a54:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000a60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000a64:	d204      	bcs.n	8000a70 <__aeabi_dmul+0x80>
 8000a66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a6a:	416d      	adcs	r5, r5
 8000a6c:	eb46 0606 	adc.w	r6, r6, r6
 8000a70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000a80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000a84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a88:	bf88      	it	hi
 8000a8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a8e:	d81e      	bhi.n	8000ace <__aeabi_dmul+0xde>
 8000a90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000a9a:	f150 0000 	adcs.w	r0, r0, #0
 8000a9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000aa8:	ea46 0101 	orr.w	r1, r6, r1
 8000aac:	ea40 0002 	orr.w	r0, r0, r2
 8000ab0:	ea81 0103 	eor.w	r1, r1, r3
 8000ab4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ab8:	bfc2      	ittt	gt
 8000aba:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000abe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac8:	f04f 0e00 	mov.w	lr, #0
 8000acc:	3c01      	subs	r4, #1
 8000ace:	f300 80ab 	bgt.w	8000c28 <__aeabi_dmul+0x238>
 8000ad2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000ad6:	bfde      	ittt	le
 8000ad8:	2000      	movle	r0, #0
 8000ada:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000ade:	bd70      	pople	{r4, r5, r6, pc}
 8000ae0:	f1c4 0400 	rsb	r4, r4, #0
 8000ae4:	3c20      	subs	r4, #32
 8000ae6:	da35      	bge.n	8000b54 <__aeabi_dmul+0x164>
 8000ae8:	340c      	adds	r4, #12
 8000aea:	dc1b      	bgt.n	8000b24 <__aeabi_dmul+0x134>
 8000aec:	f104 0414 	add.w	r4, r4, #20
 8000af0:	f1c4 0520 	rsb	r5, r4, #32
 8000af4:	fa00 f305 	lsl.w	r3, r0, r5
 8000af8:	fa20 f004 	lsr.w	r0, r0, r4
 8000afc:	fa01 f205 	lsl.w	r2, r1, r5
 8000b00:	ea40 0002 	orr.w	r0, r0, r2
 8000b04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000b08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b10:	fa21 f604 	lsr.w	r6, r1, r4
 8000b14:	eb42 0106 	adc.w	r1, r2, r6
 8000b18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b1c:	bf08      	it	eq
 8000b1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
 8000b24:	f1c4 040c 	rsb	r4, r4, #12
 8000b28:	f1c4 0520 	rsb	r5, r4, #32
 8000b2c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b30:	fa20 f005 	lsr.w	r0, r0, r5
 8000b34:	fa01 f204 	lsl.w	r2, r1, r4
 8000b38:	ea40 0002 	orr.w	r0, r0, r2
 8000b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b44:	f141 0100 	adc.w	r1, r1, #0
 8000b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	f1c4 0520 	rsb	r5, r4, #32
 8000b58:	fa00 f205 	lsl.w	r2, r0, r5
 8000b5c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b60:	fa20 f304 	lsr.w	r3, r0, r4
 8000b64:	fa01 f205 	lsl.w	r2, r1, r5
 8000b68:	ea43 0302 	orr.w	r3, r3, r2
 8000b6c:	fa21 f004 	lsr.w	r0, r1, r4
 8000b70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b74:	fa21 f204 	lsr.w	r2, r1, r4
 8000b78:	ea20 0002 	bic.w	r0, r0, r2
 8000b7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000b80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b84:	bf08      	it	eq
 8000b86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	f094 0f00 	teq	r4, #0
 8000b90:	d10f      	bne.n	8000bb2 <__aeabi_dmul+0x1c2>
 8000b92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000b96:	0040      	lsls	r0, r0, #1
 8000b98:	eb41 0101 	adc.w	r1, r1, r1
 8000b9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ba0:	bf08      	it	eq
 8000ba2:	3c01      	subeq	r4, #1
 8000ba4:	d0f7      	beq.n	8000b96 <__aeabi_dmul+0x1a6>
 8000ba6:	ea41 0106 	orr.w	r1, r1, r6
 8000baa:	f095 0f00 	teq	r5, #0
 8000bae:	bf18      	it	ne
 8000bb0:	4770      	bxne	lr
 8000bb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000bb6:	0052      	lsls	r2, r2, #1
 8000bb8:	eb43 0303 	adc.w	r3, r3, r3
 8000bbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000bc0:	bf08      	it	eq
 8000bc2:	3d01      	subeq	r5, #1
 8000bc4:	d0f7      	beq.n	8000bb6 <__aeabi_dmul+0x1c6>
 8000bc6:	ea43 0306 	orr.w	r3, r3, r6
 8000bca:	4770      	bx	lr
 8000bcc:	ea94 0f0c 	teq	r4, ip
 8000bd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bd4:	bf18      	it	ne
 8000bd6:	ea95 0f0c 	teqne	r5, ip
 8000bda:	d00c      	beq.n	8000bf6 <__aeabi_dmul+0x206>
 8000bdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000be0:	bf18      	it	ne
 8000be2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000be6:	d1d1      	bne.n	8000b8c <__aeabi_dmul+0x19c>
 8000be8:	ea81 0103 	eor.w	r1, r1, r3
 8000bec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	bd70      	pop	{r4, r5, r6, pc}
 8000bf6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000bfa:	bf06      	itte	eq
 8000bfc:	4610      	moveq	r0, r2
 8000bfe:	4619      	moveq	r1, r3
 8000c00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c04:	d019      	beq.n	8000c3a <__aeabi_dmul+0x24a>
 8000c06:	ea94 0f0c 	teq	r4, ip
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dmul+0x222>
 8000c0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c10:	d113      	bne.n	8000c3a <__aeabi_dmul+0x24a>
 8000c12:	ea95 0f0c 	teq	r5, ip
 8000c16:	d105      	bne.n	8000c24 <__aeabi_dmul+0x234>
 8000c18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c1c:	bf1c      	itt	ne
 8000c1e:	4610      	movne	r0, r2
 8000c20:	4619      	movne	r1, r3
 8000c22:	d10a      	bne.n	8000c3a <__aeabi_dmul+0x24a>
 8000c24:	ea81 0103 	eor.w	r1, r1, r3
 8000c28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
 8000c3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000c42:	bd70      	pop	{r4, r5, r6, pc}

08000c44 <__aeabi_ddiv>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000c4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c52:	bf1d      	ittte	ne
 8000c54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c58:	ea94 0f0c 	teqne	r4, ip
 8000c5c:	ea95 0f0c 	teqne	r5, ip
 8000c60:	f000 f8a7 	bleq	8000db2 <__aeabi_ddiv+0x16e>
 8000c64:	eba4 0405 	sub.w	r4, r4, r5
 8000c68:	ea81 0e03 	eor.w	lr, r1, r3
 8000c6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c74:	f000 8088 	beq.w	8000d88 <__aeabi_ddiv+0x144>
 8000c78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000c80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000c84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000c88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000c8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000c90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000c94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000c98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000c9c:	429d      	cmp	r5, r3
 8000c9e:	bf08      	it	eq
 8000ca0:	4296      	cmpeq	r6, r2
 8000ca2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ca6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000caa:	d202      	bcs.n	8000cb2 <__aeabi_ddiv+0x6e>
 8000cac:	085b      	lsrs	r3, r3, #1
 8000cae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cb2:	1ab6      	subs	r6, r6, r2
 8000cb4:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb8:	085b      	lsrs	r3, r3, #1
 8000cba:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000cc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cce:	bf22      	ittt	cs
 8000cd0:	1ab6      	subcs	r6, r6, r2
 8000cd2:	4675      	movcs	r5, lr
 8000cd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cde:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ce6:	bf22      	ittt	cs
 8000ce8:	1ab6      	subcs	r6, r6, r2
 8000cea:	4675      	movcs	r5, lr
 8000cec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cfe:	bf22      	ittt	cs
 8000d00:	1ab6      	subcs	r6, r6, r2
 8000d02:	4675      	movcs	r5, lr
 8000d04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d08:	085b      	lsrs	r3, r3, #1
 8000d0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d16:	bf22      	ittt	cs
 8000d18:	1ab6      	subcs	r6, r6, r2
 8000d1a:	4675      	movcs	r5, lr
 8000d1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000d24:	d018      	beq.n	8000d58 <__aeabi_ddiv+0x114>
 8000d26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000d2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000d2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000d32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000d3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000d3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000d42:	d1c0      	bne.n	8000cc6 <__aeabi_ddiv+0x82>
 8000d44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d48:	d10b      	bne.n	8000d62 <__aeabi_ddiv+0x11e>
 8000d4a:	ea41 0100 	orr.w	r1, r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000d56:	e7b6      	b.n	8000cc6 <__aeabi_ddiv+0x82>
 8000d58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d5c:	bf04      	itt	eq
 8000d5e:	4301      	orreq	r1, r0
 8000d60:	2000      	moveq	r0, #0
 8000d62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d66:	bf88      	it	hi
 8000d68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d6c:	f63f aeaf 	bhi.w	8000ace <__aeabi_dmul+0xde>
 8000d70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d74:	bf04      	itt	eq
 8000d76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d7e:	f150 0000 	adcs.w	r0, r0, #0
 8000d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
 8000d88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000d8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000d90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000d94:	bfc2      	ittt	gt
 8000d96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000da4:	f04f 0e00 	mov.w	lr, #0
 8000da8:	3c01      	subs	r4, #1
 8000daa:	e690      	b.n	8000ace <__aeabi_dmul+0xde>
 8000dac:	ea45 0e06 	orr.w	lr, r5, r6
 8000db0:	e68d      	b.n	8000ace <__aeabi_dmul+0xde>
 8000db2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000db6:	ea94 0f0c 	teq	r4, ip
 8000dba:	bf08      	it	eq
 8000dbc:	ea95 0f0c 	teqeq	r5, ip
 8000dc0:	f43f af3b 	beq.w	8000c3a <__aeabi_dmul+0x24a>
 8000dc4:	ea94 0f0c 	teq	r4, ip
 8000dc8:	d10a      	bne.n	8000de0 <__aeabi_ddiv+0x19c>
 8000dca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000dce:	f47f af34 	bne.w	8000c3a <__aeabi_dmul+0x24a>
 8000dd2:	ea95 0f0c 	teq	r5, ip
 8000dd6:	f47f af25 	bne.w	8000c24 <__aeabi_dmul+0x234>
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	e72c      	b.n	8000c3a <__aeabi_dmul+0x24a>
 8000de0:	ea95 0f0c 	teq	r5, ip
 8000de4:	d106      	bne.n	8000df4 <__aeabi_ddiv+0x1b0>
 8000de6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000dea:	f43f aefd 	beq.w	8000be8 <__aeabi_dmul+0x1f8>
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	e722      	b.n	8000c3a <__aeabi_dmul+0x24a>
 8000df4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000df8:	bf18      	it	ne
 8000dfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000dfe:	f47f aec5 	bne.w	8000b8c <__aeabi_dmul+0x19c>
 8000e02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000e06:	f47f af0d 	bne.w	8000c24 <__aeabi_dmul+0x234>
 8000e0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000e0e:	f47f aeeb 	bne.w	8000be8 <__aeabi_dmul+0x1f8>
 8000e12:	e712      	b.n	8000c3a <__aeabi_dmul+0x24a>
	...

08000e20 <__aeabi_d2iz>:
 8000e20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e28:	d215      	bcs.n	8000e56 <__aeabi_d2iz+0x36>
 8000e2a:	d511      	bpl.n	8000e50 <__aeabi_d2iz+0x30>
 8000e2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e34:	d912      	bls.n	8000e5c <__aeabi_d2iz+0x3c>
 8000e36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e46:	fa23 f002 	lsr.w	r0, r3, r2
 8000e4a:	bf18      	it	ne
 8000e4c:	4240      	negne	r0, r0
 8000e4e:	4770      	bx	lr
 8000e50:	f04f 0000 	mov.w	r0, #0
 8000e54:	4770      	bx	lr
 8000e56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e5a:	d105      	bne.n	8000e68 <__aeabi_d2iz+0x48>
 8000e5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e60:	bf08      	it	eq
 8000e62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e66:	4770      	bx	lr
 8000e68:	f04f 0000 	mov.w	r0, #0
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2uiz>:
 8000e70:	004a      	lsls	r2, r1, #1
 8000e72:	d211      	bcs.n	8000e98 <__aeabi_d2uiz+0x28>
 8000e74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e78:	d211      	bcs.n	8000e9e <__aeabi_d2uiz+0x2e>
 8000e7a:	d50d      	bpl.n	8000e98 <__aeabi_d2uiz+0x28>
 8000e7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e84:	d40e      	bmi.n	8000ea4 <__aeabi_d2uiz+0x34>
 8000e86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e92:	fa23 f002 	lsr.w	r0, r3, r2
 8000e96:	4770      	bx	lr
 8000e98:	f04f 0000 	mov.w	r0, #0
 8000e9c:	4770      	bx	lr
 8000e9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ea2:	d102      	bne.n	8000eaa <__aeabi_d2uiz+0x3a>
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_d2f>:
 8000eb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000eb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000eb8:	bf24      	itt	cs
 8000eba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ebe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ec2:	d90d      	bls.n	8000ee0 <__aeabi_d2f+0x30>
 8000ec4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ecc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ed0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ed4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ee4:	d121      	bne.n	8000f2a <__aeabi_d2f+0x7a>
 8000ee6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000eea:	bfbc      	itt	lt
 8000eec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ef0:	4770      	bxlt	lr
 8000ef2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ef6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000efa:	f1c2 0218 	rsb	r2, r2, #24
 8000efe:	f1c2 0c20 	rsb	ip, r2, #32
 8000f02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f06:	fa20 f002 	lsr.w	r0, r0, r2
 8000f0a:	bf18      	it	ne
 8000f0c:	f040 0001 	orrne.w	r0, r0, #1
 8000f10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f1c:	ea40 000c 	orr.w	r0, r0, ip
 8000f20:	fa23 f302 	lsr.w	r3, r3, r2
 8000f24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f28:	e7cc      	b.n	8000ec4 <__aeabi_d2f+0x14>
 8000f2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f2e:	d107      	bne.n	8000f40 <__aeabi_d2f+0x90>
 8000f30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f34:	bf1e      	ittt	ne
 8000f36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f3e:	4770      	bxne	lr
 8000f40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <__aeabi_frsub>:
 8000f50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000f54:	e002      	b.n	8000f5c <__addsf3>
 8000f56:	bf00      	nop

08000f58 <__aeabi_fsub>:
 8000f58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000f5c <__addsf3>:
 8000f5c:	0042      	lsls	r2, r0, #1
 8000f5e:	bf1f      	itttt	ne
 8000f60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000f64:	ea92 0f03 	teqne	r2, r3
 8000f68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000f6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f70:	d06a      	beq.n	8001048 <__addsf3+0xec>
 8000f72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000f76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000f7a:	bfc1      	itttt	gt
 8000f7c:	18d2      	addgt	r2, r2, r3
 8000f7e:	4041      	eorgt	r1, r0
 8000f80:	4048      	eorgt	r0, r1
 8000f82:	4041      	eorgt	r1, r0
 8000f84:	bfb8      	it	lt
 8000f86:	425b      	neglt	r3, r3
 8000f88:	2b19      	cmp	r3, #25
 8000f8a:	bf88      	it	hi
 8000f8c:	4770      	bxhi	lr
 8000f8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000f9a:	bf18      	it	ne
 8000f9c:	4240      	negne	r0, r0
 8000f9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000fa2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000fa6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000faa:	bf18      	it	ne
 8000fac:	4249      	negne	r1, r1
 8000fae:	ea92 0f03 	teq	r2, r3
 8000fb2:	d03f      	beq.n	8001034 <__addsf3+0xd8>
 8000fb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000fb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000fbc:	eb10 000c 	adds.w	r0, r0, ip
 8000fc0:	f1c3 0320 	rsb	r3, r3, #32
 8000fc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000fc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000fcc:	d502      	bpl.n	8000fd4 <__addsf3+0x78>
 8000fce:	4249      	negs	r1, r1
 8000fd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000fd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000fd8:	d313      	bcc.n	8001002 <__addsf3+0xa6>
 8000fda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fde:	d306      	bcc.n	8000fee <__addsf3+0x92>
 8000fe0:	0840      	lsrs	r0, r0, #1
 8000fe2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000fe6:	f102 0201 	add.w	r2, r2, #1
 8000fea:	2afe      	cmp	r2, #254	; 0xfe
 8000fec:	d251      	bcs.n	8001092 <__addsf3+0x136>
 8000fee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ff2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ff6:	bf08      	it	eq
 8000ff8:	f020 0001 	biceq.w	r0, r0, #1
 8000ffc:	ea40 0003 	orr.w	r0, r0, r3
 8001000:	4770      	bx	lr
 8001002:	0049      	lsls	r1, r1, #1
 8001004:	eb40 0000 	adc.w	r0, r0, r0
 8001008:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800100c:	f1a2 0201 	sub.w	r2, r2, #1
 8001010:	d1ed      	bne.n	8000fee <__addsf3+0x92>
 8001012:	fab0 fc80 	clz	ip, r0
 8001016:	f1ac 0c08 	sub.w	ip, ip, #8
 800101a:	ebb2 020c 	subs.w	r2, r2, ip
 800101e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001022:	bfaa      	itet	ge
 8001024:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001028:	4252      	neglt	r2, r2
 800102a:	4318      	orrge	r0, r3
 800102c:	bfbc      	itt	lt
 800102e:	40d0      	lsrlt	r0, r2
 8001030:	4318      	orrlt	r0, r3
 8001032:	4770      	bx	lr
 8001034:	f092 0f00 	teq	r2, #0
 8001038:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800103c:	bf06      	itte	eq
 800103e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8001042:	3201      	addeq	r2, #1
 8001044:	3b01      	subne	r3, #1
 8001046:	e7b5      	b.n	8000fb4 <__addsf3+0x58>
 8001048:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800104c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001050:	bf18      	it	ne
 8001052:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001056:	d021      	beq.n	800109c <__addsf3+0x140>
 8001058:	ea92 0f03 	teq	r2, r3
 800105c:	d004      	beq.n	8001068 <__addsf3+0x10c>
 800105e:	f092 0f00 	teq	r2, #0
 8001062:	bf08      	it	eq
 8001064:	4608      	moveq	r0, r1
 8001066:	4770      	bx	lr
 8001068:	ea90 0f01 	teq	r0, r1
 800106c:	bf1c      	itt	ne
 800106e:	2000      	movne	r0, #0
 8001070:	4770      	bxne	lr
 8001072:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8001076:	d104      	bne.n	8001082 <__addsf3+0x126>
 8001078:	0040      	lsls	r0, r0, #1
 800107a:	bf28      	it	cs
 800107c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001080:	4770      	bx	lr
 8001082:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8001086:	bf3c      	itt	cc
 8001088:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800108c:	4770      	bxcc	lr
 800108e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001092:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8001096:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800109a:	4770      	bx	lr
 800109c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80010a0:	bf16      	itet	ne
 80010a2:	4608      	movne	r0, r1
 80010a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80010a8:	4601      	movne	r1, r0
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	bf06      	itte	eq
 80010ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80010b2:	ea90 0f01 	teqeq	r0, r1
 80010b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80010ba:	4770      	bx	lr

080010bc <__aeabi_ui2f>:
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e004      	b.n	80010cc <__aeabi_i2f+0x8>
 80010c2:	bf00      	nop

080010c4 <__aeabi_i2f>:
 80010c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80010c8:	bf48      	it	mi
 80010ca:	4240      	negmi	r0, r0
 80010cc:	ea5f 0c00 	movs.w	ip, r0
 80010d0:	bf08      	it	eq
 80010d2:	4770      	bxeq	lr
 80010d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80010d8:	4601      	mov	r1, r0
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	e01c      	b.n	800111a <__aeabi_l2f+0x2a>

080010e0 <__aeabi_ul2f>:
 80010e0:	ea50 0201 	orrs.w	r2, r0, r1
 80010e4:	bf08      	it	eq
 80010e6:	4770      	bxeq	lr
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	e00a      	b.n	8001104 <__aeabi_l2f+0x14>
 80010ee:	bf00      	nop

080010f0 <__aeabi_l2f>:
 80010f0:	ea50 0201 	orrs.w	r2, r0, r1
 80010f4:	bf08      	it	eq
 80010f6:	4770      	bxeq	lr
 80010f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80010fc:	d502      	bpl.n	8001104 <__aeabi_l2f+0x14>
 80010fe:	4240      	negs	r0, r0
 8001100:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001104:	ea5f 0c01 	movs.w	ip, r1
 8001108:	bf02      	ittt	eq
 800110a:	4684      	moveq	ip, r0
 800110c:	4601      	moveq	r1, r0
 800110e:	2000      	moveq	r0, #0
 8001110:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001114:	bf08      	it	eq
 8001116:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800111a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800111e:	fabc f28c 	clz	r2, ip
 8001122:	3a08      	subs	r2, #8
 8001124:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001128:	db10      	blt.n	800114c <__aeabi_l2f+0x5c>
 800112a:	fa01 fc02 	lsl.w	ip, r1, r2
 800112e:	4463      	add	r3, ip
 8001130:	fa00 fc02 	lsl.w	ip, r0, r2
 8001134:	f1c2 0220 	rsb	r2, r2, #32
 8001138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800113c:	fa20 f202 	lsr.w	r2, r0, r2
 8001140:	eb43 0002 	adc.w	r0, r3, r2
 8001144:	bf08      	it	eq
 8001146:	f020 0001 	biceq.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	f102 0220 	add.w	r2, r2, #32
 8001150:	fa01 fc02 	lsl.w	ip, r1, r2
 8001154:	f1c2 0220 	rsb	r2, r2, #32
 8001158:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800115c:	fa21 f202 	lsr.w	r2, r1, r2
 8001160:	eb43 0002 	adc.w	r0, r3, r2
 8001164:	bf08      	it	eq
 8001166:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800116a:	4770      	bx	lr
 800116c:	0000      	movs	r0, r0
	...

08001170 <__aeabi_fmul>:
 8001170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001178:	bf1e      	ittt	ne
 800117a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800117e:	ea92 0f0c 	teqne	r2, ip
 8001182:	ea93 0f0c 	teqne	r3, ip
 8001186:	d06f      	beq.n	8001268 <__aeabi_fmul+0xf8>
 8001188:	441a      	add	r2, r3
 800118a:	ea80 0c01 	eor.w	ip, r0, r1
 800118e:	0240      	lsls	r0, r0, #9
 8001190:	bf18      	it	ne
 8001192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8001196:	d01e      	beq.n	80011d6 <__aeabi_fmul+0x66>
 8001198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800119c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80011a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80011a4:	fba0 3101 	umull	r3, r1, r0, r1
 80011a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80011ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80011b0:	bf3e      	ittt	cc
 80011b2:	0049      	lslcc	r1, r1, #1
 80011b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80011b8:	005b      	lslcc	r3, r3, #1
 80011ba:	ea40 0001 	orr.w	r0, r0, r1
 80011be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80011c2:	2afd      	cmp	r2, #253	; 0xfd
 80011c4:	d81d      	bhi.n	8001202 <__aeabi_fmul+0x92>
 80011c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011ce:	bf08      	it	eq
 80011d0:	f020 0001 	biceq.w	r0, r0, #1
 80011d4:	4770      	bx	lr
 80011d6:	f090 0f00 	teq	r0, #0
 80011da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80011de:	bf08      	it	eq
 80011e0:	0249      	lsleq	r1, r1, #9
 80011e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80011e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80011ea:	3a7f      	subs	r2, #127	; 0x7f
 80011ec:	bfc2      	ittt	gt
 80011ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80011f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80011f6:	4770      	bxgt	lr
 80011f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	3a01      	subs	r2, #1
 8001202:	dc5d      	bgt.n	80012c0 <__aeabi_fmul+0x150>
 8001204:	f112 0f19 	cmn.w	r2, #25
 8001208:	bfdc      	itt	le
 800120a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800120e:	4770      	bxle	lr
 8001210:	f1c2 0200 	rsb	r2, r2, #0
 8001214:	0041      	lsls	r1, r0, #1
 8001216:	fa21 f102 	lsr.w	r1, r1, r2
 800121a:	f1c2 0220 	rsb	r2, r2, #32
 800121e:	fa00 fc02 	lsl.w	ip, r0, r2
 8001222:	ea5f 0031 	movs.w	r0, r1, rrx
 8001226:	f140 0000 	adc.w	r0, r0, #0
 800122a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800122e:	bf08      	it	eq
 8001230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001234:	4770      	bx	lr
 8001236:	f092 0f00 	teq	r2, #0
 800123a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800123e:	bf02      	ittt	eq
 8001240:	0040      	lsleq	r0, r0, #1
 8001242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001246:	3a01      	subeq	r2, #1
 8001248:	d0f9      	beq.n	800123e <__aeabi_fmul+0xce>
 800124a:	ea40 000c 	orr.w	r0, r0, ip
 800124e:	f093 0f00 	teq	r3, #0
 8001252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001256:	bf02      	ittt	eq
 8001258:	0049      	lsleq	r1, r1, #1
 800125a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800125e:	3b01      	subeq	r3, #1
 8001260:	d0f9      	beq.n	8001256 <__aeabi_fmul+0xe6>
 8001262:	ea41 010c 	orr.w	r1, r1, ip
 8001266:	e78f      	b.n	8001188 <__aeabi_fmul+0x18>
 8001268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800126c:	ea92 0f0c 	teq	r2, ip
 8001270:	bf18      	it	ne
 8001272:	ea93 0f0c 	teqne	r3, ip
 8001276:	d00a      	beq.n	800128e <__aeabi_fmul+0x11e>
 8001278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800127c:	bf18      	it	ne
 800127e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001282:	d1d8      	bne.n	8001236 <__aeabi_fmul+0xc6>
 8001284:	ea80 0001 	eor.w	r0, r0, r1
 8001288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800128c:	4770      	bx	lr
 800128e:	f090 0f00 	teq	r0, #0
 8001292:	bf17      	itett	ne
 8001294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001298:	4608      	moveq	r0, r1
 800129a:	f091 0f00 	teqne	r1, #0
 800129e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80012a2:	d014      	beq.n	80012ce <__aeabi_fmul+0x15e>
 80012a4:	ea92 0f0c 	teq	r2, ip
 80012a8:	d101      	bne.n	80012ae <__aeabi_fmul+0x13e>
 80012aa:	0242      	lsls	r2, r0, #9
 80012ac:	d10f      	bne.n	80012ce <__aeabi_fmul+0x15e>
 80012ae:	ea93 0f0c 	teq	r3, ip
 80012b2:	d103      	bne.n	80012bc <__aeabi_fmul+0x14c>
 80012b4:	024b      	lsls	r3, r1, #9
 80012b6:	bf18      	it	ne
 80012b8:	4608      	movne	r0, r1
 80012ba:	d108      	bne.n	80012ce <__aeabi_fmul+0x15e>
 80012bc:	ea80 0001 	eor.w	r0, r0, r1
 80012c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80012c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80012cc:	4770      	bx	lr
 80012ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80012d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80012d6:	4770      	bx	lr

080012d8 <__aeabi_fdiv>:
 80012d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80012e0:	bf1e      	ittt	ne
 80012e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80012e6:	ea92 0f0c 	teqne	r2, ip
 80012ea:	ea93 0f0c 	teqne	r3, ip
 80012ee:	d069      	beq.n	80013c4 <__aeabi_fdiv+0xec>
 80012f0:	eba2 0203 	sub.w	r2, r2, r3
 80012f4:	ea80 0c01 	eor.w	ip, r0, r1
 80012f8:	0249      	lsls	r1, r1, #9
 80012fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80012fe:	d037      	beq.n	8001370 <__aeabi_fdiv+0x98>
 8001300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001304:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001308:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800130c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001310:	428b      	cmp	r3, r1
 8001312:	bf38      	it	cc
 8001314:	005b      	lslcc	r3, r3, #1
 8001316:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800131a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800131e:	428b      	cmp	r3, r1
 8001320:	bf24      	itt	cs
 8001322:	1a5b      	subcs	r3, r3, r1
 8001324:	ea40 000c 	orrcs.w	r0, r0, ip
 8001328:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800132c:	bf24      	itt	cs
 800132e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001332:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001336:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800133a:	bf24      	itt	cs
 800133c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001340:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001344:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001348:	bf24      	itt	cs
 800134a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800134e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	bf18      	it	ne
 8001356:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800135a:	d1e0      	bne.n	800131e <__aeabi_fdiv+0x46>
 800135c:	2afd      	cmp	r2, #253	; 0xfd
 800135e:	f63f af50 	bhi.w	8001202 <__aeabi_fmul+0x92>
 8001362:	428b      	cmp	r3, r1
 8001364:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001368:	bf08      	it	eq
 800136a:	f020 0001 	biceq.w	r0, r0, #1
 800136e:	4770      	bx	lr
 8001370:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001374:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001378:	327f      	adds	r2, #127	; 0x7f
 800137a:	bfc2      	ittt	gt
 800137c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001380:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001384:	4770      	bxgt	lr
 8001386:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	3a01      	subs	r2, #1
 8001390:	e737      	b.n	8001202 <__aeabi_fmul+0x92>
 8001392:	f092 0f00 	teq	r2, #0
 8001396:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800139a:	bf02      	ittt	eq
 800139c:	0040      	lsleq	r0, r0, #1
 800139e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80013a2:	3a01      	subeq	r2, #1
 80013a4:	d0f9      	beq.n	800139a <__aeabi_fdiv+0xc2>
 80013a6:	ea40 000c 	orr.w	r0, r0, ip
 80013aa:	f093 0f00 	teq	r3, #0
 80013ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80013b2:	bf02      	ittt	eq
 80013b4:	0049      	lsleq	r1, r1, #1
 80013b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80013ba:	3b01      	subeq	r3, #1
 80013bc:	d0f9      	beq.n	80013b2 <__aeabi_fdiv+0xda>
 80013be:	ea41 010c 	orr.w	r1, r1, ip
 80013c2:	e795      	b.n	80012f0 <__aeabi_fdiv+0x18>
 80013c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80013c8:	ea92 0f0c 	teq	r2, ip
 80013cc:	d108      	bne.n	80013e0 <__aeabi_fdiv+0x108>
 80013ce:	0242      	lsls	r2, r0, #9
 80013d0:	f47f af7d 	bne.w	80012ce <__aeabi_fmul+0x15e>
 80013d4:	ea93 0f0c 	teq	r3, ip
 80013d8:	f47f af70 	bne.w	80012bc <__aeabi_fmul+0x14c>
 80013dc:	4608      	mov	r0, r1
 80013de:	e776      	b.n	80012ce <__aeabi_fmul+0x15e>
 80013e0:	ea93 0f0c 	teq	r3, ip
 80013e4:	d104      	bne.n	80013f0 <__aeabi_fdiv+0x118>
 80013e6:	024b      	lsls	r3, r1, #9
 80013e8:	f43f af4c 	beq.w	8001284 <__aeabi_fmul+0x114>
 80013ec:	4608      	mov	r0, r1
 80013ee:	e76e      	b.n	80012ce <__aeabi_fmul+0x15e>
 80013f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80013f4:	bf18      	it	ne
 80013f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80013fa:	d1ca      	bne.n	8001392 <__aeabi_fdiv+0xba>
 80013fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001400:	f47f af5c 	bne.w	80012bc <__aeabi_fmul+0x14c>
 8001404:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001408:	f47f af3c 	bne.w	8001284 <__aeabi_fmul+0x114>
 800140c:	e75f      	b.n	80012ce <__aeabi_fmul+0x15e>
 800140e:	bf00      	nop

08001410 <__gesf2>:
 8001410:	f04f 3cff 	mov.w	ip, #4294967295
 8001414:	e006      	b.n	8001424 <__cmpsf2+0x4>
 8001416:	bf00      	nop

08001418 <__lesf2>:
 8001418:	f04f 0c01 	mov.w	ip, #1
 800141c:	e002      	b.n	8001424 <__cmpsf2+0x4>
 800141e:	bf00      	nop

08001420 <__cmpsf2>:
 8001420:	f04f 0c01 	mov.w	ip, #1
 8001424:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001428:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800142c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001430:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001434:	bf18      	it	ne
 8001436:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800143a:	d011      	beq.n	8001460 <__cmpsf2+0x40>
 800143c:	b001      	add	sp, #4
 800143e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001442:	bf18      	it	ne
 8001444:	ea90 0f01 	teqne	r0, r1
 8001448:	bf58      	it	pl
 800144a:	ebb2 0003 	subspl.w	r0, r2, r3
 800144e:	bf88      	it	hi
 8001450:	17c8      	asrhi	r0, r1, #31
 8001452:	bf38      	it	cc
 8001454:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001458:	bf18      	it	ne
 800145a:	f040 0001 	orrne.w	r0, r0, #1
 800145e:	4770      	bx	lr
 8001460:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001464:	d102      	bne.n	800146c <__cmpsf2+0x4c>
 8001466:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800146a:	d105      	bne.n	8001478 <__cmpsf2+0x58>
 800146c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001470:	d1e4      	bne.n	800143c <__cmpsf2+0x1c>
 8001472:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001476:	d0e1      	beq.n	800143c <__cmpsf2+0x1c>
 8001478:	f85d 0b04 	ldr.w	r0, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <__aeabi_cfrcmple>:
 8001480:	4684      	mov	ip, r0
 8001482:	4608      	mov	r0, r1
 8001484:	4661      	mov	r1, ip
 8001486:	e7ff      	b.n	8001488 <__aeabi_cfcmpeq>

08001488 <__aeabi_cfcmpeq>:
 8001488:	b50f      	push	{r0, r1, r2, r3, lr}
 800148a:	f7ff ffc9 	bl	8001420 <__cmpsf2>
 800148e:	2800      	cmp	r0, #0
 8001490:	bf48      	it	mi
 8001492:	f110 0f00 	cmnmi.w	r0, #0
 8001496:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001498 <__aeabi_fcmpeq>:
 8001498:	f84d ed08 	str.w	lr, [sp, #-8]!
 800149c:	f7ff fff4 	bl	8001488 <__aeabi_cfcmpeq>
 80014a0:	bf0c      	ite	eq
 80014a2:	2001      	moveq	r0, #1
 80014a4:	2000      	movne	r0, #0
 80014a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014aa:	bf00      	nop

080014ac <__aeabi_fcmplt>:
 80014ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014b0:	f7ff ffea 	bl	8001488 <__aeabi_cfcmpeq>
 80014b4:	bf34      	ite	cc
 80014b6:	2001      	movcc	r0, #1
 80014b8:	2000      	movcs	r0, #0
 80014ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80014be:	bf00      	nop

080014c0 <__aeabi_fcmple>:
 80014c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014c4:	f7ff ffe0 	bl	8001488 <__aeabi_cfcmpeq>
 80014c8:	bf94      	ite	ls
 80014ca:	2001      	movls	r0, #1
 80014cc:	2000      	movhi	r0, #0
 80014ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80014d2:	bf00      	nop

080014d4 <__aeabi_fcmpge>:
 80014d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014d8:	f7ff ffd2 	bl	8001480 <__aeabi_cfrcmple>
 80014dc:	bf94      	ite	ls
 80014de:	2001      	movls	r0, #1
 80014e0:	2000      	movhi	r0, #0
 80014e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80014e6:	bf00      	nop

080014e8 <__aeabi_fcmpgt>:
 80014e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014ec:	f7ff ffc8 	bl	8001480 <__aeabi_cfrcmple>
 80014f0:	bf34      	ite	cc
 80014f2:	2001      	movcc	r0, #1
 80014f4:	2000      	movcs	r0, #0
 80014f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014fa:	bf00      	nop
 80014fc:	0000      	movs	r0, r0
	...

08001500 <__aeabi_f2iz>:
 8001500:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001504:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001508:	d30f      	bcc.n	800152a <__aeabi_f2iz+0x2a>
 800150a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800150e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001512:	d90d      	bls.n	8001530 <__aeabi_f2iz+0x30>
 8001514:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800151c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001520:	fa23 f002 	lsr.w	r0, r3, r2
 8001524:	bf18      	it	ne
 8001526:	4240      	negne	r0, r0
 8001528:	4770      	bx	lr
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	4770      	bx	lr
 8001530:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001534:	d101      	bne.n	800153a <__aeabi_f2iz+0x3a>
 8001536:	0242      	lsls	r2, r0, #9
 8001538:	d105      	bne.n	8001546 <__aeabi_f2iz+0x46>
 800153a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800153e:	bf08      	it	eq
 8001540:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001544:	4770      	bx	lr
 8001546:	f04f 0000 	mov.w	r0, #0
 800154a:	4770      	bx	lr
 800154c:	0000      	movs	r0, r0
	...

08001550 <__aeabi_f2uiz>:
 8001550:	0042      	lsls	r2, r0, #1
 8001552:	d20e      	bcs.n	8001572 <__aeabi_f2uiz+0x22>
 8001554:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001558:	d30b      	bcc.n	8001572 <__aeabi_f2uiz+0x22>
 800155a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800155e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001562:	d409      	bmi.n	8001578 <__aeabi_f2uiz+0x28>
 8001564:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800156c:	fa23 f002 	lsr.w	r0, r3, r2
 8001570:	4770      	bx	lr
 8001572:	f04f 0000 	mov.w	r0, #0
 8001576:	4770      	bx	lr
 8001578:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800157c:	d101      	bne.n	8001582 <__aeabi_f2uiz+0x32>
 800157e:	0242      	lsls	r2, r0, #9
 8001580:	d102      	bne.n	8001588 <__aeabi_f2uiz+0x38>
 8001582:	f04f 30ff 	mov.w	r0, #4294967295
 8001586:	4770      	bx	lr
 8001588:	f04f 0000 	mov.w	r0, #0
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <tmr.6612>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8001590:	f241 73c0 	movw	r3, #6080	; 0x17c0
 8001594:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop

080015a0 <chCoreAlloc>:
 80015a0:	2320      	movs	r3, #32
 80015a2:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <chCoreAlloc+0x2c>)
 80015a8:	4909      	ldr	r1, [pc, #36]	; (80015d0 <chCoreAlloc+0x30>)
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	6809      	ldr	r1, [r1, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80015ae:	3007      	adds	r0, #7
 80015b0:	f020 0007 	bic.w	r0, r0, #7
  if ((size_t)(endmem - nextmem) < size)
 80015b4:	1ac9      	subs	r1, r1, r3
 80015b6:	4288      	cmp	r0, r1
    return NULL;
  p = nextmem;
  nextmem += size;
 80015b8:	bf9a      	itte	ls
 80015ba:	1818      	addls	r0, r3, r0
 80015bc:	6010      	strls	r0, [r2, #0]

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
    return NULL;
 80015be:	2300      	movhi	r3, #0
 80015c0:	2200      	movs	r2, #0
 80015c2:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();
  return p;
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000f40 	.word	0x20000f40
 80015d0:	20000db4 	.word	0x20000db4
 80015d4:	f3af 8000 	nop.w
 80015d8:	f3af 8000 	nop.w
 80015dc:	f3af 8000 	nop.w

080015e0 <wakeup.4589>:
 80015e0:	2320      	movs	r3, #32
 80015e2:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80015e6:	7f01      	ldrb	r1, [r0, #28]
 80015e8:	2907      	cmp	r1, #7
 80015ea:	d80e      	bhi.n	800160a <wakeup.4589+0x2a>
 80015ec:	e8df f001 	tbb	[pc, r1]
 80015f0:	210d0d1d 	.word	0x210d0d1d
 80015f4:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 80015f8:	6a03      	ldr	r3, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	1c51      	adds	r1, r2, #1
 80015fe:	6099      	str	r1, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001600:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001604:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001606:	6802      	ldr	r2, [r0, #0]
 8001608:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
 800160e:	6202      	str	r2, [r0, #32]
 8001610:	6881      	ldr	r1, [r0, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001612:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.r_queue;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <wakeup.4589+0x5c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001616:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001618:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	428a      	cmp	r2, r1
 800161e:	d2fb      	bcs.n	8001618 <wakeup.4589+0x38>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001620:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001622:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8001624:	6041      	str	r1, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001626:	6008      	str	r0, [r1, #0]
 8001628:	6058      	str	r0, [r3, #4]
 800162a:	2000      	movs	r0, #0
 800162c:	f380 8811 	msr	BASEPRI, r0
 8001630:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 8001632:	6a03      	ldr	r3, [r0, #32]
 8001634:	2100      	movs	r1, #0
 8001636:	6019      	str	r1, [r3, #0]
 8001638:	e7e7      	b.n	800160a <wakeup.4589+0x2a>
 800163a:	bf00      	nop
 800163c:	20001e58 	.word	0x20001e58

08001640 <_idle_thread.4288>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <_idle_thread.4288+0xc>)
 8001642:	4a03      	ldr	r2, [pc, #12]	; (8001650 <_idle_thread.4288+0x10>)
 8001644:	6998      	ldr	r0, [r3, #24]
 8001646:	6182      	str	r2, [r0, #24]
 8001648:	e7fe      	b.n	8001648 <_idle_thread.4288+0x8>
 800164a:	bf00      	nop
 800164c:	20001e58 	.word	0x20001e58
 8001650:	08009d70 	.word	0x08009d70
 8001654:	f3af 8000 	nop.w
 8001658:	f3af 8000 	nop.w
 800165c:	f3af 8000 	nop.w

08001660 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001660:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001664:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001666:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800166a:	2000      	movs	r0, #0
 800166c:	f380 8811 	msr	BASEPRI, r0
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	f3af 8000 	nop.w
 800167c:	f3af 8000 	nop.w

08001680 <test_terminate_threads>:
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <test_terminate_threads+0x7c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	b14a      	cbz	r2, 800169a <test_terminate_threads+0x1a>
 8001686:	2120      	movs	r1, #32
 8001688:	f381 8811 	msr	BASEPRI, r1
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 800168c:	7f50      	ldrb	r0, [r2, #29]
 800168e:	f040 0104 	orr.w	r1, r0, #4
 8001692:	7751      	strb	r1, [r2, #29]
 8001694:	2200      	movs	r2, #0
 8001696:	f382 8811 	msr	BASEPRI, r2
 800169a:	6858      	ldr	r0, [r3, #4]
 800169c:	b148      	cbz	r0, 80016b2 <test_terminate_threads+0x32>
 800169e:	2120      	movs	r1, #32
 80016a0:	f381 8811 	msr	BASEPRI, r1
 80016a4:	7f42      	ldrb	r2, [r0, #29]
 80016a6:	f042 0104 	orr.w	r1, r2, #4
 80016aa:	7741      	strb	r1, [r0, #29]
 80016ac:	2000      	movs	r0, #0
 80016ae:	f380 8811 	msr	BASEPRI, r0
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	b14a      	cbz	r2, 80016ca <test_terminate_threads+0x4a>
 80016b6:	2120      	movs	r1, #32
 80016b8:	f381 8811 	msr	BASEPRI, r1
 80016bc:	7f50      	ldrb	r0, [r2, #29]
 80016be:	f040 0104 	orr.w	r1, r0, #4
 80016c2:	7751      	strb	r1, [r2, #29]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f382 8811 	msr	BASEPRI, r2
 80016ca:	68d8      	ldr	r0, [r3, #12]
 80016cc:	b148      	cbz	r0, 80016e2 <test_terminate_threads+0x62>
 80016ce:	2120      	movs	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	7f42      	ldrb	r2, [r0, #29]
 80016d6:	f042 0104 	orr.w	r1, r2, #4
 80016da:	7741      	strb	r1, [r0, #29]
 80016dc:	2000      	movs	r0, #0
 80016de:	f380 8811 	msr	BASEPRI, r0
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	b14b      	cbz	r3, 80016fa <test_terminate_threads+0x7a>
 80016e6:	2220      	movs	r2, #32
 80016e8:	f382 8811 	msr	BASEPRI, r2
 80016ec:	7f59      	ldrb	r1, [r3, #29]
 80016ee:	f041 0004 	orr.w	r0, r1, #4
 80016f2:	7758      	strb	r0, [r3, #29]
 80016f4:	2300      	movs	r3, #0
 80016f6:	f383 8811 	msr	BASEPRI, r3
 80016fa:	4770      	bx	lr
 80016fc:	20001fa8 	.word	0x20001fa8

08001700 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 8001700:	b410      	push	{r4}
 8001702:	2320      	movs	r3, #32
 8001704:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001708:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800170c:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800170e:	2300      	movs	r3, #0
 8001710:	f383 8811 	msr	BASEPRI, r3
    test_println("FAILURE");
  else
    test_println("SUCCESS");

  return (msg_t)global_fail;
}
 8001714:	b2a4      	uxth	r4, r4
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 8001716:	1a64      	subs	r4, r4, r1
 8001718:	1a51      	subs	r1, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 800171a:	428c      	cmp	r4, r1
 800171c:	db09      	blt.n	8001732 <_test_assert_time_window+0x32>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <_test_assert_time_window+0x38>)
 8001720:	2301      	movs	r3, #1
 8001722:	7013      	strb	r3, [r2, #0]
  global_fail = TRUE;
 8001724:	4905      	ldr	r1, [pc, #20]	; (800173c <_test_assert_time_window+0x3c>)
  failpoint = point;
 8001726:	4a06      	ldr	r2, [pc, #24]	; (8001740 <_test_assert_time_window+0x40>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8001728:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 800172a:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 800172c:	4618      	mov	r0, r3
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 800172e:	bc10      	pop	{r4}
 8001730:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 8001732:	4618      	mov	r0, r3
 8001734:	e7fb      	b.n	800172e <_test_assert_time_window+0x2e>
 8001736:	bf00      	nop
 8001738:	200014bc 	.word	0x200014bc
 800173c:	200014e0 	.word	0x200014e0
 8001740:	200014e8 	.word	0x200014e8
 8001744:	f3af 8000 	nop.w
 8001748:	f3af 8000 	nop.w
 800174c:	f3af 8000 	nop.w

08001750 <_test_assert_sequence>:
}

bool _test_assert_sequence(unsigned point, char *expected) {
 8001750:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8001754:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80017d0 <_test_assert_sequence+0x80>
 8001758:	f8df c078 	ldr.w	ip, [pc, #120]	; 80017d4 <_test_assert_sequence+0x84>
 800175c:	f8d8 7000 	ldr.w	r7, [r8]
 8001760:	4663      	mov	r3, ip
 8001762:	ebcc 0207 	rsb	r2, ip, r7
 8001766:	07d2      	lsls	r2, r2, #31
 8001768:	d515      	bpl.n	8001796 <_test_assert_sequence+0x46>
  char *cp = tokens_buffer;
  while (cp < tokp) {
 800176a:	4567      	cmp	r7, ip
 800176c:	d918      	bls.n	80017a0 <_test_assert_sequence+0x50>
    if (*cp++ != *expected++)
 800176e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001772:	f89c 4000 	ldrb.w	r4, [ip]
 8001776:	f10c 0301 	add.w	r3, ip, #1
 800177a:	4294      	cmp	r4, r2
 800177c:	d00b      	beq.n	8001796 <_test_assert_sequence+0x46>
 800177e:	e015      	b.n	80017ac <_test_assert_sequence+0x5c>
 8001780:	781e      	ldrb	r6, [r3, #0]
 8001782:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001786:	1c63      	adds	r3, r4, #1
 8001788:	42ae      	cmp	r6, r5
 800178a:	d10f      	bne.n	80017ac <_test_assert_sequence+0x5c>
 800178c:	784d      	ldrb	r5, [r1, #1]
 800178e:	7824      	ldrb	r4, [r4, #0]
 8001790:	1c51      	adds	r1, r2, #1
 8001792:	42ac      	cmp	r4, r5
 8001794:	d10a      	bne.n	80017ac <_test_assert_sequence+0x5c>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8001796:	429f      	cmp	r7, r3
    if (*cp++ != *expected++)
 8001798:	460a      	mov	r2, r1
 800179a:	f103 0401 	add.w	r4, r3, #1
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 800179e:	d8ef      	bhi.n	8001780 <_test_assert_sequence+0x30>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 80017a0:	780b      	ldrb	r3, [r1, #0]
 80017a2:	b91b      	cbnz	r3, 80017ac <_test_assert_sequence+0x5c>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80017a4:	f8c8 c000 	str.w	ip, [r8]
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
 80017a8:	4618      	mov	r0, r3
 80017aa:	e007      	b.n	80017bc <_test_assert_sequence+0x6c>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_test_assert_sequence+0x74>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	7011      	strb	r1, [r2, #0]
  global_fail = TRUE;
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <_test_assert_sequence+0x78>)
  failpoint = point;
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_test_assert_sequence+0x7c>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 80017b6:	7019      	strb	r1, [r3, #0]
  failpoint = point;
 80017b8:	6010      	str	r0, [r2, #0]
  while (cp < tokp) {
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
 80017ba:	4608      	mov	r0, r1
  clear_tokens();
  return FALSE;
}
 80017bc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200014bc 	.word	0x200014bc
 80017c8:	200014e0 	.word	0x200014e0
 80017cc:	200014e8 	.word	0x200014e8
 80017d0:	20001434 	.word	0x20001434
 80017d4:	200014ec 	.word	0x200014ec
 80017d8:	f3af 8000 	nop.w
 80017dc:	f3af 8000 	nop.w

080017e0 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80017e0:	b941      	cbnz	r1, 80017f4 <_test_assert+0x14>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_test_assert+0x18>)
 80017e4:	2301      	movs	r3, #1
 80017e6:	7013      	strb	r3, [r2, #0]
  global_fail = TRUE;
 80017e8:	4904      	ldr	r1, [pc, #16]	; (80017fc <_test_assert+0x1c>)
  failpoint = point;
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_test_assert+0x20>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 80017ec:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 80017ee:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 80017f0:	4618      	mov	r0, r3
 80017f2:	4770      	bx	lr
  return FALSE;
 80017f4:	2000      	movs	r0, #0
}
 80017f6:	4770      	bx	lr
 80017f8:	200014bc 	.word	0x200014bc
 80017fc:	200014e0 	.word	0x200014e0
 8001800:	200014e8 	.word	0x200014e8
 8001804:	f3af 8000 	nop.w
 8001808:	f3af 8000 	nop.w
 800180c:	f3af 8000 	nop.w

08001810 <test_emit_token>:
 8001810:	2320      	movs	r3, #32
 8001812:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 8001816:	f241 4134 	movw	r1, #5172	; 0x1434
 800181a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800181e:	680a      	ldr	r2, [r1, #0]
 8001820:	f802 0b01 	strb.w	r0, [r2], #1
 8001824:	600a      	str	r2, [r1, #0]
 8001826:	2000      	movs	r0, #0
 8001828:	f380 8811 	msr	BASEPRI, r0
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8001830:	b538      	push	{r3, r4, r5, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001832:	7801      	ldrb	r1, [r0, #0]
 8001834:	4d08      	ldr	r5, [pc, #32]	; (8001858 <test_println+0x28>)
 8001836:	b141      	cbz	r1, 800184a <test_println+0x1a>
 8001838:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800183a:	6828      	ldr	r0, [r5, #0]
 800183c:	6803      	ldr	r3, [r0, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001842:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001846:	2900      	cmp	r1, #0
 8001848:	d1f7      	bne.n	800183a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800184a:	6828      	ldr	r0, [r5, #0]
 800184c:	4903      	ldr	r1, [pc, #12]	; (800185c <test_println+0x2c>)
 800184e:	6803      	ldr	r3, [r0, #0]
 8001850:	2202      	movs	r2, #2
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4798      	blx	r3
 8001856:	bd38      	pop	{r3, r4, r5, pc}
 8001858:	200014e4 	.word	0x200014e4
 800185c:	0800a7a8 	.word	0x0800a7a8

08001860 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8001860:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8001862:	7801      	ldrb	r1, [r0, #0]
 8001864:	b149      	cbz	r1, 800187a <test_print+0x1a>
 8001866:	4d05      	ldr	r5, [pc, #20]	; (800187c <test_print+0x1c>)
 8001868:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800186a:	6828      	ldr	r0, [r5, #0]
 800186c:	6803      	ldr	r3, [r0, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001872:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001876:	2900      	cmp	r1, #0
 8001878:	d1f7      	bne.n	800186a <test_print+0xa>
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	200014e4 	.word	0x200014e4

08001880 <test_printn>:
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	b085      	sub	sp, #20
  char buf[16], *p;

  if (!n)
 8001884:	2800      	cmp	r0, #0
 8001886:	d037      	beq.n	80018f8 <test_printn+0x78>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001888:	f10d 0501 	add.w	r5, sp, #1
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800188c:	f64c 46cd 	movw	r6, #52429	; 0xcccd
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001890:	462b      	mov	r3, r5
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8001892:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
 8001896:	fba6 1200 	umull	r1, r2, r6, r0
 800189a:	08d4      	lsrs	r4, r2, #3
 800189c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80018a0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80018a4:	3030      	adds	r0, #48	; 0x30
 80018a6:	b2c1      	uxtb	r1, r0

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80018a8:	4620      	mov	r0, r4
      *p++ = (n % 10) + '0', n /= 10;
 80018aa:	f803 1c01 	strb.w	r1, [r3, #-1]
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 80018ae:	461c      	mov	r4, r3
 80018b0:	3301      	adds	r3, #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d1ef      	bne.n	8001896 <test_printn+0x16>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80018b6:	466a      	mov	r2, sp
 80018b8:	4294      	cmp	r4, r2
 80018ba:	d91b      	bls.n	80018f4 <test_printn+0x74>
 80018bc:	1b60      	subs	r0, r4, r5
 80018be:	07c0      	lsls	r0, r0, #31
 80018c0:	4f11      	ldr	r7, [pc, #68]	; (8001908 <test_printn+0x88>)
 80018c2:	d511      	bpl.n	80018e8 <test_printn+0x68>
      chSequentialStreamPut(chp, *--p);
 80018c4:	6838      	ldr	r0, [r7, #0]
 80018c6:	6803      	ldr	r3, [r0, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	4790      	blx	r2
 80018cc:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80018d0:	3c01      	subs	r4, #1
 80018d2:	e009      	b.n	80018e8 <test_printn+0x68>
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80018da:	6803      	ldr	r3, [r0, #0]
 80018dc:	1e66      	subs	r6, r4, #1
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4790      	blx	r2
 80018e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80018e6:	3c02      	subs	r4, #2
 80018e8:	6838      	ldr	r0, [r7, #0]
 80018ea:	6803      	ldr	r3, [r0, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	4790      	blx	r2
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80018f0:	42ac      	cmp	r4, r5
 80018f2:	d1ef      	bne.n	80018d4 <test_printn+0x54>
      chSequentialStreamPut(chp, *--p);
  }
}
 80018f4:	b005      	add	sp, #20
 80018f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <test_printn+0x88>)
 80018fa:	2130      	movs	r1, #48	; 0x30
 80018fc:	6800      	ldr	r0, [r0, #0]
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	4790      	blx	r2
 8001904:	e7f6      	b.n	80018f4 <test_printn+0x74>
 8001906:	bf00      	nop
 8001908:	200014e4 	.word	0x200014e4
 800190c:	f3af 8000 	nop.w

08001910 <print_line.6617>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4d0b      	ldr	r5, [pc, #44]	; (8001940 <print_line.6617+0x30>)
 8001914:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 8001916:	6828      	ldr	r0, [r5, #0]
 8001918:	212d      	movs	r1, #45	; 0x2d
 800191a:	6803      	ldr	r3, [r0, #0]
 800191c:	3c01      	subs	r4, #1
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4790      	blx	r2
 8001922:	6828      	ldr	r0, [r5, #0]
 8001924:	6801      	ldr	r1, [r0, #0]
 8001926:	688b      	ldr	r3, [r1, #8]
 8001928:	212d      	movs	r1, #45	; 0x2d
 800192a:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 800192c:	3c01      	subs	r4, #1
 800192e:	d1f2      	bne.n	8001916 <print_line.6617+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <print_line.6617+0x30>)
 8001932:	4904      	ldr	r1, [pc, #16]	; (8001944 <print_line.6617+0x34>)
 8001934:	6800      	ldr	r0, [r0, #0]
 8001936:	6802      	ldr	r2, [r0, #0]
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	4798      	blx	r3
 800193e:	bd38      	pop	{r3, r4, r5, pc}
 8001940:	200014e4 	.word	0x200014e4
 8001944:	0800a7a8 	.word	0x0800a7a8
 8001948:	f3af 8000 	nop.w
 800194c:	f3af 8000 	nop.w

08001950 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001950:	b508      	push	{r3, lr}
 8001952:	2220      	movs	r2, #32
 8001954:	4603      	mov	r3, r0
 8001956:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
 800195a:	6800      	ldr	r0, [r0, #0]
 800195c:	b128      	cbz	r0, 800196a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 800195e:	6802      	ldr	r2, [r0, #0]
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 8001968:	bd08      	pop	{r3, pc}
  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
    mp->mp_next = mp->mp_next->ph_next;
  else if (mp->mp_provider != NULL)
 800196a:	6899      	ldr	r1, [r3, #8]
 800196c:	2900      	cmp	r1, #0
 800196e:	d0f8      	beq.n	8001962 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8001970:	6858      	ldr	r0, [r3, #4]
 8001972:	4788      	blx	r1
 8001974:	e7f5      	b.n	8001962 <chPoolAlloc+0x12>
 8001976:	bf00      	nop
 8001978:	f3af 8000 	nop.w
 800197c:	f3af 8000 	nop.w

08001980 <chEvtUnregister>:
 8001980:	2320      	movs	r3, #32
 8001982:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8001986:	4602      	mov	r2, r0
 8001988:	e000      	b.n	800198c <chEvtUnregister+0xc>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 800198a:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	4283      	cmp	r3, r0
 8001990:	d003      	beq.n	800199a <chEvtUnregister+0x1a>
    if (p->el_next == elp) {
 8001992:	428b      	cmp	r3, r1
 8001994:	d1f9      	bne.n	800198a <chEvtUnregister+0xa>
      p->el_next = elp->el_next;
 8001996:	6808      	ldr	r0, [r1, #0]
 8001998:	6010      	str	r0, [r2, #0]
 800199a:	2100      	movs	r1, #0
 800199c:	f381 8811 	msr	BASEPRI, r1
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	f3af 8000 	nop.w
 80019a8:	f3af 8000 	nop.w
 80019ac:	f3af 8000 	nop.w

080019b0 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	2320      	movs	r3, #32
 80019b4:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <chThdYield+0x48>)
 80019ba:	6810      	ldr	r0, [r2, #0]
 80019bc:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 80019be:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 80019c0:	688c      	ldr	r4, [r1, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 80019c2:	42a3      	cmp	r3, r4
 80019c4:	d203      	bcs.n	80019ce <chThdYield+0x1e>
 80019c6:	2000      	movs	r0, #0
 80019c8:	f380 8811 	msr	BASEPRI, r0
 80019cc:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80019ce:	6803      	ldr	r3, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80019d0:	2501      	movs	r5, #1
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80019d6:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80019d8:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80019da:	7705      	strb	r5, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80019dc:	770a      	strb	r2, [r1, #28]
 80019de:	e000      	b.n	80019e2 <chThdYield+0x32>
 80019e0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4294      	cmp	r4, r2
 80019e6:	d9fb      	bls.n	80019e0 <chThdYield+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80019e8:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80019ea:	600b      	str	r3, [r1, #0]
  tp->p_prev = cp->p_prev;
 80019ec:	604a      	str	r2, [r1, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80019ee:	6011      	str	r1, [r2, #0]
 80019f0:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 80019f2:	f7fe fe2d 	bl	8000650 <_port_switch>
 80019f6:	e7e6      	b.n	80019c6 <chThdYield+0x16>
 80019f8:	20001e58 	.word	0x20001e58
 80019fc:	f3af 8000 	nop.w

08001a00 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001a00:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a04:	3924      	subs	r1, #36	; 0x24
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a06:	f641 6558 	movw	r5, #7768	; 0x1e58

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a0a:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a0c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001a10:	f8d5 c014 	ldr.w	ip, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001a14:	60c7      	str	r7, [r0, #12]
 8001a16:	5043      	str	r3, [r0, r1]
 8001a18:	9b06      	ldr	r3, [sp, #24]
 8001a1a:	f240 6161 	movw	r1, #1633	; 0x661
 8001a1e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	6239      	str	r1, [r7, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001a26:	2600      	movs	r6, #0
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001a28:	4690      	mov	r8, r2
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001a2a:	f100 0924 	add.w	r9, r0, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001a2e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001a32:	2302      	movs	r3, #2
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001a34:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a36:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001a38:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a3c:	f8c0 c014 	str.w	ip, [r0, #20]
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001a40:	4604      	mov	r4, r0
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a42:	6168      	str	r0, [r5, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001a44:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001a46:	f8cc 0010 	str.w	r0, [ip, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001a4a:	7746      	strb	r6, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001a4c:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8001a50:	6386      	str	r6, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001a52:	6346      	str	r6, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001a54:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001a56:	6186      	str	r6, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001a58:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001a5c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001a5e:	6282      	str	r2, [r0, #40]	; 0x28
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
  return _thread_init(tp, prio);
}
 8001a60:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	f3af 8000 	nop.w
 8001a6c:	f3af 8000 	nop.w

08001a70 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <chSchDoRescheduleAhead+0x34>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001a72:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001a74:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001a76:	6991      	ldr	r1, [r2, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001a78:	6803      	ldr	r3, [r0, #0]
 8001a7a:	688c      	ldr	r4, [r1, #8]
 8001a7c:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001a7e:	2501      	movs	r5, #1
 8001a80:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001a82:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001a84:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001a86:	7705      	strb	r5, [r0, #28]

  otp->p_state = CH_STATE_READY;
 8001a88:	770a      	strb	r2, [r1, #28]
 8001a8a:	e000      	b.n	8001a8e <chSchDoRescheduleAhead+0x1e>
 8001a8c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	42a2      	cmp	r2, r4
 8001a92:	d8fb      	bhi.n	8001a8c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001a94:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8001a96:	600b      	str	r3, [r1, #0]
  otp->p_prev = cp->p_prev;
 8001a98:	604a      	str	r2, [r1, #4]
  otp->p_prev->p_next = cp->p_prev = otp;
 8001a9a:	6011      	str	r1, [r2, #0]
 8001a9c:	6059      	str	r1, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001a9e:	bc30      	pop	{r4, r5}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001aa0:	f7fe bdd6 	b.w	8000650 <_port_switch>
 8001aa4:	20001e58 	.word	0x20001e58
 8001aa8:	f3af 8000 	nop.w
 8001aac:	f3af 8000 	nop.w

08001ab0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <chSchRescheduleS+0x14>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6998      	ldr	r0, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
 8001ab6:	6891      	ldr	r1, [r2, #8]
 8001ab8:	6883      	ldr	r3, [r0, #8]
 8001aba:	4299      	cmp	r1, r3
 8001abc:	d800      	bhi.n	8001ac0 <chSchRescheduleS+0x10>
 8001abe:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001ac0:	f7ff bfd6 	b.w	8001a70 <chSchDoRescheduleAhead>
 8001ac4:	20001e58 	.word	0x20001e58
 8001ac8:	f3af 8000 	nop.w
 8001acc:	f3af 8000 	nop.w

08001ad0 <chThdSetPriority.4273>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8001ad8:	4908      	ldr	r1, [pc, #32]	; (8001afc <chThdSetPriority.4273+0x2c>)
 8001ada:	698a      	ldr	r2, [r1, #24]
 8001adc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
 8001ade:	6893      	ldr	r3, [r2, #8]
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	d001      	beq.n	8001ae8 <chThdSetPriority.4273+0x18>
 8001ae4:	4283      	cmp	r3, r0
 8001ae6:	d200      	bcs.n	8001aea <chThdSetPriority.4273+0x1a>
    currp->p_prio = newprio;
 8001ae8:	6090      	str	r0, [r2, #8]
  currp->p_realprio = newprio;
 8001aea:	63d0      	str	r0, [r2, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8001aec:	f7ff ffe0 	bl	8001ab0 <chSchRescheduleS>
 8001af0:	2000      	movs	r0, #0
 8001af2:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return oldprio;
}
 8001af6:	4620      	mov	r0, r4
 8001af8:	bd10      	pop	{r4, pc}
 8001afa:	bf00      	nop
 8001afc:	20001e58 	.word	0x20001e58

08001b00 <thd3_execute.6824>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001b02:	4e51      	ldr	r6, [pc, #324]	; (8001c48 <thd3_execute.6824+0x148>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001b04:	69b3      	ldr	r3, [r6, #24]
 8001b06:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001b08:	1c65      	adds	r5, r4, #1
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	f7ff ffe0 	bl	8001ad0 <chThdSetPriority.4273>
  test_assert(1, p1 == prio,
 8001b10:	ebb0 0c04 	subs.w	ip, r0, r4
 8001b14:	f1dc 0100 	rsbs	r1, ip, #0
 8001b18:	eb51 010c 	adcs.w	r1, r1, ip

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001b1c:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fe5e 	bl	80017e0 <_test_assert>
 8001b24:	b100      	cbz	r0, 8001b28 <thd3_execute.6824+0x28>
 8001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b28:	69b2      	ldr	r2, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	6893      	ldr	r3, [r2, #8]
 8001b2e:	ebb5 0e03 	subs.w	lr, r5, r3
 8001b32:	f1de 0100 	rsbs	r1, lr, #0
 8001b36:	eb51 010e 	adcs.w	r1, r1, lr
 8001b3a:	f7ff fe51 	bl	80017e0 <_test_assert>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d1f1      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8001b42:	4638      	mov	r0, r7
 8001b44:	f7ff ffc4 	bl	8001ad0 <chThdSetPriority.4273>
  test_assert(3, p1 == prio + 1,
 8001b48:	1a28      	subs	r0, r5, r0
 8001b4a:	4242      	negs	r2, r0
 8001b4c:	eb52 0100 	adcs.w	r1, r2, r0
 8001b50:	2003      	movs	r0, #3
 8001b52:	f7ff fe45 	bl	80017e0 <_test_assert>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	d1e5      	bne.n	8001b26 <thd3_execute.6824+0x26>
 8001b5a:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	1a62      	subs	r2, r4, r1
 8001b62:	4253      	negs	r3, r2
 8001b64:	eb53 0102 	adcs.w	r1, r3, r2
 8001b68:	f7ff fe3a 	bl	80017e0 <_test_assert>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d1da      	bne.n	8001b26 <thd3_execute.6824+0x26>
 8001b70:	2720      	movs	r7, #32
 8001b72:	f387 8811 	msr	BASEPRI, r7
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001b76:	69b1      	ldr	r1, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8001b78:	688a      	ldr	r2, [r1, #8]
 8001b7a:	1c93      	adds	r3, r2, #2
 8001b7c:	608b      	str	r3, [r1, #8]
 8001b7e:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001b82:	69b0      	ldr	r0, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8001b84:	1ca7      	adds	r7, r4, #2
 8001b86:	6881      	ldr	r1, [r0, #8]
 8001b88:	2005      	movs	r0, #5
 8001b8a:	1a7a      	subs	r2, r7, r1
 8001b8c:	4253      	negs	r3, r2
 8001b8e:	eb53 0102 	adcs.w	r1, r3, r2
 8001b92:	f7ff fe25 	bl	80017e0 <_test_assert>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d1c5      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ff98 	bl	8001ad0 <chThdSetPriority.4273>
  test_assert(6, p1 == prio,
 8001ba0:	ebb0 0c04 	subs.w	ip, r0, r4
 8001ba4:	f1dc 0000 	rsbs	r0, ip, #0
 8001ba8:	eb50 010c 	adcs.w	r1, r0, ip
 8001bac:	2006      	movs	r0, #6
 8001bae:	f7ff fe17 	bl	80017e0 <_test_assert>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d1b7      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8001bb6:	69b1      	ldr	r1, [r6, #24]
 8001bb8:	2007      	movs	r0, #7
 8001bba:	688a      	ldr	r2, [r1, #8]
 8001bbc:	ebb7 0e02 	subs.w	lr, r7, r2
 8001bc0:	f1de 0300 	rsbs	r3, lr, #0
 8001bc4:	eb53 010e 	adcs.w	r1, r3, lr
 8001bc8:	f7ff fe0a 	bl	80017e0 <_test_assert>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d1aa      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8001bd0:	69b1      	ldr	r1, [r6, #24]
 8001bd2:	2008      	movs	r0, #8
 8001bd4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001bd6:	1aab      	subs	r3, r5, r2
 8001bd8:	4259      	negs	r1, r3
 8001bda:	4159      	adcs	r1, r3
 8001bdc:	f7ff fe00 	bl	80017e0 <_test_assert>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d1a0      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8001be4:	1ce7      	adds	r7, r4, #3
 8001be6:	4638      	mov	r0, r7
 8001be8:	f7ff ff72 	bl	8001ad0 <chThdSetPriority.4273>
  test_assert(9, p1 == prio + 1,
 8001bec:	1a28      	subs	r0, r5, r0
 8001bee:	4242      	negs	r2, r0
 8001bf0:	eb52 0100 	adcs.w	r1, r2, r0
 8001bf4:	2009      	movs	r0, #9
 8001bf6:	f7ff fdf3 	bl	80017e0 <_test_assert>
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d193      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8001bfe:	69b3      	ldr	r3, [r6, #24]
 8001c00:	200a      	movs	r0, #10
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	ebb7 0c01 	subs.w	ip, r7, r1
 8001c08:	f1dc 0200 	rsbs	r2, ip, #0
 8001c0c:	eb52 010c 	adcs.w	r1, r2, ip
 8001c10:	f7ff fde6 	bl	80017e0 <_test_assert>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d186      	bne.n	8001b26 <thd3_execute.6824+0x26>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8001c18:	69b3      	ldr	r3, [r6, #24]
 8001c1a:	200b      	movs	r0, #11
 8001c1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c1e:	ebb7 0e01 	subs.w	lr, r7, r1
 8001c22:	f1de 0200 	rsbs	r2, lr, #0
 8001c26:	eb52 010e 	adcs.w	r1, r2, lr
 8001c2a:	f7ff fdd9 	bl	80017e0 <_test_assert>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	f47f af79 	bne.w	8001b26 <thd3_execute.6824+0x26>
 8001c34:	2320      	movs	r3, #32
 8001c36:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001c3a:	69b2      	ldr	r2, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8001c3c:	6094      	str	r4, [r2, #8]
  chThdGetSelfX()->p_realprio = prio;
 8001c3e:	63d4      	str	r4, [r2, #60]	; 0x3c
 8001c40:	f380 8811 	msr	BASEPRI, r0
 8001c44:	e76f      	b.n	8001b26 <thd3_execute.6824+0x26>
 8001c46:	bf00      	nop
 8001c48:	20001e58 	.word	0x20001e58
 8001c4c:	f3af 8000 	nop.w

08001c50 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c50:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c52:	4f14      	ldr	r7, [pc, #80]	; (8001ca4 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001c54:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c56:	69be      	ldr	r6, [r7, #24]
 8001c58:	6885      	ldr	r5, [r0, #8]
 8001c5a:	68b0      	ldr	r0, [r6, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001c5c:	2300      	movs	r3, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c5e:	4285      	cmp	r5, r0

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001c60:	6221      	str	r1, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001c62:	d80c      	bhi.n	8001c7e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001c64:	7723      	strb	r3, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001c66:	4639      	mov	r1, r7
  do {
    cp = cp->p_next;
 8001c68:	6809      	ldr	r1, [r1, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001c6a:	688a      	ldr	r2, [r1, #8]
 8001c6c:	4295      	cmp	r5, r2
 8001c6e:	d9fb      	bls.n	8001c68 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001c70:	6848      	ldr	r0, [r1, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001c72:	6021      	str	r1, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001c74:	6060      	str	r0, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001c76:	6004      	str	r4, [r0, #0]
 8001c78:	604c      	str	r4, [r1, #4]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001c7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c7c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001c7e:	7733      	strb	r3, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001c80:	4639      	mov	r1, r7
  do {
    cp = cp->p_next;
 8001c82:	6809      	ldr	r1, [r1, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001c84:	688a      	ldr	r2, [r1, #8]
 8001c86:	4290      	cmp	r0, r2
 8001c88:	d9fb      	bls.n	8001c82 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001c8a:	6848      	ldr	r0, [r1, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001c8c:	6031      	str	r1, [r6, #0]
  tp->p_prev = cp->p_prev;
 8001c8e:	6070      	str	r0, [r6, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001c90:	6006      	str	r6, [r0, #0]
 8001c92:	604e      	str	r6, [r1, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001c94:	2301      	movs	r3, #1
    chSysSwitch(ntp, otp);
 8001c96:	4620      	mov	r0, r4
 8001c98:	4631      	mov	r1, r6
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001c9a:	7723      	strb	r3, [r4, #28]
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8001c9c:	61bc      	str	r4, [r7, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001c9e:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001ca0:	f7fe bcd6 	b.w	8000650 <_port_switch>
 8001ca4:	20001e58 	.word	0x20001e58
 8001ca8:	f3af 8000 	nop.w
 8001cac:	f3af 8000 	nop.w

08001cb0 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001cb0:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <chMtxUnlock+0x58>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	2120      	movs	r1, #32
  thread_t *ctp = currp;
 8001cb8:	6998      	ldr	r0, [r3, #24]
 8001cba:	f381 8811 	msr	BASEPRI, r1
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8001cbe:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001cc0:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001cc2:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001cc4:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001cc6:	d01b      	beq.n	8001d00 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001cc8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001cca:	b14b      	cbz	r3, 8001ce0 <chMtxUnlock+0x30>
 8001ccc:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d003      	beq.n	8001cda <chMtxUnlock+0x2a>
 8001cd2:	6892      	ldr	r2, [r2, #8]
 8001cd4:	4291      	cmp	r1, r2
 8001cd6:	bf38      	it	cc
 8001cd8:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8001cda:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f5      	bne.n	8001ccc <chMtxUnlock+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001ce0:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001ce2:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001ce4:	6081      	str	r1, [r0, #8]
 8001ce6:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001ce8:	4628      	mov	r0, r5
 8001cea:	605c      	str	r4, [r3, #4]
 8001cec:	2100      	movs	r1, #0
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001cee:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8001cf0:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8001cf2:	63ac      	str	r4, [r5, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001cf4:	f7ff ffac 	bl	8001c50 <chSchWakeupS>
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f380 8811 	msr	BASEPRI, r0
 8001cfe:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
      mp->m_owner = NULL;
 8001d00:	2200      	movs	r2, #0
 8001d02:	60a2      	str	r2, [r4, #8]
 8001d04:	e7f8      	b.n	8001cf8 <chMtxUnlock+0x48>
 8001d06:	bf00      	nop
 8001d08:	20001e58 	.word	0x20001e58
 8001d0c:	f3af 8000 	nop.w

08001d10 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8001d10:	b508      	push	{r3, lr}
 8001d12:	2220      	movs	r2, #32
 8001d14:	4603      	mov	r3, r0
 8001d16:	f382 8811 	msr	BASEPRI, r2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0)
 8001d1a:	6880      	ldr	r0, [r0, #8]
 8001d1c:	1c41      	adds	r1, r0, #1
 8001d1e:	2900      	cmp	r1, #0
 8001d20:	6099      	str	r1, [r3, #8]
 8001d22:	dd03      	ble.n	8001d2c <chSemSignal+0x1c>
 8001d24:	2300      	movs	r3, #0
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	bd08      	pop	{r3, pc}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001d2c:	6818      	ldr	r0, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8001d2e:	2100      	movs	r1, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001d30:	6802      	ldr	r2, [r0, #0]
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	6053      	str	r3, [r2, #4]
 8001d36:	f7ff ff8b 	bl	8001c50 <chSchWakeupS>
 8001d3a:	e7f3      	b.n	8001d24 <chSemSignal+0x14>
 8001d3c:	f3af 8000 	nop.w

08001d40 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d44:	4604      	mov	r4, r0
 8001d46:	2520      	movs	r5, #32
 8001d48:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d4c:	f641 6658 	movw	r6, #7768	; 0x1e58

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d50:	f1a1 0824 	sub.w	r8, r1, #36	; 0x24
 8001d54:	eb00 0708 	add.w	r7, r0, r8
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d58:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8001d5c:	f8d6 c014 	ldr.w	ip, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d60:	60c7      	str	r7, [r0, #12]
 8001d62:	f840 3008 	str.w	r3, [r0, r8]
 8001d66:	9b08      	ldr	r3, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001d68:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	f240 6361 	movw	r3, #1633	; 0x661
 8001d70:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d74:	623b      	str	r3, [r7, #32]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001d76:	f100 0e28 	add.w	lr, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001d7a:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001d7c:	f100 0924 	add.w	r9, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001d80:	2302      	movs	r3, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001d82:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001d84:	2201      	movs	r2, #1
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d86:	6106      	str	r6, [r0, #16]
 8001d88:	f8c0 c014 	str.w	ip, [r0, #20]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001d8c:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d8e:	6170      	str	r0, [r6, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001d90:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001d92:	f8cc 0010 	str.w	r0, [ip, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001d96:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001d98:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001d9a:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001d9c:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001d9e:	6185      	str	r5, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001da0:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001da4:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
 8001da8:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001dac:	f7ff ff50 	bl	8001c50 <chSchWakeupS>
 8001db0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8001db4:	4620      	mov	r0, r4
 8001db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w

08001dc0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001dc0:	f641 6358 	movw	r3, #7768	; 0x1e58
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001dc4:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001dce:	6814      	ldr	r4, [r2, #0]
 8001dd0:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	7710      	strb	r0, [r2, #28]
  chSysSwitch(currp, otp);
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	6063      	str	r3, [r4, #4]
 8001dda:	601c      	str	r4, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001ddc:	619a      	str	r2, [r3, #24]
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
}
 8001dde:	bc10      	pop	{r4}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001de0:	f7fe bc36 	b.w	8000650 <_port_switch>
 8001de4:	f3af 8000 	nop.w
 8001de8:	f3af 8000 	nop.w
 8001dec:	f3af 8000 	nop.w

08001df0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001df0:	b510      	push	{r4, lr}
 8001df2:	2320      	movs	r3, #32
 8001df4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
 8001df8:	4c0b      	ldr	r4, [pc, #44]	; (8001e28 <chMsgWait+0x38>)
 8001dfa:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001e02:	4298      	cmp	r0, r3
 8001e04:	d008      	beq.n	8001e18 <chMsgWait+0x28>
 8001e06:	6801      	ldr	r1, [r0, #0]
 8001e08:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	604b      	str	r3, [r1, #4]
 8001e0e:	7702      	strb	r2, [r0, #28]
 8001e10:	2300      	movs	r3, #0
 8001e12:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return tp;
}
 8001e16:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
    chSchGoSleepS(CH_STATE_WTMSG);
 8001e18:	200e      	movs	r0, #14
 8001e1a:	f7ff ffd1 	bl	8001dc0 <chSchGoSleepS>
 8001e1e:	69a2      	ldr	r2, [r4, #24]
 8001e20:	4613      	mov	r3, r2
 8001e22:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001e26:	e7ee      	b.n	8001e06 <chMsgWait+0x16>
 8001e28:	20001e58 	.word	0x20001e58
 8001e2c:	f3af 8000 	nop.w

08001e30 <chSemWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8001e30:	b510      	push	{r4, lr}
 8001e32:	4603      	mov	r3, r0
 8001e34:	2220      	movs	r2, #32
 8001e36:	f382 8811 	msr	BASEPRI, r2
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8001e3a:	6880      	ldr	r0, [r0, #8]
 8001e3c:	1e41      	subs	r1, r0, #1
 8001e3e:	2900      	cmp	r1, #0
 8001e40:	6099      	str	r1, [r3, #8]
 8001e42:	db04      	blt.n	8001e4e <chSemWait+0x1e>
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
    return currp->p_u.rdymsg;
  }
  return MSG_OK;
 8001e44:	2000      	movs	r0, #0
 8001e46:	2200      	movs	r2, #0
 8001e48:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8001e4c:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001e4e:	4c07      	ldr	r4, [pc, #28]	; (8001e6c <chSemWait+0x3c>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001e50:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001e52:	69a2      	ldr	r2, [r4, #24]
 8001e54:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001e56:	6859      	ldr	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001e58:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8001e5a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001e60:	f7ff ffae 	bl	8001dc0 <chSchGoSleepS>
    return currp->p_u.rdymsg;
 8001e64:	69a3      	ldr	r3, [r4, #24]
 8001e66:	6a18      	ldr	r0, [r3, #32]
 8001e68:	e7ed      	b.n	8001e46 <chSemWait+0x16>
 8001e6a:	bf00      	nop
 8001e6c:	20001e58 	.word	0x20001e58

08001e70 <_port_irq_epilogue>:
 8001e70:	2320      	movs	r3, #32
 8001e72:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8001e76:	f44f 406d 	mov.w	r0, #60672	; 0xed00
 8001e7a:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8001e7e:	6841      	ldr	r1, [r0, #4]
 8001e80:	f411 6200 	ands.w	r2, r1, #2048	; 0x800
 8001e84:	d102      	bne.n	8001e8c <_port_irq_epilogue+0x1c>
 8001e86:	f382 8811 	msr	BASEPRI, r2
 8001e8a:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001e8c:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001e90:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001e94:	f843 0c04 	str.w	r0, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001e98:	f1a3 0120 	sub.w	r1, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001e9c:	f381 8809 	msr	PSP, r1
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_port_irq_epilogue+0x48>)
 8001ea2:	6810      	ldr	r0, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001ea4:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001ea6:	6881      	ldr	r1, [r0, #8]
 8001ea8:	6890      	ldr	r0, [r2, #8]
 8001eaa:	4281      	cmp	r1, r0
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001eac:	bf8c      	ite	hi
 8001eae:	4803      	ldrhi	r0, [pc, #12]	; (8001ebc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001eb0:	4803      	ldrls	r0, [pc, #12]	; (8001ec0 <_port_irq_epilogue+0x50>)
 8001eb2:	f843 0c08 	str.w	r0, [r3, #-8]
 8001eb6:	4770      	bx	lr
 8001eb8:	20001e58 	.word	0x20001e58
 8001ebc:	0800066f 	.word	0x0800066f
 8001ec0:	08000672 	.word	0x08000672
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	f3af 8000 	nop.w

08001ed0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <chSchReadyI+0x1c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ed6:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001ed8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d2fb      	bcs.n	8001ed8 <chSchReadyI+0x8>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001ee0:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001ee2:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8001ee4:	6041      	str	r1, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001ee6:	6008      	str	r0, [r1, #0]
 8001ee8:	6058      	str	r0, [r3, #4]
  return tp;
}
 8001eea:	4770      	bx	lr
 8001eec:	20001e58 	.word	0x20001e58

08001ef0 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8001ef2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001ef4:	6994      	ldr	r4, [r2, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001ef6:	2520      	movs	r5, #32
 8001ef8:	f385 8811 	msr	BASEPRI, r5

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 8001efc:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8001f00:	6225      	str	r5, [r4, #32]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8001f02:	7f06      	ldrb	r6, [r0, #28]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f04:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001f06:	2e0e      	cmp	r6, #14
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001f08:	6025      	str	r5, [r4, #0]
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 8001f0a:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev = tqp->p_prev;
 8001f0c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001f0e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001f10:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8001f12:	d007      	beq.n	8001f24 <chMsgSend+0x34>
    chSchReadyI(tp);
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8001f14:	200c      	movs	r0, #12
 8001f16:	f7ff ff53 	bl	8001dc0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 8001f1a:	6a20      	ldr	r0, [r4, #32]
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  return msg;
}
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
    chSchReadyI(tp);
 8001f24:	f7ff ffd4 	bl	8001ed0 <chSchReadyI>
 8001f28:	e7f4      	b.n	8001f14 <chMsgSend+0x24>
 8001f2a:	bf00      	nop
 8001f2c:	20001e58 	.word	0x20001e58

08001f30 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001f30:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001f32:	7f03      	ldrb	r3, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001f34:	4311      	orrs	r1, r2
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001f36:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001f38:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001f3a:	d00a      	beq.n	8001f52 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 8001f3c:	2b0b      	cmp	r3, #11
 8001f3e:	d000      	beq.n	8001f42 <chEvtSignalI+0x12>
 8001f40:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001f42:	6a02      	ldr	r2, [r0, #32]
 8001f44:	4011      	ands	r1, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001f46:	428a      	cmp	r2, r1
 8001f48:	d1fa      	bne.n	8001f40 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	6201      	str	r1, [r0, #32]
    chSchReadyI(tp);
 8001f4e:	f7ff bfbf 	b.w	8001ed0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 8001f52:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001f54:	4219      	tst	r1, r3
 8001f56:	d1f8      	bne.n	8001f4a <chEvtSignalI+0x1a>
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	f3af 8000 	nop.w

08001f60 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001f60:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001f62:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001f64:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8001f66:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001f68:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8001f6a:	d00e      	beq.n	8001f8a <chEvtBroadcastFlagsI+0x2a>
    elp->el_flags |= flags;
 8001f6c:	68e3      	ldr	r3, [r4, #12]
 8001f6e:	ea45 0003 	orr.w	r0, r5, r3
 8001f72:	60e0      	str	r0, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0))
 8001f74:	b115      	cbz	r5, 8001f7c <chEvtBroadcastFlagsI+0x1c>
 8001f76:	6922      	ldr	r2, [r4, #16]
 8001f78:	4210      	tst	r0, r2
 8001f7a:	d003      	beq.n	8001f84 <chEvtBroadcastFlagsI+0x24>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8001f7c:	6860      	ldr	r0, [r4, #4]
 8001f7e:	68a1      	ldr	r1, [r4, #8]
 8001f80:	f7ff ffd6 	bl	8001f30 <chEvtSignalI>
    elp = elp->el_next;
 8001f84:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 8001f86:	42a6      	cmp	r6, r4
 8001f88:	d1f0      	bne.n	8001f6c <chEvtBroadcastFlagsI+0xc>
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	f3af 8000 	nop.w

08001f90 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8001f92:	b570      	push	{r4, r5, r6, lr}
 8001f94:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 8001f96:	699c      	ldr	r4, [r3, #24]
 8001f98:	f380 8811 	msr	BASEPRI, r0

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 8001f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f9e:	b1d3      	cbz	r3, 8001fd6 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8001fa0:	2600      	movs	r6, #0
 8001fa2:	e00a      	b.n	8001fba <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001fa4:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 8001fa6:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8001fa8:	6019      	str	r1, [r3, #0]
 8001faa:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 8001fac:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 8001fae:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 8001fb0:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 8001fb2:	f7ff ff8d 	bl	8001ed0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 8001fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fb8:	b14b      	cbz	r3, 8001fce <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8001fba:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8001fbc:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 8001fbe:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 8001fc0:	4610      	mov	r0, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8001fc2:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8001fc4:	d1ee      	bne.n	8001fa4 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8001fc6:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8001fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f5      	bne.n	8001fba <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 8001fce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001fd0:	60a0      	str	r0, [r4, #8]
    chSchRescheduleS();
 8001fd2:	f7ff fd6d 	bl	8001ab0 <chSchRescheduleS>
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f382 8811 	msr	BASEPRI, r2
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
 8001fde:	bf00      	nop
 8001fe0:	20001e58 	.word	0x20001e58
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	f3af 8000 	nop.w
 8001fec:	f3af 8000 	nop.w

08001ff0 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8001ff0:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	6825      	ldr	r5, [r4, #0]
  thread_t *ctp = currp;
 8001ff8:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001ffa:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001ffc:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001ffe:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002000:	d017      	beq.n	8002032 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002002:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002004:	b14b      	cbz	r3, 800201a <chMtxUnlockS+0x2a>
 8002006:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <chMtxUnlockS+0x24>
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	4291      	cmp	r1, r2
 8002010:	bf38      	it	cc
 8002012:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8002014:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f5      	bne.n	8002006 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800201a:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800201c:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800201e:	6081      	str	r1, [r0, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 8002020:	4628      	mov	r0, r5
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8002026:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8002028:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800202a:	63ac      	str	r4, [r5, #56]	; 0x38
    else
      mp->m_owner = NULL;
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 800202c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 800202e:	f7ff bf4f 	b.w	8001ed0 <chSchReadyI>
    }
    else
      mp->m_owner = NULL;
 8002032:	2100      	movs	r1, #0
 8002034:	60a1      	str	r1, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 8002036:	bc30      	pop	{r4, r5}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20001e58 	.word	0x20001e58

08002040 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8002042:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <chMtxLockS+0xc0>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8002044:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002046:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8002048:	6994      	ldr	r4, [r2, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800204a:	2b00      	cmp	r3, #0
 800204c:	d051      	beq.n	80020f2 <chMtxLockS+0xb2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800204e:	68a1      	ldr	r1, [r4, #8]
 8002050:	6898      	ldr	r0, [r3, #8]
 8002052:	4281      	cmp	r1, r0
 8002054:	d906      	bls.n	8002064 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8002056:	7f1a      	ldrb	r2, [r3, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8002058:	6099      	str	r1, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800205a:	2a06      	cmp	r2, #6
 800205c:	d031      	beq.n	80020c2 <chMtxLockS+0x82>
 800205e:	2a07      	cmp	r2, #7
 8002060:	d01c      	beq.n	800209c <chMtxLockS+0x5c>
 8002062:	b192      	cbz	r2, 800208a <chMtxLockS+0x4a>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8002064:	4628      	mov	r0, r5
  do {
    cp = cp->p_next;
 8002066:	6800      	ldr	r0, [r0, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002068:	4285      	cmp	r5, r0
 800206a:	d003      	beq.n	8002074 <chMtxLockS+0x34>
 800206c:	6883      	ldr	r3, [r0, #8]
 800206e:	68a1      	ldr	r1, [r4, #8]
 8002070:	428b      	cmp	r3, r1
 8002072:	d2f8      	bcs.n	8002066 <chMtxLockS+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002074:	6842      	ldr	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8002076:	6020      	str	r0, [r4, #0]
  tp->p_prev = cp->p_prev;
 8002078:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800207a:	6044      	str	r4, [r0, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 800207c:	2006      	movs	r0, #6
 800207e:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 8002080:	6225      	str	r5, [r4, #32]
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 8002082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8002086:	f7ff be9b 	b.w	8001dc0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800208a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800208e:	6011      	str	r1, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 8002090:	6819      	ldr	r1, [r3, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 8002092:	4618      	mov	r0, r3
 8002094:	604a      	str	r2, [r1, #4]
 8002096:	f7ff ff1b 	bl	8001ed0 <chSchReadyI>
 800209a:	e7e3      	b.n	8002064 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800209c:	6858      	ldr	r0, [r3, #4]
 800209e:	681f      	ldr	r7, [r3, #0]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 80020a0:	6a1e      	ldr	r6, [r3, #32]
 80020a2:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80020a4:	681f      	ldr	r7, [r3, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80020a6:	4632      	mov	r2, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80020a8:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80020aa:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80020ac:	4296      	cmp	r6, r2
 80020ae:	d002      	beq.n	80020b6 <chMtxLockS+0x76>
 80020b0:	6890      	ldr	r0, [r2, #8]
 80020b2:	4288      	cmp	r0, r1
 80020b4:	d2f9      	bcs.n	80020aa <chMtxLockS+0x6a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80020b6:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80020b8:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 80020ba:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80020bc:	600b      	str	r3, [r1, #0]
 80020be:	6053      	str	r3, [r2, #4]
 80020c0:	e7d0      	b.n	8002064 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80020c2:	6858      	ldr	r0, [r3, #4]
 80020c4:	681f      	ldr	r7, [r3, #0]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 80020c6:	6a1e      	ldr	r6, [r3, #32]
 80020c8:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80020ca:	681f      	ldr	r7, [r3, #0]
 80020cc:	4632      	mov	r2, r6
 80020ce:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80020d0:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80020d2:	4296      	cmp	r6, r2
 80020d4:	d012      	beq.n	80020fc <chMtxLockS+0xbc>
 80020d6:	6890      	ldr	r0, [r2, #8]
 80020d8:	4288      	cmp	r0, r1
 80020da:	d2f9      	bcs.n	80020d0 <chMtxLockS+0x90>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80020dc:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80020de:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 80020e0:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	6053      	str	r3, [r2, #4]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 80020e6:	68b3      	ldr	r3, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 80020e8:	68a1      	ldr	r1, [r4, #8]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	428a      	cmp	r2, r1
 80020ee:	d3b2      	bcc.n	8002056 <chMtxLockS+0x16>
 80020f0:	e7b8      	b.n	8002064 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 80020f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 80020f4:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 80020f6:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 80020f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80020fc:	4632      	mov	r2, r6
 80020fe:	e7ed      	b.n	80020dc <chMtxLockS+0x9c>
 8002100:	20001e58 	.word	0x20001e58
 8002104:	f3af 8000 	nop.w
 8002108:	f3af 8000 	nop.w
 800210c:	f3af 8000 	nop.w

08002110 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8002110:	b508      	push	{r3, lr}
 8002112:	2320      	movs	r3, #32
 8002114:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  chMtxLockS(mp);
 8002118:	f7ff ff92 	bl	8002040 <chMtxLockS>
 800211c:	2000      	movs	r0, #0
 800211e:	f380 8811 	msr	BASEPRI, r0
 8002122:	bd08      	pop	{r3, pc}
 8002124:	f3af 8000 	nop.w
 8002128:	f3af 8000 	nop.w
 800212c:	f3af 8000 	nop.w

08002130 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 8002132:	4c0e      	ldr	r4, [pc, #56]	; (800216c <chHeapStatus+0x3c>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 8002134:	460f      	mov	r7, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 8002136:	2800      	cmp	r0, #0
 8002138:	bf18      	it	ne
 800213a:	4604      	movne	r4, r0

  H_LOCK(heapp);
 800213c:	f104 0610 	add.w	r6, r4, #16
 8002140:	4630      	mov	r0, r6
 8002142:	f7ff ffe5 	bl	8002110 <chMtxLock>

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002146:	68a3      	ldr	r3, [r4, #8]
 8002148:	b16b      	cbz	r3, 8002166 <chHeapStatus+0x36>
 800214a:	2200      	movs	r2, #0
 800214c:	4614      	mov	r4, r2
 800214e:	cb28      	ldmia	r3, {r3, r5}
 8002150:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 8002152:	1952      	adds	r2, r2, r5
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1fa      	bne.n	800214e <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  if (sizep)
 8002158:	b107      	cbz	r7, 800215c <chHeapStatus+0x2c>
    *sizep = sz;
 800215a:	603a      	str	r2, [r7, #0]

  H_UNLOCK(heapp);
 800215c:	4630      	mov	r0, r6
 800215e:	f7ff fda7 	bl	8001cb0 <chMtxUnlock>
  return n;
}
 8002162:	4620      	mov	r0, r4
 8002164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (heapp == NULL)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
 8002166:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002168:	461c      	mov	r4, r3
 800216a:	e7f5      	b.n	8002158 <chHeapStatus+0x28>
 800216c:	20001410 	.word	0x20001410

08002170 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 8002172:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002176:	4606      	mov	r6, r0
  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
  H_LOCK(heapp);
 8002178:	f105 0710 	add.w	r7, r5, #16
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 800217c:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002180:	3508      	adds	r5, #8
  H_LOCK(heapp);
 8002182:	4638      	mov	r0, r7
 8002184:	f7ff ffc4 	bl	8002110 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002188:	462b      	mov	r3, r5
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800218a:	42ab      	cmp	r3, r5
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800218c:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800218e:	d001      	beq.n	8002194 <chHeapFree+0x24>
 8002190:	42a3      	cmp	r3, r4
 8002192:	d202      	bcs.n	800219a <chHeapFree+0x2a>
 8002194:	b11a      	cbz	r2, 800219e <chHeapFree+0x2e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002196:	4294      	cmp	r4, r2
 8002198:	d301      	bcc.n	800219e <chHeapFree+0x2e>
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
 800219a:	4613      	mov	r3, r2
 800219c:	e7f5      	b.n	800218a <chHeapFree+0x1a>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800219e:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 80021a2:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 80021a6:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 80021a8:	f101 0208 	add.w	r2, r1, #8
 80021ac:	f856 5c08 	ldr.w	r5, [r6, #-8]
 80021b0:	18a0      	adds	r0, r4, r2
 80021b2:	42a8      	cmp	r0, r5
 80021b4:	d00a      	beq.n	80021cc <chHeapFree+0x5c>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	f102 0008 	add.w	r0, r2, #8
 80021bc:	1819      	adds	r1, r3, r0
 80021be:	428c      	cmp	r4, r1
 80021c0:	d012      	beq.n	80021e8 <chHeapFree+0x78>
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 80021c2:	4638      	mov	r0, r7
  return;
}
 80021c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 80021c8:	f7ff bd72 	b.w	8001cb0 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80021cc:	6840      	ldr	r0, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 80021ce:	58a2      	ldr	r2, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 80021d0:	1809      	adds	r1, r1, r0
 80021d2:	3108      	adds	r1, #8
 80021d4:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 80021d8:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	f102 0008 	add.w	r0, r2, #8
 80021e2:	1819      	adds	r1, r3, r0
 80021e4:	428c      	cmp	r4, r1
 80021e6:	d1ec      	bne.n	80021c2 <chHeapFree+0x52>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80021e8:	f856 0c04 	ldr.w	r0, [r6, #-4]
        qp->h.u.next = hp->h.u.next;
 80021ec:	f856 1c08 	ldr.w	r1, [r6, #-8]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 80021f0:	1812      	adds	r2, r2, r0
 80021f2:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 80021f4:	e883 0006 	stmia.w	r3, {r1, r2}
 80021f8:	e7e3      	b.n	80021c2 <chHeapFree+0x52>
 80021fa:	bf00      	nop
 80021fc:	f3af 8000 	nop.w

08002200 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 8002200:	b430      	push	{r4, r5}
 8002202:	4603      	mov	r3, r0
 8002204:	2120      	movs	r1, #32
 8002206:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 800220a:	7f82      	ldrb	r2, [r0, #30]
 800220c:	1e54      	subs	r4, r2, #1
 800220e:	b2e2      	uxtb	r2, r4
 8002210:	7782      	strb	r2, [r0, #30]
 8002212:	2400      	movs	r4, #0
 8002214:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 8002218:	b912      	cbnz	r2, 8002220 <chThdRelease+0x20>
 800221a:	7f04      	ldrb	r4, [r0, #28]
 800221c:	2c0f      	cmp	r4, #15
 800221e:	d001      	beq.n	8002224 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8002220:	bc30      	pop	{r4, r5}
 8002222:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8002224:	7f44      	ldrb	r4, [r0, #29]
 8002226:	f004 0403 	and.w	r4, r4, #3
 800222a:	2c01      	cmp	r4, #1
 800222c:	d00f      	beq.n	800224e <chThdRelease+0x4e>
 800222e:	2c02      	cmp	r4, #2
 8002230:	d1f6      	bne.n	8002220 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8002232:	6944      	ldr	r4, [r0, #20]
 8002234:	6905      	ldr	r5, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 8002236:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 8002238:	6125      	str	r5, [r4, #16]
 800223a:	691d      	ldr	r5, [r3, #16]
 800223c:	616c      	str	r4, [r5, #20]
 800223e:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8002242:	6801      	ldr	r1, [r0, #0]
 8002244:	6019      	str	r1, [r3, #0]
  mp->mp_next = php;
 8002246:	6003      	str	r3, [r0, #0]
 8002248:	f382 8811 	msr	BASEPRI, r2
 800224c:	e7e8      	b.n	8002220 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 800224e:	6942      	ldr	r2, [r0, #20]
 8002250:	6901      	ldr	r1, [r0, #16]
 8002252:	6111      	str	r1, [r2, #16]
 8002254:	6903      	ldr	r3, [r0, #16]
 8002256:	615a      	str	r2, [r3, #20]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 8002258:	bc30      	pop	{r4, r5}
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
#endif
      chHeapFree(tp);
 800225a:	f7ff bf89 	b.w	8002170 <chHeapFree>
 800225e:	bf00      	nop

08002260 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4604      	mov	r4, r0
 8002264:	2320      	movs	r3, #32
 8002266:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800226a:	7f00      	ldrb	r0, [r0, #28]
 800226c:	280f      	cmp	r0, #15
 800226e:	d007      	beq.n	8002280 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8002270:	4908      	ldr	r1, [pc, #32]	; (8002294 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8002272:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002274:	698d      	ldr	r5, [r1, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8002276:	2009      	movs	r0, #9
 8002278:	602a      	str	r2, [r5, #0]
  tlp->p_next = tp;
 800227a:	6265      	str	r5, [r4, #36]	; 0x24
 800227c:	f7ff fda0 	bl	8001dc0 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8002280:	6a25      	ldr	r5, [r4, #32]
 8002282:	2300      	movs	r3, #0
 8002284:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff ffb9 	bl	8002200 <chThdRelease>
#endif
  return msg;
}
 800228e:	4628      	mov	r0, r5
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	bf00      	nop
 8002294:	20001e58 	.word	0x20001e58
 8002298:	f3af 8000 	nop.w
 800229c:	f3af 8000 	nop.w

080022a0 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 80022a0:	b510      	push	{r4, lr}
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80022a2:	4c12      	ldr	r4, [pc, #72]	; (80022ec <test_wait_threads+0x4c>)
 80022a4:	6820      	ldr	r0, [r4, #0]
 80022a6:	b118      	cbz	r0, 80022b0 <test_wait_threads+0x10>
      chThdWait(threads[i]);
 80022a8:	f7ff ffda 	bl	8002260 <chThdWait>
      threads[i] = NULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	6023      	str	r3, [r4, #0]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80022b0:	6860      	ldr	r0, [r4, #4]
 80022b2:	b120      	cbz	r0, 80022be <test_wait_threads+0x1e>
      chThdWait(threads[i]);
 80022b4:	f7ff ffd4 	bl	8002260 <chThdWait>
      threads[i] = NULL;
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <test_wait_threads+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	6042      	str	r2, [r0, #4]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80022be:	68a0      	ldr	r0, [r4, #8]
 80022c0:	b120      	cbz	r0, 80022cc <test_wait_threads+0x2c>
      chThdWait(threads[i]);
 80022c2:	f7ff ffcd 	bl	8002260 <chThdWait>
      threads[i] = NULL;
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <test_wait_threads+0x4c>)
 80022c8:	2100      	movs	r1, #0
 80022ca:	6099      	str	r1, [r3, #8]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80022cc:	68e0      	ldr	r0, [r4, #12]
 80022ce:	b120      	cbz	r0, 80022da <test_wait_threads+0x3a>
      chThdWait(threads[i]);
 80022d0:	f7ff ffc6 	bl	8002260 <chThdWait>
      threads[i] = NULL;
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <test_wait_threads+0x4c>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60c2      	str	r2, [r0, #12]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 80022da:	6920      	ldr	r0, [r4, #16]
 80022dc:	b120      	cbz	r0, 80022e8 <test_wait_threads+0x48>
      chThdWait(threads[i]);
 80022de:	f7ff ffbf 	bl	8002260 <chThdWait>
      threads[i] = NULL;
 80022e2:	4b02      	ldr	r3, [pc, #8]	; (80022ec <test_wait_threads+0x4c>)
 80022e4:	2100      	movs	r1, #0
 80022e6:	6119      	str	r1, [r3, #16]
 80022e8:	bd10      	pop	{r4, pc}
 80022ea:	bf00      	nop
 80022ec:	20001fa8 	.word	0x20001fa8

080022f0 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 80022f0:	b510      	push	{r4, lr}
 80022f2:	2320      	movs	r3, #32
 80022f4:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
 80022f8:	4907      	ldr	r1, [pc, #28]	; (8002318 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 80022fa:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist)
 80022fc:	428c      	cmp	r4, r1
 80022fe:	d009      	beq.n	8002314 <chRegNextThread+0x24>
    ntp = NULL;
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8002300:	7fa2      	ldrb	r2, [r4, #30]
 8002302:	1c53      	adds	r3, r2, #1
 8002304:	77a3      	strb	r3, [r4, #30]
 8002306:	2100      	movs	r1, #0
 8002308:	f381 8811 	msr	BASEPRI, r1
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 800230c:	f7ff ff78 	bl	8002200 <chThdRelease>
#endif
  return ntp;
}
 8002310:	4620      	mov	r0, r4
 8002312:	bd10      	pop	{r4, pc}
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
    ntp = NULL;
 8002314:	2400      	movs	r4, #0
 8002316:	e7f6      	b.n	8002306 <chRegNextThread+0x16>
 8002318:	20001e58 	.word	0x20001e58
 800231c:	f3af 8000 	nop.w

08002320 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8002322:	4e22      	ldr	r6, [pc, #136]	; (80023ac <chHeapAlloc+0x8c>)

  size = MEM_ALIGN_NEXT(size);
 8002324:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8002326:	2800      	cmp	r0, #0
 8002328:	bf18      	it	ne
 800232a:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);
 800232c:	f106 0710 	add.w	r7, r6, #16
 8002330:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 8002332:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8002336:	f106 0408 	add.w	r4, r6, #8
  H_LOCK(heapp);
 800233a:	f7ff fee9 	bl	8002110 <chMtxLock>
 800233e:	e000      	b.n	8002342 <chHeapAlloc+0x22>

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002340:	461c      	mov	r4, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
 8002342:	6823      	ldr	r3, [r4, #0]
 8002344:	b303      	cbz	r3, 8002388 <chHeapAlloc+0x68>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4295      	cmp	r5, r2
 800234a:	d8f9      	bhi.n	8002340 <chHeapAlloc+0x20>
      if (hp->h.size < size + sizeof(union heap_header)) {
 800234c:	f105 0108 	add.w	r1, r5, #8
 8002350:	4291      	cmp	r1, r2
 8002352:	d816      	bhi.n	8002382 <chHeapAlloc+0x62>
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 8002354:	f64f 7ef8 	movw	lr, #65528	; 0xfff8
 8002358:	f6cf 7eff 	movt	lr, #65535	; 0xffff
 800235c:	ebc5 0c0e 	rsb	ip, r5, lr
 8002360:	eb0c 0e02 	add.w	lr, ip, r2
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 8002364:	681a      	ldr	r2, [r3, #0]
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 8002366:	1858      	adds	r0, r3, r1
        fp->h.u.next = hp->h.u.next;
 8002368:	505a      	str	r2, [r3, r1]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 800236a:	f8c0 e004 	str.w	lr, [r0, #4]
        qp->h.u.next = fp;
 800236e:	6020      	str	r0, [r4, #0]
        hp->h.size = size;
 8002370:	605d      	str	r5, [r3, #4]
      }
      hp->h.u.heap = heapp;
 8002372:	461c      	mov	r4, r3
 8002374:	f844 6b08 	str.w	r6, [r4], #8

      H_UNLOCK(heapp);
 8002378:	4638      	mov	r0, r7
 800237a:	f7ff fc99 	bl	8001cb0 <chMtxUnlock>
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 800237e:	4620      	mov	r0, r4
 8002380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	6021      	str	r1, [r4, #0]
 8002386:	e7f4      	b.n	8002372 <chHeapAlloc+0x52>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
 8002388:	4638      	mov	r0, r7
 800238a:	f7ff fc91 	bl	8001cb0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 800238e:	6832      	ldr	r2, [r6, #0]
 8002390:	b14a      	cbz	r2, 80023a6 <chHeapAlloc+0x86>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 8002392:	f105 0008 	add.w	r0, r5, #8
 8002396:	4790      	blx	r2
    if (hp != NULL) {
 8002398:	b128      	cbz	r0, 80023a6 <chHeapAlloc+0x86>
      hp->h.u.heap = heapp;
      hp->h.size = size;
      hp++;
      return (void *)hp;
 800239a:	f100 0408 	add.w	r4, r0, #8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 800239e:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 80023a0:	6045      	str	r5, [r0, #4]
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 80023a2:	4620      	mov	r0, r4
 80023a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hp->h.size = size;
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
 80023a6:	2400      	movs	r4, #0
 80023a8:	e7e9      	b.n	800237e <chHeapAlloc+0x5e>
 80023aa:	bf00      	nop
 80023ac:	20001410 	.word	0x20001410

080023b0 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b083      	sub	sp, #12
 80023b4:	460d      	mov	r5, r1
 80023b6:	4617      	mov	r7, r2
 80023b8:	461e      	mov	r6, r3
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 80023ba:	f7ff ffb1 	bl	8002320 <chHeapAlloc>
  if (wsp == NULL)
 80023be:	4604      	mov	r4, r0
 80023c0:	b190      	cbz	r0, 80023e8 <chThdCreateFromHeap+0x38>
 80023c2:	2320      	movs	r3, #32
 80023c4:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 80023c8:	9c08      	ldr	r4, [sp, #32]
 80023ca:	4629      	mov	r1, r5
 80023cc:	463a      	mov	r2, r7
 80023ce:	4633      	mov	r3, r6
 80023d0:	9400      	str	r4, [sp, #0]
 80023d2:	f7ff fb15 	bl	8001a00 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 80023d6:	2101      	movs	r1, #1
 80023d8:	7741      	strb	r1, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 80023da:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 80023dc:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 80023de:	f7ff fc37 	bl	8001c50 <chSchWakeupS>
 80023e2:	2000      	movs	r0, #0
 80023e4:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return tp;
}
 80023e8:	4620      	mov	r0, r4
 80023ea:	b003      	add	sp, #12
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ee:	bf00      	nop

080023f0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 80023f0:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 80023f2:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 80023f4:	1c50      	adds	r0, r2, #1
 80023f6:	2800      	cmp	r0, #0
 80023f8:	6098      	str	r0, [r3, #8]
 80023fa:	dd00      	ble.n	80023fe <chSemSignalI+0xe>
 80023fc:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80023fe:	681a      	ldr	r2, [r3, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002400:	6811      	ldr	r1, [r2, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8002402:	4610      	mov	r0, r2
 8002404:	6019      	str	r1, [r3, #0]
 8002406:	604b      	str	r3, [r1, #4]

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	6213      	str	r3, [r2, #32]
    chSchReadyI(tp);
 800240c:	f7ff bd60 	b.w	8001ed0 <chSchReadyI>

08002410 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8002412:	6885      	ldr	r5, [r0, #8]
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002414:	4604      	mov	r4, r0
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002416:	3501      	adds	r5, #1
 8002418:	2d00      	cmp	r5, #0
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
 800241a:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0)
 800241c:	dc29      	bgt.n	8002472 <chSemResetI+0x62>
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 800241e:	6840      	ldr	r0, [r0, #4]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002420:	f06f 0701 	mvn.w	r7, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002424:	6843      	ldr	r3, [r0, #4]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002426:	1c6e      	adds	r6, r5, #1
 8002428:	6063      	str	r3, [r4, #4]
 800242a:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800242c:	f7ff fd50 	bl	8001ed0 <chSchReadyI>
 8002430:	f005 0101 	and.w	r1, r5, #1
 8002434:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002436:	b1ed      	cbz	r5, 8002474 <chSemResetI+0x64>
 8002438:	b149      	cbz	r1, 800244e <chSemResetI+0x3e>
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 800243a:	6860      	ldr	r0, [r4, #4]
 800243c:	3601      	adds	r6, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 800243e:	6842      	ldr	r2, [r0, #4]
 8002440:	6062      	str	r2, [r4, #4]
 8002442:	6014      	str	r4, [r2, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002444:	f7ff fd44 	bl	8001ed0 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002448:	2e01      	cmp	r6, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800244a:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 800244c:	d013      	beq.n	8002476 <chSemResetI+0x66>
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 800244e:	6860      	ldr	r0, [r4, #4]
 8002450:	1c75      	adds	r5, r6, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002452:	6843      	ldr	r3, [r0, #4]
 8002454:	3602      	adds	r6, #2
 8002456:	6063      	str	r3, [r4, #4]
 8002458:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 800245a:	f7ff fd39 	bl	8001ed0 <chSchReadyI>
 800245e:	6207      	str	r7, [r0, #32]
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002460:	6860      	ldr	r0, [r4, #4]

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002462:	6841      	ldr	r1, [r0, #4]
 8002464:	6061      	str	r1, [r4, #4]
 8002466:	600c      	str	r4, [r1, #0]
 8002468:	f7ff fd32 	bl	8001ed0 <chSchReadyI>
 800246c:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 800246e:	2d00      	cmp	r5, #0
 8002470:	d1ed      	bne.n	800244e <chSemResetI+0x3e>
 8002472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002478:	f3af 8000 	nop.w
 800247c:	f3af 8000 	nop.w

08002480 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002480:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <chThdExitS+0x3c>)
 8002484:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002486:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002488:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800248c:	428d      	cmp	r5, r1
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 800248e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002490:	d007      	beq.n	80024a2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8002492:	680a      	ldr	r2, [r1, #0]
    chSchReadyI(list_remove(&tp->p_waiting));
 8002494:	4608      	mov	r0, r1
 8002496:	6262      	str	r2, [r4, #36]	; 0x24
 8002498:	f7ff fd1a 	bl	8001ed0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800249c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 800249e:	42a9      	cmp	r1, r5
 80024a0:	d1f7      	bne.n	8002492 <chThdExitS+0x12>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
 80024a2:	7f60      	ldrb	r0, [r4, #29]
 80024a4:	0783      	lsls	r3, r0, #30
 80024a6:	d104      	bne.n	80024b2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80024a8:	6963      	ldr	r3, [r4, #20]
 80024aa:	6922      	ldr	r2, [r4, #16]
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	6921      	ldr	r1, [r4, #16]
 80024b0:	614b      	str	r3, [r1, #20]
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80024b2:	200f      	movs	r0, #15
  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80024b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80024b8:	f7ff bc82 	b.w	8001dc0 <chSchGoSleepS>
 80024bc:	20001e58 	.word	0x20001e58

080024c0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80024c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <chTMStopMeasurementX+0x44>)
 80024ca:	6859      	ldr	r1, [r3, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80024cc:	b430      	push	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 80024ce:	6884      	ldr	r4, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80024d0:	6f13      	ldr	r3, [r2, #112]	; 0x70

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80024d2:	68c5      	ldr	r5, [r0, #12]
  tmp->last = now - tmp->last - offset;
 80024d4:	1b09      	subs	r1, r1, r4
 80024d6:	1ac9      	subs	r1, r1, r3
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 80024d8:	6844      	ldr	r4, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80024da:	e9d0 2304 	ldrd	r2, r3, [r0, #16]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80024de:	3501      	adds	r5, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80024e0:	1852      	adds	r2, r2, r1
 80024e2:	f143 0300 	adc.w	r3, r3, #0
  if (tmp->last > tmp->worst)
 80024e6:	42a1      	cmp	r1, r4

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80024e8:	60c5      	str	r5, [r0, #12]
  tmp->last = now - tmp->last - offset;
 80024ea:	6081      	str	r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80024ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
  if (tmp->last > tmp->worst)
 80024f0:	d805      	bhi.n	80024fe <chTMStopMeasurementX+0x3e>
    tmp->worst = tmp->last;
  else if (tmp->last < tmp->best)
 80024f2:	6802      	ldr	r2, [r0, #0]
 80024f4:	4291      	cmp	r1, r2
    tmp->best = tmp->last;
 80024f6:	bf38      	it	cc
 80024f8:	6001      	strcc	r1, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80024fa:	bc30      	pop	{r4, r5}
 80024fc:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
    tmp->worst = tmp->last;
 80024fe:	6041      	str	r1, [r0, #4]
 8002500:	e7fb      	b.n	80024fa <chTMStopMeasurementX+0x3a>
 8002502:	bf00      	nop
 8002504:	20001e58 	.word	0x20001e58
 8002508:	f3af 8000 	nop.w
 800250c:	f3af 8000 	nop.w

08002510 <chTMStartMeasurementX>:
 8002510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002514:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002518:	6859      	ldr	r1, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800251a:	6081      	str	r1, [r0, #8]
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop

08002520 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8002520:	e7fe      	b.n	8002520 <BusFault_Handler>
 8002522:	bf00      	nop
 8002524:	f3af 8000 	nop.w
 8002528:	f3af 8000 	nop.w
 800252c:	f3af 8000 	nop.w

08002530 <chOQGetI.constprop.26.4170>:
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <chOQGetI.constprop.26.4170+0x4c>)
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8002532:	b510      	push	{r4, lr}
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	6959      	ldr	r1, [r3, #20]
 8002538:	6898      	ldr	r0, [r3, #8]
 800253a:	4291      	cmp	r1, r2
 800253c:	d018      	beq.n	8002570 <chOQGetI.constprop.26.4170+0x40>
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 800253e:	1c44      	adds	r4, r0, #1
 8002540:	609c      	str	r4, [r3, #8]
  b = *oqp->q_rdptr++;
 8002542:	f812 4b01 	ldrb.w	r4, [r2], #1
  if (oqp->q_rdptr >= oqp->q_top)
 8002546:	6918      	ldr	r0, [r3, #16]

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8002548:	619a      	str	r2, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top)
 800254a:	4282      	cmp	r2, r0
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 800254c:	490b      	ldr	r1, [pc, #44]	; (800257c <chOQGetI.constprop.26.4170+0x4c>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 800254e:	d20c      	bcs.n	800256a <chOQGetI.constprop.26.4170+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <chOQGetI.constprop.26.4170+0x4c>)
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8002554:	4298      	cmp	r0, r3
 8002556:	d006      	beq.n	8002566 <chOQGetI.constprop.26.4170+0x36>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002558:	6803      	ldr	r3, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800255a:	2100      	movs	r1, #0
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	6201      	str	r1, [r0, #32]
 8002560:	6013      	str	r3, [r2, #0]
  chSchReadyI(tp);
 8002562:	f7ff fcb5 	bl	8001ed0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 8002566:	4620      	mov	r0, r4
 8002568:	bd10      	pop	{r4, pc}
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
    oqp->q_rdptr = oqp->q_buffer;
 800256a:	68ca      	ldr	r2, [r1, #12]
 800256c:	618a      	str	r2, [r1, #24]
 800256e:	e7ef      	b.n	8002550 <chOQGetI.constprop.26.4170+0x20>
 8002570:	2800      	cmp	r0, #0
 8002572:	d0e4      	beq.n	800253e <chOQGetI.constprop.26.4170+0xe>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;
 8002574:	f06f 0002 	mvn.w	r0, #2
 8002578:	bd10      	pop	{r4, pc}
 800257a:	bf00      	nop
 800257c:	20000c64 	.word	0x20000c64

08002580 <thread2.7700>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	2520      	movs	r5, #32
 8002584:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8002588:	f640 404c 	movw	r0, #3148	; 0xc4c
 800258c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002590:	2100      	movs	r1, #0
 8002592:	f7ff fce5 	bl	8001f60 <chEvtBroadcastFlagsI>
 8002596:	2400      	movs	r4, #0
  chSchRescheduleS();
 8002598:	f7ff fa8a 	bl	8001ab0 <chSchRescheduleS>
 800259c:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f004 fd85 	bl	80070b0 <chThdSleep>
 80025a6:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80025aa:	f640 405c 	movw	r0, #3164	; 0xc5c
 80025ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80025b2:	4621      	mov	r1, r4
 80025b4:	f7ff fcd4 	bl	8001f60 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80025b8:	f7ff fa7a 	bl	8001ab0 <chSchRescheduleS>
 80025bc:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 80025c0:	4620      	mov	r0, r4
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
 80025c4:	f3af 8000 	nop.w
 80025c8:	f3af 8000 	nop.w
 80025cc:	f3af 8000 	nop.w

080025d0 <mtx5_execute.7301>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 80025d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80025d4:	4d3b      	ldr	r5, [pc, #236]	; (80026c4 <mtx5_execute.7301+0xf4>)
 80025d6:	2020      	movs	r0, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80025d8:	69ab      	ldr	r3, [r5, #24]
 80025da:	689e      	ldr	r6, [r3, #8]
 80025dc:	f380 8811 	msr	BASEPRI, r0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 80025e0:	4c39      	ldr	r4, [pc, #228]	; (80026c8 <mtx5_execute.7301+0xf8>)
 80025e2:	68a1      	ldr	r1, [r4, #8]
 80025e4:	2900      	cmp	r1, #0
 80025e6:	d060      	beq.n	80026aa <mtx5_execute.7301+0xda>
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 80025e8:	2100      	movs	r1, #0
 80025ea:	2000      	movs	r0, #0
 80025ec:	f380 8811 	msr	BASEPRI, r0
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff f8f5 	bl	80017e0 <_test_assert>
 80025f6:	b108      	cbz	r0, 80025fc <mtx5_execute.7301+0x2c>
 80025f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025fc:	2720      	movs	r7, #32
 80025fe:	f387 8811 	msr	BASEPRI, r7
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8002602:	68a1      	ldr	r1, [r4, #8]
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <mtx5_execute.7301+0xf8>)
 8002606:	2900      	cmp	r1, #0
 8002608:	d056      	beq.n	80026b8 <mtx5_execute.7301+0xe8>
 800260a:	2101      	movs	r1, #1
 800260c:	2700      	movs	r7, #0
 800260e:	f387 8811 	msr	BASEPRI, r7

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff f8e4 	bl	80017e0 <_test_assert>
 8002618:	4607      	mov	r7, r0
 800261a:	2800      	cmp	r0, #0
 800261c:	d1ec      	bne.n	80025f8 <mtx5_execute.7301+0x28>
 800261e:	2120      	movs	r1, #32
 8002620:	f381 8811 	msr	BASEPRI, r1

  chSysLock();
  chMtxUnlockS(&m1);
 8002624:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80026c8 <mtx5_execute.7301+0xf8>
 8002628:	4640      	mov	r0, r8
 800262a:	f7ff fce1 	bl	8001ff0 <chMtxUnlockS>
 800262e:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8002632:	6823      	ldr	r3, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8002634:	2003      	movs	r0, #3
 8002636:	ebb3 0e04 	subs.w	lr, r3, r4
 800263a:	f1de 0200 	rsbs	r2, lr, #0
 800263e:	eb52 010e 	adcs.w	r1, r2, lr
 8002642:	f7ff f8cd 	bl	80017e0 <_test_assert>
 8002646:	2800      	cmp	r0, #0
 8002648:	d1d6      	bne.n	80025f8 <mtx5_execute.7301+0x28>
  test_assert(4, m1.m_owner == NULL, "still owned");
 800264a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800264e:	2004      	movs	r0, #4
 8002650:	f1d1 0101 	rsbs	r1, r1, #1
 8002654:	bf38      	it	cc
 8002656:	2100      	movcc	r1, #0
 8002658:	f7ff f8c2 	bl	80017e0 <_test_assert>
 800265c:	2800      	cmp	r0, #0
 800265e:	d1cb      	bne.n	80025f8 <mtx5_execute.7301+0x28>
 8002660:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8002662:	2005      	movs	r0, #5
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	1ab3      	subs	r3, r6, r2
 8002668:	4259      	negs	r1, r3
 800266a:	4159      	adcs	r1, r3
 800266c:	f7ff f8b8 	bl	80017e0 <_test_assert>
 8002670:	2800      	cmp	r0, #0
 8002672:	d1c1      	bne.n	80025f8 <mtx5_execute.7301+0x28>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8002674:	4640      	mov	r0, r8
 8002676:	f7ff fd4b 	bl	8002110 <chMtxLock>
  chMtxUnlockAll();
 800267a:	f7ff fc89 	bl	8001f90 <chMtxUnlockAll>
 800267e:	f8d8 2000 	ldr.w	r2, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8002682:	2006      	movs	r0, #6
 8002684:	ebb2 0308 	subs.w	r3, r2, r8
 8002688:	4259      	negs	r1, r3
 800268a:	4159      	adcs	r1, r3
 800268c:	f7ff f8a8 	bl	80017e0 <_test_assert>
 8002690:	2800      	cmp	r0, #0
 8002692:	d1b1      	bne.n	80025f8 <mtx5_execute.7301+0x28>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8002694:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002698:	2007      	movs	r0, #7
 800269a:	f1d2 0101 	rsbs	r1, r2, #1
 800269e:	bf38      	it	cc
 80026a0:	2100      	movcc	r1, #0
}
 80026a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 80026a6:	f7ff b89b 	b.w	80017e0 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80026aa:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 80026ac:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 80026ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80026b0:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 80026b2:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 80026b4:	639c      	str	r4, [r3, #56]	; 0x38
 80026b6:	e798      	b.n	80025ea <mtx5_execute.7301+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80026b8:	69aa      	ldr	r2, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 80026ba:	6b90      	ldr	r0, [r2, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 80026bc:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 80026be:	60d8      	str	r0, [r3, #12]
  currp->p_mtxlist = mp;
 80026c0:	6393      	str	r3, [r2, #56]	; 0x38
 80026c2:	e7a3      	b.n	800260c <mtx5_execute.7301+0x3c>
 80026c4:	20001e58 	.word	0x20001e58
 80026c8:	20000800 	.word	0x20000800
 80026cc:	f3af 8000 	nop.w

080026d0 <queues2_execute.8268>:
  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
  return 0;
}

static void queues2_execute(void) {
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	2320      	movs	r3, #32
 80026d4:	b083      	sub	sp, #12
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	4d9d      	ldr	r5, [pc, #628]	; (8002950 <queues2_execute.8268+0x280>)
 80026dc:	696a      	ldr	r2, [r5, #20]
 80026de:	69a8      	ldr	r0, [r5, #24]
 80026e0:	4282      	cmp	r2, r0
 80026e2:	f000 8082 	beq.w	80027ea <queues2_execute.8268+0x11a>
 80026e6:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff f879 	bl	80017e0 <_test_assert>
 80026ee:	4607      	mov	r7, r0
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d159      	bne.n	80027a8 <queues2_execute.8268+0xd8>
 80026f4:	f380 8811 	msr	BASEPRI, r0
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 80026f8:	4c95      	ldr	r4, [pc, #596]	; (8002950 <queues2_execute.8268+0x280>)
 80026fa:	2141      	movs	r1, #65	; 0x41
 80026fc:	4620      	mov	r0, r4
 80026fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002702:	f002 fc3d 	bl	8004f80 <chOQPutTimeout>
 8002706:	2142      	movs	r1, #66	; 0x42
 8002708:	4620      	mov	r0, r4
 800270a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800270e:	f002 fc37 	bl	8004f80 <chOQPutTimeout>
 8002712:	2143      	movs	r1, #67	; 0x43
 8002714:	4620      	mov	r0, r4
 8002716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271a:	f002 fc31 	bl	8004f80 <chOQPutTimeout>
 800271e:	4620      	mov	r0, r4
 8002720:	2144      	movs	r1, #68	; 0x44
 8002722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002726:	f002 fc2b 	bl	8004f80 <chOQPutTimeout>
 800272a:	2620      	movs	r6, #32
 800272c:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8002730:	68ad      	ldr	r5, [r5, #8]

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8002732:	2002      	movs	r0, #2
 8002734:	f1d5 0101 	rsbs	r1, r5, #1
 8002738:	bf38      	it	cc
 800273a:	2100      	movcc	r1, #0
 800273c:	f7ff f850 	bl	80017e0 <_test_assert>
 8002740:	4605      	mov	r5, r0
 8002742:	2800      	cmp	r0, #0
 8002744:	d135      	bne.n	80027b2 <queues2_execute.8268+0xe2>
 8002746:	f380 8811 	msr	BASEPRI, r0
 800274a:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 800274e:	f7ff feef 	bl	8002530 <chOQGetI.constprop.26.4170>
 8002752:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 8002756:	b2c0      	uxtb	r0, r0
 8002758:	f7ff f85a 	bl	8001810 <test_emit_token>
 800275c:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8002760:	f7ff fee6 	bl	8002530 <chOQGetI.constprop.26.4170>
 8002764:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 8002768:	b2c0      	uxtb	r0, r0
 800276a:	f7ff f851 	bl	8001810 <test_emit_token>
 800276e:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8002772:	f7ff fedd 	bl	8002530 <chOQGetI.constprop.26.4170>
 8002776:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 800277a:	b2c0      	uxtb	r0, r0
 800277c:	f7ff f848 	bl	8001810 <test_emit_token>
 8002780:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 8002784:	f7ff fed4 	bl	8002530 <chOQGetI.constprop.26.4170>
 8002788:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 800278c:	b2c0      	uxtb	r0, r0
 800278e:	f7ff f83f 	bl	8001810 <test_emit_token>
 8002792:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 8002796:	6962      	ldr	r2, [r4, #20]
 8002798:	69a3      	ldr	r3, [r4, #24]
 800279a:	429a      	cmp	r2, r3
 800279c:	d02a      	beq.n	80027f4 <queues2_execute.8268+0x124>
 800279e:	4629      	mov	r1, r5
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 80027a0:	2003      	movs	r0, #3
 80027a2:	f7ff f81d 	bl	80017e0 <_test_assert>
 80027a6:	b138      	cbz	r0, 80027b8 <queues2_execute.8268+0xe8>
 80027a8:	2200      	movs	r2, #0
 80027aa:	f382 8811 	msr	BASEPRI, r2
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80027ae:	b003      	add	sp, #12
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b2:	f387 8811 	msr	BASEPRI, r7
 80027b6:	e7fa      	b.n	80027ae <queues2_execute.8268+0xde>
 80027b8:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 80027bc:	2004      	movs	r0, #4
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <queues2_execute.8268+0x284>)
 80027c0:	f7fe ffc6 	bl	8001750 <_test_assert_sequence>
 80027c4:	4604      	mov	r4, r0
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d1f1      	bne.n	80027ae <queues2_execute.8268+0xde>
 80027ca:	2520      	movs	r5, #32
 80027cc:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 80027d0:	f7ff feae 	bl	8002530 <chOQGetI.constprop.26.4170>
 80027d4:	3003      	adds	r0, #3
 80027d6:	bf14      	ite	ne
 80027d8:	2100      	movne	r1, #0
 80027da:	2101      	moveq	r1, #1
 80027dc:	2005      	movs	r0, #5
 80027de:	f7fe ffff 	bl	80017e0 <_test_assert>
 80027e2:	b160      	cbz	r0, 80027fe <queues2_execute.8268+0x12e>
 80027e4:	f384 8811 	msr	BASEPRI, r4
 80027e8:	e7e1      	b.n	80027ae <queues2_execute.8268+0xde>
 80027ea:	68a9      	ldr	r1, [r5, #8]
 80027ec:	3100      	adds	r1, #0
 80027ee:	bf18      	it	ne
 80027f0:	2101      	movne	r1, #1
 80027f2:	e779      	b.n	80026e8 <queues2_execute.8268+0x18>
 80027f4:	68a0      	ldr	r0, [r4, #8]
 80027f6:	1c01      	adds	r1, r0, #0
 80027f8:	bf18      	it	ne
 80027fa:	2101      	movne	r1, #1
 80027fc:	e7d0      	b.n	80027a0 <queues2_execute.8268+0xd0>
 80027fe:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8002802:	4c53      	ldr	r4, [pc, #332]	; (8002950 <queues2_execute.8268+0x280>)
 8002804:	2208      	movs	r2, #8
 8002806:	4603      	mov	r3, r0
 8002808:	4953      	ldr	r1, [pc, #332]	; (8002958 <queues2_execute.8268+0x288>)
 800280a:	4620      	mov	r0, r4
 800280c:	f002 fc00 	bl	8005010 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8002810:	1f06      	subs	r6, r0, #4
 8002812:	4271      	negs	r1, r6
 8002814:	4171      	adcs	r1, r6
 8002816:	2006      	movs	r0, #6
 8002818:	f7fe ffe2 	bl	80017e0 <_test_assert>
 800281c:	4606      	mov	r6, r0
 800281e:	2800      	cmp	r0, #0
 8002820:	d1c5      	bne.n	80027ae <queues2_execute.8268+0xde>
 8002822:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8002826:	68a7      	ldr	r7, [r4, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8002828:	2007      	movs	r0, #7
 800282a:	f1d7 0101 	rsbs	r1, r7, #1
 800282e:	bf38      	it	cc
 8002830:	2100      	movcc	r1, #0
 8002832:	f7fe ffd5 	bl	80017e0 <_test_assert>
 8002836:	4607      	mov	r7, r0
 8002838:	b110      	cbz	r0, 8002840 <queues2_execute.8268+0x170>
 800283a:	f386 8811 	msr	BASEPRI, r6
 800283e:	e7b6      	b.n	80027ae <queues2_execute.8268+0xde>
 8002840:	f380 8811 	msr	BASEPRI, r0
 8002844:	4a45      	ldr	r2, [pc, #276]	; (800295c <queues2_execute.8268+0x28c>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8002846:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800284a:	6990      	ldr	r0, [r2, #24]
 800284c:	4b44      	ldr	r3, [pc, #272]	; (8002960 <queues2_execute.8268+0x290>)
 800284e:	6886      	ldr	r6, [r0, #8]
 8002850:	9700      	str	r7, [sp, #0]
 8002852:	1c72      	adds	r2, r6, #1
 8002854:	4843      	ldr	r0, [pc, #268]	; (8002964 <queues2_execute.8268+0x294>)
 8002856:	f7ff fa73 	bl	8001d40 <chThdCreateStatic>
 800285a:	4b43      	ldr	r3, [pc, #268]	; (8002968 <queues2_execute.8268+0x298>)
 800285c:	6018      	str	r0, [r3, #0]
 800285e:	f385 8811 	msr	BASEPRI, r5
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8002862:	6921      	ldr	r1, [r4, #16]
 8002864:	68e2      	ldr	r2, [r4, #12]
 8002866:	68a0      	ldr	r0, [r4, #8]
 8002868:	1a8e      	subs	r6, r1, r2
 800286a:	1a33      	subs	r3, r6, r0
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 800286c:	2008      	movs	r0, #8
 800286e:	f1b3 0c04 	subs.w	ip, r3, #4
 8002872:	f1dc 0100 	rsbs	r1, ip, #0
 8002876:	eb51 010c 	adcs.w	r1, r1, ip
 800287a:	f7fe ffb1 	bl	80017e0 <_test_assert>
 800287e:	4606      	mov	r6, r0
 8002880:	2800      	cmp	r0, #0
 8002882:	d196      	bne.n	80027b2 <queues2_execute.8268+0xe2>
 8002884:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8002888:	f7ff fd0a 	bl	80022a0 <test_wait_threads>
 800288c:	f385 8811 	msr	BASEPRI, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8002890:	68e3      	ldr	r3, [r4, #12]
  oqp->q_counter = chQSizeI(oqp);
 8002892:	6922      	ldr	r2, [r4, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8002894:	4620      	mov	r0, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 8002896:	1ad2      	subs	r2, r2, r3
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8002898:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 800289c:	6163      	str	r3, [r4, #20]
 800289e:	61a3      	str	r3, [r4, #24]
  oqp->q_counter = chQSizeI(oqp);
 80028a0:	60a2      	str	r2, [r4, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 80028a2:	f001 ff25 	bl	80046f0 <chThdDequeueAllI>
 80028a6:	f386 8811 	msr	BASEPRI, r6
 80028aa:	f385 8811 	msr	BASEPRI, r5
 80028ae:	6920      	ldr	r0, [r4, #16]
 80028b0:	68e1      	ldr	r1, [r4, #12]

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	1a42      	subs	r2, r0, r1
 80028b6:	2009      	movs	r0, #9
 80028b8:	ebb2 0e03 	subs.w	lr, r2, r3
 80028bc:	f1de 0100 	rsbs	r1, lr, #0
 80028c0:	eb51 010e 	adcs.w	r1, r1, lr
 80028c4:	f7fe ff8c 	bl	80017e0 <_test_assert>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d1b5      	bne.n	800283a <queues2_execute.8268+0x16a>
 80028ce:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80028d2:	2202      	movs	r2, #2
 80028d4:	4920      	ldr	r1, [pc, #128]	; (8002958 <queues2_execute.8268+0x288>)
 80028d6:	4620      	mov	r0, r4
 80028d8:	f002 fb9a 	bl	8005010 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80028dc:	3802      	subs	r0, #2
 80028de:	4243      	negs	r3, r0
 80028e0:	eb53 0100 	adcs.w	r1, r3, r0
 80028e4:	200a      	movs	r0, #10
 80028e6:	f7fe ff7b 	bl	80017e0 <_test_assert>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f47f af5e 	bne.w	80027ae <queues2_execute.8268+0xde>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 80028f2:	4919      	ldr	r1, [pc, #100]	; (8002958 <queues2_execute.8268+0x288>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	4620      	mov	r0, r4
 80028f8:	f002 fb8a 	bl	8005010 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 80028fc:	1e82      	subs	r2, r0, #2
 80028fe:	4251      	negs	r1, r2
 8002900:	4151      	adcs	r1, r2
 8002902:	200b      	movs	r0, #11
 8002904:	f7fe ff6c 	bl	80017e0 <_test_assert>
 8002908:	2800      	cmp	r0, #0
 800290a:	f47f af50 	bne.w	80027ae <queues2_execute.8268+0xde>
 800290e:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8002912:	68a3      	ldr	r3, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8002914:	200c      	movs	r0, #12
 8002916:	f1d3 0101 	rsbs	r1, r3, #1
 800291a:	bf38      	it	cc
 800291c:	2100      	movcc	r1, #0
 800291e:	f7fe ff5f 	bl	80017e0 <_test_assert>
 8002922:	2800      	cmp	r0, #0
 8002924:	f47f af40 	bne.w	80027a8 <queues2_execute.8268+0xd8>
 8002928:	2100      	movs	r1, #0
 800292a:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800292e:	220a      	movs	r2, #10
 8002930:	4807      	ldr	r0, [pc, #28]	; (8002950 <queues2_execute.8268+0x280>)
 8002932:	f002 fb25 	bl	8004f80 <chOQPutTimeout>
 8002936:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 800293a:	f1dc 0000 	rsbs	r0, ip, #0
 800293e:	eb50 010c 	adcs.w	r1, r0, ip
 8002942:	200d      	movs	r0, #13
}
 8002944:	b003      	add	sp, #12
 8002946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800294a:	f7fe bf49 	b.w	80017e0 <_test_assert>
 800294e:	bf00      	nop
 8002950:	20000c64 	.word	0x20000c64
 8002954:	08009dd0 	.word	0x08009dd0
 8002958:	20001930 	.word	0x20001930
 800295c:	20001e58 	.word	0x20001e58
 8002960:	08004fd1 	.word	0x08004fd1
 8002964:	200017e8 	.word	0x200017e8
 8002968:	20001fa8 	.word	0x20001fa8
 800296c:	f3af 8000 	nop.w

08002970 <cmd_threads.10869>:
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002970:	b5f0      	push	{r4, r5, r6, r7, lr}
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8002972:	2900      	cmp	r1, #0
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002974:	b085      	sub	sp, #20
 8002976:	4606      	mov	r6, r0
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8002978:	dd05      	ble.n	8002986 <cmd_threads.10869+0x16>
    chprintf(chp, "Usage: threads\r\n");
 800297a:	4916      	ldr	r1, [pc, #88]	; (80029d4 <cmd_threads.10869+0x64>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 800297c:	b005      	add	sp, #20
 800297e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
 8002982:	f004 bcc5 	b.w	8007310 <chprintf.10846>
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 8002986:	4914      	ldr	r1, [pc, #80]	; (80029d8 <cmd_threads.10869+0x68>)
 8002988:	f004 fcc2 	bl	8007310 <chprintf.10846>
 800298c:	2320      	movs	r3, #32
 800298e:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8002992:	4812      	ldr	r0, [pc, #72]	; (80029dc <cmd_threads.10869+0x6c>)
 8002994:	2500      	movs	r5, #0
 8002996:	6904      	ldr	r4, [r0, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8002998:	7fa1      	ldrb	r1, [r4, #30]
 800299a:	1c4a      	adds	r2, r1, #1
 800299c:	77a2      	strb	r2, [r4, #30]
 800299e:	f385 8811 	msr	BASEPRI, r5
 80029a2:	4f0f      	ldr	r7, [pc, #60]	; (80029e0 <cmd_threads.10869+0x70>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80029a4:	68a0      	ldr	r0, [r4, #8]
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	9000      	str	r0, [sp, #0]
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80029aa:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80029ac:	490d      	ldr	r1, [pc, #52]	; (80029e4 <cmd_threads.10869+0x74>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80029ae:	1e55      	subs	r5, r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80029b0:	9501      	str	r5, [sp, #4]
 80029b2:	7f20      	ldrb	r0, [r4, #28]
 80029b4:	4622      	mov	r2, r4
 80029b6:	f857 5020 	ldr.w	r5, [r7, r0, lsl #2]
 80029ba:	4630      	mov	r0, r6
 80029bc:	9502      	str	r5, [sp, #8]
 80029be:	f004 fca7 	bl	8007310 <chprintf.10846>
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff fc94 	bl	80022f0 <chRegNextThread>
  } while (tp != NULL);
 80029c8:	4604      	mov	r4, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d1ea      	bne.n	80029a4 <cmd_threads.10869+0x34>
}
 80029ce:	b005      	add	sp, #20
 80029d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08009dd8 	.word	0x08009dd8
 80029d8:	08009dec 	.word	0x08009dec
 80029dc:	20001e58 	.word	0x20001e58
 80029e0:	08009d90 	.word	0x08009d90
 80029e4:	08009e14 	.word	0x08009e14
 80029e8:	f3af 8000 	nop.w
 80029ec:	f3af 8000 	nop.w

080029f0 <silabs_tune_up>:
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 80029f0:	2900      	cmp	r1, #0
#define VCXO_FREQ 26000000UL
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
 80029f2:	b508      	push	{r3, lr}
	if (argc > 0) {
 80029f4:	dd04      	ble.n	8002a00 <silabs_tune_up+0x10>
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 80029f6:	490e      	ldr	r1, [pc, #56]	; (8002a30 <silabs_tune_up+0x40>)
		return;
	}
	Command=1;
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}
 80029f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 80029fc:	f004 bd20 	b.w	8007440 <chprintf.11382>
		return;
	}
	Command=1;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <silabs_tune_up+0x44>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	2020      	movs	r0, #32
 8002a08:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8002a0c:	480a      	ldr	r0, [pc, #40]	; (8002a38 <silabs_tune_up+0x48>)
 8002a0e:	6881      	ldr	r1, [r0, #8]
 8002a10:	2900      	cmp	r1, #0
 8002a12:	dd09      	ble.n	8002a28 <silabs_tune_up+0x38>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8002a14:	f7ff f84c 	bl	8001ab0 <chSchRescheduleS>
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f382 8811 	msr	BASEPRI, r2
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8002a1e:	4806      	ldr	r0, [pc, #24]	; (8002a38 <silabs_tune_up+0x48>)
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}
 8002a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a24:	f7ff ba04 	b.w	8001e30 <chSemWait>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8002a28:	f7ff fce2 	bl	80023f0 <chSemSignalI>
 8002a2c:	e7f2      	b.n	8002a14 <silabs_tune_up+0x24>
 8002a2e:	bf00      	nop
 8002a30:	08009e30 	.word	0x08009e30
 8002a34:	200014fc 	.word	0x200014fc
 8002a38:	20001530 	.word	0x20001530
 8002a3c:	f3af 8000 	nop.w

08002a40 <msg1_execute.7393>:
  chMsgSend(p, 'B');
  chMsgSend(p, 'C');
  return 0;
}

static void msg1_execute(void) {
 8002a40:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002a42:	f641 6358 	movw	r3, #7768	; 0x1e58
 8002a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a4a:	6998      	ldr	r0, [r3, #24]
 8002a4c:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8002a4e:	6882      	ldr	r2, [r0, #8]
 8002a50:	f645 03f1 	movw	r3, #22769	; 0x58f1
 8002a54:	9000      	str	r0, [sp, #0]
 8002a56:	f241 70e8 	movw	r0, #6120	; 0x17e8
 8002a5a:	3201      	adds	r2, #1
 8002a5c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002a60:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002a64:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a68:	f7ff f96a 	bl	8001d40 <chThdCreateStatic>
 8002a6c:	f641 71a8 	movw	r1, #8104	; 0x1fa8
 8002a70:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002a74:	6008      	str	r0, [r1, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8002a76:	f7ff f9bb 	bl	8001df0 <chMsgWait>
 8002a7a:	2520      	movs	r5, #32
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8002a7c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002a7e:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002a82:	4631      	mov	r1, r6
 8002a84:	f7ff f8e4 	bl	8001c50 <chSchWakeupS>
 8002a88:	2400      	movs	r4, #0
 8002a8a:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8002a8e:	b2f0      	uxtb	r0, r6
 8002a90:	f7fe febe 	bl	8001810 <test_emit_token>
  tp = chMsgWait();
 8002a94:	f7ff f9ac 	bl	8001df0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8002a98:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002a9a:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002a9e:	4631      	mov	r1, r6
 8002aa0:	f7ff f8d6 	bl	8001c50 <chSchWakeupS>
 8002aa4:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8002aa8:	b2f0      	uxtb	r0, r6
 8002aaa:	f7fe feb1 	bl	8001810 <test_emit_token>
  tp = chMsgWait();
 8002aae:	f7ff f99f 	bl	8001df0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 8002ab2:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8002ab4:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002ab8:	4631      	mov	r1, r6
 8002aba:	f7ff f8c9 	bl	8001c50 <chSchWakeupS>
 8002abe:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 8002ac2:	b2f0      	uxtb	r0, r6
 8002ac4:	f7fe fea4 	bl	8001810 <test_emit_token>
  test_assert_sequence(1, "ABC");
 8002ac8:	f649 6150 	movw	r1, #40528	; 0x9e50
 8002acc:	2001      	movs	r0, #1
 8002ace:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8002ad2:	b002      	add	sp, #8
 8002ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 8002ad8:	f7fe be3a 	b.w	8001750 <_test_assert_sequence>
 8002adc:	f3af 8000 	nop.w

08002ae0 <sem2_execute.7099>:
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae4:	2520      	movs	r5, #32
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	f385 8811 	msr	BASEPRI, r5
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 8002aec:	4cb3      	ldr	r4, [pc, #716]	; (8002dbc <sem2_execute.7099+0x2dc>)
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8002aee:	2100      	movs	r1, #0
 8002af0:	4620      	mov	r0, r4
 8002af2:	f001 f965 	bl	8003dc0 <chSemWaitTimeoutS>
 8002af6:	2300      	movs	r3, #0
 8002af8:	4601      	mov	r1, r0
 8002afa:	f383 8811 	msr	BASEPRI, r3
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002afe:	2001      	movs	r0, #1
 8002b00:	f1b1 32ff 	subs.w	r2, r1, #4294967295
 8002b04:	4251      	negs	r1, r2
 8002b06:	4151      	adcs	r1, r2
 8002b08:	f7fe fe6a 	bl	80017e0 <_test_assert>
 8002b0c:	b110      	cbz	r0, 8002b14 <sem2_execute.7099+0x34>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 8002b0e:	b002      	add	sp, #8
 8002b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b14:	6823      	ldr	r3, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 8002b16:	2002      	movs	r0, #2
 8002b18:	1b1a      	subs	r2, r3, r4
 8002b1a:	4251      	negs	r1, r2
 8002b1c:	4151      	adcs	r1, r2
 8002b1e:	f7fe fe5f 	bl	80017e0 <_test_assert>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d1f3      	bne.n	8002b0e <sem2_execute.7099+0x2e>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 8002b26:	68a6      	ldr	r6, [r4, #8]
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f1d6 0101 	rsbs	r1, r6, #1
 8002b2e:	bf38      	it	cc
 8002b30:	2100      	movcc	r1, #0
 8002b32:	f7fe fe55 	bl	80017e0 <_test_assert>
 8002b36:	4606      	mov	r6, r0
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d1e8      	bne.n	8002b0e <sem2_execute.7099+0x2e>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002b3c:	48a0      	ldr	r0, [pc, #640]	; (8002dc0 <sem2_execute.7099+0x2e0>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8002b3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002b42:	6987      	ldr	r7, [r0, #24]
 8002b44:	4b9f      	ldr	r3, [pc, #636]	; (8002dc4 <sem2_execute.7099+0x2e4>)
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	489f      	ldr	r0, [pc, #636]	; (8002dc8 <sem2_execute.7099+0x2e8>)
 8002b4a:	9600      	str	r6, [sp, #0]
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	f7ff f8f7 	bl	8001d40 <chThdCreateStatic>
 8002b52:	4b9e      	ldr	r3, [pc, #632]	; (8002dcc <sem2_execute.7099+0x2ec>)
 8002b54:	6018      	str	r0, [r3, #0]
 8002b56:	f385 8811 	msr	BASEPRI, r5
 8002b5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f001 f92e 	bl	8003dc0 <chSemWaitTimeoutS>
 8002b64:	4607      	mov	r7, r0
 8002b66:	f386 8811 	msr	BASEPRI, r6
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
  test_wait_threads();
 8002b6a:	f7ff fb99 	bl	80022a0 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 8002b6e:	2004      	movs	r0, #4
 8002b70:	f1d7 0101 	rsbs	r1, r7, #1
 8002b74:	bf38      	it	cc
 8002b76:	2100      	movcc	r1, #0
 8002b78:	f7fe fe32 	bl	80017e0 <_test_assert>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d1c6      	bne.n	8002b0e <sem2_execute.7099+0x2e>
 8002b80:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8002b82:	2005      	movs	r0, #5
 8002b84:	ebb1 0c04 	subs.w	ip, r1, r4
 8002b88:	f1dc 0200 	rsbs	r2, ip, #0
 8002b8c:	eb52 010c 	adcs.w	r1, r2, ip
 8002b90:	f7fe fe26 	bl	80017e0 <_test_assert>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d1ba      	bne.n	8002b0e <sem2_execute.7099+0x2e>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8002b98:	68a6      	ldr	r6, [r4, #8]
 8002b9a:	2006      	movs	r0, #6
 8002b9c:	f1d6 0101 	rsbs	r1, r6, #1
 8002ba0:	bf38      	it	cc
 8002ba2:	2100      	movcc	r1, #0
 8002ba4:	f7fe fe1c 	bl	80017e0 <_test_assert>
 8002ba8:	4606      	mov	r6, r0
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d1af      	bne.n	8002b0e <sem2_execute.7099+0x2e>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 8002bae:	f005 f83f 	bl	8007c30 <test_wait_tick>
 8002bb2:	f385 8811 	msr	BASEPRI, r5
 8002bb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bba:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8002bbe:	f386 8811 	msr	BASEPRI, r6
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8002bc2:	2041      	movs	r0, #65	; 0x41
 8002bc4:	f7fe fe24 	bl	8001810 <test_emit_token>
 8002bc8:	f385 8811 	msr	BASEPRI, r5
 8002bcc:	2164      	movs	r1, #100	; 0x64
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f001 f8f6 	bl	8003dc0 <chSemWaitTimeoutS>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f386 8811 	msr	BASEPRI, r6
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002bda:	2007      	movs	r0, #7
 8002bdc:	f1b3 3eff 	subs.w	lr, r3, #4294967295
 8002be0:	f1de 0100 	rsbs	r1, lr, #0
 8002be4:	eb51 010e 	adcs.w	r1, r1, lr
 8002be8:	f7fe fdfa 	bl	80017e0 <_test_assert>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d18e      	bne.n	8002b0e <sem2_execute.7099+0x2e>
 8002bf0:	6822      	ldr	r2, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8002bf2:	2008      	movs	r0, #8
 8002bf4:	1b13      	subs	r3, r2, r4
 8002bf6:	4259      	negs	r1, r3
 8002bf8:	4159      	adcs	r1, r3
 8002bfa:	f7fe fdf1 	bl	80017e0 <_test_assert>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d185      	bne.n	8002b0e <sem2_execute.7099+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8002c02:	68a6      	ldr	r6, [r4, #8]
 8002c04:	2009      	movs	r0, #9
 8002c06:	f1d6 0101 	rsbs	r1, r6, #1
 8002c0a:	bf38      	it	cc
 8002c0c:	2100      	movcc	r1, #0
 8002c0e:	f7fe fde7 	bl	80017e0 <_test_assert>
 8002c12:	4606      	mov	r6, r0
 8002c14:	2800      	cmp	r0, #0
 8002c16:	f47f af7a 	bne.w	8002b0e <sem2_execute.7099+0x2e>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8002c1a:	2042      	movs	r0, #66	; 0x42
 8002c1c:	f7fe fdf8 	bl	8001810 <test_emit_token>
 8002c20:	f385 8811 	msr	BASEPRI, r5
 8002c24:	2164      	movs	r1, #100	; 0x64
 8002c26:	4620      	mov	r0, r4
 8002c28:	f001 f8ca 	bl	8003dc0 <chSemWaitTimeoutS>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f386 8811 	msr	BASEPRI, r6
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002c32:	2007      	movs	r0, #7
 8002c34:	f1b2 33ff 	subs.w	r3, r2, #4294967295
 8002c38:	4259      	negs	r1, r3
 8002c3a:	4159      	adcs	r1, r3
 8002c3c:	f7fe fdd0 	bl	80017e0 <_test_assert>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	f47f af64 	bne.w	8002b0e <sem2_execute.7099+0x2e>
 8002c46:	6825      	ldr	r5, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8002c48:	2008      	movs	r0, #8
 8002c4a:	ebb5 0c04 	subs.w	ip, r5, r4
 8002c4e:	f1dc 0200 	rsbs	r2, ip, #0
 8002c52:	eb52 010c 	adcs.w	r1, r2, ip
 8002c56:	4625      	mov	r5, r4
 8002c58:	f7fe fdc2 	bl	80017e0 <_test_assert>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	f47f af56 	bne.w	8002b0e <sem2_execute.7099+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8002c62:	68a7      	ldr	r7, [r4, #8]
 8002c64:	2009      	movs	r0, #9
 8002c66:	f1d7 0101 	rsbs	r1, r7, #1
 8002c6a:	bf38      	it	cc
 8002c6c:	2100      	movcc	r1, #0
 8002c6e:	f7fe fdb7 	bl	80017e0 <_test_assert>
 8002c72:	4607      	mov	r7, r0
 8002c74:	2800      	cmp	r0, #0
 8002c76:	f47f af4a 	bne.w	8002b0e <sem2_execute.7099+0x2e>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8002c7a:	2043      	movs	r0, #67	; 0x43
 8002c7c:	f7fe fdc8 	bl	8001810 <test_emit_token>
 8002c80:	2620      	movs	r6, #32
 8002c82:	f386 8811 	msr	BASEPRI, r6
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f001 f899 	bl	8003dc0 <chSemWaitTimeoutS>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f387 8811 	msr	BASEPRI, r7
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002c94:	2007      	movs	r0, #7
 8002c96:	f1b3 3eff 	subs.w	lr, r3, #4294967295
 8002c9a:	f1de 0100 	rsbs	r1, lr, #0
 8002c9e:	eb51 010e 	adcs.w	r1, r1, lr
 8002ca2:	f7fe fd9d 	bl	80017e0 <_test_assert>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	f47f af31 	bne.w	8002b0e <sem2_execute.7099+0x2e>
 8002cac:	6822      	ldr	r2, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8002cae:	2008      	movs	r0, #8
 8002cb0:	1b13      	subs	r3, r2, r4
 8002cb2:	4259      	negs	r1, r3
 8002cb4:	4159      	adcs	r1, r3
 8002cb6:	f7fe fd93 	bl	80017e0 <_test_assert>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	f47f af27 	bne.w	8002b0e <sem2_execute.7099+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8002cc0:	68a7      	ldr	r7, [r4, #8]
 8002cc2:	2009      	movs	r0, #9
 8002cc4:	f1d7 0101 	rsbs	r1, r7, #1
 8002cc8:	bf38      	it	cc
 8002cca:	2100      	movcc	r1, #0
 8002ccc:	f7fe fd88 	bl	80017e0 <_test_assert>
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	f47f af1b 	bne.w	8002b0e <sem2_execute.7099+0x2e>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8002cd8:	2044      	movs	r0, #68	; 0x44
 8002cda:	f7fe fd99 	bl	8001810 <test_emit_token>
 8002cde:	f386 8811 	msr	BASEPRI, r6
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f001 f86b 	bl	8003dc0 <chSemWaitTimeoutS>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f387 8811 	msr	BASEPRI, r7
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002cf0:	2007      	movs	r0, #7
 8002cf2:	f1b2 33ff 	subs.w	r3, r2, #4294967295
 8002cf6:	4259      	negs	r1, r3
 8002cf8:	4159      	adcs	r1, r3
 8002cfa:	f7fe fd71 	bl	80017e0 <_test_assert>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	f47f af05 	bne.w	8002b0e <sem2_execute.7099+0x2e>
 8002d04:	6822      	ldr	r2, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8002d06:	2008      	movs	r0, #8
 8002d08:	ebb2 0c04 	subs.w	ip, r2, r4
 8002d0c:	f1dc 0300 	rsbs	r3, ip, #0
 8002d10:	eb53 010c 	adcs.w	r1, r3, ip
 8002d14:	f7fe fd64 	bl	80017e0 <_test_assert>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f47f aef8 	bne.w	8002b0e <sem2_execute.7099+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8002d1e:	68a7      	ldr	r7, [r4, #8]
 8002d20:	2009      	movs	r0, #9
 8002d22:	f1d7 0101 	rsbs	r1, r7, #1
 8002d26:	bf38      	it	cc
 8002d28:	2100      	movcc	r1, #0
 8002d2a:	f7fe fd59 	bl	80017e0 <_test_assert>
 8002d2e:	4607      	mov	r7, r0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f47f aeec 	bne.w	8002b0e <sem2_execute.7099+0x2e>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 8002d36:	2045      	movs	r0, #69	; 0x45
 8002d38:	f7fe fd6a 	bl	8001810 <test_emit_token>
 8002d3c:	f386 8811 	msr	BASEPRI, r6
 8002d40:	2164      	movs	r1, #100	; 0x64
 8002d42:	4620      	mov	r0, r4
 8002d44:	f001 f83c 	bl	8003dc0 <chSemWaitTimeoutS>
 8002d48:	4601      	mov	r1, r0
 8002d4a:	f387 8811 	msr	BASEPRI, r7
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 8002d4e:	2007      	movs	r0, #7
 8002d50:	f1b1 3eff 	subs.w	lr, r1, #4294967295
 8002d54:	f1de 0200 	rsbs	r2, lr, #0
 8002d58:	eb52 010e 	adcs.w	r1, r2, lr
 8002d5c:	f7fe fd40 	bl	80017e0 <_test_assert>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	f47f aed4 	bne.w	8002b0e <sem2_execute.7099+0x2e>
 8002d66:	6823      	ldr	r3, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8002d68:	2008      	movs	r0, #8
 8002d6a:	1b1a      	subs	r2, r3, r4
 8002d6c:	4251      	negs	r1, r2
 8002d6e:	4151      	adcs	r1, r2
 8002d70:	f7fe fd36 	bl	80017e0 <_test_assert>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	f47f aeca 	bne.w	8002b0e <sem2_execute.7099+0x2e>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8002d7a:	68a3      	ldr	r3, [r4, #8]
 8002d7c:	2009      	movs	r0, #9
 8002d7e:	f1d3 0101 	rsbs	r1, r3, #1
 8002d82:	bf38      	it	cc
 8002d84:	2100      	movcc	r1, #0
 8002d86:	f7fe fd2b 	bl	80017e0 <_test_assert>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	f47f aebf 	bne.w	8002b0e <sem2_execute.7099+0x2e>
  }
  test_assert_sequence(10, "ABCDE");
 8002d90:	200a      	movs	r0, #10
 8002d92:	490f      	ldr	r1, [pc, #60]	; (8002dd0 <sem2_execute.7099+0x2f0>)
 8002d94:	f7fe fcdc 	bl	8001750 <_test_assert_sequence>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	f47f aeb8 	bne.w	8002b0e <sem2_execute.7099+0x2e>
 8002d9e:	fa1f f888 	uxth.w	r8, r8

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8002da2:	f508 71fa 	add.w	r1, r8, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8002da6:	f508 72fc 	add.w	r2, r8, #504	; 0x1f8
 8002daa:	200b      	movs	r0, #11
 8002dac:	b289      	uxth	r1, r1
 8002dae:	b292      	uxth	r2, r2
}
 8002db0:	b002      	add	sp, #8
 8002db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8002db6:	f7fe bca3 	b.w	8001700 <_test_assert_time_window>
 8002dba:	bf00      	nop
 8002dbc:	20000810 	.word	0x20000810
 8002dc0:	20001e58 	.word	0x20001e58
 8002dc4:	080077e1 	.word	0x080077e1
 8002dc8:	200017e8 	.word	0x200017e8
 8002dcc:	20001fa8 	.word	0x20001fa8
 8002dd0:	08009e54 	.word	0x08009e54
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	f3af 8000 	nop.w
 8002ddc:	f3af 8000 	nop.w

08002de0 <cmd_info.10439>:
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002de0:	b510      	push	{r4, lr}

  (void)argv;
  if (argc > 0) {
 8002de2:	2900      	cmp	r1, #0
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002de4:	b082      	sub	sp, #8
 8002de6:	4604      	mov	r4, r0

  (void)argv;
  if (argc > 0) {
 8002de8:	dd06      	ble.n	8002df8 <cmd_info.10439+0x18>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002dea:	4919      	ldr	r1, [pc, #100]	; (8002e50 <cmd_info.10439+0x70>)
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <cmd_info.10439+0x74>)
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
#endif
#endif
}
 8002dee:	b002      	add	sp, #8
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002df4:	f004 ba7c 	b.w	80072f0 <chprintf.10400>
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8002df8:	4917      	ldr	r1, [pc, #92]	; (8002e58 <cmd_info.10439+0x78>)
 8002dfa:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <cmd_info.10439+0x7c>)
 8002dfc:	f004 fa78 	bl	80072f0 <chprintf.10400>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8002e00:	4620      	mov	r0, r4
 8002e02:	4917      	ldr	r1, [pc, #92]	; (8002e60 <cmd_info.10439+0x80>)
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <cmd_info.10439+0x84>)
 8002e06:	f004 fa73 	bl	80072f0 <chprintf.10400>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <cmd_info.10439+0x88>)
 8002e0e:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <cmd_info.10439+0x8c>)
 8002e10:	f004 fa6e 	bl	80072f0 <chprintf.10400>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8002e14:	4620      	mov	r0, r4
 8002e16:	4916      	ldr	r1, [pc, #88]	; (8002e70 <cmd_info.10439+0x90>)
 8002e18:	4a16      	ldr	r2, [pc, #88]	; (8002e74 <cmd_info.10439+0x94>)
 8002e1a:	f004 fa69 	bl	80072f0 <chprintf.10400>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4915      	ldr	r1, [pc, #84]	; (8002e78 <cmd_info.10439+0x98>)
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <cmd_info.10439+0x9c>)
 8002e24:	f004 fa64 	bl	80072f0 <chprintf.10400>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8002e28:	4620      	mov	r0, r4
 8002e2a:	4915      	ldr	r1, [pc, #84]	; (8002e80 <cmd_info.10439+0xa0>)
 8002e2c:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <cmd_info.10439+0xa4>)
 8002e2e:	f004 fa5f 	bl	80072f0 <chprintf.10400>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8002e32:	4620      	mov	r0, r4
 8002e34:	4914      	ldr	r1, [pc, #80]	; (8002e88 <cmd_info.10439+0xa8>)
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <cmd_info.10439+0xac>)
 8002e38:	f004 fa5a 	bl	80072f0 <chprintf.10400>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <cmd_info.10439+0xb0>)
 8002e3e:	4620      	mov	r0, r4
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4914      	ldr	r1, [pc, #80]	; (8002e94 <cmd_info.10439+0xb4>)
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <cmd_info.10439+0xb8>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <cmd_info.10439+0xbc>)
 8002e48:	f004 fa52 	bl	80072f0 <chprintf.10400>
#endif
#endif
}
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd10      	pop	{r4, pc}
 8002e50:	08009e5c 	.word	0x08009e5c
 8002e54:	08009e68 	.word	0x08009e68
 8002e58:	08009e70 	.word	0x08009e70
 8002e5c:	08009e84 	.word	0x08009e84
 8002e60:	08009e90 	.word	0x08009e90
 8002e64:	08009ea4 	.word	0x08009ea4
 8002e68:	08009eec 	.word	0x08009eec
 8002e6c:	08009f00 	.word	0x08009f00
 8002e70:	08009f08 	.word	0x08009f08
 8002e74:	08009f1c 	.word	0x08009f1c
 8002e78:	08009f28 	.word	0x08009f28
 8002e7c:	08009f3c 	.word	0x08009f3c
 8002e80:	08009f54 	.word	0x08009f54
 8002e84:	08009f68 	.word	0x08009f68
 8002e88:	08009f94 	.word	0x08009f94
 8002e8c:	08009fa8 	.word	0x08009fa8
 8002e90:	08009fe0 	.word	0x08009fe0
 8002e94:	08009fb8 	.word	0x08009fb8
 8002e98:	08009fd0 	.word	0x08009fd0
 8002e9c:	08009fdc 	.word	0x08009fdc

08002ea0 <cmd_systime.10431>:

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	dd03      	ble.n	8002eac <cmd_systime.10431+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8002ea4:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <cmd_systime.10431+0x28>)
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <cmd_systime.10431+0x2c>)
 8002ea8:	f004 ba22 	b.w	80072f0 <chprintf.10400>
 8002eac:	2320      	movs	r3, #32
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002eb6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8002ebe:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <cmd_systime.10431+0x30>)
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	f004 ba15 	b.w	80072f0 <chprintf.10400>
 8002ec6:	bf00      	nop
 8002ec8:	08009e5c 	.word	0x08009e5c
 8002ecc:	08009fec 	.word	0x08009fec
 8002ed0:	08009ff4 	.word	0x08009ff4
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	f3af 8000 	nop.w
 8002edc:	f3af 8000 	nop.w

08002ee0 <evt1_execute.7722>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	4c32      	ldr	r4, [pc, #200]	; (8002fb0 <evt1_execute.7722+0xd0>)
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	2020      	movs	r0, #32
 8002eea:	6024      	str	r4, [r4, #0]
 8002eec:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002ef0:	4930      	ldr	r1, [pc, #192]	; (8002fb4 <evt1_execute.7722+0xd4>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002ef6:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002ef8:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8002efc:	2701      	movs	r7, #1
  elp->el_flags    = 0;
 8002efe:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8002f04:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
 8002f06:	9601      	str	r6, [sp, #4]
  elp->el_events   = events;
 8002f08:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 8002f0a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 8002f0c:	9204      	str	r2, [sp, #16]
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8002f1a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8002f1c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8002f20:	f04f 0802 	mov.w	r8, #2

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8002f24:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
 8002f26:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
 8002f28:	f8cd 801c 	str.w	r8, [sp, #28]
  elp->el_flags    = 0;
 8002f2c:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 8002f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f30:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 8002f34:	6823      	ldr	r3, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8002f36:	4638      	mov	r0, r7
 8002f38:	1b19      	subs	r1, r3, r4
 8002f3a:	bf18      	it	ne
 8002f3c:	2101      	movne	r1, #1
 8002f3e:	f7fe fc4f 	bl	80017e0 <_test_assert>
 8002f42:	b110      	cbz	r0, 8002f4a <evt1_execute.7722+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8002f44:	b00a      	add	sp, #40	; 0x28
 8002f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	4669      	mov	r1, sp
 8002f4e:	f7fe fd17 	bl	8001980 <chEvtUnregister>
 8002f52:	6822      	ldr	r2, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8002f54:	4640      	mov	r0, r8
 8002f56:	1b11      	subs	r1, r2, r4
 8002f58:	bf18      	it	ne
 8002f5a:	2101      	movne	r1, #1
 8002f5c:	f7fe fc40 	bl	80017e0 <_test_assert>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d1ef      	bne.n	8002f44 <evt1_execute.7722+0x64>
  chEvtUnregister(&es1, &el2);
 8002f64:	4620      	mov	r0, r4
 8002f66:	4631      	mov	r1, r6
 8002f68:	f7fe fd0a 	bl	8001980 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 8002f6c:	6821      	ldr	r1, [r4, #0]
 8002f6e:	2003      	movs	r0, #3
 8002f70:	ebb1 0e04 	subs.w	lr, r1, r4
 8002f74:	f1de 0300 	rsbs	r3, lr, #0
 8002f78:	eb53 010e 	adcs.w	r1, r3, lr
 8002f7c:	f7fe fc30 	bl	80017e0 <_test_assert>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d1df      	bne.n	8002f44 <evt1_execute.7722+0x64>
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8002f84:	4e0c      	ldr	r6, [pc, #48]	; (8002fb8 <evt1_execute.7722+0xd8>)
 8002f86:	2507      	movs	r5, #7
 8002f88:	4604      	mov	r4, r0
 8002f8a:	e001      	b.n	8002f90 <evt1_execute.7722+0xb0>
    }
    eid++;
 8002f8c:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 8002f8e:	b155      	cbz	r5, 8002fa6 <evt1_execute.7722+0xc6>
    if (events & EVENT_MASK(eid)) {
 8002f90:	fa07 f104 	lsl.w	r1, r7, r4
 8002f94:	4229      	tst	r1, r5
 8002f96:	d0f9      	beq.n	8002f8c <evt1_execute.7722+0xac>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8002f98:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002f9c:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 8002f9e:	ea25 0501 	bic.w	r5, r5, r1
      handlers[eid](eid);
 8002fa2:	4790      	blx	r2
 8002fa4:	e7f2      	b.n	8002f8c <evt1_execute.7722+0xac>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 8002fa6:	2004      	movs	r0, #4
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <evt1_execute.7722+0xdc>)
 8002faa:	f7fe fbd1 	bl	8001750 <_test_assert_sequence>
 8002fae:	e7c9      	b.n	8002f44 <evt1_execute.7722+0x64>
 8002fb0:	20000c4c 	.word	0x20000c4c
 8002fb4:	20001e58 	.word	0x20001e58
 8002fb8:	08009d80 	.word	0x08009d80
 8002fbc:	08009e50 	.word	0x08009e50

08002fc0 <thd4_execute.6832>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 8002fc2:	f004 fe35 	bl	8007c30 <test_wait_tick>
 8002fc6:	2620      	movs	r6, #32
 8002fc8:	f386 8811 	msr	BASEPRI, r6
 8002fcc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002fd0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	b2a4      	uxth	r4, r4
 8002fd6:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 8002fda:	20c8      	movs	r0, #200	; 0xc8
 8002fdc:	f004 f868 	bl	80070b0 <chThdSleep>
  test_assert_time_window(1,
 8002fe0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8002fe4:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8002fe8:	2001      	movs	r0, #1
 8002fea:	b289      	uxth	r1, r1
 8002fec:	b292      	uxth	r2, r2
 8002fee:	f7fe fb87 	bl	8001700 <_test_assert_time_window>
 8002ff2:	b100      	cbz	r0, 8002ff6 <thd4_execute.6832+0x36>
 8002ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff6:	f386 8811 	msr	BASEPRI, r6
 8002ffa:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002ffc:	b2a4      	uxth	r4, r4
 8002ffe:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8003002:	20c8      	movs	r0, #200	; 0xc8
 8003004:	f004 f854 	bl	80070b0 <chThdSleep>
  test_assert_time_window(2,
 8003008:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 800300c:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8003010:	2002      	movs	r0, #2
 8003012:	b299      	uxth	r1, r3
 8003014:	b292      	uxth	r2, r2
 8003016:	f7fe fb73 	bl	8001700 <_test_assert_time_window>
 800301a:	2800      	cmp	r0, #0
 800301c:	d1ea      	bne.n	8002ff4 <thd4_execute.6832+0x34>
 800301e:	f386 8811 	msr	BASEPRI, r6
 8003022:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003024:	b28c      	uxth	r4, r1
 8003026:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 800302a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800302e:	f004 f83f 	bl	80070b0 <chThdSleep>
  test_assert_time_window(3,
 8003032:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 8003036:	f204 72d2 	addw	r2, r4, #2002	; 0x7d2
 800303a:	2003      	movs	r0, #3
 800303c:	b299      	uxth	r1, r3
 800303e:	b292      	uxth	r2, r2
 8003040:	f7fe fb5e 	bl	8001700 <_test_assert_time_window>
 8003044:	2800      	cmp	r0, #0
 8003046:	d1d5      	bne.n	8002ff4 <thd4_execute.6832+0x34>
 8003048:	f386 8811 	msr	BASEPRI, r6
 800304c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800304e:	b2bf      	uxth	r7, r7
 8003050:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8003054:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8003058:	b284      	uxth	r4, r0
 800305a:	f386 8811 	msr	BASEPRI, r6
 800305e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0)
 8003060:	1a63      	subs	r3, r4, r1
 8003062:	b299      	uxth	r1, r3
 8003064:	b959      	cbnz	r1, 800307e <thd4_execute.6832+0xbe>
 8003066:	2200      	movs	r2, #0
 8003068:	f382 8811 	msr	BASEPRI, r2
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800306c:	f107 03ca 	add.w	r3, r7, #202	; 0xca
 8003070:	2004      	movs	r0, #4
 8003072:	4621      	mov	r1, r4
 8003074:	b29a      	uxth	r2, r3
                          time,
                          time + CH_CFG_ST_TIMEDELTA);
}
 8003076:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800307a:	f7fe bb41 	b.w	8001700 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800307e:	2008      	movs	r0, #8
 8003080:	f000 fe5e 	bl	8003d40 <chSchGoSleepTimeoutS>
 8003084:	e7ef      	b.n	8003066 <thd4_execute.6832+0xa6>
 8003086:	bf00      	nop
 8003088:	f3af 8000 	nop.w
 800308c:	f3af 8000 	nop.w

08003090 <bmk12_execute.8462>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8003090:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8003092:	f004 fdcd 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8003096:	f000 fedb 	bl	8003e50 <test_start_timer.constprop.21>
 800309a:	4d14      	ldr	r5, [pc, #80]	; (80030ec <bmk12_execute.8462+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800309c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800309e:	4814      	ldr	r0, [pc, #80]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030a0:	f7ff f836 	bl	8002110 <chMtxLock>
    chMtxUnlock(&mtx1);
 80030a4:	4812      	ldr	r0, [pc, #72]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030a6:	f7fe fe03 	bl	8001cb0 <chMtxUnlock>
    chMtxLock(&mtx1);
 80030aa:	4811      	ldr	r0, [pc, #68]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030ac:	f7ff f830 	bl	8002110 <chMtxLock>
    chMtxUnlock(&mtx1);
 80030b0:	480f      	ldr	r0, [pc, #60]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030b2:	f7fe fdfd 	bl	8001cb0 <chMtxUnlock>
    chMtxLock(&mtx1);
 80030b6:	480e      	ldr	r0, [pc, #56]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030b8:	f7ff f82a 	bl	8002110 <chMtxLock>
    chMtxUnlock(&mtx1);
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030be:	f7fe fdf7 	bl	8001cb0 <chMtxUnlock>
    chMtxLock(&mtx1);
 80030c2:	480b      	ldr	r0, [pc, #44]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030c4:	f7ff f824 	bl	8002110 <chMtxLock>
    chMtxUnlock(&mtx1);
 80030c8:	4809      	ldr	r0, [pc, #36]	; (80030f0 <bmk12_execute.8462+0x60>)
 80030ca:	f7fe fdf1 	bl	8001cb0 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80030ce:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 80030d0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0e3      	beq.n	800309e <bmk12_execute.8462+0xe>
  test_print("--- Score : ");
 80030d6:	4807      	ldr	r0, [pc, #28]	; (80030f4 <bmk12_execute.8462+0x64>)
 80030d8:	f7fe fbc2 	bl	8001860 <test_print>
  test_printn(n * 4);
 80030dc:	00a0      	lsls	r0, r4, #2
 80030de:	f7fe fbcf 	bl	8001880 <test_printn>
  test_println(" lock+unlock/S");
 80030e2:	4805      	ldr	r0, [pc, #20]	; (80030f8 <bmk12_execute.8462+0x68>)
}
 80030e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 80030e8:	f7fe bba2 	b.w	8001830 <test_println>
 80030ec:	200017c0 	.word	0x200017c0
 80030f0:	20000d10 	.word	0x20000d10
 80030f4:	08009ffc 	.word	0x08009ffc
 80030f8:	0800a00c 	.word	0x0800a00c
 80030fc:	f3af 8000 	nop.w

08003100 <bmk6_execute.8479>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 8003100:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <bmk6_execute.8479+0x4c>)
 8003104:	b083      	sub	sp, #12
 8003106:	6998      	ldr	r0, [r3, #24]

  uint32_t n = 0;
 8003108:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 800310a:	6885      	ldr	r5, [r0, #8]
 800310c:	4f10      	ldr	r7, [pc, #64]	; (8003150 <bmk6_execute.8479+0x50>)
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800310e:	4626      	mov	r6, r4

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 8003110:	3501      	adds	r5, #1
  test_wait_tick();
 8003112:	f004 fd8d 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8003116:	f000 fe9b 	bl	8003e50 <test_start_timer.constprop.21>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 800311a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800311e:	9600      	str	r6, [sp, #0]
 8003120:	480c      	ldr	r0, [pc, #48]	; (8003154 <bmk6_execute.8479+0x54>)
 8003122:	462a      	mov	r2, r5
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <bmk6_execute.8479+0x58>)
 8003126:	f7fe fe0b 	bl	8001d40 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800312a:	7839      	ldrb	r1, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 800312c:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800312e:	2900      	cmp	r1, #0
 8003130:	d0f3      	beq.n	800311a <bmk6_execute.8479+0x1a>
  test_print("--- Score : ");
 8003132:	480a      	ldr	r0, [pc, #40]	; (800315c <bmk6_execute.8479+0x5c>)
 8003134:	f7fe fb94 	bl	8001860 <test_print>
  test_printn(n);
 8003138:	4620      	mov	r0, r4
 800313a:	f7fe fba1 	bl	8001880 <test_printn>
  test_println(" threads/S");
 800313e:	4808      	ldr	r0, [pc, #32]	; (8003160 <bmk6_execute.8479+0x60>)
}
 8003140:	b003      	add	sp, #12
 8003142:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8003146:	f7fe bb73 	b.w	8001830 <test_println>
 800314a:	bf00      	nop
 800314c:	20001e58 	.word	0x20001e58
 8003150:	200017c0 	.word	0x200017c0
 8003154:	200017e8 	.word	0x200017e8
 8003158:	08005201 	.word	0x08005201
 800315c:	08009ffc 	.word	0x08009ffc
 8003160:	0800a01c 	.word	0x0800a01c
 8003164:	f3af 8000 	nop.w
 8003168:	f3af 8000 	nop.w
 800316c:	f3af 8000 	nop.w

08003170 <bmk11_execute.8466>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8003170:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8003172:	f004 fd5d 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8003176:	f000 fe6b 	bl	8003e50 <test_start_timer.constprop.21>
 800317a:	4d14      	ldr	r5, [pc, #80]	; (80031cc <bmk11_execute.8466+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 800317c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 800317e:	4814      	ldr	r0, [pc, #80]	; (80031d0 <bmk11_execute.8466+0x60>)
 8003180:	f7fe fe56 	bl	8001e30 <chSemWait>
    chSemSignal(&sem1);
 8003184:	4812      	ldr	r0, [pc, #72]	; (80031d0 <bmk11_execute.8466+0x60>)
 8003186:	f7fe fdc3 	bl	8001d10 <chSemSignal>
    chSemWait(&sem1);
 800318a:	4811      	ldr	r0, [pc, #68]	; (80031d0 <bmk11_execute.8466+0x60>)
 800318c:	f7fe fe50 	bl	8001e30 <chSemWait>
    chSemSignal(&sem1);
 8003190:	480f      	ldr	r0, [pc, #60]	; (80031d0 <bmk11_execute.8466+0x60>)
 8003192:	f7fe fdbd 	bl	8001d10 <chSemSignal>
    chSemWait(&sem1);
 8003196:	480e      	ldr	r0, [pc, #56]	; (80031d0 <bmk11_execute.8466+0x60>)
 8003198:	f7fe fe4a 	bl	8001e30 <chSemWait>
    chSemSignal(&sem1);
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <bmk11_execute.8466+0x60>)
 800319e:	f7fe fdb7 	bl	8001d10 <chSemSignal>
    chSemWait(&sem1);
 80031a2:	480b      	ldr	r0, [pc, #44]	; (80031d0 <bmk11_execute.8466+0x60>)
 80031a4:	f7fe fe44 	bl	8001e30 <chSemWait>
    chSemSignal(&sem1);
 80031a8:	4809      	ldr	r0, [pc, #36]	; (80031d0 <bmk11_execute.8466+0x60>)
 80031aa:	f7fe fdb1 	bl	8001d10 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80031ae:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 80031b0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0e3      	beq.n	800317e <bmk11_execute.8466+0xe>
  test_print("--- Score : ");
 80031b6:	4807      	ldr	r0, [pc, #28]	; (80031d4 <bmk11_execute.8466+0x64>)
 80031b8:	f7fe fb52 	bl	8001860 <test_print>
  test_printn(n * 4);
 80031bc:	00a0      	lsls	r0, r4, #2
 80031be:	f7fe fb5f 	bl	8001880 <test_printn>
  test_println(" wait+signal/S");
 80031c2:	4805      	ldr	r0, [pc, #20]	; (80031d8 <bmk11_execute.8466+0x68>)
}
 80031c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 80031c8:	f7fe bb32 	b.w	8001830 <test_println>
 80031cc:	200017c0 	.word	0x200017c0
 80031d0:	20000d04 	.word	0x20000d04
 80031d4:	08009ffc 	.word	0x08009ffc
 80031d8:	0800a028 	.word	0x0800a028
 80031dc:	f3af 8000 	nop.w

080031e0 <bmk10_execute.8472>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 80031e2:	f004 fd25 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 80031e6:	f000 fe33 	bl	8003e50 <test_start_timer.constprop.21>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 80031ea:	2400      	movs	r4, #0
 80031ec:	4f14      	ldr	r7, [pc, #80]	; (8003240 <bmk10_execute.8472+0x60>)
 80031ee:	2620      	movs	r6, #32

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 80031f0:	4625      	mov	r5, r4
 80031f2:	f386 8811 	msr	BASEPRI, r6
 80031f6:	2101      	movs	r1, #1
 80031f8:	2300      	movs	r3, #0
 80031fa:	4812      	ldr	r0, [pc, #72]	; (8003244 <bmk10_execute.8472+0x64>)
 80031fc:	4a12      	ldr	r2, [pc, #72]	; (8003248 <bmk10_execute.8472+0x68>)
 80031fe:	f000 fd57 	bl	8003cb0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8003202:	f242 7110 	movw	r1, #10000	; 0x2710
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <bmk10_execute.8472+0x68>)
 8003208:	2300      	movs	r3, #0
 800320a:	4810      	ldr	r0, [pc, #64]	; (800324c <bmk10_execute.8472+0x6c>)
 800320c:	f000 fd50 	bl	8003cb0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8003210:	480c      	ldr	r0, [pc, #48]	; (8003244 <bmk10_execute.8472+0x64>)
 8003212:	f000 fd1d 	bl	8003c50 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <bmk10_execute.8472+0x6c>)
 8003218:	f000 fd1a 	bl	8003c50 <chVTDoResetI>
 800321c:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003220:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8003222:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0e4      	beq.n	80031f2 <bmk10_execute.8472+0x12>
  test_print("--- Score : ");
 8003228:	4809      	ldr	r0, [pc, #36]	; (8003250 <bmk10_execute.8472+0x70>)
 800322a:	f7fe fb19 	bl	8001860 <test_print>
  test_printn(n * 2);
 800322e:	0060      	lsls	r0, r4, #1
 8003230:	f7fe fb26 	bl	8001880 <test_printn>
  test_println(" timers/S");
 8003234:	4807      	ldr	r0, [pc, #28]	; (8003254 <bmk10_execute.8472+0x74>)
}
 8003236:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 800323a:	f7fe baf9 	b.w	8001830 <test_println>
 800323e:	bf00      	nop
 8003240:	200017c0 	.word	0x200017c0
 8003244:	20000d20 	.word	0x20000d20
 8003248:	080051f1 	.word	0x080051f1
 800324c:	20000cf0 	.word	0x20000cf0
 8003250:	08009ffc 	.word	0x08009ffc
 8003254:	0800a038 	.word	0x0800a038
 8003258:	f3af 8000 	nop.w
 800325c:	f3af 8000 	nop.w

08003260 <bmk8_execute.8481>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 8003260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003264:	f641 6858 	movw	r8, #7768	; 0x1e58
 8003268:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 800326a:	ac04      	add	r4, sp, #16
 800326c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8003270:	2300      	movs	r3, #0
 8003272:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8003276:	f004 fcdb 	bl	8007c30 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800327a:	f8d8 0018 	ldr.w	r0, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 800327e:	f241 76e8 	movw	r6, #6120	; 0x17e8
 8003282:	6882      	ldr	r2, [r0, #8]
 8003284:	f245 37c1 	movw	r7, #21441	; 0x53c1
 8003288:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800328c:	f6c0 0700 	movt	r7, #2048	; 0x800
 8003290:	3a01      	subs	r2, #1
 8003292:	463b      	mov	r3, r7
 8003294:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003298:	9400      	str	r4, [sp, #0]
 800329a:	4630      	mov	r0, r6
 800329c:	f7fe fd50 	bl	8001d40 <chThdCreateStatic>
 80032a0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80032a4:	f641 75a8 	movw	r5, #8104	; 0x1fa8
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032a8:	688b      	ldr	r3, [r1, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032aa:	f2c2 0500 	movt	r5, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80032b2:	1e5a      	subs	r2, r3, #1
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032b4:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032b6:	463b      	mov	r3, r7
 80032b8:	1870      	adds	r0, r6, r1
 80032ba:	9400      	str	r4, [sp, #0]
 80032bc:	f7fe fd40 	bl	8001d40 <chThdCreateStatic>
 80032c0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80032c4:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032c6:	6890      	ldr	r0, [r2, #8]
 80032c8:	463b      	mov	r3, r7
 80032ca:	1e42      	subs	r2, r0, #1
 80032cc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80032d0:	9400      	str	r4, [sp, #0]
 80032d2:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80032d6:	f7fe fd33 	bl	8001d40 <chThdCreateStatic>
 80032da:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80032de:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032e0:	688b      	ldr	r3, [r1, #8]
 80032e2:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80032e6:	1e5a      	subs	r2, r3, #1
 80032e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80032ec:	463b      	mov	r3, r7
 80032ee:	9400      	str	r4, [sp, #0]
 80032f0:	f7fe fd26 	bl	8001d40 <chThdCreateStatic>
 80032f4:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 80032f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80032fc:	6892      	ldr	r2, [r2, #8]
 80032fe:	463b      	mov	r3, r7
 8003300:	3a01      	subs	r2, #1
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003302:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8003304:	9400      	str	r4, [sp, #0]
 8003306:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 800330a:	f7fe fd19 	bl	8001d40 <chThdCreateStatic>
 800330e:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8003310:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003314:	f003 fecc 	bl	80070b0 <chThdSleep>
  test_terminate_threads();
 8003318:	f7fe f9b2 	bl	8001680 <test_terminate_threads>
  test_wait_threads();
 800331c:	f7fe ffc0 	bl	80022a0 <test_wait_threads>

  test_print("--- Score : ");
 8003320:	f649 70fc 	movw	r0, #40956	; 0x9ffc
 8003324:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003328:	f7fe fa9a 	bl	8001860 <test_print>
  test_printn(n);
 800332c:	9803      	ldr	r0, [sp, #12]
 800332e:	f7fe faa7 	bl	8001880 <test_printn>
  test_println(" ctxswc/S");
 8003332:	f24a 0044 	movw	r0, #41028	; 0xa044
 8003336:	f6c0 0000 	movt	r0, #2048	; 0x800
 800333a:	f7fe fa79 	bl	8001830 <test_println>
}
 800333e:	b004      	add	sp, #16
 8003340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003344:	f3af 8000 	nop.w
 8003348:	f3af 8000 	nop.w
 800334c:	f3af 8000 	nop.w

08003350 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8003350:	4603      	mov	r3, r0
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8003352:	6942      	ldr	r2, [r0, #20]
 8003354:	6980      	ldr	r0, [r0, #24]
 8003356:	b510      	push	{r4, lr}
 8003358:	4282      	cmp	r2, r0
 800335a:	6898      	ldr	r0, [r3, #8]
 800335c:	d01b      	beq.n	8003396 <chIQPutI+0x46>
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 800335e:	3001      	adds	r0, #1
 8003360:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8003362:	f802 1b01 	strb.w	r1, [r2], #1
  if (iqp->q_wrptr >= iqp->q_top)
 8003366:	6919      	ldr	r1, [r3, #16]

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
 8003368:	615a      	str	r2, [r3, #20]
  if (iqp->q_wrptr >= iqp->q_top)
 800336a:	428a      	cmp	r2, r1
 800336c:	d20c      	bcs.n	8003388 <chIQPutI+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800336e:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <chIQPutI+0x42>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8003374:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8003376:	2400      	movs	r4, #0
 8003378:	6019      	str	r1, [r3, #0]
  chSchReadyI(tp);
 800337a:	4610      	mov	r0, r2
 800337c:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 800337e:	6214      	str	r4, [r2, #32]
  chSchReadyI(tp);
 8003380:	f7fe fda6 	bl	8001ed0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003384:	4620      	mov	r0, r4
 8003386:	bd10      	pop	{r4, pc}
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top)
    iqp->q_wrptr = iqp->q_buffer;
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4293      	cmp	r3, r2
 8003390:	d1f0      	bne.n	8003374 <chIQPutI+0x24>

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8003392:	2000      	movs	r0, #0
 8003394:	bd10      	pop	{r4, pc}
 8003396:	2800      	cmp	r0, #0
 8003398:	d0e1      	beq.n	800335e <chIQPutI+0xe>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;
 800339a:	f06f 0003 	mvn.w	r0, #3
 800339e:	bd10      	pop	{r4, pc}

080033a0 <mbox1_setup.7601>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 80033a0:	f640 43c4 	movw	r3, #3268	; 0xcc4
 80033a4:	f241 72e8 	movw	r2, #6120	; 0x17e8
 80033a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 80033b0:	b410      	push	{r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80033b2:	f103 001c 	add.w	r0, r3, #28
  mbp->mb_top = &buf[n];
 80033b6:	f102 0414 	add.w	r4, r2, #20
 80033ba:	f103 0110 	add.w	r1, r3, #16
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	609a      	str	r2, [r3, #8]
  mbp->mb_top = &buf[n];
 80033c2:	e883 0014 	stmia.w	r3, {r2, r4}
 80033c6:	6218      	str	r0, [r3, #32]
 80033c8:	61d8      	str	r0, [r3, #28]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80033ca:	2205      	movs	r2, #5
 80033cc:	2000      	movs	r0, #0
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
 80033d0:	6159      	str	r1, [r3, #20]
 80033d2:	6119      	str	r1, [r3, #16]
 80033d4:	6198      	str	r0, [r3, #24]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 80033d6:	bc10      	pop	{r4}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	f3af 8000 	nop.w

080033e0 <sem3_setup.7070>:
 80033e0:	f640 0310 	movw	r3, #2064	; 0x810
 80033e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033e8:	2200      	movs	r2, #0
 80033ea:	605b      	str	r3, [r3, #4]
 80033ec:	601b      	str	r3, [r3, #0]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	f3af 8000 	nop.w
 80033f8:	f3af 8000 	nop.w
 80033fc:	f3af 8000 	nop.w

08003400 <sem2_setup.7072>:
 8003400:	f640 0310 	movw	r3, #2064	; 0x810
 8003404:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003408:	2200      	movs	r2, #0
 800340a:	605b      	str	r3, [r3, #4]
 800340c:	601b      	str	r3, [r3, #0]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	f3af 8000 	nop.w
 8003418:	f3af 8000 	nop.w
 800341c:	f3af 8000 	nop.w

08003420 <sem1_setup.7074>:
 8003420:	f640 0310 	movw	r3, #2064	; 0x810
 8003424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003428:	2200      	movs	r2, #0
 800342a:	605b      	str	r3, [r3, #4]
 800342c:	601b      	str	r3, [r3, #0]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	f3af 8000 	nop.w
 8003438:	f3af 8000 	nop.w
 800343c:	f3af 8000 	nop.w

08003440 <bmk11_setup.8468>:
 8003440:	f640 5304 	movw	r3, #3332	; 0xd04
 8003444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003448:	2201      	movs	r2, #1
 800344a:	605b      	str	r3, [r3, #4]
 800344c:	601b      	str	r3, [r3, #0]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	f3af 8000 	nop.w
 8003458:	f3af 8000 	nop.w
 800345c:	f3af 8000 	nop.w

08003460 <bmk7_setup.8470>:
 8003460:	f640 5304 	movw	r3, #3332	; 0xd04
 8003464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003468:	2200      	movs	r2, #0
 800346a:	605b      	str	r3, [r3, #4]
 800346c:	601b      	str	r3, [r3, #0]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	f3af 8000 	nop.w
 8003478:	f3af 8000 	nop.w
 800347c:	f3af 8000 	nop.w

08003480 <dyn2_setup.8092>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8003480:	f640 5368 	movw	r3, #3432	; 0xd68
 8003484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003488:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 800348a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800348e:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 8003490:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	f3af 8000 	nop.w
 800349c:	f3af 8000 	nop.w

080034a0 <pools1_setup.7960>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80034a0:	f640 0324 	movw	r3, #2084	; 0x824
 80034a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034a8:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80034aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80034ae:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 80034b0:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	f3af 8000 	nop.w
 80034bc:	f3af 8000 	nop.w

080034c0 <heap1_setup.7929>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80034c0:	f640 5348 	movw	r3, #3400	; 0xd48
 80034c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 80034c8:	f241 72e8 	movw	r2, #6120	; 0x17e8
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 80034cc:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80034ce:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 80034d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80034d4:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80034d8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80034dc:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 80034de:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 80034e0:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 80034e2:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 80034e4:	6054      	str	r4, [r2, #4]
 80034e6:	6158      	str	r0, [r3, #20]
 80034e8:	6118      	str	r0, [r3, #16]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80034ea:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 80034ec:	bc10      	pop	{r4}
 80034ee:	4770      	bx	lr

080034f0 <get_descriptor.11181>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 80034f0:	2902      	cmp	r1, #2
 80034f2:	d006      	beq.n	8003502 <get_descriptor.11181+0x12>
 80034f4:	2903      	cmp	r1, #3
 80034f6:	d006      	beq.n	8003506 <get_descriptor.11181+0x16>
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 80034f8:	4807      	ldr	r0, [pc, #28]	; (8003518 <get_descriptor.11181+0x28>)
 80034fa:	2901      	cmp	r1, #1
 80034fc:	bf18      	it	ne
 80034fe:	2000      	movne	r0, #0
 8003500:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8003502:	4806      	ldr	r0, [pc, #24]	; (800351c <get_descriptor.11181+0x2c>)
 8003504:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8003506:	2a03      	cmp	r2, #3
 8003508:	d803      	bhi.n	8003512 <get_descriptor.11181+0x22>
      return &vcom_strings[dindex];
 800350a:	4805      	ldr	r0, [pc, #20]	; (8003520 <get_descriptor.11181+0x30>)
 800350c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8003510:	4770      	bx	lr
  }
  return NULL;
 8003512:	2000      	movs	r0, #0
}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	0800a130 	.word	0x0800a130
 800351c:	0800a180 	.word	0x0800a180
 8003520:	0800a1a0 	.word	0x0800a1a0
 8003524:	f3af 8000 	nop.w
 8003528:	f3af 8000 	nop.w
 800352c:	f3af 8000 	nop.w

08003530 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 8003534:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8003538:	f04f 0800 	mov.w	r8, #0
 800353c:	f8c6 8010 	str.w	r8, [r6, #16]
 8003540:	2720      	movs	r7, #32
 8003542:	f387 8811 	msr	BASEPRI, r7
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003546:	4c20      	ldr	r4, [pc, #128]	; (80035c8 <VectorB0+0x98>)
 8003548:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800354a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 800354c:	69e3      	ldr	r3, [r4, #28]
 800354e:	b280      	uxth	r0, r0
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003550:	1a45      	subs	r5, r0, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8003552:	891a      	ldrh	r2, [r3, #8]
 8003554:	b2ad      	uxth	r5, r5
 8003556:	4295      	cmp	r5, r2
 8003558:	f104 051c 	add.w	r5, r4, #28
 800355c:	d318      	bcc.n	8003590 <VectorB0+0x60>
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800355e:	6818      	ldr	r0, [r3, #0]
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
      break;

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8003560:	1852      	adds	r2, r2, r1
 8003562:	84e2      	strh	r2, [r4, #38]	; 0x26

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8003564:	68d9      	ldr	r1, [r3, #12]
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8003566:	6045      	str	r5, [r0, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8003568:	61e0      	str	r0, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 800356a:	f8c3 800c 	str.w	r8, [r3, #12]
 800356e:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8003572:	6918      	ldr	r0, [r3, #16]
 8003574:	4788      	blx	r1
 8003576:	f387 8811 	msr	BASEPRI, r7
 800357a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 800357c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 800357e:	69e3      	ldr	r3, [r4, #28]
 8003580:	b280      	uxth	r0, r0
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8003582:	ebc1 0c00 	rsb	ip, r1, r0

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8003586:	891a      	ldrh	r2, [r3, #8]
 8003588:	fa1f fc8c 	uxth.w	ip, ip
 800358c:	4594      	cmp	ip, r2
 800358e:	d2e6      	bcs.n	800355e <VectorB0+0x2e>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003590:	42ab      	cmp	r3, r5
 8003592:	d013      	beq.n	80035bc <VectorB0+0x8c>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8003594:	2a01      	cmp	r2, #1
 8003596:	d00b      	beq.n	80035b0 <VectorB0+0x80>
      port_timer_set_alarm(now + vtp->vt_delta);
 8003598:	1812      	adds	r2, r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800359a:	b291      	uxth	r1, r2
 800359c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035a0:	6341      	str	r1, [r0, #52]	; 0x34
 80035a2:	2100      	movs	r1, #0
 80035a4:	f381 8811 	msr	BASEPRI, r1
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 80035a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 80035ac:	f7fe bc60 	b.w	8001e70 <_port_irq_epilogue>
    else
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 80035b0:	1c81      	adds	r1, r0, #2
 80035b2:	b288      	uxth	r0, r1
 80035b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035b8:	6358      	str	r0, [r3, #52]	; 0x34
 80035ba:	e7f2      	b.n	80035a2 <VectorB0+0x72>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80035bc:	2200      	movs	r2, #0
 80035be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	e7ed      	b.n	80035a2 <VectorB0+0x72>
 80035c6:	bf00      	nop
 80035c8:	20001e58 	.word	0x20001e58
 80035cc:	f3af 8000 	nop.w

080035d0 <spi_lld_serve_rx_interrupt.9857>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80035d2:	070b      	lsls	r3, r1, #28
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80035d4:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80035d6:	d431      	bmi.n	800363c <spi_lld_serve_rx_interrupt.9857+0x6c>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80035d8:	6a42      	ldr	r2, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 80035da:	6a03      	ldr	r3, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80035dc:	6815      	ldr	r5, [r2, #0]
 80035de:	6856      	ldr	r6, [r2, #4]
 80035e0:	682f      	ldr	r7, [r5, #0]
 80035e2:	210f      	movs	r1, #15
 80035e4:	f027 070f 	bic.w	r7, r7, #15
 80035e8:	602f      	str	r7, [r5, #0]
 80035ea:	7a15      	ldrb	r5, [r2, #8]
  dmaStreamDisable(spip->dmarx);
 80035ec:	681a      	ldr	r2, [r3, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80035ee:	fa01 f505 	lsl.w	r5, r1, r5
 80035f2:	6035      	str	r5, [r6, #0]
  dmaStreamDisable(spip->dmarx);
 80035f4:	6816      	ldr	r6, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80035f6:	6845      	ldr	r5, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80035f8:	f026 060f 	bic.w	r6, r6, #15
 80035fc:	6016      	str	r6, [r2, #0]
 80035fe:	7a1e      	ldrb	r6, [r3, #8]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	fa01 f106 	lsl.w	r1, r1, r6

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8003606:	682b      	ldr	r3, [r5, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8003608:	6011      	str	r1, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800360a:	b1a3      	cbz	r3, 8003636 <spi_lld_serve_rx_interrupt.9857+0x66>
 800360c:	2104      	movs	r1, #4
 800360e:	7001      	strb	r1, [r0, #0]
 8003610:	4798      	blx	r3
 8003612:	7820      	ldrb	r0, [r4, #0]
 8003614:	2804      	cmp	r0, #4
 8003616:	d00e      	beq.n	8003636 <spi_lld_serve_rx_interrupt.9857+0x66>
 8003618:	2320      	movs	r3, #32
 800361a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800361e:	68a1      	ldr	r1, [r4, #8]
 8003620:	b129      	cbz	r1, 800362e <spi_lld_serve_rx_interrupt.9857+0x5e>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8003622:	2200      	movs	r2, #0
 8003624:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    chSchReadyI(tp);
 8003626:	4608      	mov	r0, r1

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8003628:	620a      	str	r2, [r1, #32]
    chSchReadyI(tp);
 800362a:	f7fe fc51 	bl	8001ed0 <chSchReadyI>
 800362e:	2000      	movs	r0, #0
 8003630:	f380 8811 	msr	BASEPRI, r0
 8003634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003636:	2202      	movs	r2, #2
 8003638:	7022      	strb	r2, [r4, #0]
 800363a:	e7ed      	b.n	8003618 <spi_lld_serve_rx_interrupt.9857+0x48>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800363c:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800363e:	4c02      	ldr	r4, [pc, #8]	; (8003648 <spi_lld_serve_rx_interrupt.9857+0x78>)
 8003640:	4f02      	ldr	r7, [pc, #8]	; (800364c <spi_lld_serve_rx_interrupt.9857+0x7c>)
 8003642:	62bc      	str	r4, [r7, #40]	; 0x28
 8003644:	e7fe      	b.n	8003644 <spi_lld_serve_rx_interrupt.9857+0x74>
 8003646:	bf00      	nop
 8003648:	0800a1c0 	.word	0x0800a1c0
 800364c:	20001e58 	.word	0x20001e58

08003650 <chSemSignalWait.constprop.54.4361>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8003650:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003652:	2320      	movs	r3, #32
 8003654:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
 8003658:	4c14      	ldr	r4, [pc, #80]	; (80036ac <chSemSignalWait.constprop.54.4361+0x5c>)
 800365a:	68a0      	ldr	r0, [r4, #8]
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	dd18      	ble.n	8003696 <chSemSignalWait.constprop.54.4361+0x46>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
 8003664:	1e58      	subs	r0, r3, #1
 8003666:	2800      	cmp	r0, #0
 8003668:	60a0      	str	r0, [r4, #8]
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <chSemSignalWait.constprop.54.4361+0x5c>)
 800366c:	db06      	blt.n	800367c <chSemSignalWait.constprop.54.4361+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800366e:	f7fe fa1f 	bl	8001ab0 <chSchRescheduleS>
    msg = MSG_OK;
 8003672:	2000      	movs	r0, #0
 8003674:	2100      	movs	r1, #0
 8003676:	f381 8811 	msr	BASEPRI, r1
  }
  chSysUnlock();
  return msg;
}
 800367a:	bd10      	pop	{r4, pc}

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 800367c:	4c0c      	ldr	r4, [pc, #48]	; (80036b0 <chSemSignalWait.constprop.54.4361+0x60>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800367e:	6853      	ldr	r3, [r2, #4]
 8003680:	69a4      	ldr	r4, [r4, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8003682:	2005      	movs	r0, #5
 8003684:	e884 000c 	stmia.w	r4, {r2, r3}
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 8003688:	6222      	str	r2, [r4, #32]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800368a:	6054      	str	r4, [r2, #4]
 800368c:	601c      	str	r4, [r3, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 800368e:	f7fe fb97 	bl	8001dc0 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8003692:	6a20      	ldr	r0, [r4, #32]
 8003694:	e7ee      	b.n	8003674 <chSemSignalWait.constprop.54.4361+0x24>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003696:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8003698:	6801      	ldr	r1, [r0, #0]
 800369a:	604c      	str	r4, [r1, #4]
 800369c:	6021      	str	r1, [r4, #0]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 800369e:	f7fe fc17 	bl	8001ed0 <chSchReadyI>
 80036a2:	2200      	movs	r2, #0
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6202      	str	r2, [r0, #32]
 80036a8:	e7dc      	b.n	8003664 <chSemSignalWait.constprop.54.4361+0x14>
 80036aa:	bf00      	nop
 80036ac:	20000810 	.word	0x20000810
 80036b0:	20001e58 	.word	0x20001e58
 80036b4:	f3af 8000 	nop.w
 80036b8:	f3af 8000 	nop.w
 80036bc:	f3af 8000 	nop.w

080036c0 <chCondSignalI.constprop.50.4383>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <chCondSignalI.constprop.50.4383+0x18>)
 80036c2:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 80036c4:	4298      	cmp	r0, r3
 80036c6:	d006      	beq.n	80036d6 <chCondSignalI.constprop.50.4383+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80036c8:	6802      	ldr	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80036ca:	2100      	movs	r1, #0
 80036cc:	6053      	str	r3, [r2, #4]
 80036ce:	6201      	str	r1, [r0, #32]
 80036d0:	601a      	str	r2, [r3, #0]
    chSchReadyI(tp);
 80036d2:	f7fe bbfd 	b.w	8001ed0 <chSchReadyI>
 80036d6:	4770      	bx	lr
 80036d8:	2000081c 	.word	0x2000081c
 80036dc:	f3af 8000 	nop.w

080036e0 <chCondSignal.constprop.51.4377>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 80036e0:	b508      	push	{r3, lr}
 80036e2:	2320      	movs	r3, #32
 80036e4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <chCondSignal.constprop.51.4377+0x24>)
 80036ea:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue))
 80036ec:	4298      	cmp	r0, r3
 80036ee:	d005      	beq.n	80036fc <chCondSignal.constprop.51.4377+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80036f0:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 80036f2:	2100      	movs	r1, #0
 80036f4:	6053      	str	r3, [r2, #4]
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f7fe faaa 	bl	8001c50 <chSchWakeupS>
 80036fc:	2000      	movs	r0, #0
 80036fe:	f380 8811 	msr	BASEPRI, r0
 8003702:	bd08      	pop	{r3, pc}
 8003704:	2000081c 	.word	0x2000081c
 8003708:	f3af 8000 	nop.w
 800370c:	f3af 8000 	nop.w

08003710 <sem3_execute.7095>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8003710:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <sem3_execute.7095+0x80>)
 8003714:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003716:	6998      	ldr	r0, [r3, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8003718:	2400      	movs	r4, #0
 800371a:	6882      	ldr	r2, [r0, #8]
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <sem3_execute.7095+0x84>)
 800371e:	3201      	adds	r2, #1
 8003720:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003724:	9400      	str	r4, [sp, #0]
 8003726:	481c      	ldr	r0, [pc, #112]	; (8003798 <sem3_execute.7095+0x88>)
 8003728:	f7fe fb0a 	bl	8001d40 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 800372c:	4c1b      	ldr	r4, [pc, #108]	; (800379c <sem3_execute.7095+0x8c>)
 800372e:	491c      	ldr	r1, [pc, #112]	; (80037a0 <sem3_execute.7095+0x90>)
 8003730:	6008      	str	r0, [r1, #0]
  chSemSignalWait(&sem1, &sem1);
 8003732:	f7ff ff8d 	bl	8003650 <chSemSignalWait.constprop.54.4361>
 8003736:	6823      	ldr	r3, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 8003738:	2001      	movs	r0, #1
 800373a:	ebb3 0e04 	subs.w	lr, r3, r4
 800373e:	f1de 0200 	rsbs	r2, lr, #0
 8003742:	eb52 010e 	adcs.w	r1, r2, lr
 8003746:	f7fe f84b 	bl	80017e0 <_test_assert>
 800374a:	b108      	cbz	r0, 8003750 <sem3_execute.7095+0x40>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 800374c:	b002      	add	sp, #8
 800374e:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 8003750:	68a1      	ldr	r1, [r4, #8]
 8003752:	2002      	movs	r0, #2
 8003754:	f1d1 0101 	rsbs	r1, r1, #1
 8003758:	bf38      	it	cc
 800375a:	2100      	movcc	r1, #0
 800375c:	f7fe f840 	bl	80017e0 <_test_assert>
 8003760:	2800      	cmp	r0, #0
 8003762:	d1f3      	bne.n	800374c <sem3_execute.7095+0x3c>

  chSemSignalWait(&sem1, &sem1);
 8003764:	f7ff ff74 	bl	8003650 <chSemSignalWait.constprop.54.4361>
 8003768:	6823      	ldr	r3, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 800376a:	2003      	movs	r0, #3
 800376c:	1b1a      	subs	r2, r3, r4
 800376e:	4251      	negs	r1, r2
 8003770:	4151      	adcs	r1, r2
 8003772:	f7fe f835 	bl	80017e0 <_test_assert>
 8003776:	2800      	cmp	r0, #0
 8003778:	d1e8      	bne.n	800374c <sem3_execute.7095+0x3c>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 800377a:	68a3      	ldr	r3, [r4, #8]
 800377c:	2004      	movs	r0, #4
 800377e:	f1d3 0101 	rsbs	r1, r3, #1
 8003782:	bf38      	it	cc
 8003784:	2100      	movcc	r1, #0
}
 8003786:	b002      	add	sp, #8
 8003788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 800378c:	f7fe b828 	b.w	80017e0 <_test_assert>
 8003790:	20001e58 	.word	0x20001e58
 8003794:	08005b41 	.word	0x08005b41
 8003798:	200017e8 	.word	0x200017e8
 800379c:	20000810 	.word	0x20000810
 80037a0:	20001fa8 	.word	0x20001fa8
 80037a4:	f3af 8000 	nop.w
 80037a8:	f3af 8000 	nop.w
 80037ac:	f3af 8000 	nop.w

080037b0 <mtx8_execute.7281>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 80037b0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80037b2:	f641 6358 	movw	r3, #7768	; 0x1e58
 80037b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80037ba:	6998      	ldr	r0, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80037bc:	f241 75e8 	movw	r5, #6120	; 0x17e8
 80037c0:	6886      	ldr	r6, [r0, #8]
 80037c2:	f24a 14cc 	movw	r4, #41420	; 0xa1cc
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 80037c6:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 80037c8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80037cc:	f6c0 0400 	movt	r4, #2048	; 0x800
 80037d0:	f244 6361 	movw	r3, #18017	; 0x4661
 80037d4:	1c72      	adds	r2, r6, #1
 80037d6:	9400      	str	r4, [sp, #0]
 80037d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80037dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7fe faad 	bl	8001d40 <chThdCreateStatic>
 80037e6:	f641 74a8 	movw	r4, #8104	; 0x1fa8
 80037ea:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80037ee:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 80037f0:	f24a 10d0 	movw	r0, #41424	; 0xa1d0
 80037f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80037f8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80037fc:	f643 33c1 	movw	r3, #15297	; 0x3bc1
 8003800:	1cb2      	adds	r2, r6, #2
 8003802:	9000      	str	r0, [sp, #0]
 8003804:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003808:	1868      	adds	r0, r5, r1
 800380a:	f7fe fa99 	bl	8001d40 <chThdCreateStatic>
 800380e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8003810:	f24a 10d4 	movw	r0, #41428	; 0xa1d4
 8003814:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003818:	f645 3311 	movw	r3, #23313	; 0x5b11
 800381c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003820:	1cf2      	adds	r2, r6, #3
 8003822:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003826:	9000      	str	r0, [sp, #0]
 8003828:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800382c:	f7fe fa88 	bl	8001d40 <chThdCreateStatic>
 8003830:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 8003832:	f7ff ff55 	bl	80036e0 <chCondSignal.constprop.51.4377>
  chCondSignal(&c1);
 8003836:	f7ff ff53 	bl	80036e0 <chCondSignal.constprop.51.4377>
  test_wait_threads();
 800383a:	f7fe fd31 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 800383e:	f649 6150 	movw	r1, #40528	; 0x9e50
 8003842:	2001      	movs	r0, #1
 8003844:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8003848:	b002      	add	sp, #8
 800384a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 800384e:	f7fd bf7f 	b.w	8001750 <_test_assert_sequence>
 8003852:	bf00      	nop
 8003854:	f3af 8000 	nop.w
 8003858:	f3af 8000 	nop.w
 800385c:	f3af 8000 	nop.w

08003860 <mtx6_execute.7297>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003862:	f641 6358 	movw	r3, #7768	; 0x1e58
 8003866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800386a:	6998      	ldr	r0, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800386c:	f241 76e8 	movw	r6, #6120	; 0x17e8
 8003870:	6887      	ldr	r7, [r0, #8]
 8003872:	f643 35c1 	movw	r5, #15297	; 0x3bc1
 8003876:	f649 6158 	movw	r1, #40536	; 0x9e58
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 800387a:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800387c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8003880:	f6c0 0500 	movt	r5, #2048	; 0x800
 8003884:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003888:	1c7a      	adds	r2, r7, #1
 800388a:	462b      	mov	r3, r5
 800388c:	9100      	str	r1, [sp, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003894:	f7fe fa54 	bl	8001d40 <chThdCreateStatic>
 8003898:	f641 74a8 	movw	r4, #8104	; 0x1fa8
 800389c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80038a0:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80038a2:	f24a 0070 	movw	r0, #41072	; 0xa070
 80038a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80038aa:	1cba      	adds	r2, r7, #2
 80038ac:	462b      	mov	r3, r5
 80038ae:	9000      	str	r0, [sp, #0]
 80038b0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038b4:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80038b8:	f7fe fa42 	bl	8001d40 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80038bc:	f24a 11d0 	movw	r1, #41424	; 0xa1d0
 80038c0:	f6c0 0100 	movt	r1, #2048	; 0x800

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80038c4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80038c6:	1cfa      	adds	r2, r7, #3
 80038c8:	462b      	mov	r3, r5
 80038ca:	9100      	str	r1, [sp, #0]
 80038cc:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80038d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038d4:	f7fe fa34 	bl	8001d40 <chThdCreateStatic>
 80038d8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80038da:	f24a 10d4 	movw	r0, #41428	; 0xa1d4
 80038de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80038e2:	1d3a      	adds	r2, r7, #4
 80038e4:	462b      	mov	r3, r5
 80038e6:	9000      	str	r0, [sp, #0]
 80038e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80038ec:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80038f0:	f7fe fa26 	bl	8001d40 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80038f4:	f24a 12cc 	movw	r2, #41420	; 0xa1cc
 80038f8:	f6c0 0200 	movt	r2, #2048	; 0x800

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80038fc:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80038fe:	9200      	str	r2, [sp, #0]
 8003900:	462b      	mov	r3, r5
 8003902:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8003906:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800390a:	1d7a      	adds	r2, r7, #5
 800390c:	f7fe fa18 	bl	8001d40 <chThdCreateStatic>
 8003910:	2320      	movs	r3, #32
 8003912:	6120      	str	r0, [r4, #16]
 8003914:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8003918:	f7ff fed2 	bl	80036c0 <chCondSignalI.constprop.50.4383>
  chCondSignalI(&c1);
 800391c:	f7ff fed0 	bl	80036c0 <chCondSignalI.constprop.50.4383>
  chCondSignalI(&c1);
 8003920:	f7ff fece 	bl	80036c0 <chCondSignalI.constprop.50.4383>
  chCondSignalI(&c1);
 8003924:	f7ff fecc 	bl	80036c0 <chCondSignalI.constprop.50.4383>
  chCondSignalI(&c1);
 8003928:	f7ff feca 	bl	80036c0 <chCondSignalI.constprop.50.4383>
  chSchRescheduleS();
 800392c:	f7fe f8c0 	bl	8001ab0 <chSchRescheduleS>
 8003930:	2100      	movs	r1, #0
 8003932:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  test_wait_threads();
 8003936:	f7fe fcb3 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 800393a:	f649 6154 	movw	r1, #40532	; 0x9e54
 800393e:	2001      	movs	r0, #1
 8003940:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8003944:	b003      	add	sp, #12
 8003946:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800394a:	f7fd bf01 	b.w	8001750 <_test_assert_sequence>
 800394e:	bf00      	nop

08003950 <mtx7_execute.7295>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003950:	b530      	push	{r4, r5, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <mtx7_execute.7295+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003954:	4c2c      	ldr	r4, [pc, #176]	; (8003a08 <mtx7_execute.7295+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003956:	6998      	ldr	r0, [r3, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8003958:	b083      	sub	sp, #12
 800395a:	6885      	ldr	r5, [r0, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800395c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003960:	1c6a      	adds	r2, r5, #1
 8003962:	9400      	str	r4, [sp, #0]
 8003964:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <mtx7_execute.7295+0xbc>)
 8003966:	482a      	ldr	r0, [pc, #168]	; (8003a10 <mtx7_execute.7295+0xc0>)
 8003968:	f7fe f9ea 	bl	8001d40 <chThdCreateStatic>
 800396c:	4c29      	ldr	r4, [pc, #164]	; (8003a14 <mtx7_execute.7295+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 800396e:	492a      	ldr	r1, [pc, #168]	; (8003a18 <mtx7_execute.7295+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8003970:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003972:	1caa      	adds	r2, r5, #2
 8003974:	9100      	str	r1, [sp, #0]
 8003976:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <mtx7_execute.7295+0xbc>)
 8003978:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800397c:	4827      	ldr	r0, [pc, #156]	; (8003a1c <mtx7_execute.7295+0xcc>)
 800397e:	f7fe f9df 	bl	8001d40 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <mtx7_execute.7295+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8003984:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8003986:	1cea      	adds	r2, r5, #3
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <mtx7_execute.7295+0xbc>)
 8003990:	4824      	ldr	r0, [pc, #144]	; (8003a24 <mtx7_execute.7295+0xd4>)
 8003992:	f7fe f9d5 	bl	8001d40 <chThdCreateStatic>
 8003996:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8003998:	4823      	ldr	r0, [pc, #140]	; (8003a28 <mtx7_execute.7295+0xd8>)
 800399a:	1d2a      	adds	r2, r5, #4
 800399c:	9000      	str	r0, [sp, #0]
 800399e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <mtx7_execute.7295+0xbc>)
 80039a4:	4821      	ldr	r0, [pc, #132]	; (8003a2c <mtx7_execute.7295+0xdc>)
 80039a6:	f7fe f9cb 	bl	8001d40 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80039aa:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <mtx7_execute.7295+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80039ac:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80039ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80039b2:	9200      	str	r2, [sp, #0]
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <mtx7_execute.7295+0xbc>)
 80039b6:	1d6a      	adds	r2, r5, #5
 80039b8:	481e      	ldr	r0, [pc, #120]	; (8003a34 <mtx7_execute.7295+0xe4>)
 80039ba:	f7fe f9c1 	bl	8001d40 <chThdCreateStatic>
 80039be:	6120      	str	r0, [r4, #16]
 80039c0:	2420      	movs	r4, #32
 80039c2:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 80039c6:	4c1c      	ldr	r4, [pc, #112]	; (8003a38 <mtx7_execute.7295+0xe8>)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80039cc:	bf18      	it	ne
 80039ce:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 80039d2:	d009      	beq.n	80039e8 <mtx7_execute.7295+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80039d4:	6819      	ldr	r1, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80039d6:	4618      	mov	r0, r3
 80039d8:	604c      	str	r4, [r1, #4]
 80039da:	6021      	str	r1, [r4, #0]
 80039dc:	f7fe fa78 	bl	8001ed0 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 80039e0:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 80039e2:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d1f5      	bne.n	80039d4 <mtx7_execute.7295+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 80039e8:	f7fe f862 	bl	8001ab0 <chSchRescheduleS>
 80039ec:	2000      	movs	r0, #0
 80039ee:	f380 8811 	msr	BASEPRI, r0
  chCondBroadcast(&c1);
  test_wait_threads();
 80039f2:	f7fe fc55 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80039f6:	4911      	ldr	r1, [pc, #68]	; (8003a3c <mtx7_execute.7295+0xec>)
 80039f8:	2001      	movs	r0, #1
}
 80039fa:	b003      	add	sp, #12
 80039fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8003a00:	f7fd bea6 	b.w	8001750 <_test_assert_sequence>
 8003a04:	20001e58 	.word	0x20001e58
 8003a08:	08009e58 	.word	0x08009e58
 8003a0c:	08003bc1 	.word	0x08003bc1
 8003a10:	200017e8 	.word	0x200017e8
 8003a14:	20001fa8 	.word	0x20001fa8
 8003a18:	0800a070 	.word	0x0800a070
 8003a1c:	20001930 	.word	0x20001930
 8003a20:	0800a1d0 	.word	0x0800a1d0
 8003a24:	20001a78 	.word	0x20001a78
 8003a28:	0800a1d4 	.word	0x0800a1d4
 8003a2c:	20001bc0 	.word	0x20001bc0
 8003a30:	0800a1cc 	.word	0x0800a1cc
 8003a34:	20001d08 	.word	0x20001d08
 8003a38:	2000081c 	.word	0x2000081c
 8003a3c:	08009e54 	.word	0x08009e54

08003a40 <sem1_execute.7091>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8003a44:	4e4f      	ldr	r6, [pc, #316]	; (8003b84 <sem1_execute.7091+0x144>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003a46:	4f50      	ldr	r7, [pc, #320]	; (8003b88 <sem1_execute.7091+0x148>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003a48:	69b3      	ldr	r3, [r6, #24]
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 8003a4a:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a52:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <sem1_execute.7091+0x14c>)
 8003a54:	3205      	adds	r2, #5
 8003a56:	9700      	str	r7, [sp, #0]
 8003a58:	484d      	ldr	r0, [pc, #308]	; (8003b90 <sem1_execute.7091+0x150>)
 8003a5a:	f7fe f971 	bl	8001d40 <chThdCreateStatic>
 8003a5e:	4d4d      	ldr	r5, [pc, #308]	; (8003b94 <sem1_execute.7091+0x154>)
 8003a60:	69b1      	ldr	r1, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003a62:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <sem1_execute.7091+0x14c>)
 8003a64:	688c      	ldr	r4, [r1, #8]
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003a66:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003a68:	484b      	ldr	r0, [pc, #300]	; (8003b98 <sem1_execute.7091+0x158>)
 8003a6a:	1c62      	adds	r2, r4, #1
 8003a6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	484a      	ldr	r0, [pc, #296]	; (8003b9c <sem1_execute.7091+0x15c>)
 8003a74:	f7fe f964 	bl	8001d40 <chThdCreateStatic>
 8003a78:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003a7a:	4c49      	ldr	r4, [pc, #292]	; (8003ba0 <sem1_execute.7091+0x160>)
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8003a82:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003a84:	3203      	adds	r2, #3
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <sem1_execute.7091+0x14c>)
 8003a88:	9400      	str	r4, [sp, #0]
 8003a8a:	4846      	ldr	r0, [pc, #280]	; (8003ba4 <sem1_execute.7091+0x164>)
 8003a8c:	f7fe f958 	bl	8001d40 <chThdCreateStatic>
 8003a90:	69b1      	ldr	r1, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003a92:	688b      	ldr	r3, [r1, #8]

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8003a94:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003a96:	4844      	ldr	r0, [pc, #272]	; (8003ba8 <sem1_execute.7091+0x168>)
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <sem1_execute.7091+0x14c>)
 8003aa0:	9000      	str	r0, [sp, #0]
 8003aa2:	4842      	ldr	r0, [pc, #264]	; (8003bac <sem1_execute.7091+0x16c>)
 8003aa4:	f7fe f94c 	bl	8001d40 <chThdCreateStatic>
 8003aa8:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003aaa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003aae:	6894      	ldr	r4, [r2, #8]
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8003ab0:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003ab2:	483f      	ldr	r0, [pc, #252]	; (8003bb0 <sem1_execute.7091+0x170>)
 8003ab4:	1ca2      	adds	r2, r4, #2
 8003ab6:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <sem1_execute.7091+0x14c>)
 8003ab8:	9000      	str	r0, [sp, #0]
 8003aba:	483e      	ldr	r0, [pc, #248]	; (8003bb4 <sem1_execute.7091+0x174>)
 8003abc:	f7fe f940 	bl	8001d40 <chThdCreateStatic>
  chSemSignal(&sem1);
 8003ac0:	4c3d      	ldr	r4, [pc, #244]	; (8003bb8 <sem1_execute.7091+0x178>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8003ac2:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7fe f923 	bl	8001d10 <chSemSignal>
  chSemSignal(&sem1);
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7fe f920 	bl	8001d10 <chSemSignal>
  chSemSignal(&sem1);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7fe f91d 	bl	8001d10 <chSemSignal>
  chSemSignal(&sem1);
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7fe f91a 	bl	8001d10 <chSemSignal>
  chSemSignal(&sem1);
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7fe f917 	bl	8001d10 <chSemSignal>
  test_wait_threads();
 8003ae2:	f7fe fbdd 	bl	80022a0 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	4934      	ldr	r1, [pc, #208]	; (8003bbc <sem1_execute.7091+0x17c>)
 8003aea:	f7fd fe31 	bl	8001750 <_test_assert_sequence>
 8003aee:	4680      	mov	r8, r0
 8003af0:	b110      	cbz	r0, 8003af8 <sem1_execute.7091+0xb8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8003af2:	b002      	add	sp, #8
 8003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003af8:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8003afa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	4823      	ldr	r0, [pc, #140]	; (8003b90 <sem1_execute.7091+0x150>)
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <sem1_execute.7091+0x14c>)
 8003b04:	9700      	str	r7, [sp, #0]
 8003b06:	3205      	adds	r2, #5
 8003b08:	f7fe f91a 	bl	8001d40 <chThdCreateStatic>
 8003b0c:	6028      	str	r0, [r5, #0]
 8003b0e:	2520      	movs	r5, #32
 8003b10:	f385 8811 	msr	BASEPRI, r5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0)
 8003b14:	68a1      	ldr	r1, [r4, #8]
 8003b16:	1c48      	adds	r0, r1, #1
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	60a0      	str	r0, [r4, #8]
 8003b1c:	dd29      	ble.n	8003b72 <sem1_execute.7091+0x132>
 8003b1e:	68a5      	ldr	r5, [r4, #8]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <sem1_execute.7091+0x178>)
 8003b22:	1c69      	adds	r1, r5, #1
 8003b24:	2900      	cmp	r1, #0
 8003b26:	60a1      	str	r1, [r4, #8]
 8003b28:	dd1a      	ble.n	8003b60 <sem1_execute.7091+0x120>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 8003b2a:	f7fd ffc1 	bl	8001ab0 <chSchRescheduleS>
 8003b2e:	2500      	movs	r5, #0
 8003b30:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 8003b34:	f7fe fbb4 	bl	80022a0 <test_wait_threads>
 8003b38:	2020      	movs	r0, #32
 8003b3a:	f380 8811 	msr	BASEPRI, r0
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 8003b3e:	68a2      	ldr	r2, [r4, #8]
 8003b40:	2002      	movs	r0, #2
 8003b42:	f1b2 0c01 	subs.w	ip, r2, #1
 8003b46:	f1dc 0100 	rsbs	r1, ip, #0
 8003b4a:	eb51 010c 	adcs.w	r1, r1, ip
 8003b4e:	f7fd fe47 	bl	80017e0 <_test_assert>
 8003b52:	b910      	cbnz	r0, 8003b5a <sem1_execute.7091+0x11a>
 8003b54:	f380 8811 	msr	BASEPRI, r0
 8003b58:	e7cb      	b.n	8003af2 <sem1_execute.7091+0xb2>
 8003b5a:	f385 8811 	msr	BASEPRI, r5
 8003b5e:	e7c8      	b.n	8003af2 <sem1_execute.7091+0xb2>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003b60:	6810      	ldr	r0, [r2, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 8003b62:	2500      	movs	r5, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8003b64:	6803      	ldr	r3, [r0, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	f7fe f9b1 	bl	8001ed0 <chSchReadyI>
 8003b6e:	6205      	str	r5, [r0, #32]
 8003b70:	e7db      	b.n	8003b2a <sem1_execute.7091+0xea>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8003b72:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8003b74:	6803      	ldr	r3, [r0, #0]
 8003b76:	605c      	str	r4, [r3, #4]
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	f7fe f9a9 	bl	8001ed0 <chSchReadyI>
 8003b7e:	f8c0 8020 	str.w	r8, [r0, #32]
 8003b82:	e7cc      	b.n	8003b1e <sem1_execute.7091+0xde>
 8003b84:	20001e58 	.word	0x20001e58
 8003b88:	0800a1cc 	.word	0x0800a1cc
 8003b8c:	080058c1 	.word	0x080058c1
 8003b90:	200017e8 	.word	0x200017e8
 8003b94:	20001fa8 	.word	0x20001fa8
 8003b98:	0800a1d4 	.word	0x0800a1d4
 8003b9c:	20001930 	.word	0x20001930
 8003ba0:	0800a1d0 	.word	0x0800a1d0
 8003ba4:	20001a78 	.word	0x20001a78
 8003ba8:	0800a070 	.word	0x0800a070
 8003bac:	20001bc0 	.word	0x20001bc0
 8003bb0:	08009e58 	.word	0x08009e58
 8003bb4:	20001d08 	.word	0x20001d08
 8003bb8:	20000810 	.word	0x20000810
 8003bbc:	08009e54 	.word	0x08009e54

08003bc0 <thread10.7266.4368>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	4607      	mov	r7, r0

  chMtxLock(&m1);
 8003bc4:	4815      	ldr	r0, [pc, #84]	; (8003c1c <thread10.7266.4368+0x5c>)
 8003bc6:	f7fe faa3 	bl	8002110 <chMtxLock>
 8003bca:	2320      	movs	r3, #32
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8003bd0:	4813      	ldr	r0, [pc, #76]	; (8003c20 <thread10.7266.4368+0x60>)
 8003bd2:	6984      	ldr	r4, [r0, #24]
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8003bd4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f7fe fa0a 	bl	8001ff0 <chMtxUnlockS>
  ctp->p_u.wtobjp = cp;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <thread10.7266.4368+0x64>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003bde:	461d      	mov	r5, r3
 8003be0:	6223      	str	r3, [r4, #32]
  do {
    cp = cp->p_next;
 8003be2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	d003      	beq.n	8003bf0 <thread10.7266.4368+0x30>
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	68a2      	ldr	r2, [r4, #8]
 8003bec:	4291      	cmp	r1, r2
 8003bee:	d2f8      	bcs.n	8003be2 <thread10.7266.4368+0x22>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8003bf0:	6858      	ldr	r0, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8003bf2:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8003bf4:	6060      	str	r0, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8003bf6:	6004      	str	r4, [r0, #0]
 8003bf8:	605c      	str	r4, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8003bfa:	2007      	movs	r0, #7
 8003bfc:	f7fe f8e0 	bl	8001dc0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8003c00:	4630      	mov	r0, r6
 8003c02:	f7fe fa1d 	bl	8002040 <chMtxLockS>
 8003c06:	2400      	movs	r4, #0
 8003c08:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8003c0c:	7838      	ldrb	r0, [r7, #0]
 8003c0e:	f7fd fdff 	bl	8001810 <test_emit_token>
  chMtxUnlock(&m1);
 8003c12:	4802      	ldr	r0, [pc, #8]	; (8003c1c <thread10.7266.4368+0x5c>)
 8003c14:	f7fe f84c 	bl	8001cb0 <chMtxUnlock>
  return 0;
}
 8003c18:	4620      	mov	r0, r4
 8003c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c1c:	20000800 	.word	0x20000800
 8003c20:	20001e58 	.word	0x20001e58
 8003c24:	2000081c 	.word	0x2000081c
 8003c28:	f3af 8000 	nop.w
 8003c2c:	f3af 8000 	nop.w

08003c30 <spicb.11370>:
}

/*
 * SPI end transfer callback.
 */
static void spicb(SPIDriver *spip) {
 8003c30:	b508      	push	{r3, lr}
 8003c32:	2320      	movs	r3, #32
 8003c34:	f383 8811 	msr	BASEPRI, r3
  /* On transfer end just releases the slave select line.*/
  chSysLockFromISR();
  spiUnselectI(spip);
 8003c38:	f002 f952 	bl	8005ee0 <spi_lld_unselect>
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	f380 8811 	msr	BASEPRI, r0
 8003c42:	bd08      	pop	{r3, pc}
 8003c44:	f3af 8000 	nop.w
 8003c48:	f3af 8000 	nop.w
 8003c4c:	f3af 8000 	nop.w

08003c50 <chVTDoResetI>:
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8003c50:	4915      	ldr	r1, [pc, #84]	; (8003ca8 <chVTDoResetI+0x58>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8003c52:	b4f0      	push	{r4, r5, r6, r7}
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 8003c54:	e890 0014 	ldmia.w	r0, {r2, r4}
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8003c58:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8003c5c:	8916      	ldrh	r6, [r2, #8]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003c5e:	460b      	mov	r3, r1
 8003c60:	f853 5f1c 	ldr.w	r5, [r3, #28]!
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 8003c64:	6022      	str	r2, [r4, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8003c66:	6807      	ldr	r7, [r0, #0]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8003c68:	44b4      	add	ip, r6
 8003c6a:	f8a2 c008 	strh.w	ip, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 8003c6e:	2600      	movs	r6, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8003c70:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003c74:	429d      	cmp	r5, r3
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8003c76:	607c      	str	r4, [r7, #4]
  vtp->vt_func = (vtfunc_t)NULL;
 8003c78:	60c6      	str	r6, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8003c7a:	848a      	strh	r2, [r1, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8003c7c:	d010      	beq.n	8003ca0 <chVTDoResetI+0x50>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8003c7e:	8928      	ldrh	r0, [r5, #8]
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8003c80:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8003c82:	2801      	cmp	r0, #1
 8003c84:	d906      	bls.n	8003c94 <chVTDoResetI+0x44>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8003c86:	1841      	adds	r1, r0, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003c88:	b28b      	uxth	r3, r1
 8003c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c8e:	6353      	str	r3, [r2, #52]	; 0x34
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003c90:	bcf0      	pop	{r4, r5, r6, r7}
 8003c92:	4770      	bx	lr
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      else
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8003c94:	1c8b      	adds	r3, r1, #2
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c9c:	6342      	str	r2, [r0, #52]	; 0x34
 8003c9e:	e7f7      	b.n	8003c90 <chVTDoResetI+0x40>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ca4:	60c6      	str	r6, [r0, #12]
 8003ca6:	e7f3      	b.n	8003c90 <chVTDoResetI+0x40>
 8003ca8:	20001e58 	.word	0x20001e58
 8003cac:	f3af 8000 	nop.w

08003cb0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8003cb0:	b4f0      	push	{r4, r5, r6, r7}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 8003cb2:	4d1f      	ldr	r5, [pc, #124]	; (8003d30 <chVTDoSetI+0x80>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8003cb4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8003cb8:	462e      	mov	r6, r5
 8003cba:	f856 4f1c 	ldr.w	r4, [r6, #28]!
 8003cbe:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;
 8003cc2:	2901      	cmp	r1, #1
 8003cc4:	bf98      	it	ls
 8003cc6:	2102      	movls	r1, #2

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8003cc8:	42b4      	cmp	r4, r6
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8003cca:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 8003ccc:	60c2      	str	r2, [r0, #12]
 8003cce:	fa1f fc8c 	uxth.w	ip, ip
    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 8003cd2:	d021      	beq.n	8003d18 <chVTDoSetI+0x68>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8003cd4:	8cea      	ldrh	r2, [r5, #38]	; 0x26

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8003cd6:	8923      	ldrh	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 8003cd8:	ebc2 0c0c 	rsb	ip, r2, ip
 8003cdc:	4461      	add	r1, ip
 8003cde:	b289      	uxth	r1, r1

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	d315      	bcc.n	8003d10 <chVTDoSetI+0x60>
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8003ce4:	4299      	cmp	r1, r3
 8003ce6:	d905      	bls.n	8003cf4 <chVTDoSetI+0x44>
    delay -= p->vt_delta;
    p = p->vt_next;
 8003ce8:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 8003cea:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8003cec:	8923      	ldrh	r3, [r4, #8]
    delay -= p->vt_delta;
 8003cee:	b289      	uxth	r1, r1
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d3f9      	bcc.n	8003ce8 <chVTDoSetI+0x38>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay
 8003cf4:	8101      	strh	r1, [r0, #8]
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8003cf6:	6863      	ldr	r3, [r4, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8003cf8:	8922      	ldrh	r2, [r4, #8]
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 8003cfa:	6004      	str	r4, [r0, #0]
 8003cfc:	6043      	str	r3, [r0, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 8003cfe:	6018      	str	r0, [r3, #0]
 8003d00:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8003d02:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_delta = (systime_t)-1;
 8003d04:	f64f 70ff 	movw	r0, #65535	; 0xffff
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 8003d08:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8003d0a:	84a8      	strh	r0, [r5, #36]	; 0x24
}
 8003d0c:	bcf0      	pop	{r4, r5, r6, r7}
 8003d0e:	4770      	bx	lr
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8003d10:	188a      	adds	r2, r1, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003d12:	b292      	uxth	r2, r2
 8003d14:	637a      	str	r2, [r7, #52]	; 0x34
 8003d16:	e7e5      	b.n	8003ce4 <chVTDoSetI+0x34>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8003d18:	eb01 030c 	add.w	r3, r1, ip
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8003d20:	2300      	movs	r3, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003d22:	2202      	movs	r2, #2
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8003d24:	f8a5 c026 	strh.w	ip, [r5, #38]	; 0x26
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003d2c:	60fa      	str	r2, [r7, #12]
 8003d2e:	e7d9      	b.n	8003ce4 <chVTDoSetI+0x34>
 8003d30:	20001e58 	.word	0x20001e58
 8003d34:	f3af 8000 	nop.w
 8003d38:	f3af 8000 	nop.w
 8003d3c:	f3af 8000 	nop.w

08003d40 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8003d40:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8003d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d46:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8003d48:	b087      	sub	sp, #28
 8003d4a:	4605      	mov	r5, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8003d4c:	d011      	beq.n	8003d72 <chSchGoSleepTimeoutS+0x32>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8003d4e:	4c0b      	ldr	r4, [pc, #44]	; (8003d7c <chSchGoSleepTimeoutS+0x3c>)
 8003d50:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <chSchGoSleepTimeoutS+0x40>)
 8003d52:	69a3      	ldr	r3, [r4, #24]
 8003d54:	a801      	add	r0, sp, #4
 8003d56:	f7ff ffab 	bl	8003cb0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7fe f830 	bl	8001dc0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8003d60:	9804      	ldr	r0, [sp, #16]
 8003d62:	b110      	cbz	r0, 8003d6a <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8003d64:	a801      	add	r0, sp, #4
 8003d66:	f7ff ff73 	bl	8003c50 <chVTDoResetI>
  }
  else
    chSchGoSleepS(newstate);
  return currp->p_u.rdymsg;
 8003d6a:	69a1      	ldr	r1, [r4, #24]
}
 8003d6c:	6a08      	ldr	r0, [r1, #32]
 8003d6e:	b007      	add	sp, #28
 8003d70:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8003d72:	f7fe f825 	bl	8001dc0 <chSchGoSleepS>
 8003d76:	4c01      	ldr	r4, [pc, #4]	; (8003d7c <chSchGoSleepTimeoutS+0x3c>)
 8003d78:	e7f7      	b.n	8003d6a <chSchGoSleepTimeoutS+0x2a>
 8003d7a:	bf00      	nop
 8003d7c:	20001e58 	.word	0x20001e58
 8003d80:	080015e1 	.word	0x080015e1
 8003d84:	f3af 8000 	nop.w
 8003d88:	f3af 8000 	nop.w
 8003d8c:	f3af 8000 	nop.w

08003d90 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8003d90:	b410      	push	{r4}
 8003d92:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout)
 8003d94:	b151      	cbz	r1, 8003dac <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <chThdEnqueueTimeoutS+0x24>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8003d98:	6844      	ldr	r4, [r0, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003d9c:	2004      	movs	r0, #4
 8003d9e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8003da2:	6053      	str	r3, [r2, #4]
 8003da4:	6023      	str	r3, [r4, #0]
}
 8003da6:	bc10      	pop	{r4}

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003da8:	f7ff bfca 	b.w	8003d40 <chSchGoSleepTimeoutS>
}
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	bc10      	pop	{r4}
 8003db2:	4770      	bx	lr
 8003db4:	20001e58 	.word	0x20001e58
 8003db8:	f3af 8000 	nop.w
 8003dbc:	f3af 8000 	nop.w

08003dc0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003dc0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8003dc2:	6880      	ldr	r0, [r0, #8]
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003dc4:	b410      	push	{r4}
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8003dc6:	1e42      	subs	r2, r0, #1
 8003dc8:	2a00      	cmp	r2, #0
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8003dca:	460c      	mov	r4, r1
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8003dcc:	609a      	str	r2, [r3, #8]
 8003dce:	db02      	blt.n	8003dd6 <chSemWaitTimeoutS+0x16>
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
 8003dd0:	2000      	movs	r0, #0
}
 8003dd2:	bc10      	pop	{r4}
 8003dd4:	4770      	bx	lr
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8003dd6:	b159      	cbz	r1, 8003df0 <chSemWaitTimeoutS+0x30>
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8003dd8:	4c07      	ldr	r4, [pc, #28]	; (8003df8 <chSemWaitTimeoutS+0x38>)
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8003dda:	2005      	movs	r0, #5
  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8003ddc:	69a2      	ldr	r2, [r4, #24]
 8003dde:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8003de0:	685c      	ldr	r4, [r3, #4]
 8003de2:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8003dea:	bc10      	pop	{r4}
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8003dec:	f7ff bfa8 	b.w	8003d40 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8003df0:	6098      	str	r0, [r3, #8]
      return MSG_TIMEOUT;
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295
 8003df6:	e7ec      	b.n	8003dd2 <chSemWaitTimeoutS+0x12>
 8003df8:	20001e58 	.word	0x20001e58
 8003dfc:	f3af 8000 	nop.w

08003e00 <chMBFetch.constprop.28>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4605      	mov	r5, r0
 8003e04:	2320      	movs	r3, #32
 8003e06:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 8003e0a:	480d      	ldr	r0, [pc, #52]	; (8003e40 <chMBFetch.constprop.28+0x40>)
 8003e0c:	f7ff ffd8 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8003e10:	4604      	mov	r4, r0
 8003e12:	b980      	cbnz	r0, 8003e36 <chMBFetch.constprop.28+0x36>
    *msgp = *mbp->mb_rdptr++;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <chMBFetch.constprop.28+0x44>)
 8003e16:	68da      	ldr	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
 8003e18:	6859      	ldr	r1, [r3, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8003e1a:	f852 0b04 	ldr.w	r0, [r2], #4
    if (mbp->mb_rdptr >= mbp->mb_top)
 8003e1e:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8003e20:	6028      	str	r0, [r5, #0]
 8003e22:	60da      	str	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8003e24:	bf28      	it	cs
 8003e26:	681a      	ldrcs	r2, [r3, #0]
    chSemSignalI(&mbp->mb_emptysem);
 8003e28:	4807      	ldr	r0, [pc, #28]	; (8003e48 <chMBFetch.constprop.28+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8003e2a:	bf28      	it	cs
 8003e2c:	60da      	strcs	r2, [r3, #12]
    chSemSignalI(&mbp->mb_emptysem);
 8003e2e:	f7fe fadf 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 8003e32:	f7fd fe3d 	bl	8001ab0 <chSchRescheduleS>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();
  return rdymsg;
}
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	20000cd4 	.word	0x20000cd4
 8003e44:	20000cc4 	.word	0x20000cc4
 8003e48:	20000ce0 	.word	0x20000ce0
 8003e4c:	00000000 	.word	0x00000000

08003e50 <test_start_timer.constprop.21>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8003e50:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <test_start_timer.constprop.21+0x30>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	2020      	movs	r0, #32
 8003e5a:	f380 8811 	msr	BASEPRI, r0
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 8003e5e:	4809      	ldr	r0, [pc, #36]	; (8003e84 <test_start_timer.constprop.21+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp))
 8003e60:	68c1      	ldr	r1, [r0, #12]
 8003e62:	b109      	cbz	r1, 8003e68 <test_start_timer.constprop.21+0x18>
    chVTDoResetI(vtp);
 8003e64:	f7ff fef4 	bl	8003c50 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8003e68:	4806      	ldr	r0, [pc, #24]	; (8003e84 <test_start_timer.constprop.21+0x34>)
 8003e6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003e6e:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <test_start_timer.constprop.21+0x38>)
 8003e70:	2300      	movs	r3, #0
 8003e72:	f7ff ff1d 	bl	8003cb0 <chVTDoSetI>
 8003e76:	2200      	movs	r2, #0
 8003e78:	f382 8811 	msr	BASEPRI, r2
 8003e7c:	bd08      	pop	{r3, pc}
 8003e7e:	bf00      	nop
 8003e80:	200017c0 	.word	0x200017c0
 8003e84:	20000d34 	.word	0x20000d34
 8003e88:	08001591 	.word	0x08001591
 8003e8c:	f3af 8000 	nop.w

08003e90 <chThdCreateFromMemoryPool.constprop.57>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8003e92:	4c0f      	ldr	r4, [pc, #60]	; (8003ed0 <chThdCreateFromMemoryPool.constprop.57+0x40>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8003e94:	b083      	sub	sp, #12
 8003e96:	4607      	mov	r7, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8003e98:	4620      	mov	r0, r4
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8003e9a:	460e      	mov	r6, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8003e9c:	f7fd fd58 	bl	8001950 <chPoolAlloc>
  if (wsp == NULL)
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b190      	cbz	r0, 8003eca <chThdCreateFromMemoryPool.constprop.57+0x3a>
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <chThdCreateFromMemoryPool.constprop.57+0x44>)
 8003eac:	6861      	ldr	r1, [r4, #4]
 8003eae:	463a      	mov	r2, r7
 8003eb0:	9600      	str	r6, [sp, #0]
 8003eb2:	f7fd fda5 	bl	8001a00 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	7741      	strb	r1, [r0, #29]
  tp->p_mpool = mp;
 8003eba:	6404      	str	r4, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8003ebc:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8003ebe:	4605      	mov	r5, r0
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8003ec0:	f7fd fec6 	bl	8001c50 <chSchWakeupS>
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return tp;
}
 8003eca:	4628      	mov	r0, r5
 8003ecc:	b003      	add	sp, #12
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed0:	20000d68 	.word	0x20000d68
 8003ed4:	08005881 	.word	0x08005881
 8003ed8:	f3af 8000 	nop.w
 8003edc:	f3af 8000 	nop.w

08003ee0 <chEvtGetAndClearEvents.constprop.44>:
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8003ee6:	f641 6058 	movw	r0, #7768	; 0x1e58
 8003eea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003eee:	6982      	ldr	r2, [r0, #24]
  currp->p_epending &= ~events;
 8003ef0:	2100      	movs	r1, #0
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 8003ef2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 8003ef4:	6351      	str	r1, [r2, #52]	; 0x34
 8003ef6:	f381 8811 	msr	BASEPRI, r1

  chSysUnlock();
  return m;
}
 8003efa:	4770      	bx	lr
 8003efc:	f3af 8000 	nop.w

08003f00 <evt1_setup.7710>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8003f00:	f7ff bfee 	b.w	8003ee0 <chEvtGetAndClearEvents.constprop.44>
 8003f04:	f3af 8000 	nop.w
 8003f08:	f3af 8000 	nop.w
 8003f0c:	f3af 8000 	nop.w

08003f10 <evt2_setup.7708>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8003f10:	f7ff bfe6 	b.w	8003ee0 <chEvtGetAndClearEvents.constprop.44>
 8003f14:	f3af 8000 	nop.w
 8003f18:	f3af 8000 	nop.w
 8003f1c:	f3af 8000 	nop.w

08003f20 <evt3_setup.7706>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8003f20:	f7ff bfde 	b.w	8003ee0 <chEvtGetAndClearEvents.constprop.44>
 8003f24:	f3af 8000 	nop.w
 8003f28:	f3af 8000 	nop.w
 8003f2c:	f3af 8000 	nop.w

08003f30 <chEvtWaitOne.constprop.40>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <chEvtWaitOne.constprop.40+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8003f32:	b510      	push	{r4, lr}
 8003f34:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 8003f36:	699c      	ldr	r4, [r3, #24]
 8003f38:	f380 8811 	msr	BASEPRI, r0
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8003f3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f3e:	b932      	cbnz	r2, 8003f4e <chEvtWaitOne.constprop.40+0x1e>
    ctp->p_u.ewmask = events;
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295
 8003f44:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003f46:	200a      	movs	r0, #10
 8003f48:	f7fd ff3a 	bl	8001dc0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8003f4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8003f4e:	4250      	negs	r0, r2
 8003f50:	4010      	ands	r0, r2
  ctp->p_epending &= ~m;
 8003f52:	ea22 0200 	bic.w	r2, r2, r0
 8003f56:	6362      	str	r2, [r4, #52]	; 0x34
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 8003f5e:	bd10      	pop	{r4, pc}
 8003f60:	20001e58 	.word	0x20001e58
 8003f64:	f3af 8000 	nop.w
 8003f68:	f3af 8000 	nop.w
 8003f6c:	f3af 8000 	nop.w

08003f70 <chEvtWaitAny.constprop.39>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <chEvtWaitAny.constprop.39+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8003f72:	b510      	push	{r4, lr}
 8003f74:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 8003f76:	699c      	ldr	r4, [r3, #24]
 8003f78:	f380 8811 	msr	BASEPRI, r0
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8003f7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003f7e:	b930      	cbnz	r0, 8003f8e <chEvtWaitAny.constprop.39+0x1e>
    ctp->p_u.ewmask = events;
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003f84:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8003f86:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8003f88:	f7fd ff1a 	bl	8001dc0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 8003f8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8003f8e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f90:	2300      	movs	r3, #0
 8003f92:	ea22 0200 	bic.w	r2, r2, r0
 8003f96:	6362      	str	r2, [r4, #52]	; 0x34
 8003f98:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20001e58 	.word	0x20001e58
	...

08003fb0 <chMBPostI.constprop.31>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <chMBPostI.constprop.31+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8003fb6:	2900      	cmp	r1, #0
 8003fb8:	dd10      	ble.n	8003fdc <chMBPostI.constprop.31+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8003fba:	689a      	ldr	r2, [r3, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8003fbc:	3901      	subs	r1, #1
  if (mbp->mb_wrptr >= mbp->mb_top)
 8003fbe:	685c      	ldr	r4, [r3, #4]
 8003fc0:	6259      	str	r1, [r3, #36]	; 0x24
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8003fc2:	f842 0b04 	str.w	r0, [r2], #4
  if (mbp->mb_wrptr >= mbp->mb_top)
 8003fc6:	42a2      	cmp	r2, r4
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 8003fc8:	609a      	str	r2, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 8003fca:	bf28      	it	cs
 8003fcc:	681a      	ldrcs	r2, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8003fce:	4806      	ldr	r0, [pc, #24]	; (8003fe8 <chMBPostI.constprop.31+0x38>)
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 8003fd0:	bf28      	it	cs
 8003fd2:	609a      	strcs	r2, [r3, #8]
  chSemSignalI(&mbp->mb_fullsem);
 8003fd4:	f7fe fa0c 	bl	80023f0 <chSemSignalI>
  return MSG_OK;
 8003fd8:	2000      	movs	r0, #0
 8003fda:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000cc4 	.word	0x20000cc4
 8003fe8:	20000cd4 	.word	0x20000cd4
 8003fec:	f3af 8000 	nop.w

08003ff0 <chMBPostAheadI.constprop.29>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <chMBPostAheadI.constprop.29+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	dd10      	ble.n	800401c <chMBPostAheadI.constprop.29+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	681c      	ldr	r4, [r3, #0]
 8003ffe:	3a04      	subs	r2, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 8004000:	3901      	subs	r1, #1
 8004002:	42a2      	cmp	r2, r4
 8004004:	6259      	str	r1, [r3, #36]	; 0x24
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	d202      	bcs.n	8004010 <chMBPostAheadI.constprop.29+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	3a04      	subs	r2, #4
 800400e:	60da      	str	r2, [r3, #12]
  *mbp->mb_rdptr = msg;
 8004010:	6010      	str	r0, [r2, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <chMBPostAheadI.constprop.29+0x38>)
 8004014:	f7fe f9ec 	bl	80023f0 <chSemSignalI>
  return MSG_OK;
 8004018:	2000      	movs	r0, #0
 800401a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
  if (--mbp->mb_rdptr < mbp->mb_buffer)
    mbp->mb_rdptr = mbp->mb_top - 1;
  *mbp->mb_rdptr = msg;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 8004020:	bd10      	pop	{r4, pc}
 8004022:	bf00      	nop
 8004024:	20000cc4 	.word	0x20000cc4
 8004028:	20000cd4 	.word	0x20000cd4
 800402c:	f3af 8000 	nop.w

08004030 <chMBFetchI.constprop.27>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <chMBFetchI.constprop.27+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8004032:	b510      	push	{r4, lr}
 8004034:	6999      	ldr	r1, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
 8004036:	2900      	cmp	r1, #0
 8004038:	dd11      	ble.n	800405e <chMBFetchI.constprop.27+0x2e>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800403a:	68da      	ldr	r2, [r3, #12]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800403c:	1e4c      	subs	r4, r1, #1
 800403e:	619c      	str	r4, [r3, #24]
 8004040:	f852 4b04 	ldr.w	r4, [r2], #4
  if (mbp->mb_rdptr >= mbp->mb_top)
 8004044:	6859      	ldr	r1, [r3, #4]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8004046:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top)
 8004048:	428a      	cmp	r2, r1
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800404a:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 800404c:	bf28      	it	cs
 800404e:	681a      	ldrcs	r2, [r3, #0]
  chSemSignalI(&mbp->mb_emptysem);
 8004050:	4805      	ldr	r0, [pc, #20]	; (8004068 <chMBFetchI.constprop.27+0x38>)
  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 8004052:	bf28      	it	cs
 8004054:	60da      	strcs	r2, [r3, #12]
  chSemSignalI(&mbp->mb_emptysem);
 8004056:	f7fe f9cb 	bl	80023f0 <chSemSignalI>
  return MSG_OK;
 800405a:	2000      	movs	r0, #0
 800405c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_emptysem);
  return MSG_OK;
}
 8004062:	bd10      	pop	{r4, pc}
 8004064:	20000cc4 	.word	0x20000cc4
 8004068:	20000ce0 	.word	0x20000ce0
 800406c:	00000000 	.word	0x00000000

08004070 <dmaStreamAllocate.constprop.13>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8004070:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8004072:	7a43      	ldrb	r3, [r0, #9]
 8004074:	2701      	movs	r7, #1
 8004076:	fa07 f503 	lsl.w	r5, r7, r3
 800407a:	4c21      	ldr	r4, [pc, #132]	; (8004100 <dmaStreamAllocate.constprop.13+0x90>)
 800407c:	6826      	ldr	r6, [r4, #0]
 800407e:	4235      	tst	r5, r6
 8004080:	d13a      	bne.n	80040f8 <dmaStreamAllocate.constprop.13+0x88>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004082:	4f20      	ldr	r7, [pc, #128]	; (8004104 <dmaStreamAllocate.constprop.13+0x94>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8004084:	4335      	orrs	r5, r6
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004086:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800408a:	eb07 06c3 	add.w	r6, r7, r3, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800408e:	066b      	lsls	r3, r5, #25
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8004090:	6072      	str	r2, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);
 8004092:	6025      	str	r5, [r4, #0]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8004094:	d007      	beq.n	80040a6 <dmaStreamAllocate.constprop.13+0x36>
    rccEnableDMA1(FALSE);
 8004096:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800409a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800409e:	6962      	ldr	r2, [r4, #20]
 80040a0:	f042 0501 	orr.w	r5, r2, #1
 80040a4:	6165      	str	r5, [r4, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80040a6:	6803      	ldr	r3, [r0, #0]
 80040a8:	6842      	ldr	r2, [r0, #4]
 80040aa:	681f      	ldr	r7, [r3, #0]
 80040ac:	250f      	movs	r5, #15
 80040ae:	f027 040f 	bic.w	r4, r7, #15
 80040b2:	601c      	str	r4, [r3, #0]
 80040b4:	7a04      	ldrb	r4, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80040b6:	2700      	movs	r7, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80040b8:	fa05 f404 	lsl.w	r4, r5, r4
 80040bc:	6014      	str	r4, [r2, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80040be:	601f      	str	r7, [r3, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80040c0:	b1e1      	cbz	r1, 80040fc <dmaStreamAllocate.constprop.13+0x8c>
    nvicEnableVector(dmastp->vector, priority);
 80040c2:	7a80      	ldrb	r0, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80040c4:	2401      	movs	r4, #1
 80040c6:	f000 011f 	and.w	r1, r0, #31
 80040ca:	fa04 f401 	lsl.w	r4, r4, r1
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80040ce:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80040d2:	0941      	lsrs	r1, r0, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80040d4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80040d8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80040dc:	f505 4261 	add.w	r2, r5, #57600	; 0xe100
 80040e0:	20a0      	movs	r0, #160	; 0xa0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80040e2:	f101 0560 	add.w	r5, r1, #96	; 0x60
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80040e6:	f882 0300 	strb.w	r0, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80040ea:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80040ee:	4638      	mov	r0, r7
 80040f0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

  return FALSE;
}
 80040f4:	bcf0      	pop	{r4, r5, r6, r7}
 80040f6:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 80040f8:	4638      	mov	r0, r7
 80040fa:	e7fb      	b.n	80040f4 <dmaStreamAllocate.constprop.13+0x84>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80040fc:	4608      	mov	r0, r1
 80040fe:	e7f9      	b.n	80040f4 <dmaStreamAllocate.constprop.13+0x84>
 8004100:	20000db8 	.word	0x20000db8
 8004104:	20000f08 	.word	0x20000f08
 8004108:	f3af 8000 	nop.w
 800410c:	f3af 8000 	nop.w

08004110 <_strtok.10420.constprop.6>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8004110:	b538      	push	{r3, r4, r5, lr}
  char *token;
  if (str)
 8004112:	4604      	mov	r4, r0
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8004114:	460d      	mov	r5, r1
  char *token;
  if (str)
 8004116:	b198      	cbz	r0, 8004140 <_strtok.10420.constprop.6+0x30>
    *saveptr = str;
 8004118:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800411a:	490c      	ldr	r1, [pc, #48]	; (800414c <_strtok.10420.constprop.6+0x3c>)
 800411c:	4620      	mov	r0, r4
 800411e:	f005 fdaf 	bl	8009c80 <strspn>
 8004122:	1824      	adds	r4, r4, r0
  *saveptr = strpbrk(token, delim);
 8004124:	4620      	mov	r0, r4
 8004126:	4909      	ldr	r1, [pc, #36]	; (800414c <_strtok.10420.constprop.6+0x3c>)
 8004128:	f005 fd82 	bl	8009c30 <strpbrk>
 800412c:	6028      	str	r0, [r5, #0]
  if (*saveptr)
 800412e:	b118      	cbz	r0, 8004138 <_strtok.10420.constprop.6+0x28>
    *(*saveptr)++ = '\0';
 8004130:	2300      	movs	r3, #0
 8004132:	f800 3b01 	strb.w	r3, [r0], #1
 8004136:	6028      	str	r0, [r5, #0]

  return *token ? token : NULL;
 8004138:	7820      	ldrb	r0, [r4, #0]
 800413a:	b120      	cbz	r0, 8004146 <_strtok.10420.constprop.6+0x36>
}
 800413c:	4620      	mov	r0, r4
 800413e:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8004140:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8004142:	2c00      	cmp	r4, #0
 8004144:	d1e9      	bne.n	800411a <_strtok.10420.constprop.6+0xa>
    return NULL;
 8004146:	2400      	movs	r4, #0
  *saveptr = strpbrk(token, delim);
  if (*saveptr)
    *(*saveptr)++ = '\0';

  return *token ? token : NULL;
}
 8004148:	4620      	mov	r0, r4
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	0800a1d8 	.word	0x0800a1d8

08004150 <spi_lld_serve_tx_interrupt.9853>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004150:	070b      	lsls	r3, r1, #28
 8004152:	d400      	bmi.n	8004156 <spi_lld_serve_tx_interrupt.9853+0x6>
 8004154:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004156:	b672      	cpsid	i
 8004158:	4a01      	ldr	r2, [pc, #4]	; (8004160 <spi_lld_serve_tx_interrupt.9853+0x10>)
 800415a:	4b02      	ldr	r3, [pc, #8]	; (8004164 <spi_lld_serve_tx_interrupt.9853+0x14>)
 800415c:	629a      	str	r2, [r3, #40]	; 0x28
 800415e:	e7fe      	b.n	800415e <spi_lld_serve_tx_interrupt.9853+0xe>
 8004160:	0800a1c0 	.word	0x0800a1c0
 8004164:	20001e58 	.word	0x20001e58
 8004168:	f3af 8000 	nop.w
 800416c:	f3af 8000 	nop.w

08004170 <queues2_setup.8259>:
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8004170:	f241 72e8 	movw	r2, #6120	; 0x17e8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8004174:	f640 4364 	movw	r3, #3172	; 0xc64
 8004178:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800417c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  oqp->q_top = bp + size;
 8004180:	1d11      	adds	r1, r2, #4
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8004182:	615a      	str	r2, [r3, #20]
 8004184:	619a      	str	r2, [r3, #24]
 8004186:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 8004188:	f245 2211 	movw	r2, #21009	; 0x5211
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800418c:	2004      	movs	r0, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 800418e:	6119      	str	r1, [r3, #16]
  oqp->q_notify = onfy;
 8004190:	f6c0 0200 	movt	r2, #2048	; 0x800
  oqp->q_link = link;
 8004194:	2100      	movs	r1, #0
 8004196:	605b      	str	r3, [r3, #4]
 8004198:	601b      	str	r3, [r3, #0]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800419a:	6098      	str	r0, [r3, #8]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 800419c:	61da      	str	r2, [r3, #28]
  oqp->q_link = link;
 800419e:	6219      	str	r1, [r3, #32]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	f3af 8000 	nop.w
 80041a8:	f3af 8000 	nop.w
 80041ac:	f3af 8000 	nop.w

080041b0 <queues1_setup.8264>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80041b0:	f241 72e8 	movw	r2, #6120	; 0x17e8
 80041b4:	f640 43a0 	movw	r3, #3232	; 0xca0
 80041b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  iqp->q_top = bp + size;
 80041c0:	1d10      	adds	r0, r2, #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 80041c2:	615a      	str	r2, [r3, #20]
 80041c4:	619a      	str	r2, [r3, #24]
 80041c6:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80041c8:	f245 2211 	movw	r2, #21009	; 0x5211
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80041cc:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 80041ce:	f6c0 0200 	movt	r2, #2048	; 0x800
 80041d2:	605b      	str	r3, [r3, #4]
 80041d4:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80041d6:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 80041d8:	6118      	str	r0, [r3, #16]
  iqp->q_notify = infy;
 80041da:	61da      	str	r2, [r3, #28]
  iqp->q_link = link;
 80041dc:	6219      	str	r1, [r3, #32]
 80041de:	4770      	bx	lr

080041e0 <mtx8_setup.7283>:
 80041e0:	f640 011c 	movw	r1, #2076	; 0x81c
 80041e4:	f640 0200 	movw	r2, #2048	; 0x800
 80041e8:	f640 433c 	movw	r3, #3132	; 0xc3c
 80041ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80041f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80041f8:	2000      	movs	r0, #0
 80041fa:	6049      	str	r1, [r1, #4]
 80041fc:	6009      	str	r1, [r1, #0]
 80041fe:	6052      	str	r2, [r2, #4]
 8004200:	6012      	str	r2, [r2, #0]
 8004202:	6090      	str	r0, [r2, #8]
 8004204:	605b      	str	r3, [r3, #4]
 8004206:	601b      	str	r3, [r3, #0]
 8004208:	6098      	str	r0, [r3, #8]
 800420a:	4770      	bx	lr
 800420c:	f3af 8000 	nop.w

08004210 <mtx7_setup.7285>:
 8004210:	f640 021c 	movw	r2, #2076	; 0x81c
 8004214:	f640 0300 	movw	r3, #2048	; 0x800
 8004218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800421c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004220:	2000      	movs	r0, #0
 8004222:	6052      	str	r2, [r2, #4]
 8004224:	6012      	str	r2, [r2, #0]
 8004226:	605b      	str	r3, [r3, #4]
 8004228:	601b      	str	r3, [r3, #0]
 800422a:	6098      	str	r0, [r3, #8]
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop

08004230 <mtx6_setup.7287>:
 8004230:	f640 021c 	movw	r2, #2076	; 0x81c
 8004234:	f640 0300 	movw	r3, #2048	; 0x800
 8004238:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800423c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004240:	2000      	movs	r0, #0
 8004242:	6052      	str	r2, [r2, #4]
 8004244:	6012      	str	r2, [r2, #0]
 8004246:	605b      	str	r3, [r3, #4]
 8004248:	601b      	str	r3, [r3, #0]
 800424a:	6098      	str	r0, [r3, #8]
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <mtx5_setup.7289>:
 8004250:	f640 0300 	movw	r3, #2048	; 0x800
 8004254:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004258:	2200      	movs	r2, #0
 800425a:	605b      	str	r3, [r3, #4]
 800425c:	601b      	str	r3, [r3, #0]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	f3af 8000 	nop.w
 8004268:	f3af 8000 	nop.w
 800426c:	f3af 8000 	nop.w

08004270 <mtx4_setup.7291>:
 8004270:	f640 0200 	movw	r2, #2048	; 0x800
 8004274:	f640 433c 	movw	r3, #3132	; 0xc3c
 8004278:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800427c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004280:	2100      	movs	r1, #0
 8004282:	6052      	str	r2, [r2, #4]
 8004284:	6012      	str	r2, [r2, #0]
 8004286:	6091      	str	r1, [r2, #8]
 8004288:	605b      	str	r3, [r3, #4]
 800428a:	601b      	str	r3, [r3, #0]
 800428c:	6099      	str	r1, [r3, #8]
 800428e:	4770      	bx	lr

08004290 <mtx1_setup.7293>:
 8004290:	f640 0300 	movw	r3, #2048	; 0x800
 8004294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004298:	2200      	movs	r2, #0
 800429a:	605b      	str	r3, [r3, #4]
 800429c:	601b      	str	r3, [r3, #0]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	f3af 8000 	nop.w
 80042a8:	f3af 8000 	nop.w
 80042ac:	f3af 8000 	nop.w

080042b0 <bmk12_setup.8464>:
 80042b0:	f640 5310 	movw	r3, #3344	; 0xd10
 80042b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042b8:	2200      	movs	r2, #0
 80042ba:	605b      	str	r3, [r3, #4]
 80042bc:	601b      	str	r3, [r3, #0]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	f3af 8000 	nop.w
 80042c8:	f3af 8000 	nop.w
 80042cc:	f3af 8000 	nop.w

080042d0 <thread2.8457>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 80042d0:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80042d2:	2620      	movs	r6, #32
 80042d4:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80042d6:	f7fd fd8b 	bl	8001df0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 80042da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80042dc:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80042e0:	4621      	mov	r1, r4
 80042e2:	f7fd fcb5 	bl	8001c50 <chSchWakeupS>
 80042e6:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 80042ea:	2c00      	cmp	r4, #0
 80042ec:	d1f3      	bne.n	80042d6 <thread2.8457+0x6>
  return 0;
}
 80042ee:	4620      	mov	r0, r4
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	bf00      	nop
 80042f4:	f3af 8000 	nop.w
 80042f8:	f3af 8000 	nop.w
 80042fc:	f3af 8000 	nop.w

08004300 <pools1_execute.7964>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	2620      	movs	r6, #32
 8004304:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004308:	4c79      	ldr	r4, [pc, #484]	; (80044f0 <pools1_execute.7964+0x1f0>)
 800430a:	4d7a      	ldr	r5, [pc, #488]	; (80044f4 <pools1_execute.7964+0x1f4>)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	2300      	movs	r3, #0
 8004310:	602a      	str	r2, [r5, #0]
  mp->mp_next = php;
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8004318:	6861      	ldr	r1, [r4, #4]
 800431a:	194a      	adds	r2, r1, r5
 800431c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004320:	6820      	ldr	r0, [r4, #0]
  mp->mp_next = php;
 8004322:	6022      	str	r2, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004324:	5148      	str	r0, [r1, r5]
 8004326:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800432a:	6860      	ldr	r0, [r4, #4]
 800432c:	1811      	adds	r1, r2, r0
 800432e:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004332:	6827      	ldr	r7, [r4, #0]
  mp->mp_next = php;
 8004334:	6021      	str	r1, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004336:	5017      	str	r7, [r2, r0]
 8004338:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800433c:	6860      	ldr	r0, [r4, #4]
 800433e:	180a      	adds	r2, r1, r0
 8004340:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004344:	6827      	ldr	r7, [r4, #0]
  mp->mp_next = php;
 8004346:	6022      	str	r2, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004348:	500f      	str	r7, [r1, r0]
 800434a:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800434e:	6861      	ldr	r1, [r4, #4]
 8004350:	1857      	adds	r7, r2, r1
 8004352:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004356:	6820      	ldr	r0, [r4, #0]
  mp->mp_next = php;
 8004358:	6027      	str	r7, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800435a:	5050      	str	r0, [r2, r1]
 800435c:	f383 8811 	msr	BASEPRI, r3
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8004360:	4620      	mov	r0, r4
 8004362:	f7fd faf5 	bl	8001950 <chPoolAlloc>
 8004366:	1c01      	adds	r1, r0, #0
 8004368:	bf18      	it	ne
 800436a:	2101      	movne	r1, #1
 800436c:	2001      	movs	r0, #1
 800436e:	f7fd fa37 	bl	80017e0 <_test_assert>
 8004372:	2800      	cmp	r0, #0
 8004374:	f040 80a9 	bne.w	80044ca <pools1_execute.7964+0x1ca>
 8004378:	4620      	mov	r0, r4
 800437a:	f7fd fae9 	bl	8001950 <chPoolAlloc>
 800437e:	1c01      	adds	r1, r0, #0
 8004380:	bf18      	it	ne
 8004382:	2101      	movne	r1, #1
 8004384:	2001      	movs	r0, #1
 8004386:	f7fd fa2b 	bl	80017e0 <_test_assert>
 800438a:	2800      	cmp	r0, #0
 800438c:	f040 809d 	bne.w	80044ca <pools1_execute.7964+0x1ca>
 8004390:	4620      	mov	r0, r4
 8004392:	f7fd fadd 	bl	8001950 <chPoolAlloc>
 8004396:	1c01      	adds	r1, r0, #0
 8004398:	bf18      	it	ne
 800439a:	2101      	movne	r1, #1
 800439c:	2001      	movs	r0, #1
 800439e:	f7fd fa1f 	bl	80017e0 <_test_assert>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	f040 8091 	bne.w	80044ca <pools1_execute.7964+0x1ca>
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7fd fad1 	bl	8001950 <chPoolAlloc>
 80043ae:	1c01      	adds	r1, r0, #0
 80043b0:	bf18      	it	ne
 80043b2:	2101      	movne	r1, #1
 80043b4:	2001      	movs	r0, #1
 80043b6:	f7fd fa13 	bl	80017e0 <_test_assert>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f040 8085 	bne.w	80044ca <pools1_execute.7964+0x1ca>
 80043c0:	4620      	mov	r0, r4
 80043c2:	f7fd fac5 	bl	8001950 <chPoolAlloc>
 80043c6:	1c01      	adds	r1, r0, #0
 80043c8:	bf18      	it	ne
 80043ca:	2101      	movne	r1, #1
 80043cc:	2001      	movs	r0, #1
 80043ce:	f7fd fa07 	bl	80017e0 <_test_assert>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d179      	bne.n	80044ca <pools1_execute.7964+0x1ca>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7fd faba 	bl	8001950 <chPoolAlloc>
 80043dc:	f1d0 0101 	rsbs	r1, r0, #1
 80043e0:	bf38      	it	cc
 80043e2:	2100      	movcc	r1, #0
 80043e4:	2002      	movs	r0, #2
 80043e6:	f7fd f9fb 	bl	80017e0 <_test_assert>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d16d      	bne.n	80044ca <pools1_execute.7964+0x1ca>
 80043ee:	f386 8811 	msr	BASEPRI, r6
 80043f2:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 80043f4:	6025      	str	r5, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f380 8811 	msr	BASEPRI, r0
 80043fc:	f386 8811 	msr	BASEPRI, r6
 8004400:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8004402:	f505 72a4 	add.w	r2, r5, #328	; 0x148
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004406:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
  mp->mp_next = php;
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	f380 8811 	msr	BASEPRI, r0
 8004410:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004414:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 8004416:	f505 7124 	add.w	r1, r5, #656	; 0x290
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800441a:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
  mp->mp_next = php;
 800441e:	6021      	str	r1, [r4, #0]
 8004420:	f380 8811 	msr	BASEPRI, r0
 8004424:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004428:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 800442a:	f505 7276 	add.w	r2, r5, #984	; 0x3d8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800442e:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
  mp->mp_next = php;
 8004432:	6022      	str	r2, [r4, #0]
 8004434:	f380 8811 	msr	BASEPRI, r0
 8004438:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800443c:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 800443e:	f505 63a4 	add.w	r3, r5, #1312	; 0x520
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004442:	f8c5 1520 	str.w	r1, [r5, #1312]	; 0x520
  mp->mp_next = php;
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 800444c:	4620      	mov	r0, r4
 800444e:	f7fd fa7f 	bl	8001950 <chPoolAlloc>
 8004452:	1c01      	adds	r1, r0, #0
 8004454:	bf18      	it	ne
 8004456:	2101      	movne	r1, #1
 8004458:	2003      	movs	r0, #3
 800445a:	f7fd f9c1 	bl	80017e0 <_test_assert>
 800445e:	2800      	cmp	r0, #0
 8004460:	d133      	bne.n	80044ca <pools1_execute.7964+0x1ca>
 8004462:	4620      	mov	r0, r4
 8004464:	f7fd fa74 	bl	8001950 <chPoolAlloc>
 8004468:	1c01      	adds	r1, r0, #0
 800446a:	bf18      	it	ne
 800446c:	2101      	movne	r1, #1
 800446e:	2003      	movs	r0, #3
 8004470:	f7fd f9b6 	bl	80017e0 <_test_assert>
 8004474:	bb48      	cbnz	r0, 80044ca <pools1_execute.7964+0x1ca>
 8004476:	4620      	mov	r0, r4
 8004478:	f7fd fa6a 	bl	8001950 <chPoolAlloc>
 800447c:	1c01      	adds	r1, r0, #0
 800447e:	bf18      	it	ne
 8004480:	2101      	movne	r1, #1
 8004482:	2003      	movs	r0, #3
 8004484:	f7fd f9ac 	bl	80017e0 <_test_assert>
 8004488:	b9f8      	cbnz	r0, 80044ca <pools1_execute.7964+0x1ca>
 800448a:	4620      	mov	r0, r4
 800448c:	f7fd fa60 	bl	8001950 <chPoolAlloc>
 8004490:	1c01      	adds	r1, r0, #0
 8004492:	bf18      	it	ne
 8004494:	2101      	movne	r1, #1
 8004496:	2003      	movs	r0, #3
 8004498:	f7fd f9a2 	bl	80017e0 <_test_assert>
 800449c:	b9a8      	cbnz	r0, 80044ca <pools1_execute.7964+0x1ca>
 800449e:	4620      	mov	r0, r4
 80044a0:	f7fd fa56 	bl	8001950 <chPoolAlloc>
 80044a4:	1c01      	adds	r1, r0, #0
 80044a6:	bf18      	it	ne
 80044a8:	2101      	movne	r1, #1
 80044aa:	2003      	movs	r0, #3
 80044ac:	f7fd f998 	bl	80017e0 <_test_assert>
 80044b0:	b958      	cbnz	r0, 80044ca <pools1_execute.7964+0x1ca>

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fd fa4c 	bl	8001950 <chPoolAlloc>
 80044b8:	f1d0 0101 	rsbs	r1, r0, #1
 80044bc:	bf38      	it	cc
 80044be:	2100      	movcc	r1, #0
 80044c0:	2004      	movs	r0, #4
 80044c2:	f7fd f98d 	bl	80017e0 <_test_assert>
 80044c6:	4602      	mov	r2, r0
 80044c8:	b100      	cbz	r0, 80044cc <pools1_execute.7964+0x1cc>
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80044cc:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <pools1_execute.7964+0x1f8>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80044ce:	2110      	movs	r1, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80044d0:	4620      	mov	r0, r4
 80044d2:	6061      	str	r1, [r4, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80044d4:	6022      	str	r2, [r4, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80044d6:	60a3      	str	r3, [r4, #8]
 80044d8:	f7fd fa3a 	bl	8001950 <chPoolAlloc>
 80044dc:	f1d0 0101 	rsbs	r1, r0, #1
 80044e0:	bf38      	it	cc
 80044e2:	2100      	movcc	r1, #0
 80044e4:	2005      	movs	r0, #5
}
 80044e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80044ea:	f7fd b979 	b.w	80017e0 <_test_assert>
 80044ee:	bf00      	nop
 80044f0:	20000824 	.word	0x20000824
 80044f4:	200017e8 	.word	0x200017e8
 80044f8:	08005221 	.word	0x08005221
 80044fc:	f3af 8000 	nop.w

08004500 <dyn2_execute.8090>:
 8004500:	4b4b      	ldr	r3, [pc, #300]	; (8004630 <dyn2_execute.8090+0x130>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8004502:	b570      	push	{r4, r5, r6, lr}
 8004504:	6999      	ldr	r1, [r3, #24]
 8004506:	2020      	movs	r0, #32
 8004508:	688d      	ldr	r5, [r1, #8]
 800450a:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800450e:	4b49      	ldr	r3, [pc, #292]	; (8004634 <dyn2_execute.8090+0x134>)
 8004510:	4a49      	ldr	r2, [pc, #292]	; (8004638 <dyn2_execute.8090+0x138>)
 8004512:	681c      	ldr	r4, [r3, #0]
 8004514:	2100      	movs	r1, #0
 8004516:	6014      	str	r4, [r2, #0]
  mp->mp_next = php;
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f381 8811 	msr	BASEPRI, r1
 800451e:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004522:	681c      	ldr	r4, [r3, #0]
  mp->mp_next = php;
 8004524:	f502 76a4 	add.w	r6, r2, #328	; 0x148
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004528:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
  mp->mp_next = php;
 800452c:	601e      	str	r6, [r3, #0]
 800452e:	f381 8811 	msr	BASEPRI, r1
 8004532:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004536:	681c      	ldr	r4, [r3, #0]
  mp->mp_next = php;
 8004538:	f502 7624 	add.w	r6, r2, #656	; 0x290
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800453c:	f8c2 4290 	str.w	r4, [r2, #656]	; 0x290
  mp->mp_next = php;
 8004540:	601e      	str	r6, [r3, #0]
 8004542:	f381 8811 	msr	BASEPRI, r1
 8004546:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800454a:	6818      	ldr	r0, [r3, #0]
  mp->mp_next = php;
 800454c:	f502 7476 	add.w	r4, r2, #984	; 0x3d8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004550:	f8c2 03d8 	str.w	r0, [r2, #984]	; 0x3d8
  mp->mp_next = php;
 8004554:	601c      	str	r4, [r3, #0]
 8004556:	f381 8811 	msr	BASEPRI, r1
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 800455a:	4938      	ldr	r1, [pc, #224]	; (800463c <dyn2_execute.8090+0x13c>)
 800455c:	1e68      	subs	r0, r5, #1
 800455e:	f7ff fc97 	bl	8003e90 <chThdCreateFromMemoryPool.constprop.57>
 8004562:	4c37      	ldr	r4, [pc, #220]	; (8004640 <dyn2_execute.8090+0x140>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004564:	4937      	ldr	r1, [pc, #220]	; (8004644 <dyn2_execute.8090+0x144>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8004566:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004568:	1ea8      	subs	r0, r5, #2
 800456a:	f7ff fc91 	bl	8003e90 <chThdCreateFromMemoryPool.constprop.57>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800456e:	4936      	ldr	r1, [pc, #216]	; (8004648 <dyn2_execute.8090+0x148>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004570:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004572:	1ee8      	subs	r0, r5, #3
 8004574:	f7ff fc8c 	bl	8003e90 <chThdCreateFromMemoryPool.constprop.57>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004578:	4934      	ldr	r1, [pc, #208]	; (800464c <dyn2_execute.8090+0x14c>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800457a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 800457c:	1f28      	subs	r0, r5, #4
 800457e:	f7ff fc87 	bl	8003e90 <chThdCreateFromMemoryPool.constprop.57>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004582:	4933      	ldr	r1, [pc, #204]	; (8004650 <dyn2_execute.8090+0x150>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004584:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004586:	1f68      	subs	r0, r5, #5
 8004588:	f7ff fc82 	bl	8003e90 <chThdCreateFromMemoryPool.constprop.57>

  test_assert(1, (threads[0] != NULL) &&
 800458c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800458e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 8004590:	b149      	cbz	r1, 80045a6 <dyn2_execute.8090+0xa6>
 8004592:	6861      	ldr	r1, [r4, #4]
 8004594:	b139      	cbz	r1, 80045a6 <dyn2_execute.8090+0xa6>
 8004596:	68a1      	ldr	r1, [r4, #8]
 8004598:	b129      	cbz	r1, 80045a6 <dyn2_execute.8090+0xa6>
 800459a:	68e1      	ldr	r1, [r4, #12]
 800459c:	b119      	cbz	r1, 80045a6 <dyn2_execute.8090+0xa6>
 800459e:	f1d0 0101 	rsbs	r1, r0, #1
 80045a2:	bf38      	it	cc
 80045a4:	2100      	movcc	r1, #0
 80045a6:	2001      	movs	r0, #1
 80045a8:	f7fd f91a 	bl	80017e0 <_test_assert>
 80045ac:	b100      	cbz	r0, 80045b0 <dyn2_execute.8090+0xb0>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 80045b0:	f7fd fe76 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 80045b4:	2002      	movs	r0, #2
 80045b6:	4927      	ldr	r1, [pc, #156]	; (8004654 <dyn2_execute.8090+0x154>)
 80045b8:	f7fd f8ca 	bl	8001750 <_test_assert_sequence>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d1f6      	bne.n	80045ae <dyn2_execute.8090+0xae>

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 80045c0:	481c      	ldr	r0, [pc, #112]	; (8004634 <dyn2_execute.8090+0x134>)
 80045c2:	f7fd f9c5 	bl	8001950 <chPoolAlloc>
 80045c6:	1c01      	adds	r1, r0, #0
 80045c8:	bf18      	it	ne
 80045ca:	2101      	movne	r1, #1
 80045cc:	2003      	movs	r0, #3
 80045ce:	f7fd f907 	bl	80017e0 <_test_assert>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d1eb      	bne.n	80045ae <dyn2_execute.8090+0xae>
 80045d6:	4817      	ldr	r0, [pc, #92]	; (8004634 <dyn2_execute.8090+0x134>)
 80045d8:	f7fd f9ba 	bl	8001950 <chPoolAlloc>
 80045dc:	1c01      	adds	r1, r0, #0
 80045de:	bf18      	it	ne
 80045e0:	2101      	movne	r1, #1
 80045e2:	2003      	movs	r0, #3
 80045e4:	f7fd f8fc 	bl	80017e0 <_test_assert>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1e0      	bne.n	80045ae <dyn2_execute.8090+0xae>
 80045ec:	4811      	ldr	r0, [pc, #68]	; (8004634 <dyn2_execute.8090+0x134>)
 80045ee:	f7fd f9af 	bl	8001950 <chPoolAlloc>
 80045f2:	1c01      	adds	r1, r0, #0
 80045f4:	bf18      	it	ne
 80045f6:	2101      	movne	r1, #1
 80045f8:	2003      	movs	r0, #3
 80045fa:	f7fd f8f1 	bl	80017e0 <_test_assert>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d1d5      	bne.n	80045ae <dyn2_execute.8090+0xae>
 8004602:	480c      	ldr	r0, [pc, #48]	; (8004634 <dyn2_execute.8090+0x134>)
 8004604:	f7fd f9a4 	bl	8001950 <chPoolAlloc>
 8004608:	1c01      	adds	r1, r0, #0
 800460a:	bf18      	it	ne
 800460c:	2101      	movne	r1, #1
 800460e:	2003      	movs	r0, #3
 8004610:	f7fd f8e6 	bl	80017e0 <_test_assert>
 8004614:	2800      	cmp	r0, #0
 8004616:	d1ca      	bne.n	80045ae <dyn2_execute.8090+0xae>
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004618:	4806      	ldr	r0, [pc, #24]	; (8004634 <dyn2_execute.8090+0x134>)
 800461a:	f7fd f999 	bl	8001950 <chPoolAlloc>
 800461e:	f1d0 0101 	rsbs	r1, r0, #1
 8004622:	bf38      	it	cc
 8004624:	2100      	movcc	r1, #0
 8004626:	2004      	movs	r0, #4
}
 8004628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800462c:	f7fd b8d8 	b.w	80017e0 <_test_assert>
 8004630:	20001e58 	.word	0x20001e58
 8004634:	20000d68 	.word	0x20000d68
 8004638:	200017e8 	.word	0x200017e8
 800463c:	0800a1cc 	.word	0x0800a1cc
 8004640:	20001fa8 	.word	0x20001fa8
 8004644:	0800a1d4 	.word	0x0800a1d4
 8004648:	0800a1d0 	.word	0x0800a1d0
 800464c:	0800a070 	.word	0x0800a070
 8004650:	08009e58 	.word	0x08009e58
 8004654:	08009dd0 	.word	0x08009dd0
 8004658:	f3af 8000 	nop.w
 800465c:	f3af 8000 	nop.w

08004660 <thread11.7269>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8004664:	481b      	ldr	r0, [pc, #108]	; (80046d4 <thread11.7269+0x74>)
 8004666:	f7fd fd53 	bl	8002110 <chMtxLock>
  chMtxLock(&m1);
 800466a:	481b      	ldr	r0, [pc, #108]	; (80046d8 <thread11.7269+0x78>)
 800466c:	f7fd fd50 	bl	8002110 <chMtxLock>
 8004670:	2320      	movs	r3, #32
 8004672:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8004676:	4e19      	ldr	r6, [pc, #100]	; (80046dc <thread11.7269+0x7c>)
 8004678:	69b0      	ldr	r0, [r6, #24]
 800467a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 800467c:	4620      	mov	r0, r4
 800467e:	f7fd fcb7 	bl	8001ff0 <chMtxUnlockS>
  currp->p_u.wtobjp = cp;
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <thread11.7269+0x80>)
 8004684:	69b2      	ldr	r2, [r6, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8004686:	461d      	mov	r5, r3
 8004688:	6213      	str	r3, [r2, #32]
  do {
    cp = cp->p_next;
 800468a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800468c:	42ab      	cmp	r3, r5
 800468e:	d003      	beq.n	8004698 <thread11.7269+0x38>
 8004690:	6898      	ldr	r0, [r3, #8]
 8004692:	6891      	ldr	r1, [r2, #8]
 8004694:	4288      	cmp	r0, r1
 8004696:	d2f8      	bcs.n	800468a <thread11.7269+0x2a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8004698:	6858      	ldr	r0, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800469a:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 800469c:	6050      	str	r0, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 800469e:	6002      	str	r2, [r0, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	2007      	movs	r0, #7
 80046a4:	f7fd fb8c 	bl	8001dc0 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 80046a8:	69b2      	ldr	r2, [r6, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT)
 80046aa:	6a13      	ldr	r3, [r2, #32]
 80046ac:	3301      	adds	r3, #1
 80046ae:	d002      	beq.n	80046b6 <thread11.7269+0x56>
    chMtxLockS(mp);
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7fd fcc5 	bl	8002040 <chMtxLockS>
 80046b6:	2400      	movs	r4, #0
 80046b8:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 80046bc:	7838      	ldrb	r0, [r7, #0]
 80046be:	f7fd f8a7 	bl	8001810 <test_emit_token>
  chMtxUnlock(&m1);
 80046c2:	4805      	ldr	r0, [pc, #20]	; (80046d8 <thread11.7269+0x78>)
 80046c4:	f7fd faf4 	bl	8001cb0 <chMtxUnlock>
  chMtxUnlock(&m2);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <thread11.7269+0x74>)
 80046ca:	f7fd faf1 	bl	8001cb0 <chMtxUnlock>
  return 0;
}
 80046ce:	4620      	mov	r0, r4
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000c3c 	.word	0x20000c3c
 80046d8:	20000800 	.word	0x20000800
 80046dc:	20001e58 	.word	0x20001e58
 80046e0:	2000081c 	.word	0x2000081c
 80046e4:	f3af 8000 	nop.w
 80046e8:	f3af 8000 	nop.w
 80046ec:	f3af 8000 	nop.w

080046f0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80046f0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	4604      	mov	r4, r0

  while (queue_notempty(tqp))
 80046f6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80046f8:	460d      	mov	r5, r1

  while (queue_notempty(tqp))
 80046fa:	d009      	beq.n	8004710 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80046fc:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  chSchReadyI(tp);
 80046fe:	4618      	mov	r0, r3
 8004700:	6022      	str	r2, [r4, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8004702:	621d      	str	r5, [r3, #32]
 8004704:	6054      	str	r4, [r2, #4]
  chSchReadyI(tp);
 8004706:	f7fd fbe3 	bl	8001ed0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	429c      	cmp	r4, r3
 800470e:	d1f5      	bne.n	80046fc <chThdDequeueAllI+0xc>
 8004710:	bd38      	pop	{r3, r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	f3af 8000 	nop.w
 8004718:	f3af 8000 	nop.w
 800471c:	f3af 8000 	nop.w

08004720 <usb_packet_write_from_queue.10138.4222>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8004720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004724:	6807      	ldr	r7, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004726:	6042      	str	r2, [r0, #4]
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004728:	f107 5300 	add.w	r3, r7, #536870912	; 0x20000000
 800472c:	f503 5640 	add.w	r6, r3, #12288	; 0x3000
 8004730:	0077      	lsls	r7, r6, #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004732:	0856      	lsrs	r6, r2, #1
 8004734:	d04f      	beq.n	80047d6 <usb_packet_write_from_queue.10138.4222+0xb6>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004736:	698b      	ldr	r3, [r1, #24]
 8004738:	690c      	ldr	r4, [r1, #16]
 800473a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800473e:	1e75      	subs	r5, r6, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004740:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004742:	618b      	str	r3, [r1, #24]
 8004744:	f005 0c01 	and.w	ip, r5, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004748:	d26a      	bcs.n	8004820 <usb_packet_write_from_queue.10138.4222+0x100>
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800474a:	f813 5b01 	ldrb.w	r5, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 800474e:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004750:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004752:	bf28      	it	cs
 8004754:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004756:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 800475a:	4638      	mov	r0, r7
    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800475c:	bf28      	it	cs
 800475e:	618b      	strcs	r3, [r1, #24]
    *pmap++ = w;
 8004760:	f840 5b04 	str.w	r5, [r0], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004764:	1e75      	subs	r5, r6, #1
 8004766:	d034      	beq.n	80047d2 <usb_packet_write_from_queue.10138.4222+0xb2>
 8004768:	f1bc 0f00 	cmp.w	ip, #0
 800476c:	d013      	beq.n	8004796 <usb_packet_write_from_queue.10138.4222+0x76>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800476e:	698b      	ldr	r3, [r1, #24]
 8004770:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004774:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004776:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8004778:	d228      	bcs.n	80047cc <usb_packet_write_from_queue.10138.4222+0xac>
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 800477a:	f813 8b01 	ldrb.w	r8, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 800477e:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004780:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004782:	bf28      	it	cs
 8004784:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004786:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 800478a:	bf28      	it	cs
 800478c:	618b      	strcs	r3, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 800478e:	3d01      	subs	r5, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8004790:	f840 cb04 	str.w	ip, [r0], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004794:	d01d      	beq.n	80047d2 <usb_packet_write_from_queue.10138.4222+0xb2>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004796:	698b      	ldr	r3, [r1, #24]
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
    nhw--;
 8004798:	3d01      	subs	r5, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 800479a:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 800479e:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047a0:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80047a2:	bf24      	itt	cs
 80047a4:	68cb      	ldrcs	r3, [r1, #12]
 80047a6:	618b      	strcs	r3, [r1, #24]
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80047a8:	f813 8b01 	ldrb.w	r8, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 80047ac:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80047ae:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80047b0:	bf28      	it	cs
 80047b2:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 80047b4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80047b8:	bf28      	it	cs
 80047ba:	618b      	strcs	r3, [r1, #24]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047bc:	698b      	ldr	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 80047be:	f840 cb04 	str.w	ip, [r0], #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047c2:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 80047c6:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047c8:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 80047ca:	d3d6      	bcc.n	800477a <usb_packet_write_from_queue.10138.4222+0x5a>
      oqp->q_rdptr = oqp->q_buffer;
 80047cc:	68cb      	ldr	r3, [r1, #12]
 80047ce:	618b      	str	r3, [r1, #24]
 80047d0:	e7d3      	b.n	800477a <usb_packet_write_from_queue.10138.4222+0x5a>
 80047d2:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 80047d6:	07d0      	lsls	r0, r2, #31
 80047d8:	d509      	bpl.n	80047ee <usb_packet_write_from_queue.10138.4222+0xce>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047da:	698b      	ldr	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 80047dc:	6908      	ldr	r0, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047de:	f813 4b01 	ldrb.w	r4, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 80047e2:	4283      	cmp	r3, r0
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 80047e4:	603c      	str	r4, [r7, #0]
 80047e6:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 80047e8:	bf24      	itt	cs
 80047ea:	68cb      	ldrcs	r3, [r1, #12]
 80047ec:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 80047ee:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 80047f2:	b9f3      	cbnz	r3, 8004832 <usb_packet_write_from_queue.10138.4222+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f4:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80047f8:	2420      	movs	r4, #32
 80047fa:	f384 8811 	msr	BASEPRI, r4
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 80047fe:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8004800:	4608      	mov	r0, r1
 8004802:	189a      	adds	r2, r3, r2
 8004804:	608a      	str	r2, [r1, #8]
 8004806:	2100      	movs	r1, #0
 8004808:	f7ff ff72 	bl	80046f0 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800480c:	f3ef 8105 	mrs	r1, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FF) != 0);
 8004810:	05c8      	lsls	r0, r1, #23
 8004812:	0dc4      	lsrs	r4, r0, #23
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context())
 8004814:	b13c      	cbz	r4, 8004826 <usb_packet_write_from_queue.10138.4222+0x106>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004816:	2300      	movs	r3, #0
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004820:	68cb      	ldr	r3, [r1, #12]
 8004822:	618b      	str	r3, [r1, #24]
 8004824:	e791      	b.n	800474a <usb_packet_write_from_queue.10138.4222+0x2a>
      chSysUnlockFromISR();
    else {
      chSchRescheduleS();
 8004826:	f7fd f943 	bl	8001ab0 <chSchRescheduleS>
 800482a:	f384 8811 	msr	BASEPRI, r4
 800482e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8004832:	688b      	ldr	r3, [r1, #8]
 8004834:	4608      	mov	r0, r1
 8004836:	189a      	adds	r2, r3, r2
 8004838:	608a      	str	r2, [r1, #8]
 800483a:	2100      	movs	r1, #0
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 800483c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004840:	f7ff bf56 	b.w	80046f0 <chThdDequeueAllI>
 8004844:	f3af 8000 	nop.w
 8004848:	f3af 8000 	nop.w
 800484c:	f3af 8000 	nop.w

08004850 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8004854:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004858:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800485c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 800485e:	b083      	sub	sp, #12
  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8004860:	0561      	lsls	r1, r4, #21
 8004862:	f100 823a 	bmi.w	8004cda <Vector90+0x48a>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8004866:	0522      	lsls	r2, r4, #20
 8004868:	d518      	bpl.n	800489c <Vector90+0x4c>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800486a:	48ba      	ldr	r0, [pc, #744]	; (8004b54 <Vector90+0x304>)
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 800486c:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004870:	f2c4 0300 	movt	r3, #16384	; 0x4000
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004874:	6842      	ldr	r2, [r0, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8004876:	6c19      	ldr	r1, [r3, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004878:	6812      	ldr	r2, [r2, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 800487a:	f041 0108 	orr.w	r1, r1, #8
 800487e:	6419      	str	r1, [r3, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004880:	b10a      	cbz	r2, 8004886 <Vector90+0x36>
 8004882:	2103      	movs	r1, #3
 8004884:	4790      	blx	r2
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8004886:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 800488a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800488e:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8004890:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	6402      	str	r2, [r0, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 800489a:	6441      	str	r1, [r0, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 800489c:	04e3      	lsls	r3, r4, #19
 800489e:	d512      	bpl.n	80048c6 <Vector90+0x76>
    uint32_t fnr = STM32_USB->FNR;
 80048a0:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80048a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80048aa:	0400      	lsls	r0, r0, #16
 80048ac:	f140 8208 	bpl.w	8004cc0 <Vector90+0x470>
    }
#if STM32_USB_LOW_POWER_ON_SUSPEND
    else {
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
 80048b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b2:	f042 0104 	orr.w	r1, r2, #4
 80048b6:	6419      	str	r1, [r3, #64]	; 0x40
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 80048b8:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80048bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048c0:	f46f 5080 	mvn.w	r0, #4096	; 0x1000
 80048c4:	6458      	str	r0, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 80048c6:	05a1      	lsls	r1, r4, #22
 80048c8:	d50b      	bpl.n	80048e2 <Vector90+0x92>
    _usb_isr_invoke_sof_cb(usbp);
 80048ca:	48a2      	ldr	r0, [pc, #648]	; (8004b54 <Vector90+0x304>)
 80048cc:	6841      	ldr	r1, [r0, #4]
 80048ce:	68ca      	ldr	r2, [r1, #12]
 80048d0:	b102      	cbz	r2, 80048d4 <Vector90+0x84>
 80048d2:	4790      	blx	r2
    STM32_USB->ISTR = ~ISTR_SOF;
 80048d4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80048d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048dc:	f46f 7000 	mvn.w	r0, #512	; 0x200
 80048e0:	6458      	str	r0, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 80048e2:	0422      	lsls	r2, r4, #16
 80048e4:	f140 80fb 	bpl.w	8004ade <Vector90+0x28e>
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 80048e8:	f44f 48b8 	mov.w	r8, #23552	; 0x5c00
 80048ec:	f2c4 0800 	movt	r8, #16384	; 0x4000
 80048f0:	f004 040f 	and.w	r4, r4, #15
 80048f4:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 80048f8:	f241 4538 	movw	r5, #5176	; 0x1438
 80048fc:	1ca6      	adds	r6, r4, #2
 80048fe:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004902:	eb05 0186 	add.w	r1, r5, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8004906:	063b      	lsls	r3, r7, #24
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8004908:	684d      	ldr	r5, [r1, #4]

    if (epr & EPR_CTR_TX) {
 800490a:	d572      	bpl.n	80049f2 <Vector90+0x1a2>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 800490c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004910:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8004914:	f422 43f1 	bic.w	r3, r2, #30848	; 0x7880
 8004918:	f023 0070 	bic.w	r0, r3, #112	; 0x70
 800491c:	f848 0024 	str.w	r0, [r8, r4, lsl #2]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004920:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8004924:	696b      	ldr	r3, [r5, #20]
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004926:	f101 5200 	add.w	r2, r1, #536870912	; 0x20000000
 800492a:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 800492e:	eb00 010c 	add.w	r1, r0, ip
 8004932:	004a      	lsls	r2, r1, #1
 8004934:	f8d2 9004 	ldr.w	r9, [r2, #4]
      epcp->in_state->txcnt  += transmitted;
 8004938:	6898      	ldr	r0, [r3, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 800493a:	6859      	ldr	r1, [r3, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 800493c:	eb09 0200 	add.w	r2, r9, r0
 8004940:	609a      	str	r2, [r3, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8004942:	1a8a      	subs	r2, r1, r2
 8004944:	f000 80f2 	beq.w	8004b2c <Vector90+0x2dc>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8004948:	8a29      	ldrh	r1, [r5, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 800494a:	7818      	ldrb	r0, [r3, #0]
 800494c:	428a      	cmp	r2, r1
 800494e:	bf28      	it	cs
 8004950:	460a      	movcs	r2, r1
 8004952:	2800      	cmp	r0, #0
 8004954:	f040 81a4 	bne.w	8004ca0 <Vector90+0x450>
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 8004958:	68d8      	ldr	r0, [r3, #12]
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 800495a:	1c51      	adds	r1, r2, #1
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 800495c:	4448      	add	r0, r9
 800495e:	60d8      	str	r0, [r3, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004960:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004964:	0849      	lsrs	r1, r1, #1
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004966:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800496a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800496e:	449c      	add	ip, r3
 8004970:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004974:	f8dc 3000 	ldr.w	r3, [ip]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004978:	f8cc 2004 	str.w	r2, [ip, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800497c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8004980:	f502 5c40 	add.w	ip, r2, #12288	; 0x3000
 8004984:	ea4f 0c4c 	mov.w	ip, ip, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004988:	d023      	beq.n	80049d2 <Vector90+0x182>
 800498a:	3901      	subs	r1, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800498c:	f830 9b02 	ldrh.w	r9, [r0], #2
 8004990:	4663      	mov	r3, ip
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004992:	460a      	mov	r2, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004994:	f843 9b04 	str.w	r9, [r3], #4
 8004998:	f001 0101 	and.w	r1, r1, #1
 800499c:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800499e:	b1c2      	cbz	r2, 80049d2 <Vector90+0x182>
 80049a0:	b139      	cbz	r1, 80049b2 <Vector90+0x162>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80049a2:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 80049a6:	3304      	adds	r3, #4
 80049a8:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80049aa:	3a01      	subs	r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80049ac:	f8cc 1004 	str.w	r1, [ip, #4]
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80049b0:	d00f      	beq.n	80049d2 <Vector90+0x182>
 80049b2:	46a4      	mov	ip, r4
 80049b4:	46a9      	mov	r9, r5
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 80049b6:	f830 5c02 	ldrh.w	r5, [r0, #-2]
 80049ba:	4619      	mov	r1, r3
 80049bc:	f830 4b02 	ldrh.w	r4, [r0], #2
 80049c0:	f841 5b04 	str.w	r5, [r1], #4
 80049c4:	3002      	adds	r0, #2
 80049c6:	605c      	str	r4, [r3, #4]
 80049c8:	1d0b      	adds	r3, r1, #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 80049ca:	3a02      	subs	r2, #2
 80049cc:	d1f3      	bne.n	80049b6 <Vector90+0x166>
 80049ce:	4664      	mov	r4, ip
 80049d0:	464d      	mov	r5, r9
 80049d2:	2120      	movs	r1, #32
 80049d4:	f381 8811 	msr	BASEPRI, r1
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80049d8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80049dc:	f422 41f0 	bic.w	r1, r2, #30720	; 0x7800
 80049e0:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 80049e4:	f080 0330 	eor.w	r3, r0, #48	; 0x30
 80049e8:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 80049f2:	0438      	lsls	r0, r7, #16
 80049f4:	d56e      	bpl.n	8004ad4 <Vector90+0x284>
      EPR_CLEAR_CTR_RX(ep);
 80049f6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80049fa:	f422 4178 	bic.w	r1, r2, #63488	; 0xf800
 80049fe:	f021 0070 	bic.w	r0, r1, #112	; 0x70
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8004a02:	0539      	lsls	r1, r7, #20
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8004a04:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8004a08:	f100 8084 	bmi.w	8004b14 <Vector90+0x2c4>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004a0c:	f8d8 7050 	ldr.w	r7, [r8, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8004a10:	f8d5 9018 	ldr.w	r9, [r5, #24]
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004a14:	f107 5300 	add.w	r3, r7, #536870912	; 0x20000000
 8004a18:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 8004a1c:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 8004a20:	004b      	lsls	r3, r1, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8004a22:	68d8      	ldr	r0, [r3, #12]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8004a24:	f899 2000 	ldrb.w	r2, [r9]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8004a28:	ea4f 5c80 	mov.w	ip, r0, lsl #22
 8004a2c:	ea4f 579c 	mov.w	r7, ip, lsr #22

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	f040 8091 	bne.w	8004b58 <Vector90+0x308>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004a36:	6898      	ldr	r0, [r3, #8]

  n = (n + 1) / 2;
 8004a38:	1c7b      	adds	r3, r7, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004a3a:	f100 5100 	add.w	r1, r0, #536870912	; 0x20000000
 8004a3e:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
 8004a42:	0051      	lsls	r1, r2, #1

  n = (n + 1) / 2;
  while (n > 0) {
 8004a44:	085a      	lsrs	r2, r3, #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 8004a46:	f8d9 000c 	ldr.w	r0, [r9, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004a4a:	d022      	beq.n	8004a92 <Vector90+0x242>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004a4c:	680b      	ldr	r3, [r1, #0]
 8004a4e:	3a01      	subs	r2, #1
 8004a50:	f820 3b02 	strh.w	r3, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004a54:	4613      	mov	r3, r2
 8004a56:	3002      	adds	r0, #2
 8004a58:	f002 0201 	and.w	r2, r2, #1
 8004a5c:	b1bb      	cbz	r3, 8004a8e <Vector90+0x23e>
 8004a5e:	b132      	cbz	r2, 8004a6e <Vector90+0x21e>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004a60:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004a64:	f820 2c02 	strh.w	r2, [r0, #-2]
 8004a68:	3002      	adds	r0, #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	d00f      	beq.n	8004a8e <Vector90+0x23e>
 8004a6e:	46a2      	mov	sl, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004a70:	684c      	ldr	r4, [r1, #4]
 8004a72:	f101 0c04 	add.w	ip, r1, #4
 8004a76:	6889      	ldr	r1, [r1, #8]
 8004a78:	4602      	mov	r2, r0
 8004a7a:	f820 4c02 	strh.w	r4, [r0, #-2]
 8004a7e:	f822 1b02 	strh.w	r1, [r2], #2
 8004a82:	1c90      	adds	r0, r2, #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004a84:	3b02      	subs	r3, #2
 8004a86:	f10c 0104 	add.w	r1, ip, #4
 8004a8a:	d1f1      	bne.n	8004a70 <Vector90+0x220>
 8004a8c:	4654      	mov	r4, sl
 8004a8e:	f8d9 000c 	ldr.w	r0, [r9, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8004a92:	19c3      	adds	r3, r0, r7
 8004a94:	f8c9 300c 	str.w	r3, [r9, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8004a98:	f8b9 3010 	ldrh.w	r3, [r9, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004a9c:	8a68      	ldrh	r0, [r5, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004a9e:	f8d9 1008 	ldr.w	r1, [r9, #8]
        epcp->out_state->rxsize             -= n;
 8004aa2:	f8d9 2004 	ldr.w	r2, [r9, #4]
        epcp->out_state->rxpkts             -= 1;
 8004aa6:	3b01      	subs	r3, #1
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004aa8:	19c9      	adds	r1, r1, r7
        epcp->out_state->rxsize             -= n;
 8004aaa:	1bd2      	subs	r2, r2, r7
        epcp->out_state->rxpkts             -= 1;
 8004aac:	b29b      	uxth	r3, r3

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004aae:	4287      	cmp	r7, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004ab0:	f8c9 1008 	str.w	r1, [r9, #8]
        epcp->out_state->rxsize             -= n;
 8004ab4:	f8c9 2004 	str.w	r2, [r9, #4]
        epcp->out_state->rxpkts             -= 1;
 8004ab8:	f8a9 3010 	strh.w	r3, [r9, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004abc:	d314      	bcc.n	8004ae8 <Vector90+0x298>
 8004abe:	b19b      	cbz	r3, 8004ae8 <Vector90+0x298>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8004ac0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8004ac4:	f420 4190 	bic.w	r1, r0, #18432	; 0x4800
 8004ac8:	f021 0270 	bic.w	r2, r1, #112	; 0x70
 8004acc:	f482 5340 	eor.w	r3, r2, #12288	; 0x3000
 8004ad0:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8004ad4:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8004ad8:	0423      	lsls	r3, r4, #16
 8004ada:	f53f af09 	bmi.w	80048f0 <Vector90+0xa0>
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
}
 8004ade:	b003      	add	sp, #12
 8004ae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
 8004ae4:	f7fd b9c4 	b.w	8001e70 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8004ae8:	2001      	movs	r0, #1
 8004aea:	40a0      	lsls	r0, r4
 8004aec:	f241 4138 	movw	r1, #5176	; 0x1438
 8004af0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004af4:	894a      	ldrh	r2, [r1, #10]
 8004af6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004afa:	ea22 0200 	bic.w	r2, r2, r0
 8004afe:	6873      	ldr	r3, [r6, #4]
 8004b00:	f241 4038 	movw	r0, #5176	; 0x1438
 8004b04:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004b08:	8142      	strh	r2, [r0, #10]
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	4811      	ldr	r0, [pc, #68]	; (8004b54 <Vector90+0x304>)
 8004b10:	4790      	blx	r2
 8004b12:	e7df      	b.n	8004ad4 <Vector90+0x284>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8004b14:	f241 4138 	movw	r1, #5176	; 0x1438
 8004b18:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004b1c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004b20:	6873      	ldr	r3, [r6, #4]
 8004b22:	480c      	ldr	r0, [pc, #48]	; (8004b54 <Vector90+0x304>)
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	4621      	mov	r1, r4
 8004b28:	4790      	blx	r2
 8004b2a:	e7d3      	b.n	8004ad4 <Vector90+0x284>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	40a0      	lsls	r0, r4
 8004b30:	f241 4338 	movw	r3, #5176	; 0x1438
 8004b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b38:	8919      	ldrh	r1, [r3, #8]
 8004b3a:	68aa      	ldr	r2, [r5, #8]
 8004b3c:	ea21 0100 	bic.w	r1, r1, r0
 8004b40:	f241 4038 	movw	r0, #5176	; 0x1438
 8004b44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004b48:	8101      	strh	r1, [r0, #8]
 8004b4a:	4802      	ldr	r0, [pc, #8]	; (8004b54 <Vector90+0x304>)
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4790      	blx	r2
 8004b50:	e74f      	b.n	80049f2 <Vector90+0x1a2>
 8004b52:	bf00      	nop
 8004b54:	20001438 	.word	0x20001438
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004b58:	6899      	ldr	r1, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8004b5a:	ea5f 5cdc 	movs.w	ip, ip, lsr #23
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004b5e:	f101 5e00 	add.w	lr, r1, #536870912	; 0x20000000
 8004b62:	f50e 5240 	add.w	r2, lr, #12288	; 0x3000
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8004b66:	f8d9 300c 	ldr.w	r3, [r9, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004b6a:	ea4f 0e42 	mov.w	lr, r2, lsl #1

  nhw = n / 2;
  while (nhw > 0) {
 8004b6e:	d07a      	beq.n	8004c66 <Vector90+0x416>
    stm32_usb_pma_t w;

    w = *pmap++;
 8004b70:	4672      	mov	r2, lr
    *iqp->q_wrptr++ = (uint8_t)w;
 8004b72:	f8d3 b014 	ldr.w	fp, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8004b76:	f852 9b04 	ldr.w	r9, [r2], #4
 8004b7a:	f10c 3aff 	add.w	sl, ip, #4294967295
    *iqp->q_wrptr++ = (uint8_t)w;
 8004b7e:	f80b 9b01 	strb.w	r9, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004b82:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004b84:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004b88:	458b      	cmp	fp, r1
 8004b8a:	f00a 0a01 	and.w	sl, sl, #1
 8004b8e:	f080 8094 	bcs.w	8004cba <Vector90+0x46a>
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004b92:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8004b96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8004b9a:	f80b 9b01 	strb.w	r9, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004b9e:	6919      	ldr	r1, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004ba0:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004ba4:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004ba6:	bf24      	itt	cs
 8004ba8:	68d9      	ldrcs	r1, [r3, #12]
 8004baa:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8004bac:	f1bc 0901 	subs.w	r9, ip, #1
 8004bb0:	d057      	beq.n	8004c62 <Vector90+0x412>
 8004bb2:	f1ba 0f00 	cmp.w	sl, #0
 8004bb6:	d01d      	beq.n	8004bf4 <Vector90+0x3a4>
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004bb8:	f8d3 b014 	ldr.w	fp, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8004bbc:	f852 ab04 	ldr.w	sl, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8004bc0:	f80b ab01 	strb.w	sl, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004bc4:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004bc6:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004bca:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004bcc:	bf28      	it	cs
 8004bce:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004bd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8004bd4:	bf28      	it	cs
 8004bd6:	6159      	strcs	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004bd8:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8004bdc:	f80b ab01 	strb.w	sl, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004be0:	6919      	ldr	r1, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004be2:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004be6:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004be8:	bf24      	itt	cs
 8004bea:	68d9      	ldrcs	r1, [r3, #12]
 8004bec:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8004bee:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf2:	d036      	beq.n	8004c62 <Vector90+0x412>
 8004bf4:	9001      	str	r0, [sp, #4]
    stm32_usb_pma_t w;

    w = *pmap++;
 8004bf6:	f852 0b04 	ldr.w	r0, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8004bfa:	f8d3 b014 	ldr.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004bfe:	ea4f 2a10 	mov.w	sl, r0, lsr #8
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004c02:	f80b 0b01 	strb.w	r0, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004c06:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004c08:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004c0c:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004c0e:	bf28      	it	cs
 8004c10:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
 8004c12:	f109 39ff 	add.w	r9, r9, #4294967295
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8004c16:	bf28      	it	cs
 8004c18:	6159      	strcs	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004c1a:	6959      	ldr	r1, [r3, #20]
 8004c1c:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004c20:	6918      	ldr	r0, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004c22:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004c24:	4281      	cmp	r1, r0
      iqp->q_wrptr = iqp->q_buffer;
 8004c26:	bf28      	it	cs
 8004c28:	68d9      	ldrcs	r1, [r3, #12]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8004c2a:	f852 ab04 	ldr.w	sl, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8004c2e:	bf28      	it	cs
 8004c30:	6159      	strcs	r1, [r3, #20]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004c32:	6959      	ldr	r1, [r3, #20]
 8004c34:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004c38:	6918      	ldr	r0, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004c3a:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004c3c:	4281      	cmp	r1, r0
 8004c3e:	d301      	bcc.n	8004c44 <Vector90+0x3f4>
      iqp->q_wrptr = iqp->q_buffer;
 8004c40:	68d9      	ldr	r1, [r3, #12]
 8004c42:	6159      	str	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004c44:	6959      	ldr	r1, [r3, #20]
 8004c46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8004c4a:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004c4e:	6918      	ldr	r0, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004c50:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004c52:	4281      	cmp	r1, r0
      iqp->q_wrptr = iqp->q_buffer;
 8004c54:	bf24      	itt	cs
 8004c56:	68d9      	ldrcs	r1, [r3, #12]
 8004c58:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8004c5a:	f1b9 0901 	subs.w	r9, r9, #1
 8004c5e:	d1ca      	bne.n	8004bf6 <Vector90+0x3a6>
 8004c60:	9801      	ldr	r0, [sp, #4]
 8004c62:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8004c66:	07c2      	lsls	r2, r0, #31
 8004c68:	d50a      	bpl.n	8004c80 <Vector90+0x430>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	f8de 1000 	ldr.w	r1, [lr]
 8004c70:	f802 1b01 	strb.w	r1, [r2], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004c74:	6918      	ldr	r0, [r3, #16]
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8004c76:	615a      	str	r2, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004c78:	4282      	cmp	r2, r0
      iqp->q_wrptr = iqp->q_buffer;
 8004c7a:	bf24      	itt	cs
 8004c7c:	68da      	ldrcs	r2, [r3, #12]
 8004c7e:	615a      	strcs	r2, [r3, #20]
 8004c80:	2120      	movs	r1, #32
 8004c82:	f381 8811 	msr	BASEPRI, r1
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	19ca      	adds	r2, r1, r7
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	f7ff fd2e 	bl	80046f0 <chThdDequeueAllI>
 8004c94:	2200      	movs	r2, #0
 8004c96:	f382 8811 	msr	BASEPRI, r2
 8004c9a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8004c9e:	e6fb      	b.n	8004a98 <Vector90+0x248>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8004ca0:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 8004ca4:	68d9      	ldr	r1, [r3, #12]
 8004ca6:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8004caa:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 8004cae:	eb00 030c 	add.w	r3, r0, ip
 8004cb2:	0058      	lsls	r0, r3, #1
 8004cb4:	f7ff fd34 	bl	8004720 <usb_packet_write_from_queue.10138.4222>
 8004cb8:	e68b      	b.n	80049d2 <Vector90+0x182>
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	6159      	str	r1, [r3, #20]
 8004cbe:	e768      	b.n	8004b92 <Vector90+0x342>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004cc0:	480f      	ldr	r0, [pc, #60]	; (8004d00 <Vector90+0x4b0>)

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8004cc2:	6c19      	ldr	r1, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004cc4:	6842      	ldr	r2, [r0, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8004cc6:	f021 0108 	bic.w	r1, r1, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004cca:	6812      	ldr	r2, [r2, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8004ccc:	6419      	str	r1, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	f43f adf2 	beq.w	80048b8 <Vector90+0x68>
 8004cd4:	2104      	movs	r1, #4
 8004cd6:	4790      	blx	r2
 8004cd8:	e5ee      	b.n	80048b8 <Vector90+0x68>

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
 8004cda:	4d09      	ldr	r5, [pc, #36]	; (8004d00 <Vector90+0x4b0>)
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f001 f887 	bl	8005df0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8004ce2:	6868      	ldr	r0, [r5, #4]
 8004ce4:	6802      	ldr	r2, [r0, #0]
 8004ce6:	b112      	cbz	r2, 8004cee <Vector90+0x49e>
 8004ce8:	4628      	mov	r0, r5
 8004cea:	2100      	movs	r1, #0
 8004cec:	4790      	blx	r2
    STM32_USB->ISTR = ~ISTR_RESET;
 8004cee:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 8004cf2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8004cf6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004cfa:	644b      	str	r3, [r1, #68]	; 0x44
 8004cfc:	e5b3      	b.n	8004866 <Vector90+0x16>
 8004cfe:	bf00      	nop
 8004d00:	20001438 	.word	0x20001438
 8004d04:	f3af 8000 	nop.w
 8004d08:	f3af 8000 	nop.w
 8004d0c:	f3af 8000 	nop.w

08004d10 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004d10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004d14:	68c2      	ldr	r2, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8004d16:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004d18:	6953      	ldr	r3, [r2, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8004d1a:	8a10      	ldrh	r0, [r2, #16]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8004d1c:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 8004d1e:	685a      	ldr	r2, [r3, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8004d20:	7819      	ldrb	r1, [r3, #0]
 8004d22:	4290      	cmp	r0, r2
 8004d24:	bf38      	it	cc
 8004d26:	4602      	movcc	r2, r0
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d136      	bne.n	8004d9a <usb_lld_prepare_transmit+0x8a>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004d2c:	f44f 45b8 	mov.w	r5, #23552	; 0x5c00
 8004d30:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8004d34:	6d28      	ldr	r0, [r5, #80]	; 0x50
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8004d36:	1c51      	adds	r1, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004d38:	f100 5500 	add.w	r5, r0, #536870912	; 0x20000000
 8004d3c:	f505 5040 	add.w	r0, r5, #12288	; 0x3000
 8004d40:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8004d44:	0064      	lsls	r4, r4, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004d46:	6825      	ldr	r5, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004d48:	68d8      	ldr	r0, [r3, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004d4a:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
 8004d4e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004d52:	6062      	str	r2, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004d54:	005b      	lsls	r3, r3, #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d56:	084a      	lsrs	r2, r1, #1
 8004d58:	d01d      	beq.n	8004d96 <usb_lld_prepare_transmit+0x86>
 8004d5a:	1e51      	subs	r1, r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d5c:	f830 4b02 	ldrh.w	r4, [r0], #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d60:	460a      	mov	r2, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d62:	f843 4b04 	str.w	r4, [r3], #4
 8004d66:	f001 0101 	and.w	r1, r1, #1
 8004d6a:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d6c:	b19a      	cbz	r2, 8004d96 <usb_lld_prepare_transmit+0x86>
 8004d6e:	b131      	cbz	r1, 8004d7e <usb_lld_prepare_transmit+0x6e>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d70:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8004d74:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d76:	3a01      	subs	r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d78:	f843 1b04 	str.w	r1, [r3], #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d7c:	d00b      	beq.n	8004d96 <usb_lld_prepare_transmit+0x86>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d7e:	f830 5c02 	ldrh.w	r5, [r0, #-2]
 8004d82:	4619      	mov	r1, r3
 8004d84:	f830 4b02 	ldrh.w	r4, [r0], #2
 8004d88:	f841 5b04 	str.w	r5, [r1], #4
 8004d8c:	3002      	adds	r0, #2
 8004d8e:	605c      	str	r4, [r3, #4]
 8004d90:	1d0b      	adds	r3, r1, #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d92:	3a02      	subs	r2, #2
 8004d94:	d1f3      	bne.n	8004d7e <usb_lld_prepare_transmit+0x6e>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8004d96:	bc30      	pop	{r4, r5}
 8004d98:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8004d9a:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 8004d9e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004da2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8004da4:	68d9      	ldr	r1, [r3, #12]
 8004da6:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 8004daa:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 8004dae:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 8004db2:	0058      	lsls	r0, r3, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8004db4:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8004db6:	f7ff bcb3 	b.w	8004720 <usb_packet_write_from_queue.10138.4222>
 8004dba:	bf00      	nop
 8004dbc:	f3af 8000 	nop.w

08004dc0 <usbPrepareTransmit.constprop.7>:
 * @param[in] buf       buffer where to fetch the data to be transmitted
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
 8004dc0:	b410      	push	{r4}
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004dc2:	68c3      	ldr	r3, [r0, #12]

  isp->txqueued           = FALSE;
 8004dc4:	2400      	movs	r4, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004dc6:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
 8004dc8:	60d9      	str	r1, [r3, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004dca:	4621      	mov	r1, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 8004dcc:	701c      	strb	r4, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
 8004dce:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 8004dd0:	609c      	str	r4, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 8004dd2:	bc10      	pop	{r4}
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004dd4:	f7ff bf9c 	b.w	8004d10 <usb_lld_prepare_transmit>
 8004dd8:	f3af 8000 	nop.w
 8004ddc:	f3af 8000 	nop.w

08004de0 <onotify.8734>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8004de2:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8004de4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	7811      	ldrb	r1, [r2, #0]
 8004dec:	2904      	cmp	r1, #4
 8004dee:	d000      	beq.n	8004df2 <onotify.8734+0x12>
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df2:	7a20      	ldrb	r0, [r4, #8]
 8004df4:	2802      	cmp	r0, #2
 8004df6:	d1fb      	bne.n	8004df0 <onotify.8734+0x10>
      (sdup->state != SDU_READY))
    return;

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in) &&
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	8912      	ldrh	r2, [r2, #8]
 8004dfc:	fa42 f103 	asr.w	r1, r2, r3
 8004e00:	f011 0301 	ands.w	r3, r1, #1
 8004e04:	d1f4      	bne.n	8004df0 <onotify.8734+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8004e06:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e0c:	1a40      	subs	r0, r0, r1
 8004e0e:	1a82      	subs	r2, r0, r2
 8004e10:	d0ee      	beq.n	8004df0 <onotify.8734+0x10>
 8004e12:	f383 8811 	msr	BASEPRI, r3
      ((n = oqGetFullI(&sdup->oqueue)) > 0)) {
    osalSysUnlock();

    usbPrepareQueuedTransmit(sdup->config->usbp,
 8004e16:	f8d4 5254 	ldr.w	r5, [r4, #596]	; 0x254
 8004e1a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e1e:	6828      	ldr	r0, [r5, #0]
 8004e20:	7929      	ldrb	r1, [r5, #4]
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004e22:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8004e26:	68fd      	ldr	r5, [r7, #12]

  isp->txqueued           = TRUE;
 8004e28:	2701      	movs	r7, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004e2a:	696d      	ldr	r5, [r5, #20]

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8004e2c:	60ab      	str	r3, [r5, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8004e2e:	702f      	strb	r7, [r5, #0]
  isp->mode.queue.txqueue = oqp;
 8004e30:	60ee      	str	r6, [r5, #12]
  isp->txsize             = n;
 8004e32:	606a      	str	r2, [r5, #4]
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8004e34:	f7ff ff6c 	bl	8004d10 <usb_lld_prepare_transmit>
 8004e38:	2320      	movs	r3, #32
 8004e3a:	f383 8811 	msr	BASEPRI, r3
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8004e3e:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 8004e42:	6808      	ldr	r0, [r1, #0]
 8004e44:	7909      	ldrb	r1, [r1, #4]
  }
}
 8004e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedTransmit(sdup->config->usbp,
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8004e4a:	f000 bf41 	b.w	8005cd0 <usbStartTransmitI>
 8004e4e:	bf00      	nop

08004e50 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	2320      	movs	r3, #32
 8004e54:	4604      	mov	r4, r0
 8004e56:	460e      	mov	r6, r1
 8004e58:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify)
 8004e5c:	69c1      	ldr	r1, [r0, #28]
 8004e5e:	b101      	cbz	r1, 8004e62 <chIQGetTimeout+0x12>
    iqp->q_notify(iqp);
 8004e60:	4788      	blx	r1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8004e62:	68a5      	ldr	r5, [r4, #8]

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8004e64:	4620      	mov	r0, r4
 8004e66:	4631      	mov	r1, r6

  chSysLock();
  if (iqp->q_notify)
    iqp->q_notify(iqp);

  while (chIQIsEmptyI(iqp)) {
 8004e68:	b935      	cbnz	r5, 8004e78 <chIQGetTimeout+0x28>
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8004e6a:	f7fe ff91 	bl	8003d90 <chThdEnqueueTimeoutS>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	daf7      	bge.n	8004e62 <chIQGetTimeout+0x12>
 8004e72:	f385 8811 	msr	BASEPRI, r5
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8004e78:	69a3      	ldr	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8004e7a:	3d01      	subs	r5, #1
 8004e7c:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
 8004e7e:	f813 0b01 	ldrb.w	r0, [r3], #1
  if (iqp->q_rdptr >= iqp->q_top)
 8004e82:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8004e84:	61a3      	str	r3, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top)
 8004e86:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 8004e88:	bf24      	itt	cs
 8004e8a:	68e3      	ldrcs	r3, [r4, #12]
 8004e8c:	61a3      	strcs	r3, [r4, #24]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f381 8811 	msr	BASEPRI, r1

  chSysUnlock();
  return b;
}
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	bf00      	nop
 8004e98:	f3af 8000 	nop.w
 8004e9c:	f3af 8000 	nop.w

08004ea0 <thread1.8252>:
}

static msg_t thread1(void *p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8004ea0:	f640 40a0 	movw	r0, #3232	; 0xca0
static void queues1_setup(void) {

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread1(void *p) {
 8004ea4:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8004ea6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004eaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004eae:	f7ff ffcf 	bl	8004e50 <chIQGetTimeout>
  return 0;
}
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	bd08      	pop	{r3, pc}
 8004eb6:	bf00      	nop
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	f3af 8000 	nop.w

08004ec0 <gett.8764>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8004ec0:	300c      	adds	r0, #12
 8004ec2:	f7ff bfc5 	b.w	8004e50 <chIQGetTimeout>
 8004ec6:	bf00      	nop
 8004ec8:	f3af 8000 	nop.w
 8004ecc:	f3af 8000 	nop.w

08004ed0 <get.8768>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8004ed0:	300c      	adds	r0, #12
 8004ed2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ed6:	f7ff bfbb 	b.w	8004e50 <chIQGetTimeout>
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w

08004ee0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 8004ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8004ee8:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8004eec:	f04f 0b20 	mov.w	fp, #32
 8004ef0:	f38b 8811 	msr	BASEPRI, fp
  size_t r = 0;
 8004ef4:	2600      	movs	r6, #0
 *                      .
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
 8004ef6:	f101 0801 	add.w	r8, r1, #1
 8004efa:	eb01 0a02 	add.w	sl, r1, r2

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy)
 8004efe:	f1b9 0f00 	cmp.w	r9, #0
 8004f02:	d001      	beq.n	8004f08 <chIQReadTimeout+0x28>
      nfy(iqp);
 8004f04:	4620      	mov	r0, r4
 8004f06:	47c8      	blx	r9
 8004f08:	68a7      	ldr	r7, [r4, #8]

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4629      	mov	r1, r5
  chSysLock();
  while (true) {
    if (nfy)
      nfy(iqp);

    while (chIQIsEmptyI(iqp)) {
 8004f0e:	b947      	cbnz	r7, 8004f22 <chIQReadTimeout+0x42>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 8004f10:	f7fe ff3e 	bl	8003d90 <chThdEnqueueTimeoutS>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0f7      	beq.n	8004f08 <chIQReadTimeout+0x28>
 8004f18:	f387 8811 	msr	BASEPRI, r7
    if (--n == 0)
      return r;

    chSysLock();
  }
}
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8004f22:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8004f24:	1e7b      	subs	r3, r7, #1
 8004f26:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8004f28:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004f2c:	f808 0c01 	strb.w	r0, [r8, #-1]
    if (iqp->q_rdptr >= iqp->q_top)
 8004f30:	6921      	ldr	r1, [r4, #16]
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8004f32:	61a2      	str	r2, [r4, #24]
    if (iqp->q_rdptr >= iqp->q_top)
 8004f34:	428a      	cmp	r2, r1
      iqp->q_rdptr = iqp->q_buffer;
 8004f36:	bf24      	itt	cs
 8004f38:	68e1      	ldrcs	r1, [r4, #12]
 8004f3a:	61a1      	strcs	r1, [r4, #24]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f383 8811 	msr	BASEPRI, r3

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 8004f42:	3601      	adds	r6, #1
    if (--n == 0)
 8004f44:	45d0      	cmp	r8, sl
 8004f46:	d0e9      	beq.n	8004f1c <chIQReadTimeout+0x3c>
 8004f48:	f38b 8811 	msr	BASEPRI, fp
 8004f4c:	f108 0801 	add.w	r8, r8, #1
 8004f50:	e7d5      	b.n	8004efe <chIQReadTimeout+0x1e>
 8004f52:	bf00      	nop
 8004f54:	f3af 8000 	nop.w
 8004f58:	f3af 8000 	nop.w
 8004f5c:	f3af 8000 	nop.w

08004f60 <readt.8740>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, time);
 8004f60:	300c      	adds	r0, #12
 8004f62:	f7ff bfbd 	b.w	8004ee0 <chIQReadTimeout>
 8004f66:	bf00      	nop
 8004f68:	f3af 8000 	nop.w
 8004f6c:	f3af 8000 	nop.w

08004f70 <read.8748>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8004f70:	300c      	adds	r0, #12
 8004f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f76:	f7ff bfb3 	b.w	8004ee0 <chIQReadTimeout>
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w

08004f80 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	4604      	mov	r4, r0
 8004f84:	460f      	mov	r7, r1
 8004f86:	4616      	mov	r6, r2
 8004f88:	2320      	movs	r3, #32
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8004f8e:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8004f90:	4620      	mov	r0, r4
 8004f92:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8004f94:	b935      	cbnz	r5, 8004fa4 <chOQPutTimeout+0x24>
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8004f96:	f7fe fefb 	bl	8003d90 <chThdEnqueueTimeoutS>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	daf7      	bge.n	8004f8e <chOQPutTimeout+0xe>
 8004f9e:	f385 8811 	msr	BASEPRI, r5
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8004fa4:	6960      	ldr	r0, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8004fa6:	3d01      	subs	r5, #1
 8004fa8:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 8004faa:	f800 7b01 	strb.w	r7, [r0], #1
  if (oqp->q_wrptr >= oqp->q_top)
 8004fae:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8004fb0:	6160      	str	r0, [r4, #20]
  if (oqp->q_wrptr >= oqp->q_top)
 8004fb2:	4290      	cmp	r0, r2
    oqp->q_wrptr = oqp->q_buffer;
 8004fb4:	bf28      	it	cs
 8004fb6:	68e0      	ldrcs	r0, [r4, #12]

  if (oqp->q_notify)
 8004fb8:	69e1      	ldr	r1, [r4, #28]
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
  if (oqp->q_wrptr >= oqp->q_top)
    oqp->q_wrptr = oqp->q_buffer;
 8004fba:	bf28      	it	cs
 8004fbc:	6160      	strcs	r0, [r4, #20]

  if (oqp->q_notify)
 8004fbe:	b109      	cbz	r1, 8004fc4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	4788      	blx	r1
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0

  chSysUnlock();
  return Q_OK;
}
 8004fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fcc:	f3af 8000 	nop.w

08004fd0 <thread2.8249>:
}

static msg_t thread2(void *p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8004fd0:	f640 4064 	movw	r0, #3172	; 0xc64
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 8004fd4:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004fdc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fe0:	f7ff ffce 	bl	8004f80 <chOQPutTimeout>
  return 0;
}
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	bd08      	pop	{r3, pc}
 8004fe8:	f3af 8000 	nop.w
 8004fec:	f3af 8000 	nop.w

08004ff0 <putt.8771>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8004ff0:	3030      	adds	r0, #48	; 0x30
 8004ff2:	f7ff bfc5 	b.w	8004f80 <chOQPutTimeout>
 8004ff6:	bf00      	nop
 8004ff8:	f3af 8000 	nop.w
 8004ffc:	f3af 8000 	nop.w

08005000 <put.8776>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8005000:	3030      	adds	r0, #48	; 0x30
 8005002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005006:	f7ff bfbb 	b.w	8004f80 <chOQPutTimeout>
 800500a:	bf00      	nop
 800500c:	f3af 8000 	nop.w

08005010 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	b083      	sub	sp, #12
 8005018:	460f      	mov	r7, r1
 800501a:	4615      	mov	r5, r2
 800501c:	469b      	mov	fp, r3
  qnotify_t nfy = oqp->q_notify;
 800501e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8005022:	f04f 0a20 	mov.w	sl, #32
 8005026:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 800502a:	2600      	movs	r6, #0
 800502c:	46b1      	mov	r9, r6
 800502e:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
    if (oqp->q_wrptr >= oqp->q_top)
      oqp->q_wrptr = oqp->q_buffer;

    if (nfy)
      nfy(oqp);
 8005030:	4620      	mov	r0, r4
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005032:	1e5a      	subs	r2, r3, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8005034:	b1db      	cbz	r3, 800506e <chOQWriteTimeout+0x5e>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005036:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8005038:	6963      	ldr	r3, [r4, #20]
 800503a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
    if (oqp->q_wrptr >= oqp->q_top)
 8005042:	6922      	ldr	r2, [r4, #16]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8005044:	6163      	str	r3, [r4, #20]
    if (oqp->q_wrptr >= oqp->q_top)
 8005046:	4293      	cmp	r3, r2
      oqp->q_wrptr = oqp->q_buffer;
 8005048:	bf24      	itt	cs
 800504a:	68e3      	ldrcs	r3, [r4, #12]
 800504c:	6163      	strcs	r3, [r4, #20]

    if (nfy)
 800504e:	f1b8 0f00 	cmp.w	r8, #0
 8005052:	d000      	beq.n	8005056 <chOQWriteTimeout+0x46>
      nfy(oqp);
 8005054:	47c0      	blx	r8
 8005056:	f389 8811 	msr	BASEPRI, r9

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 800505a:	3601      	adds	r6, #1
    if (--n == 0)
 800505c:	3d01      	subs	r5, #1
 800505e:	d010      	beq.n	8005082 <chOQWriteTimeout+0x72>
 8005060:	f38a 8811 	msr	BASEPRI, sl
 8005064:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
    if (oqp->q_wrptr >= oqp->q_top)
      oqp->q_wrptr = oqp->q_buffer;

    if (nfy)
      nfy(oqp);
 8005066:	4620      	mov	r0, r4
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005068:	1e5a      	subs	r2, r3, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e3      	bne.n	8005036 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 800506e:	4659      	mov	r1, fp
 8005070:	4620      	mov	r0, r4
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	f7fe fe8c 	bl	8003d90 <chThdEnqueueTimeoutS>
 8005078:	9901      	ldr	r1, [sp, #4]
 800507a:	2800      	cmp	r0, #0
 800507c:	d0d7      	beq.n	800502e <chOQWriteTimeout+0x1e>
 800507e:	f381 8811 	msr	BASEPRI, r1
    w++;
    if (--n == 0)
      return w;
    chSysLock();
  }
}
 8005082:	4630      	mov	r0, r6
 8005084:	b003      	add	sp, #12
 8005086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508a:	bf00      	nop
 800508c:	f3af 8000 	nop.w

08005090 <writet.8753>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
 8005090:	3030      	adds	r0, #48	; 0x30
 8005092:	f7ff bfbd 	b.w	8005010 <chOQWriteTimeout>
 8005096:	bf00      	nop
 8005098:	f3af 8000 	nop.w
 800509c:	f3af 8000 	nop.w

080050a0 <write.8759>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 80050a0:	3030      	adds	r0, #48	; 0x30
 80050a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050a6:	f7ff bfb3 	b.w	8005010 <chOQWriteTimeout>
 80050aa:	bf00      	nop
 80050ac:	f3af 8000 	nop.w

080050b0 <usb_lld_init_endpoint.4218>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80050b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80050b4:	68da      	ldr	r2, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80050b6:	b470      	push	{r4, r5, r6}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80050b8:	6815      	ldr	r5, [r2, #0]
 80050ba:	f005 0603 	and.w	r6, r5, #3
 80050be:	1e73      	subs	r3, r6, #1
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	bf96      	itet	ls
 80050c4:	4c28      	ldrls	r4, [pc, #160]	; (8005168 <usb_lld_init_endpoint.4218+0xb8>)
 80050c6:	f44f 7300 	movhi.w	r3, #512	; 0x200
 80050ca:	f834 3013 	ldrhls.w	r3, [r4, r3, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 80050ce:	6894      	ldr	r4, [r2, #8]
 80050d0:	b10c      	cbz	r4, 80050d6 <usb_lld_init_endpoint.4218+0x26>
    epr |= EPR_STAT_TX_NAK;
 80050d2:	f043 0320 	orr.w	r3, r3, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 80050d6:	68d5      	ldr	r5, [r2, #12]
 80050d8:	b10d      	cbz	r5, 80050de <usb_lld_init_endpoint.4218+0x2e>
    epr |= EPR_STAT_RX_NAK;
 80050da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 80050de:	ea43 0601 	orr.w	r6, r3, r1
 80050e2:	f426 45f0 	bic.w	r5, r6, #30720	; 0x7800
 80050e6:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 80050ea:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80050ee:	f025 0670 	bic.w	r6, r5, #112	; 0x70
 80050f2:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
  EPR_TOGGLE(ep, epr);
 80050f6:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
 80050fa:	f647 0570 	movw	r5, #30832	; 0x7870
 80050fe:	401d      	ands	r5, r3

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8005100:	8a53      	ldrh	r3, [r2, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8005102:	4075      	eors	r5, r6
 8005104:	f844 5021 	str.w	r5, [r4, r1, lsl #2]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8005108:	1e5c      	subs	r4, r3, #1
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 800510a:	2b3e      	cmp	r3, #62	; 0x3e
 800510c:	d821      	bhi.n	8005152 <usb_lld_init_endpoint.4218+0xa2>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800510e:	f044 0601 	orr.w	r6, r4, #1
 8005112:	1c75      	adds	r5, r6, #1
 8005114:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 8005118:	0266      	lsls	r6, r4, #9
 800511a:	f406 457c 	and.w	r5, r6, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 800511e:	f44f 46b8 	mov.w	r6, #23552	; 0x5c00
 8005122:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8005126:	6d36      	ldr	r6, [r6, #80]	; 0x50
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8005128:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800512c:	8a12      	ldrh	r2, [r2, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 800512e:	f106 5600 	add.w	r6, r6, #536870912	; 0x20000000
 8005132:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8005136:	1912      	adds	r2, r2, r4
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8005138:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800513c:	0049      	lsls	r1, r1, #1
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800513e:	18d3      	adds	r3, r2, r3
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
 8005140:	2600      	movs	r6, #0
 8005142:	604e      	str	r6, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8005144:	60cd      	str	r5, [r1, #12]
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8005146:	600c      	str	r4, [r1, #0]
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8005148:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 800514c:	608a      	str	r2, [r1, #8]
}
 800514e:	bc70      	pop	{r4, r5, r6}
 8005150:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8005152:	f044 051f 	orr.w	r5, r4, #31
 8005156:	1c6c      	adds	r4, r5, #1
 8005158:	1166      	asrs	r6, r4, #5
 800515a:	ea6f 65c6 	mvn.w	r5, r6, lsl #27
 800515e:	ea6f 4455 	mvn.w	r4, r5, lsr #17
 8005162:	b2a5      	uxth	r5, r4
 8005164:	e7db      	b.n	800511e <usb_lld_init_endpoint.4218+0x6e>
 8005166:	bf00      	nop
 8005168:	0800a2e0 	.word	0x0800a2e0
 800516c:	f3af 8000 	nop.w

08005170 <set_address.9375>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8005170:	b538      	push	{r3, r4, r5, lr}

  usbp->address = usbp->setup[2];
 8005172:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005176:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8005178:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 800517c:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8005180:	680d      	ldr	r5, [r1, #0]
 8005182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005186:	f2c4 0300 	movt	r3, #16384	; 0x4000
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 800518a:	4604      	mov	r4, r0
 800518c:	64da      	str	r2, [r3, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800518e:	b10d      	cbz	r5, 8005194 <set_address.9375+0x24>
 8005190:	2101      	movs	r1, #1
 8005192:	47a8      	blx	r5
  usbp->state = USB_SELECTED;
 8005194:	2003      	movs	r0, #3
 8005196:	7020      	strb	r0, [r4, #0]
 8005198:	bd38      	pop	{r3, r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w

080051a0 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	f3af 8000 	nop.w
 80051a8:	f3af 8000 	nop.w
 80051ac:	f3af 8000 	nop.w

080051b0 <sduRequestsHook>:
 * @retval TRUE         Message handled internally.
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80051b0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80051b4:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80051b8:	2920      	cmp	r1, #32
 80051ba:	d001      	beq.n	80051c0 <sduRequestsHook+0x10>
      return TRUE;
    default:
      return FALSE;
    }
  }
  return FALSE;
 80051bc:	2000      	movs	r0, #0
}
 80051be:	4770      	bx	lr
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80051c0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 80051c4:	2a21      	cmp	r2, #33	; 0x21
 80051c6:	d003      	beq.n	80051d0 <sduRequestsHook+0x20>
 80051c8:	2a22      	cmp	r2, #34	; 0x22
 80051ca:	d009      	beq.n	80051e0 <sduRequestsHook+0x30>
 80051cc:	2a20      	cmp	r2, #32
 80051ce:	d1f5      	bne.n	80051bc <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return TRUE;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80051d0:	4906      	ldr	r1, [pc, #24]	; (80051ec <sduRequestsHook+0x3c>)
 80051d2:	2207      	movs	r2, #7
 80051d4:	2300      	movs	r3, #0
 80051d6:	6681      	str	r1, [r0, #104]	; 0x68
 80051d8:	66c2      	str	r2, [r0, #108]	; 0x6c
 80051da:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 80051dc:	2001      	movs	r0, #1
 80051de:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80051e0:	2300      	movs	r3, #0
 80051e2:	6683      	str	r3, [r0, #104]	; 0x68
 80051e4:	66c3      	str	r3, [r0, #108]	; 0x6c
 80051e6:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 80051e8:	2001      	movs	r0, #1
 80051ea:	4770      	bx	lr
 80051ec:	20000830 	.word	0x20000830

080051f0 <tmo.8442>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	f3af 8000 	nop.w
 80051f8:	f3af 8000 	nop.w
 80051fc:	f3af 8000 	nop.w

08005200 <thread1.8445>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	f3af 8000 	nop.w
 8005208:	f3af 8000 	nop.w
 800520c:	f3af 8000 	nop.w

08005210 <notify.8246>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	f3af 8000 	nop.w
 8005218:	f3af 8000 	nop.w
 800521c:	f3af 8000 	nop.w

08005220 <null_provider.7957>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8005220:	2000      	movs	r0, #0
 8005222:	4770      	bx	lr
 8005224:	f3af 8000 	nop.w
 8005228:	f3af 8000 	nop.w
 800522c:	f3af 8000 	nop.w

08005230 <Vector8C>:
 */
CH_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  CH_IRQ_PROLOGUE();

  CH_IRQ_EPILOGUE();
 8005230:	f7fc be1e 	b.w	8001e70 <_port_irq_epilogue>
 8005234:	f3af 8000 	nop.w
 8005238:	f3af 8000 	nop.w
 800523c:	f3af 8000 	nop.w

08005240 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8005240:	2300      	movs	r3, #0
 8005242:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005246:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8005248:	4806      	ldr	r0, [pc, #24]	; (8005264 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 800524a:	f3c1 6103 	ubfx	r1, r1, #24, #4
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 800524e:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8005250:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 8005252:	060c      	lsls	r4, r1, #24
 8005254:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8005256:	b10a      	cbz	r2, 800525c <Vector84+0x1c>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8005258:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800525a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8005260:	f7fc be06 	b.w	8001e70 <_port_irq_epilogue>
 8005264:	20000f08 	.word	0x20000f08
 8005268:	f3af 8000 	nop.w
 800526c:	f3af 8000 	nop.w

08005270 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8005270:	2300      	movs	r3, #0
 8005272:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005276:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8005278:	4806      	ldr	r0, [pc, #24]	; (8005294 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 800527a:	f3c1 5103 	ubfx	r1, r1, #20, #4
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 800527e:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8005280:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 8005282:	050c      	lsls	r4, r1, #20
 8005284:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8005286:	b10a      	cbz	r2, 800528c <Vector80+0x1c>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8005288:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800528a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8005290:	f7fc bdee 	b.w	8001e70 <_port_irq_epilogue>
 8005294:	20000f08 	.word	0x20000f08
 8005298:	f3af 8000 	nop.w
 800529c:	f3af 8000 	nop.w

080052a0 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052a6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 80052a8:	4806      	ldr	r0, [pc, #24]	; (80052c4 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 80052aa:	f3c1 4103 	ubfx	r1, r1, #16, #4
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 80052ae:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80052b0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 80052b2:	040c      	lsls	r4, r1, #16
 80052b4:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 80052b6:	b10a      	cbz	r2, 80052bc <Vector7C+0x1c>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80052b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80052ba:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80052c0:	f7fc bdd6 	b.w	8001e70 <_port_irq_epilogue>
 80052c4:	20000f08 	.word	0x20000f08
 80052c8:	f3af 8000 	nop.w
 80052cc:	f3af 8000 	nop.w

080052d0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052d6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80052d8:	4806      	ldr	r0, [pc, #24]	; (80052f4 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 80052da:	f3c1 3103 	ubfx	r1, r1, #12, #4
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 80052de:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 80052e0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 80052e2:	030c      	lsls	r4, r1, #12
 80052e4:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 80052e6:	b10a      	cbz	r2, 80052ec <Vector78+0x1c>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80052e8:	69c0      	ldr	r0, [r0, #28]
 80052ea:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80052f0:	f7fc bdbe 	b.w	8001e70 <_port_irq_epilogue>
 80052f4:	20000f08 	.word	0x20000f08
 80052f8:	f3af 8000 	nop.w
 80052fc:	f3af 8000 	nop.w

08005300 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8005300:	2300      	movs	r3, #0
 8005302:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005306:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8005308:	4806      	ldr	r0, [pc, #24]	; (8005324 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 800530a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 800530e:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8005310:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 8005312:	020c      	lsls	r4, r1, #8
 8005314:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8005316:	b10a      	cbz	r2, 800531c <Vector74+0x1c>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8005318:	6940      	ldr	r0, [r0, #20]
 800531a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8005320:	f7fc bda6 	b.w	8001e70 <_port_irq_epilogue>
 8005324:	20000f08 	.word	0x20000f08
 8005328:	f3af 8000 	nop.w
 800532c:	f3af 8000 	nop.w

08005330 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8005330:	2300      	movs	r3, #0
 8005332:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005336:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8005338:	4806      	ldr	r0, [pc, #24]	; (8005354 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 800533a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 800533e:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8005340:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 8005342:	010c      	lsls	r4, r1, #4
 8005344:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8005346:	b10a      	cbz	r2, 800534c <Vector70+0x1c>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8005348:	68c0      	ldr	r0, [r0, #12]
 800534a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8005350:	f7fc bd8e 	b.w	8001e70 <_port_irq_epilogue>
 8005354:	20000f08 	.word	0x20000f08
 8005358:	f3af 8000 	nop.w
 800535c:	f3af 8000 	nop.w

08005360 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8005360:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8005362:	2300      	movs	r3, #0
 8005364:	f2c4 0302 	movt	r3, #16386	; 0x4002
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8005368:	4806      	ldr	r0, [pc, #24]	; (8005384 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800536a:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800536c:	6802      	ldr	r2, [r0, #0]
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800536e:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 8005372:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 8005374:	b10a      	cbz	r2, 800537a <Vector6C+0x1a>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8005376:	6840      	ldr	r0, [r0, #4]
 8005378:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800537a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800537e:	f7fc bd77 	b.w	8001e70 <_port_irq_epilogue>
 8005382:	bf00      	nop
 8005384:	20000f08 	.word	0x20000f08
 8005388:	f3af 8000 	nop.w
 800538c:	f3af 8000 	nop.w

08005390 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 8005392:	b510      	push	{r4, lr}
 8005394:	2020      	movs	r0, #32
 8005396:	699c      	ldr	r4, [r3, #24]
 8005398:	f380 8811 	msr	BASEPRI, r0
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800539c:	2003      	movs	r0, #3
 800539e:	f7fc fd0f 	bl	8001dc0 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 80053a2:	6a21      	ldr	r1, [r4, #32]
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d0f9      	beq.n	800539c <thread4+0xc>
 80053a8:	2000      	movs	r0, #0
 80053aa:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 80053ae:	bd10      	pop	{r4, pc}
 80053b0:	20001e58 	.word	0x20001e58
 80053b4:	f3af 8000 	nop.w
 80053b8:	f3af 8000 	nop.w
 80053bc:	f3af 8000 	nop.w

080053c0 <thread8.8448>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d0b      	ldr	r5, [pc, #44]	; (80053f0 <thread8.8448+0x30>)
 80053c4:	4604      	mov	r4, r0

  do {
    chThdYield();
 80053c6:	f7fc faf3 	bl	80019b0 <chThdYield>
    chThdYield();
 80053ca:	f7fc faf1 	bl	80019b0 <chThdYield>
    chThdYield();
 80053ce:	f7fc faef 	bl	80019b0 <chThdYield>
    chThdYield();
 80053d2:	f7fc faed 	bl	80019b0 <chThdYield>
    (*(uint32_t *)p) += 4;
 80053d6:	6822      	ldr	r2, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 80053d8:	69ab      	ldr	r3, [r5, #24]
 80053da:	1d10      	adds	r0, r2, #4
 80053dc:	6020      	str	r0, [r4, #0]
 80053de:	7f59      	ldrb	r1, [r3, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 80053e0:	f001 0204 	and.w	r2, r1, #4
 80053e4:	b2d3      	uxtb	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ed      	beq.n	80053c6 <thread8.8448+0x6>
  return 0;
}
 80053ea:	2000      	movs	r0, #0
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
 80053ee:	bf00      	nop
 80053f0:	20001e58 	.word	0x20001e58
 80053f4:	f3af 8000 	nop.w
 80053f8:	f3af 8000 	nop.w
 80053fc:	f3af 8000 	nop.w

08005400 <thread3.8451>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 8005400:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005402:	4c07      	ldr	r4, [pc, #28]	; (8005420 <thread3.8451+0x20>)
 8005404:	e002      	b.n	800540c <thread3.8451+0xc>

  (void)p;
  while (!chThdShouldTerminateX())
    chSemWait(&sem1);
 8005406:	4807      	ldr	r0, [pc, #28]	; (8005424 <thread3.8451+0x24>)
 8005408:	f7fc fd12 	bl	8001e30 <chSemWait>
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 800540c:	69a3      	ldr	r3, [r4, #24]
 800540e:	7f58      	ldrb	r0, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8005410:	f000 0104 	and.w	r1, r0, #4
 8005414:	b2ca      	uxtb	r2, r1
 8005416:	2a00      	cmp	r2, #0
 8005418:	d0f5      	beq.n	8005406 <thread3.8451+0x6>
    chSemWait(&sem1);
  return 0;
}
 800541a:	2000      	movs	r0, #0
 800541c:	bd10      	pop	{r4, pc}
 800541e:	bf00      	nop
 8005420:	20001e58 	.word	0x20001e58
 8005424:	20000d04 	.word	0x20000d04
 8005428:	f3af 8000 	nop.w
 800542c:	f3af 8000 	nop.w

08005430 <bmk13_execute.8460>:
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8005430:	f24a 2030 	movw	r0, #41520	; 0xa230
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 8005434:	b510      	push	{r4, lr}

  test_print("--- System: ");
 8005436:	f6c0 0000 	movt	r0, #2048	; 0x800
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 800543a:	f24a 2440 	movw	r4, #41536	; 0xa240
 800543e:	f6c0 0400 	movt	r4, #2048	; 0x800
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 8005442:	f7fc fa0d 	bl	8001860 <test_print>
  test_printn(sizeof(ch_system_t));
 8005446:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800544a:	f7fc fa19 	bl	8001880 <test_printn>
  test_println(" bytes");
 800544e:	4620      	mov	r0, r4
 8005450:	f7fc f9ee 	bl	8001830 <test_println>
  test_print("--- Thread: ");
 8005454:	f24a 2048 	movw	r0, #41544	; 0xa248
 8005458:	f6c0 0000 	movt	r0, #2048	; 0x800
 800545c:	f7fc fa00 	bl	8001860 <test_print>
  test_printn(sizeof(thread_t));
 8005460:	2044      	movs	r0, #68	; 0x44
 8005462:	f7fc fa0d 	bl	8001880 <test_printn>
  test_println(" bytes");
 8005466:	4620      	mov	r0, r4
 8005468:	f7fc f9e2 	bl	8001830 <test_println>
  test_print("--- Timer : ");
 800546c:	f24a 2058 	movw	r0, #41560	; 0xa258
 8005470:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005474:	f7fc f9f4 	bl	8001860 <test_print>
  test_printn(sizeof(virtual_timer_t));
 8005478:	2014      	movs	r0, #20
 800547a:	f7fc fa01 	bl	8001880 <test_printn>
  test_println(" bytes");
 800547e:	4620      	mov	r0, r4
 8005480:	f7fc f9d6 	bl	8001830 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 8005484:	f24a 2068 	movw	r0, #41576	; 0xa268
 8005488:	f6c0 0000 	movt	r0, #2048	; 0x800
 800548c:	f7fc f9e8 	bl	8001860 <test_print>
  test_printn(sizeof(semaphore_t));
 8005490:	200c      	movs	r0, #12
 8005492:	f7fc f9f5 	bl	8001880 <test_printn>
  test_println(" bytes");
 8005496:	4620      	mov	r0, r4
 8005498:	f7fc f9ca 	bl	8001830 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800549c:	f24a 2078 	movw	r0, #41592	; 0xa278
 80054a0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80054a4:	f7fc f9dc 	bl	8001860 <test_print>
  test_printn(sizeof(event_source_t));
 80054a8:	2004      	movs	r0, #4
 80054aa:	f7fc f9e9 	bl	8001880 <test_printn>
  test_println(" bytes");
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7fc f9be 	bl	8001830 <test_println>
  test_print("--- EventL: ");
 80054b4:	f24a 2088 	movw	r0, #41608	; 0xa288
 80054b8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80054bc:	f7fc f9d0 	bl	8001860 <test_print>
  test_printn(sizeof(event_listener_t));
 80054c0:	2014      	movs	r0, #20
 80054c2:	f7fc f9dd 	bl	8001880 <test_printn>
  test_println(" bytes");
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7fc f9b2 	bl	8001830 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 80054cc:	f24a 2098 	movw	r0, #41624	; 0xa298
 80054d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80054d4:	f7fc f9c4 	bl	8001860 <test_print>
  test_printn(sizeof(mutex_t));
 80054d8:	2010      	movs	r0, #16
 80054da:	f7fc f9d1 	bl	8001880 <test_printn>
  test_println(" bytes");
 80054de:	4620      	mov	r0, r4
 80054e0:	f7fc f9a6 	bl	8001830 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 80054e4:	f24a 20a8 	movw	r0, #41640	; 0xa2a8
 80054e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80054ec:	f7fc f9b8 	bl	8001860 <test_print>
  test_printn(sizeof(condition_variable_t));
 80054f0:	2008      	movs	r0, #8
 80054f2:	f7fc f9c5 	bl	8001880 <test_printn>
  test_println(" bytes");
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7fc f99a 	bl	8001830 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 80054fc:	f24a 20b8 	movw	r0, #41656	; 0xa2b8
 8005500:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005504:	f7fc f9ac 	bl	8001860 <test_print>
  test_printn(sizeof(io_queue_t));
 8005508:	2024      	movs	r0, #36	; 0x24
 800550a:	f7fc f9b9 	bl	8001880 <test_printn>
  test_println(" bytes");
 800550e:	4620      	mov	r0, r4
 8005510:	f7fc f98e 	bl	8001830 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8005514:	f24a 20c8 	movw	r0, #41672	; 0xa2c8
 8005518:	f6c0 0000 	movt	r0, #2048	; 0x800
 800551c:	f7fc f9a0 	bl	8001860 <test_print>
  test_printn(sizeof(mailbox_t));
 8005520:	2028      	movs	r0, #40	; 0x28
 8005522:	f7fc f9ad 	bl	8001880 <test_printn>
  test_println(" bytes");
 8005526:	4620      	mov	r0, r4
#endif
}
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 800552c:	f7fc b980 	b.w	8001830 <test_println>

08005530 <dyn1_execute.8094>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 8005530:	b570      	push	{r4, r5, r6, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005532:	4b34      	ldr	r3, [pc, #208]	; (8005604 <dyn1_execute.8094+0xd4>)
 8005534:	b084      	sub	sp, #16
 8005536:	699a      	ldr	r2, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 8005538:	a903      	add	r1, sp, #12
 800553a:	4833      	ldr	r0, [pc, #204]	; (8005608 <dyn1_execute.8094+0xd8>)
 800553c:	6895      	ldr	r5, [r2, #8]
 800553e:	f7fc fdf7 	bl	8002130 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 8005542:	4832      	ldr	r0, [pc, #200]	; (800560c <dyn1_execute.8094+0xdc>)
 8005544:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005548:	1e6a      	subs	r2, r5, #1
 800554a:	4b31      	ldr	r3, [pc, #196]	; (8005610 <dyn1_execute.8094+0xe0>)
 800554c:	9000      	str	r0, [sp, #0]
 800554e:	482e      	ldr	r0, [pc, #184]	; (8005608 <dyn1_execute.8094+0xd8>)
 8005550:	f7fc ff2e 	bl	80023b0 <chThdCreateFromHeap>
 8005554:	4c2f      	ldr	r4, [pc, #188]	; (8005614 <dyn1_execute.8094+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 8005556:	4e30      	ldr	r6, [pc, #192]	; (8005618 <dyn1_execute.8094+0xe8>)
 8005558:	1eaa      	subs	r2, r5, #2
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <dyn1_execute.8094+0xe0>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 800555c:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 800555e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005562:	9600      	str	r6, [sp, #0]
 8005564:	4828      	ldr	r0, [pc, #160]	; (8005608 <dyn1_execute.8094+0xd8>)
 8005566:	f7fc ff23 	bl	80023b0 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 800556a:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 800556c:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 800556e:	4826      	ldr	r0, [pc, #152]	; (8005608 <dyn1_execute.8094+0xd8>)
 8005570:	f7fc fdde 	bl	8002130 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 8005574:	9902      	ldr	r1, [sp, #8]
 8005576:	4824      	ldr	r0, [pc, #144]	; (8005608 <dyn1_execute.8094+0xd8>)
 8005578:	f7fc fed2 	bl	8002320 <chHeapAlloc>
 800557c:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 800557e:	4827      	ldr	r0, [pc, #156]	; (800561c <dyn1_execute.8094+0xec>)
 8005580:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005584:	1eea      	subs	r2, r5, #3
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <dyn1_execute.8094+0xe0>)
 8005588:	9000      	str	r0, [sp, #0]
 800558a:	481f      	ldr	r0, [pc, #124]	; (8005608 <dyn1_execute.8094+0xd8>)
 800558c:	f7fc ff10 	bl	80023b0 <chThdCreateFromHeap>
 8005590:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8005592:	4630      	mov	r0, r6
 8005594:	f7fc fdec 	bl	8002170 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	b129      	cbz	r1, 80055a8 <dyn1_execute.8094+0x78>
 800559c:	6861      	ldr	r1, [r4, #4]
 800559e:	b119      	cbz	r1, 80055a8 <dyn1_execute.8094+0x78>
 80055a0:	68a1      	ldr	r1, [r4, #8]
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d025      	beq.n	80055f2 <dyn1_execute.8094+0xc2>
 80055a6:	2100      	movs	r1, #0
 80055a8:	2001      	movs	r0, #1
 80055aa:	f7fc f919 	bl	80017e0 <_test_assert>
 80055ae:	b108      	cbz	r0, 80055b4 <dyn1_execute.8094+0x84>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 80055b0:	b004      	add	sp, #16
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 80055b4:	f7fc fe74 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(2, "AB");
 80055b8:	2002      	movs	r0, #2
 80055ba:	4919      	ldr	r1, [pc, #100]	; (8005620 <dyn1_execute.8094+0xf0>)
 80055bc:	f7fc f8c8 	bl	8001750 <_test_assert_sequence>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d1f5      	bne.n	80055b0 <dyn1_execute.8094+0x80>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 80055c4:	a902      	add	r1, sp, #8
 80055c6:	4810      	ldr	r0, [pc, #64]	; (8005608 <dyn1_execute.8094+0xd8>)
 80055c8:	f7fc fdb2 	bl	8002130 <chHeapStatus>
 80055cc:	1e42      	subs	r2, r0, #1
 80055ce:	4250      	negs	r0, r2
 80055d0:	eb50 0102 	adcs.w	r1, r0, r2
 80055d4:	2003      	movs	r0, #3
 80055d6:	f7fc f903 	bl	80017e0 <_test_assert>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d1e8      	bne.n	80055b0 <dyn1_execute.8094+0x80>
  test_assert(4, n == sz, "heap size changed");
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	9902      	ldr	r1, [sp, #8]
 80055e2:	2004      	movs	r0, #4
 80055e4:	1aca      	subs	r2, r1, r3
 80055e6:	4253      	negs	r3, r2
 80055e8:	eb53 0102 	adcs.w	r1, r3, r2
 80055ec:	f7fc f8f8 	bl	80017e0 <_test_assert>
 80055f0:	e7de      	b.n	80055b0 <dyn1_execute.8094+0x80>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1d7      	bne.n	80055a8 <dyn1_execute.8094+0x78>
 80055f8:	6921      	ldr	r1, [r4, #16]
 80055fa:	f1d1 0101 	rsbs	r1, r1, #1
 80055fe:	bf38      	it	cc
 8005600:	2100      	movcc	r1, #0
 8005602:	e7d1      	b.n	80055a8 <dyn1_execute.8094+0x78>
 8005604:	20001e58 	.word	0x20001e58
 8005608:	200014c0 	.word	0x200014c0
 800560c:	0800a1cc 	.word	0x0800a1cc
 8005610:	08005881 	.word	0x08005881
 8005614:	20001fa8 	.word	0x20001fa8
 8005618:	0800a1d4 	.word	0x0800a1d4
 800561c:	0800a1d0 	.word	0x0800a1d0
 8005620:	0800a2d8 	.word	0x0800a2d8
 8005624:	f3af 8000 	nop.w
 8005628:	f3af 8000 	nop.w
 800562c:	f3af 8000 	nop.w

08005630 <heap1_execute.7927>:

static void heap1_execute(void) {
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8005634:	a901      	add	r1, sp, #4
 8005636:	2000      	movs	r0, #0
 8005638:	f7fc fd7a 	bl	8002130 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800563c:	2110      	movs	r1, #16
 800563e:	2000      	movs	r0, #0
 8005640:	f7fc fe6e 	bl	8002320 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8005644:	1c01      	adds	r1, r0, #0
 8005646:	bf18      	it	ne
 8005648:	2101      	movne	r1, #1
 800564a:	4604      	mov	r4, r0
 800564c:	2001      	movs	r0, #1
 800564e:	f7fc f8c7 	bl	80017e0 <_test_assert>
 8005652:	4605      	mov	r5, r0
 8005654:	b108      	cbz	r0, 800565a <heap1_execute.7927+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8005656:	b002      	add	sp, #8
 8005658:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800565a:	4620      	mov	r0, r4
 800565c:	f7fc fd88 	bl	8002170 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8005660:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8005664:	4628      	mov	r0, r5
 8005666:	f7fc fe5b 	bl	8002320 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800566a:	f1d0 0101 	rsbs	r1, r0, #1
 800566e:	bf38      	it	cc
 8005670:	2100      	movcc	r1, #0
 8005672:	2002      	movs	r0, #2
 8005674:	f7fc f8b4 	bl	80017e0 <_test_assert>
 8005678:	2800      	cmp	r0, #0
 800567a:	d1ec      	bne.n	8005656 <heap1_execute.7927+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800567c:	a901      	add	r1, sp, #4
 800567e:	487f      	ldr	r0, [pc, #508]	; (800587c <heap1_execute.7927+0x24c>)
 8005680:	f7fc fd56 	bl	8002130 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005684:	2110      	movs	r1, #16
 8005686:	487d      	ldr	r0, [pc, #500]	; (800587c <heap1_execute.7927+0x24c>)
 8005688:	f7fc fe4a 	bl	8002320 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800568c:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800568e:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005690:	487a      	ldr	r0, [pc, #488]	; (800587c <heap1_execute.7927+0x24c>)
 8005692:	f7fc fe45 	bl	8002320 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8005696:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8005698:	4604      	mov	r4, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 800569a:	4878      	ldr	r0, [pc, #480]	; (800587c <heap1_execute.7927+0x24c>)
 800569c:	f7fc fe40 	bl	8002320 <chHeapAlloc>
 80056a0:	4606      	mov	r6, r0
  chHeapFree(p1);                               /* Does not merge.*/
 80056a2:	4628      	mov	r0, r5
 80056a4:	f7fc fd64 	bl	8002170 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7fc fd61 	bl	8002170 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 80056ae:	4630      	mov	r0, r6
 80056b0:	f7fc fd5e 	bl	8002170 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80056b4:	4669      	mov	r1, sp
 80056b6:	4871      	ldr	r0, [pc, #452]	; (800587c <heap1_execute.7927+0x24c>)
 80056b8:	f7fc fd3a 	bl	8002130 <chHeapStatus>
 80056bc:	1e42      	subs	r2, r0, #1
 80056be:	4251      	negs	r1, r2
 80056c0:	4151      	adcs	r1, r2
 80056c2:	2003      	movs	r0, #3
 80056c4:	f7fc f88c 	bl	80017e0 <_test_assert>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d1c4      	bne.n	8005656 <heap1_execute.7927+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80056cc:	2110      	movs	r1, #16
 80056ce:	486b      	ldr	r0, [pc, #428]	; (800587c <heap1_execute.7927+0x24c>)
 80056d0:	f7fc fe26 	bl	8002320 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80056d4:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80056d6:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80056d8:	4868      	ldr	r0, [pc, #416]	; (800587c <heap1_execute.7927+0x24c>)
 80056da:	f7fc fe21 	bl	8002320 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80056de:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80056e0:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80056e2:	4866      	ldr	r0, [pc, #408]	; (800587c <heap1_execute.7927+0x24c>)
 80056e4:	f7fc fe1c 	bl	8002320 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 80056e8:	f7fc fd42 	bl	8002170 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 80056ec:	4628      	mov	r0, r5
 80056ee:	f7fc fd3f 	bl	8002170 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7fc fd3c 	bl	8002170 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80056f8:	4669      	mov	r1, sp
 80056fa:	4860      	ldr	r0, [pc, #384]	; (800587c <heap1_execute.7927+0x24c>)
 80056fc:	f7fc fd18 	bl	8002130 <chHeapStatus>
 8005700:	1e43      	subs	r3, r0, #1
 8005702:	4258      	negs	r0, r3
 8005704:	eb50 0103 	adcs.w	r1, r0, r3
 8005708:	2004      	movs	r0, #4
 800570a:	f7fc f869 	bl	80017e0 <_test_assert>
 800570e:	2800      	cmp	r0, #0
 8005710:	d1a1      	bne.n	8005656 <heap1_execute.7927+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8005712:	2111      	movs	r1, #17
 8005714:	4859      	ldr	r0, [pc, #356]	; (800587c <heap1_execute.7927+0x24c>)
 8005716:	f7fc fe03 	bl	8002320 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800571a:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 800571c:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 800571e:	4857      	ldr	r0, [pc, #348]	; (800587c <heap1_execute.7927+0x24c>)
 8005720:	f7fc fdfe 	bl	8002320 <chHeapAlloc>
 8005724:	4605      	mov	r5, r0
  chHeapFree(p1);
 8005726:	4620      	mov	r0, r4
 8005728:	f7fc fd22 	bl	8002170 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 800572c:	4669      	mov	r1, sp
 800572e:	4853      	ldr	r0, [pc, #332]	; (800587c <heap1_execute.7927+0x24c>)
 8005730:	f7fc fcfe 	bl	8002130 <chHeapStatus>
 8005734:	f1b0 0c02 	subs.w	ip, r0, #2
 8005738:	f1dc 0200 	rsbs	r2, ip, #0
 800573c:	eb52 010c 	adcs.w	r1, r2, ip
 8005740:	2005      	movs	r0, #5
 8005742:	f7fc f84d 	bl	80017e0 <_test_assert>
 8005746:	2800      	cmp	r0, #0
 8005748:	d185      	bne.n	8005656 <heap1_execute.7927+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 800574a:	2110      	movs	r1, #16
 800574c:	484b      	ldr	r0, [pc, #300]	; (800587c <heap1_execute.7927+0x24c>)
 800574e:	f7fc fde7 	bl	8002320 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8005752:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 8005754:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8005756:	4849      	ldr	r0, [pc, #292]	; (800587c <heap1_execute.7927+0x24c>)
 8005758:	f7fc fcea 	bl	8002130 <chHeapStatus>
 800575c:	2801      	cmp	r0, #1
 800575e:	f000 808b 	beq.w	8005878 <heap1_execute.7927+0x248>
 8005762:	4669      	mov	r1, sp
 8005764:	4845      	ldr	r0, [pc, #276]	; (800587c <heap1_execute.7927+0x24c>)
 8005766:	f7fc fce3 	bl	8002130 <chHeapStatus>
 800576a:	f1b0 0e02 	subs.w	lr, r0, #2
 800576e:	f1de 0100 	rsbs	r1, lr, #0
 8005772:	eb51 010e 	adcs.w	r1, r1, lr
 8005776:	2006      	movs	r0, #6
 8005778:	f7fc f832 	bl	80017e0 <_test_assert>
 800577c:	2800      	cmp	r0, #0
 800577e:	f47f af6a 	bne.w	8005656 <heap1_execute.7927+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8005782:	4628      	mov	r0, r5
 8005784:	f7fc fcf4 	bl	8002170 <chHeapFree>
  chHeapFree(p1);
 8005788:	4620      	mov	r0, r4
 800578a:	f7fc fcf1 	bl	8002170 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800578e:	4669      	mov	r1, sp
 8005790:	483a      	ldr	r0, [pc, #232]	; (800587c <heap1_execute.7927+0x24c>)
 8005792:	f7fc fccd 	bl	8002130 <chHeapStatus>
 8005796:	1e43      	subs	r3, r0, #1
 8005798:	4258      	negs	r0, r3
 800579a:	eb50 0103 	adcs.w	r1, r0, r3
 800579e:	2007      	movs	r0, #7
 80057a0:	f7fc f81e 	bl	80017e0 <_test_assert>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f47f af56 	bne.w	8005656 <heap1_execute.7927+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80057aa:	2110      	movs	r1, #16
 80057ac:	4833      	ldr	r0, [pc, #204]	; (800587c <heap1_execute.7927+0x24c>)
 80057ae:	f7fc fdb7 	bl	8002320 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80057b2:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80057b4:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80057b6:	4831      	ldr	r0, [pc, #196]	; (800587c <heap1_execute.7927+0x24c>)
 80057b8:	f7fc fdb2 	bl	8002320 <chHeapAlloc>
 80057bc:	4604      	mov	r4, r0
  chHeapFree(p1);
 80057be:	4628      	mov	r0, r5
 80057c0:	f7fc fcd6 	bl	8002170 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 80057c4:	4669      	mov	r1, sp
 80057c6:	482d      	ldr	r0, [pc, #180]	; (800587c <heap1_execute.7927+0x24c>)
 80057c8:	f7fc fcb2 	bl	8002130 <chHeapStatus>
 80057cc:	1e82      	subs	r2, r0, #2
 80057ce:	4251      	negs	r1, r2
 80057d0:	4151      	adcs	r1, r2
 80057d2:	2008      	movs	r0, #8
 80057d4:	f7fc f804 	bl	80017e0 <_test_assert>
 80057d8:	2800      	cmp	r0, #0
 80057da:	f47f af3c 	bne.w	8005656 <heap1_execute.7927+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 80057de:	2120      	movs	r1, #32
 80057e0:	4826      	ldr	r0, [pc, #152]	; (800587c <heap1_execute.7927+0x24c>)
 80057e2:	f7fc fd9d 	bl	8002320 <chHeapAlloc>
  chHeapFree(p1);
 80057e6:	f7fc fcc3 	bl	8002170 <chHeapFree>
  chHeapFree(p2);
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7fc fcc0 	bl	8002170 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80057f0:	4669      	mov	r1, sp
 80057f2:	4822      	ldr	r0, [pc, #136]	; (800587c <heap1_execute.7927+0x24c>)
 80057f4:	f7fc fc9c 	bl	8002130 <chHeapStatus>
 80057f8:	1e43      	subs	r3, r0, #1
 80057fa:	4258      	negs	r0, r3
 80057fc:	eb50 0103 	adcs.w	r1, r0, r3
 8005800:	2009      	movs	r0, #9
 8005802:	f7fb ffed 	bl	80017e0 <_test_assert>
 8005806:	2800      	cmp	r0, #0
 8005808:	f47f af25 	bne.w	8005656 <heap1_execute.7927+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 800580c:	4669      	mov	r1, sp
 800580e:	481b      	ldr	r0, [pc, #108]	; (800587c <heap1_execute.7927+0x24c>)
 8005810:	f7fc fc8e 	bl	8002130 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 8005814:	9900      	ldr	r1, [sp, #0]
 8005816:	4819      	ldr	r0, [pc, #100]	; (800587c <heap1_execute.7927+0x24c>)
 8005818:	f7fc fd82 	bl	8002320 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 800581c:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 800581e:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8005820:	4816      	ldr	r0, [pc, #88]	; (800587c <heap1_execute.7927+0x24c>)
 8005822:	f7fc fc85 	bl	8002130 <chHeapStatus>
 8005826:	f1d0 0101 	rsbs	r1, r0, #1
 800582a:	bf38      	it	cc
 800582c:	2100      	movcc	r1, #0
 800582e:	200a      	movs	r0, #10
 8005830:	f7fb ffd6 	bl	80017e0 <_test_assert>
 8005834:	2800      	cmp	r0, #0
 8005836:	f47f af0e 	bne.w	8005656 <heap1_execute.7927+0x26>
  chHeapFree(p1);
 800583a:	4620      	mov	r0, r4
 800583c:	f7fc fc98 	bl	8002170 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8005840:	4669      	mov	r1, sp
 8005842:	480e      	ldr	r0, [pc, #56]	; (800587c <heap1_execute.7927+0x24c>)
 8005844:	f7fc fc74 	bl	8002130 <chHeapStatus>
 8005848:	f1b0 0c01 	subs.w	ip, r0, #1
 800584c:	f1dc 0200 	rsbs	r2, ip, #0
 8005850:	eb52 010c 	adcs.w	r1, r2, ip
 8005854:	200b      	movs	r0, #11
 8005856:	f7fb ffc3 	bl	80017e0 <_test_assert>
 800585a:	2800      	cmp	r0, #0
 800585c:	f47f aefb 	bne.w	8005656 <heap1_execute.7927+0x26>
  test_assert(12, n == sz, "size changed");
 8005860:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8005864:	200c      	movs	r0, #12
 8005866:	ebb1 0e03 	subs.w	lr, r1, r3
 800586a:	f1de 0100 	rsbs	r1, lr, #0
 800586e:	eb51 010e 	adcs.w	r1, r1, lr
 8005872:	f7fb ffb5 	bl	80017e0 <_test_assert>
 8005876:	e6ee      	b.n	8005656 <heap1_execute.7927+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8005878:	4601      	mov	r1, r0
 800587a:	e77c      	b.n	8005776 <heap1_execute.7927+0x146>
 800587c:	20000d48 	.word	0x20000d48

08005880 <thread.8077>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 8005880:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8005882:	7800      	ldrb	r0, [r0, #0]
 8005884:	f7fb ffc4 	bl	8001810 <test_emit_token>
  return 0;
}
 8005888:	2000      	movs	r0, #0
 800588a:	bd08      	pop	{r3, pc}
 800588c:	f3af 8000 	nop.w

08005890 <h1.7730>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8005890:	2041      	movs	r0, #65	; 0x41
 8005892:	f7fb bfbd 	b.w	8001810 <test_emit_token>
 8005896:	bf00      	nop
 8005898:	f3af 8000 	nop.w
 800589c:	f3af 8000 	nop.w

080058a0 <h2.7727>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 80058a0:	2042      	movs	r0, #66	; 0x42
 80058a2:	f7fb bfb5 	b.w	8001810 <test_emit_token>
 80058a6:	bf00      	nop
 80058a8:	f3af 8000 	nop.w
 80058ac:	f3af 8000 	nop.w

080058b0 <h3.7724>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80058b0:	2043      	movs	r0, #67	; 0x43
 80058b2:	f7fb bfad 	b.w	8001810 <test_emit_token>
 80058b6:	bf00      	nop
 80058b8:	f3af 8000 	nop.w
 80058bc:	f3af 8000 	nop.w

080058c0 <thread1.7054>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4604      	mov	r4, r0

  chSemWait(&sem1);
 80058c4:	f640 0010 	movw	r0, #2064	; 0x810
 80058c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058cc:	f7fc fab0 	bl	8001e30 <chSemWait>
  test_emit_token(*(char *)p);
 80058d0:	7820      	ldrb	r0, [r4, #0]
 80058d2:	f7fb ff9d 	bl	8001810 <test_emit_token>
  return 0;
}
 80058d6:	2000      	movs	r0, #0
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w

080058e0 <thread.6821.4413>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 80058e0:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 80058e2:	7800      	ldrb	r0, [r0, #0]
 80058e4:	f7fb ff94 	bl	8001810 <test_emit_token>
  return 0;
}
 80058e8:	2000      	movs	r0, #0
 80058ea:	bd08      	pop	{r3, pc}
 80058ec:	f3af 8000 	nop.w

080058f0 <thread.7390>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 80058f0:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 80058f2:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 80058f4:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 80058f6:	f7fc fafb 	bl	8001ef0 <chMsgSend>
  chMsgSend(p, 'B');
 80058fa:	2142      	movs	r1, #66	; 0x42
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7fc faf7 	bl	8001ef0 <chMsgSend>
  chMsgSend(p, 'C');
 8005902:	4620      	mov	r0, r4
 8005904:	2143      	movs	r1, #67	; 0x43
 8005906:	f7fc faf3 	bl	8001ef0 <chMsgSend>
  return 0;
}
 800590a:	2000      	movs	r0, #0
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop

08005910 <thd1_execute.6828>:

static void thd1_execute(void) {
 8005910:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005912:	f641 6758 	movw	r7, #7768	; 0x1e58
 8005916:	f2c2 0700 	movt	r7, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800591a:	69bb      	ldr	r3, [r7, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800591c:	f241 75e8 	movw	r5, #6120	; 0x17e8
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	f645 06e1 	movw	r6, #22753	; 0x58e1
 8005926:	f649 6058 	movw	r0, #40536	; 0x9e58

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 800592a:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800592c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005930:	f6c0 0600 	movt	r6, #2048	; 0x800
 8005934:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005938:	3a05      	subs	r2, #5
 800593a:	4633      	mov	r3, r6
 800593c:	9000      	str	r0, [sp, #0]
 800593e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005942:	4628      	mov	r0, r5
 8005944:	f7fc f9fc 	bl	8001d40 <chThdCreateStatic>
 8005948:	f641 74a8 	movw	r4, #8104	; 0x1fa8
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005952:	688b      	ldr	r3, [r1, #8]
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005954:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005956:	f24a 0070 	movw	r0, #41072	; 0xa070
 800595a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800595e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005962:	1f1a      	subs	r2, r3, #4
 8005964:	9000      	str	r0, [sp, #0]
 8005966:	4633      	mov	r3, r6
 8005968:	1868      	adds	r0, r5, r1
 800596a:	f7fc f9e9 	bl	8001d40 <chThdCreateStatic>
 800596e:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005970:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005974:	6893      	ldr	r3, [r2, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005976:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005978:	f24a 10d0 	movw	r0, #41424	; 0xa1d0
 800597c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005980:	1eda      	subs	r2, r3, #3
 8005982:	9000      	str	r0, [sp, #0]
 8005984:	4633      	mov	r3, r6
 8005986:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800598a:	f7fc f9d9 	bl	8001d40 <chThdCreateStatic>
 800598e:	69b9      	ldr	r1, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005990:	4633      	mov	r3, r6
 8005992:	688a      	ldr	r2, [r1, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005994:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005996:	f24a 10d4 	movw	r0, #41428	; 0xa1d4
 800599a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800599e:	3a02      	subs	r2, #2
 80059a0:	9000      	str	r0, [sp, #0]
 80059a2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059a6:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80059aa:	f7fc f9c9 	bl	8001d40 <chThdCreateStatic>
 80059ae:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80059b0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80059b4:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80059b6:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80059b8:	f24a 10cc 	movw	r0, #41420	; 0xa1cc
 80059bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80059c0:	3a01      	subs	r2, #1
 80059c2:	4633      	mov	r3, r6
 80059c4:	9000      	str	r0, [sp, #0]
 80059c6:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 80059ca:	f7fc f9b9 	bl	8001d40 <chThdCreateStatic>
 80059ce:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 80059d0:	f7fc fc66 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 80059d4:	f649 6154 	movw	r1, #40532	; 0x9e54
 80059d8:	2001      	movs	r0, #1
 80059da:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 80059de:	b003      	add	sp, #12
 80059e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 80059e4:	f7fb beb4 	b.w	8001750 <_test_assert_sequence>
 80059e8:	f3af 8000 	nop.w
 80059ec:	f3af 8000 	nop.w

080059f0 <mtx1_execute.7299>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 80059f0:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80059f2:	4e2a      	ldr	r6, [pc, #168]	; (8005a9c <mtx1_execute.7299+0xac>)
 80059f4:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80059f6:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 80059f8:	4829      	ldr	r0, [pc, #164]	; (8005aa0 <mtx1_execute.7299+0xb0>)
 80059fa:	689c      	ldr	r4, [r3, #8]
 80059fc:	f7fc fb88 	bl	8002110 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005a00:	4828      	ldr	r0, [pc, #160]	; (8005aa4 <mtx1_execute.7299+0xb4>)
 8005a02:	1c62      	adds	r2, r4, #1
 8005a04:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <mtx1_execute.7299+0xb8>)
 8005a0a:	9000      	str	r0, [sp, #0]
 8005a0c:	4827      	ldr	r0, [pc, #156]	; (8005aac <mtx1_execute.7299+0xbc>)
 8005a0e:	f7fc f997 	bl	8001d40 <chThdCreateStatic>
 8005a12:	4d27      	ldr	r5, [pc, #156]	; (8005ab0 <mtx1_execute.7299+0xc0>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005a14:	1ca2      	adds	r2, r4, #2

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8005a16:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8005a18:	4826      	ldr	r0, [pc, #152]	; (8005ab4 <mtx1_execute.7299+0xc4>)
 8005a1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <mtx1_execute.7299+0xb8>)
 8005a20:	9000      	str	r0, [sp, #0]
 8005a22:	4825      	ldr	r0, [pc, #148]	; (8005ab8 <mtx1_execute.7299+0xc8>)
 8005a24:	f7fc f98c 	bl	8001d40 <chThdCreateStatic>
 8005a28:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8005a2a:	4824      	ldr	r0, [pc, #144]	; (8005abc <mtx1_execute.7299+0xcc>)
 8005a2c:	1ce2      	adds	r2, r4, #3
 8005a2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <mtx1_execute.7299+0xb8>)
 8005a34:	9000      	str	r0, [sp, #0]
 8005a36:	4822      	ldr	r0, [pc, #136]	; (8005ac0 <mtx1_execute.7299+0xd0>)
 8005a38:	f7fc f982 	bl	8001d40 <chThdCreateStatic>
 8005a3c:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8005a3e:	4821      	ldr	r0, [pc, #132]	; (8005ac4 <mtx1_execute.7299+0xd4>)
 8005a40:	1d22      	adds	r2, r4, #4
 8005a42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a46:	4b18      	ldr	r3, [pc, #96]	; (8005aa8 <mtx1_execute.7299+0xb8>)
 8005a48:	9000      	str	r0, [sp, #0]
 8005a4a:	481f      	ldr	r0, [pc, #124]	; (8005ac8 <mtx1_execute.7299+0xd8>)
 8005a4c:	f7fc f978 	bl	8001d40 <chThdCreateStatic>
 8005a50:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8005a52:	481e      	ldr	r0, [pc, #120]	; (8005acc <mtx1_execute.7299+0xdc>)
 8005a54:	1d62      	adds	r2, r4, #5
 8005a56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <mtx1_execute.7299+0xb8>)
 8005a5c:	9000      	str	r0, [sp, #0]
 8005a5e:	481c      	ldr	r0, [pc, #112]	; (8005ad0 <mtx1_execute.7299+0xe0>)
 8005a60:	f7fc f96e 	bl	8001d40 <chThdCreateStatic>
 8005a64:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8005a66:	480e      	ldr	r0, [pc, #56]	; (8005aa0 <mtx1_execute.7299+0xb0>)
 8005a68:	f7fc f922 	bl	8001cb0 <chMtxUnlock>
  test_wait_threads();
 8005a6c:	f7fc fc18 	bl	80022a0 <test_wait_threads>
 8005a70:	69b1      	ldr	r1, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8005a72:	2001      	movs	r0, #1
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	ebb4 0e02 	subs.w	lr, r4, r2
 8005a7a:	f1de 0300 	rsbs	r3, lr, #0
 8005a7e:	eb53 010e 	adcs.w	r1, r3, lr
 8005a82:	f7fb fead 	bl	80017e0 <_test_assert>
 8005a86:	b108      	cbz	r0, 8005a8c <mtx1_execute.7299+0x9c>
  test_assert_sequence(2, "ABCDE");
}
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8005a8c:	4911      	ldr	r1, [pc, #68]	; (8005ad4 <mtx1_execute.7299+0xe4>)
 8005a8e:	2002      	movs	r0, #2
}
 8005a90:	b002      	add	sp, #8
 8005a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8005a96:	f7fb be5b 	b.w	8001750 <_test_assert_sequence>
 8005a9a:	bf00      	nop
 8005a9c:	20001e58 	.word	0x20001e58
 8005aa0:	20000800 	.word	0x20000800
 8005aa4:	08009e58 	.word	0x08009e58
 8005aa8:	08005ae1 	.word	0x08005ae1
 8005aac:	200017e8 	.word	0x200017e8
 8005ab0:	20001fa8 	.word	0x20001fa8
 8005ab4:	0800a070 	.word	0x0800a070
 8005ab8:	20001930 	.word	0x20001930
 8005abc:	0800a1d0 	.word	0x0800a1d0
 8005ac0:	20001a78 	.word	0x20001a78
 8005ac4:	0800a1d4 	.word	0x0800a1d4
 8005ac8:	20001bc0 	.word	0x20001bc0
 8005acc:	0800a1cc 	.word	0x0800a1cc
 8005ad0:	20001d08 	.word	0x20001d08
 8005ad4:	08009e54 	.word	0x08009e54
 8005ad8:	f3af 8000 	nop.w
 8005adc:	f3af 8000 	nop.w

08005ae0 <thread1.7272.4397>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8005ae0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8005ae2:	f640 0400 	movw	r4, #2048	; 0x800
 8005ae6:	f2c2 0400 	movt	r4, #8192	; 0x2000
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8005aea:	4605      	mov	r5, r0

  chMtxLock(&m1);
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7fc fb0f 	bl	8002110 <chMtxLock>
  test_emit_token(*(char *)p);
 8005af2:	7828      	ldrb	r0, [r5, #0]
 8005af4:	f7fb fe8c 	bl	8001810 <test_emit_token>
  chMtxUnlock(&m1);
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7fc f8d9 	bl	8001cb0 <chMtxUnlock>
  return 0;
}
 8005afe:	2000      	movs	r0, #0
 8005b00:	bd38      	pop	{r3, r4, r5, pc}
 8005b02:	bf00      	nop
 8005b04:	f3af 8000 	nop.w
 8005b08:	f3af 8000 	nop.w
 8005b0c:	f3af 8000 	nop.w

08005b10 <thread12.7263>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8005b10:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 8005b12:	f640 443c 	movw	r4, #3132	; 0xc3c
 8005b16:	f2c2 0400 	movt	r4, #8192	; 0x2000
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 8005b1a:	4605      	mov	r5, r0

  chMtxLock(&m2);
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7fc faf7 	bl	8002110 <chMtxLock>
  test_emit_token(*(char *)p);
 8005b22:	7828      	ldrb	r0, [r5, #0]
 8005b24:	f7fb fe74 	bl	8001810 <test_emit_token>
  chMtxUnlock(&m2);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f7fc f8c1 	bl	8001cb0 <chMtxUnlock>
  return 0;
}
 8005b2e:	2000      	movs	r0, #0
 8005b30:	bd38      	pop	{r3, r4, r5, pc}
 8005b32:	bf00      	nop
 8005b34:	f3af 8000 	nop.w
 8005b38:	f3af 8000 	nop.w
 8005b3c:	f3af 8000 	nop.w

08005b40 <thread3.7057>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 8005b40:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8005b42:	f640 0410 	movw	r4, #2064	; 0x810
 8005b46:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7fc f970 	bl	8001e30 <chSemWait>
  chSemSignal(&sem1);
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7fc f8dd 	bl	8001d10 <chSemSignal>
  return 0;
}
 8005b56:	2000      	movs	r0, #0
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w

08005b60 <thd2_execute.6826>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005b64:	f641 6658 	movw	r6, #7768	; 0x1e58
 8005b68:	f2c2 0600 	movt	r6, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005b6c:	69b3      	ldr	r3, [r6, #24]

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005b6e:	f645 05e1 	movw	r5, #22753	; 0x58e1
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	f24a 0170 	movw	r1, #41072	; 0xa070
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8005b78:	b082      	sub	sp, #8

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005b7a:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005b7e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005b82:	3a04      	subs	r2, #4
 8005b84:	462b      	mov	r3, r5
 8005b86:	9100      	str	r1, [sp, #0]
 8005b88:	4833      	ldr	r0, [pc, #204]	; (8005c58 <thd2_execute.6826+0xf8>)
 8005b8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005b8e:	f7fc f8d7 	bl	8001d40 <chThdCreateStatic>
 8005b92:	f641 74a8 	movw	r4, #8104	; 0x1fa8
 8005b96:	69b7      	ldr	r7, [r6, #24]
 8005b98:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8005b9e:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005ba0:	f241 77e8 	movw	r7, #6120	; 0x17e8
 8005ba4:	f649 6058 	movw	r0, #40536	; 0x9e58
 8005ba8:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8005bac:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005bb0:	1f5a      	subs	r2, r3, #5
 8005bb2:	9000      	str	r0, [sp, #0]
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005bbc:	f7fc f8c0 	bl	8001d40 <chThdCreateStatic>
 8005bc0:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	6891      	ldr	r1, [r2, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8005bc6:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005bc8:	f24a 10cc 	movw	r0, #41420	; 0xa1cc
 8005bcc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005bd0:	1e4a      	subs	r2, r1, #1
 8005bd2:	9000      	str	r0, [sp, #0]
 8005bd4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005bd8:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 8005bdc:	f7fc f8b0 	bl	8001d40 <chThdCreateStatic>
 8005be0:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005be2:	f24a 11d4 	movw	r1, #41428	; 0xa1d4
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	f6c0 0100 	movt	r1, #2048	; 0x800

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8005bec:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8005bee:	9100      	str	r1, [sp, #0]
 8005bf0:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 8005bf4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005bf8:	3a02      	subs	r2, #2
 8005bfa:	462b      	mov	r3, r5
 8005bfc:	f7fc f8a0 	bl	8001d40 <chThdCreateStatic>
 8005c00:	f04f 0820 	mov.w	r8, #32
 8005c04:	60e0      	str	r0, [r4, #12]
 8005c06:	f388 8811 	msr	BASEPRI, r8
 8005c0a:	69b0      	ldr	r0, [r6, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8005c0c:	f24a 13d0 	movw	r3, #41424	; 0xa1d0
 8005c10:	6882      	ldr	r2, [r0, #8]
 8005c12:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005c22:	3a03      	subs	r2, #3
 8005c24:	f7fb feec 	bl	8001a00 <chThdCreateI>
 8005c28:	2500      	movs	r5, #0
 8005c2a:	60a0      	str	r0, [r4, #8]
 8005c2c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  chThdStart(threads[2]);
 8005c30:	68a0      	ldr	r0, [r4, #8]
 8005c32:	f388 8811 	msr	BASEPRI, r8
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8005c36:	f7fc f94b 	bl	8001ed0 <chSchReadyI>
 8005c3a:	f385 8811 	msr	BASEPRI, r5
  test_wait_threads();
 8005c3e:	f7fc fb2f 	bl	80022a0 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8005c42:	f649 6154 	movw	r1, #40532	; 0x9e54
 8005c46:	2001      	movs	r0, #1
 8005c48:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8005c4c:	b002      	add	sp, #8
 8005c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8005c52:	f7fb bd7d 	b.w	8001750 <_test_assert_sequence>
 8005c56:	bf00      	nop
 8005c58:	20001930 	.word	0x20001930
 8005c5c:	f3af 8000 	nop.w

08005c60 <long_to_string_with_divisor.10549>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8005c60:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bf08      	it	eq
 8005c66:	460b      	moveq	r3, r1
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8005c68:	4607      	mov	r7, r0
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8005c6a:	f100 0c0b 	add.w	ip, r0, #11
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8005c6e:	f100 050a 	add.w	r5, r0, #10
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8005c72:	fbb1 f6f2 	udiv	r6, r1, r2
 8005c76:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8005c7a:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 8005c7e:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8005c80:	bfc8      	it	gt
 8005c82:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8005c86:	b2e4      	uxtb	r4, r4
    l /= radix;
  } while ((ll /= radix) != 0);
 8005c88:	fbb3 f3f2 	udiv	r3, r3, r2
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8005c8c:	4628      	mov	r0, r5
    l /= radix;
 8005c8e:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8005c90:	f805 4901 	strb.w	r4, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ec      	bne.n	8005c72 <long_to_string_with_divisor.10549+0x12>

  i = (int)(p + MAX_FILLER - q);
 8005c98:	ebc0 030c 	rsb	r3, r0, ip
 8005c9c:	43f9      	mvns	r1, r7
 8005c9e:	4602      	mov	r2, r0
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8005ca0:	18f8      	adds	r0, r7, r3
 8005ca2:	1843      	adds	r3, r0, r1
 8005ca4:	07db      	lsls	r3, r3, #31
 8005ca6:	d50a      	bpl.n	8005cbe <long_to_string_with_divisor.10549+0x5e>
    l /= radix;
  } while ((ll /= radix) != 0);

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 8005ca8:	f807 4b01 	strb.w	r4, [r7], #1
 8005cac:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8005cb0:	e005      	b.n	8005cbe <long_to_string_with_divisor.10549+0x5e>
 8005cb2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8005cb6:	707c      	strb	r4, [r7, #1]
 8005cb8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8005cbc:	1c5f      	adds	r7, r3, #1
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	f803 4b01 	strb.w	r4, [r3], #1
  while (--i);
 8005cc4:	4283      	cmp	r3, r0
 8005cc6:	d1f4      	bne.n	8005cb2 <long_to_string_with_divisor.10549+0x52>

  return p;
}
 8005cc8:	bcf0      	pop	{r4, r5, r6, r7}
 8005cca:	4770      	bx	lr
 8005ccc:	f3af 8000 	nop.w

08005cd0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8005cd0:	8902      	ldrh	r2, [r0, #8]
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 8005cd2:	b470      	push	{r4, r5, r6}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 8005cd4:	fa42 f301 	asr.w	r3, r2, r1
 8005cd8:	f013 0301 	ands.w	r3, r3, #1
 8005cdc:	d002      	beq.n	8005ce4 <usbStartTransmitI+0x14>
    return TRUE;
 8005cde:	2001      	movs	r0, #1

  usbp->transmitting |= (1 << ep);
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 8005ce0:	bc70      	pop	{r4, r5, r6}
 8005ce2:	4770      	bx	lr
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
    return TRUE;

  usbp->transmitting |= (1 << ep);
 8005ce4:	2601      	movs	r6, #1
 8005ce6:	fa06 f601 	lsl.w	r6, r6, r1
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8005cea:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8005cee:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8005cf2:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8005cf6:	4332      	orrs	r2, r6
 8005cf8:	f425 45f0 	bic.w	r5, r5, #30720	; 0x7800
 8005cfc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8005d00:	f085 0530 	eor.w	r5, r5, #48	; 0x30
 8005d04:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return FALSE;
 8005d06:	4618      	mov	r0, r3
 8005d08:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
 8005d0c:	e7e8      	b.n	8005ce0 <usbStartTransmitI+0x10>
 8005d0e:	bf00      	nop

08005d10 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8005d10:	8942      	ldrh	r2, [r0, #10]
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 8005d12:	b470      	push	{r4, r5, r6}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 8005d14:	fa42 f301 	asr.w	r3, r2, r1
 8005d18:	f013 0301 	ands.w	r3, r3, #1
 8005d1c:	d002      	beq.n	8005d24 <usbStartReceiveI+0x14>
    return TRUE;
 8005d1e:	2001      	movs	r0, #1

  usbp->receiving |= (1 << ep);
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8005d20:	bc70      	pop	{r4, r5, r6}
 8005d22:	4770      	bx	lr
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
    return TRUE;

  usbp->receiving |= (1 << ep);
 8005d24:	2601      	movs	r6, #1
 8005d26:	fa06 f601 	lsl.w	r6, r6, r1
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8005d2a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8005d2e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8005d32:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8005d36:	4332      	orrs	r2, r6
 8005d38:	f425 4590 	bic.w	r5, r5, #18432	; 0x4800
 8005d3c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8005d40:	f485 5540 	eor.w	r5, r5, #12288	; 0x3000
 8005d44:	8142      	strh	r2, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return FALSE;
 8005d46:	4618      	mov	r0, r3
 8005d48:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
 8005d4c:	e7e8      	b.n	8005d20 <usbStartReceiveI+0x10>
 8005d4e:	bf00      	nop

08005d50 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005d50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d54:	68c8      	ldr	r0, [r1, #12]
 8005d56:	6983      	ldr	r3, [r0, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	b132      	cbz	r2, 8005d6a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8005d5c:	8a41      	ldrh	r1, [r0, #18]
 8005d5e:	1e50      	subs	r0, r2, #1
 8005d60:	1842      	adds	r2, r0, r1
 8005d62:	fbb2 f1f1 	udiv	r1, r2, r1
 8005d66:	8219      	strh	r1, [r3, #16]
 8005d68:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	8218      	strh	r0, [r3, #16]
 8005d6e:	4770      	bx	lr

08005d70 <inotify.8737>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8005d72:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8005d74:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8005d78:	6813      	ldr	r3, [r2, #0]
 8005d7a:	7819      	ldrb	r1, [r3, #0]
 8005d7c:	2904      	cmp	r1, #4
 8005d7e:	d000      	beq.n	8005d82 <inotify.8737+0x12>
 8005d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d82:	7a20      	ldrb	r0, [r4, #8]
 8005d84:	2802      	cmp	r0, #2
 8005d86:	d1fb      	bne.n	8005d80 <inotify.8737+0x10>
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8005d88:	7952      	ldrb	r2, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8005d8a:	8959      	ldrh	r1, [r3, #10]
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8005d8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8005d90:	fa41 f002 	asr.w	r0, r1, r2
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	8a53      	ldrh	r3, [r2, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8005d98:	f010 0201 	ands.w	r2, r0, #1
 8005d9c:	d1f0      	bne.n	8005d80 <inotify.8737+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 8005d9e:	f104 0514 	add.w	r5, r4, #20
 8005da2:	cd23      	ldmia	r5, {r0, r1, r5}
 8005da4:	1a69      	subs	r1, r5, r1
 8005da6:	1a08      	subs	r0, r1, r0
 8005da8:	4283      	cmp	r3, r0
 8005daa:	d8e9      	bhi.n	8005d80 <inotify.8737+0x10>
 8005dac:	f382 8811 	msr	BASEPRI, r2
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
    usbPrepareQueuedReceive(sdup->config->usbp,
 8005db0:	f8d4 7254 	ldr.w	r7, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8005db4:	fbb0 f6f3 	udiv	r6, r0, r3
    usbPrepareQueuedReceive(sdup->config->usbp,
 8005db8:	7979      	ldrb	r1, [r7, #5]
 8005dba:	6838      	ldr	r0, [r7, #0]
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8005dbc:	fb03 f306 	mul.w	r3, r3, r6
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8005dc0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8005dc4:	68ef      	ldr	r7, [r5, #12]
    usbPrepareQueuedReceive(sdup->config->usbp,
 8005dc6:	f104 060c 	add.w	r6, r4, #12
 8005dca:	69bd      	ldr	r5, [r7, #24]

  osp->rxqueued           = TRUE;
 8005dcc:	2701      	movs	r7, #1
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 8005dce:	60aa      	str	r2, [r5, #8]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8005dd0:	702f      	strb	r7, [r5, #0]
  osp->mode.queue.rxqueue = iqp;
 8005dd2:	60ee      	str	r6, [r5, #12]
  osp->rxsize             = n;
 8005dd4:	606b      	str	r3, [r5, #4]
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8005dd6:	f7ff ffbb 	bl	8005d50 <usb_lld_prepare_receive>
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f382 8811 	msr	BASEPRI, r2
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8005de0:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 8005de4:	6808      	ldr	r0, [r1, #0]
 8005de6:	7949      	ldrb	r1, [r1, #5]
  }
}
 8005de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedReceive(sdup->config->usbp,
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 8005dec:	f7ff bf90 	b.w	8005d10 <usbStartReceiveI>

08005df0 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 8005df0:	2200      	movs	r2, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8005df2:	b470      	push	{r4, r5, r6}
 8005df4:	4603      	mov	r3, r0
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 8005df6:	6844      	ldr	r4, [r0, #4]
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
  usbp->address       = 0;
 8005df8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 8005dfc:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
 8005e00:	68e5      	ldr	r5, [r4, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8005e02:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8005e06:	f2c4 0400 	movt	r4, #16384	; 0x4000
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8005e0a:	2602      	movs	r6, #2
  usbp->status        = 0;
 8005e0c:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
  usbp->address       = 0;
  usbp->configuration = 0;
  usbp->transmitting  = 0;
 8005e10:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 8005e12:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 8005e14:	6102      	str	r2, [r0, #16]
 8005e16:	6142      	str	r2, [r0, #20]
 8005e18:	6182      	str	r2, [r0, #24]
 8005e1a:	61c2      	str	r2, [r0, #28]
 8005e1c:	6202      	str	r2, [r0, #32]
 8005e1e:	6242      	str	r2, [r0, #36]	; 0x24
 8005e20:	6282      	str	r2, [r0, #40]	; 0x28

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8005e22:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8005e26:	7006      	strb	r6, [r0, #0]
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
 8005e28:	4295      	cmp	r5, r2
 8005e2a:	bf14      	ite	ne
 8005e2c:	f44f 451e 	movne.w	r5, #40448	; 0x9e00
 8005e30:	f44f 451c 	moveq.w	r5, #39936	; 0x9c00
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8005e34:	6522      	str	r2, [r4, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8005e36:	4611      	mov	r1, r2
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8005e38:	6462      	str	r2, [r4, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	64e2      	str	r2, [r4, #76]	; 0x4c
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8005e3e:	2240      	movs	r2, #64	; 0x40
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8005e40:	6425      	str	r5, [r4, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8005e42:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8005e46:	4a02      	ldr	r2, [pc, #8]	; (8005e50 <_usb_reset+0x60>)
 8005e48:	60c2      	str	r2, [r0, #12]
  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
}
 8005e4a:	bc70      	pop	{r4, r5, r6}
  usb_lld_init_endpoint(usbp, 0);
 8005e4c:	f7ff b930 	b.w	80050b0 <usb_lld_init_endpoint.4218>
 8005e50:	0800a300 	.word	0x0800a300
 8005e54:	f3af 8000 	nop.w
 8005e58:	f3af 8000 	nop.w
 8005e5c:	f3af 8000 	nop.w

08005e60 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8005e60:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8005e62:	b570      	push	{r4, r5, r6, lr}
 8005e64:	4614      	mov	r4, r2
 8005e66:	4606      	mov	r6, r0
 8005e68:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8005e6a:	b123      	cbz	r3, 8005e76 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	2100      	movs	r1, #0
 8005e70:	2210      	movs	r2, #16
 8005e72:	f003 fd8d 	bl	8009990 <memset>
  if (epcp->out_state != NULL)
 8005e76:	69a0      	ldr	r0, [r4, #24]
 8005e78:	b118      	cbz	r0, 8005e82 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	2214      	movs	r2, #20
 8005e7e:	f003 fd87 	bl	8009990 <memset>

  usbp->epc[ep] = epcp;
 8005e82:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8005e86:	60c4      	str	r4, [r0, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4630      	mov	r0, r6
}
 8005e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8005e90:	f7ff b90e 	b.w	80050b0 <usb_lld_init_endpoint.4218>
 8005e94:	f3af 8000 	nop.w
 8005e98:	f3af 8000 	nop.w
 8005e9c:	f3af 8000 	nop.w

08005ea0 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8005ea0:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8005ea2:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005ea4:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8005ea6:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005ea8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8005eaa:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005eac:	6838      	ldr	r0, [r7, #0]
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8005eae:	f046 0680 	orr.w	r6, r6, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005eb2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8005eb6:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005eb8:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8005eba:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8005ebc:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8005ebe:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005ec0:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f043 0101 	orr.w	r1, r3, #1
 8005ec8:	6021      	str	r1, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8005eca:	6802      	ldr	r2, [r0, #0]
 8005ecc:	f042 0301 	orr.w	r3, r2, #1
 8005ed0:	6003      	str	r3, [r0, #0]
}
 8005ed2:	bcf0      	pop	{r4, r5, r6, r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	f3af 8000 	nop.w
 8005edc:	f3af 8000 	nop.w

08005ee0 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8005ee0:	6843      	ldr	r3, [r0, #4]
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	891a      	ldrh	r2, [r3, #8]
 8005ee6:	6858      	ldr	r0, [r3, #4]
 8005ee8:	fa01 f302 	lsl.w	r3, r1, r2
 8005eec:	6103      	str	r3, [r0, #16]
 8005eee:	4770      	bx	lr

08005ef0 <regfind.8080>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	2320      	movs	r3, #32
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 8005efa:	480a      	ldr	r0, [pc, #40]	; (8005f24 <regfind.8080+0x34>)
 8005efc:	2400      	movs	r4, #0
 8005efe:	6903      	ldr	r3, [r0, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8005f00:	7f9a      	ldrb	r2, [r3, #30]
 8005f02:	1c51      	adds	r1, r2, #1
 8005f04:	7799      	strb	r1, [r3, #30]
 8005f06:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 8005f0a:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	bf08      	it	eq
 8005f10:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 8005f14:	f7fc f9ec 	bl	80022f0 <chRegNextThread>
  } while (ftp != NULL);
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d1f5      	bne.n	8005f0a <regfind.8080+0x1a>
  return found;
}
 8005f1e:	4620      	mov	r0, r4
 8005f20:	bd38      	pop	{r3, r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	20001e58 	.word	0x20001e58
 8005f28:	f3af 8000 	nop.w
 8005f2c:	f3af 8000 	nop.w

08005f30 <mbox1_execute.7599>:

static void mbox1_execute(void) {
 8005f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f34:	2520      	movs	r5, #32
 8005f36:	b082      	sub	sp, #8
 8005f38:	f385 8811 	msr	BASEPRI, r5
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8005f3c:	4c67      	ldr	r4, [pc, #412]	; (80060dc <mbox1_execute.7599+0x1ac>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8005f3e:	2001      	movs	r0, #1
 8005f40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f42:	f1b1 0e05 	subs.w	lr, r1, #5
 8005f46:	f1de 0200 	rsbs	r2, lr, #0
 8005f4a:	eb52 010e 	adcs.w	r1, r2, lr
 8005f4e:	f7fb fc47 	bl	80017e0 <_test_assert>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	f040 8257 	bne.w	8006406 <mbox1_execute.7599+0x4d6>
 8005f58:	f380 8811 	msr	BASEPRI, r0
 8005f5c:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f64:	f104 001c 	add.w	r0, r4, #28
 8005f68:	f7fd ff2a 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	b970      	cbnz	r0, 8005f8e <mbox1_execute.7599+0x5e>
    *mbp->mb_wrptr++ = msg;
 8005f70:	68a3      	ldr	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f72:	6860      	ldr	r0, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005f74:	2142      	movs	r1, #66	; 0x42
 8005f76:	f843 1b04 	str.w	r1, [r3], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f7a:	4283      	cmp	r3, r0
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005f7c:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f7e:	d301      	bcc.n	8005f84 <mbox1_execute.7599+0x54>
      mbp->mb_wrptr = mbp->mb_buffer;
 8005f80:	6822      	ldr	r2, [r4, #0]
 8005f82:	60a2      	str	r2, [r4, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8005f84:	4856      	ldr	r0, [pc, #344]	; (80060e0 <mbox1_execute.7599+0x1b0>)
 8005f86:	f7fc fa33 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 8005f8a:	f7fb fd91 	bl	8001ab0 <chSchRescheduleS>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f383 8811 	msr	BASEPRI, r3
  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8005f94:	2002      	movs	r0, #2
 8005f96:	1aea      	subs	r2, r5, r3
 8005f98:	4251      	negs	r1, r2
 8005f9a:	4151      	adcs	r1, r2
 8005f9c:	f7fb fc20 	bl	80017e0 <_test_assert>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f040 8098 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 8005fa6:	2520      	movs	r5, #32
 8005fa8:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005fac:	484d      	ldr	r0, [pc, #308]	; (80060e4 <mbox1_execute.7599+0x1b4>)
 8005fae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fb2:	f7fd ff05 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b970      	cbnz	r0, 8005fd8 <mbox1_execute.7599+0xa8>
    *mbp->mb_wrptr++ = msg;
 8005fba:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005fbc:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005fbe:	2243      	movs	r2, #67	; 0x43
 8005fc0:	f840 2b04 	str.w	r2, [r0], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005fc4:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005fc6:	60a0      	str	r0, [r4, #8]
 8005fc8:	4944      	ldr	r1, [pc, #272]	; (80060dc <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005fca:	f080 8220 	bcs.w	800640e <mbox1_execute.7599+0x4de>
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8005fce:	4844      	ldr	r0, [pc, #272]	; (80060e0 <mbox1_execute.7599+0x1b0>)
 8005fd0:	f7fc fa0e 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 8005fd4:	f7fb fd6c 	bl	8001ab0 <chSchRescheduleS>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	2002      	movs	r0, #2
 8005fe0:	1aea      	subs	r2, r5, r3
 8005fe2:	4251      	negs	r1, r2
 8005fe4:	4151      	adcs	r1, r2
 8005fe6:	f7fb fbfb 	bl	80017e0 <_test_assert>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d173      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
 8005fee:	2520      	movs	r5, #32
 8005ff0:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005ff4:	483b      	ldr	r0, [pc, #236]	; (80060e4 <mbox1_execute.7599+0x1b4>)
 8005ff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ffa:	f7fd fee1 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005ffe:	4605      	mov	r5, r0
 8006000:	b970      	cbnz	r0, 8006020 <mbox1_execute.7599+0xf0>
    *mbp->mb_wrptr++ = msg;
 8006002:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8006004:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8006006:	2244      	movs	r2, #68	; 0x44
 8006008:	f840 2b04 	str.w	r2, [r0], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 800600c:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800600e:	60a0      	str	r0, [r4, #8]
 8006010:	4932      	ldr	r1, [pc, #200]	; (80060dc <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8006012:	f080 81ff 	bcs.w	8006414 <mbox1_execute.7599+0x4e4>
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8006016:	4832      	ldr	r0, [pc, #200]	; (80060e0 <mbox1_execute.7599+0x1b0>)
 8006018:	f7fc f9ea 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 800601c:	f7fb fd48 	bl	8001ab0 <chSchRescheduleS>
 8006020:	2300      	movs	r3, #0
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	2002      	movs	r0, #2
 8006028:	ebb5 0c03 	subs.w	ip, r5, r3
 800602c:	f1dc 0200 	rsbs	r2, ip, #0
 8006030:	eb52 010c 	adcs.w	r1, r2, ip
 8006034:	f7fb fbd4 	bl	80017e0 <_test_assert>
 8006038:	2800      	cmp	r0, #0
 800603a:	d14c      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
 800603c:	2520      	movs	r5, #32
 800603e:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8006042:	4828      	ldr	r0, [pc, #160]	; (80060e4 <mbox1_execute.7599+0x1b4>)
 8006044:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006048:	f7fd feba 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 800604c:	4605      	mov	r5, r0
 800604e:	b978      	cbnz	r0, 8006070 <mbox1_execute.7599+0x140>
    *mbp->mb_wrptr++ = msg;
 8006050:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8006052:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8006054:	2145      	movs	r1, #69	; 0x45
 8006056:	f840 1b04 	str.w	r1, [r0], #4
 800605a:	4a20      	ldr	r2, [pc, #128]	; (80060dc <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 800605c:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800605e:	60a0      	str	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8006060:	bf24      	itt	cs
 8006062:	6810      	ldrcs	r0, [r2, #0]
 8006064:	6090      	strcs	r0, [r2, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8006066:	481e      	ldr	r0, [pc, #120]	; (80060e0 <mbox1_execute.7599+0x1b0>)
 8006068:	f7fc f9c2 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 800606c:	f7fb fd20 	bl	8001ab0 <chSchRescheduleS>
 8006070:	2300      	movs	r3, #0
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	2002      	movs	r0, #2
 8006078:	ebb5 0e03 	subs.w	lr, r5, r3
 800607c:	f1de 0100 	rsbs	r1, lr, #0
 8006080:	eb51 010e 	adcs.w	r1, r1, lr
 8006084:	f7fb fbac 	bl	80017e0 <_test_assert>
 8006088:	bb28      	cbnz	r0, 80060d6 <mbox1_execute.7599+0x1a6>
 800608a:	2520      	movs	r5, #32
 800608c:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8006090:	4814      	ldr	r0, [pc, #80]	; (80060e4 <mbox1_execute.7599+0x1b4>)
 8006092:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006096:	f7fd fe93 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 800609a:	4605      	mov	r5, r0
 800609c:	b970      	cbnz	r0, 80060bc <mbox1_execute.7599+0x18c>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 800609e:	68e0      	ldr	r0, [r4, #12]
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	1f03      	subs	r3, r0, #4
 80060a4:	4293      	cmp	r3, r2
 80060a6:	60e3      	str	r3, [r4, #12]
 80060a8:	490c      	ldr	r1, [pc, #48]	; (80060dc <mbox1_execute.7599+0x1ac>)
 80060aa:	f0c0 81b6 	bcc.w	800641a <mbox1_execute.7599+0x4ea>
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 80060ae:	2241      	movs	r2, #65	; 0x41
    chSemSignalI(&mbp->mb_fullsem);
 80060b0:	480b      	ldr	r0, [pc, #44]	; (80060e0 <mbox1_execute.7599+0x1b0>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 80060b2:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80060b4:	f7fc f99c 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 80060b8:	f7fb fcfa 	bl	8001ab0 <chSchRescheduleS>
 80060bc:	2100      	movs	r1, #0
 80060be:	f381 8811 	msr	BASEPRI, r1
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 80060c2:	2003      	movs	r0, #3
 80060c4:	1a6b      	subs	r3, r5, r1
 80060c6:	425a      	negs	r2, r3
 80060c8:	eb52 0103 	adcs.w	r1, r2, r3
 80060cc:	f7fb fb88 	bl	80017e0 <_test_assert>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f000 81ab 	beq.w	800642c <mbox1_execute.7599+0x4fc>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 80060d6:	b002      	add	sp, #8
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	20000cc4 	.word	0x20000cc4
 80060e0:	20000cd4 	.word	0x20000cd4
 80060e4:	20000ce0 	.word	0x20000ce0
 80060e8:	f380 8811 	msr	BASEPRI, r0
 80060ec:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 80060f0:	2041      	movs	r0, #65	; 0x41
 80060f2:	f7fd ff5d 	bl	8003fb0 <chMBPostI.constprop.31>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 80060f6:	f1d0 0101 	rsbs	r1, r0, #1
 80060fa:	bf38      	it	cc
 80060fc:	2100      	movcc	r1, #0
 80060fe:	2016      	movs	r0, #22
 8006100:	f7fb fb6e 	bl	80017e0 <_test_assert>
 8006104:	2800      	cmp	r0, #0
 8006106:	d1e6      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'B');
 8006108:	2042      	movs	r0, #66	; 0x42
 800610a:	f7fd ff51 	bl	8003fb0 <chMBPostI.constprop.31>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 800610e:	f1d0 0101 	rsbs	r1, r0, #1
 8006112:	bf38      	it	cc
 8006114:	2100      	movcc	r1, #0
 8006116:	2017      	movs	r0, #23
 8006118:	f7fb fb62 	bl	80017e0 <_test_assert>
 800611c:	2800      	cmp	r0, #0
 800611e:	d1da      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'C');
 8006120:	2043      	movs	r0, #67	; 0x43
 8006122:	f7fd ff45 	bl	8003fb0 <chMBPostI.constprop.31>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 8006126:	f1d0 0101 	rsbs	r1, r0, #1
 800612a:	bf38      	it	cc
 800612c:	2100      	movcc	r1, #0
 800612e:	2018      	movs	r0, #24
 8006130:	f7fb fb56 	bl	80017e0 <_test_assert>
 8006134:	2800      	cmp	r0, #0
 8006136:	d1ce      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'D');
 8006138:	2044      	movs	r0, #68	; 0x44
 800613a:	f7fd ff39 	bl	8003fb0 <chMBPostI.constprop.31>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 800613e:	f1d0 0101 	rsbs	r1, r0, #1
 8006142:	bf38      	it	cc
 8006144:	2100      	movcc	r1, #0
 8006146:	2019      	movs	r0, #25
 8006148:	f7fb fb4a 	bl	80017e0 <_test_assert>
 800614c:	4607      	mov	r7, r0
 800614e:	2800      	cmp	r0, #0
 8006150:	d1c1      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'E');
 8006152:	2045      	movs	r0, #69	; 0x45
 8006154:	f7fd ff2c 	bl	8003fb0 <chMBPostI.constprop.31>
 8006158:	4602      	mov	r2, r0
 800615a:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 800615e:	201a      	movs	r0, #26
 8006160:	f1d2 0101 	rsbs	r1, r2, #1
 8006164:	bf38      	it	cc
 8006166:	2100      	movcc	r1, #0
 8006168:	f7fb fb3a 	bl	80017e0 <_test_assert>
 800616c:	2800      	cmp	r0, #0
 800616e:	d1b2      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006170:	68e9      	ldr	r1, [r5, #12]
 8006172:	68ab      	ldr	r3, [r5, #8]
 8006174:	201b      	movs	r0, #27
 8006176:	1aca      	subs	r2, r1, r3
 8006178:	4251      	negs	r1, r2
 800617a:	4151      	adcs	r1, r2
 800617c:	f7fb fb30 	bl	80017e0 <_test_assert>
 8006180:	2800      	cmp	r0, #0
 8006182:	d1a8      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
 8006184:	2505      	movs	r5, #5
 8006186:	46b0      	mov	r8, r6
 8006188:	4607      	mov	r7, r0
 800618a:	2620      	movs	r6, #32
 800618c:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8006190:	a801      	add	r0, sp, #4
 8006192:	f7fd ff4d 	bl	8004030 <chMBFetchI.constprop.27>
 8006196:	4603      	mov	r3, r0
 8006198:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 800619c:	201c      	movs	r0, #28
 800619e:	f1d3 0101 	rsbs	r1, r3, #1
 80061a2:	bf38      	it	cc
 80061a4:	2100      	movcc	r1, #0
 80061a6:	f7fb fb1b 	bl	80017e0 <_test_assert>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d193      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
 80061ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80061b2:	f7fb fb2d 	bl	8001810 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 80061b6:	3d01      	subs	r5, #1
 80061b8:	d1e7      	bne.n	800618a <mbox1_execute.7599+0x25a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 80061ba:	201d      	movs	r0, #29
 80061bc:	4999      	ldr	r1, [pc, #612]	; (8006424 <mbox1_execute.7599+0x4f4>)
 80061be:	f7fb fac7 	bl	8001750 <_test_assert_sequence>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d187      	bne.n	80060d6 <mbox1_execute.7599+0x1a6>
 80061c6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80061ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80061cc:	201e      	movs	r0, #30
 80061ce:	1f7a      	subs	r2, r7, #5
 80061d0:	4251      	negs	r1, r2
 80061d2:	4151      	adcs	r1, r2
 80061d4:	4f94      	ldr	r7, [pc, #592]	; (8006428 <mbox1_execute.7599+0x4f8>)
 80061d6:	f7fb fb03 	bl	80017e0 <_test_assert>
 80061da:	f385 8811 	msr	BASEPRI, r5
 80061de:	2800      	cmp	r0, #0
 80061e0:	f47f af79 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80061e4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	201f      	movs	r0, #31
 80061ec:	f1d3 0101 	rsbs	r1, r3, #1
 80061f0:	bf38      	it	cc
 80061f2:	2100      	movcc	r1, #0
 80061f4:	f7fb faf4 	bl	80017e0 <_test_assert>
 80061f8:	f385 8811 	msr	BASEPRI, r5
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f47f af6a 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4630      	mov	r0, r6
 8006208:	ebb2 0e01 	subs.w	lr, r2, r1
 800620c:	f1de 0300 	rsbs	r3, lr, #0
 8006210:	eb53 010e 	adcs.w	r1, r3, lr
 8006214:	f7fb fae4 	bl	80017e0 <_test_assert>
 8006218:	2800      	cmp	r0, #0
 800621a:	f47f af5c 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 800621e:	f386 8811 	msr	BASEPRI, r6

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 8006222:	2045      	movs	r0, #69	; 0x45
 8006224:	f7fd fee4 	bl	8003ff0 <chMBPostAheadI.constprop.29>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 8006228:	f1d0 0101 	rsbs	r1, r0, #1
 800622c:	bf38      	it	cc
 800622e:	2100      	movcc	r1, #0
 8006230:	2021      	movs	r0, #33	; 0x21
 8006232:	f7fb fad5 	bl	80017e0 <_test_assert>
 8006236:	2800      	cmp	r0, #0
 8006238:	f47f af4d 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'D');
 800623c:	2044      	movs	r0, #68	; 0x44
 800623e:	f7fd fed7 	bl	8003ff0 <chMBPostAheadI.constprop.29>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 8006242:	f1d0 0101 	rsbs	r1, r0, #1
 8006246:	bf38      	it	cc
 8006248:	2100      	movcc	r1, #0
 800624a:	2022      	movs	r0, #34	; 0x22
 800624c:	f7fb fac8 	bl	80017e0 <_test_assert>
 8006250:	2800      	cmp	r0, #0
 8006252:	f47f af40 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8006256:	2043      	movs	r0, #67	; 0x43
 8006258:	f7fd feca 	bl	8003ff0 <chMBPostAheadI.constprop.29>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 800625c:	f1d0 0101 	rsbs	r1, r0, #1
 8006260:	bf38      	it	cc
 8006262:	2100      	movcc	r1, #0
 8006264:	2023      	movs	r0, #35	; 0x23
 8006266:	f7fb fabb 	bl	80017e0 <_test_assert>
 800626a:	2800      	cmp	r0, #0
 800626c:	f47f af33 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8006270:	2042      	movs	r0, #66	; 0x42
 8006272:	f7fd febd 	bl	8003ff0 <chMBPostAheadI.constprop.29>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8006276:	f1d0 0101 	rsbs	r1, r0, #1
 800627a:	bf38      	it	cc
 800627c:	2100      	movcc	r1, #0
 800627e:	2024      	movs	r0, #36	; 0x24
 8006280:	f7fb faae 	bl	80017e0 <_test_assert>
 8006284:	2800      	cmp	r0, #0
 8006286:	f47f af26 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'A');
 800628a:	2041      	movs	r0, #65	; 0x41
 800628c:	f7fd feb0 	bl	8003ff0 <chMBPostAheadI.constprop.29>
 8006290:	2100      	movs	r1, #0
 8006292:	4602      	mov	r2, r0
 8006294:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8006298:	2025      	movs	r0, #37	; 0x25
 800629a:	ebb2 0c01 	subs.w	ip, r2, r1
 800629e:	f1dc 0300 	rsbs	r3, ip, #0
 80062a2:	eb53 010c 	adcs.w	r1, r3, ip
 80062a6:	f7fb fa9b 	bl	80017e0 <_test_assert>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	f47f af13 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80062b0:	68e2      	ldr	r2, [r4, #12]
 80062b2:	68a1      	ldr	r1, [r4, #8]
 80062b4:	2026      	movs	r0, #38	; 0x26
 80062b6:	1a53      	subs	r3, r2, r1
 80062b8:	425a      	negs	r2, r3
 80062ba:	eb52 0103 	adcs.w	r1, r2, r3
 80062be:	f7fb fa8f 	bl	80017e0 <_test_assert>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f47f af07 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80062c8:	2505      	movs	r5, #5
 80062ca:	f04f 0820 	mov.w	r8, #32
 80062ce:	4607      	mov	r7, r0
 80062d0:	2620      	movs	r6, #32
 80062d2:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 80062d6:	a801      	add	r0, sp, #4
 80062d8:	f7fd feaa 	bl	8004030 <chMBFetchI.constprop.27>
 80062dc:	4601      	mov	r1, r0
 80062de:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 80062e2:	2027      	movs	r0, #39	; 0x27
 80062e4:	f1d1 0101 	rsbs	r1, r1, #1
 80062e8:	bf38      	it	cc
 80062ea:	2100      	movcc	r1, #0
 80062ec:	f7fb fa78 	bl	80017e0 <_test_assert>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f47f aef0 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
 80062f6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80062fa:	f7fb fa89 	bl	8001810 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 80062fe:	3d01      	subs	r5, #1
 8006300:	d1e6      	bne.n	80062d0 <mbox1_execute.7599+0x3a0>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 8006302:	2028      	movs	r0, #40	; 0x28
 8006304:	4947      	ldr	r1, [pc, #284]	; (8006424 <mbox1_execute.7599+0x4f4>)
 8006306:	f7fb fa23 	bl	8001750 <_test_assert_sequence>
 800630a:	2800      	cmp	r0, #0
 800630c:	f47f aee3 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 8006310:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006314:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8006316:	2029      	movs	r0, #41	; 0x29
 8006318:	1f63      	subs	r3, r4, #5
 800631a:	425a      	negs	r2, r3
 800631c:	eb52 0103 	adcs.w	r1, r2, r3
 8006320:	4c41      	ldr	r4, [pc, #260]	; (8006428 <mbox1_execute.7599+0x4f8>)
 8006322:	f7fb fa5d 	bl	80017e0 <_test_assert>
 8006326:	f385 8811 	msr	BASEPRI, r5
 800632a:	2800      	cmp	r0, #0
 800632c:	f47f aed3 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 8006330:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006334:	69a1      	ldr	r1, [r4, #24]
 8006336:	202a      	movs	r0, #42	; 0x2a
 8006338:	f1d1 0101 	rsbs	r1, r1, #1
 800633c:	bf38      	it	cc
 800633e:	2100      	movcc	r1, #0
 8006340:	f7fb fa4e 	bl	80017e0 <_test_assert>
 8006344:	f385 8811 	msr	BASEPRI, r5
 8006348:	2800      	cmp	r0, #0
 800634a:	f47f aec4 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800634e:	68e2      	ldr	r2, [r4, #12]
 8006350:	68a3      	ldr	r3, [r4, #8]
 8006352:	202b      	movs	r0, #43	; 0x2b
 8006354:	ebb2 0e03 	subs.w	lr, r2, r3
 8006358:	f1de 0100 	rsbs	r1, lr, #0
 800635c:	eb51 010e 	adcs.w	r1, r1, lr
 8006360:	f7fb fa3e 	bl	80017e0 <_test_assert>
 8006364:	2800      	cmp	r0, #0
 8006366:	f47f aeb6 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 800636a:	f386 8811 	msr	BASEPRI, r6
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 800636e:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 8006370:	6862      	ldr	r2, [r4, #4]
 8006372:	f104 001c 	add.w	r0, r4, #28
 8006376:	1ad1      	subs	r1, r2, r3
 8006378:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 800637a:	60e3      	str	r3, [r4, #12]
 800637c:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 800637e:	f7fc f847 	bl	8002410 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 8006382:	f104 0010 	add.w	r0, r4, #16
 8006386:	4629      	mov	r1, r5
 8006388:	f7fc f842 	bl	8002410 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 800638c:	f7fb fb90 	bl	8001ab0 <chSchRescheduleS>
 8006390:	f385 8811 	msr	BASEPRI, r5
 8006394:	f386 8811 	msr	BASEPRI, r6
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800639a:	202c      	movs	r0, #44	; 0x2c
 800639c:	f1b3 0c05 	subs.w	ip, r3, #5
 80063a0:	f1dc 0200 	rsbs	r2, ip, #0
 80063a4:	eb52 010c 	adcs.w	r1, r2, ip
 80063a8:	f7fb fa1a 	bl	80017e0 <_test_assert>
 80063ac:	f385 8811 	msr	BASEPRI, r5
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f47f ae90 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80063b6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 80063ba:	69a1      	ldr	r1, [r4, #24]
 80063bc:	202d      	movs	r0, #45	; 0x2d
 80063be:	f1d1 0101 	rsbs	r1, r1, #1
 80063c2:	bf38      	it	cc
 80063c4:	2100      	movcc	r1, #0
 80063c6:	f7fb fa0b 	bl	80017e0 <_test_assert>
 80063ca:	f385 8811 	msr	BASEPRI, r5
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f47f ae81 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80063d4:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	202e      	movs	r0, #46	; 0x2e
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	4251      	negs	r1, r2
 80063e2:	4151      	adcs	r1, r2
 80063e4:	f7fb f9fc 	bl	80017e0 <_test_assert>
 80063e8:	f385 8811 	msr	BASEPRI, r5
 80063ec:	2800      	cmp	r0, #0
 80063ee:	f47f ae72 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80063f2:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	68e3      	ldr	r3, [r4, #12]
 80063fa:	202f      	movs	r0, #47	; 0x2f
 80063fc:	1ad2      	subs	r2, r2, r3
 80063fe:	4251      	negs	r1, r2
 8006400:	4151      	adcs	r1, r2
 8006402:	f7fb f9ed 	bl	80017e0 <_test_assert>
 8006406:	2000      	movs	r0, #0
 8006408:	f380 8811 	msr	BASEPRI, r0
 800640c:	e663      	b.n	80060d6 <mbox1_execute.7599+0x1a6>

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 800640e:	6808      	ldr	r0, [r1, #0]
 8006410:	6088      	str	r0, [r1, #8]
 8006412:	e5dc      	b.n	8005fce <mbox1_execute.7599+0x9e>
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	6088      	str	r0, [r1, #8]
 8006418:	e5fd      	b.n	8006016 <mbox1_execute.7599+0xe6>
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
 800641a:	684b      	ldr	r3, [r1, #4]
 800641c:	3b04      	subs	r3, #4
 800641e:	60cb      	str	r3, [r1, #12]
 8006420:	e645      	b.n	80060ae <mbox1_execute.7599+0x17e>
 8006422:	bf00      	nop
 8006424:	08009e54 	.word	0x08009e54
 8006428:	20000cc4 	.word	0x20000cc4
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 800642c:	2101      	movs	r1, #1
 800642e:	2058      	movs	r0, #88	; 0x58
 8006430:	f002 ffd6 	bl	80093e0 <chMBPost.constprop.32>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006434:	f1b0 35ff 	subs.w	r5, r0, #4294967295
 8006438:	4268      	negs	r0, r5
 800643a:	eb50 0105 	adcs.w	r1, r0, r5
 800643e:	2004      	movs	r0, #4
 8006440:	f7fb f9ce 	bl	80017e0 <_test_assert>
 8006444:	4605      	mov	r5, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	f47f ae45 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 800644c:	2620      	movs	r6, #32
 800644e:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8006452:	2058      	movs	r0, #88	; 0x58
 8006454:	f7fd fdac 	bl	8003fb0 <chMBPostI.constprop.31>
 8006458:	4601      	mov	r1, r0
 800645a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800645e:	2005      	movs	r0, #5
 8006460:	f1b1 3cff 	subs.w	ip, r1, #4294967295
 8006464:	f1dc 0300 	rsbs	r3, ip, #0
 8006468:	eb53 010c 	adcs.w	r1, r3, ip
 800646c:	f7fb f9b8 	bl	80017e0 <_test_assert>
 8006470:	2800      	cmp	r0, #0
 8006472:	f47f ae30 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 8006476:	f386 8811 	msr	BASEPRI, r6
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 800647a:	488e      	ldr	r0, [pc, #568]	; (80066b4 <mbox1_execute.7599+0x784>)
 800647c:	2101      	movs	r1, #1
 800647e:	f7fd fc9f 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006482:	4605      	mov	r5, r0
 8006484:	b980      	cbnz	r0, 80064a8 <mbox1_execute.7599+0x578>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 8006486:	68e0      	ldr	r0, [r4, #12]
 8006488:	6822      	ldr	r2, [r4, #0]
 800648a:	1f03      	subs	r3, r0, #4
 800648c:	4293      	cmp	r3, r2
 800648e:	60e3      	str	r3, [r4, #12]
 8006490:	4989      	ldr	r1, [pc, #548]	; (80066b8 <mbox1_execute.7599+0x788>)
 8006492:	d202      	bcs.n	800649a <mbox1_execute.7599+0x56a>
      mbp->mb_rdptr = mbp->mb_top - 1;
 8006494:	684b      	ldr	r3, [r1, #4]
 8006496:	3b04      	subs	r3, #4
 8006498:	60cb      	str	r3, [r1, #12]
    *mbp->mb_rdptr = msg;
 800649a:	2258      	movs	r2, #88	; 0x58
    chSemSignalI(&mbp->mb_fullsem);
 800649c:	4887      	ldr	r0, [pc, #540]	; (80066bc <mbox1_execute.7599+0x78c>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 800649e:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 80064a0:	f7fb ffa6 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 80064a4:	f7fb fb04 	bl	8001ab0 <chSchRescheduleS>
 80064a8:	2000      	movs	r0, #0
 80064aa:	f380 8811 	msr	BASEPRI, r0
  msg1 = chMBPostAhead(&mb1, 'X', 1);
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80064ae:	2006      	movs	r0, #6
 80064b0:	f1b5 3eff 	subs.w	lr, r5, #4294967295
 80064b4:	f1de 0500 	rsbs	r5, lr, #0
 80064b8:	eb55 010e 	adcs.w	r1, r5, lr
 80064bc:	f7fb f990 	bl	80017e0 <_test_assert>
 80064c0:	4605      	mov	r5, r0
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f47f ae07 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80064c8:	2620      	movs	r6, #32
 80064ca:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 80064ce:	2058      	movs	r0, #88	; 0x58
 80064d0:	f7fd fd8e 	bl	8003ff0 <chMBPostAheadI.constprop.29>
 80064d4:	4601      	mov	r1, r0
 80064d6:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80064da:	2007      	movs	r0, #7
 80064dc:	f1b1 33ff 	subs.w	r3, r1, #4294967295
 80064e0:	425a      	negs	r2, r3
 80064e2:	eb52 0103 	adcs.w	r1, r2, r3
 80064e6:	f7fb f97b 	bl	80017e0 <_test_assert>
 80064ea:	4605      	mov	r5, r0
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f47f adf2 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 80064f2:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 80064f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80064f8:	2008      	movs	r0, #8
 80064fa:	f1d7 0101 	rsbs	r1, r7, #1
 80064fe:	bf38      	it	cc
 8006500:	2100      	movcc	r1, #0
 8006502:	f7fb f96d 	bl	80017e0 <_test_assert>
 8006506:	4f6c      	ldr	r7, [pc, #432]	; (80066b8 <mbox1_execute.7599+0x788>)
 8006508:	4680      	mov	r8, r0
 800650a:	b110      	cbz	r0, 8006512 <mbox1_execute.7599+0x5e2>
 800650c:	f385 8811 	msr	BASEPRI, r5
 8006510:	e5e1      	b.n	80060d6 <mbox1_execute.7599+0x1a6>
 8006512:	f380 8811 	msr	BASEPRI, r0
 8006516:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800651a:	69bd      	ldr	r5, [r7, #24]
 800651c:	2009      	movs	r0, #9
 800651e:	1f6b      	subs	r3, r5, #5
 8006520:	4259      	negs	r1, r3
 8006522:	4159      	adcs	r1, r3
 8006524:	f7fb f95c 	bl	80017e0 <_test_assert>
 8006528:	4605      	mov	r5, r0
 800652a:	b110      	cbz	r0, 8006532 <mbox1_execute.7599+0x602>
 800652c:	f388 8811 	msr	BASEPRI, r8
 8006530:	e5d1      	b.n	80060d6 <mbox1_execute.7599+0x1a6>
 8006532:	f380 8811 	msr	BASEPRI, r0
 8006536:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	200a      	movs	r0, #10
 8006540:	1ad2      	subs	r2, r2, r3
 8006542:	4251      	negs	r1, r2
 8006544:	4151      	adcs	r1, r2
 8006546:	f7fb f94b 	bl	80017e0 <_test_assert>
 800654a:	2800      	cmp	r0, #0
 800654c:	d1de      	bne.n	800650c <mbox1_execute.7599+0x5dc>
 800654e:	f380 8811 	msr	BASEPRI, r0
 8006552:	2505      	movs	r5, #5
 8006554:	e005      	b.n	8006562 <mbox1_execute.7599+0x632>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8006556:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800655a:	f7fb f959 	bl	8001810 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 800655e:	3d01      	subs	r5, #1
 8006560:	d00e      	beq.n	8006580 <mbox1_execute.7599+0x650>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8006562:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006566:	a801      	add	r0, sp, #4
 8006568:	f7fd fc4a 	bl	8003e00 <chMBFetch.constprop.28>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 800656c:	f1d0 0101 	rsbs	r1, r0, #1
 8006570:	bf38      	it	cc
 8006572:	2100      	movcc	r1, #0
 8006574:	200b      	movs	r0, #11
 8006576:	f7fb f933 	bl	80017e0 <_test_assert>
 800657a:	2800      	cmp	r0, #0
 800657c:	d0eb      	beq.n	8006556 <mbox1_execute.7599+0x626>
 800657e:	e5aa      	b.n	80060d6 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8006580:	200c      	movs	r0, #12
 8006582:	494f      	ldr	r1, [pc, #316]	; (80066c0 <mbox1_execute.7599+0x790>)
 8006584:	f7fb f8e4 	bl	8001750 <_test_assert_sequence>
 8006588:	2800      	cmp	r0, #0
 800658a:	f47f ada4 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800658e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006592:	2047      	movs	r0, #71	; 0x47
 8006594:	f002 ff24 	bl	80093e0 <chMBPost.constprop.32>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8006598:	f1d0 0101 	rsbs	r1, r0, #1
 800659c:	bf38      	it	cc
 800659e:	2100      	movcc	r1, #0
 80065a0:	200d      	movs	r0, #13
 80065a2:	f7fb f91d 	bl	80017e0 <_test_assert>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f47f ad95 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 80065ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80065b0:	a801      	add	r0, sp, #4
 80065b2:	f7fd fc25 	bl	8003e00 <chMBFetch.constprop.28>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 80065b6:	f1d0 0101 	rsbs	r1, r0, #1
 80065ba:	bf38      	it	cc
 80065bc:	2100      	movcc	r1, #0
 80065be:	200e      	movs	r0, #14
 80065c0:	f7fb f90e 	bl	80017e0 <_test_assert>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	f47f ad86 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 80065ca:	6826      	ldr	r6, [r4, #0]
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	200f      	movs	r0, #15
 80065d0:	ebb6 0c03 	subs.w	ip, r6, r3
 80065d4:	f1dc 0200 	rsbs	r2, ip, #0
 80065d8:	eb52 010c 	adcs.w	r1, r2, ip
 80065dc:	4e36      	ldr	r6, [pc, #216]	; (80066b8 <mbox1_execute.7599+0x788>)
 80065de:	f7fb f8ff 	bl	80017e0 <_test_assert>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f47f ad77 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80065e8:	6831      	ldr	r1, [r6, #0]
 80065ea:	68f3      	ldr	r3, [r6, #12]
 80065ec:	2010      	movs	r0, #16
 80065ee:	ebb1 0e03 	subs.w	lr, r1, r3
 80065f2:	f1de 0200 	rsbs	r2, lr, #0
 80065f6:	eb52 010e 	adcs.w	r1, r2, lr
 80065fa:	f7fb f8f1 	bl	80017e0 <_test_assert>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f47f ad69 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 8006604:	2101      	movs	r1, #1
 8006606:	a801      	add	r0, sp, #4
 8006608:	f7fd fbfa 	bl	8003e00 <chMBFetch.constprop.28>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800660c:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 8006610:	4241      	negs	r1, r0
 8006612:	4141      	adcs	r1, r0
 8006614:	2011      	movs	r0, #17
 8006616:	f7fb f8e3 	bl	80017e0 <_test_assert>
 800661a:	2800      	cmp	r0, #0
 800661c:	f47f ad5b 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 8006620:	2720      	movs	r7, #32
 8006622:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 8006626:	a801      	add	r0, sp, #4
 8006628:	f7fd fd02 	bl	8004030 <chMBFetchI.constprop.27>
 800662c:	4603      	mov	r3, r0
 800662e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8006632:	2012      	movs	r0, #18
 8006634:	f1b3 32ff 	subs.w	r2, r3, #4294967295
 8006638:	4251      	negs	r1, r2
 800663a:	4151      	adcs	r1, r2
 800663c:	f7fb f8d0 	bl	80017e0 <_test_assert>
 8006640:	2800      	cmp	r0, #0
 8006642:	f47f ad48 	bne.w	80060d6 <mbox1_execute.7599+0x1a6>
 8006646:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800664a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800664c:	2013      	movs	r0, #19
 800664e:	1f5a      	subs	r2, r3, #5
 8006650:	4251      	negs	r1, r2
 8006652:	4151      	adcs	r1, r2
 8006654:	f7fb f8c4 	bl	80017e0 <_test_assert>
 8006658:	2800      	cmp	r0, #0
 800665a:	f47f aed4 	bne.w	8006406 <mbox1_execute.7599+0x4d6>
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	f388 8811 	msr	BASEPRI, r8
 8006666:	2620      	movs	r6, #32
 8006668:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800666c:	69a7      	ldr	r7, [r4, #24]
 800666e:	2014      	movs	r0, #20
 8006670:	ebb7 0508 	subs.w	r5, r7, r8
 8006674:	426b      	negs	r3, r5
 8006676:	eb53 0105 	adcs.w	r1, r3, r5
 800667a:	f7fb f8b1 	bl	80017e0 <_test_assert>
 800667e:	4d0e      	ldr	r5, [pc, #56]	; (80066b8 <mbox1_execute.7599+0x788>)
 8006680:	4607      	mov	r7, r0
 8006682:	2800      	cmp	r0, #0
 8006684:	f47f af52 	bne.w	800652c <mbox1_execute.7599+0x5fc>
 8006688:	f380 8811 	msr	BASEPRI, r0
 800668c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006690:	68a9      	ldr	r1, [r5, #8]
 8006692:	68ea      	ldr	r2, [r5, #12]
 8006694:	2015      	movs	r0, #21
 8006696:	ebb2 0c01 	subs.w	ip, r2, r1
 800669a:	f1dc 0300 	rsbs	r3, ip, #0
 800669e:	eb53 010c 	adcs.w	r1, r3, ip
 80066a2:	f7fb f89d 	bl	80017e0 <_test_assert>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f43f ad1e 	beq.w	80060e8 <mbox1_execute.7599+0x1b8>
 80066ac:	f387 8811 	msr	BASEPRI, r7
 80066b0:	e511      	b.n	80060d6 <mbox1_execute.7599+0x1a6>
 80066b2:	bf00      	nop
 80066b4:	20000ce0 	.word	0x20000ce0
 80066b8:	20000cc4 	.word	0x20000cc4
 80066bc:	20000cd4 	.word	0x20000cd4
 80066c0:	08009e54 	.word	0x08009e54
 80066c4:	f3af 8000 	nop.w
 80066c8:	f3af 8000 	nop.w
 80066cc:	f3af 8000 	nop.w

080066d0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 80066d2:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80066d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80066da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066dc:	4604      	mov	r4, r0
 80066de:	f102 5500 	add.w	r5, r2, #536870912	; 0x20000000
 80066e2:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 80066e6:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80066ea:	004f      	lsls	r7, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 80066ec:	68bb      	ldr	r3, [r7, #8]
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 80066ee:	6842      	ldr	r2, [r0, #4]
 80066f0:	f103 5500 	add.w	r5, r3, #536870912	; 0x20000000
 80066f4:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 80066f8:	0071      	lsls	r1, r6, #1
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80066fa:	680f      	ldr	r7, [r1, #0]
 80066fc:	684e      	ldr	r6, [r1, #4]
 80066fe:	688d      	ldr	r5, [r1, #8]
 8006700:	6893      	ldr	r3, [r2, #8]
 8006702:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006704:	2200      	movs	r2, #0
 8006706:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 800670a:	f8a0 7074 	strh.w	r7, [r0, #116]	; 0x74
 800670e:	f8a0 6076 	strh.w	r6, [r0, #118]	; 0x76
 8006712:	f8a0 5078 	strh.w	r5, [r0, #120]	; 0x78
 8006716:	f8a0 107a 	strh.w	r1, [r0, #122]	; 0x7a
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 800671a:	b333      	cbz	r3, 800676a <_usb_ep0setup+0x9a>
      !(usbp->config->requests_hook_cb(usbp))) {
 800671c:	4798      	blx	r3
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 800671e:	b320      	cbz	r0, 800676a <_usb_ep0setup+0x9a>
 8006720:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8006722:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
 8006726:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 800672a:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
 800672e:	ea40 2201 	orr.w	r2, r0, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
 8006732:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 8006734:	bf3c      	itt	cc
 8006736:	66e2      	strcc	r2, [r4, #108]	; 0x6c
 8006738:	4615      	movcc	r5, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800673a:	061b      	lsls	r3, r3, #24
 800673c:	f100 80aa 	bmi.w	8006894 <_usb_ep0setup+0x1c4>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
 8006740:	2d00      	cmp	r5, #0
 8006742:	f040 808e 	bne.w	8006862 <_usb_ep0setup+0x192>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 8006746:	2305      	movs	r3, #5
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 8006748:	4629      	mov	r1, r5
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 800674a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 800674e:	4620      	mov	r0, r4
 8006750:	462a      	mov	r2, r5
 8006752:	f7fe fb35 	bl	8004dc0 <usbPrepareTransmit.constprop.7>
 8006756:	2120      	movs	r1, #32
 8006758:	f381 8811 	msr	BASEPRI, r1
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7ff fab6 	bl	8005cd0 <usbStartTransmitI>
 8006764:	f385 8811 	msr	BASEPRI, r5
 8006768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
      !(usbp->config->requests_hook_cb(usbp))) {
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800676a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800676e:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8006772:	d01d      	beq.n	80067b0 <_usb_ep0setup+0xe0>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006774:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006778:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800677c:	6819      	ldr	r1, [r3, #0]
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800677e:	6862      	ldr	r2, [r4, #4]
 8006780:	f421 40f0 	bic.w	r0, r1, #30720	; 0x7800
 8006784:	f020 0140 	bic.w	r1, r0, #64	; 0x40
 8006788:	f081 0010 	eor.w	r0, r1, #16
 800678c:	6018      	str	r0, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	f421 4090 	bic.w	r0, r1, #18432	; 0x4800
 8006796:	f020 0170 	bic.w	r1, r0, #112	; 0x70
 800679a:	f481 5080 	eor.w	r0, r1, #4096	; 0x1000
 800679e:	6018      	str	r0, [r3, #0]
 80067a0:	b112      	cbz	r2, 80067a8 <_usb_ep0setup+0xd8>
 80067a2:	4620      	mov	r0, r4
 80067a4:	2105      	movs	r1, #5
 80067a6:	4790      	blx	r2
      usbp->ep0state = USB_EP0_ERROR;
 80067a8:	2306      	movs	r3, #6
 80067aa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80067ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
 80067b0:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80067b4:	f003 007f 	and.w	r0, r3, #127	; 0x7f
                              USB_RTYPE_TYPE_MASK)) |
 80067b8:	ea40 2205 	orr.w	r2, r0, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80067bc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80067c0:	f000 80d8 	beq.w	8006974 <_usb_ep0setup+0x2a4>
 80067c4:	dd18      	ble.n	80067f8 <_usb_ep0setup+0x128>
 80067c6:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 80067ca:	f000 80fd 	beq.w	80069c8 <_usb_ep0setup+0x2f8>
 80067ce:	f340 808c 	ble.w	80068ea <_usb_ep0setup+0x21a>
 80067d2:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 80067d6:	f000 80e4 	beq.w	80069a2 <_usb_ep0setup+0x2d2>
 80067da:	f640 4102 	movw	r1, #3074	; 0xc02
 80067de:	428a      	cmp	r2, r1
 80067e0:	f000 8097 	beq.w	8006912 <_usb_ep0setup+0x242>
 80067e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80067e8:	d1c4      	bne.n	8006774 <_usb_ep0setup+0xa4>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 80067ea:	2501      	movs	r5, #1
 80067ec:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80067f0:	66a2      	str	r2, [r4, #104]	; 0x68
 80067f2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80067f4:	6726      	str	r6, [r4, #112]	; 0x70
 80067f6:	e796      	b.n	8006726 <_usb_ep0setup+0x56>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80067f8:	2a02      	cmp	r2, #2
 80067fa:	f000 80a1 	beq.w	8006940 <_usb_ep0setup+0x270>
 80067fe:	f340 8083 	ble.w	8006908 <_usb_ep0setup+0x238>
 8006802:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006806:	f000 808b 	beq.w	8006920 <_usb_ep0setup+0x250>
 800680a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800680e:	d1b1      	bne.n	8006774 <_usb_ep0setup+0xa4>
        return FALSE;
      }
    }
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 8006810:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8006814:	2800      	cmp	r0, #0
 8006816:	d1ad      	bne.n	8006774 <_usb_ep0setup+0xa4>
      return FALSE;
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8006818:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 800681c:	f015 010f 	ands.w	r1, r5, #15
 8006820:	d01a      	beq.n	8006858 <_usb_ep0setup+0x188>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8006822:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8006826:	f2c4 0200 	movt	r2, #16384	; 0x4000
      if (usbp->setup[4] & 0x80)
 800682a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800682e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8006832:	f040 811c 	bne.w	8006a6e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8006836:	f400 5540 	and.w	r5, r0, #12288	; 0x3000
 800683a:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
 800683e:	d00b      	beq.n	8006858 <_usb_ep0setup+0x188>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8006840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006844:	f423 40f0 	bic.w	r0, r3, #30720	; 0x7800
 8006848:	f020 0540 	bic.w	r5, r0, #64	; 0x40
 800684c:	f485 5300 	eor.w	r3, r5, #8192	; 0x2000
 8006850:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006854:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      if (usbp->setup[4] & 0x80)
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0F);
      else
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0F);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006858:	2500      	movs	r5, #0
 800685a:	66a5      	str	r5, [r4, #104]	; 0x68
 800685c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800685e:	6725      	str	r5, [r4, #112]	; 0x70
 8006860:	e761      	b.n	8006726 <_usb_ep0setup+0x56>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006862:	68e6      	ldr	r6, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006864:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006866:	69b3      	ldr	r3, [r6, #24]
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8006868:	2004      	movs	r0, #4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800686a:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800686c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8006870:	4631      	mov	r1, r6
 8006872:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8006874:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8006876:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8006878:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800687a:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800687c:	f7ff fa68 	bl	8005d50 <usb_lld_prepare_receive>
 8006880:	2120      	movs	r1, #32
 8006882:	f381 8811 	msr	BASEPRI, r1
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 8006886:	4620      	mov	r0, r4
 8006888:	4631      	mov	r1, r6
 800688a:	f7ff fa41 	bl	8005d10 <usbStartReceiveI>
 800688e:	f386 8811 	msr	BASEPRI, r6
 8006892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
 8006894:	b195      	cbz	r5, 80068bc <_usb_ep0setup+0x1ec>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8006896:	2201      	movs	r2, #1
 8006898:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800689c:	4620      	mov	r0, r4
 800689e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80068a0:	462a      	mov	r2, r5
 80068a2:	f7fe fa8d 	bl	8004dc0 <usbPrepareTransmit.constprop.7>
 80068a6:	2320      	movs	r3, #32
 80068a8:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 80068ac:	2100      	movs	r1, #0
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7ff fa0e 	bl	8005cd0 <usbStartTransmitI>
 80068b4:	2000      	movs	r0, #0
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80068bc:	68e2      	ldr	r2, [r4, #12]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80068be:	2003      	movs	r0, #3
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80068c0:	6993      	ldr	r3, [r2, #24]
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80068c2:	4629      	mov	r1, r5
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80068c4:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80068c8:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 80068ca:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 80068cc:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 80068ce:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 80068d0:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 80068d2:	f7ff fa3d 	bl	8005d50 <usb_lld_prepare_receive>
 80068d6:	2120      	movs	r1, #32
 80068d8:	f381 8811 	msr	BASEPRI, r1
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 80068dc:	4620      	mov	r0, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	f7ff fa16 	bl	8005d10 <usbStartReceiveI>
 80068e4:	f385 8811 	msr	BASEPRI, r5
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80068ea:	f240 3102 	movw	r1, #770	; 0x302
 80068ee:	428a      	cmp	r2, r1
 80068f0:	f000 8083 	beq.w	80069fa <_usb_ep0setup+0x32a>
 80068f4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80068f8:	f47f af3c 	bne.w	8006774 <_usb_ep0setup+0xa4>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
        (usbp->setup[1] == USB_REQ_SET_ADDRESS))
      set_address(usbp);
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80068fc:	4d6a      	ldr	r5, [pc, #424]	; (8006aa8 <_usb_ep0setup+0x3d8>)
 80068fe:	66a6      	str	r6, [r4, #104]	; 0x68
 8006900:	6725      	str	r5, [r4, #112]	; 0x70
 8006902:	66e6      	str	r6, [r4, #108]	; 0x6c
 8006904:	4635      	mov	r5, r6
 8006906:	e70e      	b.n	8006726 <_usb_ep0setup+0x56>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006908:	2a00      	cmp	r2, #0
 800690a:	d043      	beq.n	8006994 <_usb_ep0setup+0x2c4>
 800690c:	2a01      	cmp	r2, #1
 800690e:	f47f af31 	bne.w	8006774 <_usb_ep0setup+0xa4>
    return TRUE;
  case USB_RTYPE_RECIPIENT_INTERFACE | (USB_REQ_GET_STATUS << 8):
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8006912:	4866      	ldr	r0, [pc, #408]	; (8006aac <_usb_ep0setup+0x3dc>)
 8006914:	2502      	movs	r5, #2
 8006916:	2100      	movs	r1, #0
 8006918:	66a0      	str	r0, [r4, #104]	; 0x68
 800691a:	66e5      	str	r5, [r4, #108]	; 0x6c
 800691c:	6721      	str	r1, [r4, #112]	; 0x70
 800691e:	e702      	b.n	8006726 <_usb_ep0setup+0x56>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006920:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
 8006924:	2901      	cmp	r1, #1
 8006926:	f47f af25 	bne.w	8006774 <_usb_ep0setup+0xa4>
      usbp->status &= ~2;
 800692a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800692e:	66a6      	str	r6, [r4, #104]	; 0x68
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 8006930:	f022 0002 	bic.w	r0, r2, #2
 8006934:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006938:	66e6      	str	r6, [r4, #108]	; 0x6c
 800693a:	6726      	str	r6, [r4, #112]	; 0x70
 800693c:	4635      	mov	r5, r6
 800693e:	e6f2      	b.n	8006726 <_usb_ep0setup+0x56>
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
 8006940:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006944:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 8006948:	f011 0f80 	tst.w	r1, #128	; 0x80
 800694c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006950:	f001 010f 	and.w	r1, r1, #15
 8006954:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8006958:	d177      	bne.n	8006a4a <_usb_ep0setup+0x37a>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 800695a:	f410 5140 	ands.w	r1, r0, #12288	; 0x3000
 800695e:	f43f af09 	beq.w	8006774 <_usb_ep0setup+0xa4>
 8006962:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006966:	d06a      	beq.n	8006a3e <_usb_ep0setup+0x36e>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006968:	4d51      	ldr	r5, [pc, #324]	; (8006ab0 <_usb_ep0setup+0x3e0>)
 800696a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800696c:	66a5      	str	r5, [r4, #104]	; 0x68
 800696e:	6726      	str	r6, [r4, #112]	; 0x70
 8006970:	4615      	mov	r5, r2
 8006972:	e6d8      	b.n	8006726 <_usb_ep0setup+0x56>
    }
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006974:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8006978:	2801      	cmp	r0, #1
 800697a:	f47f aefb 	bne.w	8006774 <_usb_ep0setup+0xa4>
      usbp->status |= 2;
 800697e:	f8b4 507c 	ldrh.w	r5, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006982:	66a6      	str	r6, [r4, #104]	; 0x68
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 8006984:	f045 0202 	orr.w	r2, r5, #2
 8006988:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800698c:	66e6      	str	r6, [r4, #108]	; 0x6c
 800698e:	6726      	str	r6, [r4, #112]	; 0x70
 8006990:	4635      	mov	r5, r6
 8006992:	e6c8      	b.n	8006726 <_usb_ep0setup+0x56>
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8006994:	2502      	movs	r5, #2
 8006996:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 800699a:	66a1      	str	r1, [r4, #104]	; 0x68
 800699c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800699e:	6722      	str	r2, [r4, #112]	; 0x70
 80069a0:	e6c1      	b.n	8006726 <_usb_ep0setup+0x56>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 80069a2:	f894 5076 	ldrb.w	r5, [r4, #118]	; 0x76
 80069a6:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
    if (usbp->configuration == 0)
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	d144      	bne.n	8006a38 <_usb_ep0setup+0x368>
      usbp->state = USB_SELECTED;
 80069ae:	2003      	movs	r0, #3
 80069b0:	7020      	strb	r0, [r4, #0]
    else
      usbp->state = USB_ACTIVE;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 80069b2:	6861      	ldr	r1, [r4, #4]
 80069b4:	680d      	ldr	r5, [r1, #0]
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	f43f af4e 	beq.w	8006858 <_usb_ep0setup+0x188>
 80069bc:	4620      	mov	r0, r4
 80069be:	2102      	movs	r1, #2
 80069c0:	47a8      	blx	r5
 80069c2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80069c6:	e747      	b.n	8006858 <_usb_ep0setup+0x188>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 80069c8:	6862      	ldr	r2, [r4, #4]
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
 80069ca:	f894 7079 	ldrb.w	r7, [r4, #121]	; 0x79
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 80069ce:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80069d2:	6855      	ldr	r5, [r2, #4]
 80069d4:	4620      	mov	r0, r4
 80069d6:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 80069da:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80069de:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80069e2:	47a8      	blx	r5
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
    if (dp == NULL)
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f43f aec5 	beq.w	8006774 <_usb_ep0setup+0xa4>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80069ea:	6841      	ldr	r1, [r0, #4]
 80069ec:	6805      	ldr	r5, [r0, #0]
 80069ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80069f2:	66a1      	str	r1, [r4, #104]	; 0x68
 80069f4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80069f6:	6726      	str	r6, [r4, #112]	; 0x70
 80069f8:	e695      	b.n	8006726 <_usb_ep0setup+0x56>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 80069fa:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80069fe:	2a00      	cmp	r2, #0
 8006a00:	f47f aeb8 	bne.w	8006774 <_usb_ep0setup+0xa4>
      return FALSE;
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 8006a04:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
 8006a08:	f010 010f 	ands.w	r1, r0, #15
 8006a0c:	f43f af24 	beq.w	8006858 <_usb_ep0setup+0x188>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006a10:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006a14:	f2c4 0300 	movt	r3, #16384	; 0x4000
      if (usbp->setup[4] & 0x80)
 8006a18:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a1c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8006a20:	d137      	bne.n	8006a92 <_usb_ep0setup+0x3c2>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006a22:	f425 4290 	bic.w	r2, r5, #18432	; 0x4800
 8006a26:	f022 0070 	bic.w	r0, r2, #112	; 0x70
 8006a2a:	f480 5580 	eor.w	r5, r0, #4096	; 0x1000
 8006a2e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8006a32:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006a36:	e70f      	b.n	8006858 <_usb_ep0setup+0x188>
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0)
      usbp->state = USB_SELECTED;
    else
      usbp->state = USB_ACTIVE;
 8006a38:	2204      	movs	r2, #4
 8006a3a:	7022      	strb	r2, [r4, #0]
 8006a3c:	e7b9      	b.n	80069b2 <_usb_ep0setup+0x2e2>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006a3e:	4d1d      	ldr	r5, [pc, #116]	; (8006ab4 <_usb_ep0setup+0x3e4>)
 8006a40:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006a42:	66a5      	str	r5, [r4, #104]	; 0x68
 8006a44:	6726      	str	r6, [r4, #112]	; 0x70
 8006a46:	4615      	mov	r5, r2
 8006a48:	e66d      	b.n	8006726 <_usb_ep0setup+0x56>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006a4a:	f000 0130 	and.w	r1, r0, #48	; 0x30
 8006a4e:	2910      	cmp	r1, #16
 8006a50:	d806      	bhi.n	8006a60 <_usb_ep0setup+0x390>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0F)) {
 8006a52:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <_usb_ep0setup+0x3e8>)
 8006a54:	5c41      	ldrb	r1, [r0, r1]
 8006a56:	2901      	cmp	r1, #1
 8006a58:	d0f1      	beq.n	8006a3e <_usb_ep0setup+0x36e>
 8006a5a:	2902      	cmp	r1, #2
 8006a5c:	f47f ae8a 	bne.w	8006774 <_usb_ep0setup+0xa4>
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006a60:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <_usb_ep0setup+0x3e0>)
 8006a62:	2502      	movs	r5, #2
 8006a64:	2000      	movs	r0, #0
 8006a66:	66a2      	str	r2, [r4, #104]	; 0x68
 8006a68:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006a6a:	6720      	str	r0, [r4, #112]	; 0x70
 8006a6c:	e65b      	b.n	8006726 <_usb_ep0setup+0x56>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8006a6e:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8006a72:	2830      	cmp	r0, #48	; 0x30
 8006a74:	f43f aef0 	beq.w	8006858 <_usb_ep0setup+0x188>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8006a78:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8006a7c:	f425 43f0 	bic.w	r3, r5, #30720	; 0x7800
 8006a80:	f023 0040 	bic.w	r0, r3, #64	; 0x40
 8006a84:	f080 0520 	eor.w	r5, r0, #32
 8006a88:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8006a8c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006a90:	e6e2      	b.n	8006858 <_usb_ep0setup+0x188>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006a92:	f425 42f0 	bic.w	r2, r5, #30720	; 0x7800
 8006a96:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 8006a9a:	f080 0510 	eor.w	r5, r0, #16
 8006a9e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8006aa2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006aa6:	e6d7      	b.n	8006858 <_usb_ep0setup+0x188>
 8006aa8:	08005171 	.word	0x08005171
 8006aac:	0800a330 	.word	0x0800a330
 8006ab0:	0800a370 	.word	0x0800a370
 8006ab4:	0800a2f0 	.word	0x0800a2f0
 8006ab8:	0800a380 	.word	0x0800a380
 8006abc:	f3af 8000 	nop.w

08006ac0 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];
 8006ac2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006ac6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8006ac8:	4606      	mov	r6, r0
 8006aca:	460d      	mov	r5, r1
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];

  if (sdup == NULL)
 8006acc:	b1b4      	cbz	r4, 8006afc <sduDataTransmitted+0x3c>
 8006ace:	2720      	movs	r7, #32
 8006ad0:	f387 8811 	msr	BASEPRI, r7
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8006ad4:	2108      	movs	r1, #8
 8006ad6:	1d20      	adds	r0, r4, #4
 8006ad8:	f7fb fa42 	bl	8001f60 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8006adc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006ade:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006ae0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006ae2:	1a8b      	subs	r3, r1, r2
    return;

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
 8006ae4:	1a1b      	subs	r3, r3, r0
 8006ae6:	d119      	bne.n	8006b1c <sduDataTransmitted+0x5c>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8006ae8:	1ca9      	adds	r1, r5, #2
 8006aea:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 8006aee:	6842      	ldr	r2, [r0, #4]
 8006af0:	6953      	ldr	r3, [r2, #20]
 8006af2:	6859      	ldr	r1, [r3, #4]
 8006af4:	b919      	cbnz	r1, 8006afe <sduDataTransmitted+0x3e>
 8006af6:	2300      	movs	r3, #0
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           !(usbp->epc[ep]->in_state->txsize &
             (usbp->epc[ep]->in_maxsize - 1))) {
 8006afe:	8a12      	ldrh	r2, [r2, #16]
 8006b00:	1e53      	subs	r3, r2, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8006b02:	400b      	ands	r3, r1
 8006b04:	d1f7      	bne.n	8006af6 <sduDataTransmitted+0x36>
 8006b06:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006b0a:	6840      	ldr	r0, [r0, #4]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 8006b0c:	3430      	adds	r4, #48	; 0x30
 8006b0e:	6942      	ldr	r2, [r0, #20]

  isp->txqueued           = TRUE;
 8006b10:	2101      	movs	r1, #1
 8006b12:	7011      	strb	r1, [r2, #0]
  isp->mode.queue.txqueue = oqp;
 8006b14:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 8006b16:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 8006b18:	6093      	str	r3, [r2, #8]
 8006b1a:	e00c      	b.n	8006b36 <sduDataTransmitted+0x76>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f382 8811 	msr	BASEPRI, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006b22:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8006b26:	68c1      	ldr	r1, [r0, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 8006b28:	3430      	adds	r4, #48	; 0x30
 8006b2a:	6949      	ldr	r1, [r1, #20]

  isp->txqueued           = TRUE;
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	7008      	strb	r0, [r1, #0]
  isp->mode.queue.txqueue = oqp;
 8006b30:	60cc      	str	r4, [r1, #12]
  isp->txsize             = n;
 8006b32:	604b      	str	r3, [r1, #4]
  isp->txcnt              = 0;
 8006b34:	608a      	str	r2, [r1, #8]

  usb_lld_prepare_transmit(usbp, ep);
 8006b36:	4630      	mov	r0, r6
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7fe f8e9 	bl	8004d10 <usb_lld_prepare_transmit>
 8006b3e:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
 8006b42:	4630      	mov	r0, r6
 8006b44:	4629      	mov	r1, r5
 8006b46:	f7ff f8c3 	bl	8005cd0 <usbStartTransmitI>
 8006b4a:	e7d4      	b.n	8006af6 <sduDataTransmitted+0x36>
 8006b4c:	f3af 8000 	nop.w

08006b50 <dyn1_setup.8088>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006b50:	f241 43c0 	movw	r3, #5312	; 0x14c0
 8006b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8006b58:	f241 72e8 	movw	r2, #6120	; 0x17e8
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8006b5c:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006b5e:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 8006b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8006b64:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8006b68:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006b6c:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 8006b6e:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8006b70:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8006b72:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8006b74:	6054      	str	r4, [r2, #4]
 8006b76:	6158      	str	r0, [r3, #20]
 8006b78:	6118      	str	r0, [r3, #16]
 8006b7a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8006b7c:	bc10      	pop	{r4}
 8006b7e:	4770      	bx	lr

08006b80 <dyn3_setup.8086>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006b80:	f241 43c0 	movw	r3, #5312	; 0x14c0
 8006b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8006b88:	f241 72e8 	movw	r2, #6120	; 0x17e8
    ftp = chRegNextThread(ftp);
  } while (ftp != NULL);
  return found;
}

static void dyn3_setup(void) {
 8006b8c:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006b8e:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 8006b90:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006b94:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8006b98:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006b9c:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 8006b9e:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8006ba0:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8006ba2:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8006ba4:	6054      	str	r4, [r2, #4]
 8006ba6:	6158      	str	r0, [r3, #20]
 8006ba8:	6118      	str	r0, [r3, #16]
 8006baa:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8006bac:	bc10      	pop	{r4}
 8006bae:	4770      	bx	lr

08006bb0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8006bb0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8006bb4:	b510      	push	{r4, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8006bb6:	2b03      	cmp	r3, #3
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8006bb8:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 8006bba:	d031      	beq.n	8006c20 <_usb_ep0out+0x70>
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d01d      	beq.n	8006bfc <_usb_ep0out+0x4c>
 8006bc0:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006bc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006bc8:	6819      	ldr	r1, [r3, #0]
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006bca:	6862      	ldr	r2, [r4, #4]
 8006bcc:	f421 40f0 	bic.w	r0, r1, #30720	; 0x7800
 8006bd0:	f020 0140 	bic.w	r1, r0, #64	; 0x40
 8006bd4:	f081 0010 	eor.w	r0, r1, #16
 8006bd8:	6018      	str	r0, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	f421 4090 	bic.w	r0, r1, #18432	; 0x4800
 8006be2:	f020 0170 	bic.w	r1, r0, #112	; 0x70
 8006be6:	f481 5080 	eor.w	r0, r1, #4096	; 0x1000
 8006bea:	6018      	str	r0, [r3, #0]
 8006bec:	b112      	cbz	r2, 8006bf4 <_usb_ep0out+0x44>
 8006bee:	4620      	mov	r0, r4
 8006bf0:	2105      	movs	r1, #5
 8006bf2:	4790      	blx	r2
  usbp->ep0state = USB_EP0_ERROR;
 8006bf4:	2306      	movs	r3, #6
 8006bf6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8006bfa:	bd10      	pop	{r4, pc}
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 8006bfc:	2100      	movs	r1, #0

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8006bfe:	2205      	movs	r2, #5
 8006c00:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 8006c04:	460a      	mov	r2, r1
 8006c06:	f7fe f8db 	bl	8004dc0 <usbPrepareTransmit.constprop.7>
 8006c0a:	2020      	movs	r0, #32
 8006c0c:	f380 8811 	msr	BASEPRI, r0
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0);
 8006c10:	2100      	movs	r1, #0
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff f85c 	bl	8005cd0 <usbStartTransmitI>
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f381 8811 	msr	BASEPRI, r1
 8006c1e:	bd10      	pop	{r4, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0)
 8006c20:	68c3      	ldr	r3, [r0, #12]
 8006c22:	699a      	ldr	r2, [r3, #24]
 8006c24:	6891      	ldr	r1, [r2, #8]
 8006c26:	2900      	cmp	r1, #0
 8006c28:	d1ca      	bne.n	8006bc0 <_usb_ep0out+0x10>
      break;
#endif
    if (usbp->ep0endcb != NULL)
 8006c2a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006c2c:	b103      	cbz	r3, 8006c30 <_usb_ep0out+0x80>
      usbp->ep0endcb(usbp);
 8006c2e:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006c30:	2000      	movs	r0, #0
 8006c32:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 8006c36:	bd10      	pop	{r4, pc}
 8006c38:	f3af 8000 	nop.w
 8006c3c:	f3af 8000 	nop.w

08006c40 <chvprintf.4620>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	b091      	sub	sp, #68	; 0x44
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8006c46:	ab0a      	add	r3, sp, #40	; 0x28
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8006c48:	f10d 0429 	add.w	r4, sp, #41	; 0x29
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8006c4c:	9303      	str	r3, [sp, #12]
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8006c4e:	9402      	str	r4, [sp, #8]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006c50:	468b      	mov	fp, r1
 8006c52:	4692      	mov	sl, r2
 8006c54:	9902      	ldr	r1, [sp, #8]
 8006c56:	9a03      	ldr	r2, [sp, #12]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006c58:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	1a8c      	subs	r4, r1, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8006c60:	2000      	movs	r0, #0

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006c62:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8006c66:	9004      	str	r0, [sp, #16]
 8006c68:	9407      	str	r4, [sp, #28]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006c6a:	9306      	str	r3, [sp, #24]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006c6c:	465c      	mov	r4, fp
 8006c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
 8006c72:	b171      	cbz	r1, 8006c92 <chvprintf.4620+0x52>
      return n;
    if (c != '%') {
 8006c74:	2925      	cmp	r1, #37	; 0x25
 8006c76:	d010      	beq.n	8006c9a <chvprintf.4620+0x5a>
      chSequentialStreamPut(chp, (uint8_t)c);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006c80:	46a3      	mov	fp, r4
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8006c82:	9904      	ldr	r1, [sp, #16]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006c84:	465c      	mov	r4, fp
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8006c86:	1c48      	adds	r0, r1, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 8006c88:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 8006c8c:	9004      	str	r0, [sp, #16]
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
    if (c == 0)
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	d1f0      	bne.n	8006c74 <chvprintf.4620+0x34>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8006c92:	9804      	ldr	r0, [sp, #16]
 8006c94:	b011      	add	sp, #68	; 0x44
 8006c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8006c9a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8006c9e:	2b2d      	cmp	r3, #45	; 0x2d
 8006ca0:	bf03      	ittte	eq
 8006ca2:	f89b 3002 	ldrbeq.w	r3, [fp, #2]
      fmt++;
 8006ca6:	f10b 0402 	addeq.w	r4, fp, #2
      left_align = TRUE;
 8006caa:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8006cae:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8006cb2:	2b30      	cmp	r3, #48	; 0x30
 8006cb4:	f000 81d0 	beq.w	8007058 <chvprintf.4620+0x418>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8006cb8:	f04f 0820 	mov.w	r8, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 8006cbc:	46a3      	mov	fp, r4
    }
    width = 0;
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	e009      	b.n	8006cd6 <chvprintf.4620+0x96>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8006cc2:	f89a 5000 	ldrb.w	r5, [sl]
 8006cc6:	f10a 0a04 	add.w	sl, sl, #4
      else
        break;
      width = width * 10 + c;
 8006cca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006cce:	f89b 3000 	ldrb.w	r3, [fp]
 8006cd2:	eb05 0646 	add.w	r6, r5, r6, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8006cd6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006cda:	b2ed      	uxtb	r5, r5
 8006cdc:	2d09      	cmp	r5, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8006cde:	f10b 0b01 	add.w	fp, fp, #1
      if (c >= '0' && c <= '9')
 8006ce2:	d9f2      	bls.n	8006cca <chvprintf.4620+0x8a>
        c -= '0';
      else if (c == '*')
 8006ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce6:	d0ec      	beq.n	8006cc2 <chvprintf.4620+0x82>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8006ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cea:	f000 819f 	beq.w	800702c <chvprintf.4620+0x3ec>
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
 8006cee:	2500      	movs	r5, #0
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8006cf0:	2b6c      	cmp	r3, #108	; 0x6c
 8006cf2:	f000 8192 	beq.w	800701a <chvprintf.4620+0x3da>
 8006cf6:	2b4c      	cmp	r3, #76	; 0x4c
 8006cf8:	f000 818f 	beq.w	800701a <chvprintf.4620+0x3da>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8006cfc:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8006d00:	2934      	cmp	r1, #52	; 0x34
 8006d02:	f200 8174 	bhi.w	8006fee <chvprintf.4620+0x3ae>
 8006d06:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006d0a:	017d      	.short	0x017d
 8006d0c:	01720172 	.word	0x01720172
 8006d10:	01720172 	.word	0x01720172
 8006d14:	0172017d 	.word	0x0172017d
 8006d18:	01720172 	.word	0x01720172
 8006d1c:	01720172 	.word	0x01720172
 8006d20:	01720178 	.word	0x01720178
 8006d24:	01720172 	.word	0x01720172
 8006d28:	01720172 	.word	0x01720172
 8006d2c:	01720186 	.word	0x01720186
 8006d30:	01640172 	.word	0x01640172
 8006d34:	01720172 	.word	0x01720172
 8006d38:	01720172 	.word	0x01720172
 8006d3c:	01720172 	.word	0x01720172
 8006d40:	01720172 	.word	0x01720172
 8006d44:	01720172 	.word	0x01720172
 8006d48:	017d00c6 	.word	0x017d00c6
 8006d4c:	006b0172 	.word	0x006b0172
 8006d50:	01720172 	.word	0x01720172
 8006d54:	0172017d 	.word	0x0172017d
 8006d58:	01720172 	.word	0x01720172
 8006d5c:	01720172 	.word	0x01720172
 8006d60:	01720178 	.word	0x01720178
 8006d64:	01720172 	.word	0x01720172
 8006d68:	01720035 	.word	0x01720035
 8006d6c:	01720186 	.word	0x01720186
 8006d70:	01640172 	.word	0x01640172
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8006d74:	f8da 2000 	ldr.w	r2, [sl]
        s = "(null)";
 8006d78:	48a1      	ldr	r0, [pc, #644]	; (8007000 <chvprintf.4620+0x3c0>)
      if (precision == 0)
        precision = 32767;
 8006d7a:	f647 73ff 	movw	r3, #32767	; 0x7fff
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	bf08      	it	eq
 8006d82:	4602      	moveq	r2, r0
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006d84:	7814      	ldrb	r4, [r2, #0]
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8006d86:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	bf08      	it	eq
 8006d8e:	461d      	moveq	r5, r3
      for (p = s; *p && (--precision >= 0); p++)
 8006d90:	2c00      	cmp	r4, #0
 8006d92:	f000 8188 	beq.w	80070a6 <chvprintf.4620+0x466>
 8006d96:	7854      	ldrb	r4, [r2, #1]
 8006d98:	1e69      	subs	r1, r5, #1
 8006d9a:	f001 0001 	and.w	r0, r1, #1
 8006d9e:	18ad      	adds	r5, r5, r2
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006da0:	1c51      	adds	r1, r2, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006da2:	b1c4      	cbz	r4, 8006dd6 <chvprintf.4620+0x196>
 8006da4:	428d      	cmp	r5, r1
 8006da6:	460b      	mov	r3, r1
 8006da8:	d006      	beq.n	8006db8 <chvprintf.4620+0x178>
 8006daa:	b178      	cbz	r0, 8006dcc <chvprintf.4620+0x18c>
 8006dac:	784c      	ldrb	r4, [r1, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006dae:	3101      	adds	r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006db0:	b18c      	cbz	r4, 8006dd6 <chvprintf.4620+0x196>
 8006db2:	428d      	cmp	r5, r1
 8006db4:	460b      	mov	r3, r1
 8006db6:	d109      	bne.n	8006dcc <chvprintf.4620+0x18c>
 8006db8:	1aad      	subs	r5, r5, r2
 8006dba:	9505      	str	r5, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8006dbc:	f04f 0820 	mov.w	r8, #32
 8006dc0:	e074      	b.n	8006eac <chvprintf.4620+0x26c>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006dc2:	784c      	ldrb	r4, [r1, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006dc4:	3101      	adds	r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006dc6:	b134      	cbz	r4, 8006dd6 <chvprintf.4620+0x196>
 8006dc8:	429d      	cmp	r5, r3
 8006dca:	d0f5      	beq.n	8006db8 <chvprintf.4620+0x178>
 8006dcc:	785c      	ldrb	r4, [r3, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006dce:	1c59      	adds	r1, r3, #1
 8006dd0:	1c4b      	adds	r3, r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8006dd2:	2c00      	cmp	r4, #0
 8006dd4:	d1f5      	bne.n	8006dc2 <chvprintf.4620+0x182>
 8006dd6:	1a89      	subs	r1, r1, r2
 8006dd8:	9105      	str	r1, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8006dda:	f04f 0820 	mov.w	r8, #32
 8006dde:	e065      	b.n	8006eac <chvprintf.4620+0x26c>
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8006de0:	f10a 0a07 	add.w	sl, sl, #7
 8006de4:	f02a 0207 	bic.w	r2, sl, #7
 8006de8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006dec:	f102 0a08 	add.w	sl, r2, #8
 8006df0:	f7fa f85e 	bl	8000eb0 <__aeabi_d2f>
      if (f < 0) {
 8006df4:	2100      	movs	r1, #0
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8006df6:	4604      	mov	r4, r0
      if (f < 0) {
 8006df8:	f7fa fb58 	bl	80014ac <__aeabi_fcmplt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f040 8142 	bne.w	8007086 <chvprintf.4620+0x446>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8006e02:	ab0a      	add	r3, sp, #40	; 0x28
                                      10000000, 100000000, 1000000000};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8006e04:	3d01      	subs	r5, #1
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8006e06:	f24a 31e0 	movw	r1, #41952	; 0xa3e0
 8006e0a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006e0e:	2d08      	cmp	r5, #8
 8006e10:	bf28      	it	cs
 8006e12:	2508      	movcs	r5, #8
 8006e14:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]

  l = (long)num;
 8006e18:	4620      	mov	r0, r4
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8006e1a:	9205      	str	r2, [sp, #20]

  l = (long)num;
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	f7fa fb6f 	bl	8001500 <__aeabi_f2iz>
  p = long_to_string_with_divisor(p, l, 10, 0);
 8006e22:	9b01      	ldr	r3, [sp, #4]

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8006e24:	4605      	mov	r5, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 8006e26:	220a      	movs	r2, #10
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f7fe ff17 	bl	8005c60 <long_to_string_with_divisor.10549>
  *p++ = '.';
 8006e32:	4684      	mov	ip, r0
 8006e34:	202e      	movs	r0, #46	; 0x2e
 8006e36:	f80c 0b01 	strb.w	r0, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f8cd c004 	str.w	ip, [sp, #4]
 8006e40:	f7f9 fd82 	bl	8000948 <__aeabi_f2d>
 8006e44:	e9cd 0108 	strd	r0, r1, [sp, #32]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f7f9 fd6b 	bl	8000924 <__aeabi_i2d>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e56:	f7f9 fc17 	bl	8000688 <__aeabi_dsub>
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	9805      	ldr	r0, [sp, #20]
 8006e5e:	460d      	mov	r5, r1
 8006e60:	f7f9 fd50 	bl	8000904 <__aeabi_ui2d>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4620      	mov	r0, r4
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f7f9 fdc0 	bl	80009f0 <__aeabi_dmul>
 8006e70:	f7f9 ffd6 	bl	8000e20 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e74:	9a05      	ldr	r2, [sp, #20]
 8006e76:	9b06      	ldr	r3, [sp, #24]
 8006e78:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006e7c:	fba3 2402 	umull	r2, r4, r3, r2
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8006e80:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e82:	220a      	movs	r2, #10
 8006e84:	4660      	mov	r0, ip
 8006e86:	08e3      	lsrs	r3, r4, #3
 8006e88:	f7fe feea 	bl	8005c60 <long_to_string_with_divisor.10549>
 8006e8c:	9903      	ldr	r1, [sp, #12]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8006e8e:	aa0a      	add	r2, sp, #40	; 0x28
 8006e90:	1a40      	subs	r0, r0, r1
 8006e92:	9005      	str	r0, [sp, #20]
 8006e94:	e00a      	b.n	8006eac <chvprintf.4620+0x26c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8006e96:	f8da 2000 	ldr.w	r2, [sl]
 8006e9a:	9b07      	ldr	r3, [sp, #28]
 8006e9c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	f10a 0a04 	add.w	sl, sl, #4
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8006ea6:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8006eaa:	aa0a      	add	r2, sp, #40	; 0x28
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8006eac:	9b05      	ldr	r3, [sp, #20]
 8006eae:	1af6      	subs	r6, r6, r3
 8006eb0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	d133      	bne.n	8006f22 <chvprintf.4620+0x2e2>
      width = -width;
 8006eba:	4276      	negs	r6, r6
    if (width < 0) {
 8006ebc:	2e00      	cmp	r6, #0
 8006ebe:	d030      	beq.n	8006f22 <chvprintf.4620+0x2e2>
      if (*s == '-' && filler == '0') {
 8006ec0:	7811      	ldrb	r1, [r2, #0]
 8006ec2:	292d      	cmp	r1, #45	; 0x2d
 8006ec4:	f000 80cd 	beq.w	8007062 <chvprintf.4620+0x422>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8006ec8:	6838      	ldr	r0, [r7, #0]
 8006eca:	4641      	mov	r1, r8
 8006ecc:	6883      	ldr	r3, [r0, #8]
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	43f4      	mvns	r4, r6
 8006ed4:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8006ed6:	f116 0901 	adds.w	r9, r6, #1
 8006eda:	f004 0401 	and.w	r4, r4, #1
 8006ede:	9a01      	ldr	r2, [sp, #4]
 8006ee0:	d01b      	beq.n	8006f1a <chvprintf.4620+0x2da>
 8006ee2:	b14c      	cbz	r4, 8006ef8 <chvprintf.4620+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	688b      	ldr	r3, [r1, #8]
 8006eea:	9201      	str	r2, [sp, #4]
 8006eec:	4641      	mov	r1, r8
 8006eee:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8006ef0:	f119 0901 	adds.w	r9, r9, #1
 8006ef4:	9a01      	ldr	r2, [sp, #4]
 8006ef6:	d010      	beq.n	8006f1a <chvprintf.4620+0x2da>
 8006ef8:	4615      	mov	r5, r2
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8006efa:	6838      	ldr	r0, [r7, #0]
 8006efc:	4641      	mov	r1, r8
 8006efe:	6884      	ldr	r4, [r0, #8]
 8006f00:	4638      	mov	r0, r7
 8006f02:	47a0      	blx	r4
 8006f04:	6839      	ldr	r1, [r7, #0]
        n++;
      } while (++width != 0);
 8006f06:	f109 0401 	add.w	r4, r9, #1
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8006f0a:	688b      	ldr	r3, [r1, #8]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	4641      	mov	r1, r8
 8006f10:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8006f12:	f114 0901 	adds.w	r9, r4, #1
 8006f16:	d1f0      	bne.n	8006efa <chvprintf.4620+0x2ba>
 8006f18:	462a      	mov	r2, r5
 8006f1a:	9804      	ldr	r0, [sp, #16]
 8006f1c:	1b86      	subs	r6, r0, r6
 8006f1e:	9604      	str	r6, [sp, #16]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006f20:	2600      	movs	r6, #0
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8006f22:	9905      	ldr	r1, [sp, #20]
 8006f24:	2900      	cmp	r1, #0
 8006f26:	dd2e      	ble.n	8006f86 <chvprintf.4620+0x346>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8006f28:	4615      	mov	r5, r2
 8006f2a:	683b      	ldr	r3, [r7, #0]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006f2c:	1854      	adds	r4, r2, r1
 8006f2e:	ea6f 0902 	mvn.w	r9, r2
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8006f32:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006f36:	eb04 0e09 	add.w	lr, r4, r9
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f00e 0901 	and.w	r9, lr, #1
 8006f42:	4790      	blx	r2
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8006f44:	42a5      	cmp	r5, r4
 8006f46:	d01a      	beq.n	8006f7e <chvprintf.4620+0x33e>
 8006f48:	f1b9 0f00 	cmp.w	r9, #0
 8006f4c:	d007      	beq.n	8006f5e <chvprintf.4620+0x31e>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8006f4e:	6838      	ldr	r0, [r7, #0]
 8006f50:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006f54:	6883      	ldr	r3, [r0, #8]
 8006f56:	4638      	mov	r0, r7
 8006f58:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8006f5a:	42a5      	cmp	r5, r4
 8006f5c:	d00f      	beq.n	8006f7e <chvprintf.4620+0x33e>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	46a9      	mov	r9, r5
 8006f62:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006f66:	6893      	ldr	r3, [r2, #8]
 8006f68:	4638      	mov	r0, r7
 8006f6a:	4798      	blx	r3
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	7869      	ldrb	r1, [r5, #1]
 8006f70:	6882      	ldr	r2, [r0, #8]
 8006f72:	f109 0501 	add.w	r5, r9, #1
 8006f76:	4638      	mov	r0, r7
 8006f78:	4790      	blx	r2
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8006f7a:	42a5      	cmp	r5, r4
 8006f7c:	d1ef      	bne.n	8006f5e <chvprintf.4620+0x31e>
 8006f7e:	9904      	ldr	r1, [sp, #16]
 8006f80:	9c05      	ldr	r4, [sp, #20]
 8006f82:	190b      	adds	r3, r1, r4
 8006f84:	9304      	str	r3, [sp, #16]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	f43f ae70 	beq.w	8006c6c <chvprintf.4620+0x2c>
      chSequentialStreamPut(chp, (uint8_t)filler);
 8006f8c:	683d      	ldr	r5, [r7, #0]
 8006f8e:	1e73      	subs	r3, r6, #1
 8006f90:	68aa      	ldr	r2, [r5, #8]
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8006f92:	461c      	mov	r4, r3
      chSequentialStreamPut(chp, (uint8_t)filler);
 8006f94:	4638      	mov	r0, r7
 8006f96:	4641      	mov	r1, r8
 8006f98:	f003 0501 	and.w	r5, r3, #1
 8006f9c:	4790      	blx	r2
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8006f9e:	b1a4      	cbz	r4, 8006fca <chvprintf.4620+0x38a>
 8006fa0:	b135      	cbz	r5, 8006fb0 <chvprintf.4620+0x370>
      chSequentialStreamPut(chp, (uint8_t)filler);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	688b      	ldr	r3, [r1, #8]
 8006fa8:	4641      	mov	r1, r8
 8006faa:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8006fac:	3c01      	subs	r4, #1
 8006fae:	d00c      	beq.n	8006fca <chvprintf.4620+0x38a>
      chSequentialStreamPut(chp, (uint8_t)filler);
 8006fb0:	6838      	ldr	r0, [r7, #0]
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	6882      	ldr	r2, [r0, #8]
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	4790      	blx	r2
 8006fba:	6839      	ldr	r1, [r7, #0]
      n++;
      width--;
 8006fbc:	3c01      	subs	r4, #1
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
      chSequentialStreamPut(chp, (uint8_t)filler);
 8006fbe:	688b      	ldr	r3, [r1, #8]
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8006fc6:	3c01      	subs	r4, #1
 8006fc8:	d1f2      	bne.n	8006fb0 <chvprintf.4620+0x370>
 8006fca:	9804      	ldr	r0, [sp, #16]
 8006fcc:	1832      	adds	r2, r6, r0
 8006fce:	9204      	str	r2, [sp, #16]
 8006fd0:	e64c      	b.n	8006c6c <chvprintf.4620+0x2c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8006fd2:	2210      	movs	r2, #16
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8006fd4:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8006fd8:	a80a      	add	r0, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8006fda:	f10a 0a04 	add.w	sl, sl, #4
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f7fe fe3e 	bl	8005c60 <long_to_string_with_divisor.10549>
 8006fe4:	9903      	ldr	r1, [sp, #12]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8006fe6:	aa0a      	add	r2, sp, #40	; 0x28
 8006fe8:	1a40      	subs	r0, r0, r1
 8006fea:	9005      	str	r0, [sp, #20]
 8006fec:	e75e      	b.n	8006eac <chvprintf.4620+0x26c>
 8006fee:	9a07      	ldr	r2, [sp, #28]
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8006ff0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8006ff4:	9205      	str	r2, [sp, #20]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8006ff6:	aa0a      	add	r2, sp, #40	; 0x28
 8006ff8:	e758      	b.n	8006eac <chvprintf.4620+0x26c>
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	e7ea      	b.n	8006fd4 <chvprintf.4620+0x394>
 8006ffe:	bf00      	nop
 8007000:	0800a470 	.word	0x0800a470
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8007004:	f8da 1000 	ldr.w	r1, [sl]
 8007008:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 800700c:	2900      	cmp	r1, #0
 800700e:	db42      	blt.n	8007096 <chvprintf.4620+0x456>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8007010:	a80a      	add	r0, sp, #40	; 0x28
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8007012:	220a      	movs	r2, #10
 8007014:	e7e3      	b.n	8006fde <chvprintf.4620+0x39e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8007016:	220a      	movs	r2, #10
 8007018:	e7dc      	b.n	8006fd4 <chvprintf.4620+0x394>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
 800701a:	f89b 4000 	ldrb.w	r4, [fp]
 800701e:	2c00      	cmp	r4, #0
 8007020:	f43f ae6c 	beq.w	8006cfc <chvprintf.4620+0xbc>
        c = *fmt++;
 8007024:	f10b 0b01 	add.w	fp, fp, #1
 8007028:	4623      	mov	r3, r4
 800702a:	e667      	b.n	8006cfc <chvprintf.4620+0xbc>
 800702c:	4659      	mov	r1, fp
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 800702e:	2500      	movs	r5, #0
 8007030:	e005      	b.n	800703e <chvprintf.4620+0x3fe>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8007032:	f89a 4000 	ldrb.w	r4, [sl]
 8007036:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 800703a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800703e:	f811 3b01 	ldrb.w	r3, [r1], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8007042:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8007046:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800704a:	b2d4      	uxtb	r4, r2
 800704c:	2c09      	cmp	r4, #9
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 800704e:	468b      	mov	fp, r1
        if (c >= '0' && c <= '9')
 8007050:	d9f3      	bls.n	800703a <chvprintf.4620+0x3fa>
          c -= '0';
        else if (c == '*')
 8007052:	2b2a      	cmp	r3, #42	; 0x2a
 8007054:	d0ed      	beq.n	8007032 <chvprintf.4620+0x3f2>
 8007056:	e64b      	b.n	8006cf0 <chvprintf.4620+0xb0>
 8007058:	7863      	ldrb	r3, [r4, #1]
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 800705a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 800705e:	3401      	adds	r4, #1
 8007060:	e62c      	b.n	8006cbc <chvprintf.4620+0x7c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8007062:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8007066:	f47f af2f 	bne.w	8006ec8 <chvprintf.4620+0x288>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800706a:	683c      	ldr	r4, [r7, #0]
 800706c:	4638      	mov	r0, r7
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	9201      	str	r2, [sp, #4]
 8007072:	4798      	blx	r3
 8007074:	9901      	ldr	r1, [sp, #4]
        n++;
 8007076:	9804      	ldr	r0, [sp, #16]
        i--;
 8007078:	9b05      	ldr	r3, [sp, #20]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800707a:	1c4a      	adds	r2, r1, #1
        n++;
 800707c:	1c44      	adds	r4, r0, #1
        i--;
 800707e:	1e59      	subs	r1, r3, #1
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8007080:	9404      	str	r4, [sp, #16]
        i--;
 8007082:	9105      	str	r1, [sp, #20]
 8007084:	e720      	b.n	8006ec8 <chvprintf.4620+0x288>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8007086:	202d      	movs	r0, #45	; 0x2d
        f = -f;
 8007088:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800708c:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8007090:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8007094:	e6b6      	b.n	8006e04 <chvprintf.4620+0x1c4>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8007096:	242d      	movs	r4, #45	; 0x2d
 8007098:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        l = -l;
 800709c:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800709e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80070a2:	220a      	movs	r2, #10
 80070a4:	e79b      	b.n	8006fde <chvprintf.4620+0x39e>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80070a6:	9405      	str	r4, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80070a8:	f04f 0820 	mov.w	r8, #32
 80070ac:	e6fe      	b.n	8006eac <chvprintf.4620+0x26c>
 80070ae:	bf00      	nop

080070b0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80070b0:	b508      	push	{r3, lr}
 80070b2:	4601      	mov	r1, r0
 80070b4:	2320      	movs	r3, #32
 80070b6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80070ba:	2008      	movs	r0, #8
 80070bc:	f7fc fe40 	bl	8003d40 <chSchGoSleepTimeoutS>
 80070c0:	2000      	movs	r0, #0
 80070c2:	f380 8811 	msr	BASEPRI, r0
 80070c6:	bd08      	pop	{r3, pc}
 80070c8:	f3af 8000 	nop.w
 80070cc:	f3af 8000 	nop.w

080070d0 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 80070d0:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 80070d2:	4978      	ldr	r1, [pc, #480]	; (80072b4 <Reset_Handler+0x1e4>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 80070d4:	f381 8809 	msr	PSP, r1
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 80070d8:	2302      	movs	r3, #2
 80070da:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 80070de:	f3bf 8f6f 	isb	sy
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80070e2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80070e6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80070ea:	6822      	ldr	r2, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80070ec:	4620      	mov	r0, r4
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80070ee:	f042 0501 	orr.w	r5, r2, #1
 80070f2:	6025      	str	r5, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80070f4:	6806      	ldr	r6, [r0, #0]
 80070f6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80070fa:	07b5      	lsls	r5, r6, #30
 80070fc:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8007100:	d5f8      	bpl.n	80070f4 <Reset_Handler+0x24>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8007102:	683b      	ldr	r3, [r7, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8007104:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8007106:	f003 04f9 	and.w	r4, r3, #249	; 0xf9
 800710a:	603c      	str	r4, [r7, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800710c:	4638      	mov	r0, r7
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800710e:	607a      	str	r2, [r7, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8007110:	6845      	ldr	r5, [r0, #4]
 8007112:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8007116:	f015 0f0c 	tst.w	r5, #12
 800711a:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800711e:	d1f7      	bne.n	8007110 <Reset_Handler+0x40>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8007120:	6837      	ldr	r7, [r6, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8007122:	4630      	mov	r0, r6
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8007124:	f447 3380 	orr.w	r3, r7, #65536	; 0x10000
 8007128:	6033      	str	r3, [r6, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800712a:	6804      	ldr	r4, [r0, #0]
 800712c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8007130:	03a4      	lsls	r4, r4, #14
 8007132:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007136:	d5f8      	bpl.n	800712a <Reset_Handler+0x5a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8007138:	686a      	ldr	r2, [r5, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800713a:	462e      	mov	r6, r5
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800713c:	f442 2710 	orr.w	r7, r2, #589824	; 0x90000
 8007140:	606f      	str	r7, [r5, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8007142:	6828      	ldr	r0, [r5, #0]
 8007144:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
 8007148:	602b      	str	r3, [r5, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800714a:	6834      	ldr	r4, [r6, #0]
 800714c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8007150:	01a2      	lsls	r2, r4, #6
 8007152:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007156:	d5f8      	bpl.n	800714a <Reset_Handler+0x7a>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8007158:	f44f 46c8 	mov.w	r6, #25600	; 0x6400
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800715c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8007160:	f2c0 0649 	movt	r6, #73	; 0x49
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8007164:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007168:	2711      	movs	r7, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800716a:	606e      	str	r6, [r5, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800716c:	6017      	str	r7, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800716e:	6868      	ldr	r0, [r5, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8007170:	462c      	mov	r4, r5
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8007172:	f040 0302 	orr.w	r3, r0, #2
 8007176:	606b      	str	r3, [r5, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8007178:	6865      	ldr	r5, [r4, #4]
 800717a:	f005 060c 	and.w	r6, r5, #12
 800717e:	2e08      	cmp	r6, #8
 8007180:	d1fa      	bne.n	8007178 <Reset_Handler+0xa8>
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8007182:	4f4d      	ldr	r7, [pc, #308]	; (80072b8 <Reset_Handler+0x1e8>)
 8007184:	4a4d      	ldr	r2, [pc, #308]	; (80072bc <Reset_Handler+0x1ec>)
 8007186:	4297      	cmp	r7, r2
 8007188:	d218      	bcs.n	80071bc <Reset_Handler+0xec>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800718a:	1cd0      	adds	r0, r2, #3
 800718c:	1d3d      	adds	r5, r7, #4
 800718e:	1b44      	subs	r4, r0, r5
 8007190:	f024 0603 	bic.w	r6, r4, #3
 8007194:	463b      	mov	r3, r7
 8007196:	19f7      	adds	r7, r6, r7
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8007198:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800719c:	42bb      	cmp	r3, r7
 800719e:	6018      	str	r0, [r3, #0]
 80071a0:	f3c6 0280 	ubfx	r2, r6, #2, #1
 80071a4:	d00a      	beq.n	80071bc <Reset_Handler+0xec>
 80071a6:	b11a      	cbz	r2, 80071b0 <Reset_Handler+0xe0>
 80071a8:	42bd      	cmp	r5, r7
 80071aa:	462b      	mov	r3, r5
 80071ac:	6028      	str	r0, [r5, #0]
 80071ae:	d005      	beq.n	80071bc <Reset_Handler+0xec>
 80071b0:	1d1d      	adds	r5, r3, #4
 80071b2:	6058      	str	r0, [r3, #4]
 80071b4:	3308      	adds	r3, #8
 80071b6:	42bb      	cmp	r3, r7
 80071b8:	6068      	str	r0, [r5, #4]
 80071ba:	d1f9      	bne.n	80071b0 <Reset_Handler+0xe0>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80071bc:	4e40      	ldr	r6, [pc, #256]	; (80072c0 <Reset_Handler+0x1f0>)
 80071be:	428e      	cmp	r6, r1
 80071c0:	d218      	bcs.n	80071f4 <Reset_Handler+0x124>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 80071c2:	4840      	ldr	r0, [pc, #256]	; (80072c4 <Reset_Handler+0x1f4>)
 80071c4:	1d34      	adds	r4, r6, #4
 80071c6:	1b07      	subs	r7, r0, r4
 80071c8:	f027 0203 	bic.w	r2, r7, #3
 80071cc:	4633      	mov	r3, r6
 80071ce:	1995      	adds	r5, r2, r6
#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80071d0:	f04f 3155 	mov.w	r1, #1431655765	; 0x55555555
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	f3c2 0680 	ubfx	r6, r2, #2, #1
 80071dc:	d00a      	beq.n	80071f4 <Reset_Handler+0x124>
 80071de:	b11e      	cbz	r6, 80071e8 <Reset_Handler+0x118>
 80071e0:	42ac      	cmp	r4, r5
 80071e2:	4623      	mov	r3, r4
 80071e4:	6021      	str	r1, [r4, #0]
 80071e6:	d005      	beq.n	80071f4 <Reset_Handler+0x124>
 80071e8:	1d1c      	adds	r4, r3, #4
 80071ea:	6059      	str	r1, [r3, #4]
 80071ec:	3308      	adds	r3, #8
 80071ee:	42ab      	cmp	r3, r5
 80071f0:	6061      	str	r1, [r4, #4]
 80071f2:	d1f9      	bne.n	80071e8 <Reset_Handler+0x118>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80071f4:	4f34      	ldr	r7, [pc, #208]	; (80072c8 <Reset_Handler+0x1f8>)
 80071f6:	4835      	ldr	r0, [pc, #212]	; (80072cc <Reset_Handler+0x1fc>)
 80071f8:	4287      	cmp	r7, r0
 80071fa:	d21b      	bcs.n	8007234 <Reset_Handler+0x164>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 80071fc:	1cc2      	adds	r2, r0, #3
 80071fe:	1d39      	adds	r1, r7, #4
 8007200:	1a55      	subs	r5, r2, r1
 8007202:	4833      	ldr	r0, [pc, #204]	; (80072d0 <Reset_Handler+0x200>)
 8007204:	f025 0403 	bic.w	r4, r5, #3
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
      *dp++ = *tp++;
 8007208:	6802      	ldr	r2, [r0, #0]
 800720a:	1d26      	adds	r6, r4, #4
 800720c:	2304      	movs	r3, #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800720e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8007210:	603a      	str	r2, [r7, #0]
 8007212:	f3c4 0580 	ubfx	r5, r4, #2, #1
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8007216:	d00d      	beq.n	8007234 <Reset_Handler+0x164>
 8007218:	b125      	cbz	r5, 8007224 <Reset_Handler+0x154>
      *dp++ = *tp++;
 800721a:	6844      	ldr	r4, [r0, #4]
 800721c:	2308      	movs	r3, #8
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800721e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8007220:	600c      	str	r4, [r1, #0]
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8007222:	d007      	beq.n	8007234 <Reset_Handler+0x164>
      *dp++ = *tp++;
 8007224:	581a      	ldr	r2, [r3, r0]
 8007226:	1d19      	adds	r1, r3, #4
 8007228:	51da      	str	r2, [r3, r7]
 800722a:	5845      	ldr	r5, [r0, r1]
 800722c:	3308      	adds	r3, #8
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800722e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8007230:	507d      	str	r5, [r7, r1]
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8007232:	d1f7      	bne.n	8007224 <Reset_Handler+0x154>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8007234:	4f27      	ldr	r7, [pc, #156]	; (80072d4 <Reset_Handler+0x204>)
 8007236:	4828      	ldr	r0, [pc, #160]	; (80072d8 <Reset_Handler+0x208>)
 8007238:	4287      	cmp	r7, r0
 800723a:	d217      	bcs.n	800726c <Reset_Handler+0x19c>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800723c:	1cc6      	adds	r6, r0, #3
 800723e:	1d3c      	adds	r4, r7, #4
 8007240:	1b33      	subs	r3, r6, r4
 8007242:	f023 0203 	bic.w	r2, r3, #3
 8007246:	4638      	mov	r0, r7
 8007248:	19d5      	adds	r5, r2, r7
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 800724a:	2100      	movs	r1, #0
 800724c:	42a8      	cmp	r0, r5
 800724e:	6039      	str	r1, [r7, #0]
 8007250:	f3c2 0780 	ubfx	r7, r2, #2, #1
 8007254:	d00a      	beq.n	800726c <Reset_Handler+0x19c>
 8007256:	b11f      	cbz	r7, 8007260 <Reset_Handler+0x190>
 8007258:	42ac      	cmp	r4, r5
 800725a:	4620      	mov	r0, r4
 800725c:	6021      	str	r1, [r4, #0]
 800725e:	d005      	beq.n	800726c <Reset_Handler+0x19c>
 8007260:	1d06      	adds	r6, r0, #4
 8007262:	6041      	str	r1, [r0, #4]
 8007264:	3008      	adds	r0, #8
 8007266:	42a8      	cmp	r0, r5
 8007268:	6071      	str	r1, [r6, #4]
 800726a:	d1f9      	bne.n	8007260 <Reset_Handler+0x190>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 800726c:	4d1b      	ldr	r5, [pc, #108]	; (80072dc <Reset_Handler+0x20c>)
 800726e:	4c1c      	ldr	r4, [pc, #112]	; (80072e0 <Reset_Handler+0x210>)
 8007270:	42a5      	cmp	r5, r4
 8007272:	d21c      	bcs.n	80072ae <Reset_Handler+0x1de>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 8007274:	1ce3      	adds	r3, r4, #3
 8007276:	1d2e      	adds	r6, r5, #4
 8007278:	1b9a      	subs	r2, r3, r6
 800727a:	0891      	lsrs	r1, r2, #2
 800727c:	1c4f      	adds	r7, r1, #1
 800727e:	2401      	movs	r4, #1
#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
      (*fpp)();
 8007280:	6828      	ldr	r0, [r5, #0]
 8007282:	ea01 0804 	and.w	r8, r1, r4
 8007286:	4780      	blx	r0

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8007288:	42bc      	cmp	r4, r7
 800728a:	d010      	beq.n	80072ae <Reset_Handler+0x1de>
 800728c:	f1b8 0f00 	cmp.w	r8, #0
 8007290:	d005      	beq.n	800729e <Reset_Handler+0x1ce>
      (*fpp)();
 8007292:	6833      	ldr	r3, [r6, #0]
 8007294:	2402      	movs	r4, #2
 8007296:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8007298:	42bc      	cmp	r4, r7
 800729a:	4635      	mov	r5, r6
 800729c:	d007      	beq.n	80072ae <Reset_Handler+0x1de>
      (*fpp)();
 800729e:	686e      	ldr	r6, [r5, #4]
 80072a0:	47b0      	blx	r6
 80072a2:	3402      	adds	r4, #2
 80072a4:	68aa      	ldr	r2, [r5, #8]
 80072a6:	4790      	blx	r2
 80072a8:	3508      	adds	r5, #8

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 80072aa:	42bc      	cmp	r4, r7
 80072ac:	d1f7      	bne.n	800729e <Reset_Handler+0x1ce>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 80072ae:	f7f8 ff47 	bl	8000140 <main.4378>
 80072b2:	bf00      	nop
 80072b4:	20000800 	.word	0x20000800
 80072b8:	20000000 	.word	0x20000000
 80072bc:	20000400 	.word	0x20000400
 80072c0:	20000400 	.word	0x20000400
 80072c4:	20000803 	.word	0x20000803
 80072c8:	20000800 	.word	0x20000800
 80072cc:	20000cf0 	.word	0x20000cf0
 80072d0:	0800b1b8 	.word	0x0800b1b8
 80072d4:	20000cf0 	.word	0x20000cf0
 80072d8:	20001fbc 	.word	0x20001fbc
 80072dc:	08000140 	.word	0x08000140
 80072e0:	08000140 	.word	0x08000140
 80072e4:	f3af 8000 	nop.w
 80072e8:	f3af 8000 	nop.w
 80072ec:	f3af 8000 	nop.w

080072f0 <chprintf.10400>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80072f0:	b40e      	push	{r1, r2, r3}
 80072f2:	b500      	push	{lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	ab03      	add	r3, sp, #12
 80072f8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80072fc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80072fe:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8007300:	f7ff fc9e 	bl	8006c40 <chvprintf.4620>
  va_end(ap);

  return formatted_bytes;
}
 8007304:	b002      	add	sp, #8
 8007306:	f85d eb04 	ldr.w	lr, [sp], #4
 800730a:	b003      	add	sp, #12
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop

08007310 <chprintf.10846>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8007310:	b40e      	push	{r1, r2, r3}
 8007312:	b500      	push	{lr}
 8007314:	b082      	sub	sp, #8
 8007316:	ab03      	add	r3, sp, #12
 8007318:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800731c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800731e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8007320:	f7ff fc8e 	bl	8006c40 <chvprintf.4620>
  va_end(ap);

  return formatted_bytes;
}
 8007324:	b002      	add	sp, #8
 8007326:	f85d eb04 	ldr.w	lr, [sp], #4
 800732a:	b003      	add	sp, #12
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop

08007330 <cmd_mem.10877>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007330:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8007332:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007334:	b083      	sub	sp, #12
 8007336:	4604      	mov	r4, r0
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8007338:	dd04      	ble.n	8007344 <cmd_mem.10877+0x14>
    chprintf(chp, "Usage: mem\r\n");
 800733a:	490f      	ldr	r1, [pc, #60]	; (8007378 <cmd_mem.10877+0x48>)
 800733c:	f7ff ffe8 	bl	8007310 <chprintf.10846>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 8007340:	b003      	add	sp, #12
 8007342:	bd30      	pop	{r4, r5, pc}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8007344:	a901      	add	r1, sp, #4
 8007346:	2000      	movs	r0, #0
 8007348:	f7fa fef2 	bl	8002130 <chHeapStatus>
 *
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  return (size_t)(endmem - nextmem);
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <cmd_mem.10877+0x4c>)
 800734e:	4605      	mov	r5, r0
 8007350:	480b      	ldr	r0, [pc, #44]	; (8007380 <cmd_mem.10877+0x50>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	6803      	ldr	r3, [r0, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8007356:	490b      	ldr	r1, [pc, #44]	; (8007384 <cmd_mem.10877+0x54>)
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff ffd8 	bl	8007310 <chprintf.10846>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8007360:	462a      	mov	r2, r5
 8007362:	4620      	mov	r0, r4
 8007364:	4908      	ldr	r1, [pc, #32]	; (8007388 <cmd_mem.10877+0x58>)
 8007366:	f7ff ffd3 	bl	8007310 <chprintf.10846>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 800736a:	4620      	mov	r0, r4
 800736c:	4907      	ldr	r1, [pc, #28]	; (800738c <cmd_mem.10877+0x5c>)
 800736e:	9a01      	ldr	r2, [sp, #4]
 8007370:	f7ff ffce 	bl	8007310 <chprintf.10846>
 8007374:	e7e4      	b.n	8007340 <cmd_mem.10877+0x10>
 8007376:	bf00      	nop
 8007378:	0800a478 	.word	0x0800a478
 800737c:	20000db4 	.word	0x20000db4
 8007380:	20000f40 	.word	0x20000f40
 8007384:	0800a488 	.word	0x0800a488
 8007388:	0800a4a8 	.word	0x0800a4a8
 800738c:	0800a4c0 	.word	0x0800a4c0

08007390 <cmd_test.10861>:
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007390:	b510      	push	{r4, lr}
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8007392:	2900      	cmp	r1, #0
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007394:	b082      	sub	sp, #8
 8007396:	4604      	mov	r4, r0
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8007398:	dd05      	ble.n	80073a6 <cmd_test.10861+0x16>
    chprintf(chp, "Usage: test\r\n");
 800739a:	490e      	ldr	r1, [pc, #56]	; (80073d4 <cmd_test.10861+0x44>)
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 800739c:	b002      	add	sp, #8
 800739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
 80073a2:	f7ff bfb5 	b.w	8007310 <chprintf.10846>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <cmd_test.10861+0x48>)
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 80073a8:	2000      	movs	r0, #0
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80073b0:	6892      	ldr	r2, [r2, #8]
 80073b2:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <cmd_test.10861+0x4c>)
 80073b4:	9400      	str	r4, [sp, #0]
 80073b6:	f7fa fffb 	bl	80023b0 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 80073ba:	b120      	cbz	r0, 80073c6 <cmd_test.10861+0x36>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 80073bc:	b002      	add	sp, #8
 80073be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 80073c2:	f7fa bf4d 	b.w	8002260 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80073c6:	4906      	ldr	r1, [pc, #24]	; (80073e0 <cmd_test.10861+0x50>)
 80073c8:	4620      	mov	r0, r4
    return;
  }
  chThdWait(tp);
}
 80073ca:	b002      	add	sp, #8
 80073cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80073d0:	f7ff bf9e 	b.w	8007310 <chprintf.10846>
 80073d4:	0800a4e0 	.word	0x0800a4e0
 80073d8:	20001e58 	.word	0x20001e58
 80073dc:	080074b1 	.word	0x080074b1
 80073e0:	0800a4f0 	.word	0x0800a4f0
 80073e4:	f3af 8000 	nop.w
 80073e8:	f3af 8000 	nop.w
 80073ec:	f3af 8000 	nop.w

080073f0 <cmd_write.10853>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 80073f0:	2900      	cmp	r1, #0
    return;
  }
  chThdWait(tp);
}

static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 80073f2:	b538      	push	{r3, r4, r5, lr}
 80073f4:	4604      	mov	r4, r0
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 80073f6:	dc15      	bgt.n	8007424 <cmd_write.10853+0x34>
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 80073f8:	4d0d      	ldr	r5, [pc, #52]	; (8007430 <cmd_write.10853+0x40>)
 80073fa:	e006      	b.n	800740a <cmd_write.10853+0x1a>
 80073fc:	6828      	ldr	r0, [r5, #0]
 80073fe:	490d      	ldr	r1, [pc, #52]	; (8007434 <cmd_write.10853+0x44>)
 8007400:	6803      	ldr	r3, [r0, #0]
 8007402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007406:	480a      	ldr	r0, [pc, #40]	; (8007430 <cmd_write.10853+0x40>)
 8007408:	4798      	blx	r3
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	2100      	movs	r1, #0
 800740e:	4620      	mov	r0, r4
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	4790      	blx	r2
 8007414:	3001      	adds	r0, #1
 8007416:	d0f1      	beq.n	80073fc <cmd_write.10853+0xc>
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8007418:	4907      	ldr	r1, [pc, #28]	; (8007438 <cmd_write.10853+0x48>)
 800741a:	4620      	mov	r0, r4
}
 800741c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 8007420:	f7ff bf76 	b.w	8007310 <chprintf.10846>
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 8007424:	4905      	ldr	r1, [pc, #20]	; (800743c <cmd_write.10853+0x4c>)

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
}
 8007426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 800742a:	f7ff bf71 	b.w	8007310 <chprintf.10846>
 800742e:	bf00      	nop
 8007430:	20001544 	.word	0x20001544
 8007434:	20000838 	.word	0x20000838
 8007438:	0800a500 	.word	0x0800a500
 800743c:	0800a510 	.word	0x0800a510

08007440 <chprintf.11382>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8007440:	b40e      	push	{r1, r2, r3}
 8007442:	b500      	push	{lr}
 8007444:	b082      	sub	sp, #8
 8007446:	ab03      	add	r3, sp, #12
 8007448:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800744c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800744e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8007450:	f7ff fbf6 	bl	8006c40 <chvprintf.4620>
  va_end(ap);

  return formatted_bytes;
}
 8007454:	b002      	add	sp, #8
 8007456:	f85d eb04 	ldr.w	lr, [sp], #4
 800745a:	b003      	add	sp, #12
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop

08007460 <Thread1.10843>:
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <Thread1.10843+0x40>)
 8007462:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <Thread1.10843+0x44>)
 8007464:	6998      	ldr	r0, [r3, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOA, GPIOA_LED);
 8007466:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800746a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800746e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80074a8 <Thread1.10843+0x48>

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 8007472:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOA, GPIOA_LED);
 8007474:	f2c4 0501 	movt	r5, #16385	; 0x4001
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8007478:	6182      	str	r2, [r0, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOA, GPIOA_LED);
 800747a:	4637      	mov	r7, r6
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800747c:	f898 4000 	ldrb.w	r4, [r8]
    palClearPad(GPIOA, GPIOA_LED);
 8007480:	616f      	str	r7, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8007482:	2c04      	cmp	r4, #4
 8007484:	bf14      	ite	ne
 8007486:	f44f 747a 	movne.w	r4, #1000	; 0x3e8
 800748a:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
    palClearPad(GPIOA, GPIOA_LED);
    chThdSleepMilliseconds(time);
 800748e:	4620      	mov	r0, r4
 8007490:	f7ff fe0e 	bl	80070b0 <chThdSleep>
    palSetPad(GPIOA, GPIOA_LED);
 8007494:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff fe0a 	bl	80070b0 <chThdSleep>
 800749c:	e7ee      	b.n	800747c <Thread1.10843+0x1c>
 800749e:	bf00      	nop
 80074a0:	20001e58 	.word	0x20001e58
 80074a4:	0800a520 	.word	0x0800a520
 80074a8:	20001438 	.word	0x20001438
 80074ac:	f3af 8000 	nop.w

080074b0 <TestThread>:
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 80074b4:	4c9d      	ldr	r4, [pc, #628]	; (800772c <TestThread+0x27c>)
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 80074b6:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 80074b8:	6020      	str	r0, [r4, #0]
  test_println("");
 80074ba:	489d      	ldr	r0, [pc, #628]	; (8007730 <TestThread+0x280>)
 80074bc:	f7fa f9b8 	bl	8001830 <test_println>
  test_println("*** ChibiOS/RT test suite");
 80074c0:	489c      	ldr	r0, [pc, #624]	; (8007734 <TestThread+0x284>)
 80074c2:	f7fa f9b5 	bl	8001830 <test_println>
 80074c6:	4d9c      	ldr	r5, [pc, #624]	; (8007738 <TestThread+0x288>)
  test_println("***");
 80074c8:	489c      	ldr	r0, [pc, #624]	; (800773c <TestThread+0x28c>)
 80074ca:	f7fa f9b1 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80074ce:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	6803      	ldr	r3, [r0, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80074d8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80074dc:	2900      	cmp	r1, #0
 80074de:	d1f7      	bne.n	80074d0 <TestThread+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 80074e0:	4897      	ldr	r0, [pc, #604]	; (8007740 <TestThread+0x290>)
 80074e2:	4e98      	ldr	r6, [pc, #608]	; (8007744 <TestThread+0x294>)
 80074e4:	f7fa f9a4 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80074e8:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	6807      	ldr	r7, [r0, #0]
 80074ee:	68bd      	ldr	r5, [r7, #8]
 80074f0:	47a8      	blx	r5
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80074f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d1f7      	bne.n	80074ea <TestThread+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 80074fa:	4893      	ldr	r0, [pc, #588]	; (8007748 <TestThread+0x298>)
 80074fc:	4e93      	ldr	r6, [pc, #588]	; (800774c <TestThread+0x29c>)
 80074fe:	f7fa f997 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007502:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	6803      	ldr	r3, [r0, #0]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800750c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007510:	2900      	cmp	r1, #0
 8007512:	d1f7      	bne.n	8007504 <TestThread+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 8007514:	488e      	ldr	r0, [pc, #568]	; (8007750 <TestThread+0x2a0>)
 8007516:	4f8f      	ldr	r7, [pc, #572]	; (8007754 <TestThread+0x2a4>)
 8007518:	f7fa f98a 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800751c:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 800751e:	6820      	ldr	r0, [r4, #0]
 8007520:	6805      	ldr	r5, [r0, #0]
 8007522:	68ae      	ldr	r6, [r5, #8]
 8007524:	47b0      	blx	r6
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007526:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 800752a:	2900      	cmp	r1, #0
 800752c:	d1f7      	bne.n	800751e <TestThread+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 800752e:	488a      	ldr	r0, [pc, #552]	; (8007758 <TestThread+0x2a8>)
 8007530:	4f8a      	ldr	r7, [pc, #552]	; (800775c <TestThread+0x2ac>)
 8007532:	f7fa f97d 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007536:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	6803      	ldr	r3, [r0, #0]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007540:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8007544:	2900      	cmp	r1, #0
 8007546:	d1f7      	bne.n	8007538 <TestThread+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8007548:	4885      	ldr	r0, [pc, #532]	; (8007760 <TestThread+0x2b0>)
 800754a:	4d86      	ldr	r5, [pc, #536]	; (8007764 <TestThread+0x2b4>)
 800754c:	f7fa f970 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007550:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	6806      	ldr	r6, [r0, #0]
 8007556:	68b7      	ldr	r7, [r6, #8]
 8007558:	47b8      	blx	r7
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800755a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800755e:	2900      	cmp	r1, #0
 8007560:	d1f7      	bne.n	8007552 <TestThread+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8007562:	4881      	ldr	r0, [pc, #516]	; (8007768 <TestThread+0x2b8>)
 8007564:	4d81      	ldr	r5, [pc, #516]	; (800776c <TestThread+0x2bc>)
 8007566:	f7fa f963 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800756a:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	6803      	ldr	r3, [r0, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007574:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007578:	2900      	cmp	r1, #0
 800757a:	d1f7      	bne.n	800756c <TestThread+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 800757c:	487c      	ldr	r0, [pc, #496]	; (8007770 <TestThread+0x2c0>)
 800757e:	4e7d      	ldr	r6, [pc, #500]	; (8007774 <TestThread+0x2c4>)
 8007580:	f7fa f956 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007584:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	6807      	ldr	r7, [r0, #0]
 800758a:	68bd      	ldr	r5, [r7, #8]
 800758c:	47a8      	blx	r5
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800758e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007592:	2900      	cmp	r1, #0
 8007594:	d1f7      	bne.n	8007586 <TestThread+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8007596:	4878      	ldr	r0, [pc, #480]	; (8007778 <TestThread+0x2c8>)
 8007598:	9100      	str	r1, [sp, #0]
 800759a:	f7fa f949 	bl	8001830 <test_println>
#endif
  test_println("");
 800759e:	4864      	ldr	r0, [pc, #400]	; (8007730 <TestThread+0x280>)
 80075a0:	f7fa f946 	bl	8001830 <test_println>

  global_fail = FALSE;
 80075a4:	9900      	ldr	r1, [sp, #0]
 80075a6:	4875      	ldr	r0, [pc, #468]	; (800777c <TestThread+0x2cc>)
 80075a8:	f241 43e0 	movw	r3, #5344	; 0x14e0
 80075ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075b0:	4f73      	ldr	r7, [pc, #460]	; (8007780 <TestThread+0x2d0>)
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 80075b2:	4e74      	ldr	r6, [pc, #464]	; (8007784 <TestThread+0x2d4>)
 80075b4:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80077b8 <TestThread+0x308>
 80075b8:	9001      	str	r0, [sp, #4]
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  global_fail = FALSE;
 80075ba:	7019      	strb	r1, [r3, #0]
  i = 0;
 80075bc:	468a      	mov	sl, r1
 80075be:	f10a 0a01 	add.w	sl, sl, #1
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80075c2:	f04f 0800 	mov.w	r8, #0

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 80075c6:	f857 2b04 	ldr.w	r2, [r7], #4
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	f000 8085 	beq.w	80076da <TestThread+0x22a>
 80075d0:	4d6d      	ldr	r5, [pc, #436]	; (8007788 <TestThread+0x2d8>)
      print_line();
 80075d2:	f7fa f99d 	bl	8001910 <print_line.6617>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80075d6:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	6802      	ldr	r2, [r0, #0]
 80075dc:	6893      	ldr	r3, [r2, #8]
 80075de:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80075e0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80075e4:	2900      	cmp	r1, #0
 80075e6:	d1f7      	bne.n	80075d8 <TestThread+0x128>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 80075e8:	4650      	mov	r0, sl
 80075ea:	f7fa f949 	bl	8001880 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80075ee:	484f      	ldr	r0, [pc, #316]	; (800772c <TestThread+0x27c>)
 80075f0:	212e      	movs	r1, #46	; 0x2e
 80075f2:	6800      	ldr	r0, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 80075f4:	f108 0801 	add.w	r8, r8, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 80075f8:	6805      	ldr	r5, [r0, #0]
 80075fa:	68aa      	ldr	r2, [r5, #8]
 80075fc:	4790      	blx	r2
 80075fe:	4d63      	ldr	r5, [pc, #396]	; (800778c <TestThread+0x2dc>)
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8007600:	4640      	mov	r0, r8
 8007602:	f7fa f93d 	bl	8001880 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007606:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	6803      	ldr	r3, [r0, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007610:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007614:	2900      	cmp	r1, #0
 8007616:	d1f7      	bne.n	8007608 <TestThread+0x158>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8007618:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800761c:	680d      	ldr	r5, [r1, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800761e:	7829      	ldrb	r1, [r5, #0]
 8007620:	b139      	cbz	r1, 8007632 <TestThread+0x182>
    chSequentialStreamPut(chp, *msgp++);
 8007622:	6820      	ldr	r0, [r4, #0]
 8007624:	6803      	ldr	r3, [r0, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800762a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800762e:	2900      	cmp	r1, #0
 8007630:	d1f7      	bne.n	8007622 <TestThread+0x172>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8007632:	4857      	ldr	r0, [pc, #348]	; (8007790 <TestThread+0x2e0>)
 8007634:	f7fa f8fc 	bl	8001830 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8007638:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800763c:	f7ff fd38 	bl	80070b0 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8007640:	4854      	ldr	r0, [pc, #336]	; (8007794 <TestThread+0x2e4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8007642:	f857 bc04 	ldr.w	fp, [r7, #-4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007646:	2100      	movs	r1, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8007648:	6001      	str	r1, [r0, #0]
 800764a:	6041      	str	r1, [r0, #4]
 800764c:	6081      	str	r1, [r0, #8]
 800764e:	60c1      	str	r1, [r0, #12]
 8007650:	6101      	str	r1, [r0, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007652:	4d51      	ldr	r5, [pc, #324]	; (8007798 <TestThread+0x2e8>)
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8007654:	f8db 3004 	ldr.w	r3, [fp, #4]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8007658:	f8c6 9000 	str.w	r9, [r6]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 800765c:	7029      	strb	r1, [r5, #0]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 800765e:	b103      	cbz	r3, 8007662 <TestThread+0x1b2>
    tcp->setup();
 8007660:	4798      	blx	r3
  tcp->execute();
 8007662:	f8db 200c 	ldr.w	r2, [fp, #12]
 8007666:	4790      	blx	r2
  if (tcp->teardown != NULL)
 8007668:	f8db 0008 	ldr.w	r0, [fp, #8]
 800766c:	b100      	cbz	r0, 8007670 <TestThread+0x1c0>
    tcp->teardown();
 800766e:	4780      	blx	r0

  test_wait_threads();
 8007670:	f7fa fe16 	bl	80022a0 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8007674:	7829      	ldrb	r1, [r5, #0]
 8007676:	2900      	cmp	r1, #0
 8007678:	f000 80a0 	beq.w	80077bc <TestThread+0x30c>
 800767c:	4d47      	ldr	r5, [pc, #284]	; (800779c <TestThread+0x2ec>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800767e:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	6803      	ldr	r3, [r0, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007688:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800768c:	2900      	cmp	r1, #0
 800768e:	d1f7      	bne.n	8007680 <TestThread+0x1d0>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8007690:	4843      	ldr	r0, [pc, #268]	; (80077a0 <TestThread+0x2f0>)
 8007692:	4d44      	ldr	r5, [pc, #272]	; (80077a4 <TestThread+0x2f4>)
 8007694:	6800      	ldr	r0, [r0, #0]
 8007696:	f7fa f8f3 	bl	8001880 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 800769a:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	6803      	ldr	r3, [r0, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80076a4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80076a8:	2900      	cmp	r1, #0
 80076aa:	d1f7      	bne.n	800769c <TestThread+0x1ec>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80076ac:	6831      	ldr	r1, [r6, #0]
 80076ae:	4549      	cmp	r1, r9
 80076b0:	d90b      	bls.n	80076ca <TestThread+0x21a>
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 80076b2:	4d3d      	ldr	r5, [pc, #244]	; (80077a8 <TestThread+0x2f8>)

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
    chSequentialStreamPut(chp, *cp++);
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80076ba:	6803      	ldr	r3, [r0, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	4790      	blx	r2
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80076c0:	6830      	ldr	r0, [r6, #0]
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 80076c2:	4629      	mov	r1, r5
 80076c4:	3501      	adds	r5, #1
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 80076c6:	4281      	cmp	r1, r0
 80076c8:	d3f4      	bcc.n	80076b4 <TestThread+0x204>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 80076ca:	4838      	ldr	r0, [pc, #224]	; (80077ac <TestThread+0x2fc>)
 80076cc:	f7fa f8b0 	bl	8001830 <test_println>

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 80076d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	f47f af7b 	bne.w	80075d0 <TestThread+0x120>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 80076da:	9d01      	ldr	r5, [sp, #4]
 80076dc:	f855 7f04 	ldr.w	r7, [r5, #4]!
 80076e0:	9501      	str	r5, [sp, #4]
 80076e2:	2f00      	cmp	r7, #0
 80076e4:	f47f af6b 	bne.w	80075be <TestThread+0x10e>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 80076e8:	f7fa f912 	bl	8001910 <print_line.6617>
 80076ec:	4d30      	ldr	r5, [pc, #192]	; (80077b0 <TestThread+0x300>)
  test_println("");
 80076ee:	4810      	ldr	r0, [pc, #64]	; (8007730 <TestThread+0x280>)
 80076f0:	f7fa f89e 	bl	8001830 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80076f4:	2146      	movs	r1, #70	; 0x46
    chSequentialStreamPut(chp, *msgp++);
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	6803      	ldr	r3, [r0, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80076fe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007702:	2900      	cmp	r1, #0
 8007704:	d1f7      	bne.n	80076f6 <TestThread+0x246>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 8007706:	f241 40e0 	movw	r0, #5344	; 0x14e0
 800770a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800770e:	7801      	ldrb	r1, [r0, #0]
 8007710:	2900      	cmp	r1, #0
 8007712:	d157      	bne.n	80077c4 <TestThread+0x314>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8007714:	4827      	ldr	r0, [pc, #156]	; (80077b4 <TestThread+0x304>)
 8007716:	f7fa f88b 	bl	8001830 <test_println>

  return (msg_t)global_fail;
 800771a:	f241 43e0 	movw	r3, #5344	; 0x14e0
 800771e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007722:	7818      	ldrb	r0, [r3, #0]
}
 8007724:	b003      	add	sp, #12
 8007726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772a:	bf00      	nop
 800772c:	200014e4 	.word	0x200014e4
 8007730:	0800ac08 	.word	0x0800ac08
 8007734:	0800a528 	.word	0x0800a528
 8007738:	0800a548 	.word	0x0800a548
 800773c:	0800a544 	.word	0x0800a544
 8007740:	08009e84 	.word	0x08009e84
 8007744:	0800a5a8 	.word	0x0800a5a8
 8007748:	0800a5bc 	.word	0x0800a5bc
 800774c:	0800a5d4 	.word	0x0800a5d4
 8007750:	08009ea4 	.word	0x08009ea4
 8007754:	0800a5e8 	.word	0x0800a5e8
 8007758:	08009f00 	.word	0x08009f00
 800775c:	0800a5fc 	.word	0x0800a5fc
 8007760:	08009f1c 	.word	0x08009f1c
 8007764:	0800a610 	.word	0x0800a610
 8007768:	08009f3c 	.word	0x08009f3c
 800776c:	0800a624 	.word	0x0800a624
 8007770:	08009f68 	.word	0x08009f68
 8007774:	0800a638 	.word	0x0800a638
 8007778:	08009fa8 	.word	0x08009fa8
 800777c:	0800a9b0 	.word	0x0800a9b0
 8007780:	0800a7f0 	.word	0x0800a7f0
 8007784:	20001434 	.word	0x20001434
 8007788:	0800a55c 	.word	0x0800a55c
 800778c:	0800a64c 	.word	0x0800a64c
 8007790:	0800a56c 	.word	0x0800a56c
 8007794:	20001fa8 	.word	0x20001fa8
 8007798:	200014bc 	.word	0x200014bc
 800779c:	0800a570 	.word	0x0800a570
 80077a0:	200014e8 	.word	0x200014e8
 80077a4:	0800a650 	.word	0x0800a650
 80077a8:	200014ed 	.word	0x200014ed
 80077ac:	0800a588 	.word	0x0800a588
 80077b0:	0800a654 	.word	0x0800a654
 80077b4:	0800a598 	.word	0x0800a598
 80077b8:	200014ec 	.word	0x200014ec
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 80077bc:	4803      	ldr	r0, [pc, #12]	; (80077cc <TestThread+0x31c>)
 80077be:	f7fa f837 	bl	8001830 <test_println>
 80077c2:	e700      	b.n	80075c6 <TestThread+0x116>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 80077c4:	4802      	ldr	r0, [pc, #8]	; (80077d0 <TestThread+0x320>)
 80077c6:	f7fa f833 	bl	8001830 <test_println>
 80077ca:	e7a6      	b.n	800771a <TestThread+0x26a>
 80077cc:	0800a58c 	.word	0x0800a58c
 80077d0:	0800a5a0 	.word	0x0800a5a0
 80077d4:	f3af 8000 	nop.w
 80077d8:	f3af 8000 	nop.w
 80077dc:	f3af 8000 	nop.w

080077e0 <thread2.7060>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 80077e0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 80077e2:	2064      	movs	r0, #100	; 0x64
 80077e4:	f7ff fc64 	bl	80070b0 <chThdSleep>
 80077e8:	2320      	movs	r3, #32
 80077ea:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 80077ee:	f640 0010 	movw	r0, #2064	; 0x810
 80077f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80077f6:	f7fa fdfb 	bl	80023f0 <chSemSignalI>
  chSchRescheduleS();
 80077fa:	f7fa f959 	bl	8001ab0 <chSchRescheduleS>
 80077fe:	2000      	movs	r0, #0
 8007800:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8007804:	bd08      	pop	{r3, pc}
 8007806:	bf00      	nop
 8007808:	f3af 8000 	nop.w
 800780c:	f3af 8000 	nop.w

08007810 <mtx4_execute.7303>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007814:	4d86      	ldr	r5, [pc, #536]	; (8007a30 <mtx4_execute.7303+0x220>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007816:	4887      	ldr	r0, [pc, #540]	; (8007a34 <mtx4_execute.7303+0x224>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007818:	69ab      	ldr	r3, [r5, #24]
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 800781a:	b082      	sub	sp, #8
 800781c:	689c      	ldr	r4, [r3, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 800781e:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8007822:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007824:	4b84      	ldr	r3, [pc, #528]	; (8007a38 <mtx4_execute.7303+0x228>)
 8007826:	463a      	mov	r2, r7
 8007828:	9000      	str	r0, [sp, #0]
 800782a:	4884      	ldr	r0, [pc, #528]	; (8007a3c <mtx4_execute.7303+0x22c>)
 800782c:	f7fa fa88 	bl	8001d40 <chThdCreateStatic>
 8007830:	4e83      	ldr	r6, [pc, #524]	; (8007a40 <mtx4_execute.7303+0x230>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8007832:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007836:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8007838:	4882      	ldr	r0, [pc, #520]	; (8007a44 <mtx4_execute.7303+0x234>)
 800783a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800783e:	4642      	mov	r2, r8
 8007840:	4b81      	ldr	r3, [pc, #516]	; (8007a48 <mtx4_execute.7303+0x238>)
 8007842:	9000      	str	r0, [sp, #0]
 8007844:	4881      	ldr	r0, [pc, #516]	; (8007a4c <mtx4_execute.7303+0x23c>)
 8007846:	f7fa fa7b 	bl	8001d40 <chThdCreateStatic>
 800784a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 800784c:	4880      	ldr	r0, [pc, #512]	; (8007a50 <mtx4_execute.7303+0x240>)
 800784e:	f7fa fc5f 	bl	8002110 <chMtxLock>
 8007852:	69a9      	ldr	r1, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8007854:	2001      	movs	r0, #1
 8007856:	688a      	ldr	r2, [r1, #8]
 8007858:	1aa3      	subs	r3, r4, r2
 800785a:	4259      	negs	r1, r3
 800785c:	4159      	adcs	r1, r3
 800785e:	f7f9 ffbf 	bl	80017e0 <_test_assert>
 8007862:	b110      	cbz	r0, 800786a <mtx4_execute.7303+0x5a>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8007864:	b002      	add	sp, #8
 8007866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 800786a:	20c8      	movs	r0, #200	; 0xc8
 800786c:	f7ff fc20 	bl	80070b0 <chThdSleep>
 8007870:	69aa      	ldr	r2, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8007872:	2002      	movs	r0, #2
 8007874:	6893      	ldr	r3, [r2, #8]
 8007876:	1afa      	subs	r2, r7, r3
 8007878:	4251      	negs	r1, r2
 800787a:	4151      	adcs	r1, r2
 800787c:	f7f9 ffb0 	bl	80017e0 <_test_assert>
 8007880:	2800      	cmp	r0, #0
 8007882:	d1ef      	bne.n	8007864 <mtx4_execute.7303+0x54>
  chMtxLock(&m1);
 8007884:	4873      	ldr	r0, [pc, #460]	; (8007a54 <mtx4_execute.7303+0x244>)
 8007886:	f7fa fc43 	bl	8002110 <chMtxLock>
 800788a:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 800788c:	2003      	movs	r0, #3
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	ebb7 0c02 	subs.w	ip, r7, r2
 8007894:	f1dc 0100 	rsbs	r1, ip, #0
 8007898:	eb51 010c 	adcs.w	r1, r1, ip
 800789c:	f7f9 ffa0 	bl	80017e0 <_test_assert>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1df      	bne.n	8007864 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 80078a4:	20c8      	movs	r0, #200	; 0xc8
 80078a6:	f7ff fc03 	bl	80070b0 <chThdSleep>
 80078aa:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 80078ac:	2004      	movs	r0, #4
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80078b4:	f1de 0100 	rsbs	r1, lr, #0
 80078b8:	eb51 010e 	adcs.w	r1, r1, lr
 80078bc:	f7f9 ff90 	bl	80017e0 <_test_assert>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d1cf      	bne.n	8007864 <mtx4_execute.7303+0x54>
  chMtxUnlock(&m1);
 80078c4:	4863      	ldr	r0, [pc, #396]	; (8007a54 <mtx4_execute.7303+0x244>)
 80078c6:	f7fa f9f3 	bl	8001cb0 <chMtxUnlock>
 80078ca:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 80078cc:	2005      	movs	r0, #5
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	1abb      	subs	r3, r7, r2
 80078d2:	4259      	negs	r1, r3
 80078d4:	4159      	adcs	r1, r3
 80078d6:	f7f9 ff83 	bl	80017e0 <_test_assert>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d1c2      	bne.n	8007864 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 80078de:	20c8      	movs	r0, #200	; 0xc8
 80078e0:	f7ff fbe6 	bl	80070b0 <chThdSleep>
 80078e4:	69aa      	ldr	r2, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 80078e6:	2006      	movs	r0, #6
 80078e8:	6893      	ldr	r3, [r2, #8]
 80078ea:	1afa      	subs	r2, r7, r3
 80078ec:	4251      	negs	r1, r2
 80078ee:	4151      	adcs	r1, r2
 80078f0:	f7f9 ff76 	bl	80017e0 <_test_assert>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d1b5      	bne.n	8007864 <mtx4_execute.7303+0x54>
  chMtxUnlockAll();
 80078f8:	f7fa fb4a 	bl	8001f90 <chMtxUnlockAll>
 80078fc:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 80078fe:	2007      	movs	r0, #7
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	ebb4 0c02 	subs.w	ip, r4, r2
 8007906:	f1dc 0100 	rsbs	r1, ip, #0
 800790a:	eb51 010c 	adcs.w	r1, r1, ip
 800790e:	f7f9 ff67 	bl	80017e0 <_test_assert>
 8007912:	2800      	cmp	r0, #0
 8007914:	d1a6      	bne.n	8007864 <mtx4_execute.7303+0x54>
  test_wait_threads();
 8007916:	f7fa fcc3 	bl	80022a0 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 800791a:	484f      	ldr	r0, [pc, #316]	; (8007a58 <mtx4_execute.7303+0x248>)
 800791c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007920:	463a      	mov	r2, r7
 8007922:	4b45      	ldr	r3, [pc, #276]	; (8007a38 <mtx4_execute.7303+0x228>)
 8007924:	9000      	str	r0, [sp, #0]
 8007926:	4845      	ldr	r0, [pc, #276]	; (8007a3c <mtx4_execute.7303+0x22c>)
 8007928:	f7fa fa0a 	bl	8001d40 <chThdCreateStatic>
 800792c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 800792e:	484b      	ldr	r0, [pc, #300]	; (8007a5c <mtx4_execute.7303+0x24c>)
 8007930:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007934:	4642      	mov	r2, r8
 8007936:	4b44      	ldr	r3, [pc, #272]	; (8007a48 <mtx4_execute.7303+0x238>)
 8007938:	9000      	str	r0, [sp, #0]
 800793a:	4844      	ldr	r0, [pc, #272]	; (8007a4c <mtx4_execute.7303+0x23c>)
 800793c:	f7fa fa00 	bl	8001d40 <chThdCreateStatic>
 8007940:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8007942:	4843      	ldr	r0, [pc, #268]	; (8007a50 <mtx4_execute.7303+0x240>)
 8007944:	f7fa fbe4 	bl	8002110 <chMtxLock>
 8007948:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 800794a:	2008      	movs	r0, #8
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	ebb4 0e02 	subs.w	lr, r4, r2
 8007952:	f1de 0100 	rsbs	r1, lr, #0
 8007956:	eb51 010e 	adcs.w	r1, r1, lr
 800795a:	f7f9 ff41 	bl	80017e0 <_test_assert>
 800795e:	2800      	cmp	r0, #0
 8007960:	d180      	bne.n	8007864 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007962:	20c8      	movs	r0, #200	; 0xc8
 8007964:	f7ff fba4 	bl	80070b0 <chThdSleep>
 8007968:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 800796a:	2009      	movs	r0, #9
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	1abb      	subs	r3, r7, r2
 8007970:	4259      	negs	r1, r3
 8007972:	4159      	adcs	r1, r3
 8007974:	f7f9 ff34 	bl	80017e0 <_test_assert>
 8007978:	2800      	cmp	r0, #0
 800797a:	f47f af73 	bne.w	8007864 <mtx4_execute.7303+0x54>
  chMtxLock(&m1);
 800797e:	4835      	ldr	r0, [pc, #212]	; (8007a54 <mtx4_execute.7303+0x244>)
 8007980:	f7fa fbc6 	bl	8002110 <chMtxLock>
 8007984:	69aa      	ldr	r2, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8007986:	200a      	movs	r0, #10
 8007988:	6893      	ldr	r3, [r2, #8]
 800798a:	1afa      	subs	r2, r7, r3
 800798c:	4251      	negs	r1, r2
 800798e:	4151      	adcs	r1, r2
 8007990:	f7f9 ff26 	bl	80017e0 <_test_assert>
 8007994:	2800      	cmp	r0, #0
 8007996:	f47f af65 	bne.w	8007864 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 800799a:	20c8      	movs	r0, #200	; 0xc8
 800799c:	f7ff fb88 	bl	80070b0 <chThdSleep>
 80079a0:	69ae      	ldr	r6, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 80079a2:	200b      	movs	r0, #11
 80079a4:	68b3      	ldr	r3, [r6, #8]
 80079a6:	ebb8 0c03 	subs.w	ip, r8, r3
 80079aa:	f1dc 0200 	rsbs	r2, ip, #0
 80079ae:	eb52 010c 	adcs.w	r1, r2, ip
 80079b2:	f7f9 ff15 	bl	80017e0 <_test_assert>
 80079b6:	4606      	mov	r6, r0
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f47f af53 	bne.w	8007864 <mtx4_execute.7303+0x54>
 80079be:	2020      	movs	r0, #32
 80079c0:	f380 8811 	msr	BASEPRI, r0
  chSysLock();
  chMtxUnlockS(&m1);
 80079c4:	4823      	ldr	r0, [pc, #140]	; (8007a54 <mtx4_execute.7303+0x244>)
 80079c6:	f7fa fb13 	bl	8001ff0 <chMtxUnlockS>
  chSchRescheduleS();
 80079ca:	f7fa f871 	bl	8001ab0 <chSchRescheduleS>
 80079ce:	f386 8811 	msr	BASEPRI, r6
 80079d2:	69a9      	ldr	r1, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 80079d4:	200c      	movs	r0, #12
 80079d6:	688b      	ldr	r3, [r1, #8]
 80079d8:	ebb7 0e03 	subs.w	lr, r7, r3
 80079dc:	f1de 0200 	rsbs	r2, lr, #0
 80079e0:	eb52 010e 	adcs.w	r1, r2, lr
 80079e4:	f7f9 fefc 	bl	80017e0 <_test_assert>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f47f af3b 	bne.w	8007864 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 80079ee:	20c8      	movs	r0, #200	; 0xc8
 80079f0:	f7ff fb5e 	bl	80070b0 <chThdSleep>
 80079f4:	69a9      	ldr	r1, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 80079f6:	200d      	movs	r0, #13
 80079f8:	688b      	ldr	r3, [r1, #8]
 80079fa:	1afa      	subs	r2, r7, r3
 80079fc:	4251      	negs	r1, r2
 80079fe:	4151      	adcs	r1, r2
 8007a00:	f7f9 feee 	bl	80017e0 <_test_assert>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f47f af2d 	bne.w	8007864 <mtx4_execute.7303+0x54>
  chMtxUnlockAll();
 8007a0a:	f7fa fac1 	bl	8001f90 <chMtxUnlockAll>
 8007a0e:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8007a10:	200e      	movs	r0, #14
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	1aa3      	subs	r3, r4, r2
 8007a16:	4259      	negs	r1, r3
 8007a18:	4159      	adcs	r1, r3
 8007a1a:	f7f9 fee1 	bl	80017e0 <_test_assert>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f47f af20 	bne.w	8007864 <mtx4_execute.7303+0x54>
  test_wait_threads();
}
 8007a24:	b002      	add	sp, #8
 8007a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8007a2a:	f7fa bc39 	b.w	80022a0 <test_wait_threads>
 8007a2e:	bf00      	nop
 8007a30:	20001e58 	.word	0x20001e58
 8007a34:	0800a1d4 	.word	0x0800a1d4
 8007a38:	08007a91 	.word	0x08007a91
 8007a3c:	200017e8 	.word	0x200017e8
 8007a40:	20001fa8 	.word	0x20001fa8
 8007a44:	0800a1cc 	.word	0x0800a1cc
 8007a48:	08007a61 	.word	0x08007a61
 8007a4c:	20001930 	.word	0x20001930
 8007a50:	20000c3c 	.word	0x20000c3c
 8007a54:	20000800 	.word	0x20000800
 8007a58:	0800a070 	.word	0x0800a070
 8007a5c:	0800a1d0 	.word	0x0800a1d0

08007a60 <thread4b.7275.4138>:
  chMtxLock(&m2);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread4b(void *p) {
 8007a60:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8007a62:	f640 0400 	movw	r4, #2048	; 0x800
 8007a66:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8007a6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007a6e:	f7ff fb1f 	bl	80070b0 <chThdSleep>
  chMtxLock(&m1);
 8007a72:	4620      	mov	r0, r4
 8007a74:	f7fa fb4c 	bl	8002110 <chMtxLock>
  chMtxUnlock(&m1);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7fa f919 	bl	8001cb0 <chMtxUnlock>
  return 0;
}
 8007a7e:	2000      	movs	r0, #0
 8007a80:	bd10      	pop	{r4, pc}
 8007a82:	bf00      	nop
 8007a84:	f3af 8000 	nop.w
 8007a88:	f3af 8000 	nop.w
 8007a8c:	f3af 8000 	nop.w

08007a90 <thread4a.7278.4135>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 8007a90:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8007a92:	f640 443c 	movw	r4, #3132	; 0xc3c
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8007a96:	2064      	movs	r0, #100	; 0x64
  chMtxLock(&m2);
 8007a98:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8007a9c:	f7ff fb08 	bl	80070b0 <chThdSleep>
  chMtxLock(&m2);
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f7fa fb35 	bl	8002110 <chMtxLock>
  chMtxUnlock(&m2);
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f7fa f902 	bl	8001cb0 <chMtxUnlock>
  return 0;
}
 8007aac:	2000      	movs	r0, #0
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <thread1.7703>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8007ab4:	2064      	movs	r0, #100	; 0x64
 8007ab6:	f7ff fafb 	bl	80070b0 <chThdSleep>
 8007aba:	2320      	movs	r3, #32
 8007abc:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fa fa34 	bl	8001f30 <chEvtSignalI>
  chSchRescheduleS();
 8007ac8:	f7f9 fff2 	bl	8001ab0 <chSchRescheduleS>
 8007acc:	2000      	movs	r0, #0
 8007ace:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8007ad2:	bd10      	pop	{r4, pc}
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	f3af 8000 	nop.w
 8007adc:	f3af 8000 	nop.w

08007ae0 <dyn3_execute.8084>:

static void dyn3_execute(void) {
 8007ae0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007ae2:	4b4c      	ldr	r3, [pc, #304]	; (8007c14 <dyn3_execute.8084+0x134>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007ae4:	4c4c      	ldr	r4, [pc, #304]	; (8007c18 <dyn3_execute.8084+0x138>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007ae6:	6998      	ldr	r0, [r3, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8007ae8:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007aea:	6882      	ldr	r2, [r0, #8]
 8007aec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007af0:	3a01      	subs	r2, #1
 8007af2:	4b4a      	ldr	r3, [pc, #296]	; (8007c1c <dyn3_execute.8084+0x13c>)
 8007af4:	9400      	str	r4, [sp, #0]
 8007af6:	484a      	ldr	r0, [pc, #296]	; (8007c20 <dyn3_execute.8084+0x140>)
 8007af8:	f7fa fc5a 	bl	80023b0 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8007afc:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007afe:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8007b00:	2001      	movs	r0, #1
 8007b02:	1a0b      	subs	r3, r1, r0
 8007b04:	425a      	negs	r2, r3
 8007b06:	eb52 0103 	adcs.w	r1, r2, r3
 8007b0a:	f7f9 fe69 	bl	80017e0 <_test_assert>
 8007b0e:	b108      	cbz	r0, 8007b14 <dyn3_execute.8084+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8007b10:	b002      	add	sp, #8
 8007b12:	bd10      	pop	{r4, pc}
 8007b14:	2120      	movs	r1, #32
 8007b16:	f381 8811 	msr	BASEPRI, r1
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 8007b1a:	7fa3      	ldrb	r3, [r4, #30]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	77a2      	strb	r2, [r4, #30]
 8007b20:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8007b24:	7fa1      	ldrb	r1, [r4, #30]
 8007b26:	2002      	movs	r0, #2
 8007b28:	1a0b      	subs	r3, r1, r0
 8007b2a:	425a      	negs	r2, r3
 8007b2c:	eb52 0103 	adcs.w	r1, r2, r3
 8007b30:	f7f9 fe56 	bl	80017e0 <_test_assert>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d1eb      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  chThdRelease(tp);
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f7fa fb61 	bl	8002200 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 8007b3e:	7fa1      	ldrb	r1, [r4, #30]
 8007b40:	2003      	movs	r0, #3
 8007b42:	f1b1 0c01 	subs.w	ip, r1, #1
 8007b46:	f1dc 0300 	rsbs	r3, ip, #0
 8007b4a:	eb53 010c 	adcs.w	r1, r3, ip
 8007b4e:	f7f9 fe47 	bl	80017e0 <_test_assert>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d1dc      	bne.n	8007b10 <dyn3_execute.8084+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7fe f9ca 	bl	8005ef0 <regfind.8080>
 8007b5c:	4601      	mov	r1, r0
 8007b5e:	2004      	movs	r0, #4
 8007b60:	f7f9 fe3e 	bl	80017e0 <_test_assert>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d1d3      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f7fe f9c1 	bl	8005ef0 <regfind.8080>
 8007b6e:	4601      	mov	r1, r0
 8007b70:	2005      	movs	r0, #5
 8007b72:	f7f9 fe35 	bl	80017e0 <_test_assert>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d1ca      	bne.n	8007b10 <dyn3_execute.8084+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fa fb40 	bl	8002200 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8007b80:	7fa2      	ldrb	r2, [r4, #30]
 8007b82:	2006      	movs	r0, #6
 8007b84:	f1d2 0101 	rsbs	r1, r2, #1
 8007b88:	bf38      	it	cc
 8007b8a:	2100      	movcc	r1, #0
 8007b8c:	f7f9 fe28 	bl	80017e0 <_test_assert>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d1bd      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8007b94:	7f21      	ldrb	r1, [r4, #28]
 8007b96:	2007      	movs	r0, #7
 8007b98:	f1d1 0101 	rsbs	r1, r1, #1
 8007b9c:	bf38      	it	cc
 8007b9e:	2100      	movcc	r1, #0
 8007ba0:	f7f9 fe1e 	bl	80017e0 <_test_assert>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d1b3      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f7fe f9a1 	bl	8005ef0 <regfind.8080>
 8007bae:	4601      	mov	r1, r0
 8007bb0:	2008      	movs	r0, #8
 8007bb2:	f7f9 fe15 	bl	80017e0 <_test_assert>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d1aa      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f7fe f998 	bl	8005ef0 <regfind.8080>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	2009      	movs	r0, #9
 8007bc4:	f7f9 fe0c 	bl	80017e0 <_test_assert>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1a1      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 8007bcc:	2064      	movs	r0, #100	; 0x64
 8007bce:	f7ff fa6f 	bl	80070b0 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 8007bd2:	7f23      	ldrb	r3, [r4, #28]
 8007bd4:	200a      	movs	r0, #10
 8007bd6:	f1b3 0e0f 	subs.w	lr, r3, #15
 8007bda:	f1de 0200 	rsbs	r2, lr, #0
 8007bde:	eb52 010e 	adcs.w	r1, r2, lr
 8007be2:	f7f9 fdfd 	bl	80017e0 <_test_assert>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d192      	bne.n	8007b10 <dyn3_execute.8084+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7fe f980 	bl	8005ef0 <regfind.8080>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	200b      	movs	r0, #11
 8007bf4:	f7f9 fdf4 	bl	80017e0 <_test_assert>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d189      	bne.n	8007b10 <dyn3_execute.8084+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f7fe f977 	bl	8005ef0 <regfind.8080>
 8007c02:	f080 0001 	eor.w	r0, r0, #1
 8007c06:	b2c1      	uxtb	r1, r0
 8007c08:	200c      	movs	r0, #12
}
 8007c0a:	b002      	add	sp, #8
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 8007c10:	f7f9 bde6 	b.w	80017e0 <_test_assert>
 8007c14:	20001e58 	.word	0x20001e58
 8007c18:	0800a1cc 	.word	0x0800a1cc
 8007c1c:	08005881 	.word	0x08005881
 8007c20:	200014c0 	.word	0x200014c0
 8007c24:	f3af 8000 	nop.w
 8007c28:	f3af 8000 	nop.w
 8007c2c:	f3af 8000 	nop.w

08007c30 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8007c30:	b508      	push	{r3, lr}

  chThdSleep(1);
 8007c32:	2001      	movs	r0, #1
 8007c34:	f7ff fa3c 	bl	80070b0 <chThdSleep>
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8007c3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007c42:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007c44:	2200      	movs	r2, #0
 8007c46:	f382 8811 	msr	BASEPRI, r2
  return chVTGetSystemTime();
}
 8007c4a:	b288      	uxth	r0, r1
 8007c4c:	bd08      	pop	{r3, pc}
 8007c4e:	bf00      	nop

08007c50 <bmk7_execute.8483>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007c54:	4e3a      	ldr	r6, [pc, #232]	; (8007d40 <bmk7_execute.8483+0xf0>)
 8007c56:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007c58:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8007c5a:	2400      	movs	r4, #0
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c62:	4b38      	ldr	r3, [pc, #224]	; (8007d44 <bmk7_execute.8483+0xf4>)
 8007c64:	3205      	adds	r2, #5
 8007c66:	9400      	str	r4, [sp, #0]
 8007c68:	4837      	ldr	r0, [pc, #220]	; (8007d48 <bmk7_execute.8483+0xf8>)
 8007c6a:	f7fa f869 	bl	8001d40 <chThdCreateStatic>
 8007c6e:	69b1      	ldr	r1, [r6, #24]
 8007c70:	4d36      	ldr	r5, [pc, #216]	; (8007d4c <bmk7_execute.8483+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8007c72:	688f      	ldr	r7, [r1, #8]
 8007c74:	4b33      	ldr	r3, [pc, #204]	; (8007d44 <bmk7_execute.8483+0xf4>)
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8007c76:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8007c78:	1d3a      	adds	r2, r7, #4
 8007c7a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c7e:	9400      	str	r4, [sp, #0]
 8007c80:	4833      	ldr	r0, [pc, #204]	; (8007d50 <bmk7_execute.8483+0x100>)
 8007c82:	f7fa f85d 	bl	8001d40 <chThdCreateStatic>
 8007c86:	69b3      	ldr	r3, [r6, #24]
 8007c88:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8007c8a:	6898      	ldr	r0, [r3, #8]
 8007c8c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007c90:	1cc2      	adds	r2, r0, #3
 8007c92:	4b2c      	ldr	r3, [pc, #176]	; (8007d44 <bmk7_execute.8483+0xf4>)
 8007c94:	9400      	str	r4, [sp, #0]
 8007c96:	482f      	ldr	r0, [pc, #188]	; (8007d54 <bmk7_execute.8483+0x104>)
 8007c98:	f7fa f852 	bl	8001d40 <chThdCreateStatic>
 8007c9c:	69b2      	ldr	r2, [r6, #24]
 8007c9e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8007ca0:	6897      	ldr	r7, [r2, #8]
 8007ca2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007ca6:	1cba      	adds	r2, r7, #2
 8007ca8:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <bmk7_execute.8483+0xf4>)
 8007caa:	9400      	str	r4, [sp, #0]
 8007cac:	482a      	ldr	r0, [pc, #168]	; (8007d58 <bmk7_execute.8483+0x108>)
 8007cae:	f7fa f847 	bl	8001d40 <chThdCreateStatic>
 8007cb2:	69b6      	ldr	r6, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8007cb4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007cb8:	68b2      	ldr	r2, [r6, #8]
 8007cba:	4b22      	ldr	r3, [pc, #136]	; (8007d44 <bmk7_execute.8483+0xf4>)
 8007cbc:	3201      	adds	r2, #1
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8007cbe:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8007cc0:	9400      	str	r4, [sp, #0]
 8007cc2:	4826      	ldr	r0, [pc, #152]	; (8007d5c <bmk7_execute.8483+0x10c>)
 8007cc4:	f7fa f83c 	bl	8001d40 <chThdCreateStatic>
 8007cc8:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 8007cca:	f7ff ffb1 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8007cce:	f7fc f8bf 	bl	8003e50 <test_start_timer.constprop.21>
 8007cd2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8007d70 <bmk7_execute.8483+0x120>
 8007cd6:	2720      	movs	r7, #32
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8007cd8:	4626      	mov	r6, r4
 8007cda:	f387 8811 	msr	BASEPRI, r7
 8007cde:	4820      	ldr	r0, [pc, #128]	; (8007d60 <bmk7_execute.8483+0x110>)
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f7fa fb95 	bl	8002410 <chSemResetI>
 8007ce6:	2500      	movs	r5, #0
  chSchRescheduleS();
 8007ce8:	f7f9 fee2 	bl	8001ab0 <chSchRescheduleS>
 8007cec:	f386 8811 	msr	BASEPRI, r6
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007cf0:	f898 1000 	ldrb.w	r1, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8007cf4:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	d0ef      	beq.n	8007cda <bmk7_execute.8483+0x8a>
  test_terminate_threads();
 8007cfa:	f7f9 fcc1 	bl	8001680 <test_terminate_threads>
 8007cfe:	2320      	movs	r3, #32
 8007d00:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8007d04:	4816      	ldr	r0, [pc, #88]	; (8007d60 <bmk7_execute.8483+0x110>)
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7fa fb82 	bl	8002410 <chSemResetI>
  chSchRescheduleS();
 8007d0c:	f7f9 fed0 	bl	8001ab0 <chSchRescheduleS>
 8007d10:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8007d14:	f7fa fac4 	bl	80022a0 <test_wait_threads>

  test_print("--- Score : ");
 8007d18:	4812      	ldr	r0, [pc, #72]	; (8007d64 <bmk7_execute.8483+0x114>)
 8007d1a:	f7f9 fda1 	bl	8001860 <test_print>
  test_printn(n);
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f7f9 fdae 	bl	8001880 <test_printn>
  test_print(" reschedules/S, ");
 8007d24:	4810      	ldr	r0, [pc, #64]	; (8007d68 <bmk7_execute.8483+0x118>)
 8007d26:	f7f9 fd9b 	bl	8001860 <test_print>
  test_printn(n * 6);
 8007d2a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8007d2e:	0040      	lsls	r0, r0, #1
 8007d30:	f7f9 fda6 	bl	8001880 <test_printn>
  test_println(" ctxswc/S");
 8007d34:	480d      	ldr	r0, [pc, #52]	; (8007d6c <bmk7_execute.8483+0x11c>)
}
 8007d36:	b002      	add	sp, #8
 8007d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 8007d3c:	f7f9 bd78 	b.w	8001830 <test_println>
 8007d40:	20001e58 	.word	0x20001e58
 8007d44:	08005401 	.word	0x08005401
 8007d48:	200017e8 	.word	0x200017e8
 8007d4c:	20001fa8 	.word	0x20001fa8
 8007d50:	20001930 	.word	0x20001930
 8007d54:	20001a78 	.word	0x20001a78
 8007d58:	20001bc0 	.word	0x20001bc0
 8007d5c:	20001d08 	.word	0x20001d08
 8007d60:	20000d04 	.word	0x20000d04
 8007d64:	08009ffc 	.word	0x08009ffc
 8007d68:	0800a664 	.word	0x0800a664
 8007d6c:	0800a044 	.word	0x0800a044
 8007d70:	200017c0 	.word	0x200017c0
 8007d74:	f3af 8000 	nop.w
 8007d78:	f3af 8000 	nop.w
 8007d7c:	f3af 8000 	nop.w

08007d80 <bmk5_execute.8485>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8007d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d82:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <bmk5_execute.8485+0x50>)
 8007d84:	b083      	sub	sp, #12
 8007d86:	6998      	ldr	r0, [r3, #24]

  uint32_t n = 0;
 8007d88:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8007d8a:	6885      	ldr	r5, [r0, #8]
 8007d8c:	4f11      	ldr	r7, [pc, #68]	; (8007dd4 <bmk5_execute.8485+0x54>)
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8007d8e:	4626      	mov	r6, r4

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8007d90:	3d01      	subs	r5, #1
  test_wait_tick();
 8007d92:	f7ff ff4d 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8007d96:	f7fc f85b 	bl	8003e50 <test_start_timer.constprop.21>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8007d9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d9e:	462a      	mov	r2, r5
 8007da0:	4b0d      	ldr	r3, [pc, #52]	; (8007dd8 <bmk5_execute.8485+0x58>)
 8007da2:	9600      	str	r6, [sp, #0]
 8007da4:	480d      	ldr	r0, [pc, #52]	; (8007ddc <bmk5_execute.8485+0x5c>)
 8007da6:	f7f9 ffcb 	bl	8001d40 <chThdCreateStatic>
 8007daa:	f7fa fa59 	bl	8002260 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007dae:	7839      	ldrb	r1, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8007db0:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d0f1      	beq.n	8007d9a <bmk5_execute.8485+0x1a>
  test_print("--- Score : ");
 8007db6:	480a      	ldr	r0, [pc, #40]	; (8007de0 <bmk5_execute.8485+0x60>)
 8007db8:	f7f9 fd52 	bl	8001860 <test_print>
  test_printn(n);
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f7f9 fd5f 	bl	8001880 <test_printn>
  test_println(" threads/S");
 8007dc2:	4808      	ldr	r0, [pc, #32]	; (8007de4 <bmk5_execute.8485+0x64>)
}
 8007dc4:	b003      	add	sp, #12
 8007dc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8007dca:	f7f9 bd31 	b.w	8001830 <test_println>
 8007dce:	bf00      	nop
 8007dd0:	20001e58 	.word	0x20001e58
 8007dd4:	200017c0 	.word	0x200017c0
 8007dd8:	08005201 	.word	0x08005201
 8007ddc:	200017e8 	.word	0x200017e8
 8007de0:	08009ffc 	.word	0x08009ffc
 8007de4:	0800a01c 	.word	0x0800a01c
 8007de8:	f3af 8000 	nop.w
 8007dec:	f3af 8000 	nop.w

08007df0 <bmk4_execute.8487>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 8007df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <bmk4_execute.8487+0x98>)
 8007df6:	b082      	sub	sp, #8
 8007df8:	6998      	ldr	r0, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	6882      	ldr	r2, [r0, #8]
 8007dfe:	4b23      	ldr	r3, [pc, #140]	; (8007e8c <bmk4_execute.8487+0x9c>)
 8007e00:	3201      	adds	r2, #1
 8007e02:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e06:	9500      	str	r5, [sp, #0]
 8007e08:	4821      	ldr	r0, [pc, #132]	; (8007e90 <bmk4_execute.8487+0xa0>)
 8007e0a:	f7f9 ff99 	bl	8001d40 <chThdCreateStatic>
 8007e0e:	4921      	ldr	r1, [pc, #132]	; (8007e94 <bmk4_execute.8487+0xa4>)
 8007e10:	4604      	mov	r4, r0
 8007e12:	6008      	str	r0, [r1, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8007e14:	f7ff ff0c 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8007e18:	f7fc f81a 	bl	8003e50 <test_start_timer.constprop.21>
 8007e1c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8007ea0 <bmk4_execute.8487+0xb0>
 8007e20:	2720      	movs	r7, #32
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8007e22:	462e      	mov	r6, r5
 8007e24:	f387 8811 	msr	BASEPRI, r7
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f7f9 ff10 	bl	8001c50 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007e30:	4620      	mov	r0, r4
 8007e32:	2100      	movs	r1, #0
 8007e34:	f7f9 ff0c 	bl	8001c50 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007e38:	4620      	mov	r0, r4
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f7f9 ff08 	bl	8001c50 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8007e40:	4620      	mov	r0, r4
 8007e42:	2100      	movs	r1, #0
 8007e44:	f7f9 ff04 	bl	8001c50 <chSchWakeupS>
 8007e48:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007e4c:	f898 3000 	ldrb.w	r3, [r8]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8007e50:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0e6      	beq.n	8007e24 <bmk4_execute.8487+0x34>
 8007e56:	2020      	movs	r0, #32
 8007e58:	f380 8811 	msr	BASEPRI, r0
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8007e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e60:	4620      	mov	r0, r4
 8007e62:	f7f9 fef5 	bl	8001c50 <chSchWakeupS>
 8007e66:	2200      	movs	r2, #0
 8007e68:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  test_wait_threads();
 8007e6c:	f7fa fa18 	bl	80022a0 <test_wait_threads>
  test_print("--- Score : ");
 8007e70:	4809      	ldr	r0, [pc, #36]	; (8007e98 <bmk4_execute.8487+0xa8>)
 8007e72:	f7f9 fcf5 	bl	8001860 <test_print>
  test_printn(n * 2);
 8007e76:	0068      	lsls	r0, r5, #1
 8007e78:	f7f9 fd02 	bl	8001880 <test_printn>
  test_println(" ctxswc/S");
 8007e7c:	4807      	ldr	r0, [pc, #28]	; (8007e9c <bmk4_execute.8487+0xac>)
}
 8007e7e:	b002      	add	sp, #8
 8007e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8007e84:	f7f9 bcd4 	b.w	8001830 <test_println>
 8007e88:	20001e58 	.word	0x20001e58
 8007e8c:	08005391 	.word	0x08005391
 8007e90:	200017e8 	.word	0x200017e8
 8007e94:	20001fa8 	.word	0x20001fa8
 8007e98:	08009ffc 	.word	0x08009ffc
 8007e9c:	0800a044 	.word	0x0800a044
 8007ea0:	200017c0 	.word	0x200017c0
 8007ea4:	f3af 8000 	nop.w
 8007ea8:	f3af 8000 	nop.w
 8007eac:	f3af 8000 	nop.w

08007eb0 <msg_loop_test.8489.4107>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8007eb4:	f7ff febc 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8007eb8:	f7fb ffca 	bl	8003e50 <test_start_timer.constprop.21>
 8007ebc:	4e07      	ldr	r6, [pc, #28]	; (8007edc <msg_loop_test.8489.4107+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8007ebe:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	f7fa f814 	bl	8001ef0 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007ec8:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 8007eca:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0f7      	beq.n	8007ec0 <msg_loop_test.8489.4107+0x10>
  (void)chMsgSend(tp, 0);
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f7fa f80c 	bl	8001ef0 <chMsgSend>
  return n;
}
 8007ed8:	4620      	mov	r0, r4
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	200017c0 	.word	0x200017c0

08007ee0 <bmk1_execute.8496>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8007ee0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007ee2:	f641 6358 	movw	r3, #7768	; 0x1e58
 8007ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007eea:	6998      	ldr	r0, [r3, #24]
 8007eec:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8007eee:	6882      	ldr	r2, [r0, #8]
 8007ef0:	2400      	movs	r4, #0
 8007ef2:	f244 23d1 	movw	r3, #17105	; 0x42d1
 8007ef6:	f241 70e8 	movw	r0, #6120	; 0x17e8
 8007efa:	3a01      	subs	r2, #1
 8007efc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007f00:	9400      	str	r4, [sp, #0]
 8007f02:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f06:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007f0a:	f7f9 ff19 	bl	8001d40 <chThdCreateStatic>
 8007f0e:	f641 71a8 	movw	r1, #8104	; 0x1fa8
 8007f12:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007f16:	6008      	str	r0, [r1, #0]
  n = msg_loop_test(threads[0]);
 8007f18:	f7ff ffca 	bl	8007eb0 <msg_loop_test.8489.4107>
 8007f1c:	4604      	mov	r4, r0
  test_wait_threads();
 8007f1e:	f7fa f9bf 	bl	80022a0 <test_wait_threads>
  test_print("--- Score : ");
 8007f22:	f649 70fc 	movw	r0, #40956	; 0x9ffc
 8007f26:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007f2a:	f7f9 fc99 	bl	8001860 <test_print>
  test_printn(n);
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7f9 fca6 	bl	8001880 <test_printn>
  test_print(" msgs/S, ");
 8007f34:	f24a 6078 	movw	r0, #42616	; 0xa678
 8007f38:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007f3c:	f7f9 fc90 	bl	8001860 <test_print>
  test_printn(n << 1);
 8007f40:	0060      	lsls	r0, r4, #1
 8007f42:	f7f9 fc9d 	bl	8001880 <test_printn>
  test_println(" ctxswc/S");
 8007f46:	f24a 0044 	movw	r0, #41028	; 0xa044
 8007f4a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8007f4e:	b002      	add	sp, #8
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8007f54:	f7f9 bc6c 	b.w	8001830 <test_println>
 8007f58:	f3af 8000 	nop.w
 8007f5c:	f3af 8000 	nop.w

08007f60 <bmk2_execute.8494>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8007f60:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007f62:	f641 6358 	movw	r3, #7768	; 0x1e58
 8007f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007f6a:	6998      	ldr	r0, [r3, #24]
 8007f6c:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007f6e:	6882      	ldr	r2, [r0, #8]
 8007f70:	2400      	movs	r4, #0
 8007f72:	f244 23d1 	movw	r3, #17105	; 0x42d1
 8007f76:	f241 70e8 	movw	r0, #6120	; 0x17e8
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007f80:	9400      	str	r4, [sp, #0]
 8007f82:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007f8a:	f7f9 fed9 	bl	8001d40 <chThdCreateStatic>
 8007f8e:	f641 71a8 	movw	r1, #8104	; 0x1fa8
 8007f92:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007f96:	6008      	str	r0, [r1, #0]
  n = msg_loop_test(threads[0]);
 8007f98:	f7ff ff8a 	bl	8007eb0 <msg_loop_test.8489.4107>
 8007f9c:	4604      	mov	r4, r0
  test_wait_threads();
 8007f9e:	f7fa f97f 	bl	80022a0 <test_wait_threads>
  test_print("--- Score : ");
 8007fa2:	f649 70fc 	movw	r0, #40956	; 0x9ffc
 8007fa6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007faa:	f7f9 fc59 	bl	8001860 <test_print>
  test_printn(n);
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f7f9 fc66 	bl	8001880 <test_printn>
  test_print(" msgs/S, ");
 8007fb4:	f24a 6078 	movw	r0, #42616	; 0xa678
 8007fb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007fbc:	f7f9 fc50 	bl	8001860 <test_print>
  test_printn(n << 1);
 8007fc0:	0060      	lsls	r0, r4, #1
 8007fc2:	f7f9 fc5d 	bl	8001880 <test_printn>
  test_println(" ctxswc/S");
 8007fc6:	f24a 0044 	movw	r0, #41028	; 0xa044
 8007fca:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8007fce:	b002      	add	sp, #8
 8007fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8007fd4:	f7f9 bc2c 	b.w	8001830 <test_println>
 8007fd8:	f3af 8000 	nop.w
 8007fdc:	f3af 8000 	nop.w

08007fe0 <bmk3_execute.8492>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007fe4:	f641 6658 	movw	r6, #7768	; 0x1e58
 8007fe8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007fec:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007fee:	f241 75e8 	movw	r5, #6120	; 0x17e8
 8007ff2:	689a      	ldr	r2, [r3, #8]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8007ff4:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8007ff6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8007ffa:	f04f 0800 	mov.w	r8, #0
 8007ffe:	f244 23d1 	movw	r3, #17105	; 0x42d1
 8008002:	3201      	adds	r2, #1
 8008004:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008008:	f6c0 0300 	movt	r3, #2048	; 0x800
 800800c:	f8cd 8000 	str.w	r8, [sp]
 8008010:	4628      	mov	r0, r5
 8008012:	f7f9 fe95 	bl	8001d40 <chThdCreateStatic>
 8008016:	69b1      	ldr	r1, [r6, #24]
 8008018:	f641 74a8 	movw	r4, #8104	; 0x1fa8
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 800801c:	688b      	ldr	r3, [r1, #8]
 800801e:	f245 2701 	movw	r7, #20993	; 0x5201
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008022:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8008026:	f6c0 0700 	movt	r7, #2048	; 0x800
 800802a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 800802e:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8008030:	1e9a      	subs	r2, r3, #2
 8008032:	1868      	adds	r0, r5, r1
 8008034:	463b      	mov	r3, r7
 8008036:	f8cd 8000 	str.w	r8, [sp]
 800803a:	f7f9 fe81 	bl	8001d40 <chThdCreateStatic>
 800803e:	69b2      	ldr	r2, [r6, #24]
 8008040:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8008042:	6890      	ldr	r0, [r2, #8]
 8008044:	463b      	mov	r3, r7
 8008046:	1ec2      	subs	r2, r0, #3
 8008048:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800804c:	f8cd 8000 	str.w	r8, [sp]
 8008050:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8008054:	f7f9 fe74 	bl	8001d40 <chThdCreateStatic>
 8008058:	69b1      	ldr	r1, [r6, #24]
 800805a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800805c:	688b      	ldr	r3, [r1, #8]
 800805e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8008062:	1f1a      	subs	r2, r3, #4
 8008064:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008068:	463b      	mov	r3, r7
 800806a:	f8cd 8000 	str.w	r8, [sp]
 800806e:	f7f9 fe67 	bl	8001d40 <chThdCreateStatic>
 8008072:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8008074:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008078:	6892      	ldr	r2, [r2, #8]
 800807a:	463b      	mov	r3, r7
 800807c:	3a05      	subs	r2, #5
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800807e:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8008080:	f8cd 8000 	str.w	r8, [sp]
 8008084:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008088:	f7f9 fe5a 	bl	8001d40 <chThdCreateStatic>
 800808c:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	f7ff ff0e 	bl	8007eb0 <msg_loop_test.8489.4107>
 8008094:	4604      	mov	r4, r0
  test_wait_threads();
 8008096:	f7fa f903 	bl	80022a0 <test_wait_threads>
  test_print("--- Score : ");
 800809a:	f649 70fc 	movw	r0, #40956	; 0x9ffc
 800809e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80080a2:	f7f9 fbdd 	bl	8001860 <test_print>
  test_printn(n);
 80080a6:	4620      	mov	r0, r4
 80080a8:	f7f9 fbea 	bl	8001880 <test_printn>
  test_print(" msgs/S, ");
 80080ac:	f24a 6078 	movw	r0, #42616	; 0xa678
 80080b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80080b4:	f7f9 fbd4 	bl	8001860 <test_print>
  test_printn(n << 1);
 80080b8:	0060      	lsls	r0, r4, #1
 80080ba:	f7f9 fbe1 	bl	8001880 <test_printn>
  test_println(" ctxswc/S");
 80080be:	f24a 0044 	movw	r0, #41028	; 0xa044
 80080c2:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 80080c6:	b002      	add	sp, #8
 80080c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 80080cc:	f7f9 bbb0 	b.w	8001830 <test_println>

080080d0 <evt2_execute.7717>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	2520      	movs	r5, #32
 80080d6:	b08d      	sub	sp, #52	; 0x34
 80080d8:	f385 8811 	msr	BASEPRI, r5
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();

  events = (currp->p_epending |= events);
 80080dc:	4cb1      	ldr	r4, [pc, #708]	; (80083a4 <evt2_execute.7717+0x2d4>)
 80080de:	2100      	movs	r1, #0
 80080e0:	69a3      	ldr	r3, [r4, #24]
 80080e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e4:	f042 0007 	orr.w	r0, r2, #7
 80080e8:	6358      	str	r0, [r3, #52]	; 0x34
 80080ea:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 80080ee:	f7fb ff1f 	bl	8003f30 <chEvtWaitOne.constprop.40>
  test_assert(1, m == 1, "single event error");
 80080f2:	f1b0 0e01 	subs.w	lr, r0, #1
 80080f6:	f1de 0300 	rsbs	r3, lr, #0
 80080fa:	eb53 010e 	adcs.w	r1, r3, lr
 80080fe:	2001      	movs	r0, #1
 8008100:	f7f9 fb6e 	bl	80017e0 <_test_assert>
 8008104:	b110      	cbz	r0, 800810c <evt2_execute.7717+0x3c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 8008106:	b00d      	add	sp, #52	; 0x34
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 800810c:	f7fb ff10 	bl	8003f30 <chEvtWaitOne.constprop.40>
  test_assert(2, m == 2, "single event error");
 8008110:	1e82      	subs	r2, r0, #2
 8008112:	4250      	negs	r0, r2
 8008114:	eb50 0102 	adcs.w	r1, r0, r2
 8008118:	2002      	movs	r0, #2
 800811a:	f7f9 fb61 	bl	80017e0 <_test_assert>
 800811e:	2800      	cmp	r0, #0
 8008120:	d1f1      	bne.n	8008106 <evt2_execute.7717+0x36>
  m = chEvtWaitOne(ALL_EVENTS);
 8008122:	f7fb ff05 	bl	8003f30 <chEvtWaitOne.constprop.40>
  test_assert(3, m == 4, "single event error");
 8008126:	1f03      	subs	r3, r0, #4
 8008128:	4259      	negs	r1, r3
 800812a:	4159      	adcs	r1, r3
 800812c:	2003      	movs	r0, #3
 800812e:	f7f9 fb57 	bl	80017e0 <_test_assert>
 8008132:	2800      	cmp	r0, #0
 8008134:	d1e7      	bne.n	8008106 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008136:	f7fb fed3 	bl	8003ee0 <chEvtGetAndClearEvents.constprop.44>
  test_assert(4, m == 0, "stuck event");
 800813a:	f1d0 0101 	rsbs	r1, r0, #1
 800813e:	bf38      	it	cc
 8008140:	2100      	movcc	r1, #0
 8008142:	2004      	movs	r0, #4
 8008144:	f7f9 fb4c 	bl	80017e0 <_test_assert>
 8008148:	4606      	mov	r6, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d1db      	bne.n	8008106 <evt2_execute.7717+0x36>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 800814e:	f7ff fd6f 	bl	8007c30 <test_wait_tick>
 8008152:	f385 8811 	msr	BASEPRI, r5
 8008156:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800815a:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 800815e:	b2bf      	uxth	r7, r7
 8008160:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008164:	69a6      	ldr	r6, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008166:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800816a:	68b2      	ldr	r2, [r6, #8]
 800816c:	4b8e      	ldr	r3, [pc, #568]	; (80083a8 <evt2_execute.7717+0x2d8>)
 800816e:	3a01      	subs	r2, #1
 8008170:	9600      	str	r6, [sp, #0]
 8008172:	488e      	ldr	r0, [pc, #568]	; (80083ac <evt2_execute.7717+0x2dc>)
 8008174:	f7f9 fde4 	bl	8001d40 <chThdCreateStatic>
 8008178:	4e8d      	ldr	r6, [pc, #564]	; (80083b0 <evt2_execute.7717+0x2e0>)
 800817a:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800817c:	f7fb fed8 	bl	8003f30 <chEvtWaitOne.constprop.40>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8008180:	f107 0364 	add.w	r3, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8008184:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8008188:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 800818a:	b299      	uxth	r1, r3
 800818c:	2005      	movs	r0, #5
 800818e:	b292      	uxth	r2, r2
 8008190:	f7f9 fab6 	bl	8001700 <_test_assert_time_window>
 8008194:	2800      	cmp	r0, #0
 8008196:	d1b6      	bne.n	8008106 <evt2_execute.7717+0x36>
  test_assert(6, m == 1, "single event error");
 8008198:	2006      	movs	r0, #6
 800819a:	f1b9 0301 	subs.w	r3, r9, #1
 800819e:	4259      	negs	r1, r3
 80081a0:	4159      	adcs	r1, r3
 80081a2:	f7f9 fb1d 	bl	80017e0 <_test_assert>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d1ad      	bne.n	8008106 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80081aa:	f7fb fe99 	bl	8003ee0 <chEvtGetAndClearEvents.constprop.44>
  test_assert(7, m == 0, "stuck event");
 80081ae:	f1d0 0101 	rsbs	r1, r0, #1
 80081b2:	bf38      	it	cc
 80081b4:	2100      	movcc	r1, #0
 80081b6:	2007      	movs	r0, #7
 80081b8:	f7f9 fb12 	bl	80017e0 <_test_assert>
 80081bc:	4607      	mov	r7, r0
 80081be:	2800      	cmp	r0, #0
 80081c0:	d1a1      	bne.n	8008106 <evt2_execute.7717+0x36>
  test_wait_threads();
 80081c2:	f7fa f86d 	bl	80022a0 <test_wait_threads>
 80081c6:	f385 8811 	msr	BASEPRI, r5
 80081ca:	69a0      	ldr	r0, [r4, #24]
 80081cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80081ce:	f042 0305 	orr.w	r3, r2, #5
 80081d2:	6343      	str	r3, [r0, #52]	; 0x34
 80081d4:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 80081d8:	f7fb feca 	bl	8003f70 <chEvtWaitAny.constprop.39>
  test_assert(8, m == 5, "unexpected pending bit");
 80081dc:	f1b0 0c05 	subs.w	ip, r0, #5
 80081e0:	f1dc 0100 	rsbs	r1, ip, #0
 80081e4:	eb51 010c 	adcs.w	r1, r1, ip
 80081e8:	2008      	movs	r0, #8
 80081ea:	f7f9 faf9 	bl	80017e0 <_test_assert>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d189      	bne.n	8008106 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80081f2:	f7fb fe75 	bl	8003ee0 <chEvtGetAndClearEvents.constprop.44>
  test_assert(9, m == 0, "stuck event");
 80081f6:	f1d0 0101 	rsbs	r1, r0, #1
 80081fa:	bf38      	it	cc
 80081fc:	2100      	movcc	r1, #0
 80081fe:	2009      	movs	r0, #9
 8008200:	f7f9 faee 	bl	80017e0 <_test_assert>
 8008204:	4607      	mov	r7, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	f47f af7d 	bne.w	8008106 <evt2_execute.7717+0x36>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 800820c:	f7ff fd10 	bl	8007c30 <test_wait_tick>
 8008210:	f385 8811 	msr	BASEPRI, r5
 8008214:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 8008218:	b2ad      	uxth	r5, r5
 800821a:	f387 8811 	msr	BASEPRI, r7
 800821e:	69a7      	ldr	r7, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008220:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008224:	68b8      	ldr	r0, [r7, #8]
 8008226:	4b60      	ldr	r3, [pc, #384]	; (80083a8 <evt2_execute.7717+0x2d8>)
 8008228:	1e42      	subs	r2, r0, #1
 800822a:	9700      	str	r7, [sp, #0]
 800822c:	485f      	ldr	r0, [pc, #380]	; (80083ac <evt2_execute.7717+0x2dc>)
 800822e:	f7f9 fd87 	bl	8001d40 <chThdCreateStatic>
 8008232:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8008234:	f7fb fe9c 	bl	8003f70 <chEvtWaitAny.constprop.39>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8008238:	f105 0364 	add.w	r3, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 800823c:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8008240:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8008242:	b299      	uxth	r1, r3
 8008244:	200a      	movs	r0, #10
 8008246:	b292      	uxth	r2, r2
 8008248:	f7f9 fa5a 	bl	8001700 <_test_assert_time_window>
 800824c:	2800      	cmp	r0, #0
 800824e:	f47f af5a 	bne.w	8008106 <evt2_execute.7717+0x36>
  test_assert(11, m == 1, "single event error");
 8008252:	200b      	movs	r0, #11
 8008254:	f1b7 0e01 	subs.w	lr, r7, #1
 8008258:	f1de 0100 	rsbs	r1, lr, #0
 800825c:	eb51 010e 	adcs.w	r1, r1, lr
 8008260:	f7f9 fabe 	bl	80017e0 <_test_assert>
 8008264:	2800      	cmp	r0, #0
 8008266:	f47f af4e 	bne.w	8008106 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800826a:	f7fb fe39 	bl	8003ee0 <chEvtGetAndClearEvents.constprop.44>
  test_assert(12, m == 0, "stuck event");
 800826e:	f1d0 0101 	rsbs	r1, r0, #1
 8008272:	bf38      	it	cc
 8008274:	2100      	movcc	r1, #0
 8008276:	200c      	movs	r0, #12
 8008278:	f7f9 fab2 	bl	80017e0 <_test_assert>
 800827c:	4607      	mov	r7, r0
 800827e:	2800      	cmp	r0, #0
 8008280:	f47f af41 	bne.w	8008106 <evt2_execute.7717+0x36>
  test_wait_threads();
 8008284:	f7fa f80c 	bl	80022a0 <test_wait_threads>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8008288:	4d4a      	ldr	r5, [pc, #296]	; (80083b4 <evt2_execute.7717+0x2e4>)
 800828a:	4b4b      	ldr	r3, [pc, #300]	; (80083b8 <evt2_execute.7717+0x2e8>)
 800828c:	602d      	str	r5, [r5, #0]
 800828e:	601b      	str	r3, [r3, #0]
 8008290:	f04f 0a20 	mov.w	sl, #32
 8008294:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008298:	6828      	ldr	r0, [r5, #0]
 800829a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 800829e:	69a2      	ldr	r2, [r4, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80082a0:	f849 0d28 	str.w	r0, [r9, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 80082a4:	2101      	movs	r1, #1
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80082aa:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 80082ac:	9104      	str	r1, [sp, #16]
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80082ae:	9006      	str	r0, [sp, #24]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80082b0:	f8c5 9000 	str.w	r9, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 80082b4:	9705      	str	r7, [sp, #20]
 80082b6:	f387 8811 	msr	BASEPRI, r7
 80082ba:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80082be:	6819      	ldr	r1, [r3, #0]
 80082c0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 80082c4:	69a2      	ldr	r2, [r4, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80082c6:	f848 1d14 	str.w	r1, [r8, #-20]!
  esp->es_next     = elp;
 80082ca:	f8c3 8000 	str.w	r8, [r3]
  elp->el_listener = currp;
  elp->el_events   = events;
 80082ce:	2304      	movs	r3, #4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80082d0:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 80082d4:	900b      	str	r0, [sp, #44]	; 0x2c
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 80082d6:	970a      	str	r7, [sp, #40]	; 0x28
 80082d8:	f387 8811 	msr	BASEPRI, r7
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 80082dc:	f7ff fca8 	bl	8007c30 <test_wait_tick>
 80082e0:	f38a 8811 	msr	BASEPRI, sl
 80082e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80082e8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80082ea:	fa1f fb81 	uxth.w	fp, r1
 80082ee:	f387 8811 	msr	BASEPRI, r7
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80082f2:	69a7      	ldr	r7, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80082f4:	4b31      	ldr	r3, [pc, #196]	; (80083bc <evt2_execute.7717+0x2ec>)
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	3a01      	subs	r2, #1
 8008300:	4b2f      	ldr	r3, [pc, #188]	; (80083c0 <evt2_execute.7717+0x2f0>)
 8008302:	482a      	ldr	r0, [pc, #168]	; (80083ac <evt2_execute.7717+0x2dc>)
 8008304:	f7f9 fd1c 	bl	8001d40 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8008308:	f10b 0764 	add.w	r7, fp, #100	; 0x64
 800830c:	b2bf      	uxth	r7, r7
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 800830e:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008310:	6030      	str	r0, [r6, #0]
 8008312:	f38a 8811 	msr	BASEPRI, sl

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8008316:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008318:	f002 0005 	and.w	r0, r2, #5
 800831c:	2805      	cmp	r0, #5
 800831e:	d005      	beq.n	800832c <evt2_execute.7717+0x25c>
    ctp->p_u.ewmask = events;
 8008320:	2105      	movs	r1, #5
 8008322:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8008324:	200b      	movs	r0, #11
 8008326:	f7f9 fd4b 	bl	8001dc0 <chSchGoSleepS>
 800832a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 800832c:	f022 0305 	bic.w	r3, r2, #5
 8008330:	6363      	str	r3, [r4, #52]	; 0x34
 8008332:	2000      	movs	r0, #0
 8008334:	f380 8811 	msr	BASEPRI, r0
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 8008338:	f10b 026e 	add.w	r2, fp, #110	; 0x6e
 800833c:	200d      	movs	r0, #13
 800833e:	4639      	mov	r1, r7
 8008340:	b292      	uxth	r2, r2
 8008342:	f7f9 f9dd 	bl	8001700 <_test_assert_time_window>
 8008346:	2800      	cmp	r0, #0
 8008348:	f47f aedd 	bne.w	8008106 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800834c:	f7fb fdc8 	bl	8003ee0 <chEvtGetAndClearEvents.constprop.44>
  test_assert(14, m == 0, "stuck event");
 8008350:	f1d0 0101 	rsbs	r1, r0, #1
 8008354:	bf38      	it	cc
 8008356:	2100      	movcc	r1, #0
 8008358:	200e      	movs	r0, #14
 800835a:	f7f9 fa41 	bl	80017e0 <_test_assert>
 800835e:	2800      	cmp	r0, #0
 8008360:	f47f aed1 	bne.w	8008106 <evt2_execute.7717+0x36>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8008364:	4c14      	ldr	r4, [pc, #80]	; (80083b8 <evt2_execute.7717+0x2e8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8008366:	f7f9 ff9b 	bl	80022a0 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 800836a:	4812      	ldr	r0, [pc, #72]	; (80083b4 <evt2_execute.7717+0x2e4>)
 800836c:	4649      	mov	r1, r9
 800836e:	f7f9 fb07 	bl	8001980 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8008372:	4620      	mov	r0, r4
 8008374:	4641      	mov	r1, r8
 8008376:	f7f9 fb03 	bl	8001980 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800837a:	6829      	ldr	r1, [r5, #0]
 800837c:	200f      	movs	r0, #15
 800837e:	1b4b      	subs	r3, r1, r5
 8008380:	425a      	negs	r2, r3
 8008382:	eb52 0103 	adcs.w	r1, r2, r3
 8008386:	f7f9 fa2b 	bl	80017e0 <_test_assert>
 800838a:	2800      	cmp	r0, #0
 800838c:	f47f aebb 	bne.w	8008106 <evt2_execute.7717+0x36>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8008390:	6821      	ldr	r1, [r4, #0]
 8008392:	2010      	movs	r0, #16
 8008394:	1b0b      	subs	r3, r1, r4
 8008396:	425a      	negs	r2, r3
 8008398:	eb52 0103 	adcs.w	r1, r2, r3
 800839c:	f7f9 fa20 	bl	80017e0 <_test_assert>
 80083a0:	e6b1      	b.n	8008106 <evt2_execute.7717+0x36>
 80083a2:	bf00      	nop
 80083a4:	20001e58 	.word	0x20001e58
 80083a8:	08007ab1 	.word	0x08007ab1
 80083ac:	200017e8 	.word	0x200017e8
 80083b0:	20001fa8 	.word	0x20001fa8
 80083b4:	20000c4c 	.word	0x20000c4c
 80083b8:	20000c5c 	.word	0x20000c5c
 80083bc:	0800a1cc 	.word	0x0800a1cc
 80083c0:	08002581 	.word	0x08002581
 80083c4:	f3af 8000 	nop.w
 80083c8:	f3af 8000 	nop.w
 80083cc:	f3af 8000 	nop.w

080083d0 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];
 80083d2:	f101 0311 	add.w	r3, r1, #17
 80083d6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80083da:	460d      	mov	r5, r1
 80083dc:	4606      	mov	r6, r0
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];

  if (sdup == NULL)
 80083de:	b1bc      	cbz	r4, 8008410 <sduDataReceived+0x40>
 80083e0:	2720      	movs	r7, #32
 80083e2:	f387 8811 	msr	BASEPRI, r7
 80083e6:	2104      	movs	r1, #4
 80083e8:	1860      	adds	r0, r4, r1
 80083ea:	f7f9 fdb9 	bl	8001f60 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 80083ee:	f105 0c02 	add.w	ip, r5, #2
 80083f2:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 80083f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 80083fa:	69a3      	ldr	r3, [r4, #24]
 80083fc:	69e0      	ldr	r0, [r4, #28]
 80083fe:	6962      	ldr	r2, [r4, #20]
 8008400:	1ac0      	subs	r0, r0, r3
 8008402:	8a4b      	ldrh	r3, [r1, #18]
 8008404:	1a81      	subs	r1, r0, r2
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8008406:	428b      	cmp	r3, r1
 8008408:	d903      	bls.n	8008412 <sduDataReceived+0x42>
 800840a:	2000      	movs	r0, #0
 800840c:	f380 8811 	msr	BASEPRI, r0
 8008410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008412:	2000      	movs	r0, #0
 8008414:	f380 8811 	msr	BASEPRI, r0
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 8008418:	fbb1 f2f3 	udiv	r2, r1, r3
 800841c:	fb03 f302 	mul.w	r3, r3, r2
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8008420:	f8dc 1004 	ldr.w	r1, [ip, #4]

  osp->rxqueued           = TRUE;
 8008424:	2201      	movs	r2, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8008426:	6989      	ldr	r1, [r1, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8008428:	340c      	adds	r4, #12

  osp->rxqueued           = TRUE;
 800842a:	700a      	strb	r2, [r1, #0]
  osp->mode.queue.rxqueue = iqp;
 800842c:	60cc      	str	r4, [r1, #12]
  osp->rxsize             = n;
 800842e:	604b      	str	r3, [r1, #4]
  osp->rxcnt              = 0;
 8008430:	6088      	str	r0, [r1, #8]

  usb_lld_prepare_receive(usbp, ep);
 8008432:	4630      	mov	r0, r6
 8008434:	4629      	mov	r1, r5
 8008436:	f7fd fc8b 	bl	8005d50 <usb_lld_prepare_receive>
 800843a:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    usbStartReceiveI(usbp, ep);
 800843e:	4630      	mov	r0, r6
 8008440:	4629      	mov	r1, r5
 8008442:	f7fd fc65 	bl	8005d10 <usbStartReceiveI>
 8008446:	e7e0      	b.n	800840a <sduDataReceived+0x3a>
 8008448:	f3af 8000 	nop.w
 800844c:	f3af 8000 	nop.w

08008450 <SI_Thread.11363>:

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 8008450:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  (void)arg;
  chRegSetThreadName("si4432");
 8008454:	4bcd      	ldr	r3, [pc, #820]	; (800878c <SI_Thread.11363+0x33c>)
 8008456:	4ace      	ldr	r2, [pc, #824]	; (8008790 <SI_Thread.11363+0x340>)
 8008458:	6998      	ldr	r0, [r3, #24]

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 800845a:	b0b9      	sub	sp, #228	; 0xe4

  (void)arg;
  chRegSetThreadName("si4432");
 800845c:	6182      	str	r2, [r0, #24]
 800845e:	2120      	movs	r1, #32
 8008460:	f381 8811 	msr	BASEPRI, r1
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8008464:	4ccb      	ldr	r4, [pc, #812]	; (8008794 <SI_Thread.11363+0x344>)
 8008466:	4ecc      	ldr	r6, [pc, #816]	; (8008798 <SI_Thread.11363+0x348>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8008468:	7825      	ldrb	r5, [r4, #0]
 800846a:	6066      	str	r6, [r4, #4]
 800846c:	2d01      	cmp	r5, #1
 800846e:	f000 831d 	beq.w	8008aac <SI_Thread.11363+0x65c>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8008472:	8975      	ldrh	r5, [r6, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008474:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8008476:	f405 6300 	and.w	r3, r5, #2048	; 0x800
 800847a:	b29a      	uxth	r2, r3
 800847c:	2a00      	cmp	r2, #0
 800847e:	f000 830d 	beq.w	8008a9c <SI_Thread.11363+0x64c>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008482:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008484:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008488:	f427 6670 	bic.w	r6, r7, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 800848c:	f441 62a0 	orr.w	r2, r1, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008490:	f446 63a0 	orr.w	r3, r6, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008494:	62a2      	str	r2, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008496:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8008498:	69e6      	ldr	r6, [r4, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 800849a:	f445 7541 	orr.w	r5, r5, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 800849e:	2200      	movs	r2, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80084a0:	2307      	movs	r3, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80084a2:	8032      	strh	r2, [r6, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80084a4:	8035      	strh	r5, [r6, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80084a6:	80b3      	strh	r3, [r6, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80084a8:	8837      	ldrh	r7, [r6, #0]
 80084aa:	b2b8      	uxth	r0, r7
 80084ac:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80084b0:	8031      	strh	r1, [r6, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 80084b2:	2602      	movs	r6, #2
 80084b4:	7026      	strb	r6, [r4, #0]
 80084b6:	f382 8811 	msr	BASEPRI, r2
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	/* Reset the radio */
	SDN_HIGH;
 80084ba:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 80084be:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80084c2:	f44f 7500 	mov.w	r5, #512	; 0x200
	chThdSleepMilliseconds(10);
 80084c6:	2014      	movs	r0, #20
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	/* Reset the radio */
	SDN_HIGH;
 80084c8:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(10);
 80084ca:	f7fe fdf1 	bl	80070b0 <chThdSleep>
	SDN_LOW;						/*Radio is now reset*/
 80084ce:	6165      	str	r5, [r4, #20]
	chThdSleepMilliseconds(10);				/*Wait another 10ms to boot*/
 80084d0:	2014      	movs	r0, #20
 80084d2:	f7fe fded 	bl	80070b0 <chThdSleep>
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMilliseconds(10);}/*Wait for CTS high after POR*/
 80084d6:	68a2      	ldr	r2, [r4, #8]
 80084d8:	0513      	lsls	r3, r2, #20
 80084da:	d5f9      	bpl.n	80084d0 <SI_Thread.11363+0x80>
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 80084dc:	2702      	movs	r7, #2
 80084de:	2601      	movs	r6, #1
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 80084e0:	2007      	movs	r0, #7
 80084e2:	463a      	mov	r2, r7
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 80084e4:	248c      	movs	r4, #140	; 0x8c
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 80084e6:	a920      	add	r1, sp, #128	; 0x80
 80084e8:	ab19      	add	r3, sp, #100	; 0x64
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 80084ea:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 80084ee:	25ba      	movs	r5, #186	; 0xba
 80084f0:	2780      	movs	r7, #128	; 0x80
 80084f2:	f88d 6081 	strb.w	r6, [sp, #129]	; 0x81
 80084f6:	f88d 6082 	strb.w	r6, [sp, #130]	; 0x82
 80084fa:	f88d 6083 	strb.w	r6, [sp, #131]	; 0x83
 80084fe:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
 8008502:	f88d 7086 	strb.w	r7, [sp, #134]	; 0x86
 8008506:	f88d 5085 	strb.w	r5, [sp, #133]	; 0x85
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 800850a:	f000 fe09 	bl	8009120 <si446x_spi>
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 800850e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008512:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008516:	6898      	ldr	r0, [r3, #8]
 8008518:	6899      	ldr	r1, [r3, #8]
 800851a:	f000 0201 	and.w	r2, r0, #1
 800851e:	f3c1 2680 	ubfx	r6, r1, #10, #1
 8008522:	f086 0401 	eor.w	r4, r6, #1
 8008526:	4322      	orrs	r2, r4
 8008528:	bf18      	it	ne
 800852a:	461f      	movne	r7, r3
 800852c:	d00c      	beq.n	8008548 <SI_Thread.11363+0xf8>
 800852e:	2014      	movs	r0, #20
 8008530:	f7fe fdbe 	bl	80070b0 <chThdSleep>
 8008534:	68bd      	ldr	r5, [r7, #8]
 8008536:	68b8      	ldr	r0, [r7, #8]
 8008538:	f005 0301 	and.w	r3, r5, #1
 800853c:	f3c0 2180 	ubfx	r1, r0, #10, #1
 8008540:	f081 0201 	eor.w	r2, r1, #1
 8008544:	4313      	orrs	r3, r2
 8008546:	d1f2      	bne.n	800852e <SI_Thread.11363+0xde>
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8008548:	4e94      	ldr	r6, [pc, #592]	; (800879c <SI_Thread.11363+0x34c>)
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 800854a:	2500      	movs	r5, #0
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 800854c:	4637      	mov	r7, r6
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
 800854e:	2004      	movs	r0, #4
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8008550:	2420      	movs	r4, #32
	si446x_spi( 4, tx_buffer, 0, NULL);
 8008552:	a920      	add	r1, sp, #128	; 0x80
 8008554:	462a      	mov	r2, r5
 8008556:	462b      	mov	r3, r5
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8008558:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
 800855c:	f88d 5081 	strb.w	r5, [sp, #129]	; 0x81
 8008560:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
 8008564:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
	si446x_spi( 4, tx_buffer, 0, NULL);
 8008568:	f000 fdda 	bl	8009120 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 800856c:	f837 4b04 	ldrh.w	r4, [r7], #4
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8008570:	2002      	movs	r0, #2
 8008572:	220c      	movs	r2, #12
 8008574:	a920      	add	r1, sp, #128	; 0x80
 8008576:	ab19      	add	r3, sp, #100	; 0x64
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8008578:	f8ad 4008 	strh.w	r4, [sp, #8]
 800857c:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8008580:	f000 fdce 	bl	8009120 <si446x_spi>
	part=rx_buffer[3];//Should be 0x44
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8008584:	e897 0003 	ldmia.w	r7, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8008588:	4c85      	ldr	r4, [pc, #532]	; (80087a0 <SI_Thread.11363+0x350>)
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 800858a:	af0a      	add	r7, sp, #40	; 0x28
 800858c:	900a      	str	r0, [sp, #40]	; 0x28
 800858e:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
	si446x_spi( 6, tx_buffer, 0, NULL);
 8008592:	462a      	mov	r2, r5
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8008594:	e897 0003 	ldmia.w	r7, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
 8008598:	462b      	mov	r3, r5
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 800859a:	9020      	str	r0, [sp, #128]	; 0x80
 800859c:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
	si446x_spi( 6, tx_buffer, 0, NULL);
 80085a0:	2006      	movs	r0, #6
 80085a2:	a920      	add	r1, sp, #128	; 0x80
 80085a4:	f000 fdbc 	bl	8009120 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	f000 fe41 	bl	8009230 <si446x_set_frequency>
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80085ae:	487d      	ldr	r0, [pc, #500]	; (80087a4 <SI_Thread.11363+0x354>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80085b0:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80085b4:	f990 3000 	ldrsb.w	r3, [r0]
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80085b8:	af30      	add	r7, sp, #192	; 0xc0
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80085ba:	0498      	lsls	r0, r3, #18
 80085bc:	f7f8 fd82 	bl	80010c4 <__aeabi_i2f>
 80085c0:	f645 5140 	movw	r1, #23872	; 0x5d40
 80085c4:	f6c4 31c6 	movt	r1, #19398	; 0x4bc6
 80085c8:	f7f8 fe86 	bl	80012d8 <__aeabi_fdiv>
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 80085cc:	2100      	movs	r1, #0
 80085ce:	f2c4 3196 	movt	r1, #17302	; 0x4396
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 80085d2:	9001      	str	r0, [sp, #4]
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 80085d4:	f7f8 fdcc 	bl	8001170 <__aeabi_fmul>
 80085d8:	f7f8 f9b6 	bl	8000948 <__aeabi_f2d>
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80085e4:	f7f8 fa04 	bl	80009f0 <__aeabi_dmul>
 80085e8:	f7f8 fc42 	bl	8000e70 <__aeabi_d2uiz>
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 80085ec:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 80085f0:	ea4f 4a10 	mov.w	sl, r0, lsr #16
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 80085f4:	f8cd c000 	str.w	ip, [sp]
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 80085f8:	f88d a0d4 	strb.w	sl, [sp, #212]	; 0xd4
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 80085fc:	f04f 0c20 	mov.w	ip, #32
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8008600:	f8dd a000 	ldr.w	sl, [sp]
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 8008604:	4686      	mov	lr, r0
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8008606:	f04f 0911 	mov.w	r9, #17
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 800860a:	463b      	mov	r3, r7
 800860c:	462a      	mov	r2, r5
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 800860e:	f04f 0b03 	mov.w	fp, #3
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008612:	4641      	mov	r1, r8
 8008614:	2007      	movs	r0, #7
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8008616:	f88d c0d1 	strb.w	ip, [sp, #209]	; 0xd1
 800861a:	f04f 0c0a 	mov.w	ip, #10
 800861e:	f88d c0d3 	strb.w	ip, [sp, #211]	; 0xd3
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
 8008622:	f88d e0d6 	strb.w	lr, [sp, #214]	; 0xd6
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8008626:	f88d 90d0 	strb.w	r9, [sp, #208]	; 0xd0
 800862a:	f88d b0d2 	strb.w	fp, [sp, #210]	; 0xd2
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 800862e:	f88d a0d5 	strb.w	sl, [sp, #213]	; 0xd5
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008632:	f000 fd75 	bl	8009120 <si446x_spi>
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
 8008636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800863a:	9801      	ldr	r0, [sp, #4]
 800863c:	f2c4 513b 	movt	r1, #17723	; 0x453b
 8008640:	f7f8 fd96 	bl	8001170 <__aeabi_fmul>
 8008644:	f7f8 f980 	bl	8000948 <__aeabi_f2d>
 8008648:	2300      	movs	r3, #0
 800864a:	2200      	movs	r2, #0
 800864c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8008650:	f7f8 f9ce 	bl	80009f0 <__aeabi_dmul>
 8008654:	f7f8 fc0c 	bl	8000e70 <__aeabi_d2uiz>
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8008658:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800865c:	f88d a0d1 	strb.w	sl, [sp, #209]	; 0xd1
 8008660:	f04f 0a02 	mov.w	sl, #2
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
 8008664:	4686      	mov	lr, r0
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8008666:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 800866a:	4641      	mov	r1, r8
 800866c:	2006      	movs	r0, #6
 800866e:	463b      	mov	r3, r7
 8008670:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8008672:	f88d a0d2 	strb.w	sl, [sp, #210]	; 0xd2
 8008676:	f04f 0a04 	mov.w	sl, #4
 800867a:	f88d 90d0 	strb.w	r9, [sp, #208]	; 0xd0
 800867e:	f88d a0d3 	strb.w	sl, [sp, #211]	; 0xd3
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8008682:	f88d c0d4 	strb.w	ip, [sp, #212]	; 0xd4
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
 8008686:	f88d e0d5 	strb.w	lr, [sp, #213]	; 0xd5
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 800868a:	f000 fd49 	bl	8009120 <si446x_spi>
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 800868e:	4946      	ldr	r1, [pc, #280]	; (80087a8 <SI_Thread.11363+0x358>)
 8008690:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 8008694:	780a      	ldrb	r2, [r1, #0]
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008696:	2007      	movs	r0, #7
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8008698:	fb03 fe02 	mul.w	lr, r3, r2
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 800869c:	4641      	mov	r1, r8
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 800869e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80086a2:	463b      	mov	r3, r7
 80086a4:	462a      	mov	r2, r5
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 80086a6:	f04f 0a20 	mov.w	sl, #32
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 80086aa:	f88d c0d5 	strb.w	ip, [sp, #213]	; 0xd5
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
 80086ae:	f88d e0d6 	strb.w	lr, [sp, #214]	; 0xd6
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 80086b2:	f88d 90d0 	strb.w	r9, [sp, #208]	; 0xd0
 80086b6:	f88d a0d1 	strb.w	sl, [sp, #209]	; 0xd1
 80086ba:	f88d b0d2 	strb.w	fp, [sp, #210]	; 0xd2
 80086be:	f88d b0d3 	strb.w	fp, [sp, #211]	; 0xd3
 80086c2:	f88d 50d4 	strb.w	r5, [sp, #212]	; 0xd4
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80086c6:	f000 fd2b 	bl	8009120 <si446x_spi>
void si446x_set_modem(void) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
 80086ca:	4631      	mov	r1, r6
 80086cc:	f851 0f0c 	ldr.w	r0, [r1, #12]!
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80086d0:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
void si446x_set_modem(void) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
 80086d4:	790a      	ldrb	r2, [r1, #4]
 80086d6:	ab08      	add	r3, sp, #32
 80086d8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80086dc:	9008      	str	r0, [sp, #32]
 80086de:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80086e2:	462a      	mov	r2, r5
void si446x_set_modem(void) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
 80086e4:	9024      	str	r0, [sp, #144]	; 0x90
 80086e6:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80086ea:	2005      	movs	r0, #5
 80086ec:	4651      	mov	r1, sl
 80086ee:	ab03      	add	r3, sp, #12
 80086f0:	f000 fd16 	bl	8009120 <si446x_spi>
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
 80086f4:	4632      	mov	r2, r6
 80086f6:	f852 0f14 	ldr.w	r0, [r2, #20]!
 80086fa:	ab14      	add	r3, sp, #80	; 0x50
 80086fc:	8891      	ldrh	r1, [r2, #4]
 80086fe:	7992      	ldrb	r2, [r2, #6]
 8008700:	9014      	str	r0, [sp, #80]	; 0x50
 8008702:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
 8008706:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
 800870a:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 800870e:	462a      	mov	r2, r5
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
 8008710:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 8008714:	9024      	str	r0, [sp, #144]	; 0x90
 8008716:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 800871a:	2007      	movs	r0, #7
 800871c:	4651      	mov	r1, sl
 800871e:	ab03      	add	r3, sp, #12
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x22, 0x06, 0x00, 0x0A}, 7*sizeof(uint8_t));
 8008720:	f88d b096 	strb.w	fp, [sp, #150]	; 0x96
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8008724:	f000 fcfc 	bl	8009120 <si446x_spi>
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8008728:	46b6      	mov	lr, r6
 800872a:	f85e 0f1c 	ldr.w	r0, [lr, #28]!
 800872e:	ab1c      	add	r3, sp, #112	; 0x70
 8008730:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008734:	f8de 2008 	ldr.w	r2, [lr, #8]
 8008738:	f8be c00c 	ldrh.w	ip, [lr, #12]
 800873c:	c307      	stmia	r3!, {r0, r1, r2}
 800873e:	f89e 000e 	ldrb.w	r0, [lr, #14]
 8008742:	f8a3 c000 	strh.w	ip, [r3]
 8008746:	7098      	strb	r0, [r3, #2]
 8008748:	46d3      	mov	fp, sl
 800874a:	a91c      	add	r1, sp, #112	; 0x70
 800874c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800874e:	e8ab 0007 	stmia.w	fp!, {r0, r1, r2}
 8008752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008756:	f82b 3b02 	strh.w	r3, [fp], #2
 800875a:	f88b e000 	strb.w	lr, [fp]
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 800875e:	200f      	movs	r0, #15
 8008760:	4651      	mov	r1, sl
 8008762:	462a      	mov	r2, r5
 8008764:	ab03      	add	r3, sp, #12
 8008766:	f000 fcdb 	bl	8009120 <si446x_spi>
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 800876a:	4633      	mov	r3, r6
 800876c:	f853 0f2c 	ldr.w	r0, [r3, #44]!
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8008770:	f04f 0b0c 	mov.w	fp, #12
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8008774:	6859      	ldr	r1, [r3, #4]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800877e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008782:	2010      	movs	r0, #16
 8008784:	eb0d 030b 	add.w	r3, sp, fp
 8008788:	4651      	mov	r1, sl
 800878a:	e00f      	b.n	80087ac <SI_Thread.11363+0x35c>
 800878c:	20001e58 	.word	0x20001e58
 8008790:	0800a6a0 	.word	0x0800a6a0
 8008794:	20001500 	.word	0x20001500
 8008798:	0800a6b0 	.word	0x0800a6b0
 800879c:	08009cc0 	.word	0x08009cc0
 80087a0:	20000c54 	.word	0x20000c54
 80087a4:	20000c58 	.word	0x20000c58
 80087a8:	20000c50 	.word	0x20000c50
 80087ac:	462a      	mov	r2, r5
 80087ae:	f000 fcb7 	bl	8009120 <si446x_spi>
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80087b2:	4632      	mov	r2, r6
 80087b4:	f852 0f3c 	ldr.w	r0, [r2, #60]!
 80087b8:	ab12      	add	r3, sp, #72	; 0x48
 80087ba:	8891      	ldrh	r1, [r2, #4]
 80087bc:	7992      	ldrb	r2, [r2, #6]
 80087be:	9012      	str	r0, [sp, #72]	; 0x48
 80087c0:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
 80087c4:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
 80087c8:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80087cc:	462a      	mov	r2, r5
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80087ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80087d2:	eb0d 030b 	add.w	r3, sp, fp
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80087d6:	9024      	str	r0, [sp, #144]	; 0x90
 80087d8:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80087dc:	2007      	movs	r0, #7
 80087de:	4651      	mov	r1, sl
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 80087e0:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 80087e4:	f000 fc9c 	bl	8009120 <si446x_spi>
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 80087e8:	4631      	mov	r1, r6
 80087ea:	f851 0f44 	ldr.w	r0, [r1, #68]!
 80087ee:	ab10      	add	r3, sp, #64	; 0x40
 80087f0:	888a      	ldrh	r2, [r1, #4]
 80087f2:	9010      	str	r0, [sp, #64]	; 0x40
 80087f4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80087f8:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80087fc:	462a      	mov	r2, r5
 80087fe:	eb0d 030b 	add.w	r3, sp, fp
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8008802:	9024      	str	r0, [sp, #144]	; 0x90
 8008804:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008808:	2006      	movs	r0, #6
 800880a:	4651      	mov	r1, sl
 800880c:	f000 fc88 	bl	8009120 <si446x_spi>
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8008810:	4631      	mov	r1, r6
 8008812:	f851 0f4c 	ldr.w	r0, [r1, #76]!
 8008816:	ab0e      	add	r3, sp, #56	; 0x38
 8008818:	888a      	ldrh	r2, [r1, #4]
 800881a:	900e      	str	r0, [sp, #56]	; 0x38
 800881c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8008820:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008824:	462a      	mov	r2, r5
 8008826:	eb0d 030b 	add.w	r3, sp, fp
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 800882a:	9024      	str	r0, [sp, #144]	; 0x90
 800882c:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8008830:	2006      	movs	r0, #6
 8008832:	4651      	mov	r1, sl
 8008834:	f000 fc74 	bl	8009120 <si446x_spi>
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8008838:	4632      	mov	r2, r6
 800883a:	f852 0f54 	ldr.w	r0, [r2, #84]!
 800883e:	ab16      	add	r3, sp, #88	; 0x58
 8008840:	6851      	ldr	r1, [r2, #4]
 8008842:	7a12      	ldrb	r2, [r2, #8]
 8008844:	c303      	stmia	r3!, {r0, r1}
 8008846:	46d6      	mov	lr, sl
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	a916      	add	r1, sp, #88	; 0x58
 800884c:	c907      	ldmia	r1, {r0, r1, r2}
 800884e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8008852:	eb0d 030b 	add.w	r3, sp, fp
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8008856:	f88e 2000 	strb.w	r2, [lr]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 800885a:	2009      	movs	r0, #9
 800885c:	4651      	mov	r1, sl
 800885e:	462a      	mov	r2, r5
 8008860:	f000 fc5e 	bl	8009120 <si446x_spi>
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8008864:	4633      	mov	r3, r6
 8008866:	f853 0f60 	ldr.w	r0, [r3, #96]!
 800886a:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8008af4 <SI_Thread.11363+0x6a4>
 800886e:	6859      	ldr	r1, [r3, #4]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008876:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 800887a:	2009      	movs	r0, #9
 800887c:	eb0d 030b 	add.w	r3, sp, fp
 8008880:	4651      	mov	r1, sl
 8008882:	462a      	mov	r2, r5
 8008884:	f000 fc4c 	bl	8009120 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8008888:	4633      	mov	r3, r6
 800888a:	f853 0f70 	ldr.w	r0, [r3, #112]!
 800888e:	af2c      	add	r7, sp, #176	; 0xb0
 8008890:	6859      	ldr	r1, [r3, #4]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8008898:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 800889c:	2009      	movs	r0, #9
 800889e:	eb0d 030b 	add.w	r3, sp, fp
 80088a2:	4651      	mov	r1, sl
 80088a4:	462a      	mov	r2, r5
 80088a6:	f000 fc3b 	bl	8009120 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 80088aa:	4633      	mov	r3, r6
 80088ac:	f853 0f80 	ldr.w	r0, [r3, #128]!
 80088b0:	af28      	add	r7, sp, #160	; 0xa0
 80088b2:	6859      	ldr	r1, [r3, #4]
 80088b4:	689a      	ldr	r2, [r3, #8]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80088ba:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80088be:	2704      	movs	r7, #4
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 80088c0:	2009      	movs	r0, #9
 80088c2:	eb0d 030b 	add.w	r3, sp, fp
 80088c6:	4651      	mov	r1, sl
 80088c8:	462a      	mov	r2, r5
 80088ca:	f000 fc29 	bl	8009120 <si446x_spi>
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80088ce:	f88d 7092 	strb.w	r7, [sp, #146]	; 0x92
 80088d2:	274a      	movs	r7, #74	; 0x4a
 80088d4:	f88d 7093 	strb.w	r7, [sp, #147]	; 0x93
 80088d8:	273c      	movs	r7, #60	; 0x3c
 80088da:	f88d 7094 	strb.w	r7, [sp, #148]	; 0x94
 80088de:	2712      	movs	r7, #18
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 80088e0:	2008      	movs	r0, #8
 80088e2:	eb0d 030b 	add.w	r3, sp, fp
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80088e6:	f04f 0c20 	mov.w	ip, #32
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 80088ea:	4651      	mov	r1, sl
 80088ec:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 80088ee:	f88d 7096 	strb.w	r7, [sp, #150]	; 0x96
 80088f2:	273e      	movs	r7, #62	; 0x3e
 80088f4:	f88d 9090 	strb.w	r9, [sp, #144]	; 0x90
 80088f8:	f88d c091 	strb.w	ip, [sp, #145]	; 0x91
 80088fc:	f88d b095 	strb.w	fp, [sp, #149]	; 0x95
 8008900:	f88d 7097 	strb.w	r7, [sp, #151]	; 0x97
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8008904:	f000 fc0c 	bl	8009120 <si446x_spi>
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8008908:	f04f 0e24 	mov.w	lr, #36	; 0x24
 800890c:	27ff      	movs	r7, #255	; 0xff
 800890e:	f88d 9090 	strb.w	r9, [sp, #144]	; 0x90
 8008912:	f88d e094 	strb.w	lr, [sp, #148]	; 0x94
 8008916:	f04f 0930 	mov.w	r9, #48	; 0x30
 800891a:	f04f 0c41 	mov.w	ip, #65	; 0x41
 800891e:	f88d e097 	strb.w	lr, [sp, #151]	; 0x97
 8008922:	f04f 0e42 	mov.w	lr, #66	; 0x42
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008926:	2010      	movs	r0, #16
 8008928:	eb0d 030b 	add.w	r3, sp, fp
 800892c:	4651      	mov	r1, sl
 800892e:	462a      	mov	r2, r5
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8008930:	f88d 9091 	strb.w	r9, [sp, #145]	; 0x91
 8008934:	f88d 7095 	strb.w	r7, [sp, #149]	; 0x95
 8008938:	f88d c096 	strb.w	ip, [sp, #150]	; 0x96
 800893c:	f88d 7098 	strb.w	r7, [sp, #152]	; 0x98
 8008940:	f04f 0c43 	mov.w	ip, #67	; 0x43
 8008944:	f88d e099 	strb.w	lr, [sp, #153]	; 0x99
 8008948:	f04f 0952 	mov.w	r9, #82	; 0x52
 800894c:	f04f 0e4f 	mov.w	lr, #79	; 0x4f
 8008950:	f88d 709b 	strb.w	r7, [sp, #155]	; 0x9b
 8008954:	f88d 709e 	strb.w	r7, [sp, #158]	; 0x9e
 8008958:	2744      	movs	r7, #68	; 0x44
 800895a:	f88d c09c 	strb.w	ip, [sp, #156]	; 0x9c
 800895e:	f88d e09d 	strb.w	lr, [sp, #157]	; 0x9d
 8008962:	f88d b092 	strb.w	fp, [sp, #146]	; 0x92
 8008966:	f88d 909a 	strb.w	r9, [sp, #154]	; 0x9a
 800896a:	f88d 709f 	strb.w	r7, [sp, #159]	; 0x9f
 800896e:	f88d 5093 	strb.w	r5, [sp, #147]	; 0x93
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8008972:	f000 fbd5 	bl	8009120 <si446x_spi>
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
 8008976:	4632      	mov	r2, r6
 8008978:	f852 0f90 	ldr.w	r0, [r2, #144]!
 800897c:	a906      	add	r1, sp, #24
 800897e:	7913      	ldrb	r3, [r2, #4]
 8008980:	9006      	str	r0, [sp, #24]
 8008982:	f88d 301c 	strb.w	r3, [sp, #28]
 8008986:	c903      	ldmia	r1, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 8008988:	4637      	mov	r7, r6
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800898a:	eb0d 030b 	add.w	r3, sp, fp
 800898e:	462a      	mov	r2, r5
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
 8008990:	9024      	str	r0, [sp, #144]	; 0x90
 8008992:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008996:	2005      	movs	r0, #5
 8008998:	4651      	mov	r1, sl
 800899a:	f000 fbc1 	bl	8009120 <si446x_spi>
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 800899e:	f857 0f98 	ldr.w	r0, [r7, #152]!
 80089a2:	a904      	add	r1, sp, #16
 80089a4:	793a      	ldrb	r2, [r7, #4]
 80089a6:	9004      	str	r0, [sp, #16]
 80089a8:	f88d 2014 	strb.w	r2, [sp, #20]
 80089ac:	c903      	ldmia	r1, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80089ae:	4637      	mov	r7, r6
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80089b0:	eb0d 030b 	add.w	r3, sp, fp
 80089b4:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to use seperate FIELD config for RX, and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x80}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 80089b6:	9024      	str	r0, [sp, #144]	; 0x90
 80089b8:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80089bc:	2005      	movs	r0, #5
 80089be:	4651      	mov	r1, sl
 80089c0:	f000 fbae 	bl	8009120 <si446x_spi>
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80089c4:	f857 0fa0 	ldr.w	r0, [r7, #160]!
 80089c8:	ab0c      	add	r3, sp, #48	; 0x30
 80089ca:	88b9      	ldrh	r1, [r7, #4]
 80089cc:	900c      	str	r0, [sp, #48]	; 0x30
 80089ce:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 80089d2:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80089d6:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80089d8:	9024      	str	r0, [sp, #144]	; 0x90
 80089da:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80089de:	eb0d 030b 	add.w	r3, sp, fp
 80089e2:	2006      	movs	r0, #6
 80089e4:	4651      	mov	r1, sl
 80089e6:	f106 09a8 	add.w	r9, r6, #168	; 0xa8
 80089ea:	f000 fb99 	bl	8009120 <si446x_spi>
 80089ee:	4e3d      	ldr	r6, [pc, #244]	; (8008ae4 <SI_Thread.11363+0x694>)
	si446x_set_deviation_channel_bps(300, 3000, 200);
	si446x_set_modem();
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	chBSemWait(&Silabs_busy);/*Wait for something to happen...*/
	/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
	if(Command==1)
 80089f0:	4647      	mov	r7, r8
		Active_Frequency+=50;
	else if(Command==2)
		Active_Frequency-=50;
	else if(Command==3) {/*Load the string into the packet handler*/
		tx_buffer[0]=0x66;/*The load to FIFO command*/
 80089f2:	f04f 0b66 	mov.w	fp, #102	; 0x66
 80089f6:	e015      	b.n	8008a24 <SI_Thread.11363+0x5d4>
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	chBSemWait(&Silabs_busy);/*Wait for something to happen...*/
	/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
	if(Command==1)
		Active_Frequency+=50;
	else if(Command==2)
 80089f8:	7838      	ldrb	r0, [r7, #0]
 80089fa:	2802      	cmp	r0, #2
 80089fc:	d01d      	beq.n	8008a3a <SI_Thread.11363+0x5ea>
		Active_Frequency-=50;
	else if(Command==3) {/*Load the string into the packet handler*/
 80089fe:	783b      	ldrb	r3, [r7, #0]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d026      	beq.n	8008a52 <SI_Thread.11363+0x602>
		si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
		/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
		memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
		si446x_spi( 5, tx_buffer, 0, rx_buffer);
	}
	if(Command && Command<3) /*Load the frequency into the PLL*/
 8008a04:	f898 3000 	ldrb.w	r3, [r8]
 8008a08:	b113      	cbz	r3, 8008a10 <SI_Thread.11363+0x5c0>
 8008a0a:	7839      	ldrb	r1, [r7, #0]
 8008a0c:	2902      	cmp	r1, #2
 8008a0e:	d91c      	bls.n	8008a4a <SI_Thread.11363+0x5fa>
 8008a10:	2220      	movs	r2, #32
 8008a12:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008a16:	68b0      	ldr	r0, [r6, #8]
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dd12      	ble.n	8008a42 <SI_Thread.11363+0x5f2>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008a1c:	f7f9 f848 	bl	8001ab0 <chSchRescheduleS>
 8008a20:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8008a24:	482f      	ldr	r0, [pc, #188]	; (8008ae4 <SI_Thread.11363+0x694>)
 8008a26:	f7f9 fa03 	bl	8001e30 <chSemWait>
	si446x_set_deviation_channel_bps(300, 3000, 200);
	si446x_set_modem();
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	chBSemWait(&Silabs_busy);/*Wait for something to happen...*/
	/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
	if(Command==1)
 8008a2a:	f898 2000 	ldrb.w	r2, [r8]
 8008a2e:	2a01      	cmp	r2, #1
 8008a30:	d1e2      	bne.n	80089f8 <SI_Thread.11363+0x5a8>
		Active_Frequency+=50;
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	3032      	adds	r0, #50	; 0x32
 8008a36:	6020      	str	r0, [r4, #0]
 8008a38:	e7e4      	b.n	8008a04 <SI_Thread.11363+0x5b4>
	else if(Command==2)
		Active_Frequency-=50;
 8008a3a:	6822      	ldr	r2, [r4, #0]
 8008a3c:	3a32      	subs	r2, #50	; 0x32
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	e7e0      	b.n	8008a04 <SI_Thread.11363+0x5b4>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8008a42:	4828      	ldr	r0, [pc, #160]	; (8008ae4 <SI_Thread.11363+0x694>)
 8008a44:	f7f9 fcd4 	bl	80023f0 <chSemSignalI>
 8008a48:	e7e8      	b.n	8008a1c <SI_Thread.11363+0x5cc>
		/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
		memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
		si446x_spi( 5, tx_buffer, 0, rx_buffer);
	}
	if(Command && Command<3) /*Load the frequency into the PLL*/
		si446x_set_frequency(Active_Frequency);
 8008a4a:	6820      	ldr	r0, [r4, #0]
 8008a4c:	f000 fbf0 	bl	8009230 <si446x_set_frequency>
 8008a50:	e7de      	b.n	8008a10 <SI_Thread.11363+0x5c0>
		Active_Frequency+=50;
	else if(Command==2)
		Active_Frequency-=50;
	else if(Command==3) {/*Load the string into the packet handler*/
		tx_buffer[0]=0x66;/*The load to FIFO command*/
		strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
 8008a52:	4925      	ldr	r1, [pc, #148]	; (8008ae8 <SI_Thread.11363+0x698>)
 8008a54:	f10d 0081 	add.w	r0, sp, #129	; 0x81
	if(Command==1)
		Active_Frequency+=50;
	else if(Command==2)
		Active_Frequency-=50;
	else if(Command==3) {/*Load the string into the packet handler*/
		tx_buffer[0]=0x66;/*The load to FIFO command*/
 8008a58:	f88d b080 	strb.w	fp, [sp, #128]	; 0x80
		strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
 8008a5c:	f001 f858 	bl	8009b10 <strcpy>
		si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8008a60:	4821      	ldr	r0, [pc, #132]	; (8008ae8 <SI_Thread.11363+0x698>)
 8008a62:	f001 f8b5 	bl	8009bd0 <strlen>
 8008a66:	1c41      	adds	r1, r0, #1
 8008a68:	b2c8      	uxtb	r0, r1
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	a920      	add	r1, sp, #128	; 0x80
 8008a6e:	ab19      	add	r3, sp, #100	; 0x64
 8008a70:	f000 fb56 	bl	8009120 <si446x_spi>
		/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
		memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008a74:	e899 0003 	ldmia.w	r9, {r0, r1}
 8008a78:	f8ca 0000 	str.w	r0, [sl]
 8008a7c:	f88d 1094 	strb.w	r1, [sp, #148]	; 0x94
 8008a80:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
 8008a84:	e89a 0003 	ldmia.w	sl, {r0, r1}
		si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008a88:	2200      	movs	r2, #0
	else if(Command==3) {/*Load the string into the packet handler*/
		tx_buffer[0]=0x66;/*The load to FIFO command*/
		strcpy(&tx_buffer[1],Command_string);/*Followed by the payload*/
		si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
		/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
		memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8008a8a:	9020      	str	r0, [sp, #128]	; 0x80
 8008a8c:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
		si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8008a90:	2005      	movs	r0, #5
 8008a92:	a920      	add	r1, sp, #128	; 0x80
 8008a94:	ab19      	add	r3, sp, #100	; 0x64
 8008a96:	f000 fb43 	bl	8009120 <si446x_spi>
 8008a9a:	e7b3      	b.n	8008a04 <SI_Thread.11363+0x5b4>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008a9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008a9e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008aa2:	f427 6170 	bic.w	r1, r7, #3840	; 0xf00
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008aa6:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008aa8:	62e1      	str	r1, [r4, #44]	; 0x2c
 8008aaa:	e4f5      	b.n	8008498 <SI_Thread.11363+0x48>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8008aac:	490f      	ldr	r1, [pc, #60]	; (8008aec <SI_Thread.11363+0x69c>)
 8008aae:	4622      	mov	r2, r4
 8008ab0:	6a20      	ldr	r0, [r4, #32]
 8008ab2:	f7fb fadd 	bl	8004070 <dmaStreamAllocate.constprop.13>
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008ab6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
      b = dmaStreamAllocate(spip->dmarx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8008aba:	490d      	ldr	r1, [pc, #52]	; (8008af0 <SI_Thread.11363+0x6a0>)
 8008abc:	4622      	mov	r2, r4
 8008abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ac0:	f7fb fad6 	bl	8004070 <dmaStreamAllocate.constprop.13>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008ac4:	f2c4 0602 	movt	r6, #16386	; 0x4002
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008ac8:	6a27      	ldr	r7, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008acc:	69b5      	ldr	r5, [r6, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008ace:	69e2      	ldr	r2, [r4, #28]
 8008ad0:	6838      	ldr	r0, [r7, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008ad2:	6819      	ldr	r1, [r3, #0]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008ad4:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8008ad6:	f445 5780 	orr.w	r7, r5, #4096	; 0x1000
 8008ada:	61b7      	str	r7, [r6, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8008adc:	6082      	str	r2, [r0, #8]
 8008ade:	6866      	ldr	r6, [r4, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8008ae0:	608a      	str	r2, [r1, #8]
 8008ae2:	e4c6      	b.n	8008472 <SI_Thread.11363+0x22>
 8008ae4:	20001530 	.word	0x20001530
 8008ae8:	2000153c 	.word	0x2000153c
 8008aec:	080035d1 	.word	0x080035d1
 8008af0:	08004151 	.word	0x08004151
 8008af4:	200014fc 	.word	0x200014fc
 8008af8:	f3af 8000 	nop.w
 8008afc:	f3af 8000 	nop.w

08008b00 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8008b00:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8008b02:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8008b06:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d047      	beq.n	8008b9c <_usb_ep0in+0x9c>
 8008b0c:	2b05      	cmp	r3, #5
 8008b0e:	d047      	beq.n	8008ba0 <_usb_ep0in+0xa0>
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d01c      	beq.n	8008b4e <_usb_ep0in+0x4e>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8008b14:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8008b18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008b1c:	6819      	ldr	r1, [r3, #0]
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8008b1e:	6842      	ldr	r2, [r0, #4]
 8008b20:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 8008b24:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008b28:	f081 0110 	eor.w	r1, r1, #16
 8008b2c:	6019      	str	r1, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8008b36:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008b3a:	f481 5180 	eor.w	r1, r1, #4096	; 0x1000
 8008b3e:	6019      	str	r1, [r3, #0]
 8008b40:	b10a      	cbz	r2, 8008b46 <_usb_ep0in+0x46>
 8008b42:	2105      	movs	r1, #5
 8008b44:	4790      	blx	r2
  usbp->ep0state = USB_EP0_ERROR;
 8008b46:	2006      	movs	r0, #6
 8008b48:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 8008b4c:	bd38      	pop	{r3, r4, r5, pc}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8008b4e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8008b52:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8008b56:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8008b58:	ea43 2105 	orr.w	r1, r3, r5, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8008b5c:	4291      	cmp	r1, r2
 8008b5e:	68c3      	ldr	r3, [r0, #12]
 8008b60:	d905      	bls.n	8008b6e <_usb_ep0in+0x6e>
 8008b62:	8a19      	ldrh	r1, [r3, #16]
 8008b64:	fbb2 f5f1 	udiv	r5, r2, r1
 8008b68:	fb01 2515 	mls	r5, r1, r5, r2
 8008b6c:	b1fd      	cbz	r5, 8008bae <_usb_ep0in+0xae>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8008b6e:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = FALSE;
 8008b70:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8008b72:	2003      	movs	r0, #3
 8008b74:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8008b7c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8008b7e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8008b80:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8008b82:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8008b84:	f7fd f8e4 	bl	8005d50 <usb_lld_prepare_receive>
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f382 8811 	msr	BASEPRI, r2
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0);
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7fd f8bd 	bl	8005d10 <usbStartReceiveI>
 8008b96:	f385 8811 	msr	BASEPRI, r5
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	68c3      	ldr	r3, [r0, #12]
 8008b9e:	e7e6      	b.n	8008b6e <_usb_ep0in+0x6e>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL)
 8008ba0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008ba2:	b103      	cbz	r3, 8008ba6 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 8008ba4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
    max = usbFetchWord(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
 8008bae:	4629      	mov	r1, r5
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	f7fc f905 	bl	8004dc0 <usbPrepareTransmit.constprop.7>
 8008bb6:	2020      	movs	r0, #32
 8008bb8:	f380 8811 	msr	BASEPRI, r0
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7fd f886 	bl	8005cd0 <usbStartTransmitI>
 8008bc4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8008bc8:	2202      	movs	r2, #2
 8008bca:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8008bce:	bd38      	pop	{r3, r4, r5, pc}

08008bd0 <thread4.7051>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 8008bd0:	b508      	push	{r3, lr}
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008bd8:	6881      	ldr	r1, [r0, #8]
 8008bda:	2900      	cmp	r1, #0
 8008bdc:	dd05      	ble.n	8008bea <thread4.7051+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008bde:	f7f8 ff67 	bl	8001ab0 <chSchRescheduleS>
 8008be2:	2000      	movs	r0, #0
 8008be4:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 8008be8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8008bea:	f7f9 fc01 	bl	80023f0 <chSemSignalI>
 8008bee:	e7f6      	b.n	8008bde <thread4.7051+0xe>

08008bf0 <silabs_send_command.4353>:
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8008bf0:	2901      	cmp	r1, #1
	Command=2;
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008bf2:	b570      	push	{r4, r5, r6, lr}
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	4614      	mov	r4, r2
	if (argc != 1) {
 8008bf8:	d13b      	bne.n	8008c72 <silabs_send_command.4353+0x82>
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
 8008bfa:	6810      	ldr	r0, [r2, #0]
 8008bfc:	f000 ffe8 	bl	8009bd0 <strlen>
 8008c00:	2806      	cmp	r0, #6
 8008c02:	d005      	beq.n	8008c10 <silabs_send_command.4353+0x20>
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8008c04:	491f      	ldr	r1, [pc, #124]	; (8008c84 <silabs_send_command.4353+0x94>)
 8008c06:	4628      	mov	r0, r5
	strcpy(Command_string,argv[0]);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
	RF_switch(0);
}
 8008c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8008c0c:	f7fe bc18 	b.w	8007440 <chprintf.11382>
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8008c10:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8008c14:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8008c18:	2610      	movs	r6, #16
	else
		palSetPad(GPIOB, GPIOB_RFSWITCH_B);
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
 8008c1a:	2046      	movs	r0, #70	; 0x46
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8008c1c:	612e      	str	r6, [r5, #16]
	else
		palSetPad(GPIOB, GPIOB_RFSWITCH_B);
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
 8008c1e:	f7fe fa47 	bl	80070b0 <chThdSleep>
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
	palClearPad(GPIOB, GPIOB_RFSWITCH_B);/*Clear both the pins*/
 8008c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
		return;
	}
	RF_switch(1);
	strcpy(Command_string,argv[0]);
 8008c26:	6821      	ldr	r1, [r4, #0]
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else
		palSetPad(GPIOB, GPIOB_RFSWITCH_B);
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8008c28:	616e      	str	r6, [r5, #20]
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
		return;
	}
	RF_switch(1);
	strcpy(Command_string,argv[0]);
 8008c2a:	4817      	ldr	r0, [pc, #92]	; (8008c88 <silabs_send_command.4353+0x98>)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else
		palSetPad(GPIOB, GPIOB_RFSWITCH_B);
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
	palClearPad(GPIOB, GPIOB_RFSWITCH_B);/*Clear both the pins*/
 8008c2c:	616b      	str	r3, [r5, #20]
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
		return;
	}
	RF_switch(1);
	strcpy(Command_string,argv[0]);
 8008c2e:	f000 ff6f 	bl	8009b10 <strcpy>
	Command=3;	
 8008c32:	4816      	ldr	r0, [pc, #88]	; (8008c8c <silabs_send_command.4353+0x9c>)
 8008c34:	2203      	movs	r2, #3
 8008c36:	7002      	strb	r2, [r0, #0]
 8008c38:	2120      	movs	r1, #32
 8008c3a:	f381 8811 	msr	BASEPRI, r1
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008c3e:	4814      	ldr	r0, [pc, #80]	; (8008c90 <silabs_send_command.4353+0xa0>)
 8008c40:	6884      	ldr	r4, [r0, #8]
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	dd1a      	ble.n	8008c7c <silabs_send_command.4353+0x8c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008c46:	f7f8 ff33 	bl	8001ab0 <chSchRescheduleS>
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	f385 8811 	msr	BASEPRI, r5
 */
void RF_switch(uint8_t state) {
	if(state)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else
		palSetPad(GPIOB, GPIOB_RFSWITCH_B);
 8008c50:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8008c54:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8008c58:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8008c5c:	480c      	ldr	r0, [pc, #48]	; (8008c90 <silabs_send_command.4353+0xa0>)
 8008c5e:	f7f9 f8e7 	bl	8001e30 <chSemWait>
 8008c62:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(35);/*Spec is 30ms switching time max*/
 8008c64:	2046      	movs	r0, #70	; 0x46
 8008c66:	f7fe fa23 	bl	80070b0 <chThdSleep>
	palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	6163      	str	r3, [r4, #20]
	palClearPad(GPIOB, GPIOB_RFSWITCH_B);/*Clear both the pins*/
 8008c6e:	6165      	str	r5, [r4, #20]
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
	chBSemWait(&Silabs_busy);
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8008c72:	4908      	ldr	r1, [pc, #32]	; (8008c94 <silabs_send_command.4353+0xa4>)
	strcpy(Command_string,argv[0]);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
	RF_switch(0);
}
 8008c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	chBSemWait(&Silabs_busy);
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8008c78:	f7fe bbe2 	b.w	8007440 <chprintf.11382>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8008c7c:	f7f9 fbb8 	bl	80023f0 <chSemSignalI>
 8008c80:	e7e1      	b.n	8008c46 <silabs_send_command.4353+0x56>
 8008c82:	bf00      	nop
 8008c84:	0800a764 	.word	0x0800a764
 8008c88:	2000153c 	.word	0x2000153c
 8008c8c:	200014fc 	.word	0x200014fc
 8008c90:	20001530 	.word	0x20001530
 8008c94:	0800a740 	.word	0x0800a740
 8008c98:	f3af 8000 	nop.w
 8008c9c:	f3af 8000 	nop.w

08008ca0 <silabs_tune_down.4393>:
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8008ca0:	2900      	cmp	r1, #0
	Command=1;
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008ca2:	b508      	push	{r3, lr}
	if (argc > 0) {
 8008ca4:	dd04      	ble.n	8008cb0 <silabs_tune_down.4393+0x10>
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 8008ca6:	490e      	ldr	r1, [pc, #56]	; (8008ce0 <silabs_tune_down.4393+0x40>)
		return;
	}
	Command=2;
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}
 8008ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	chBSemWait(&Silabs_busy);
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 8008cac:	f7fe bbc8 	b.w	8007440 <chprintf.11382>
		return;
	}
	Command=2;
 8008cb0:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <silabs_tune_down.4393+0x44>)
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	2020      	movs	r0, #32
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8008cbc:	480a      	ldr	r0, [pc, #40]	; (8008ce8 <silabs_tune_down.4393+0x48>)
 8008cbe:	6881      	ldr	r1, [r0, #8]
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	dd09      	ble.n	8008cd8 <silabs_tune_down.4393+0x38>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8008cc4:	f7f8 fef4 	bl	8001ab0 <chSchRescheduleS>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f382 8811 	msr	BASEPRI, r2
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8008cce:	4806      	ldr	r0, [pc, #24]	; (8008ce8 <silabs_tune_down.4393+0x48>)
	chBSemSignal(&Silabs_busy);
	chBSemWait(&Silabs_busy);
}
 8008cd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008cd4:	f7f9 b8ac 	b.w	8001e30 <chSemWait>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8008cd8:	f7f9 fb8a 	bl	80023f0 <chSemSignalI>
 8008cdc:	e7f2      	b.n	8008cc4 <silabs_tune_down.4393+0x24>
 8008cde:	bf00      	nop
 8008ce0:	0800a78c 	.word	0x0800a78c
 8008ce4:	200014fc 	.word	0x200014fc
 8008ce8:	20001530 	.word	0x20001530
 8008cec:	f3af 8000 	nop.w

08008cf0 <usb_event.11190>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8008cf0:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8008cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	4606      	mov	r6, r0
  extern SerialUSBDriver SDU1;

  switch (event) {
 8008cf8:	d145      	bne.n	8008d86 <usb_event.11190+0x96>
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8008d00:	4c21      	ldr	r4, [pc, #132]	; (8008d88 <usb_event.11190+0x98>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8008d02:	2101      	movs	r1, #1
 8008d04:	4a21      	ldr	r2, [pc, #132]	; (8008d8c <usb_event.11190+0x9c>)
 8008d06:	f7fd f8ab 	bl	8005e60 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4a20      	ldr	r2, [pc, #128]	; (8008d90 <usb_event.11190+0xa0>)
 8008d10:	f7fd f8a6 	bl	8005e60 <usbInitEndpointI>

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8008d14:	f104 070c 	add.w	r7, r4, #12
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8008d18:	69a3      	ldr	r3, [r4, #24]
 8008d1a:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_counter = 0;
 8008d1e:	2500      	movs	r5, #0
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8008d20:	4638      	mov	r0, r7
 8008d22:	f06f 0101 	mvn.w	r1, #1
 8008d26:	6816      	ldr	r6, [r2, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8008d28:	6223      	str	r3, [r4, #32]
 8008d2a:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_counter = 0;
 8008d2c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8008d2e:	f7fb fcdf 	bl	80046f0 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8008d32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  oqp->q_counter = chQSizeI(oqp);
 8008d34:	6c21      	ldr	r1, [r4, #64]	; 0x40
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8008d36:	f104 0030 	add.w	r0, r4, #48	; 0x30
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 8008d3a:	1aca      	subs	r2, r1, r3
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8008d3c:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8008d40:	6463      	str	r3, [r4, #68]	; 0x44
 8008d42:	64a3      	str	r3, [r4, #72]	; 0x48
  oqp->q_counter = chQSizeI(oqp);
 8008d44:	63a2      	str	r2, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8008d46:	f7fb fcd3 	bl	80046f0 <chThdDequeueAllI>
 8008d4a:	1d20      	adds	r0, r4, #4
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	f7f9 f907 	bl	8001f60 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8008d52:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8008d56:	f04f 0e01 	mov.w	lr, #1
 8008d5a:	7941      	ldrb	r1, [r0, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8008d62:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8008d64:	8a5a      	ldrh	r2, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8008d66:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = TRUE;
 8008d68:	f883 e000 	strb.w	lr, [r3]
  osp->mode.queue.rxqueue = iqp;
 8008d6c:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
 8008d6e:	605a      	str	r2, [r3, #4]
  osp->rxcnt              = 0;
 8008d70:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8008d72:	f7fc ffed 	bl	8005d50 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  usbStartReceiveI(usbp, sdup->config->bulk_out);
 8008d76:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	7949      	ldrb	r1, [r1, #5]
 8008d7e:	f7fc ffc7 	bl	8005d10 <usbStartReceiveI>
 8008d82:	f385 8811 	msr	BASEPRI, r5
 8008d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d88:	20001544 	.word	0x20001544
 8008d8c:	0800a340 	.word	0x0800a340
 8008d90:	0800a6c0 	.word	0x0800a6c0
 8008d94:	f3af 8000 	nop.w
 8008d98:	f3af 8000 	nop.w
 8008d9c:	f3af 8000 	nop.w

08008da0 <queues1_execute.8272>:
  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
  return 0;
}

static void queues1_execute(void) {
 8008da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da4:	2620      	movs	r6, #32
 8008da6:	b082      	sub	sp, #8
 8008da8:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8008dac:	4ca8      	ldr	r4, [pc, #672]	; (8009050 <queues1_execute.8272+0x2b0>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8008dae:	2001      	movs	r0, #1
 8008db0:	68a1      	ldr	r1, [r4, #8]
 8008db2:	f1d1 0101 	rsbs	r1, r1, #1
 8008db6:	bf38      	it	cc
 8008db8:	2100      	movcc	r1, #0
 8008dba:	f7f8 fd11 	bl	80017e0 <_test_assert>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	bb08      	cbnz	r0, 8008e06 <queues1_execute.8272+0x66>
 8008dc2:	f380 8811 	msr	BASEPRI, r0
 8008dc6:	f386 8811 	msr	BASEPRI, r6

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8008dca:	2141      	movs	r1, #65	; 0x41
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7fa fabf 	bl	8003350 <chIQPutI>
 8008dd2:	2142      	movs	r1, #66	; 0x42
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7fa fabb 	bl	8003350 <chIQPutI>
 8008dda:	2143      	movs	r1, #67	; 0x43
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f7fa fab7 	bl	8003350 <chIQPutI>
 8008de2:	4620      	mov	r0, r4
 8008de4:	2144      	movs	r1, #68	; 0x44
 8008de6:	f7fa fab3 	bl	8003350 <chIQPutI>
 8008dea:	f385 8811 	msr	BASEPRI, r5
 8008dee:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8008df2:	6962      	ldr	r2, [r4, #20]
 8008df4:	69a3      	ldr	r3, [r4, #24]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d052      	beq.n	8008ea0 <queues1_execute.8272+0x100>
 8008dfa:	4629      	mov	r1, r5
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8008dfc:	2002      	movs	r0, #2
 8008dfe:	f7f8 fcef 	bl	80017e0 <_test_assert>
 8008e02:	4605      	mov	r5, r0
 8008e04:	b128      	cbz	r0, 8008e12 <queues1_execute.8272+0x72>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8008e0c:	b002      	add	sp, #8
 8008e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e12:	f380 8811 	msr	BASEPRI, r0
 8008e16:	f04f 0820 	mov.w	r8, #32
 8008e1a:	f388 8811 	msr	BASEPRI, r8
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8008e1e:	4e8c      	ldr	r6, [pc, #560]	; (8009050 <queues1_execute.8272+0x2b0>)
 8008e20:	4601      	mov	r1, r0
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7fa fa94 	bl	8003350 <chIQPutI>
 8008e28:	3004      	adds	r0, #4
 8008e2a:	bf14      	ite	ne
 8008e2c:	2100      	movne	r1, #0
 8008e2e:	2101      	moveq	r1, #1
 8008e30:	2003      	movs	r0, #3
 8008e32:	f7f8 fcd5 	bl	80017e0 <_test_assert>
 8008e36:	4607      	mov	r7, r0
 8008e38:	bb78      	cbnz	r0, 8008e9a <queues1_execute.8272+0xfa>
 8008e3a:	f380 8811 	msr	BASEPRI, r0
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8008e3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7fc f804 	bl	8004e50 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8008e48:	b2c0      	uxtb	r0, r0
 8008e4a:	f7f8 fce1 	bl	8001810 <test_emit_token>
 8008e4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7fb fffc 	bl	8004e50 <chIQGetTimeout>
 8008e58:	b2c0      	uxtb	r0, r0
 8008e5a:	f7f8 fcd9 	bl	8001810 <test_emit_token>
 8008e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7fb fff4 	bl	8004e50 <chIQGetTimeout>
 8008e68:	b2c0      	uxtb	r0, r0
 8008e6a:	f7f8 fcd1 	bl	8001810 <test_emit_token>
 8008e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7fb ffec 	bl	8004e50 <chIQGetTimeout>
 8008e78:	b2c0      	uxtb	r0, r0
 8008e7a:	f7f8 fcc9 	bl	8001810 <test_emit_token>
 8008e7e:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8008e82:	68b1      	ldr	r1, [r6, #8]
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8008e84:	2004      	movs	r0, #4
 8008e86:	f1d1 0101 	rsbs	r1, r1, #1
 8008e8a:	bf38      	it	cc
 8008e8c:	2100      	movcc	r1, #0
 8008e8e:	f7f8 fca7 	bl	80017e0 <_test_assert>
 8008e92:	b150      	cbz	r0, 8008eaa <queues1_execute.8272+0x10a>
 8008e94:	f387 8811 	msr	BASEPRI, r7
 8008e98:	e7b8      	b.n	8008e0c <queues1_execute.8272+0x6c>
 8008e9a:	f385 8811 	msr	BASEPRI, r5
 8008e9e:	e7b5      	b.n	8008e0c <queues1_execute.8272+0x6c>
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8008ea0:	68a0      	ldr	r0, [r4, #8]
 8008ea2:	1c01      	adds	r1, r0, #0
 8008ea4:	bf18      	it	ne
 8008ea6:	2101      	movne	r1, #1
 8008ea8:	e7a8      	b.n	8008dfc <queues1_execute.8272+0x5c>
 8008eaa:	f380 8811 	msr	BASEPRI, r0
  test_assert_sequence(5, "ABCD");
 8008eae:	2005      	movs	r0, #5
 8008eb0:	4968      	ldr	r1, [pc, #416]	; (8009054 <queues1_execute.8272+0x2b4>)
 8008eb2:	f7f8 fc4d 	bl	8001750 <_test_assert_sequence>
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1a7      	bne.n	8008e0c <queues1_execute.8272+0x6c>
 8008ebc:	f388 8811 	msr	BASEPRI, r8

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8008ec0:	2141      	movs	r1, #65	; 0x41
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7fa fa44 	bl	8003350 <chIQPutI>
 8008ec8:	2142      	movs	r1, #66	; 0x42
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f7fa fa40 	bl	8003350 <chIQPutI>
 8008ed0:	2143      	movs	r1, #67	; 0x43
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7fa fa3c 	bl	8003350 <chIQPutI>
 8008ed8:	4630      	mov	r0, r6
 8008eda:	2144      	movs	r1, #68	; 0x44
 8008edc:	f7fa fa38 	bl	8003350 <chIQPutI>
 8008ee0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8008ee4:	2208      	movs	r2, #8
 8008ee6:	462b      	mov	r3, r5
 8008ee8:	495b      	ldr	r1, [pc, #364]	; (8009058 <queues1_execute.8272+0x2b8>)
 8008eea:	4630      	mov	r0, r6
 8008eec:	f7fb fff8 	bl	8004ee0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8008ef0:	f1b0 0c04 	subs.w	ip, r0, #4
 8008ef4:	f1dc 0500 	rsbs	r5, ip, #0
 8008ef8:	eb55 010c 	adcs.w	r1, r5, ip
 8008efc:	2006      	movs	r0, #6
 8008efe:	f7f8 fc6f 	bl	80017e0 <_test_assert>
 8008f02:	4605      	mov	r5, r0
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d181      	bne.n	8008e0c <queues1_execute.8272+0x6c>
 8008f08:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8008f0c:	68b7      	ldr	r7, [r6, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8008f0e:	2007      	movs	r0, #7
 8008f10:	f1d7 0101 	rsbs	r1, r7, #1
 8008f14:	bf38      	it	cc
 8008f16:	2100      	movcc	r1, #0
 8008f18:	f7f8 fc62 	bl	80017e0 <_test_assert>
 8008f1c:	4607      	mov	r7, r0
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d1bb      	bne.n	8008e9a <queues1_execute.8272+0xfa>
 8008f22:	f380 8811 	msr	BASEPRI, r0
 8008f26:	f388 8811 	msr	BASEPRI, r8

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8008f2a:	2141      	movs	r1, #65	; 0x41
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7fa fa0f 	bl	8003350 <chIQPutI>
 8008f32:	2142      	movs	r1, #66	; 0x42
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7fa fa0b 	bl	8003350 <chIQPutI>
 8008f3a:	2143      	movs	r1, #67	; 0x43
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7fa fa07 	bl	8003350 <chIQPutI>
 8008f42:	4630      	mov	r0, r6
 8008f44:	2144      	movs	r1, #68	; 0x44
 8008f46:	f7fa fa03 	bl	8003350 <chIQPutI>
 8008f4a:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8008f4e:	2202      	movs	r2, #2
 8008f50:	4941      	ldr	r1, [pc, #260]	; (8009058 <queues1_execute.8272+0x2b8>)
 8008f52:	463b      	mov	r3, r7
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7fb ffc3 	bl	8004ee0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8008f5a:	f1b0 0e02 	subs.w	lr, r0, #2
 8008f5e:	f1de 0200 	rsbs	r2, lr, #0
 8008f62:	eb52 010e 	adcs.w	r1, r2, lr
 8008f66:	2008      	movs	r0, #8
 8008f68:	f7f8 fc3a 	bl	80017e0 <_test_assert>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f47f af4d 	bne.w	8008e0c <queues1_execute.8272+0x6c>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8008f72:	2202      	movs	r2, #2
 8008f74:	4603      	mov	r3, r0
 8008f76:	4938      	ldr	r1, [pc, #224]	; (8009058 <queues1_execute.8272+0x2b8>)
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7fb ffb1 	bl	8004ee0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8008f7e:	1e83      	subs	r3, r0, #2
 8008f80:	4258      	negs	r0, r3
 8008f82:	eb50 0103 	adcs.w	r1, r0, r3
 8008f86:	2009      	movs	r0, #9
 8008f88:	f7f8 fc2a 	bl	80017e0 <_test_assert>
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f47f af3c 	bne.w	8008e0c <queues1_execute.8272+0x6c>
 8008f94:	f388 8811 	msr	BASEPRI, r8
 8008f98:	68b1      	ldr	r1, [r6, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8008f9a:	200a      	movs	r0, #10
 8008f9c:	f1d1 0101 	rsbs	r1, r1, #1
 8008fa0:	bf38      	it	cc
 8008fa2:	2100      	movcc	r1, #0
 8008fa4:	f7f8 fc1c 	bl	80017e0 <_test_assert>
 8008fa8:	4605      	mov	r5, r0
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f47f af72 	bne.w	8008e94 <queues1_execute.8272+0xf4>
 8008fb0:	f380 8811 	msr	BASEPRI, r0
 8008fb4:	f388 8811 	msr	BASEPRI, r8

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8008fb8:	4601      	mov	r1, r0
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7fa f9c8 	bl	8003350 <chIQPutI>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8008fc0:	68f2      	ldr	r2, [r6, #12]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f06f 0101 	mvn.w	r1, #1
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8008fc8:	6172      	str	r2, [r6, #20]
 8008fca:	61b2      	str	r2, [r6, #24]
  iqp->q_counter = 0;
 8008fcc:	60b5      	str	r5, [r6, #8]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8008fce:	f7fb fb8f 	bl	80046f0 <chThdDequeueAllI>
 8008fd2:	f385 8811 	msr	BASEPRI, r5
 8008fd6:	f388 8811 	msr	BASEPRI, r8
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8008fda:	68b3      	ldr	r3, [r6, #8]
 8008fdc:	200b      	movs	r0, #11
 8008fde:	f1d3 0101 	rsbs	r1, r3, #1
 8008fe2:	bf38      	it	cc
 8008fe4:	2100      	movcc	r1, #0
 8008fe6:	f7f8 fbfb 	bl	80017e0 <_test_assert>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f47f af0b 	bne.w	8008e06 <queues1_execute.8272+0x66>
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	f385 8811 	msr	BASEPRI, r5
 8008ff6:	4819      	ldr	r0, [pc, #100]	; (800905c <queues1_execute.8272+0x2bc>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 8008ff8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ffc:	6982      	ldr	r2, [r0, #24]
 8008ffe:	4b18      	ldr	r3, [pc, #96]	; (8009060 <queues1_execute.8272+0x2c0>)
 8009000:	6892      	ldr	r2, [r2, #8]
 8009002:	4818      	ldr	r0, [pc, #96]	; (8009064 <queues1_execute.8272+0x2c4>)
 8009004:	9500      	str	r5, [sp, #0]
 8009006:	3201      	adds	r2, #1
 8009008:	f7f8 fe9a 	bl	8001d40 <chThdCreateStatic>
 800900c:	4916      	ldr	r1, [pc, #88]	; (8009068 <queues1_execute.8272+0x2c8>)
 800900e:	2320      	movs	r3, #32
 8009010:	6008      	str	r0, [r1, #0]
 8009012:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8009016:	68a2      	ldr	r2, [r4, #8]
 8009018:	200c      	movs	r0, #12
 800901a:	1b53      	subs	r3, r2, r5
 800901c:	4259      	negs	r1, r3
 800901e:	4159      	adcs	r1, r3
 8009020:	f7f8 fbde 	bl	80017e0 <_test_assert>
 8009024:	2800      	cmp	r0, #0
 8009026:	f47f af38 	bne.w	8008e9a <queues1_execute.8272+0xfa>
 800902a:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 800902e:	f7f9 f937 	bl	80022a0 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8009032:	210a      	movs	r1, #10
 8009034:	4806      	ldr	r0, [pc, #24]	; (8009050 <queues1_execute.8272+0x2b0>)
 8009036:	f7fb ff0b 	bl	8004e50 <chIQGetTimeout>
 800903a:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 800903e:	4242      	negs	r2, r0
 8009040:	eb52 0100 	adcs.w	r1, r2, r0
 8009044:	200d      	movs	r0, #13
}
 8009046:	b002      	add	sp, #8
 8009048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 800904c:	f7f8 bbc8 	b.w	80017e0 <_test_assert>
 8009050:	20000ca0 	.word	0x20000ca0
 8009054:	08009dd0 	.word	0x08009dd0
 8009058:	20001930 	.word	0x20001930
 800905c:	20001e58 	.word	0x20001e58
 8009060:	08004ea1 	.word	0x08004ea1
 8009064:	200017e8 	.word	0x200017e8
 8009068:	20001fa8 	.word	0x20001fa8
 800906c:	f3af 8000 	nop.w

08009070 <bmk9_execute.8477>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8009072:	4a26      	ldr	r2, [pc, #152]	; (800910c <bmk9_execute.8477+0x9c>)
 8009074:	4b26      	ldr	r3, [pc, #152]	; (8009110 <bmk9_execute.8477+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8009076:	2400      	movs	r4, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8009078:	f102 0110 	add.w	r1, r2, #16
 800907c:	605b      	str	r3, [r3, #4]
 800907e:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8009080:	609c      	str	r4, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8009082:	615a      	str	r2, [r3, #20]
 8009084:	619a      	str	r2, [r3, #24]
 8009086:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
 8009088:	6119      	str	r1, [r3, #16]
  iqp->q_notify = infy;
 800908a:	61dc      	str	r4, [r3, #28]
  iqp->q_link = link;
 800908c:	621c      	str	r4, [r3, #32]
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 800908e:	f7fe fdcf 	bl	8007c30 <test_wait_tick>
  test_start_timer(1000);
 8009092:	f7fa fedd 	bl	8003e50 <test_start_timer.constprop.21>
 8009096:	4f1f      	ldr	r7, [pc, #124]	; (8009114 <bmk9_execute.8477+0xa4>)
 8009098:	2620      	movs	r6, #32
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 800909a:	4625      	mov	r5, r4
 800909c:	f386 8811 	msr	BASEPRI, r6
 80090a0:	2100      	movs	r1, #0
 80090a2:	481b      	ldr	r0, [pc, #108]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090a4:	f7fa f954 	bl	8003350 <chIQPutI>
    chIQPutI(&iq, 1);
 80090a8:	2101      	movs	r1, #1
 80090aa:	4819      	ldr	r0, [pc, #100]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090ac:	f7fa f950 	bl	8003350 <chIQPutI>
    chIQPutI(&iq, 2);
 80090b0:	2102      	movs	r1, #2
 80090b2:	4817      	ldr	r0, [pc, #92]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090b4:	f7fa f94c 	bl	8003350 <chIQPutI>
    chIQPutI(&iq, 3);
 80090b8:	2103      	movs	r1, #3
 80090ba:	4815      	ldr	r0, [pc, #84]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090bc:	f7fa f948 	bl	8003350 <chIQPutI>
 80090c0:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 80090c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090c8:	4811      	ldr	r0, [pc, #68]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090ca:	f7fb fec1 	bl	8004e50 <chIQGetTimeout>
 80090ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090d2:	480f      	ldr	r0, [pc, #60]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090d4:	f7fb febc 	bl	8004e50 <chIQGetTimeout>
 80090d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090dc:	480c      	ldr	r0, [pc, #48]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090de:	f7fb feb7 	bl	8004e50 <chIQGetTimeout>
 80090e2:	480b      	ldr	r0, [pc, #44]	; (8009110 <bmk9_execute.8477+0xa0>)
 80090e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090e8:	f7fb feb2 	bl	8004e50 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80090ec:	7838      	ldrb	r0, [r7, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 80090ee:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0d3      	beq.n	800909c <bmk9_execute.8477+0x2c>
  test_print("--- Score : ");
 80090f4:	4808      	ldr	r0, [pc, #32]	; (8009118 <bmk9_execute.8477+0xa8>)
 80090f6:	f7f8 fbb3 	bl	8001860 <test_print>
  test_printn(n * 4);
 80090fa:	00a0      	lsls	r0, r4, #2
 80090fc:	f7f8 fbc0 	bl	8001880 <test_printn>
  test_println(" bytes/S");
 8009100:	4806      	ldr	r0, [pc, #24]	; (800911c <bmk9_execute.8477+0xac>)
}
 8009102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8009106:	f7f8 bb93 	b.w	8001830 <test_println>
 800910a:	bf00      	nop
 800910c:	200017d4 	.word	0x200017d4
 8009110:	2000179c 	.word	0x2000179c
 8009114:	200017c0 	.word	0x200017c0
 8009118:	08009ffc 	.word	0x08009ffc
 800911c:	0800a7ac 	.word	0x0800a7ac

08009120 <si446x_spi>:
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
void si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 8009124:	2400      	movs	r4, #0
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
void si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 8009126:	b089      	sub	sp, #36	; 0x24
 8009128:	4686      	mov	lr, r0
 800912a:	460f      	mov	r7, r1
 800912c:	4691      	mov	r9, r2
 800912e:	469a      	mov	sl, r3
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 8009130:	9403      	str	r4, [sp, #12]
 8009132:	9404      	str	r4, [sp, #16]
 8009134:	9405      	str	r4, [sp, #20]
 8009136:	9406      	str	r4, [sp, #24]
 8009138:	9407      	str	r4, [sp, #28]
 800913a:	2520      	movs	r5, #32
 800913c:	f385 8811 	msr	BASEPRI, r5
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8009140:	4e38      	ldr	r6, [pc, #224]	; (8009224 <si446x_spi+0x104>)
 8009142:	2101      	movs	r1, #1
 8009144:	6873      	ldr	r3, [r6, #4]
 8009146:	891a      	ldrh	r2, [r3, #8]
 8009148:	6858      	ldr	r0, [r3, #4]
 800914a:	fa01 f302 	lsl.w	r3, r1, r2
 800914e:	6143      	str	r3, [r0, #20]
 8009150:	f384 8811 	msr	BASEPRI, r4
 8009154:	f385 8811 	msr	BASEPRI, r5
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8009158:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8009228 <si446x_spi+0x108>
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 800915c:	f04f 0b03 	mov.w	fp, #3
 8009160:	4630      	mov	r0, r6
 8009162:	4671      	mov	r1, lr
 8009164:	463a      	mov	r2, r7
 8009166:	ab03      	add	r3, sp, #12
 8009168:	f886 b000 	strb.w	fp, [r6]
 800916c:	f106 0708 	add.w	r7, r6, #8
 8009170:	f7fc fe96 	bl	8005ea0 <spi_lld_exchange>
 8009174:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009178:	eb0d 0005 	add.w	r0, sp, r5
 800917c:	f840 7d1c 	str.w	r7, [r0, #-28]!
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wtobjp = &trp;
 8009180:	6210      	str	r0, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8009182:	4658      	mov	r0, fp
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8009184:	60b2      	str	r2, [r6, #8]
  tp->p_u.wtobjp = &trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8009186:	f7f8 fe1b 	bl	8001dc0 <chSchGoSleepS>
 800918a:	f384 8811 	msr	BASEPRI, r4
 800918e:	f385 8811 	msr	BASEPRI, r5

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8009192:	4630      	mov	r0, r6
 8009194:	f7fc fea4 	bl	8005ee0 <spi_lld_unselect>
 8009198:	f384 8811 	msr	BASEPRI, r4
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 800919c:	2144      	movs	r1, #68	; 0x44
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMicroseconds(20);}/*Wait for CTS high*/
 800919e:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
	uint8_t dummy_buffer[20]={};/*For dummy data*/
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 80091a2:	f88d 100c 	strb.w	r1, [sp, #12]
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMicroseconds(20);}/*Wait for CTS high*/
 80091a6:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80091aa:	68ab      	ldr	r3, [r5, #8]
 80091ac:	051a      	lsls	r2, r3, #20
 80091ae:	d405      	bmi.n	80091bc <si446x_spi+0x9c>
 80091b0:	2001      	movs	r0, #1
 80091b2:	f7fd ff7d 	bl	80070b0 <chThdSleep>
 80091b6:	68ac      	ldr	r4, [r5, #8]
 80091b8:	0523      	lsls	r3, r4, #20
 80091ba:	d5f9      	bpl.n	80091b0 <si446x_spi+0x90>
	if(rx_bytes) {
 80091bc:	f1b9 0f00 	cmp.w	r9, #0
 80091c0:	d02c      	beq.n	800921c <si446x_spi+0xfc>
 80091c2:	2520      	movs	r5, #32
 80091c4:	f385 8811 	msr	BASEPRI, r5
 80091c8:	6874      	ldr	r4, [r6, #4]
 80091ca:	2101      	movs	r1, #1
 80091cc:	8922      	ldrh	r2, [r4, #8]
 80091ce:	6860      	ldr	r0, [r4, #4]
 80091d0:	fa01 f302 	lsl.w	r3, r1, r2
 80091d4:	2400      	movs	r4, #0
 80091d6:	6143      	str	r3, [r0, #20]
 80091d8:	f384 8811 	msr	BASEPRI, r4
 80091dc:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80091e0:	f04f 0b03 	mov.w	fp, #3
 80091e4:	4649      	mov	r1, r9
 80091e6:	aa03      	add	r2, sp, #12
 80091e8:	4653      	mov	r3, sl
 80091ea:	480e      	ldr	r0, [pc, #56]	; (8009224 <si446x_spi+0x104>)
 80091ec:	f886 b000 	strb.w	fp, [r6]
 80091f0:	f7fc fe56 	bl	8005ea0 <spi_lld_exchange>
 80091f4:	eb0d 0005 	add.w	r0, sp, r5
 80091f8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80091fc:	f840 7d18 	str.w	r7, [r0, #-24]!
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wtobjp = &trp;
 8009200:	6210      	str	r0, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8009202:	4658      	mov	r0, fp
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8009204:	60b2      	str	r2, [r6, #8]
  tp->p_u.wtobjp = &trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8009206:	f7f8 fddb 	bl	8001dc0 <chSchGoSleepS>
 800920a:	f384 8811 	msr	BASEPRI, r4
 800920e:	f385 8811 	msr	BASEPRI, r5

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8009212:	4804      	ldr	r0, [pc, #16]	; (8009224 <si446x_spi+0x104>)
 8009214:	f7fc fe64 	bl	8005ee0 <spi_lld_unselect>
 8009218:	f384 8811 	msr	BASEPRI, r4
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
}
 800921c:	b009      	add	sp, #36	; 0x24
 800921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009222:	bf00      	nop
 8009224:	20001500 	.word	0x20001500
 8009228:	20001e58 	.word	0x20001e58
 800922c:	f3af 8000 	nop.w

08009230 <si446x_set_frequency>:
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
void si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8009230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8009234:	f247 233f 	movw	r3, #29247	; 0x723f
 8009238:	f6c2 2305 	movt	r3, #10757	; 0x2a05
 800923c:	4298      	cmp	r0, r3
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
void si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 800923e:	b086      	sub	sp, #24
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8009240:	f200 80a8 	bhi.w	8009394 <si446x_set_frequency+0x164>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8009244:	f64d 513f 	movw	r1, #56639	; 0xdd3f
 8009248:	f6c1 714a 	movt	r1, #8010	; 0x1f4a
 800924c:	4288      	cmp	r0, r1
 800924e:	f200 80a6 	bhi.w	800939e <si446x_set_frequency+0x16e>
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8009252:	f645 253f 	movw	r5, #23103	; 0x5a3f
 8009256:	f2c1 550a 	movt	r5, #5386	; 0x150a
 800925a:	42a8      	cmp	r0, r5
 800925c:	f200 80ad 	bhi.w	80093ba <si446x_set_frequency+0x18a>
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8009260:	f64d 13bf 	movw	r3, #55743	; 0xd9bf
 8009264:	f6c0 633e 	movt	r3, #3646	; 0xe3e
 8009268:	4298      	cmp	r0, r3
 800926a:	f200 80a1 	bhi.w	80093b0 <si446x_set_frequency+0x180>
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
 800926e:	f64c 623f 	movw	r2, #52799	; 0xce3f
 8009272:	f6c0 228c 	movt	r2, #2700	; 0xa8c
 8009276:	4290      	cmp	r0, r2
 8009278:	4c52      	ldr	r4, [pc, #328]	; (80093c4 <si446x_set_frequency+0x194>)
 800927a:	f200 8095 	bhi.w	80093a8 <si446x_set_frequency+0x178>
 800927e:	2118      	movs	r1, #24
 8009280:	7021      	strb	r1, [r4, #0]
 8009282:	270d      	movs	r7, #13
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
 8009284:	f44f 45ea 	mov.w	r5, #29952	; 0x7500
 8009288:	f2c0 3519 	movt	r5, #793	; 0x319
 800928c:	fbb5 f5f1 	udiv	r5, r5, r1
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8009290:	fbb0 f8f5 	udiv	r8, r0, r5
	float ratio = (float)freq / (float)f_pfd;
 8009294:	f7f7 ff12 	bl	80010bc <__aeabi_ui2f>
 8009298:	4606      	mov	r6, r0
 800929a:	4628      	mov	r0, r5
 800929c:	f7f7 ff0e 	bl	80010bc <__aeabi_ui2f>
 80092a0:	4601      	mov	r1, r0
 80092a2:	4630      	mov	r0, r6
 80092a4:	f7f8 f818 	bl	80012d8 <__aeabi_fdiv>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 80092a8:	f108 38ff 	add.w	r8, r8, #4294967295
	float ratio = (float)freq / (float)f_pfd;
 80092ac:	4605      	mov	r5, r0
	float rest = ratio - (float)n;
 80092ae:	4640      	mov	r0, r8
 80092b0:	f7f7 ff04 	bl	80010bc <__aeabi_ui2f>
 80092b4:	4601      	mov	r1, r0
 80092b6:	4628      	mov	r0, r5
 80092b8:	f7f7 fe4e 	bl	8000f58 <__aeabi_fsub>
	uint32_t m = (unsigned long)(rest * 524288UL);
 80092bc:	f04f 4192 	mov.w	r1, #1224736768	; 0x49000000
 80092c0:	f7f7 ff56 	bl	8001170 <__aeabi_fmul>
 80092c4:	f7f8 f944 	bl	8001550 <__aeabi_f2uiz>
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 80092c8:	f8df e104 	ldr.w	lr, [pc, #260]	; 80093d0 <si446x_set_frequency+0x1a0>
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80092cc:	2611      	movs	r6, #17
 80092ce:	2501      	movs	r5, #1
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
 80092d0:	4681      	mov	r9, r0
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80092d2:	a902      	add	r1, sp, #8
 80092d4:	ab01      	add	r3, sp, #4
 80092d6:	2005      	movs	r0, #5
 80092d8:	2200      	movs	r2, #0
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80092da:	f04f 0c51 	mov.w	ip, #81	; 0x51
 80092de:	f04f 0a20 	mov.w	sl, #32
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 80092e2:	f88e 7000 	strb.w	r7, [lr]
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 80092e6:	f88d a009 	strb.w	sl, [sp, #9]
 80092ea:	f88d c00b 	strb.w	ip, [sp, #11]
 80092ee:	f88d 700c 	strb.w	r7, [sp, #12]
 80092f2:	f88d 6008 	strb.w	r6, [sp, #8]
 80092f6:	f88d 500a 	strb.w	r5, [sp, #10]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80092fa:	f7ff ff11 	bl	8009120 <si446x_spi>
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 80092fe:	f994 0000 	ldrsb.w	r0, [r4]
 8009302:	4c31      	ldr	r4, [pc, #196]	; (80093c8 <si446x_set_frequency+0x198>)
 8009304:	04c7      	lsls	r7, r0, #19
 8009306:	8823      	ldrh	r3, [r4, #0]
 8009308:	f64e 00a5 	movw	r0, #59557	; 0xe8a5
 800930c:	b299      	uxth	r1, r3
 800930e:	fb01 f207 	mul.w	r2, r1, r7
 8009312:	f2ca 5030 	movt	r0, #42288	; 0xa530
 8009316:	fba0 2302 	umull	r2, r3, r0, r2
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
 800931a:	ea4f 4719 	mov.w	r7, r9, lsr #16
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 800931e:	2400      	movs	r4, #0
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8009320:	eba9 4907 	sub.w	r9, r9, r7, lsl #16
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8009324:	f04f 0a40 	mov.w	sl, #64	; 0x40
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
 8009328:	ea4f 6e53 	mov.w	lr, r3, lsr #25
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 800932c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8009330:	a902      	add	r1, sp, #8
 8009332:	4622      	mov	r2, r4
 8009334:	ab01      	add	r3, sp, #4
 8009336:	200a      	movs	r0, #10
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8009338:	f88d a009 	strb.w	sl, [sp, #9]
 800933c:	f04f 0a06 	mov.w	sl, #6
 8009340:	f88d 400b 	strb.w	r4, [sp, #11]
 8009344:	f88d 700d 	strb.w	r7, [sp, #13]
 8009348:	f88d 4010 	strb.w	r4, [sp, #16]
 800934c:	f88d 6008 	strb.w	r6, [sp, #8]
 8009350:	f88d a00a 	strb.w	sl, [sp, #10]
 8009354:	f88d 800c 	strb.w	r8, [sp, #12]
 8009358:	f88d c00e 	strb.w	ip, [sp, #14]
 800935c:	f88d 900f 	strb.w	r9, [sp, #15]
 8009360:	f88d e011 	strb.w	lr, [sp, #17]
	si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8009364:	f7ff fedc 	bl	8009120 <si446x_spi>
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8009368:	4918      	ldr	r1, [pc, #96]	; (80093cc <si446x_set_frequency+0x19c>)
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800936a:	4622      	mov	r2, r4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 800936c:	780f      	ldrb	r7, [r1, #0]
 800936e:	2422      	movs	r4, #34	; 0x22
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8009370:	2005      	movs	r0, #5
 8009372:	a902      	add	r1, sp, #8
 8009374:	ab01      	add	r3, sp, #4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8009376:	f88d 6008 	strb.w	r6, [sp, #8]
 800937a:	f88d 4009 	strb.w	r4, [sp, #9]
 800937e:	f88d 500a 	strb.w	r5, [sp, #10]
 8009382:	f88d 500b 	strb.w	r5, [sp, #11]
 8009386:	f88d 700c 	strb.w	r7, [sp, #12]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800938a:	f7ff fec9 	bl	8009120 <si446x_spi>
}
 800938e:	b006      	add	sp, #24
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	4c0b      	ldr	r4, [pc, #44]	; (80093c4 <si446x_set_frequency+0x194>)
  */
void si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8009396:	2708      	movs	r7, #8
 8009398:	f994 1000 	ldrsb.w	r1, [r4]
 800939c:	e772      	b.n	8009284 <si446x_set_frequency+0x54>
 800939e:	4c09      	ldr	r4, [pc, #36]	; (80093c4 <si446x_set_frequency+0x194>)
 80093a0:	2206      	movs	r2, #6
 80093a2:	7022      	strb	r2, [r4, #0]
 80093a4:	2709      	movs	r7, #9
 80093a6:	e7f7      	b.n	8009398 <si446x_set_frequency+0x168>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 80093a8:	2110      	movs	r1, #16
 80093aa:	7021      	strb	r1, [r4, #0]
 80093ac:	270c      	movs	r7, #12
 80093ae:	e769      	b.n	8009284 <si446x_set_frequency+0x54>
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 80093b0:	4c04      	ldr	r4, [pc, #16]	; (80093c4 <si446x_set_frequency+0x194>)
 80093b2:	270c      	movs	r7, #12
 80093b4:	7027      	strb	r7, [r4, #0]
 80093b6:	270b      	movs	r7, #11
 80093b8:	e7ee      	b.n	8009398 <si446x_set_frequency+0x168>
void si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 80093ba:	4c02      	ldr	r4, [pc, #8]	; (80093c4 <si446x_set_frequency+0x194>)
 80093bc:	2608      	movs	r6, #8
 80093be:	7026      	strb	r6, [r4, #0]
 80093c0:	270a      	movs	r7, #10
 80093c2:	e7e9      	b.n	8009398 <si446x_set_frequency+0x168>
 80093c4:	20000c58 	.word	0x20000c58
 80093c8:	20000c62 	.word	0x20000c62
 80093cc:	20000c60 	.word	0x20000c60
 80093d0:	20000c50 	.word	0x20000c50
 80093d4:	f3af 8000 	nop.w
 80093d8:	f3af 8000 	nop.w
 80093dc:	f3af 8000 	nop.w

080093e0 <chMBPost.constprop.32>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	2320      	movs	r3, #32
 80093e6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 80093ea:	480c      	ldr	r0, [pc, #48]	; (800941c <chMBPost.constprop.32+0x3c>)
 80093ec:	f7fa fce8 	bl	8003dc0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 80093f0:	4604      	mov	r4, r0
 80093f2:	b970      	cbnz	r0, 8009412 <chMBPost.constprop.32+0x32>
    *mbp->mb_wrptr++ = msg;
 80093f4:	480a      	ldr	r0, [pc, #40]	; (8009420 <chMBPost.constprop.32+0x40>)
 80093f6:	6882      	ldr	r2, [r0, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 80093f8:	6841      	ldr	r1, [r0, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 80093fa:	f842 5b04 	str.w	r5, [r2], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 80093fe:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8009400:	6082      	str	r2, [r0, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8009402:	bf24      	itt	cs
 8009404:	6802      	ldrcs	r2, [r0, #0]
 8009406:	6082      	strcs	r2, [r0, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8009408:	4806      	ldr	r0, [pc, #24]	; (8009424 <chMBPost.constprop.32+0x44>)
 800940a:	f7f8 fff1 	bl	80023f0 <chSemSignalI>
    chSchRescheduleS();
 800940e:	f7f8 fb4f 	bl	8001ab0 <chSchRescheduleS>
 8009412:	2300      	movs	r3, #0
 8009414:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8009418:	4620      	mov	r0, r4
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	20000ce0 	.word	0x20000ce0
 8009420:	20000cc4 	.word	0x20000cc4
 8009424:	20000cd4 	.word	0x20000cd4
 8009428:	f3af 8000 	nop.w
 800942c:	f3af 8000 	nop.w

08009430 <shell_thread.10397>:
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009434:	4b8d      	ldr	r3, [pc, #564]	; (800966c <shell_thread.10397+0x23c>)
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8009436:	6804      	ldr	r4, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009438:	6999      	ldr	r1, [r3, #24]
 800943a:	4a8d      	ldr	r2, [pc, #564]	; (8009670 <shell_thread.10397+0x240>)
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800943c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8009440:	b098      	sub	sp, #96	; 0x60
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009442:	618a      	str	r2, [r1, #24]
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8009444:	4620      	mov	r0, r4
 8009446:	498b      	ldr	r1, [pc, #556]	; (8009674 <shell_thread.10397+0x244>)
 8009448:	f7fd ff52 	bl	80072f0 <chprintf.10400>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 800944c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800969c <shell_thread.10397+0x26c>
 8009450:	ae08      	add	r6, sp, #32
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
 8009452:	4620      	mov	r0, r4
 8009454:	4988      	ldr	r1, [pc, #544]	; (8009678 <shell_thread.10397+0x248>)
 8009456:	f7fd ff4b 	bl	80072f0 <chprintf.10400>
    if (shellGetLine(chp, line, sizeof(line))) {
 800945a:	4635      	mov	r5, r6
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800945c:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *p = line;

  while (TRUE) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	2201      	movs	r2, #1
 8009464:	6843      	ldr	r3, [r0, #4]
 8009466:	f10d 0107 	add.w	r1, sp, #7
 800946a:	4620      	mov	r0, r4
 800946c:	4798      	blx	r3
 800946e:	b368      	cbz	r0, 80094cc <shell_thread.10397+0x9c>
      return TRUE;
    if (c == 4) {
 8009470:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009474:	2904      	cmp	r1, #4
 8009476:	d025      	beq.n	80094c4 <shell_thread.10397+0x94>
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
 8009478:	2908      	cmp	r1, #8
 800947a:	d010      	beq.n	800949e <shell_thread.10397+0x6e>
 800947c:	297f      	cmp	r1, #127	; 0x7f
 800947e:	d00e      	beq.n	800949e <shell_thread.10397+0x6e>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8009480:	290d      	cmp	r1, #13
 8009482:	d035      	beq.n	80094f0 <shell_thread.10397+0xc0>
      chprintf(chp, "\r\n");
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
 8009484:	291f      	cmp	r1, #31
 8009486:	d9eb      	bls.n	8009460 <shell_thread.10397+0x30>
      continue;
    if (p < line + size - 1) {
 8009488:	42bd      	cmp	r5, r7
 800948a:	d2e9      	bcs.n	8009460 <shell_thread.10397+0x30>
      chSequentialStreamPut(chp, c);
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	4620      	mov	r0, r4
 8009490:	6893      	ldr	r3, [r2, #8]
 8009492:	4798      	blx	r3
      *p++ = (char)c;
 8009494:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009498:	f805 1b01 	strb.w	r1, [r5], #1
 800949c:	e7e0      	b.n	8009460 <shell_thread.10397+0x30>
    if (c == 4) {
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800949e:	42b5      	cmp	r5, r6
 80094a0:	d0de      	beq.n	8009460 <shell_thread.10397+0x30>
        chSequentialStreamPut(chp, c);
 80094a2:	6820      	ldr	r0, [r4, #0]
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
        p--;
 80094a4:	3d01      	subs	r5, #1
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
 80094a6:	6882      	ldr	r2, [r0, #8]
 80094a8:	4620      	mov	r0, r4
 80094aa:	4790      	blx	r2
        chSequentialStreamPut(chp, 0x20);
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	2120      	movs	r1, #32
 80094b0:	689a      	ldr	r2, [r3, #8]
 80094b2:	4620      	mov	r0, r4
 80094b4:	4790      	blx	r2
        chSequentialStreamPut(chp, c);
 80094b6:	6821      	ldr	r1, [r4, #0]
 80094b8:	4620      	mov	r0, r4
 80094ba:	688b      	ldr	r3, [r1, #8]
 80094bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80094c0:	4798      	blx	r3
 80094c2:	e7cd      	b.n	8009460 <shell_thread.10397+0x30>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return TRUE;
    if (c == 4) {
      chprintf(chp, "^D");
 80094c4:	4620      	mov	r0, r4
 80094c6:	496d      	ldr	r1, [pc, #436]	; (800967c <shell_thread.10397+0x24c>)
 80094c8:	f7fd ff12 	bl	80072f0 <chprintf.10400>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 80094cc:	4620      	mov	r0, r4
 80094ce:	496c      	ldr	r1, [pc, #432]	; (8009680 <shell_thread.10397+0x250>)
 80094d0:	f7fd ff0e 	bl	80072f0 <chprintf.10400>
 80094d4:	2020      	movs	r0, #32
 80094d6:	f380 8811 	msr	BASEPRI, r0
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, 0);
 80094da:	2100      	movs	r1, #0
 80094dc:	4869      	ldr	r0, [pc, #420]	; (8009684 <shell_thread.10397+0x254>)
 80094de:	f7f8 fd3f 	bl	8001f60 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 80094e2:	2000      	movs	r0, #0
 80094e4:	f7f8 ffcc 	bl	8002480 <chThdExitS>
    }
  }
  shellExit(MSG_OK);
  /* Never executed, silencing a warning.*/
  return 0;
}
 80094e8:	2000      	movs	r0, #0
 80094ea:	b018      	add	sp, #96	; 0x60
 80094ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 80094f0:	4965      	ldr	r1, [pc, #404]	; (8009688 <shell_thread.10397+0x258>)
      *p = 0;
 80094f2:	2700      	movs	r7, #0
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 80094f4:	4620      	mov	r0, r4
 80094f6:	f7fd fefb 	bl	80072f0 <chprintf.10400>
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80094fa:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 80094fc:	702f      	strb	r7, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80094fe:	4630      	mov	r0, r6
 8009500:	f7fa fe06 	bl	8004110 <_strtok.10420.constprop.6>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009504:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8009506:	4605      	mov	r5, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009508:	4638      	mov	r0, r7
 800950a:	f7fa fe01 	bl	8004110 <_strtok.10420.constprop.6>
 800950e:	4602      	mov	r2, r0
 8009510:	b338      	cbz	r0, 8009562 <shell_thread.10397+0x132>
 8009512:	4638      	mov	r0, r7
 8009514:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009516:	9203      	str	r2, [sp, #12]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009518:	f7fa fdfa 	bl	8004110 <_strtok.10420.constprop.6>
 800951c:	4603      	mov	r3, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	f000 808e 	beq.w	8009640 <shell_thread.10397+0x210>
 8009524:	4638      	mov	r0, r7
 8009526:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009528:	9304      	str	r3, [sp, #16]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800952a:	f7fa fdf1 	bl	8004110 <_strtok.10420.constprop.6>
 800952e:	4602      	mov	r2, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	f000 808e 	beq.w	8009652 <shell_thread.10397+0x222>
 8009536:	4638      	mov	r0, r7
 8009538:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800953a:	9205      	str	r2, [sp, #20]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800953c:	f7fa fde8 	bl	8004110 <_strtok.10420.constprop.6>
 8009540:	4603      	mov	r3, r0
 8009542:	2800      	cmp	r0, #0
 8009544:	d07f      	beq.n	8009646 <shell_thread.10397+0x216>
 8009546:	4638      	mov	r0, r7
 8009548:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800954a:	9306      	str	r3, [sp, #24]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800954c:	f7fa fde0 	bl	8004110 <_strtok.10420.constprop.6>
 8009550:	2800      	cmp	r0, #0
 8009552:	d07b      	beq.n	800964c <shell_thread.10397+0x21c>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8009554:	4620      	mov	r0, r4
 8009556:	494d      	ldr	r1, [pc, #308]	; (800968c <shell_thread.10397+0x25c>)
 8009558:	f7fd feca 	bl	80072f0 <chprintf.10400>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	9307      	str	r3, [sp, #28]
 8009560:	e777      	b.n	8009452 <shell_thread.10397+0x22>
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
 8009562:	4682      	mov	sl, r0
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8009564:	a818      	add	r0, sp, #96	; 0x60
 8009566:	eb00 018a 	add.w	r1, r0, sl, lsl #2
 800956a:	2200      	movs	r2, #0
 800956c:	f841 2c54 	str.w	r2, [r1, #-84]
    if (cmd != NULL) {
 8009570:	2d00      	cmp	r5, #0
 8009572:	f43f af6e 	beq.w	8009452 <shell_thread.10397+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 8009576:	4628      	mov	r0, r5
 8009578:	4945      	ldr	r1, [pc, #276]	; (8009690 <shell_thread.10397+0x260>)
 800957a:	f000 faa1 	bl	8009ac0 <strcasecmp>
 800957e:	b940      	cbnz	r0, 8009592 <shell_thread.10397+0x162>
        if (n > 0) {
 8009580:	f1ba 0f00 	cmp.w	sl, #0
 8009584:	d0a6      	beq.n	80094d4 <shell_thread.10397+0xa4>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8009586:	4620      	mov	r0, r4
 8009588:	4942      	ldr	r1, [pc, #264]	; (8009694 <shell_thread.10397+0x264>)
 800958a:	4a41      	ldr	r2, [pc, #260]	; (8009690 <shell_thread.10397+0x260>)
 800958c:	f7fd feb0 	bl	80072f0 <chprintf.10400>
 8009590:	e75f      	b.n	8009452 <shell_thread.10397+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8009592:	4628      	mov	r0, r5
 8009594:	4940      	ldr	r1, [pc, #256]	; (8009698 <shell_thread.10397+0x268>)
 8009596:	f000 fa93 	bl	8009ac0 <strcasecmp>
 800959a:	b940      	cbnz	r0, 80095ae <shell_thread.10397+0x17e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800959c:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d019      	beq.n	80095d8 <shell_thread.10397+0x1a8>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80095a4:	493b      	ldr	r1, [pc, #236]	; (8009694 <shell_thread.10397+0x264>)
 80095a6:	4a3c      	ldr	r2, [pc, #240]	; (8009698 <shell_thread.10397+0x268>)
 80095a8:	f7fd fea2 	bl	80072f0 <chprintf.10400>
 80095ac:	e751      	b.n	8009452 <shell_thread.10397+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80095ae:	f8d9 0000 	ldr.w	r0, [r9]
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d033      	beq.n	800961e <shell_thread.10397+0x1ee>
 80095b6:	4f39      	ldr	r7, [pc, #228]	; (800969c <shell_thread.10397+0x26c>)
 80095b8:	e003      	b.n	80095c2 <shell_thread.10397+0x192>
 80095ba:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80095be:	2800      	cmp	r0, #0
 80095c0:	d02d      	beq.n	800961e <shell_thread.10397+0x1ee>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80095c2:	4629      	mov	r1, r5
 80095c4:	f000 fa7c 	bl	8009ac0 <strcasecmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d1f6      	bne.n	80095ba <shell_thread.10397+0x18a>
      scp->sc_function(chp, argc, argv);
 80095cc:	687d      	ldr	r5, [r7, #4]
 80095ce:	4620      	mov	r0, r4
 80095d0:	4651      	mov	r1, sl
 80095d2:	aa03      	add	r2, sp, #12
 80095d4:	47a8      	blx	r5
 80095d6:	e73c      	b.n	8009452 <shell_thread.10397+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 80095d8:	4931      	ldr	r1, [pc, #196]	; (80096a0 <shell_thread.10397+0x270>)
 80095da:	f7fd fe89 	bl	80072f0 <chprintf.10400>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80095de:	f8d9 2000 	ldr.w	r2, [r9]
 80095e2:	b142      	cbz	r2, 80095f6 <shell_thread.10397+0x1c6>
 80095e4:	4f2d      	ldr	r7, [pc, #180]	; (800969c <shell_thread.10397+0x26c>)
    chprintf(chp, "%s ", scp->sc_name);
 80095e6:	4620      	mov	r0, r4
 80095e8:	492e      	ldr	r1, [pc, #184]	; (80096a4 <shell_thread.10397+0x274>)
 80095ea:	f7fd fe81 	bl	80072f0 <chprintf.10400>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80095ee:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d1f7      	bne.n	80095e6 <shell_thread.10397+0x1b6>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 80095f6:	f1b8 0f00 	cmp.w	r8, #0
 80095fa:	d00b      	beq.n	8009614 <shell_thread.10397+0x1e4>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80095fc:	f8d8 2000 	ldr.w	r2, [r8]
 8009600:	b142      	cbz	r2, 8009614 <shell_thread.10397+0x1e4>
 8009602:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8009604:	4620      	mov	r0, r4
 8009606:	4927      	ldr	r1, [pc, #156]	; (80096a4 <shell_thread.10397+0x274>)
 8009608:	f7fd fe72 	bl	80072f0 <chprintf.10400>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 800960c:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8009610:	2a00      	cmp	r2, #0
 8009612:	d1f7      	bne.n	8009604 <shell_thread.10397+0x1d4>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8009614:	4620      	mov	r0, r4
 8009616:	491c      	ldr	r1, [pc, #112]	; (8009688 <shell_thread.10397+0x258>)
 8009618:	f7fd fe6a 	bl	80072f0 <chprintf.10400>
 800961c:	e719      	b.n	8009452 <shell_thread.10397+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 800961e:	f1b8 0f00 	cmp.w	r8, #0
 8009622:	d019      	beq.n	8009658 <shell_thread.10397+0x228>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8009624:	f8d8 0000 	ldr.w	r0, [r8]
 8009628:	b1b0      	cbz	r0, 8009658 <shell_thread.10397+0x228>
 800962a:	4647      	mov	r7, r8
 800962c:	e002      	b.n	8009634 <shell_thread.10397+0x204>
 800962e:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009632:	b188      	cbz	r0, 8009658 <shell_thread.10397+0x228>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8009634:	4629      	mov	r1, r5
 8009636:	f000 fa43 	bl	8009ac0 <strcasecmp>
 800963a:	2800      	cmp	r0, #0
 800963c:	d1f7      	bne.n	800962e <shell_thread.10397+0x1fe>
 800963e:	e7c5      	b.n	80095cc <shell_thread.10397+0x19c>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009640:	f04f 0a01 	mov.w	sl, #1
 8009644:	e78e      	b.n	8009564 <shell_thread.10397+0x134>
 8009646:	f04f 0a03 	mov.w	sl, #3
 800964a:	e78b      	b.n	8009564 <shell_thread.10397+0x134>
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800964c:	f04f 0a04 	mov.w	sl, #4
 8009650:	e788      	b.n	8009564 <shell_thread.10397+0x134>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009652:	f04f 0a02 	mov.w	sl, #2
 8009656:	e785      	b.n	8009564 <shell_thread.10397+0x134>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8009658:	4620      	mov	r0, r4
 800965a:	4913      	ldr	r1, [pc, #76]	; (80096a8 <shell_thread.10397+0x278>)
 800965c:	462a      	mov	r2, r5
 800965e:	f7fd fe47 	bl	80072f0 <chprintf.10400>
        chprintf(chp, " ?\r\n");
 8009662:	4620      	mov	r0, r4
 8009664:	4911      	ldr	r1, [pc, #68]	; (80096ac <shell_thread.10397+0x27c>)
 8009666:	f7fd fe43 	bl	80072f0 <chprintf.10400>
 800966a:	e6f2      	b.n	8009452 <shell_thread.10397+0x22>
 800966c:	20001e58 	.word	0x20001e58
 8009670:	0800ab90 	.word	0x0800ab90
 8009674:	0800ab98 	.word	0x0800ab98
 8009678:	0800abb0 	.word	0x0800abb0
 800967c:	0800abb8 	.word	0x0800abb8
 8009680:	0800ac0c 	.word	0x0800ac0c
 8009684:	20001e50 	.word	0x20001e50
 8009688:	0800a7a8 	.word	0x0800a7a8
 800968c:	0800abbc 	.word	0x0800abbc
 8009690:	0800abd4 	.word	0x0800abd4
 8009694:	08009e5c 	.word	0x08009e5c
 8009698:	0800abdc 	.word	0x0800abdc
 800969c:	20000c88 	.word	0x20000c88
 80096a0:	0800abe4 	.word	0x0800abe4
 80096a4:	0800abfc 	.word	0x0800abfc
 80096a8:	0800ac00 	.word	0x0800ac00
 80096ac:	0800ac04 	.word	0x0800ac04

080096b0 <evt3_execute.7735.4141>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 80096b0:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80096b2:	4c55      	ldr	r4, [pc, #340]	; (8009808 <evt3_execute.7735.4141+0x158>)
 80096b4:	2320      	movs	r3, #32
 80096b6:	69a2      	ldr	r2, [r4, #24]
 80096b8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80096bc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80096be:	b938      	cbnz	r0, 80096d0 <evt3_execute.7735.4141+0x20>
 80096c0:	f380 8811 	msr	BASEPRI, r0
 80096c4:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 80096c6:	2001      	movs	r0, #1
 80096c8:	f7f8 f88a 	bl	80017e0 <_test_assert>
 80096cc:	b188      	cbz	r0, 80096f2 <evt3_execute.7735.4141+0x42>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 80096d0:	4241      	negs	r1, r0
 80096d2:	4001      	ands	r1, r0
  ctp->p_epending &= ~m;
 80096d4:	ea20 0001 	bic.w	r0, r0, r1
 80096d8:	6350      	str	r0, [r2, #52]	; 0x34
 80096da:	2200      	movs	r2, #0
 80096dc:	f382 8811 	msr	BASEPRI, r2
 80096e0:	1a8b      	subs	r3, r1, r2
 80096e2:	4258      	negs	r0, r3
 80096e4:	eb50 0103 	adcs.w	r1, r0, r3
 80096e8:	2001      	movs	r0, #1
 80096ea:	f7f8 f879 	bl	80017e0 <_test_assert>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d1ed      	bne.n	80096ce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80096f2:	69a1      	ldr	r1, [r4, #24]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 80096fa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d06d      	beq.n	80097dc <evt3_execute.7735.4141+0x12c>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8009700:	6348      	str	r0, [r1, #52]	; 0x34
 8009702:	f380 8811 	msr	BASEPRI, r0
 8009706:	4601      	mov	r1, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8009708:	2002      	movs	r0, #2
 800970a:	f7f8 f869 	bl	80017e0 <_test_assert>
 800970e:	2800      	cmp	r0, #0
 8009710:	d1dd      	bne.n	80096ce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009712:	69a1      	ldr	r1, [r4, #24]
 8009714:	2220      	movs	r2, #32
 8009716:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 800971a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	d061      	beq.n	80097e4 <evt3_execute.7735.4141+0x134>
 8009720:	f380 8811 	msr	BASEPRI, r0
 8009724:	2101      	movs	r1, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8009726:	2003      	movs	r0, #3
 8009728:	f7f8 f85a 	bl	80017e0 <_test_assert>
 800972c:	2800      	cmp	r0, #0
 800972e:	d1ce      	bne.n	80096ce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009730:	69a6      	ldr	r6, [r4, #24]
 8009732:	2520      	movs	r5, #32
 8009734:	f385 8811 	msr	BASEPRI, r5
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009738:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800973a:	b94d      	cbnz	r5, 8009750 <evt3_execute.7735.4141+0xa0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 800973c:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800973e:	f04f 31ff 	mov.w	r1, #4294967295
 8009742:	6231      	str	r1, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009744:	4601      	mov	r1, r0
 8009746:	f7fa fafb 	bl	8003d40 <chSchGoSleepTimeoutS>
 800974a:	2800      	cmp	r0, #0
 800974c:	db4f      	blt.n	80097ee <evt3_execute.7735.4141+0x13e>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800974e:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8009750:	4268      	negs	r0, r5
 8009752:	4028      	ands	r0, r5
  ctp->p_epending &= ~m;
 8009754:	ea25 0500 	bic.w	r5, r5, r0
 8009758:	6375      	str	r5, [r6, #52]	; 0x34
 800975a:	2200      	movs	r2, #0
 800975c:	f382 8811 	msr	BASEPRI, r2
 8009760:	1a83      	subs	r3, r0, r2
 8009762:	4259      	negs	r1, r3
 8009764:	4159      	adcs	r1, r3
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8009766:	2004      	movs	r0, #4
 8009768:	f7f8 f83a 	bl	80017e0 <_test_assert>
 800976c:	2800      	cmp	r0, #0
 800976e:	d1ae      	bne.n	80096ce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009770:	69a5      	ldr	r5, [r4, #24]
 8009772:	2620      	movs	r6, #32
 8009774:	f386 8811 	msr	BASEPRI, r6
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009778:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800977a:	b94e      	cbnz	r6, 8009790 <evt3_execute.7735.4141+0xe0>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 800977c:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 800977e:	f04f 32ff 	mov.w	r2, #4294967295
 8009782:	622a      	str	r2, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009784:	4601      	mov	r1, r0
 8009786:	f7fa fadb 	bl	8003d40 <chSchGoSleepTimeoutS>
 800978a:	2800      	cmp	r0, #0
 800978c:	db33      	blt.n	80097f6 <evt3_execute.7735.4141+0x146>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 800978e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8009790:	2000      	movs	r0, #0
 8009792:	6368      	str	r0, [r5, #52]	; 0x34
 8009794:	f380 8811 	msr	BASEPRI, r0
 8009798:	1a33      	subs	r3, r6, r0
 800979a:	4259      	negs	r1, r3
 800979c:	4159      	adcs	r1, r3
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 800979e:	2005      	movs	r0, #5
 80097a0:	f7f8 f81e 	bl	80017e0 <_test_assert>
 80097a4:	4605      	mov	r5, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d191      	bne.n	80096ce <evt3_execute.7735.4141+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80097aa:	69a4      	ldr	r4, [r4, #24]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 80097b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d008      	beq.n	80097ca <evt3_execute.7735.4141+0x11a>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 80097bc:	200b      	movs	r0, #11
 80097be:	210a      	movs	r1, #10
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 80097c0:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 80097c2:	f7fa fabd 	bl	8003d40 <chSchGoSleepTimeoutS>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	db19      	blt.n	80097fe <evt3_execute.7735.4141+0x14e>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 80097ca:	2100      	movs	r1, #0
 80097cc:	6361      	str	r1, [r4, #52]	; 0x34
 80097ce:	f381 8811 	msr	BASEPRI, r1
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 80097d2:	2006      	movs	r0, #6
}
 80097d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 80097d8:	f7f8 b802 	b.w	80017e0 <_test_assert>
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	2101      	movs	r1, #1
 80097e2:	e791      	b.n	8009708 <evt3_execute.7735.4141+0x58>
 80097e4:	6348      	str	r0, [r1, #52]	; 0x34
 80097e6:	f380 8811 	msr	BASEPRI, r0
 80097ea:	4601      	mov	r1, r0
 80097ec:	e79b      	b.n	8009726 <evt3_execute.7735.4141+0x76>
 80097ee:	f385 8811 	msr	BASEPRI, r5
 80097f2:	2101      	movs	r1, #1
 80097f4:	e7b7      	b.n	8009766 <evt3_execute.7735.4141+0xb6>
 80097f6:	f386 8811 	msr	BASEPRI, r6
 80097fa:	2101      	movs	r1, #1
 80097fc:	e7cf      	b.n	800979e <evt3_execute.7735.4141+0xee>
 80097fe:	f385 8811 	msr	BASEPRI, r5
 8009802:	2101      	movs	r1, #1
 8009804:	e7e5      	b.n	80097d2 <evt3_execute.7735.4141+0x122>
 8009806:	bf00      	nop
 8009808:	20001e58 	.word	0x20001e58
 800980c:	f3af 8000 	nop.w

08009810 <sem4_execute.7089.4163>:

static void sem4_execute(void) {
 8009810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009812:	b087      	sub	sp, #28
 8009814:	ad03      	add	r5, sp, #12
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8009816:	2400      	movs	r4, #0
 8009818:	9504      	str	r5, [sp, #16]
 800981a:	9503      	str	r5, [sp, #12]
 800981c:	9405      	str	r4, [sp, #20]
 800981e:	2620      	movs	r6, #32
 8009820:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8009824:	4628      	mov	r0, r5
 8009826:	4621      	mov	r1, r4
 8009828:	f7f8 fdf2 	bl	8002410 <chSemResetI>
  chSchRescheduleS();
 800982c:	f7f8 f940 	bl	8001ab0 <chSchRescheduleS>
 8009830:	f384 8811 	msr	BASEPRI, r4
 8009834:	f386 8811 	msr	BASEPRI, r6
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8009838:	9905      	ldr	r1, [sp, #20]
 800983a:	2001      	movs	r0, #1
 800983c:	42a1      	cmp	r1, r4
 800983e:	bfcc      	ite	gt
 8009840:	2100      	movgt	r1, #0
 8009842:	2101      	movle	r1, #1
 8009844:	f7f7 ffcc 	bl	80017e0 <_test_assert>
 8009848:	4607      	mov	r7, r0
 800984a:	b118      	cbz	r0, 8009854 <sem4_execute.7089.4163+0x44>
 800984c:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8009850:	b007      	add	sp, #28
 8009852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009854:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8009858:	4b40      	ldr	r3, [pc, #256]	; (800995c <sem4_execute.7089.4163+0x14c>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 800985a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	483f      	ldr	r0, [pc, #252]	; (8009960 <sem4_execute.7089.4163+0x150>)
 8009862:	6892      	ldr	r2, [r2, #8]
 8009864:	4b3f      	ldr	r3, [pc, #252]	; (8009964 <sem4_execute.7089.4163+0x154>)
 8009866:	3a01      	subs	r2, #1
 8009868:	9500      	str	r5, [sp, #0]
 800986a:	f7f8 fa69 	bl	8001d40 <chThdCreateStatic>
 800986e:	493e      	ldr	r1, [pc, #248]	; (8009968 <sem4_execute.7089.4163+0x158>)
 8009870:	6008      	str	r0, [r1, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8009872:	4628      	mov	r0, r5
 8009874:	f7f8 fadc 	bl	8001e30 <chSemWait>
 8009878:	f386 8811 	msr	BASEPRI, r6
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 800987c:	9905      	ldr	r1, [sp, #20]
 800987e:	2002      	movs	r0, #2
 8009880:	2900      	cmp	r1, #0
 8009882:	bfcc      	ite	gt
 8009884:	2100      	movgt	r1, #0
 8009886:	2101      	movle	r1, #1
 8009888:	f7f7 ffaa 	bl	80017e0 <_test_assert>
 800988c:	b110      	cbz	r0, 8009894 <sem4_execute.7089.4163+0x84>
 800988e:	f387 8811 	msr	BASEPRI, r7
 8009892:	e7dd      	b.n	8009850 <sem4_execute.7089.4163+0x40>
 8009894:	f380 8811 	msr	BASEPRI, r0
 8009898:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	2800      	cmp	r0, #0
 80098a0:	dd24      	ble.n	80098ec <sem4_execute.7089.4163+0xdc>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80098a2:	f7f8 f905 	bl	8001ab0 <chSchRescheduleS>
 80098a6:	2400      	movs	r4, #0
 80098a8:	f384 8811 	msr	BASEPRI, r4
 80098ac:	2720      	movs	r7, #32
 80098ae:	f387 8811 	msr	BASEPRI, r7

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 80098b2:	9905      	ldr	r1, [sp, #20]
 80098b4:	2003      	movs	r0, #3
 80098b6:	42a1      	cmp	r1, r4
 80098b8:	bfd4      	ite	le
 80098ba:	2100      	movle	r1, #0
 80098bc:	2101      	movgt	r1, #1
 80098be:	f7f7 ff8f 	bl	80017e0 <_test_assert>
 80098c2:	4606      	mov	r6, r0
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1c1      	bne.n	800984c <sem4_execute.7089.4163+0x3c>
 80098c8:	f380 8811 	msr	BASEPRI, r0
 80098cc:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	2004      	movs	r0, #4
 80098d4:	f1b3 0c01 	subs.w	ip, r3, #1
 80098d8:	f1dc 0200 	rsbs	r2, ip, #0
 80098dc:	eb52 010c 	adcs.w	r1, r2, ip
 80098e0:	f7f7 ff7e 	bl	80017e0 <_test_assert>
 80098e4:	b130      	cbz	r0, 80098f4 <sem4_execute.7089.4163+0xe4>
 80098e6:	f386 8811 	msr	BASEPRI, r6
 80098ea:	e7b1      	b.n	8009850 <sem4_execute.7089.4163+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7f8 fd7f 	bl	80023f0 <chSemSignalI>
 80098f2:	e7d6      	b.n	80098a2 <sem4_execute.7089.4163+0x92>
 80098f4:	f380 8811 	msr	BASEPRI, r0
 80098f8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80098fc:	9c05      	ldr	r4, [sp, #20]
 80098fe:	2c00      	cmp	r4, #0
 8009900:	dd24      	ble.n	800994c <sem4_execute.7089.4163+0x13c>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009902:	f7f8 f8d5 	bl	8001ab0 <chSchRescheduleS>
 8009906:	2400      	movs	r4, #0
 8009908:	f384 8811 	msr	BASEPRI, r4
 800990c:	2620      	movs	r6, #32
 800990e:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8009912:	9905      	ldr	r1, [sp, #20]
 8009914:	2003      	movs	r0, #3
 8009916:	42a1      	cmp	r1, r4
 8009918:	bfd4      	ite	le
 800991a:	2100      	movle	r1, #0
 800991c:	2101      	movgt	r1, #1
 800991e:	f7f7 ff5f 	bl	80017e0 <_test_assert>
 8009922:	4605      	mov	r5, r0
 8009924:	2800      	cmp	r0, #0
 8009926:	d191      	bne.n	800984c <sem4_execute.7089.4163+0x3c>
 8009928:	f380 8811 	msr	BASEPRI, r0
 800992c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8009930:	9905      	ldr	r1, [sp, #20]
 8009932:	2005      	movs	r0, #5
 8009934:	f1b1 0e01 	subs.w	lr, r1, #1
 8009938:	f1de 0300 	rsbs	r3, lr, #0
 800993c:	eb53 010e 	adcs.w	r1, r3, lr
 8009940:	f7f7 ff4e 	bl	80017e0 <_test_assert>
 8009944:	b130      	cbz	r0, 8009954 <sem4_execute.7089.4163+0x144>
 8009946:	f385 8811 	msr	BASEPRI, r5
 800994a:	e781      	b.n	8009850 <sem4_execute.7089.4163+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800994c:	4628      	mov	r0, r5
 800994e:	f7f8 fd4f 	bl	80023f0 <chSemSignalI>
 8009952:	e7d6      	b.n	8009902 <sem4_execute.7089.4163+0xf2>
 8009954:	f380 8811 	msr	BASEPRI, r0
 8009958:	e77a      	b.n	8009850 <sem4_execute.7089.4163+0x40>
 800995a:	bf00      	nop
 800995c:	20001e58 	.word	0x20001e58
 8009960:	200017e8 	.word	0x200017e8
 8009964:	08008bd1 	.word	0x08008bd1
 8009968:	20001fa8 	.word	0x20001fa8
 800996c:	f3af 8000 	nop.w

08009970 <chThdExit>:
 8009970:	2320      	movs	r3, #32
 8009972:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8009976:	f7f8 bd83 	b.w	8002480 <chThdExitS>
 800997a:	bf00      	nop
 800997c:	f3af 8000 	nop.w

08009980 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8009980:	f7f8 b876 	b.w	8001a70 <chSchDoRescheduleAhead>
 8009984:	f3af 8000 	nop.w
 8009988:	f3af 8000 	nop.w
 800998c:	f3af 8000 	nop.w

08009990 <memset>:
 8009990:	b4f0      	push	{r4, r5, r6, r7}
 8009992:	0784      	lsls	r4, r0, #30
 8009994:	4603      	mov	r3, r0
 8009996:	f000 808d 	beq.w	8009ab4 <memset+0x124>
 800999a:	1e54      	subs	r4, r2, #1
 800999c:	2a00      	cmp	r2, #0
 800999e:	f000 8087 	beq.w	8009ab0 <memset+0x120>
 80099a2:	07e5      	lsls	r5, r4, #31
 80099a4:	b2ce      	uxtb	r6, r1
 80099a6:	d411      	bmi.n	80099cc <memset+0x3c>
 80099a8:	461a      	mov	r2, r3
 80099aa:	f802 6b01 	strb.w	r6, [r2], #1
 80099ae:	4613      	mov	r3, r2
 80099b0:	4615      	mov	r5, r2
 80099b2:	0792      	lsls	r2, r2, #30
 80099b4:	d010      	beq.n	80099d8 <memset+0x48>
 80099b6:	1e62      	subs	r2, r4, #1
 80099b8:	2c00      	cmp	r4, #0
 80099ba:	d079      	beq.n	8009ab0 <memset+0x120>
 80099bc:	f803 6b01 	strb.w	r6, [r3], #1
 80099c0:	4614      	mov	r4, r2
 80099c2:	079a      	lsls	r2, r3, #30
 80099c4:	461d      	mov	r5, r3
 80099c6:	d007      	beq.n	80099d8 <memset+0x48>
 80099c8:	3c01      	subs	r4, #1
 80099ca:	e7ed      	b.n	80099a8 <memset+0x18>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f803 6b01 	strb.w	r6, [r3], #1
 80099d2:	079a      	lsls	r2, r3, #30
 80099d4:	461d      	mov	r5, r3
 80099d6:	d1f7      	bne.n	80099c8 <memset+0x38>
 80099d8:	2c03      	cmp	r4, #3
 80099da:	d952      	bls.n	8009a82 <memset+0xf2>
 80099dc:	b2ce      	uxtb	r6, r1
 80099de:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 80099e2:	2c0f      	cmp	r4, #15
 80099e4:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 80099e8:	d92d      	bls.n	8009a46 <memset+0xb6>
 80099ea:	f1a4 0210 	sub.w	r2, r4, #16
 80099ee:	4617      	mov	r7, r2
 80099f0:	2f0f      	cmp	r7, #15
 80099f2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	606b      	str	r3, [r5, #4]
 80099fa:	60ab      	str	r3, [r5, #8]
 80099fc:	60eb      	str	r3, [r5, #12]
 80099fe:	f105 0210 	add.w	r2, r5, #16
 8009a02:	d916      	bls.n	8009a32 <memset+0xa2>
 8009a04:	b13e      	cbz	r6, 8009a16 <memset+0x86>
 8009a06:	3f10      	subs	r7, #16
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	6053      	str	r3, [r2, #4]
 8009a0c:	6093      	str	r3, [r2, #8]
 8009a0e:	60d3      	str	r3, [r2, #12]
 8009a10:	3210      	adds	r2, #16
 8009a12:	2f0f      	cmp	r7, #15
 8009a14:	d90d      	bls.n	8009a32 <memset+0xa2>
 8009a16:	3f20      	subs	r7, #32
 8009a18:	f102 0610 	add.w	r6, r2, #16
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	6053      	str	r3, [r2, #4]
 8009a20:	6093      	str	r3, [r2, #8]
 8009a22:	60d3      	str	r3, [r2, #12]
 8009a24:	6113      	str	r3, [r2, #16]
 8009a26:	6153      	str	r3, [r2, #20]
 8009a28:	6193      	str	r3, [r2, #24]
 8009a2a:	61d3      	str	r3, [r2, #28]
 8009a2c:	3220      	adds	r2, #32
 8009a2e:	2f0f      	cmp	r7, #15
 8009a30:	d8f1      	bhi.n	8009a16 <memset+0x86>
 8009a32:	f1a4 0210 	sub.w	r2, r4, #16
 8009a36:	f022 020f 	bic.w	r2, r2, #15
 8009a3a:	f004 040f 	and.w	r4, r4, #15
 8009a3e:	3210      	adds	r2, #16
 8009a40:	2c03      	cmp	r4, #3
 8009a42:	4415      	add	r5, r2
 8009a44:	d91d      	bls.n	8009a82 <memset+0xf2>
 8009a46:	1f27      	subs	r7, r4, #4
 8009a48:	463e      	mov	r6, r7
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	2e03      	cmp	r6, #3
 8009a4e:	f842 3b04 	str.w	r3, [r2], #4
 8009a52:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8009a56:	d90d      	bls.n	8009a74 <memset+0xe4>
 8009a58:	b127      	cbz	r7, 8009a64 <memset+0xd4>
 8009a5a:	3e04      	subs	r6, #4
 8009a5c:	2e03      	cmp	r6, #3
 8009a5e:	f842 3b04 	str.w	r3, [r2], #4
 8009a62:	d907      	bls.n	8009a74 <memset+0xe4>
 8009a64:	4617      	mov	r7, r2
 8009a66:	f847 3b04 	str.w	r3, [r7], #4
 8009a6a:	3e08      	subs	r6, #8
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	1d3a      	adds	r2, r7, #4
 8009a70:	2e03      	cmp	r6, #3
 8009a72:	d8f7      	bhi.n	8009a64 <memset+0xd4>
 8009a74:	1f23      	subs	r3, r4, #4
 8009a76:	f023 0203 	bic.w	r2, r3, #3
 8009a7a:	1d13      	adds	r3, r2, #4
 8009a7c:	f004 0403 	and.w	r4, r4, #3
 8009a80:	18ed      	adds	r5, r5, r3
 8009a82:	b1ac      	cbz	r4, 8009ab0 <memset+0x120>
 8009a84:	b2c9      	uxtb	r1, r1
 8009a86:	43ea      	mvns	r2, r5
 8009a88:	192c      	adds	r4, r5, r4
 8009a8a:	f805 1b01 	strb.w	r1, [r5], #1
 8009a8e:	18a3      	adds	r3, r4, r2
 8009a90:	42a5      	cmp	r5, r4
 8009a92:	f003 0201 	and.w	r2, r3, #1
 8009a96:	d00b      	beq.n	8009ab0 <memset+0x120>
 8009a98:	b11a      	cbz	r2, 8009aa2 <memset+0x112>
 8009a9a:	f805 1b01 	strb.w	r1, [r5], #1
 8009a9e:	42a5      	cmp	r5, r4
 8009aa0:	d006      	beq.n	8009ab0 <memset+0x120>
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa8:	7069      	strb	r1, [r5, #1]
 8009aaa:	1c5d      	adds	r5, r3, #1
 8009aac:	42a5      	cmp	r5, r4
 8009aae:	d1f8      	bne.n	8009aa2 <memset+0x112>
 8009ab0:	bcf0      	pop	{r4, r5, r6, r7}
 8009ab2:	4770      	bx	lr
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	4614      	mov	r4, r2
 8009ab8:	e78e      	b.n	80099d8 <memset+0x48>
 8009aba:	bf00      	nop
 8009abc:	0000      	movs	r0, r0
	...

08009ac0 <strcasecmp>:
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <strcasecmp+0x40>)
 8009ac2:	b470      	push	{r4, r5, r6}
 8009ac4:	681d      	ldr	r5, [r3, #0]
 8009ac6:	f810 6b01 	ldrb.w	r6, [r0], #1
 8009aca:	19aa      	adds	r2, r5, r6
 8009acc:	7854      	ldrb	r4, [r2, #1]
 8009ace:	4632      	mov	r2, r6
 8009ad0:	f004 0303 	and.w	r3, r4, #3
 8009ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	bf08      	it	eq
 8009adc:	f106 0220 	addeq.w	r2, r6, #32
 8009ae0:	192e      	adds	r6, r5, r4
 8009ae2:	7876      	ldrb	r6, [r6, #1]
 8009ae4:	4623      	mov	r3, r4
 8009ae6:	f006 0603 	and.w	r6, r6, #3
 8009aea:	2e01      	cmp	r6, #1
 8009aec:	bf08      	it	eq
 8009aee:	f104 0320 	addeq.w	r3, r4, #32
 8009af2:	1ad2      	subs	r2, r2, r3
 8009af4:	d101      	bne.n	8009afa <strcasecmp+0x3a>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <strcasecmp+0x6>
 8009afa:	4610      	mov	r0, r2
 8009afc:	bc70      	pop	{r4, r5, r6}
 8009afe:	4770      	bx	lr
 8009b00:	20000cec 	.word	0x20000cec
	...

08009b10 <strcpy>:
 8009b10:	ea80 0201 	eor.w	r2, r0, r1
 8009b14:	4684      	mov	ip, r0
 8009b16:	f012 0f03 	tst.w	r2, #3
 8009b1a:	d14f      	bne.n	8009bbc <strcpy+0xac>
 8009b1c:	f011 0f03 	tst.w	r1, #3
 8009b20:	d132      	bne.n	8009b88 <strcpy+0x78>
 8009b22:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8009b26:	f011 0f04 	tst.w	r1, #4
 8009b2a:	f851 3b04 	ldr.w	r3, [r1], #4
 8009b2e:	d00b      	beq.n	8009b48 <strcpy+0x38>
 8009b30:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8009b34:	439a      	bics	r2, r3
 8009b36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8009b3a:	bf04      	itt	eq
 8009b3c:	f84c 3b04 	streq.w	r3, [ip], #4
 8009b40:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009b44:	d116      	bne.n	8009b74 <strcpy+0x64>
 8009b46:	bf00      	nop
 8009b48:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b4c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8009b50:	439a      	bics	r2, r3
 8009b52:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8009b56:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8009b5a:	d10b      	bne.n	8009b74 <strcpy+0x64>
 8009b5c:	f84c 3b04 	str.w	r3, [ip], #4
 8009b60:	43a2      	bics	r2, r4
 8009b62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8009b66:	bf04      	itt	eq
 8009b68:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009b6c:	f84c 4b04 	streq.w	r4, [ip], #4
 8009b70:	d0ea      	beq.n	8009b48 <strcpy+0x38>
 8009b72:	4623      	mov	r3, r4
 8009b74:	f80c 3b01 	strb.w	r3, [ip], #1
 8009b78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b7c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009b80:	d1f8      	bne.n	8009b74 <strcpy+0x64>
 8009b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	f011 0f01 	tst.w	r1, #1
 8009b8c:	d006      	beq.n	8009b9c <strcpy+0x8c>
 8009b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b92:	f80c 2b01 	strb.w	r2, [ip], #1
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	bf08      	it	eq
 8009b9a:	4770      	bxeq	lr
 8009b9c:	f011 0f02 	tst.w	r1, #2
 8009ba0:	d0bf      	beq.n	8009b22 <strcpy+0x12>
 8009ba2:	f831 2b02 	ldrh.w	r2, [r1], #2
 8009ba6:	f012 0fff 	tst.w	r2, #255	; 0xff
 8009baa:	bf16      	itet	ne
 8009bac:	f82c 2b02 	strhne.w	r2, [ip], #2
 8009bb0:	f88c 2000 	strbeq.w	r2, [ip]
 8009bb4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8009bb8:	d1b3      	bne.n	8009b22 <strcpy+0x12>
 8009bba:	4770      	bx	lr
 8009bbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bc0:	f80c 2b01 	strb.w	r2, [ip], #1
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	d1f9      	bne.n	8009bbc <strcpy+0xac>
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	0000      	movs	r0, r0
	...

08009bd0 <strlen>:
 8009bd0:	f020 0103 	bic.w	r1, r0, #3
 8009bd4:	f010 0003 	ands.w	r0, r0, #3
 8009bd8:	f1c0 0000 	rsb	r0, r0, #0
 8009bdc:	f851 3b04 	ldr.w	r3, [r1], #4
 8009be0:	f100 0c04 	add.w	ip, r0, #4
 8009be4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009be8:	f06f 0200 	mvn.w	r2, #0
 8009bec:	bf1c      	itt	ne
 8009bee:	fa22 f20c 	lsrne.w	r2, r2, ip
 8009bf2:	4313      	orrne	r3, r2
 8009bf4:	f04f 0c01 	mov.w	ip, #1
 8009bf8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8009bfc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8009c00:	eba3 020c 	sub.w	r2, r3, ip
 8009c04:	ea22 0203 	bic.w	r2, r2, r3
 8009c08:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8009c0c:	bf04      	itt	eq
 8009c0e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009c12:	3004      	addeq	r0, #4
 8009c14:	d0f4      	beq.n	8009c00 <strlen+0x30>
 8009c16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c1a:	bf1f      	itttt	ne
 8009c1c:	3001      	addne	r0, #1
 8009c1e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8009c22:	3001      	addne	r0, #1
 8009c24:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8009c28:	bf18      	it	ne
 8009c2a:	3001      	addne	r0, #1
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop

08009c30 <strpbrk>:
 8009c30:	b4f0      	push	{r4, r5, r6, r7}
 8009c32:	7804      	ldrb	r4, [r0, #0]
 8009c34:	2c00      	cmp	r4, #0
 8009c36:	d01f      	beq.n	8009c78 <strpbrk+0x48>
 8009c38:	780e      	ldrb	r6, [r1, #0]
 8009c3a:	4607      	mov	r7, r0
 8009c3c:	b1a6      	cbz	r6, 8009c68 <strpbrk+0x38>
 8009c3e:	42a6      	cmp	r6, r4
 8009c40:	d018      	beq.n	8009c74 <strpbrk+0x44>
 8009c42:	1c4b      	adds	r3, r1, #1
 8009c44:	e001      	b.n	8009c4a <strpbrk+0x1a>
 8009c46:	4294      	cmp	r4, r2
 8009c48:	d009      	beq.n	8009c5e <strpbrk+0x2e>
 8009c4a:	461d      	mov	r5, r3
 8009c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	d1f8      	bne.n	8009c46 <strpbrk+0x16>
 8009c54:	787c      	ldrb	r4, [r7, #1]
 8009c56:	3001      	adds	r0, #1
 8009c58:	2c00      	cmp	r4, #0
 8009c5a:	d1ee      	bne.n	8009c3a <strpbrk+0xa>
 8009c5c:	782a      	ldrb	r2, [r5, #0]
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	bf08      	it	eq
 8009c62:	2000      	moveq	r0, #0
 8009c64:	bcf0      	pop	{r4, r5, r6, r7}
 8009c66:	4770      	bx	lr
 8009c68:	787c      	ldrb	r4, [r7, #1]
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	d1e3      	bne.n	8009c3a <strpbrk+0xa>
 8009c72:	e7f3      	b.n	8009c5c <strpbrk+0x2c>
 8009c74:	4632      	mov	r2, r6
 8009c76:	e7f2      	b.n	8009c5e <strpbrk+0x2e>
 8009c78:	4620      	mov	r0, r4
 8009c7a:	e7f3      	b.n	8009c64 <strpbrk+0x34>
 8009c7c:	0000      	movs	r0, r0
	...

08009c80 <strspn>:
 8009c80:	b4f0      	push	{r4, r5, r6, r7}
 8009c82:	7804      	ldrb	r4, [r0, #0]
 8009c84:	b1d4      	cbz	r4, 8009cbc <strspn+0x3c>
 8009c86:	780f      	ldrb	r7, [r1, #0]
 8009c88:	4606      	mov	r6, r0
 8009c8a:	b19f      	cbz	r7, 8009cb4 <strspn+0x34>
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	42bc      	cmp	r4, r7
 8009c90:	bf18      	it	ne
 8009c92:	460a      	movne	r2, r1
 8009c94:	d102      	bne.n	8009c9c <strspn+0x1c>
 8009c96:	e008      	b.n	8009caa <strspn+0x2a>
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	d006      	beq.n	8009caa <strspn+0x2a>
 8009c9c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1f9      	bne.n	8009c98 <strspn+0x18>
 8009ca4:	1a28      	subs	r0, r5, r0
 8009ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8009ca8:	4770      	bx	lr
 8009caa:	786c      	ldrb	r4, [r5, #1]
 8009cac:	3601      	adds	r6, #1
 8009cae:	b11c      	cbz	r4, 8009cb8 <strspn+0x38>
 8009cb0:	4635      	mov	r5, r6
 8009cb2:	e7ec      	b.n	8009c8e <strspn+0xe>
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	e7f6      	b.n	8009ca6 <strspn+0x26>
 8009cb8:	1a30      	subs	r0, r6, r0
 8009cba:	e7f4      	b.n	8009ca6 <strspn+0x26>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	e7f2      	b.n	8009ca6 <strspn+0x26>
 8009cc0:	00000101 	.word	0x00000101
 8009cc4:	00020111 	.word	0x00020111
 8009cc8:	00001001 	.word	0x00001001
 8009ccc:	00022011 	.word	0x00022011
 8009cd0:	00000002 	.word	0x00000002
 8009cd4:	22031211 	.word	0x22031211
 8009cd8:	000a0006 	.word	0x000a0006
 8009cdc:	190b2011 	.word	0x190b2011
 8009ce0:	80030880 	.word	0x80030880
 8009ce4:	7410f000 	.word	0x7410f000
 8009ce8:	005500e8 	.word	0x005500e8
 8009cec:	240c2011 	.word	0x240c2011
 8009cf0:	03ab0c06 	.word	0x03ab0c06
 8009cf4:	00c20203 	.word	0x00c20203
 8009cf8:	01c03204 	.word	0x01c03204
 8009cfc:	30032011 	.word	0x30032011
 8009d00:	00c06403 	.word	0x00c06403
 8009d04:	50022011 	.word	0x50022011
 8009d08:	00000a84 	.word	0x00000a84
 8009d0c:	54022011 	.word	0x54022011
 8009d10:	0000070f 	.word	0x0000070f
 8009d14:	5b052011 	.word	0x5b052011
 8009d18:	78210440 	.word	0x78210440
 8009d1c:	00000020 	.word	0x00000020
 8009d20:	000c2111 	.word	0x000c2111
 8009d24:	510fbaff 	.word	0x510fbaff
 8009d28:	fcc9a9cf 	.word	0xfcc9a9cf
 8009d2c:	010f1e1b 	.word	0x010f1e1b
 8009d30:	0c0c2111 	.word	0x0c0c2111
 8009d34:	ff15fdfc 	.word	0xff15fdfc
 8009d38:	baff0f00 	.word	0xbaff0f00
 8009d3c:	a9cf510f 	.word	0xa9cf510f
 8009d40:	180c2111 	.word	0x180c2111
 8009d44:	1e1bfcc9 	.word	0x1e1bfcc9
 8009d48:	fdfc010f 	.word	0xfdfc010f
 8009d4c:	0f00ff15 	.word	0x0f00ff15
 8009d50:	06011211 	.word	0x06011211
 8009d54:	00000080 	.word	0x00000080
 8009d58:	00011211 	.word	0x00011211
 8009d5c:	00000085 	.word	0x00000085
 8009d60:	01021111 	.word	0x01021111
 8009d64:	000091d3 	.word	0x000091d3
 8009d68:	00300031 	.word	0x00300031
 8009d6c:	00000000 	.word	0x00000000
 8009d70:	656c6469 	.word	0x656c6469
	...

08009d80 <evhndl.7763.4465>:
 8009d80:	08005891 080058a1 080058b1 00000000     .X...X...X......

08009d90 <states.8443.10954.4511>:
 8009d90:	0800a050 0800a058 0800a060 0800a068     P...X...`...h...
 8009da0:	0800a074 0800a07c 0800a084 0800a08c     t...|...........
 8009db0:	0800a094 0800a0a0 0800a0a8 0800a0b0     ................
 8009dc0:	0800a0bc 0800a0c4 0800a0cc 0800a0d4     ................
 8009dd0:	44434241 00000000 67617355 74203a65     ABCD....Usage: t
 8009de0:	61657268 0a0d7364 00000000 20202020     hreads......    
 8009df0:	72646461 20202020 63617473 7270206b     addr    stack pr
 8009e00:	72206f69 20736665 20202020 74617473     io refs     stat
 8009e10:	000a0d65 6c383025 30252078 20786c38     e...%08lx %08lx 
 8009e20:	756c3425 6c342520 39252075 000a0d73     %4lu %4lu %9s...
 8009e30:	656e7554 70752073 20796220 7a683035     Tunes up by 50hz
 8009e40:	7355202c 3a656761 0a0d7520 00000000     , Usage: u......
 8009e50:	00434241 44434241 00000045 67617355     ABC.ABCDE...Usag
 8009e60:	25203a65 000a0d73 6f666e69 00000000     e: %s...info....
 8009e70:	6e72654b 203a6c65 20202020 73252020     Kernel:       %s
 8009e80:	00000a0d 2e302e33 76656430 00000000     ....3.0.0dev....
 8009e90:	706d6f43 72656c69 2020203a 73252020     Compiler:     %s
 8009ea0:	00000a0d 20434347 2e372e34 30322034     ....GCC 4.7.4 20
 8009eb0:	39303331 28203331 656c6572 29657361     130913 (release)
 8009ec0:	52415b20 6d652f4d 64646562 342d6465      [ARM/embedded-4
 8009ed0:	622d375f 636e6172 65722068 69736976     _7-branch revisi
 8009ee0:	32206e6f 30363230 00005d31 68637241     on 202601]..Arch
 8009ef0:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 8009f00:	764d5241 004d2d37 65726f43 72615620     ARMv7-M.Core Var
 8009f10:	746e6169 7325203a 00000a0d 74726f43     iant: %s....Cort
 8009f20:	4d2d7865 00000033 74726f50 666e4920     ex-M3...Port Inf
 8009f30:	20203a6f 73252020 00000a0d 61766441     o:    %s....Adva
 8009f40:	6465636e 72656b20 206c656e 65646f6d     nced kernel mode
 8009f50:	00000000 74616c50 6d726f66 2020203a     ....Platform:   
 8009f60:	73252020 00000a0d 334d5453 30314632       %s....STM32F10
 8009f70:	65502078 726f6672 636e616d 694c2065     x Performance Li
 8009f80:	4d20656e 75696465 6544206d 7469736e     ne Medium Densit
 8009f90:	00000079 72616f42 20203a64 20202020     y...Board:      
 8009fa0:	73252020 00000a0d 55207854 6e696c70       %s....Tx Uplin
 8009fb0:	6f62206b 00647261 6c697542 69742064     k board.Build ti
 8009fc0:	203a656d 73252020 73257325 00000a0d     me:   %s%s%s....
 8009fd0:	206e614a 32203432 00353130 00202d20     Jan 24 2015. - .
 8009fe0:	313a3232 32353a30 00000000 74737973     22:10:52....syst
 8009ff0:	00656d69 0d756c25 0000000a 202d2d2d     ime.%lu.....--- 
 800a000:	726f6353 203a2065 00000000 636f6c20     Score : .... loc
 800a010:	6e752b6b 6b636f6c 0000532f 72687420     k+unlock/S.. thr
 800a020:	73646165 0000532f 69617720 69732b74     eads/S.. wait+si
 800a030:	6c616e67 0000532f 6d697420 2f737265     gnal/S.. timers/
 800a040:	00000053 78746320 2f637773 00000053     S... ctxswc/S...
 800a050:	44414552 00000059 52525543 00544e45     READY...CURRENT.
 800a060:	54535457 00545241 50535553 45444e45     WTSTART.SUSPENDE
 800a070:	00000044 55455551 00004445 45535457     D...QUEUED..WTSE
 800a080:	0000004d 544d5457 00000058 4f435457     M...WTMTX...WTCO
 800a090:	0000444e 45454c53 474e4950 00000000     ND..SLEEPING....
 800a0a0:	58455457 00005449 524f5457 00545645     WTEXIT..WTOREVT.
 800a0b0:	4e415457 54564544 00000000 4d444e53     WTANDEVT....SNDM
 800a0c0:	00514753 4d444e53 00004753 534d5457     SGQ.SNDMSG..WTMS
 800a0d0:	00000047 414e4946 0000004c 00000000     G...FINAL.......

0800a0e0 <vcom_configuration_descriptor_data.11214.4721>:
 800a0e0:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800a0f0:	24050001 05011000 01000124 02022404     ...$....$....$..
 800a100:	00062405 82050701 ff000803 00010409     .$..............
 800a110:	00000a02 01050700 00004002 02810507     .........@......
 800a120:	00000040 00000000 00000000 00000000     @...............

0800a130 <vcom_device_descriptor.11211.4718>:
 800a130:	00000012 0800a210 00000000 00000000     ................

0800a140 <vcom_string2.11209.4716>:
 800a140:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800a150:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800a160:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800a170:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800a180 <vcom_configuration_descriptor.11213.4720>:
 800a180:	00000043 0800a0e0 00000000 00000000     C...............

0800a190 <vcom_string0.11207.4714>:
 800a190:	04090304 00000000 00000000 00000000     ................

0800a1a0 <vcom_strings.11206.4713>:
 800a1a0:	00000004 0800a190 00000012 0800a1f0     ................
 800a1b0:	00000038 0800a140 00000008 0800a1e0     8...@...........
 800a1c0:	20414d44 6c696166 00657275 00000041     DMA failure.A...
 800a1d0:	00000043 00000042 00000920 00000000     C...B... .......

0800a1e0 <vcom_string3.11210.4717>:
 800a1e0:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800a1f0 <vcom_string1.11208.4715>:
 800a1f0:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 800a200:	00000073 00000000 00000000 00000000     s...............

0800a210 <vcom_device_descriptor_data.11212.4719>:
 800a210:	01100112 40000002 00041eaf 02010200     .......@........
 800a220:	00000103 00000000 00000000 00000000     ................
 800a230:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 800a240:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 800a250:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 800a260:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 800a270:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 800a280:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 800a290:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 800a2a0:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 800a2b0:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 800a2c0:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 800a2d0:	203a2e42 00000000 00004241 00000000     B.: ....AB......

0800a2e0 <CSWTCH.26.10233.10233.4562>:
 800a2e0:	00000400 00000600 00000000 00000000     ................

0800a2f0 <halted_status.9478.4385>:
 800a2f0:	00000001 00000000 00000000 00000000     ................

0800a300 <ep0config.10234>:
 800a300:	00000000 080066d1 08008b01 08006bb1     .....f.......k..
 800a310:	00400040 20000d74 20000d74 00000001     @.@.t.. t.. ....
 800a320:	20000d88 00000000 00000000 00000000     ... ............

0800a330 <zero_status.9477.4384>:
	...

0800a340 <ep1config.11200>:
 800a340:	00000002 00000000 08006ac1 080083d1     .........j......
 800a350:	00400040 20000d90 20000da0 00000002     @.@.... ... ....
	...

0800a370 <active_status.9479.4386>:
	...

0800a380 <CSWTCH.32.10240.10240.4387>:
 800a380:	02020200 02020202 02020202 02020202     ................
 800a390:	00000001 00000000 00000000 00000000     ................

0800a3a0 <ch_debug.4913>:
 800a3a0:	6e69616d 18001600 08440204 1814100c     main......D.....
 800a3b0:	1e1d1c00 00000000 00000000 00000000     ................

0800a3c0 <vmt.8941.4912>:
 800a3c0:	080050a1 08004f71 08005001 08004ed1     .P..qO...P...N..
 800a3d0:	08004ff1 08004ec1 08005091 08004f61     .O...N...P..aO..

0800a3e0 <pow10.10603.4959>:
 800a3e0:	0000000a 00000064 000003e8 00002710     ....d........'..
 800a3f0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 800a400:	3b9aca00 00000000 00000000 00000000     ...;............

0800a410 <_stm32_dma_streams.4956>:
 800a410:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 800a420:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 800a430:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 800a440:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 800a450:	40020004 00100514 40020080 40020004     ...@.......@...@
 800a460:	00110618 00000000 00000000 00000000     ................
 800a470:	6c756e28 0000296c 67617355 6d203a65     (null)..Usage: m
 800a480:	0a0d6d65 00000000 65726f63 65726620     em......core fre
 800a490:	656d2065 79726f6d 25203a20 79622075     e memory : %u by
 800a4a0:	0d736574 0000000a 70616568 61726620     tes.....heap fra
 800a4b0:	6e656d67 20207374 25203a20 000a0d75     gments   : %u...
 800a4c0:	70616568 65726620 6f742065 206c6174     heap free total 
 800a4d0:	25203a20 79622075 0d736574 0000000a      : %u bytes.....
 800a4e0:	67617355 74203a65 0d747365 0000000a     Usage: test.....
 800a4f0:	2074756f 6d20666f 726f6d65 000a0d79     out of memory...
 800a500:	730a0a0d 70706f74 0a0d6465 00000000     ...stopped......
 800a510:	67617355 77203a65 65746972 00000a0d     Usage: write....
 800a520:	6e696c62 0072656b 202a2a2a 62696843     blinker.*** Chib
 800a530:	2f534f69 74205452 20747365 74697573     iOS/RT test suit
 800a540:	00000065 002a2a2a 202a2a2a 6e72654b     e...***.*** Kern
 800a550:	203a6c65 20202020 00002020 202d2d2d     el:       ..--- 
 800a560:	74736554 73614320 00002065 00000029     Test Case ..)...
 800a570:	202d2d2d 75736552 203a746c 4c494146     --- Result: FAIL
 800a580:	20455255 00002328 0000295d 202d2d2d     URE (#..])..--- 
 800a590:	75736552 203a746c 43435553 00535345     Result: SUCCESS.
 800a5a0:	4c494146 00455255 202a2a2a 706d6f43     FAILURE.*** Comp
 800a5b0:	64656c69 2020203a 00002020 206e614a     iled:     ..Jan 
 800a5c0:	32203432 20353130 3232202d 3a39303a     24 2015 - 22:09:
 800a5d0:	00003131 202a2a2a 706d6f43 72656c69     11..*** Compiler
 800a5e0:	2020203a 00002020 202a2a2a 68637241     :     ..*** Arch
 800a5f0:	63657469 65727574 0000203a 202a2a2a     itecture: ..*** 
 800a600:	65726f43 72615620 746e6169 0000203a     Core Variant: ..
 800a610:	202a2a2a 74726f50 666e4920 20203a6f     *** Port Info:  
 800a620:	00002020 202a2a2a 74616c50 6d726f66       ..*** Platform
 800a630:	2020203a 00002020 202a2a2a 74736554     :     ..*** Test
 800a640:	616f4220 203a6472 00002020 00002820      Board:   .. (..
 800a650:	00005b20 616e6946 6572206c 746c7573      [..Final result
 800a660:	0000203a 73657220 64656863 73656c75     : .. reschedules
 800a670:	202c532f 00000000 67736d20 2c532f73     /S, .... msgs/S,
 800a680:	00000020 00000000 00000000 00000000      ...............

0800a690 <serusbcfg>:
 800a690:	20001438 00020101 00000000 00000000     8.. ............
 800a6a0:	34346973 00003233 00000000 00000000     si4432..........

0800a6b0 <spicfg.11460.4435>:
 800a6b0:	08003c31 40010800 000c0004 00000000     1<.....@........

0800a6c0 <ep2config.11203.4687>:
 800a6c0:	00000003 00000000 080051a1 00000000     .........Q......
 800a6d0:	00000010 200017c4 00000000 00000001     ....... ........
	...

0800a6f0 <usbcfg>:
 800a6f0:	08008cf1 080034f1 080051b1 00000000     .....4...Q......

0800a700 <commands.10912>:
 800a700:	0800a7b8 08007331 0800a7bc 08002971     ....1s......q)..
 800a710:	0800ad08 08007391 0800a7c4 080073f1     .....s.......s..
 800a720:	0800a7cc 080029f1 0800a7d0 08008ca1     .....)..........
 800a730:	0800afc4 08008bf1 00000000 00000000     ................
 800a740:	646e6553 20612073 6b636170 202c7465     Sends a packet, 
 800a750:	67617355 73203a65 61703c20 74656b63     Usage: s <packet
 800a760:	000a0d3e 6361703c 3e74656b 73756d20     >...<packet> mus
 800a770:	65622074 61786520 796c7463 63203620     t be exactly 6 c
 800a780:	61726168 72657463 000a0d73 656e7554     haracters...Tune
 800a790:	6f642073 62206e77 30352079 202c7a68     s down by 50hz, 
 800a7a0:	67617355 64203a65 00000a0d 74796220     Usage: d.... byt
 800a7b0:	532f7365 00000000 006d656d 65726874     es/S....mem.thre
 800a7c0:	00736461 74697277 00000065 00000075     ads.write...u...
 800a7d0:	00000064 00000000 00000000 00000000     d...............

0800a7e0 <shell_cfg1.10911>:
 800a7e0:	20001544 0800a700 00000000 00000000     D.. ............

0800a7f0 <patternthd>:
 800a7f0:	0800aad0 0800a880 0800a960 0800ab70     ........`...p...
	...

0800a810 <testmtx4.4498>:
 800a810:	0800ad10 08004271 00000000 08007811     ....qB.......x..

0800a820 <patternmsg>:
 800a820:	0800aa80 00000000 00000000 00000000     ................

0800a830 <testbmk6.4552>:
 800a830:	0800af80 00000000 00000000 08003101     .............1..

0800a840 <patternbmk>:
 800a840:	0800a8d0 0800a890 0800a980 0800a8c0     ................
 800a850:	0800aa40 0800a830 0800a920 0800a9f0     @...0... .......
 800a860:	0800aae0 0800a9e0 0800ab20 0800a8b0     ........ .......
 800a870:	0800aa30 00000000 00000000 00000000     0...............

0800a880 <testthd2.4480>:
 800a880:	0800ac34 00000000 00000000 08005b61     4...........a[..

0800a890 <testbmk2.4548>:
 800a890:	0800af14 00000000 00000000 08007f61     ............a...

0800a8a0 <patterndyn>:
 800a8a0:	0800aa00 0800a930 0800aa90 00000000     ....0...........

0800a8b0 <testbmk12.4558>:
 800a8b0:	0800b060 080042b1 00000000 08003091     `....B.......0..

0800a8c0 <testbmk4.4550>:
 800a8c0:	0800af44 00000000 00000000 08007df1     D............}..

0800a8d0 <testbmk1.4543>:
 800a8d0:	0800aefc 00000000 00000000 08007ee1     .............~..

0800a8e0 <testsem4.4491>:
 800a8e0:	0800acc8 00000000 00000000 08009811     ................

0800a8f0 <testsem1.4484>:
 800a8f0:	0800ac7c 08003421 00000000 08003a41     |...!4......A:..

0800a900 <patternevt>:
 800a900:	0800ab30 0800aa20 0800a950 00000000     0... ...P.......

0800a910 <testmtx6.4500>:
 800a910:	0800ad3c 08004231 00000000 08003861     <...1B......a8..

0800a920 <testbmk7.4553>:
 800a920:	0800afa0 08003461 00000000 08007c51     ....a4......Q|..

0800a930 <testdyn2.4533>:
 800a930:	0800ae74 08003481 00000000 08004501     t....4.......E..

0800a940 <patternpools>:
 800a940:	0800aa70 00000000 00000000 00000000     p...............

0800a950 <testevt3.4460>:
 800a950:	0800adf0 08003f21 00000000 080096b1     ....!?..........

0800a960 <testthd3.4481>:
 800a960:	0800ac50 00000000 00000000 08001b01     P...............

0800a970 <testqueues2.4541>:
 800a970:	0800aee4 08004171 00000000 080026d1     ....qA.......&..

0800a980 <testbmk3.4549>:
 800a980:	0800af2c 00000000 00000000 08007fe1     ,...............

0800a990 <testmtx5.4499>:
 800a990:	0800ad2c 08004251 00000000 080025d1     ,...QB.......%..

0800a9a0 <patternmbox>:
 800a9a0:	0800aa10 00000000 00000000 00000000     ................

0800a9b0 <patterns.6764>:
 800a9b0:	0800a7f0 0800aaf0 0800aab0 0800a820     ............ ...
 800a9c0:	0800a9a0 0800a900 0800aa50 0800a940     ........P...@...
 800a9d0:	0800a8a0 0800ab10 0800a840 00000000     ........@.......

0800a9e0 <testbmk10.4556>:
 800a9e0:	0800b018 00000000 00000000 080031e1     .............1..

0800a9f0 <testbmk8.4554>:
 800a9f0:	0800afc8 00000000 00000000 08003261     ............a2..

0800aa00 <testdyn1.4528>:
 800aa00:	0800ae48 08006b51 00000000 08005531     H...Qk......1U..

0800aa10 <testmbox1.4510>:
 800aa10:	0800ad90 080033a1 00000000 08005f31     .....3......1_..

0800aa20 <testevt2.4472>:
 800aa20:	0800add4 08003f11 00000000 080080d1     .....?..........

0800aa30 <testbmk13.4559>:
 800aa30:	0800b080 00000000 00000000 08005431     ............1T..

0800aa40 <testbmk5.4551>:
 800aa40:	0800af60 00000000 00000000 08007d81     `............}..

0800aa50 <patternheap>:
 800aa50:	0800ab40 00000000 00000000 00000000     @...............

0800aa60 <testsem2.4489>:
 800aa60:	0800ac94 08003401 00000000 08002ae1     .....4.......*..

0800aa70 <testpools1.4522>:
 800aa70:	0800ae2c 080034a1 00000000 08004301     ,....4.......C..

0800aa80 <testmsg1.4504>:
 800aa80:	0800ad80 00000000 00000000 08002a41     ............A*..

0800aa90 <testdyn3.4534>:
 800aa90:	0800aea4 08006b81 00000000 08007ae1     .....k.......z..

0800aaa0 <testqueues1.4536>:
 800aaa0:	0800aecc 080041b1 00000000 08008da1     .....A..........

0800aab0 <patternmtx>:
 800aab0:	0800b0a0 0800a810 0800a990 0800a910     ................
 800aac0:	0800ab80 0800ab60 00000000 00000000     ....`...........

0800aad0 <testthd1.4475>:
 800aad0:	0800ac18 00000000 00000000 08005911     .............Y..

0800aae0 <testbmk9.4555>:
 800aae0:	0800aff4 00000000 00000000 08009071     ............q...

0800aaf0 <patternsem>:
 800aaf0:	0800a8f0 0800aa60 0800ab50 0800a8e0     ....`...P.......
	...

0800ab10 <patternqueues>:
 800ab10:	0800aaa0 0800a970 00000000 00000000     ....p...........

0800ab20 <testbmk11.4557>:
 800ab20:	0800b03c 08003441 00000000 08003171     <...A4......q1..

0800ab30 <testevt1.4471>:
 800ab30:	0800adb0 08003f01 00000000 08002ee1     .....?..........

0800ab40 <testheap1.4516>:
 800ab40:	0800ae04 080034c1 00000000 08005631     .....4......1V..

0800ab50 <testsem3.4490>:
 800ab50:	0800aca8 080033e1 00000000 08003711     .....3.......7..

0800ab60 <testmtx8.4502>:
 800ab60:	0800ad6c 080041e1 00000000 080037b1     l....A.......7..

0800ab70 <testthd4.4482>:
 800ab70:	0800ac6c 00000000 00000000 08002fc1     l............/..

0800ab80 <testmtx7.4501>:
 800ab80:	0800ad54 08004211 00000000 08003951     T....B......Q9..
 800ab90:	6c656873 0000006c 68430a0d 4f696269     shell.....ChibiO
 800aba0:	54522f53 65685320 0a0d6c6c 00000000     S/RT Shell......
 800abb0:	203e6863 00000000 0000445e 206f6f74     ch> ....^D..too 
 800abc0:	796e616d 67726120 6e656d75 0a0d7374     many arguments..
 800abd0:	00000000 74697865 00000000 706c6568     ....exit....help
 800abe0:	00000000 6d6d6f43 73646e61 6568203a     ....Commands: he
 800abf0:	6520706c 20746978 00000000 00207325     lp exit ....%s .
 800ac00:	00007325 0a0d3f20 00000000 6f6c0a0d     %s.. ?........lo
 800ac10:	74756f67 00000000 65726854 2c736461     gout....Threads,
 800ac20:	716e6520 69756575 7420676e 20747365      enqueuing test 
 800ac30:	00003123 65726854 2c736461 716e6520     #1..Threads, enq
 800ac40:	69756575 7420676e 20747365 00003223     ueuing test #2..
 800ac50:	65726854 2c736461 69727020 7469726f     Threads, priorit
 800ac60:	68632079 65676e61 00000000 65726854     y change....Thre
 800ac70:	2c736461 6c656420 00737961 616d6553     ads, delays.Sema
 800ac80:	726f6870 202c7365 75716e65 6e697565     phores, enqueuin
 800ac90:	00000067 616d6553 726f6870 202c7365     g...Semaphores, 
 800aca0:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 800acb0:	202c7365 6d6f7461 73206369 616e6769     es, atomic signa
 800acc0:	61772d6c 00007469 616e6942 53207972     l-wait..Binary S
 800acd0:	70616d65 65726f68 66202c73 74636e75     emaphores, funct
 800ace0:	616e6f69 7974696c 00000000 6574754d     ionality....Mute
 800acf0:	2c736578 69727020 7469726f 6e652079     xes, priority en
 800ad00:	75657571 20676e69 74736574 00000000     queuing test....
 800ad10:	6574754d 2c736578 69727020 7469726f     Mutexes, priorit
 800ad20:	65722079 6e727574 00000000 6574754d     y return....Mute
 800ad30:	2c736578 61747320 00737574 646e6f43     xes, status.Cond
 800ad40:	2c726156 67697320 206c616e 74736574     Var, signal test
 800ad50:	00000000 646e6f43 2c726156 6f726220     ....CondVar, bro
 800ad60:	61636461 74207473 00747365 646e6f43     adcast test.Cond
 800ad70:	2c726156 6f6f6220 74207473 00747365     Var, boost test.
 800ad80:	7373654d 73656761 6f6c202c 0000706f     Messages, loop..
 800ad90:	6c69614d 65786f62 71202c73 69756575     Mailboxes, queui
 800ada0:	6120676e 7420646e 6f656d69 00737475     ng and timeouts.
 800adb0:	6e657645 202c7374 69676572 61727473     Events, registra
 800adc0:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 800add0:	00000068 6e657645 202c7374 74696177     h...Events, wait
 800ade0:	646e6120 6f726220 61636461 00007473      and broadcast..
 800adf0:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 800ae00:	00000000 70616548 6c61202c 61636f6c     ....Heap, alloca
 800ae10:	6e6f6974 646e6120 61726620 6e656d67     tion and fragmen
 800ae20:	69746174 74206e6f 00747365 6f6d654d     tation test.Memo
 800ae30:	50207972 736c6f6f 7571202c 2f657565     ry Pools, queue/
 800ae40:	75716564 00657565 616e7944 2063696d     dequeue.Dynamic 
 800ae50:	73495041 6874202c 64616572 72632073     APIs, threads cr
 800ae60:	69746165 66206e6f 206d6f72 70616568     eation from heap
 800ae70:	00000000 616e7944 2063696d 73495041     ....Dynamic APIs
 800ae80:	6874202c 64616572 72632073 69746165     , threads creati
 800ae90:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 800aea0:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 800aeb0:	6572202c 74736967 61207972 7220646e     , registry and r
 800aec0:	72656665 65636e65 00000073 75657551     eferences...Queu
 800aed0:	202c7365 75706e69 75712074 73657565     es, input queues
 800aee0:	00000000 75657551 202c7365 7074756f     ....Queues, outp
 800aef0:	71207475 65756575 00000073 636e6542     ut queues...Benc
 800af00:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 800af10:	00003123 636e6542 72616d68 6d202c6b     #1..Benchmark, m
 800af20:	61737365 20736567 00003223 636e6542     essages #2..Benc
 800af30:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 800af40:	00003323 636e6542 72616d68 63202c6b     #3..Benchmark, c
 800af50:	65746e6f 73207478 63746977 00000068     ontext switch...
 800af60:	636e6542 72616d68 74202c6b 61657268     Benchmark, threa
 800af70:	202c7364 6c6c7566 63796320 0000656c     ds, full cycle..
 800af80:	636e6542 72616d68 74202c6b 61657268     Benchmark, threa
 800af90:	202c7364 61657263 6f206574 00796c6e     ds, create only.
 800afa0:	636e6542 72616d68 6d202c6b 20737361     Benchmark, mass 
 800afb0:	63736572 75646568 202c656c 68742035     reschedule, 5 th
 800afc0:	64616572 00000073 636e6542 72616d68     reads...Benchmar
 800afd0:	72202c6b 646e756f 626f7220 63206e69     k, round robin c
 800afe0:	65746e6f 73207478 63746977 676e6968     ontext switching
 800aff0:	00000000 636e6542 72616d68 49202c6b     ....Benchmark, I
 800b000:	51204f2f 65756575 68742073 67756f72     /O Queues throug
 800b010:	74757068 00000000 636e6542 72616d68     hput....Benchmar
 800b020:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 800b030:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 800b040:	72616d68 73202c6b 70616d65 65726f68     hmark, semaphore
 800b050:	61772073 732f7469 616e6769 0000006c     s wait/signal...
 800b060:	636e6542 72616d68 6d202c6b 78657475     Benchmark, mutex
 800b070:	6c207365 2f6b636f 6f6c6e75 00006b63     es lock/unlock..
 800b080:	636e6542 72616d68 52202c6b 66204d41     Benchmark, RAM f
 800b090:	70746f6f 746e6972 00000000 00000000     ootprint........

0800b0a0 <testmtx1.4493>:
 800b0a0:	0800acec 08004291 00000000 080059f1     .....B.......Y..

0800b0b0 <_ctype_>:
 800b0b0:	20202000 20202020 28282020 20282828     .         ((((( 
 800b0c0:	20202020 20202020 20202020 20202020                     
 800b0d0:	10108820 10101010 10101010 10101010      ...............
 800b0e0:	04040410 04040404 10040404 10101010     ................
 800b0f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800b100:	01010101 01010101 01010101 10101010     ................
 800b110:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800b120:	02020202 02020202 02020202 10101010     ................
 800b130:	00000020 00000000 00000000 00000000      ...............
	...
