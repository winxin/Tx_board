
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000140 <main.4458>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8000140:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8000144:	2400      	movs	r4, #0
 8000146:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800014a:	f04f 32ff 	mov.w	r2, #4294967295
 800014e:	6933      	ldr	r3, [r6, #16]
}

/*
 * Application entry point.
 */
int __attribute__((noreturn)) main(void) {
 8000150:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000154:	6132      	str	r2, [r6, #16]
 8000156:	6134      	str	r4, [r6, #16]
  rccResetAPB2(0xFFFFFFFF);
 8000158:	68f3      	ldr	r3, [r6, #12]
 800015a:	60f2      	str	r2, [r6, #12]
 800015c:	60f4      	str	r4, [r6, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800015e:	69f3      	ldr	r3, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000160:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8000164:	f043 5080 	orr.w	r0, r3, #268435456	; 0x10000000
 8000168:	61f0      	str	r0, [r6, #28]
  rccEnableBKPInterface(FALSE);
 800016a:	69f5      	ldr	r5, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800016c:	f2c4 0100 	movt	r1, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8000170:	f045 6700 	orr.w	r7, r5, #134217728	; 0x8000000
 8000174:	61f7      	str	r7, [r6, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000176:	f8d1 b000 	ldr.w	fp, [r1]
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
    dma_isr_redir[i].dma_func = NULL;
 800017a:	4bca      	ldr	r3, [pc, #808]	; (80004a4 <__fini_array_end+0x364>)
 800017c:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
 8000180:	f8c1 b000 	str.w	fp, [r1]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 8000184:	276c      	movs	r7, #108	; 0x6c
 8000186:	2580      	movs	r5, #128	; 0x80
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 8000188:	4620      	mov	r0, r4
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800018a:	49c7      	ldr	r1, [pc, #796]	; (80004a8 <__fini_array_end+0x368>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 800018c:	f04f 0a08 	mov.w	sl, #8
 8000190:	f04f 091c 	mov.w	r9, #28
 8000194:	f04f 0830 	mov.w	r8, #48	; 0x30
 8000198:	f04f 0c44 	mov.w	ip, #68	; 0x44
 800019c:	f04f 0e58 	mov.w	lr, #88	; 0x58
 80001a0:	f2c4 0a02 	movt	sl, #16386	; 0x4002
 80001a4:	f2c4 0902 	movt	r9, #16386	; 0x4002
 80001a8:	f2c4 0802 	movt	r8, #16386	; 0x4002
 80001ac:	f2c4 0c02 	movt	ip, #16386	; 0x4002
 80001b0:	f2c4 0e02 	movt	lr, #16386	; 0x4002
 80001b4:	f2c4 0702 	movt	r7, #16386	; 0x4002
 80001b8:	f2c4 0502 	movt	r5, #16386	; 0x4002
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 80001c0:	600c      	str	r4, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001c2:	f8ca 4000 	str.w	r4, [sl]
    dma_isr_redir[i].dma_func = NULL;
 80001c6:	601c      	str	r4, [r3, #0]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001c8:	f8c9 4000 	str.w	r4, [r9]
    dma_isr_redir[i].dma_func = NULL;
 80001cc:	609c      	str	r4, [r3, #8]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001ce:	f8c8 4000 	str.w	r4, [r8]
    dma_isr_redir[i].dma_func = NULL;
 80001d2:	611c      	str	r4, [r3, #16]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001d4:	f8cc 4000 	str.w	r4, [ip]
    dma_isr_redir[i].dma_func = NULL;
 80001d8:	619c      	str	r4, [r3, #24]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001da:	f8ce 4000 	str.w	r4, [lr]
    dma_isr_redir[i].dma_func = NULL;
 80001de:	621c      	str	r4, [r3, #32]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001e0:	603c      	str	r4, [r7, #0]
    dma_isr_redir[i].dma_func = NULL;
 80001e2:	629c      	str	r4, [r3, #40]	; 0x28
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0;
 80001e4:	602c      	str	r4, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
 80001e6:	631c      	str	r4, [r3, #48]	; 0x30
  }
  DMA1->IFCR = 0xFFFFFFFF;
 80001e8:	6042      	str	r2, [r0, #4]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001ea:	69b7      	ldr	r7, [r6, #24]
 80001ec:	b091      	sub	sp, #68	; 0x44
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001f2:	9704      	str	r7, [sp, #16]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80001f4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80001f8:	9102      	str	r1, [sp, #8]
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80001fa:	9904      	ldr	r1, [sp, #16]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80001fc:	f44f 6c00 	mov.w	ip, #2048	; 0x800
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000200:	f041 017d 	orr.w	r1, r1, #125	; 0x7d
 8000204:	9104      	str	r1, [sp, #16]
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8000206:	f64e 51ef 	movw	r1, #60911	; 0xedef
 800020a:	f6cf 71ff 	movt	r1, #65535	; 0xffff
 800020e:	9103      	str	r1, [sp, #12]
  GPIOB->CRH = config->PBData.crh;
 8000210:	f648 0138 	movw	r1, #34872	; 0x8838
 8000214:	f6c8 0182 	movt	r1, #34946	; 0x8882
 8000218:	9105      	str	r1, [sp, #20]
  GPIOB->CRL = config->PBData.crl;
 800021a:	f648 0188 	movw	r1, #34952	; 0x8888
 800021e:	f6c8 0122 	movt	r1, #34850	; 0x8822
 8000222:	9106      	str	r1, [sp, #24]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8000224:	f648 0144 	movw	r1, #34884	; 0x8844
 8000228:	f6c8 0188 	movt	r1, #34952	; 0x8888
 800022c:	9107      	str	r1, [sp, #28]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 800022e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000232:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000236:	9108      	str	r1, [sp, #32]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8000238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000240:	9109      	str	r1, [sp, #36]	; 0x24
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000242:	9904      	ldr	r1, [sp, #16]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8000244:	f2c4 0c01 	movt	ip, #16385	; 0x4001
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8000248:	61b1      	str	r1, [r6, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 800024a:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 800024e:	f8cc 100c 	str.w	r1, [ip, #12]
  GPIOA->CRH = config->PAData.crh;
 8000252:	f248 4ab8 	movw	sl, #33976	; 0x84b8
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8000256:	9903      	ldr	r1, [sp, #12]
  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
 8000258:	f644 3988 	movw	r9, #19336	; 0x4b88
  GPIOB->ODR = config->PBData.odr;
 800025c:	f44f 6840 	mov.w	r8, #3072	; 0xc00
 8000260:	f2c4 0801 	movt	r8, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8000264:	f6c2 0a88 	movt	sl, #10376	; 0x2888
  GPIOA->CRL = config->PAData.crl;
 8000268:	f6cb 09b3 	movt	r9, #47283	; 0xb8b3

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 800026c:	f8cc a004 	str.w	sl, [ip, #4]
  GPIOA->CRL = config->PAData.crl;
 8000270:	f8cc 9000 	str.w	r9, [ip]
  GPIOB->ODR = config->PBData.odr;
 8000274:	f8c8 100c 	str.w	r1, [r8, #12]
  GPIOB->CRH = config->PBData.crh;
 8000278:	9905      	ldr	r1, [sp, #20]
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 800027a:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800027e:	f8c8 1004 	str.w	r1, [r8, #4]
  GPIOB->CRL = config->PBData.crl;
 8000282:	9906      	ldr	r1, [sp, #24]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8000284:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8000288:	f8c8 1000 	str.w	r1, [r8]
  GPIOC->ODR = config->PCData.odr;
 800028c:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8000290:	f2c4 0001 	movt	r0, #16385	; 0x4001
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 8000294:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8000298:	f8ce 200c 	str.w	r2, [lr, #12]
  GPIOC->CRH = config->PCData.crh;
 800029c:	f8ce 1004 	str.w	r1, [lr, #4]
  GPIOC->CRL = config->PCData.crl;
 80002a0:	f8ce 1000 	str.w	r1, [lr]
  GPIOD->ODR = config->PDData.odr;
 80002a4:	60c2      	str	r2, [r0, #12]
  GPIOD->CRH = config->PDData.crh;
 80002a6:	6041      	str	r1, [r0, #4]
  GPIOD->CRL = config->PDData.crl;
 80002a8:	9907      	ldr	r1, [sp, #28]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80002aa:	2701      	movs	r7, #1
 80002ac:	6001      	str	r1, [r0, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80002ae:	9802      	ldr	r0, [sp, #8]
  GPIOE->CRH = config->PEData.crh;
 80002b0:	f04f 3188 	mov.w	r1, #2290649224	; 0x88888888
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 80002b4:	60c2      	str	r2, [r0, #12]
  GPIOE->CRH = config->PEData.crh;
 80002b6:	6041      	str	r1, [r0, #4]
  GPIOE->CRL = config->PEData.crl;
 80002b8:	6001      	str	r1, [r0, #0]
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 80002ba:	9808      	ldr	r0, [sp, #32]
 80002bc:	f241 71d8 	movw	r1, #6104	; 0x17d8
 80002c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002c4:	60c8      	str	r0, [r1, #12]
 80002c6:	700f      	strb	r7, [r1, #0]
  gptp->config = NULL;
 80002c8:	604c      	str	r4, [r1, #4]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 80002ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80002cc:	f241 71e8 	movw	r1, #6120	; 0x17e8
 80002d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80002d4:	60c8      	str	r0, [r1, #12]
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 80002d6:	4875      	ldr	r0, [pc, #468]	; (80004ac <__fini_array_end+0x36c>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80002d8:	4b75      	ldr	r3, [pc, #468]	; (80004b0 <__fini_array_end+0x370>)
 80002da:	8002      	strh	r2, [r0, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80002dc:	4875      	ldr	r0, [pc, #468]	; (80004b4 <__fini_array_end+0x374>)
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 80002de:	700f      	strb	r7, [r1, #0]
  gptp->config = NULL;
 80002e0:	604c      	str	r4, [r1, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80002e2:	f103 010c 	add.w	r1, r3, #12
 80002e6:	6119      	str	r1, [r3, #16]
 80002e8:	60d9      	str	r1, [r3, #12]
 80002ea:	6218      	str	r0, [r3, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80002ec:	f100 010c 	add.w	r1, r0, #12
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80002f0:	f241 000a 	movw	r0, #4106	; 0x100a
 80002f4:	6298      	str	r0, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80002f6:	300e      	adds	r0, #14
 80002f8:	62d8      	str	r0, [r3, #44]	; 0x2c

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80002fa:	69f0      	ldr	r0, [r6, #28]

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80002fc:	f44f 5b40 	mov.w	fp, #12288	; 0x3000
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8000300:	4d6d      	ldr	r5, [pc, #436]	; (80004b8 <__fini_array_end+0x378>)
 8000302:	f2c4 0b01 	movt	fp, #16385	; 0x4001
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8000306:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800030a:	ea40 0c07 	orr.w	ip, r0, r7
 800030e:	701f      	strb	r7, [r3, #0]
  spip->config = NULL;
 8000310:	605c      	str	r4, [r3, #4]
#if SPI_USE_WAIT
  spip->thread = NULL;
 8000312:	609c      	str	r4, [r3, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000314:	615c      	str	r4, [r3, #20]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8000316:	f8c3 b01c 	str.w	fp, [r3, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800031a:	6259      	str	r1, [r3, #36]	; 0x24

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800031c:	f645 59bf 	movw	r9, #23999	; 0x5dbf
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000324:	f44f 4a61 	mov.w	sl, #57600	; 0xe100
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000328:	f44f 416d 	mov.w	r1, #60672	; 0xed00
 800032c:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000330:	f2ce 0a00 	movt	sl, #57344	; 0xe000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000334:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000338:	702f      	strb	r7, [r5, #0]
  usbp->config       = NULL;
 800033a:	606c      	str	r4, [r5, #4]
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800033c:	62ec      	str	r4, [r5, #44]	; 0x2c
    usbp->out_params[i] = NULL;
 800033e:	64ac      	str	r4, [r5, #72]	; 0x48
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000340:	632c      	str	r4, [r5, #48]	; 0x30
    usbp->out_params[i] = NULL;
 8000342:	64ec      	str	r4, [r5, #76]	; 0x4c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000344:	636c      	str	r4, [r5, #52]	; 0x34
    usbp->out_params[i] = NULL;
 8000346:	652c      	str	r4, [r5, #80]	; 0x50
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000348:	63ac      	str	r4, [r5, #56]	; 0x38
    usbp->out_params[i] = NULL;
 800034a:	656c      	str	r4, [r5, #84]	; 0x54
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800034c:	63ec      	str	r4, [r5, #60]	; 0x3c
    usbp->out_params[i] = NULL;
 800034e:	65ac      	str	r4, [r5, #88]	; 0x58
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000350:	642c      	str	r4, [r5, #64]	; 0x40
    usbp->out_params[i] = NULL;
 8000352:	65ec      	str	r4, [r5, #92]	; 0x5c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8000354:	646c      	str	r4, [r5, #68]	; 0x44
    usbp->out_params[i] = NULL;
 8000356:	662c      	str	r4, [r5, #96]	; 0x60
  }
  usbp->transmitting = 0;
 8000358:	812c      	strh	r4, [r5, #8]
  usbp->receiving    = 0;
 800035a:	816c      	strh	r4, [r5, #10]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800035c:	f8c6 c01c 	str.w	ip, [r6, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000360:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000364:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8000368:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800036a:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800036c:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800036e:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000370:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000372:	601f      	str	r7, [r3, #0]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	f88a 331c 	strb.w	r3, [sl, #796]	; 0x31c
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800037a:	f8ca 0180 	str.w	r0, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800037e:	f8ca 0000 	str.w	r0, [sl]
 8000382:	608c      	str	r4, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000384:	f8d1 b00c 	ldr.w	fp, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000388:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                 |
 800038c:	f44f 7340 	mov.w	r3, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000390:	ea0b 0000 	and.w	r0, fp, r0
  reg_value  =  (reg_value                                 |
 8000394:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
 8000398:	4303      	orrs	r3, r0

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800039a:	f64e 50f0 	movw	r0, #60912	; 0xedf0
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800039e:	60cb      	str	r3, [r1, #12]
 80003a0:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80003a4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80003a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80003ac:	f04c 7980 	orr.w	r9, ip, #16777216	; 0x1000000
 80003b0:	f8c0 900c 	str.w	r9, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80003b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003b8:	6818      	ldr	r0, [r3, #0]
 80003ba:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80004c0 <__fini_array_end+0x380>
 80003be:	4338      	orrs	r0, r7
 80003c0:	6018      	str	r0, [r3, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003c2:	f04f 0b20 	mov.w	fp, #32
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = ch.vtlist.vt_prev = (void *)&ch.vtlist;
 80003c6:	f109 031c 	add.w	r3, r9, #28
 80003ca:	2010      	movs	r0, #16
 80003cc:	77c8      	strb	r0, [r1, #31]
 80003ce:	f881 b022 	strb.w	fp, [r1, #34]	; 0x22
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80003d2:	a80a      	add	r0, sp, #40	; 0x28
 80003d4:	f8c9 3020 	str.w	r3, [r9, #32]
 80003d8:	f8c9 301c 	str.w	r3, [r9, #28]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80003dc:	920a      	str	r2, [sp, #40]	; 0x28
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80003de:	2300      	movs	r3, #0
 80003e0:	2200      	movs	r2, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 80003e2:	f8a9 e024 	strh.w	lr, [r9, #36]	; 0x24
 80003e6:	f8c9 9004 	str.w	r9, [r9, #4]
 80003ea:	f8c9 9000 	str.w	r9, [r9]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 80003ee:	f8c9 4008 	str.w	r4, [r9, #8]
#if CH_CFG_USE_REGISTRY
  ch.rlist.r_newer = ch.rlist.r_older = (thread_t *)&ch.rlist;
 80003f2:	f8c9 9014 	str.w	r9, [r9, #20]
 80003f6:	f8c9 9010 	str.w	r9, [r9, #16]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = 0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = 0;
 80003fa:	f8a9 4026 	strh.w	r4, [r9, #38]	; 0x26
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
 80003fe:	f8c9 4070 	str.w	r4, [r9, #112]	; 0x70
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000402:	940b      	str	r4, [sp, #44]	; 0x2c
  tmp->last       = (rtcnt_t)0;
 8000404:	940c      	str	r4, [sp, #48]	; 0x30
  tmp->n          = (ucnt_t)0;
 8000406:	940d      	str	r4, [sp, #52]	; 0x34
  tmp->cumulative = (rttime_t)0;
 8000408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = 0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800040c:	f002 fbd8 	bl	8002bc0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000410:	a80a      	add	r0, sp, #40	; 0x28
 8000412:	f002 fbad 	bl	8002b70 <chTMStopMeasurementX>
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
  default_heap.h_provider = chCoreAlloc;
 8000416:	4b29      	ldr	r3, [pc, #164]	; (80004bc <__fini_array_end+0x37c>)
void _core_init(void) {
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000418:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80004c4 <__fini_array_end+0x384>
 800041c:	f103 0e10 	add.w	lr, r3, #16
 8000420:	f8c3 e010 	str.w	lr, [r3, #16]
 8000424:	f8c3 e014 	str.w	lr, [r3, #20]
 8000428:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80004c8 <__fini_array_end+0x388>
 800042c:	f02c 0c07 	bic.w	ip, ip, #7
 8000430:	f8ce c000 	str.w	ip, [lr]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000434:	f8df c094 	ldr.w	ip, [pc, #148]	; 80004cc <__fini_array_end+0x38c>
 8000438:	f8df e094 	ldr.w	lr, [pc, #148]	; 80004d0 <__fini_array_end+0x390>
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 800043c:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8000440:	f02c 0c07 	bic.w	ip, ip, #7
 8000444:	f8ce c000 	str.w	ip, [lr]
 8000448:	f8df c088 	ldr.w	ip, [pc, #136]	; 80004d4 <__fini_array_end+0x394>
 800044c:	9203      	str	r2, [sp, #12]
  ch.tm.offset = tm.last;
 800044e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000450:	619c      	str	r4, [r3, #24]
 8000452:	f8c3 c000 	str.w	ip, [r3]
  default_heap.h_free.h.u.next = (union heap_header *)NULL;
 8000456:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000458:	60dc      	str	r4, [r3, #12]
 800045a:	9b03      	ldr	r3, [sp, #12]
 800045c:	f109 022c 	add.w	r2, r9, #44	; 0x2c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000460:	2040      	movs	r0, #64	; 0x40
 8000462:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000466:	f8c9 2014 	str.w	r2, [r9, #20]
 800046a:	f109 0154 	add.w	r1, r9, #84	; 0x54
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800046e:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8000472:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000476:	f8c9 903c 	str.w	r9, [r9, #60]	; 0x3c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800047a:	f109 0050 	add.w	r0, r9, #80	; 0x50
 800047e:	611a      	str	r2, [r3, #16]
  _dbg_trace_init();
#endif

#if !CH_CFG_NO_IDLE_THREAD
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000480:	f8c9 2018 	str.w	r2, [r9, #24]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000484:	2200      	movs	r2, #0
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000486:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800048a:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 800048e:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
 8000492:	f8c9 1054 	str.w	r1, [r9, #84]	; 0x54
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000496:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 800049a:	f8c9 4064 	str.w	r4, [r9, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 800049e:	f8c9 4060 	str.w	r4, [r9, #96]	; 0x60
 80004a2:	e019      	b.n	80004d8 <__fini_array_end+0x398>
 80004a4:	20000dd0 	.word	0x20000dd0
 80004a8:	2000143c 	.word	0x2000143c
 80004ac:	20001438 	.word	0x20001438
 80004b0:	200017a8 	.word	0x200017a8
 80004b4:	0800a39c 	.word	0x0800a39c
 80004b8:	20000d34 	.word	0x20000d34
 80004bc:	20000e08 	.word	0x20000e08
 80004c0:	20001eb8 	.word	0x20001eb8
 80004c4:	20002023 	.word	0x20002023
 80004c8:	20000dc8 	.word	0x20000dc8
 80004cc:	20005000 	.word	0x20005000
 80004d0:	20000d30 	.word	0x20000d30
 80004d4:	08001641 	.word	0x08001641
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 80004d8:	f889 704a 	strb.w	r7, [r9, #74]	; 0x4a
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 80004dc:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80004e0:	f889 7048 	strb.w	r7, [r9, #72]	; 0x48

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004e4:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004e8:	b662      	cpsie	i
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80004ea:	496e      	ldr	r1, [pc, #440]	; (80006a4 <__fini_array_end+0x564>)
 80004ec:	f8d9 3018 	ldr.w	r3, [r9, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80004f0:	463a      	mov	r2, r7
#endif
  chSysEnable();

  /* Note, &ch_debug points to the string "main" if the registry is
     active, else the parameter is ignored.*/
  chRegSetThreadName((const char *)&ch_debug);
 80004f2:	6199      	str	r1, [r3, #24]

#if !CH_CFG_NO_IDLE_THREAD
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
  chThdCreateStatic(ch.idle_thread_wa, sizeof(ch.idle_thread_wa), IDLEPRIO,
 80004f4:	f109 0078 	add.w	r0, r9, #120	; 0x78
 80004f8:	21d8      	movs	r1, #216	; 0xd8
 80004fa:	9400      	str	r4, [sp, #0]
 80004fc:	4b6a      	ldr	r3, [pc, #424]	; (80006a8 <__fini_array_end+0x568>)
 80004fe:	f001 fc8f 	bl	8001e20 <chThdCreateStatic>
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  chSysInit();
  AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;/* Disable the JTAG but keep SWD in operation */
 8000502:	4620      	mov	r0, r4
 8000504:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000508:	6842      	ldr	r2, [r0, #4]
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
 800050a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80006e4 <__fini_array_end+0x5a4>
 800050e:	f042 7300 	orr.w	r3, r2, #33554432	; 0x2000000
 8000512:	6043      	str	r3, [r0, #4]
 8000514:	4865      	ldr	r0, [pc, #404]	; (80006ac <__fini_array_end+0x56c>)
 8000516:	4649      	mov	r1, r9
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8000518:	f509 73aa 	add.w	r3, r9, #340	; 0x154
 800051c:	f841 0b04 	str.w	r0, [r1], #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000520:	f109 0254 	add.w	r2, r9, #84	; 0x54
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8000524:	f8c9 1004 	str.w	r1, [r9, #4]
  iqp->q_top = bp + size;
 8000528:	f8c9 301c 	str.w	r3, [r9, #28]
  iqp->q_notify = infy;
 800052c:	4960      	ldr	r1, [pc, #384]	; (80006b0 <__fini_array_end+0x570>)
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 800052e:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
 8000532:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
 8000536:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 800053a:	4b5e      	ldr	r3, [pc, #376]	; (80006b4 <__fini_array_end+0x574>)
 800053c:	f109 0e0c 	add.w	lr, r9, #12
 8000540:	f109 0030 	add.w	r0, r9, #48	; 0x30
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000544:	f509 7c15 	add.w	ip, r9, #596	; 0x254
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8000548:	f8c9 2020 	str.w	r2, [r9, #32]
 800054c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 8000550:	f8c9 2018 	str.w	r2, [r9, #24]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8000554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000558:	f8c9 e010 	str.w	lr, [r9, #16]
 800055c:	f8c9 e00c 	str.w	lr, [r9, #12]

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8000560:	f8c9 1028 	str.w	r1, [r9, #40]	; 0x28
 8000564:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
 8000568:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800056c:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 8000570:	f8c9 c040 	str.w	ip, [r9, #64]	; 0x40
  oqp->q_notify = onfy;
 8000574:	f8c9 304c 	str.w	r3, [r9, #76]	; 0x4c
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 8000578:	f889 7008 	strb.w	r7, [r9, #8]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800057c:	f8c9 4014 	str.w	r4, [r9, #20]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
  iqp->q_link = link;
 8000580:	f8c9 902c 	str.w	r9, [r9, #44]	; 0x2c
  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
  oqp->q_link = link;
 8000584:	f8c9 9050 	str.w	r9, [r9, #80]	; 0x50

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000588:	f38b 8811 	msr	BASEPRI, fp
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 800058c:	4f4a      	ldr	r7, [pc, #296]	; (80006b8 <__fini_array_end+0x578>)
  sdup->state = SDU_READY;
 800058e:	2002      	movs	r0, #2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
 8000590:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1] = sdup;
  usbp->in_params[config->int_in - 1]    = sdup;
  sdup->config = config;
 8000594:	f8c9 7254 	str.w	r7, [r9, #596]	; 0x254

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1]   = sdup;
  usbp->out_params[config->bulk_out - 1] = sdup;
 8000598:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
  usbp->in_params[config->int_in - 1]    = sdup;
 800059c:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
  sdup->config = config;
  sdup->state = SDU_READY;
 80005a0:	f889 0008 	strb.w	r0, [r9, #8]
 80005a4:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	f8c8 1010 	str.w	r1, [r8, #16]
  chThdSleepMilliseconds(1500);
 80005b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005b4:	f007 f9cc 	bl	8007950 <chThdSleep>
 80005b8:	f38b 8811 	msr	BASEPRI, fp
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {

  if (usbp->state == USB_STOP) {
 80005bc:	782f      	ldrb	r7, [r5, #0]
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 80005be:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <__fini_array_end+0x57c>)
 80005c0:	2f01      	cmp	r7, #1
 80005c2:	606a      	str	r2, [r5, #4]
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80005c4:	60ec      	str	r4, [r5, #12]
 80005c6:	612c      	str	r4, [r5, #16]
 80005c8:	616c      	str	r4, [r5, #20]
 80005ca:	61ac      	str	r4, [r5, #24]
 80005cc:	61ec      	str	r4, [r5, #28]
 80005ce:	622c      	str	r4, [r5, #32]
 80005d0:	626c      	str	r4, [r5, #36]	; 0x24
 80005d2:	62ac      	str	r4, [r5, #40]	; 0x28
 80005d4:	d046      	beq.n	8000664 <__fini_array_end+0x524>
  usb_lld_start(usbp);
  usbp->state = USB_READY;
 80005d6:	2402      	movs	r4, #2
 80005d8:	702c      	strb	r4, [r5, #0]
 80005da:	2400      	movs	r4, #0
 80005dc:	f384 8811 	msr	BASEPRI, r4
 80005e0:	4d37      	ldr	r5, [pc, #220]	; (80006c0 <__fini_array_end+0x580>)
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 80005e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80005ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ee:	6159      	str	r1, [r3, #20]
 80005f0:	4e34      	ldr	r6, [pc, #208]	; (80006c4 <__fini_array_end+0x584>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80005f2:	9400      	str	r4, [sp, #0]
 80005f4:	602d      	str	r5, [r5, #0]
 80005f6:	4d34      	ldr	r5, [pc, #208]	; (80006c8 <__fini_array_end+0x588>)
 80005f8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80005fc:	2240      	movs	r2, #64	; 0x40
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <__fini_array_end+0x58c>)
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8000600:	2701      	movs	r7, #1
 8000602:	4833      	ldr	r0, [pc, #204]	; (80006d0 <__fini_array_end+0x590>)
 8000604:	f001 fc0c 	bl	8001e20 <chThdCreateStatic>
	chBSemObjectInit(&Silabs_busy,FALSE);/*Init it as not taken*/
	chBSemObjectInit(&Silabs_callback,FALSE);/*Init it as not taken*/
	/*
	* Creates the thread. Thread has priority slightly above normal and takes no argument
	*/
	return chThdCreateStatic(waThreadSI, sizeof(waThreadSI), NORMALPRIO+1, SI_Thread, (void*)NULL);
 8000608:	9400      	str	r4, [sp, #0]
 800060a:	4832      	ldr	r0, [pc, #200]	; (80006d4 <__fini_array_end+0x594>)
 800060c:	6076      	str	r6, [r6, #4]
 800060e:	6036      	str	r6, [r6, #0]
 8000610:	60b7      	str	r7, [r6, #8]
 8000612:	f44f 6199 	mov.w	r1, #1224	; 0x4c8
 8000616:	2241      	movs	r2, #65	; 0x41
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <__fini_array_end+0x598>)
 800061a:	606d      	str	r5, [r5, #4]
 800061c:	602d      	str	r5, [r5, #0]
 800061e:	60af      	str	r7, [r5, #8]
 8000620:	f001 fbfe 	bl	8001e20 <chThdCreateStatic>
 8000624:	4e2d      	ldr	r6, [pc, #180]	; (80006dc <__fini_array_end+0x59c>)
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000626:	b144      	cbz	r4, 800063a <__fini_array_end+0x4fa>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 8000628:	7f21      	ldrb	r1, [r4, #28]
 800062a:	290f      	cmp	r1, #15
 800062c:	d015      	beq.n	800065a <__fini_array_end+0x51a>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 800062e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000632:	f007 f98d 	bl	8007950 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (TRUE) {
    if (!shelltp && (SDU1.config->usbp->state == USB_ACTIVE))
 8000636:	2c00      	cmp	r4, #0
 8000638:	d1f6      	bne.n	8000628 <__fini_array_end+0x4e8>
 800063a:	f8d9 2254 	ldr.w	r2, [r9, #596]	; 0x254
 800063e:	6810      	ldr	r0, [r2, #0]
 8000640:	7803      	ldrb	r3, [r0, #0]
 8000642:	2b04      	cmp	r3, #4
 8000644:	d1f0      	bne.n	8000628 <__fini_array_end+0x4e8>
 * @api
 */
#if CH_CFG_USE_HEAP && CH_CFG_USE_DYNAMIC
thread_t *shellCreate(const ShellConfig *scp, size_t size, tprio_t prio) {

  return chThdCreateFromHeap(NULL, size, prio, shell_thread, (void *)scp);
 8000646:	4620      	mov	r0, r4
 8000648:	9600      	str	r6, [sp, #0]
 800064a:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800064e:	2240      	movs	r2, #64	; 0x40
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <__fini_array_end+0x5a0>)
 8000652:	f002 fa05 	bl	8002a60 <chThdCreateFromHeap>
 8000656:	4604      	mov	r4, r0
 8000658:	e7e9      	b.n	800062e <__fini_array_end+0x4ee>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
 800065a:	4620      	mov	r0, r4
 800065c:	f001 fea0 	bl	80023a0 <chThdRelease>
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 8000660:	2400      	movs	r4, #0
 8000662:	e7e4      	b.n	800062e <__fini_array_end+0x4ee>
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 8000664:	69f0      	ldr	r0, [r6, #28]
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8000666:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800066a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  if (usbp->state == USB_STOP) {
    /* Clock activation.*/
#if STM32_USB_USE_USB1
    if (&USBD1 == usbp) {
      /* USB clock enabled.*/
      rccEnableUSB(FALSE);
 800066e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000672:	61f0      	str	r0, [r6, #28]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000674:	f44f 2100 	mov.w	r1, #524288	; 0x80000
      /* Powers up the transceiver while holding the USB in reset state.*/
      STM32_USB->CNTR = CNTR_FRES;
 8000678:	641f      	str	r7, [r3, #64]	; 0x40
 800067a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800067e:	26d0      	movs	r6, #208	; 0xd0
 8000680:	27e0      	movs	r7, #224	; 0xe0
 8000682:	f88a 6313 	strb.w	r6, [sl, #787]	; 0x313
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 8000686:	4628      	mov	r0, r5
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000688:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800068c:	f8ca 1000 	str.w	r1, [sl]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8000690:	f88a 7314 	strb.w	r7, [sl, #788]	; 0x314
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8000694:	f8ca 2180 	str.w	r2, [sl, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8000698:	f8ca 2000 	str.w	r2, [sl]
#if STM32_USB1_HP_NUMBER != STM32_USB1_LP_NUMBER
      nvicEnableVector(STM32_USB1_HP_NUMBER, STM32_USB_USB1_HP_IRQ_PRIORITY);
#endif
      nvicEnableVector(STM32_USB1_LP_NUMBER, STM32_USB_USB1_LP_IRQ_PRIORITY);
      /* Releases the USB reset.*/
      STM32_USB->CNTR = 0;
 800069c:	641c      	str	r4, [r3, #64]	; 0x40
    }
#endif
    /* Reset procedure enforced on driver start.*/
    _usb_reset(usbp);
 800069e:	f007 f817 	bl	80076d0 <_usb_reset>
 80006a2:	e798      	b.n	80005d6 <__fini_array_end+0x496>
 80006a4:	0800a1f0 	.word	0x0800a1f0
 80006a8:	080016e1 	.word	0x080016e1
 80006ac:	0800a370 	.word	0x0800a370
 80006b0:	08007651 	.word	0x08007651
 80006b4:	08006a71 	.word	0x08006a71
 80006b8:	0800a430 	.word	0x0800a430
 80006bc:	0800a440 	.word	0x0800a440
 80006c0:	20001eb0 	.word	0x20001eb0
 80006c4:	20001804 	.word	0x20001804
 80006c8:	20001834 	.word	0x20001834
 80006cc:	08008111 	.word	0x08008111
 80006d0:	20000e28 	.word	0x20000e28
 80006d4:	20000f70 	.word	0x20000f70
 80006d8:	08009581 	.word	0x08009581
 80006dc:	0800ab80 	.word	0x0800ab80
 80006e0:	08009831 	.word	0x08009831
 80006e4:	2000153c 	.word	0x2000153c
 80006e8:	f3af 8000 	nop.w
 80006ec:	f3af 8000 	nop.w

080006f0 <_port_switch>:
 80006f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80006f8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 80006fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000700 <_port_thread_start>:
 8000700:	2300      	movs	r3, #0
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	4628      	mov	r0, r5
 8000708:	47a0      	blx	r4
 800070a:	f009 fb31 	bl	8009d70 <chThdExit>

0800070e <_port_switch_from_isr>:
 800070e:	f009 fb37 	bl	8009d80 <chSchDoReschedule>

08000712 <_port_exit_from_isr>:
 8000712:	df00      	svc	0
 8000714:	e7fe      	b.n	8000714 <_port_exit_from_isr+0x2>
	...

08000720 <__aeabi_drsub>:
 8000720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e002      	b.n	800072c <__adddf3>
 8000726:	bf00      	nop

08000728 <__aeabi_dsub>:
 8000728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800072c <__adddf3>:
 800072c:	b530      	push	{r4, r5, lr}
 800072e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000732:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000736:	ea94 0f05 	teq	r4, r5
 800073a:	bf08      	it	eq
 800073c:	ea90 0f02 	teqeq	r0, r2
 8000740:	bf1f      	itttt	ne
 8000742:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000746:	ea55 0c02 	orrsne.w	ip, r5, r2
 800074a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800074e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000752:	f000 80e2 	beq.w	800091a <__adddf3+0x1ee>
 8000756:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800075a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800075e:	bfb8      	it	lt
 8000760:	426d      	neglt	r5, r5
 8000762:	dd0c      	ble.n	800077e <__adddf3+0x52>
 8000764:	442c      	add	r4, r5
 8000766:	ea80 0202 	eor.w	r2, r0, r2
 800076a:	ea81 0303 	eor.w	r3, r1, r3
 800076e:	ea82 0000 	eor.w	r0, r2, r0
 8000772:	ea83 0101 	eor.w	r1, r3, r1
 8000776:	ea80 0202 	eor.w	r2, r0, r2
 800077a:	ea81 0303 	eor.w	r3, r1, r3
 800077e:	2d36      	cmp	r5, #54	; 0x36
 8000780:	bf88      	it	hi
 8000782:	bd30      	pophi	{r4, r5, pc}
 8000784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000794:	d002      	beq.n	800079c <__adddf3+0x70>
 8000796:	4240      	negs	r0, r0
 8000798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80007a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80007a8:	d002      	beq.n	80007b0 <__adddf3+0x84>
 80007aa:	4252      	negs	r2, r2
 80007ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b0:	ea94 0f05 	teq	r4, r5
 80007b4:	f000 80a7 	beq.w	8000906 <__adddf3+0x1da>
 80007b8:	f1a4 0401 	sub.w	r4, r4, #1
 80007bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80007c0:	db0d      	blt.n	80007de <__adddf3+0xb2>
 80007c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80007c6:	fa22 f205 	lsr.w	r2, r2, r5
 80007ca:	1880      	adds	r0, r0, r2
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80007d4:	1880      	adds	r0, r0, r2
 80007d6:	fa43 f305 	asr.w	r3, r3, r5
 80007da:	4159      	adcs	r1, r3
 80007dc:	e00e      	b.n	80007fc <__adddf3+0xd0>
 80007de:	f1a5 0520 	sub.w	r5, r5, #32
 80007e2:	f10e 0e20 	add.w	lr, lr, #32
 80007e6:	2a01      	cmp	r2, #1
 80007e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80007ec:	bf28      	it	cs
 80007ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80007f2:	fa43 f305 	asr.w	r3, r3, r5
 80007f6:	18c0      	adds	r0, r0, r3
 80007f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000800:	d507      	bpl.n	8000812 <__adddf3+0xe6>
 8000802:	f04f 0e00 	mov.w	lr, #0
 8000806:	f1dc 0c00 	rsbs	ip, ip, #0
 800080a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800080e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000816:	d31b      	bcc.n	8000850 <__adddf3+0x124>
 8000818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800081c:	d30c      	bcc.n	8000838 <__adddf3+0x10c>
 800081e:	0849      	lsrs	r1, r1, #1
 8000820:	ea5f 0030 	movs.w	r0, r0, rrx
 8000824:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000828:	f104 0401 	add.w	r4, r4, #1
 800082c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000834:	f080 809a 	bcs.w	800096c <__adddf3+0x240>
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800083c:	bf08      	it	eq
 800083e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000842:	f150 0000 	adcs.w	r0, r0, #0
 8000846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800084a:	ea41 0105 	orr.w	r1, r1, r5
 800084e:	bd30      	pop	{r4, r5, pc}
 8000850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000854:	4140      	adcs	r0, r0
 8000856:	eb41 0101 	adc.w	r1, r1, r1
 800085a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085e:	f1a4 0401 	sub.w	r4, r4, #1
 8000862:	d1e9      	bne.n	8000838 <__adddf3+0x10c>
 8000864:	f091 0f00 	teq	r1, #0
 8000868:	bf04      	itt	eq
 800086a:	4601      	moveq	r1, r0
 800086c:	2000      	moveq	r0, #0
 800086e:	fab1 f381 	clz	r3, r1
 8000872:	bf08      	it	eq
 8000874:	3320      	addeq	r3, #32
 8000876:	f1a3 030b 	sub.w	r3, r3, #11
 800087a:	f1b3 0220 	subs.w	r2, r3, #32
 800087e:	da0c      	bge.n	800089a <__adddf3+0x16e>
 8000880:	320c      	adds	r2, #12
 8000882:	dd08      	ble.n	8000896 <__adddf3+0x16a>
 8000884:	f102 0c14 	add.w	ip, r2, #20
 8000888:	f1c2 020c 	rsb	r2, r2, #12
 800088c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000890:	fa21 f102 	lsr.w	r1, r1, r2
 8000894:	e00c      	b.n	80008b0 <__adddf3+0x184>
 8000896:	f102 0214 	add.w	r2, r2, #20
 800089a:	bfd8      	it	le
 800089c:	f1c2 0c20 	rsble	ip, r2, #32
 80008a0:	fa01 f102 	lsl.w	r1, r1, r2
 80008a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80008a8:	bfdc      	itt	le
 80008aa:	ea41 010c 	orrle.w	r1, r1, ip
 80008ae:	4090      	lslle	r0, r2
 80008b0:	1ae4      	subs	r4, r4, r3
 80008b2:	bfa2      	ittt	ge
 80008b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80008b8:	4329      	orrge	r1, r5
 80008ba:	bd30      	popge	{r4, r5, pc}
 80008bc:	ea6f 0404 	mvn.w	r4, r4
 80008c0:	3c1f      	subs	r4, #31
 80008c2:	da1c      	bge.n	80008fe <__adddf3+0x1d2>
 80008c4:	340c      	adds	r4, #12
 80008c6:	dc0e      	bgt.n	80008e6 <__adddf3+0x1ba>
 80008c8:	f104 0414 	add.w	r4, r4, #20
 80008cc:	f1c4 0220 	rsb	r2, r4, #32
 80008d0:	fa20 f004 	lsr.w	r0, r0, r4
 80008d4:	fa01 f302 	lsl.w	r3, r1, r2
 80008d8:	ea40 0003 	orr.w	r0, r0, r3
 80008dc:	fa21 f304 	lsr.w	r3, r1, r4
 80008e0:	ea45 0103 	orr.w	r1, r5, r3
 80008e4:	bd30      	pop	{r4, r5, pc}
 80008e6:	f1c4 040c 	rsb	r4, r4, #12
 80008ea:	f1c4 0220 	rsb	r2, r4, #32
 80008ee:	fa20 f002 	lsr.w	r0, r0, r2
 80008f2:	fa01 f304 	lsl.w	r3, r1, r4
 80008f6:	ea40 0003 	orr.w	r0, r0, r3
 80008fa:	4629      	mov	r1, r5
 80008fc:	bd30      	pop	{r4, r5, pc}
 80008fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000902:	4629      	mov	r1, r5
 8000904:	bd30      	pop	{r4, r5, pc}
 8000906:	f094 0f00 	teq	r4, #0
 800090a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800090e:	bf06      	itte	eq
 8000910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000914:	3401      	addeq	r4, #1
 8000916:	3d01      	subne	r5, #1
 8000918:	e74e      	b.n	80007b8 <__adddf3+0x8c>
 800091a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800091e:	bf18      	it	ne
 8000920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000924:	d029      	beq.n	800097a <__adddf3+0x24e>
 8000926:	ea94 0f05 	teq	r4, r5
 800092a:	bf08      	it	eq
 800092c:	ea90 0f02 	teqeq	r0, r2
 8000930:	d005      	beq.n	800093e <__adddf3+0x212>
 8000932:	ea54 0c00 	orrs.w	ip, r4, r0
 8000936:	bf04      	itt	eq
 8000938:	4619      	moveq	r1, r3
 800093a:	4610      	moveq	r0, r2
 800093c:	bd30      	pop	{r4, r5, pc}
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf1e      	ittt	ne
 8000944:	2100      	movne	r1, #0
 8000946:	2000      	movne	r0, #0
 8000948:	bd30      	popne	{r4, r5, pc}
 800094a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800094e:	d105      	bne.n	800095c <__adddf3+0x230>
 8000950:	0040      	lsls	r0, r0, #1
 8000952:	4149      	adcs	r1, r1
 8000954:	bf28      	it	cs
 8000956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800095a:	bd30      	pop	{r4, r5, pc}
 800095c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000960:	bf3c      	itt	cc
 8000962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000966:	bd30      	popcc	{r4, r5, pc}
 8000968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800096c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	bd30      	pop	{r4, r5, pc}
 800097a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800097e:	bf1a      	itte	ne
 8000980:	4619      	movne	r1, r3
 8000982:	4610      	movne	r0, r2
 8000984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000988:	bf1c      	itt	ne
 800098a:	460b      	movne	r3, r1
 800098c:	4602      	movne	r2, r0
 800098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000992:	bf06      	itte	eq
 8000994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000998:	ea91 0f03 	teqeq	r1, r3
 800099c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80009a0:	bd30      	pop	{r4, r5, pc}
 80009a2:	bf00      	nop

080009a4 <__aeabi_ui2d>:
 80009a4:	f090 0f00 	teq	r0, #0
 80009a8:	bf04      	itt	eq
 80009aa:	2100      	moveq	r1, #0
 80009ac:	4770      	bxeq	lr
 80009ae:	b530      	push	{r4, r5, lr}
 80009b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009b8:	f04f 0500 	mov.w	r5, #0
 80009bc:	f04f 0100 	mov.w	r1, #0
 80009c0:	e750      	b.n	8000864 <__adddf3+0x138>
 80009c2:	bf00      	nop

080009c4 <__aeabi_i2d>:
 80009c4:	f090 0f00 	teq	r0, #0
 80009c8:	bf04      	itt	eq
 80009ca:	2100      	moveq	r1, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	b530      	push	{r4, r5, lr}
 80009d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80009d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80009d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80009dc:	bf48      	it	mi
 80009de:	4240      	negmi	r0, r0
 80009e0:	f04f 0100 	mov.w	r1, #0
 80009e4:	e73e      	b.n	8000864 <__adddf3+0x138>
 80009e6:	bf00      	nop

080009e8 <__aeabi_f2d>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80009f6:	bf1f      	itttt	ne
 80009f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80009fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000a04:	4770      	bxne	lr
 8000a06:	f092 0f00 	teq	r2, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000a10:	4770      	bxeq	lr
 8000a12:	b530      	push	{r4, r5, lr}
 8000a14:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a20:	e720      	b.n	8000864 <__adddf3+0x138>
 8000a22:	bf00      	nop

08000a24 <__aeabi_ul2d>:
 8000a24:	ea50 0201 	orrs.w	r2, r0, r1
 8000a28:	bf08      	it	eq
 8000a2a:	4770      	bxeq	lr
 8000a2c:	b530      	push	{r4, r5, lr}
 8000a2e:	f04f 0500 	mov.w	r5, #0
 8000a32:	e00a      	b.n	8000a4a <__aeabi_l2d+0x16>

08000a34 <__aeabi_l2d>:
 8000a34:	ea50 0201 	orrs.w	r2, r0, r1
 8000a38:	bf08      	it	eq
 8000a3a:	4770      	bxeq	lr
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000a42:	d502      	bpl.n	8000a4a <__aeabi_l2d+0x16>
 8000a44:	4240      	negs	r0, r0
 8000a46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000a4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000a52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000a56:	f43f aedc 	beq.w	8000812 <__adddf3+0xe6>
 8000a5a:	f04f 0203 	mov.w	r2, #3
 8000a5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a62:	bf18      	it	ne
 8000a64:	3203      	addne	r2, #3
 8000a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000a6a:	bf18      	it	ne
 8000a6c:	3203      	addne	r2, #3
 8000a6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000a72:	f1c2 0320 	rsb	r3, r2, #32
 8000a76:	fa00 fc03 	lsl.w	ip, r0, r3
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a82:	ea40 000e 	orr.w	r0, r0, lr
 8000a86:	fa21 f102 	lsr.w	r1, r1, r2
 8000a8a:	4414      	add	r4, r2
 8000a8c:	e6c1      	b.n	8000812 <__adddf3+0xe6>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dmul>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a9e:	bf1d      	ittte	ne
 8000aa0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000aa4:	ea94 0f0c 	teqne	r4, ip
 8000aa8:	ea95 0f0c 	teqne	r5, ip
 8000aac:	f000 f8de 	bleq	8000c6c <__aeabi_dmul+0x1dc>
 8000ab0:	442c      	add	r4, r5
 8000ab2:	ea81 0603 	eor.w	r6, r1, r3
 8000ab6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000aba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000abe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000ac2:	bf18      	it	ne
 8000ac4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ad0:	d038      	beq.n	8000b44 <__aeabi_dmul+0xb4>
 8000ad2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000ad6:	f04f 0500 	mov.w	r5, #0
 8000ada:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000ade:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000ae2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000ae6:	f04f 0600 	mov.w	r6, #0
 8000aea:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000aee:	f09c 0f00 	teq	ip, #0
 8000af2:	bf18      	it	ne
 8000af4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000af8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000afc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000b00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000b04:	d204      	bcs.n	8000b10 <__aeabi_dmul+0x80>
 8000b06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000b0a:	416d      	adcs	r5, r5
 8000b0c:	eb46 0606 	adc.w	r6, r6, r6
 8000b10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000b14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000b18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000b1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000b20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000b24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b28:	bf88      	it	hi
 8000b2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b2e:	d81e      	bhi.n	8000b6e <__aeabi_dmul+0xde>
 8000b30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000b34:	bf08      	it	eq
 8000b36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000b3a:	f150 0000 	adcs.w	r0, r0, #0
 8000b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000b48:	ea46 0101 	orr.w	r1, r6, r1
 8000b4c:	ea40 0002 	orr.w	r0, r0, r2
 8000b50:	ea81 0103 	eor.w	r1, r1, r3
 8000b54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000b58:	bfc2      	ittt	gt
 8000b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b62:	bd70      	popgt	{r4, r5, r6, pc}
 8000b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b68:	f04f 0e00 	mov.w	lr, #0
 8000b6c:	3c01      	subs	r4, #1
 8000b6e:	f300 80ab 	bgt.w	8000cc8 <__aeabi_dmul+0x238>
 8000b72:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b76:	bfde      	ittt	le
 8000b78:	2000      	movle	r0, #0
 8000b7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000b7e:	bd70      	pople	{r4, r5, r6, pc}
 8000b80:	f1c4 0400 	rsb	r4, r4, #0
 8000b84:	3c20      	subs	r4, #32
 8000b86:	da35      	bge.n	8000bf4 <__aeabi_dmul+0x164>
 8000b88:	340c      	adds	r4, #12
 8000b8a:	dc1b      	bgt.n	8000bc4 <__aeabi_dmul+0x134>
 8000b8c:	f104 0414 	add.w	r4, r4, #20
 8000b90:	f1c4 0520 	rsb	r5, r4, #32
 8000b94:	fa00 f305 	lsl.w	r3, r0, r5
 8000b98:	fa20 f004 	lsr.w	r0, r0, r4
 8000b9c:	fa01 f205 	lsl.w	r2, r1, r5
 8000ba0:	ea40 0002 	orr.w	r0, r0, r2
 8000ba4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000ba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000bb0:	fa21 f604 	lsr.w	r6, r1, r4
 8000bb4:	eb42 0106 	adc.w	r1, r2, r6
 8000bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bbc:	bf08      	it	eq
 8000bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f1c4 040c 	rsb	r4, r4, #12
 8000bc8:	f1c4 0520 	rsb	r5, r4, #32
 8000bcc:	fa00 f304 	lsl.w	r3, r0, r4
 8000bd0:	fa20 f005 	lsr.w	r0, r0, r5
 8000bd4:	fa01 f204 	lsl.w	r2, r1, r4
 8000bd8:	ea40 0002 	orr.w	r0, r0, r2
 8000bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000be0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000be4:	f141 0100 	adc.w	r1, r1, #0
 8000be8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bec:	bf08      	it	eq
 8000bee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f1c4 0520 	rsb	r5, r4, #32
 8000bf8:	fa00 f205 	lsl.w	r2, r0, r5
 8000bfc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000c00:	fa20 f304 	lsr.w	r3, r0, r4
 8000c04:	fa01 f205 	lsl.w	r2, r1, r5
 8000c08:	ea43 0302 	orr.w	r3, r3, r2
 8000c0c:	fa21 f004 	lsr.w	r0, r1, r4
 8000c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c14:	fa21 f204 	lsr.w	r2, r1, r4
 8000c18:	ea20 0002 	bic.w	r0, r0, r2
 8000c1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000c20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000c24:	bf08      	it	eq
 8000c26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f094 0f00 	teq	r4, #0
 8000c30:	d10f      	bne.n	8000c52 <__aeabi_dmul+0x1c2>
 8000c32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000c36:	0040      	lsls	r0, r0, #1
 8000c38:	eb41 0101 	adc.w	r1, r1, r1
 8000c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c40:	bf08      	it	eq
 8000c42:	3c01      	subeq	r4, #1
 8000c44:	d0f7      	beq.n	8000c36 <__aeabi_dmul+0x1a6>
 8000c46:	ea41 0106 	orr.w	r1, r1, r6
 8000c4a:	f095 0f00 	teq	r5, #0
 8000c4e:	bf18      	it	ne
 8000c50:	4770      	bxne	lr
 8000c52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000c56:	0052      	lsls	r2, r2, #1
 8000c58:	eb43 0303 	adc.w	r3, r3, r3
 8000c5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000c60:	bf08      	it	eq
 8000c62:	3d01      	subeq	r5, #1
 8000c64:	d0f7      	beq.n	8000c56 <__aeabi_dmul+0x1c6>
 8000c66:	ea43 0306 	orr.w	r3, r3, r6
 8000c6a:	4770      	bx	lr
 8000c6c:	ea94 0f0c 	teq	r4, ip
 8000c70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c74:	bf18      	it	ne
 8000c76:	ea95 0f0c 	teqne	r5, ip
 8000c7a:	d00c      	beq.n	8000c96 <__aeabi_dmul+0x206>
 8000c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c80:	bf18      	it	ne
 8000c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c86:	d1d1      	bne.n	8000c2c <__aeabi_dmul+0x19c>
 8000c88:	ea81 0103 	eor.w	r1, r1, r3
 8000c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	bd70      	pop	{r4, r5, r6, pc}
 8000c96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c9a:	bf06      	itte	eq
 8000c9c:	4610      	moveq	r0, r2
 8000c9e:	4619      	moveq	r1, r3
 8000ca0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ca4:	d019      	beq.n	8000cda <__aeabi_dmul+0x24a>
 8000ca6:	ea94 0f0c 	teq	r4, ip
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_dmul+0x222>
 8000cac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000cb0:	d113      	bne.n	8000cda <__aeabi_dmul+0x24a>
 8000cb2:	ea95 0f0c 	teq	r5, ip
 8000cb6:	d105      	bne.n	8000cc4 <__aeabi_dmul+0x234>
 8000cb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000cbc:	bf1c      	itt	ne
 8000cbe:	4610      	movne	r0, r2
 8000cc0:	4619      	movne	r1, r3
 8000cc2:	d10a      	bne.n	8000cda <__aeabi_dmul+0x24a>
 8000cc4:	ea81 0103 	eor.w	r1, r1, r3
 8000cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ccc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cd4:	f04f 0000 	mov.w	r0, #0
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
 8000cda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000cde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}

08000ce4 <__aeabi_ddiv>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000cee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000cf2:	bf1d      	ittte	ne
 8000cf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000cf8:	ea94 0f0c 	teqne	r4, ip
 8000cfc:	ea95 0f0c 	teqne	r5, ip
 8000d00:	f000 f8a7 	bleq	8000e52 <__aeabi_ddiv+0x16e>
 8000d04:	eba4 0405 	sub.w	r4, r4, r5
 8000d08:	ea81 0e03 	eor.w	lr, r1, r3
 8000d0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000d14:	f000 8088 	beq.w	8000e28 <__aeabi_ddiv+0x144>
 8000d18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000d1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000d20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000d28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000d2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000d30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000d34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000d38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000d3c:	429d      	cmp	r5, r3
 8000d3e:	bf08      	it	eq
 8000d40:	4296      	cmpeq	r6, r2
 8000d42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000d46:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000d4a:	d202      	bcs.n	8000d52 <__aeabi_ddiv+0x6e>
 8000d4c:	085b      	lsrs	r3, r3, #1
 8000d4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d52:	1ab6      	subs	r6, r6, r2
 8000d54:	eb65 0503 	sbc.w	r5, r5, r3
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000d62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000d66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d6e:	bf22      	ittt	cs
 8000d70:	1ab6      	subcs	r6, r6, r2
 8000d72:	4675      	movcs	r5, lr
 8000d74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d78:	085b      	lsrs	r3, r3, #1
 8000d7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d86:	bf22      	ittt	cs
 8000d88:	1ab6      	subcs	r6, r6, r2
 8000d8a:	4675      	movcs	r5, lr
 8000d8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d9e:	bf22      	ittt	cs
 8000da0:	1ab6      	subcs	r6, r6, r2
 8000da2:	4675      	movcs	r5, lr
 8000da4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000dae:	ebb6 0e02 	subs.w	lr, r6, r2
 8000db2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000db6:	bf22      	ittt	cs
 8000db8:	1ab6      	subcs	r6, r6, r2
 8000dba:	4675      	movcs	r5, lr
 8000dbc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dc0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000dc4:	d018      	beq.n	8000df8 <__aeabi_ddiv+0x114>
 8000dc6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000dca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000dce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000dd2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000dd6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000dda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000dde:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000de2:	d1c0      	bne.n	8000d66 <__aeabi_ddiv+0x82>
 8000de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000de8:	d10b      	bne.n	8000e02 <__aeabi_ddiv+0x11e>
 8000dea:	ea41 0100 	orr.w	r1, r1, r0
 8000dee:	f04f 0000 	mov.w	r0, #0
 8000df2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000df6:	e7b6      	b.n	8000d66 <__aeabi_ddiv+0x82>
 8000df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000dfc:	bf04      	itt	eq
 8000dfe:	4301      	orreq	r1, r0
 8000e00:	2000      	moveq	r0, #0
 8000e02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000e06:	bf88      	it	hi
 8000e08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000e0c:	f63f aeaf 	bhi.w	8000b6e <__aeabi_dmul+0xde>
 8000e10:	ebb5 0c03 	subs.w	ip, r5, r3
 8000e14:	bf04      	itt	eq
 8000e16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000e1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000e1e:	f150 0000 	adcs.w	r0, r0, #0
 8000e22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000e2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000e30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000e34:	bfc2      	ittt	gt
 8000e36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000e3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000e3e:	bd70      	popgt	{r4, r5, r6, pc}
 8000e40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e44:	f04f 0e00 	mov.w	lr, #0
 8000e48:	3c01      	subs	r4, #1
 8000e4a:	e690      	b.n	8000b6e <__aeabi_dmul+0xde>
 8000e4c:	ea45 0e06 	orr.w	lr, r5, r6
 8000e50:	e68d      	b.n	8000b6e <__aeabi_dmul+0xde>
 8000e52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000e56:	ea94 0f0c 	teq	r4, ip
 8000e5a:	bf08      	it	eq
 8000e5c:	ea95 0f0c 	teqeq	r5, ip
 8000e60:	f43f af3b 	beq.w	8000cda <__aeabi_dmul+0x24a>
 8000e64:	ea94 0f0c 	teq	r4, ip
 8000e68:	d10a      	bne.n	8000e80 <__aeabi_ddiv+0x19c>
 8000e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000e6e:	f47f af34 	bne.w	8000cda <__aeabi_dmul+0x24a>
 8000e72:	ea95 0f0c 	teq	r5, ip
 8000e76:	f47f af25 	bne.w	8000cc4 <__aeabi_dmul+0x234>
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	e72c      	b.n	8000cda <__aeabi_dmul+0x24a>
 8000e80:	ea95 0f0c 	teq	r5, ip
 8000e84:	d106      	bne.n	8000e94 <__aeabi_ddiv+0x1b0>
 8000e86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e8a:	f43f aefd 	beq.w	8000c88 <__aeabi_dmul+0x1f8>
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	e722      	b.n	8000cda <__aeabi_dmul+0x24a>
 8000e94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e98:	bf18      	it	ne
 8000e9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e9e:	f47f aec5 	bne.w	8000c2c <__aeabi_dmul+0x19c>
 8000ea2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ea6:	f47f af0d 	bne.w	8000cc4 <__aeabi_dmul+0x234>
 8000eaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000eae:	f47f aeeb 	bne.w	8000c88 <__aeabi_dmul+0x1f8>
 8000eb2:	e712      	b.n	8000cda <__aeabi_dmul+0x24a>
	...

08000ec0 <__aeabi_d2iz>:
 8000ec0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ec4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ec8:	d215      	bcs.n	8000ef6 <__aeabi_d2iz+0x36>
 8000eca:	d511      	bpl.n	8000ef0 <__aeabi_d2iz+0x30>
 8000ecc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ed0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ed4:	d912      	bls.n	8000efc <__aeabi_d2iz+0x3c>
 8000ed6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ede:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ee2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ee6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eea:	bf18      	it	ne
 8000eec:	4240      	negne	r0, r0
 8000eee:	4770      	bx	lr
 8000ef0:	f04f 0000 	mov.w	r0, #0
 8000ef4:	4770      	bx	lr
 8000ef6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000efa:	d105      	bne.n	8000f08 <__aeabi_d2iz+0x48>
 8000efc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000f00:	bf08      	it	eq
 8000f02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <__aeabi_d2uiz>:
 8000f10:	004a      	lsls	r2, r1, #1
 8000f12:	d211      	bcs.n	8000f38 <__aeabi_d2uiz+0x28>
 8000f14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f18:	d211      	bcs.n	8000f3e <__aeabi_d2uiz+0x2e>
 8000f1a:	d50d      	bpl.n	8000f38 <__aeabi_d2uiz+0x28>
 8000f1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f24:	d40e      	bmi.n	8000f44 <__aeabi_d2uiz+0x34>
 8000f26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f32:	fa23 f002 	lsr.w	r0, r3, r2
 8000f36:	4770      	bx	lr
 8000f38:	f04f 0000 	mov.w	r0, #0
 8000f3c:	4770      	bx	lr
 8000f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f42:	d102      	bne.n	8000f4a <__aeabi_d2uiz+0x3a>
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	4770      	bx	lr
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_d2f>:
 8000f50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000f58:	bf24      	itt	cs
 8000f5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000f5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000f62:	d90d      	bls.n	8000f80 <__aeabi_d2f+0x30>
 8000f64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000f6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000f70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f84:	d121      	bne.n	8000fca <__aeabi_d2f+0x7a>
 8000f86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f8a:	bfbc      	itt	lt
 8000f8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f90:	4770      	bxlt	lr
 8000f92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f9a:	f1c2 0218 	rsb	r2, r2, #24
 8000f9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000fa2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000fa6:	fa20 f002 	lsr.w	r0, r0, r2
 8000faa:	bf18      	it	ne
 8000fac:	f040 0001 	orrne.w	r0, r0, #1
 8000fb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000fb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000fbc:	ea40 000c 	orr.w	r0, r0, ip
 8000fc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000fc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000fc8:	e7cc      	b.n	8000f64 <__aeabi_d2f+0x14>
 8000fca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000fce:	d107      	bne.n	8000fe0 <__aeabi_d2f+0x90>
 8000fd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000fd4:	bf1e      	ittt	ne
 8000fd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bxne	lr
 8000fe0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000fe4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fe8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_frsub>:
 8000ff0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ff4:	e002      	b.n	8000ffc <__addsf3>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fsub>:
 8000ff8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ffc <__addsf3>:
 8000ffc:	0042      	lsls	r2, r0, #1
 8000ffe:	bf1f      	itttt	ne
 8001000:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8001004:	ea92 0f03 	teqne	r2, r3
 8001008:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800100c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001010:	d06a      	beq.n	80010e8 <__addsf3+0xec>
 8001012:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8001016:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800101a:	bfc1      	itttt	gt
 800101c:	18d2      	addgt	r2, r2, r3
 800101e:	4041      	eorgt	r1, r0
 8001020:	4048      	eorgt	r0, r1
 8001022:	4041      	eorgt	r1, r0
 8001024:	bfb8      	it	lt
 8001026:	425b      	neglt	r3, r3
 8001028:	2b19      	cmp	r3, #25
 800102a:	bf88      	it	hi
 800102c:	4770      	bxhi	lr
 800102e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800103a:	bf18      	it	ne
 800103c:	4240      	negne	r0, r0
 800103e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001042:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001046:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800104a:	bf18      	it	ne
 800104c:	4249      	negne	r1, r1
 800104e:	ea92 0f03 	teq	r2, r3
 8001052:	d03f      	beq.n	80010d4 <__addsf3+0xd8>
 8001054:	f1a2 0201 	sub.w	r2, r2, #1
 8001058:	fa41 fc03 	asr.w	ip, r1, r3
 800105c:	eb10 000c 	adds.w	r0, r0, ip
 8001060:	f1c3 0320 	rsb	r3, r3, #32
 8001064:	fa01 f103 	lsl.w	r1, r1, r3
 8001068:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800106c:	d502      	bpl.n	8001074 <__addsf3+0x78>
 800106e:	4249      	negs	r1, r1
 8001070:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8001074:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001078:	d313      	bcc.n	80010a2 <__addsf3+0xa6>
 800107a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800107e:	d306      	bcc.n	800108e <__addsf3+0x92>
 8001080:	0840      	lsrs	r0, r0, #1
 8001082:	ea4f 0131 	mov.w	r1, r1, rrx
 8001086:	f102 0201 	add.w	r2, r2, #1
 800108a:	2afe      	cmp	r2, #254	; 0xfe
 800108c:	d251      	bcs.n	8001132 <__addsf3+0x136>
 800108e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8001092:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001096:	bf08      	it	eq
 8001098:	f020 0001 	biceq.w	r0, r0, #1
 800109c:	ea40 0003 	orr.w	r0, r0, r3
 80010a0:	4770      	bx	lr
 80010a2:	0049      	lsls	r1, r1, #1
 80010a4:	eb40 0000 	adc.w	r0, r0, r0
 80010a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80010ac:	f1a2 0201 	sub.w	r2, r2, #1
 80010b0:	d1ed      	bne.n	800108e <__addsf3+0x92>
 80010b2:	fab0 fc80 	clz	ip, r0
 80010b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80010ba:	ebb2 020c 	subs.w	r2, r2, ip
 80010be:	fa00 f00c 	lsl.w	r0, r0, ip
 80010c2:	bfaa      	itet	ge
 80010c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80010c8:	4252      	neglt	r2, r2
 80010ca:	4318      	orrge	r0, r3
 80010cc:	bfbc      	itt	lt
 80010ce:	40d0      	lsrlt	r0, r2
 80010d0:	4318      	orrlt	r0, r3
 80010d2:	4770      	bx	lr
 80010d4:	f092 0f00 	teq	r2, #0
 80010d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80010dc:	bf06      	itte	eq
 80010de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80010e2:	3201      	addeq	r2, #1
 80010e4:	3b01      	subne	r3, #1
 80010e6:	e7b5      	b.n	8001054 <__addsf3+0x58>
 80010e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f0:	bf18      	it	ne
 80010f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010f6:	d021      	beq.n	800113c <__addsf3+0x140>
 80010f8:	ea92 0f03 	teq	r2, r3
 80010fc:	d004      	beq.n	8001108 <__addsf3+0x10c>
 80010fe:	f092 0f00 	teq	r2, #0
 8001102:	bf08      	it	eq
 8001104:	4608      	moveq	r0, r1
 8001106:	4770      	bx	lr
 8001108:	ea90 0f01 	teq	r0, r1
 800110c:	bf1c      	itt	ne
 800110e:	2000      	movne	r0, #0
 8001110:	4770      	bxne	lr
 8001112:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8001116:	d104      	bne.n	8001122 <__addsf3+0x126>
 8001118:	0040      	lsls	r0, r0, #1
 800111a:	bf28      	it	cs
 800111c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001120:	4770      	bx	lr
 8001122:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8001126:	bf3c      	itt	cc
 8001128:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800112c:	4770      	bxcc	lr
 800112e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001132:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8001136:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800113a:	4770      	bx	lr
 800113c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001140:	bf16      	itet	ne
 8001142:	4608      	movne	r0, r1
 8001144:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001148:	4601      	movne	r1, r0
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	bf06      	itte	eq
 800114e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8001152:	ea90 0f01 	teqeq	r0, r1
 8001156:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800115a:	4770      	bx	lr

0800115c <__aeabi_ui2f>:
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e004      	b.n	800116c <__aeabi_i2f+0x8>
 8001162:	bf00      	nop

08001164 <__aeabi_i2f>:
 8001164:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001168:	bf48      	it	mi
 800116a:	4240      	negmi	r0, r0
 800116c:	ea5f 0c00 	movs.w	ip, r0
 8001170:	bf08      	it	eq
 8001172:	4770      	bxeq	lr
 8001174:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001178:	4601      	mov	r1, r0
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	e01c      	b.n	80011ba <__aeabi_l2f+0x2a>

08001180 <__aeabi_ul2f>:
 8001180:	ea50 0201 	orrs.w	r2, r0, r1
 8001184:	bf08      	it	eq
 8001186:	4770      	bxeq	lr
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e00a      	b.n	80011a4 <__aeabi_l2f+0x14>
 800118e:	bf00      	nop

08001190 <__aeabi_l2f>:
 8001190:	ea50 0201 	orrs.w	r2, r0, r1
 8001194:	bf08      	it	eq
 8001196:	4770      	bxeq	lr
 8001198:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800119c:	d502      	bpl.n	80011a4 <__aeabi_l2f+0x14>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	ea5f 0c01 	movs.w	ip, r1
 80011a8:	bf02      	ittt	eq
 80011aa:	4684      	moveq	ip, r0
 80011ac:	4601      	moveq	r1, r0
 80011ae:	2000      	moveq	r0, #0
 80011b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80011b4:	bf08      	it	eq
 80011b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80011ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80011be:	fabc f28c 	clz	r2, ip
 80011c2:	3a08      	subs	r2, #8
 80011c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80011c8:	db10      	blt.n	80011ec <__aeabi_l2f+0x5c>
 80011ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80011ce:	4463      	add	r3, ip
 80011d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80011d4:	f1c2 0220 	rsb	r2, r2, #32
 80011d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80011dc:	fa20 f202 	lsr.w	r2, r0, r2
 80011e0:	eb43 0002 	adc.w	r0, r3, r2
 80011e4:	bf08      	it	eq
 80011e6:	f020 0001 	biceq.w	r0, r0, #1
 80011ea:	4770      	bx	lr
 80011ec:	f102 0220 	add.w	r2, r2, #32
 80011f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80011f4:	f1c2 0220 	rsb	r2, r2, #32
 80011f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80011fc:	fa21 f202 	lsr.w	r2, r1, r2
 8001200:	eb43 0002 	adc.w	r0, r3, r2
 8001204:	bf08      	it	eq
 8001206:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800120a:	4770      	bx	lr
 800120c:	0000      	movs	r0, r0
	...

08001210 <__aeabi_fmul>:
 8001210:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001214:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001218:	bf1e      	ittt	ne
 800121a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800121e:	ea92 0f0c 	teqne	r2, ip
 8001222:	ea93 0f0c 	teqne	r3, ip
 8001226:	d06f      	beq.n	8001308 <__aeabi_fmul+0xf8>
 8001228:	441a      	add	r2, r3
 800122a:	ea80 0c01 	eor.w	ip, r0, r1
 800122e:	0240      	lsls	r0, r0, #9
 8001230:	bf18      	it	ne
 8001232:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8001236:	d01e      	beq.n	8001276 <__aeabi_fmul+0x66>
 8001238:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800123c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001240:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001244:	fba0 3101 	umull	r3, r1, r0, r1
 8001248:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800124c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001250:	bf3e      	ittt	cc
 8001252:	0049      	lslcc	r1, r1, #1
 8001254:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001258:	005b      	lslcc	r3, r3, #1
 800125a:	ea40 0001 	orr.w	r0, r0, r1
 800125e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001262:	2afd      	cmp	r2, #253	; 0xfd
 8001264:	d81d      	bhi.n	80012a2 <__aeabi_fmul+0x92>
 8001266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800126a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800126e:	bf08      	it	eq
 8001270:	f020 0001 	biceq.w	r0, r0, #1
 8001274:	4770      	bx	lr
 8001276:	f090 0f00 	teq	r0, #0
 800127a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800127e:	bf08      	it	eq
 8001280:	0249      	lsleq	r1, r1, #9
 8001282:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001286:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800128a:	3a7f      	subs	r2, #127	; 0x7f
 800128c:	bfc2      	ittt	gt
 800128e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001292:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001296:	4770      	bxgt	lr
 8001298:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	3a01      	subs	r2, #1
 80012a2:	dc5d      	bgt.n	8001360 <__aeabi_fmul+0x150>
 80012a4:	f112 0f19 	cmn.w	r2, #25
 80012a8:	bfdc      	itt	le
 80012aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80012ae:	4770      	bxle	lr
 80012b0:	f1c2 0200 	rsb	r2, r2, #0
 80012b4:	0041      	lsls	r1, r0, #1
 80012b6:	fa21 f102 	lsr.w	r1, r1, r2
 80012ba:	f1c2 0220 	rsb	r2, r2, #32
 80012be:	fa00 fc02 	lsl.w	ip, r0, r2
 80012c2:	ea5f 0031 	movs.w	r0, r1, rrx
 80012c6:	f140 0000 	adc.w	r0, r0, #0
 80012ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80012ce:	bf08      	it	eq
 80012d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80012d4:	4770      	bx	lr
 80012d6:	f092 0f00 	teq	r2, #0
 80012da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80012de:	bf02      	ittt	eq
 80012e0:	0040      	lsleq	r0, r0, #1
 80012e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80012e6:	3a01      	subeq	r2, #1
 80012e8:	d0f9      	beq.n	80012de <__aeabi_fmul+0xce>
 80012ea:	ea40 000c 	orr.w	r0, r0, ip
 80012ee:	f093 0f00 	teq	r3, #0
 80012f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80012f6:	bf02      	ittt	eq
 80012f8:	0049      	lsleq	r1, r1, #1
 80012fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80012fe:	3b01      	subeq	r3, #1
 8001300:	d0f9      	beq.n	80012f6 <__aeabi_fmul+0xe6>
 8001302:	ea41 010c 	orr.w	r1, r1, ip
 8001306:	e78f      	b.n	8001228 <__aeabi_fmul+0x18>
 8001308:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800130c:	ea92 0f0c 	teq	r2, ip
 8001310:	bf18      	it	ne
 8001312:	ea93 0f0c 	teqne	r3, ip
 8001316:	d00a      	beq.n	800132e <__aeabi_fmul+0x11e>
 8001318:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800131c:	bf18      	it	ne
 800131e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001322:	d1d8      	bne.n	80012d6 <__aeabi_fmul+0xc6>
 8001324:	ea80 0001 	eor.w	r0, r0, r1
 8001328:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800132c:	4770      	bx	lr
 800132e:	f090 0f00 	teq	r0, #0
 8001332:	bf17      	itett	ne
 8001334:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001338:	4608      	moveq	r0, r1
 800133a:	f091 0f00 	teqne	r1, #0
 800133e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001342:	d014      	beq.n	800136e <__aeabi_fmul+0x15e>
 8001344:	ea92 0f0c 	teq	r2, ip
 8001348:	d101      	bne.n	800134e <__aeabi_fmul+0x13e>
 800134a:	0242      	lsls	r2, r0, #9
 800134c:	d10f      	bne.n	800136e <__aeabi_fmul+0x15e>
 800134e:	ea93 0f0c 	teq	r3, ip
 8001352:	d103      	bne.n	800135c <__aeabi_fmul+0x14c>
 8001354:	024b      	lsls	r3, r1, #9
 8001356:	bf18      	it	ne
 8001358:	4608      	movne	r0, r1
 800135a:	d108      	bne.n	800136e <__aeabi_fmul+0x15e>
 800135c:	ea80 0001 	eor.w	r0, r0, r1
 8001360:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001364:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800136c:	4770      	bx	lr
 800136e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001372:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001376:	4770      	bx	lr

08001378 <__aeabi_fdiv>:
 8001378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800137c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001380:	bf1e      	ittt	ne
 8001382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001386:	ea92 0f0c 	teqne	r2, ip
 800138a:	ea93 0f0c 	teqne	r3, ip
 800138e:	d069      	beq.n	8001464 <__aeabi_fdiv+0xec>
 8001390:	eba2 0203 	sub.w	r2, r2, r3
 8001394:	ea80 0c01 	eor.w	ip, r0, r1
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800139e:	d037      	beq.n	8001410 <__aeabi_fdiv+0x98>
 80013a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80013a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80013ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80013b0:	428b      	cmp	r3, r1
 80013b2:	bf38      	it	cc
 80013b4:	005b      	lslcc	r3, r3, #1
 80013b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80013ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80013be:	428b      	cmp	r3, r1
 80013c0:	bf24      	itt	cs
 80013c2:	1a5b      	subcs	r3, r3, r1
 80013c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80013c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80013cc:	bf24      	itt	cs
 80013ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80013d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80013d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80013da:	bf24      	itt	cs
 80013dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80013e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80013e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80013e8:	bf24      	itt	cs
 80013ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80013ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	bf18      	it	ne
 80013f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80013fa:	d1e0      	bne.n	80013be <__aeabi_fdiv+0x46>
 80013fc:	2afd      	cmp	r2, #253	; 0xfd
 80013fe:	f63f af50 	bhi.w	80012a2 <__aeabi_fmul+0x92>
 8001402:	428b      	cmp	r3, r1
 8001404:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001408:	bf08      	it	eq
 800140a:	f020 0001 	biceq.w	r0, r0, #1
 800140e:	4770      	bx	lr
 8001410:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001414:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001418:	327f      	adds	r2, #127	; 0x7f
 800141a:	bfc2      	ittt	gt
 800141c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001420:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001424:	4770      	bxgt	lr
 8001426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	3a01      	subs	r2, #1
 8001430:	e737      	b.n	80012a2 <__aeabi_fmul+0x92>
 8001432:	f092 0f00 	teq	r2, #0
 8001436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800143a:	bf02      	ittt	eq
 800143c:	0040      	lsleq	r0, r0, #1
 800143e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001442:	3a01      	subeq	r2, #1
 8001444:	d0f9      	beq.n	800143a <__aeabi_fdiv+0xc2>
 8001446:	ea40 000c 	orr.w	r0, r0, ip
 800144a:	f093 0f00 	teq	r3, #0
 800144e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001452:	bf02      	ittt	eq
 8001454:	0049      	lsleq	r1, r1, #1
 8001456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800145a:	3b01      	subeq	r3, #1
 800145c:	d0f9      	beq.n	8001452 <__aeabi_fdiv+0xda>
 800145e:	ea41 010c 	orr.w	r1, r1, ip
 8001462:	e795      	b.n	8001390 <__aeabi_fdiv+0x18>
 8001464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001468:	ea92 0f0c 	teq	r2, ip
 800146c:	d108      	bne.n	8001480 <__aeabi_fdiv+0x108>
 800146e:	0242      	lsls	r2, r0, #9
 8001470:	f47f af7d 	bne.w	800136e <__aeabi_fmul+0x15e>
 8001474:	ea93 0f0c 	teq	r3, ip
 8001478:	f47f af70 	bne.w	800135c <__aeabi_fmul+0x14c>
 800147c:	4608      	mov	r0, r1
 800147e:	e776      	b.n	800136e <__aeabi_fmul+0x15e>
 8001480:	ea93 0f0c 	teq	r3, ip
 8001484:	d104      	bne.n	8001490 <__aeabi_fdiv+0x118>
 8001486:	024b      	lsls	r3, r1, #9
 8001488:	f43f af4c 	beq.w	8001324 <__aeabi_fmul+0x114>
 800148c:	4608      	mov	r0, r1
 800148e:	e76e      	b.n	800136e <__aeabi_fmul+0x15e>
 8001490:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001494:	bf18      	it	ne
 8001496:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800149a:	d1ca      	bne.n	8001432 <__aeabi_fdiv+0xba>
 800149c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80014a0:	f47f af5c 	bne.w	800135c <__aeabi_fmul+0x14c>
 80014a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80014a8:	f47f af3c 	bne.w	8001324 <__aeabi_fmul+0x114>
 80014ac:	e75f      	b.n	800136e <__aeabi_fmul+0x15e>
 80014ae:	bf00      	nop

080014b0 <__gesf2>:
 80014b0:	f04f 3cff 	mov.w	ip, #4294967295
 80014b4:	e006      	b.n	80014c4 <__cmpsf2+0x4>
 80014b6:	bf00      	nop

080014b8 <__lesf2>:
 80014b8:	f04f 0c01 	mov.w	ip, #1
 80014bc:	e002      	b.n	80014c4 <__cmpsf2+0x4>
 80014be:	bf00      	nop

080014c0 <__cmpsf2>:
 80014c0:	f04f 0c01 	mov.w	ip, #1
 80014c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80014c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80014cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80014d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80014d4:	bf18      	it	ne
 80014d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80014da:	d011      	beq.n	8001500 <__cmpsf2+0x40>
 80014dc:	b001      	add	sp, #4
 80014de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80014e2:	bf18      	it	ne
 80014e4:	ea90 0f01 	teqne	r0, r1
 80014e8:	bf58      	it	pl
 80014ea:	ebb2 0003 	subspl.w	r0, r2, r3
 80014ee:	bf88      	it	hi
 80014f0:	17c8      	asrhi	r0, r1, #31
 80014f2:	bf38      	it	cc
 80014f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80014f8:	bf18      	it	ne
 80014fa:	f040 0001 	orrne.w	r0, r0, #1
 80014fe:	4770      	bx	lr
 8001500:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001504:	d102      	bne.n	800150c <__cmpsf2+0x4c>
 8001506:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800150a:	d105      	bne.n	8001518 <__cmpsf2+0x58>
 800150c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001510:	d1e4      	bne.n	80014dc <__cmpsf2+0x1c>
 8001512:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001516:	d0e1      	beq.n	80014dc <__cmpsf2+0x1c>
 8001518:	f85d 0b04 	ldr.w	r0, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <__aeabi_cfrcmple>:
 8001520:	4684      	mov	ip, r0
 8001522:	4608      	mov	r0, r1
 8001524:	4661      	mov	r1, ip
 8001526:	e7ff      	b.n	8001528 <__aeabi_cfcmpeq>

08001528 <__aeabi_cfcmpeq>:
 8001528:	b50f      	push	{r0, r1, r2, r3, lr}
 800152a:	f7ff ffc9 	bl	80014c0 <__cmpsf2>
 800152e:	2800      	cmp	r0, #0
 8001530:	bf48      	it	mi
 8001532:	f110 0f00 	cmnmi.w	r0, #0
 8001536:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001538 <__aeabi_fcmpeq>:
 8001538:	f84d ed08 	str.w	lr, [sp, #-8]!
 800153c:	f7ff fff4 	bl	8001528 <__aeabi_cfcmpeq>
 8001540:	bf0c      	ite	eq
 8001542:	2001      	moveq	r0, #1
 8001544:	2000      	movne	r0, #0
 8001546:	f85d fb08 	ldr.w	pc, [sp], #8
 800154a:	bf00      	nop

0800154c <__aeabi_fcmplt>:
 800154c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001550:	f7ff ffea 	bl	8001528 <__aeabi_cfcmpeq>
 8001554:	bf34      	ite	cc
 8001556:	2001      	movcc	r0, #1
 8001558:	2000      	movcs	r0, #0
 800155a:	f85d fb08 	ldr.w	pc, [sp], #8
 800155e:	bf00      	nop

08001560 <__aeabi_fcmple>:
 8001560:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001564:	f7ff ffe0 	bl	8001528 <__aeabi_cfcmpeq>
 8001568:	bf94      	ite	ls
 800156a:	2001      	movls	r0, #1
 800156c:	2000      	movhi	r0, #0
 800156e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001572:	bf00      	nop

08001574 <__aeabi_fcmpge>:
 8001574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001578:	f7ff ffd2 	bl	8001520 <__aeabi_cfrcmple>
 800157c:	bf94      	ite	ls
 800157e:	2001      	movls	r0, #1
 8001580:	2000      	movhi	r0, #0
 8001582:	f85d fb08 	ldr.w	pc, [sp], #8
 8001586:	bf00      	nop

08001588 <__aeabi_fcmpgt>:
 8001588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800158c:	f7ff ffc8 	bl	8001520 <__aeabi_cfrcmple>
 8001590:	bf34      	ite	cc
 8001592:	2001      	movcc	r0, #1
 8001594:	2000      	movcs	r0, #0
 8001596:	f85d fb08 	ldr.w	pc, [sp], #8
 800159a:	bf00      	nop
 800159c:	0000      	movs	r0, r0
	...

080015a0 <__aeabi_f2iz>:
 80015a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80015a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80015a8:	d30f      	bcc.n	80015ca <__aeabi_f2iz+0x2a>
 80015aa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80015ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80015b2:	d90d      	bls.n	80015d0 <__aeabi_f2iz+0x30>
 80015b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80015b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015bc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80015c0:	fa23 f002 	lsr.w	r0, r3, r2
 80015c4:	bf18      	it	ne
 80015c6:	4240      	negne	r0, r0
 80015c8:	4770      	bx	lr
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	4770      	bx	lr
 80015d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80015d4:	d101      	bne.n	80015da <__aeabi_f2iz+0x3a>
 80015d6:	0242      	lsls	r2, r0, #9
 80015d8:	d105      	bne.n	80015e6 <__aeabi_f2iz+0x46>
 80015da:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80015de:	bf08      	it	eq
 80015e0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80015e4:	4770      	bx	lr
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	4770      	bx	lr
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <__aeabi_f2uiz>:
 80015f0:	0042      	lsls	r2, r0, #1
 80015f2:	d20e      	bcs.n	8001612 <__aeabi_f2uiz+0x22>
 80015f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80015f8:	d30b      	bcc.n	8001612 <__aeabi_f2uiz+0x22>
 80015fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80015fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001602:	d409      	bmi.n	8001618 <__aeabi_f2uiz+0x28>
 8001604:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800160c:	fa23 f002 	lsr.w	r0, r3, r2
 8001610:	4770      	bx	lr
 8001612:	f04f 0000 	mov.w	r0, #0
 8001616:	4770      	bx	lr
 8001618:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800161c:	d101      	bne.n	8001622 <__aeabi_f2uiz+0x32>
 800161e:	0242      	lsls	r2, r0, #9
 8001620:	d102      	bne.n	8001628 <__aeabi_f2uiz+0x38>
 8001622:	f04f 30ff 	mov.w	r0, #4294967295
 8001626:	4770      	bx	lr
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <tmr.6612>:

static virtual_timer_t vt;
static void tmr(void *p) {
  (void)p;

  test_timer_done = TRUE;
 8001630:	f640 53cc 	movw	r3, #3532	; 0xdcc
 8001634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <chCoreAlloc>:
 8001640:	2320      	movs	r3, #32
 8001642:	f383 8811 	msr	BASEPRI, r3
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <chCoreAlloc+0x2c>)
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <chCoreAlloc+0x30>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	6809      	ldr	r1, [r1, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800164e:	3007      	adds	r0, #7
 8001650:	f020 0007 	bic.w	r0, r0, #7
  if ((size_t)(endmem - nextmem) < size)
 8001654:	1ac9      	subs	r1, r1, r3
 8001656:	4288      	cmp	r0, r1
    return NULL;
  p = nextmem;
  nextmem += size;
 8001658:	bf9a      	itte	ls
 800165a:	1818      	addls	r0, r3, r0
 800165c:	6010      	strls	r0, [r2, #0]

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  if ((size_t)(endmem - nextmem) < size)
    return NULL;
 800165e:	2300      	movhi	r3, #0
 8001660:	2200      	movs	r2, #0
 8001662:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();
  return p;
}
 8001666:	4618      	mov	r0, r3
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000dc8 	.word	0x20000dc8
 8001670:	20000d30 	.word	0x20000d30
 8001674:	f3af 8000 	nop.w
 8001678:	f3af 8000 	nop.w
 800167c:	f3af 8000 	nop.w

08001680 <wakeup.4589>:
 8001680:	2320      	movs	r3, #32
 8001682:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001686:	7f01      	ldrb	r1, [r0, #28]
 8001688:	2907      	cmp	r1, #7
 800168a:	d80e      	bhi.n	80016aa <wakeup.4589+0x2a>
 800168c:	e8df f001 	tbb	[pc, r1]
 8001690:	210d0d1d 	.word	0x210d0d1d
 8001694:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES
  case CH_STATE_WTSEM:
    chSemFastSignalI((semaphore_t *)tp->p_u.wtobjp);
 8001698:	6a03      	ldr	r3, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	1c51      	adds	r1, r2, #1
 800169e:	6099      	str	r1, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016a0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80016a4:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80016a6:	6802      	ldr	r2, [r0, #0]
 80016a8:	6053      	str	r3, [r2, #4]
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    queue_dequeue(tp);
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80016aa:	f04f 32ff 	mov.w	r2, #4294967295
 80016ae:	6202      	str	r2, [r0, #32]
 80016b0:	6881      	ldr	r1, [r0, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80016b2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.r_queue;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <wakeup.4589+0x5c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80016b6:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80016b8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	428a      	cmp	r2, r1
 80016be:	d2fb      	bcs.n	80016b8 <wakeup.4589+0x38>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80016c0:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80016c2:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80016c4:	6041      	str	r1, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80016c6:	6008      	str	r0, [r1, #0]
 80016c8:	6058      	str	r0, [r3, #4]
 80016ca:	2000      	movs	r0, #0
 80016cc:	f380 8811 	msr	BASEPRI, r0
 80016d0:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *(thread_reference_t *)tp->p_u.wtobjp = NULL;
 80016d2:	6a03      	ldr	r3, [r0, #32]
 80016d4:	2100      	movs	r1, #0
 80016d6:	6019      	str	r1, [r3, #0]
 80016d8:	e7e7      	b.n	80016aa <wakeup.4589+0x2a>
 80016da:	bf00      	nop
 80016dc:	20001eb8 	.word	0x20001eb8

080016e0 <_idle_thread.4288>:
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {

  (void)p;
  chRegSetThreadName("idle");
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <_idle_thread.4288+0xc>)
 80016e2:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <_idle_thread.4288+0x10>)
 80016e4:	6998      	ldr	r0, [r3, #24]
 80016e6:	6182      	str	r2, [r0, #24]
 80016e8:	e7fe      	b.n	80016e8 <_idle_thread.4288+0x8>
 80016ea:	bf00      	nop
 80016ec:	20001eb8 	.word	0x20001eb8
 80016f0:	0800a1d0 	.word	0x0800a1d0
 80016f4:	f3af 8000 	nop.w
 80016f8:	f3af 8000 	nop.w
 80016fc:	f3af 8000 	nop.w

08001700 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001700:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001704:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001706:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800170a:	2000      	movs	r0, #0
 800170c:	f380 8811 	msr	BASEPRI, r0
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	f3af 8000 	nop.w
 800171c:	f3af 8000 	nop.w

08001720 <test_terminate_threads>:
 */
void test_terminate_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i])
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <test_terminate_threads+0x7c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	b14a      	cbz	r2, 800173a <test_terminate_threads+0x1a>
 8001726:	2120      	movs	r1, #32
 8001728:	f381 8811 	msr	BASEPRI, r1
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->p_flags |= CH_FLAG_TERMINATE;
 800172c:	7f50      	ldrb	r0, [r2, #29]
 800172e:	f040 0104 	orr.w	r1, r0, #4
 8001732:	7751      	strb	r1, [r2, #29]
 8001734:	2200      	movs	r2, #0
 8001736:	f382 8811 	msr	BASEPRI, r2
 800173a:	6858      	ldr	r0, [r3, #4]
 800173c:	b148      	cbz	r0, 8001752 <test_terminate_threads+0x32>
 800173e:	2120      	movs	r1, #32
 8001740:	f381 8811 	msr	BASEPRI, r1
 8001744:	7f42      	ldrb	r2, [r0, #29]
 8001746:	f042 0104 	orr.w	r1, r2, #4
 800174a:	7741      	strb	r1, [r0, #29]
 800174c:	2000      	movs	r0, #0
 800174e:	f380 8811 	msr	BASEPRI, r0
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	b14a      	cbz	r2, 800176a <test_terminate_threads+0x4a>
 8001756:	2120      	movs	r1, #32
 8001758:	f381 8811 	msr	BASEPRI, r1
 800175c:	7f50      	ldrb	r0, [r2, #29]
 800175e:	f040 0104 	orr.w	r1, r0, #4
 8001762:	7751      	strb	r1, [r2, #29]
 8001764:	2200      	movs	r2, #0
 8001766:	f382 8811 	msr	BASEPRI, r2
 800176a:	68d8      	ldr	r0, [r3, #12]
 800176c:	b148      	cbz	r0, 8001782 <test_terminate_threads+0x62>
 800176e:	2120      	movs	r1, #32
 8001770:	f381 8811 	msr	BASEPRI, r1
 8001774:	7f42      	ldrb	r2, [r0, #29]
 8001776:	f042 0104 	orr.w	r1, r2, #4
 800177a:	7741      	strb	r1, [r0, #29]
 800177c:	2000      	movs	r0, #0
 800177e:	f380 8811 	msr	BASEPRI, r0
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	b14b      	cbz	r3, 800179a <test_terminate_threads+0x7a>
 8001786:	2220      	movs	r2, #32
 8001788:	f382 8811 	msr	BASEPRI, r2
 800178c:	7f59      	ldrb	r1, [r3, #29]
 800178e:	f041 0004 	orr.w	r0, r1, #4
 8001792:	7758      	strb	r0, [r3, #29]
 8001794:	2300      	movs	r3, #0
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	4770      	bx	lr
 800179c:	20002008 	.word	0x20002008

080017a0 <_test_assert_time_window>:
    return _test_fail(point);
  clear_tokens();
  return FALSE;
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {
 80017a0:	b410      	push	{r4}
 80017a2:	2320      	movs	r3, #32
 80017a4:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80017a8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80017ac:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80017ae:	2300      	movs	r3, #0
 80017b0:	f383 8811 	msr	BASEPRI, r3
    test_println("FAILURE");
  else
    test_println("SUCCESS");

  return (msg_t)global_fail;
}
 80017b4:	b2a4      	uxth	r4, r4
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)(time - start < end - start);
 80017b6:	1a64      	subs	r4, r4, r1
 80017b8:	1a51      	subs	r1, r2, r1
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 80017ba:	428c      	cmp	r4, r1
 80017bc:	db09      	blt.n	80017d2 <_test_assert_time_window+0x32>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <_test_assert_time_window+0x38>)
 80017c0:	2301      	movs	r3, #1
 80017c2:	7013      	strb	r3, [r2, #0]
  global_fail = TRUE;
 80017c4:	4905      	ldr	r1, [pc, #20]	; (80017dc <_test_assert_time_window+0x3c>)
  failpoint = point;
 80017c6:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <_test_assert_time_window+0x40>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 80017c8:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 80017ca:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 80017cc:	4618      	mov	r0, r3
}

bool _test_assert_time_window(unsigned point, systime_t start, systime_t end) {

  return _test_assert(point, chVTIsSystemTimeWithin(start, end));
}
 80017ce:	bc10      	pop	{r4}
 80017d0:	4770      	bx	lr

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
  return FALSE;
 80017d2:	4618      	mov	r0, r3
 80017d4:	e7fb      	b.n	80017ce <_test_assert_time_window+0x2e>
 80017d6:	bf00      	nop
 80017d8:	20001494 	.word	0x20001494
 80017dc:	200014b8 	.word	0x200014b8
 80017e0:	200014c0 	.word	0x200014c0
 80017e4:	f3af 8000 	nop.w
 80017e8:	f3af 8000 	nop.w
 80017ec:	f3af 8000 	nop.w

080017f0 <_test_assert_sequence>:
}

bool _test_assert_sequence(unsigned point, char *expected) {
 80017f0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80017f4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001870 <_test_assert_sequence+0x80>
 80017f8:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001874 <_test_assert_sequence+0x84>
 80017fc:	f8d8 7000 	ldr.w	r7, [r8]
 8001800:	4663      	mov	r3, ip
 8001802:	ebcc 0207 	rsb	r2, ip, r7
 8001806:	07d2      	lsls	r2, r2, #31
 8001808:	d515      	bpl.n	8001836 <_test_assert_sequence+0x46>
  char *cp = tokens_buffer;
  while (cp < tokp) {
 800180a:	4567      	cmp	r7, ip
 800180c:	d918      	bls.n	8001840 <_test_assert_sequence+0x50>
    if (*cp++ != *expected++)
 800180e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001812:	f89c 4000 	ldrb.w	r4, [ip]
 8001816:	f10c 0301 	add.w	r3, ip, #1
 800181a:	4294      	cmp	r4, r2
 800181c:	d00b      	beq.n	8001836 <_test_assert_sequence+0x46>
 800181e:	e015      	b.n	800184c <_test_assert_sequence+0x5c>
 8001820:	781e      	ldrb	r6, [r3, #0]
 8001822:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001826:	1c63      	adds	r3, r4, #1
 8001828:	42ae      	cmp	r6, r5
 800182a:	d10f      	bne.n	800184c <_test_assert_sequence+0x5c>
 800182c:	784d      	ldrb	r5, [r1, #1]
 800182e:	7824      	ldrb	r4, [r4, #0]
 8001830:	1c51      	adds	r1, r2, #1
 8001832:	42ac      	cmp	r4, r5
 8001834:	d10a      	bne.n	800184c <_test_assert_sequence+0x5c>
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 8001836:	429f      	cmp	r7, r3
    if (*cp++ != *expected++)
 8001838:	460a      	mov	r2, r1
 800183a:	f103 0401 	add.w	r4, r3, #1
  return FALSE;
}

bool _test_assert_sequence(unsigned point, char *expected) {
  char *cp = tokens_buffer;
  while (cp < tokp) {
 800183e:	d8ef      	bhi.n	8001820 <_test_assert_sequence+0x30>
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
 8001840:	780b      	ldrb	r3, [r1, #0]
 8001842:	b91b      	cbnz	r3, 800184c <_test_assert_sequence+0x5c>
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8001844:	f8c8 c000 	str.w	ip, [r8]
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
  clear_tokens();
  return FALSE;
 8001848:	4618      	mov	r0, r3
 800184a:	e007      	b.n	800185c <_test_assert_sequence+0x6c>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_test_assert_sequence+0x74>)
 800184e:	2101      	movs	r1, #1
 8001850:	7011      	strb	r1, [r2, #0]
  global_fail = TRUE;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <_test_assert_sequence+0x78>)
  failpoint = point;
 8001854:	4a05      	ldr	r2, [pc, #20]	; (800186c <_test_assert_sequence+0x7c>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 8001856:	7019      	strb	r1, [r3, #0]
  failpoint = point;
 8001858:	6010      	str	r0, [r2, #0]
  while (cp < tokp) {
    if (*cp++ != *expected++)
     return _test_fail(point);
  }
  if (*expected)
    return _test_fail(point);
 800185a:	4608      	mov	r0, r1
  clear_tokens();
  return FALSE;
}
 800185c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20001494 	.word	0x20001494
 8001868:	200014b8 	.word	0x200014b8
 800186c:	200014c0 	.word	0x200014c0
 8001870:	20001490 	.word	0x20001490
 8001874:	200014c4 	.word	0x200014c4
 8001878:	f3af 8000 	nop.w
 800187c:	f3af 8000 	nop.w

08001880 <_test_assert>:
  return TRUE;
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
 8001880:	b941      	cbnz	r1, 8001894 <_test_assert+0x14>
/*
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_test_assert+0x18>)
 8001884:	2301      	movs	r3, #1
 8001886:	7013      	strb	r3, [r2, #0]
  global_fail = TRUE;
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <_test_assert+0x1c>)
  failpoint = point;
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_test_assert+0x20>)
 * Assertions.
 */
bool _test_fail(unsigned point) {

  local_fail = TRUE;
  global_fail = TRUE;
 800188c:	700b      	strb	r3, [r1, #0]
  failpoint = point;
 800188e:	6010      	str	r0, [r2, #0]
}

bool _test_assert(unsigned point, bool condition) {

  if (!condition)
    return _test_fail(point);
 8001890:	4618      	mov	r0, r3
 8001892:	4770      	bx	lr
  return FALSE;
 8001894:	2000      	movs	r0, #0
}
 8001896:	4770      	bx	lr
 8001898:	20001494 	.word	0x20001494
 800189c:	200014b8 	.word	0x200014b8
 80018a0:	200014c0 	.word	0x200014c0
 80018a4:	f3af 8000 	nop.w
 80018a8:	f3af 8000 	nop.w
 80018ac:	f3af 8000 	nop.w

080018b0 <test_emit_token>:
 80018b0:	2320      	movs	r3, #32
 80018b2:	f383 8811 	msr	BASEPRI, r3
 * @param[in] token     the token as a char
 */
void test_emit_token(char token) {

  chSysLock();
  *tokp++ = token;
 80018b6:	f241 4190 	movw	r1, #5264	; 0x1490
 80018ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018be:	680a      	ldr	r2, [r1, #0]
 80018c0:	f802 0b01 	strb.w	r0, [r2], #1
 80018c4:	600a      	str	r2, [r1, #0]
 80018c6:	2000      	movs	r0, #0
 80018c8:	f380 8811 	msr	BASEPRI, r0
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <h1.7730>:
static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 80018d0:	2041      	movs	r0, #65	; 0x41
 80018d2:	f7ff bfed 	b.w	80018b0 <test_emit_token>
 80018d6:	bf00      	nop
 80018d8:	f3af 8000 	nop.w
 80018dc:	f3af 8000 	nop.w

080018e0 <h2.7727>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 80018e0:	2042      	movs	r0, #66	; 0x42
 80018e2:	f7ff bfe5 	b.w	80018b0 <test_emit_token>
 80018e6:	bf00      	nop
 80018e8:	f3af 8000 	nop.w
 80018ec:	f3af 8000 	nop.w

080018f0 <h3.7724>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 80018f0:	2043      	movs	r0, #67	; 0x43
 80018f2:	f7ff bfdd 	b.w	80018b0 <test_emit_token>
 80018f6:	bf00      	nop
 80018f8:	f3af 8000 	nop.w
 80018fc:	f3af 8000 	nop.w

08001900 <thread.6821.4052>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static msg_t thread(void *p) {
 8001900:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8001902:	7800      	ldrb	r0, [r0, #0]
 8001904:	f7ff ffd4 	bl	80018b0 <test_emit_token>
  return 0;
}
 8001908:	2000      	movs	r0, #0
 800190a:	bd08      	pop	{r3, pc}
 800190c:	f3af 8000 	nop.w

08001910 <test_println>:
/**
 * @brief   Prints a line.
 *
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {
 8001910:	b538      	push	{r3, r4, r5, lr}
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001912:	7801      	ldrb	r1, [r0, #0]
 8001914:	4d08      	ldr	r5, [pc, #32]	; (8001938 <test_println+0x28>)
 8001916:	b141      	cbz	r1, 800192a <test_println+0x1a>
 8001918:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800191a:	6828      	ldr	r0, [r5, #0]
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001922:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001926:	2900      	cmp	r1, #0
 8001928:	d1f7      	bne.n	800191a <test_println+0xa>
 * @param[in] msgp      the message
 */
void test_println(const char *msgp) {

  test_print(msgp);
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 800192a:	6828      	ldr	r0, [r5, #0]
 800192c:	4903      	ldr	r1, [pc, #12]	; (800193c <test_println+0x2c>)
 800192e:	6803      	ldr	r3, [r0, #0]
 8001930:	2202      	movs	r2, #2
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4798      	blx	r3
 8001936:	bd38      	pop	{r3, r4, r5, pc}
 8001938:	200014bc 	.word	0x200014bc
 800193c:	0800abbc 	.word	0x0800abbc

08001940 <test_print>:
/**
 * @brief   Prints a line without final end-of-line.
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {
 8001940:	b538      	push	{r3, r4, r5, lr}

  while (*msgp)
 8001942:	7801      	ldrb	r1, [r0, #0]
 8001944:	b149      	cbz	r1, 800195a <test_print+0x1a>
 8001946:	4d05      	ldr	r5, [pc, #20]	; (800195c <test_print+0x1c>)
 8001948:	4604      	mov	r4, r0
    chSequentialStreamPut(chp, *msgp++);
 800194a:	6828      	ldr	r0, [r5, #0]
 800194c:	6803      	ldr	r3, [r0, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8001952:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001956:	2900      	cmp	r1, #0
 8001958:	d1f7      	bne.n	800194a <test_print+0xa>
 800195a:	bd38      	pop	{r3, r4, r5, pc}
 800195c:	200014bc 	.word	0x200014bc

08001960 <test_printn>:
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	b085      	sub	sp, #20
  char buf[16], *p;

  if (!n)
 8001964:	2800      	cmp	r0, #0
 8001966:	d037      	beq.n	80019d8 <test_printn+0x78>
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001968:	f10d 0501 	add.w	r5, sp, #1
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 800196c:	f64c 46cd 	movw	r6, #52429	; 0xcccd
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 8001970:	462b      	mov	r3, r5
  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
 8001972:	f6cc 46cc 	movt	r6, #52428	; 0xcccc
 8001976:	fba6 1200 	umull	r1, r2, r6, r0
 800197a:	08d4      	lsrs	r4, r2, #3
 800197c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001980:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8001984:	3030      	adds	r0, #48	; 0x30
 8001986:	b2c1      	uxtb	r1, r0

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8001988:	4620      	mov	r0, r4
      *p++ = (n % 10) + '0', n /= 10;
 800198a:	f803 1c01 	strb.w	r1, [r3, #-1]
/**
 * @brief   Prints a decimal unsigned number.
 *
 * @param[in] n         the number to be printed
 */
void test_printn(uint32_t n) {
 800198e:	461c      	mov	r4, r3
 8001990:	3301      	adds	r3, #1

  if (!n)
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
 8001992:	2800      	cmp	r0, #0
 8001994:	d1ef      	bne.n	8001976 <test_printn+0x16>
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 8001996:	466a      	mov	r2, sp
 8001998:	4294      	cmp	r4, r2
 800199a:	d91b      	bls.n	80019d4 <test_printn+0x74>
 800199c:	1b60      	subs	r0, r4, r5
 800199e:	07c0      	lsls	r0, r0, #31
 80019a0:	4f11      	ldr	r7, [pc, #68]	; (80019e8 <test_printn+0x88>)
 80019a2:	d511      	bpl.n	80019c8 <test_printn+0x68>
      chSequentialStreamPut(chp, *--p);
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	6803      	ldr	r3, [r0, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4790      	blx	r2
 80019ac:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80019b0:	3c01      	subs	r4, #1
 80019b2:	e009      	b.n	80019c8 <test_printn+0x68>
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80019ba:	6803      	ldr	r3, [r0, #0]
 80019bc:	1e66      	subs	r6, r4, #1
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4790      	blx	r2
 80019c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80019c6:	3c02      	subs	r4, #2
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	6803      	ldr	r3, [r0, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	4790      	blx	r2
    chSequentialStreamPut(chp, '0');
  else {
    p = buf;
    while (n)
      *p++ = (n % 10) + '0', n /= 10;
    while (p > buf)
 80019d0:	42ac      	cmp	r4, r5
 80019d2:	d1ef      	bne.n	80019b4 <test_printn+0x54>
      chSequentialStreamPut(chp, *--p);
  }
}
 80019d4:	b005      	add	sp, #20
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
void test_printn(uint32_t n) {
  char buf[16], *p;

  if (!n)
    chSequentialStreamPut(chp, '0');
 80019d8:	4803      	ldr	r0, [pc, #12]	; (80019e8 <test_printn+0x88>)
 80019da:	2130      	movs	r1, #48	; 0x30
 80019dc:	6800      	ldr	r0, [r0, #0]
 80019de:	6803      	ldr	r3, [r0, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	4790      	blx	r2
 80019e4:	e7f6      	b.n	80019d4 <test_printn+0x74>
 80019e6:	bf00      	nop
 80019e8:	200014bc 	.word	0x200014bc
 80019ec:	f3af 8000 	nop.w

080019f0 <print_line.6617>:
    tcp->teardown();

  test_wait_threads();
}

static void print_line(void) {
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4d0b      	ldr	r5, [pc, #44]	; (8001a20 <print_line.6617+0x30>)
 80019f4:	244c      	movs	r4, #76	; 0x4c
  unsigned i;

  for (i = 0; i < 76; i++)
    chSequentialStreamPut(chp, '-');
 80019f6:	6828      	ldr	r0, [r5, #0]
 80019f8:	212d      	movs	r1, #45	; 0x2d
 80019fa:	6803      	ldr	r3, [r0, #0]
 80019fc:	3c01      	subs	r4, #1
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	4790      	blx	r2
 8001a02:	6828      	ldr	r0, [r5, #0]
 8001a04:	6801      	ldr	r1, [r0, #0]
 8001a06:	688b      	ldr	r3, [r1, #8]
 8001a08:	212d      	movs	r1, #45	; 0x2d
 8001a0a:	4798      	blx	r3
}

static void print_line(void) {
  unsigned i;

  for (i = 0; i < 76; i++)
 8001a0c:	3c01      	subs	r4, #1
 8001a0e:	d1f2      	bne.n	80019f6 <print_line.6617+0x6>
    chSequentialStreamPut(chp, '-');
  chSequentialStreamWrite(chp, (const uint8_t *)"\r\n", 2);
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <print_line.6617+0x30>)
 8001a12:	4904      	ldr	r1, [pc, #16]	; (8001a24 <print_line.6617+0x34>)
 8001a14:	6800      	ldr	r0, [r0, #0]
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4798      	blx	r3
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
 8001a20:	200014bc 	.word	0x200014bc
 8001a24:	0800abbc 	.word	0x0800abbc
 8001a28:	f3af 8000 	nop.w
 8001a2c:	f3af 8000 	nop.w

08001a30 <chPoolAlloc>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @api
 */
void *chPoolAlloc(memory_pool_t *mp) {
 8001a30:	b508      	push	{r3, lr}
 8001a32:	2220      	movs	r2, #32
 8001a34:	4603      	mov	r3, r0
 8001a36:	f382 8811 	msr	BASEPRI, r2
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
 8001a3a:	6800      	ldr	r0, [r0, #0]
 8001a3c:	b128      	cbz	r0, 8001a4a <chPoolAlloc+0x1a>
    mp->mp_next = mp->mp_next->ph_next;
 8001a3e:	6802      	ldr	r2, [r0, #0]
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  objp = chPoolAllocI(mp);
  chSysUnlock();
  return objp;
}
 8001a48:	bd08      	pop	{r3, pc}
  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  if ((objp = mp->mp_next) != NULL)
    mp->mp_next = mp->mp_next->ph_next;
  else if (mp->mp_provider != NULL)
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	d0f8      	beq.n	8001a42 <chPoolAlloc+0x12>
    objp = mp->mp_provider(mp->mp_object_size);
 8001a50:	6858      	ldr	r0, [r3, #4]
 8001a52:	4788      	blx	r1
 8001a54:	e7f5      	b.n	8001a42 <chPoolAlloc+0x12>
 8001a56:	bf00      	nop
 8001a58:	f3af 8000 	nop.w
 8001a5c:	f3af 8000 	nop.w

08001a60 <chEvtUnregister>:
 8001a60:	2320      	movs	r3, #32
 8001a62:	f383 8811 	msr	BASEPRI, r3
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
 8001a66:	4602      	mov	r2, r0
 8001a68:	e000      	b.n	8001a6c <chEvtUnregister+0xc>
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
    if (p->el_next == elp) {
 8001a6a:	461a      	mov	r2, r3

  chDbgCheck((esp != NULL) && (elp != NULL));

  p = (event_listener_t *)esp;
  chSysLock();
  while (p->el_next != (event_listener_t *)esp) {
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	4283      	cmp	r3, r0
 8001a70:	d003      	beq.n	8001a7a <chEvtUnregister+0x1a>
    if (p->el_next == elp) {
 8001a72:	428b      	cmp	r3, r1
 8001a74:	d1f9      	bne.n	8001a6a <chEvtUnregister+0xa>
      p->el_next = elp->el_next;
 8001a76:	6808      	ldr	r0, [r1, #0]
 8001a78:	6010      	str	r0, [r2, #0]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f381 8811 	msr	BASEPRI, r1
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	f3af 8000 	nop.w
 8001a8c:	f3af 8000 	nop.w

08001a90 <chThdYield>:
 * @details Yields the CPU control to the next thread in the ready list with
 *          equal priority, if any.
 *
 * @api
 */
void chThdYield(void) {
 8001a90:	b538      	push	{r3, r4, r5, lr}
 8001a92:	2320      	movs	r3, #32
 8001a94:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <chThdYield+0x48>)
 8001a9a:	6810      	ldr	r0, [r2, #0]
 8001a9c:	6991      	ldr	r1, [r2, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8001a9e:	6883      	ldr	r3, [r0, #8]
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.r_queue) >= currp->p_prio;
 8001aa0:	688c      	ldr	r4, [r1, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS())
 8001aa2:	42a3      	cmp	r3, r4
 8001aa4:	d203      	bcs.n	8001aae <chThdYield+0x1e>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f380 8811 	msr	BASEPRI, r0
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001aae:	6803      	ldr	r3, [r0, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001ab0:	2501      	movs	r5, #1
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001ab6:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ab8:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001aba:	7705      	strb	r5, [r0, #28]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001abc:	770a      	strb	r2, [r1, #28]
 8001abe:	e000      	b.n	8001ac2 <chThdYield+0x32>
 8001ac0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4294      	cmp	r4, r2
 8001ac6:	d9fb      	bls.n	8001ac0 <chThdYield+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001ac8:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001aca:	600b      	str	r3, [r1, #0]
  tp->p_prev = cp->p_prev;
 8001acc:	604a      	str	r2, [r1, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001ace:	6011      	str	r1, [r2, #0]
 8001ad0:	6059      	str	r1, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001ad2:	f7fe fe0d 	bl	80006f0 <_port_switch>
 8001ad6:	e7e6      	b.n	8001aa6 <chThdYield+0x16>
 8001ad8:	20001eb8 	.word	0x20001eb8
 8001adc:	f3af 8000 	nop.w

08001ae0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001ae0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001ae4:	3924      	subs	r1, #36	; 0x24
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001ae6:	f641 65b8 	movw	r5, #7864	; 0x1eb8

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001aea:	1847      	adds	r7, r0, r1
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001aec:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001af0:	f8d5 c014 	ldr.w	ip, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001af4:	60c7      	str	r7, [r0, #12]
 8001af6:	5043      	str	r3, [r0, r1]
 8001af8:	9b06      	ldr	r3, [sp, #24]
 8001afa:	f240 7101 	movw	r1, #1793	; 0x701
 8001afe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	6239      	str	r1, [r7, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001b06:	2600      	movs	r6, #0
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001b08:	4690      	mov	r8, r2
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001b0a:	f100 0924 	add.w	r9, r0, #36	; 0x24
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001b0e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001b12:	2302      	movs	r3, #2
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001b14:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b16:	6105      	str	r5, [r0, #16]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001b18:	f8c0 8008 	str.w	r8, [r0, #8]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b1c:	f8c0 c014 	str.w	ip, [r0, #20]
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001b20:	4604      	mov	r4, r0
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b22:	6168      	str	r0, [r5, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001b24:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001b26:	f8cc 0010 	str.w	r0, [ip, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001b2a:	7746      	strb	r6, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001b2c:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 8001b30:	6386      	str	r6, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001b32:	6346      	str	r6, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001b34:	7781      	strb	r1, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001b36:	6186      	str	r6, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001b38:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001b3c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001b3e:	6282      	str	r2, [r0, #40]	; 0x28
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
  return _thread_init(tp, prio);
}
 8001b40:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	f3af 8000 	nop.w
 8001b4c:	f3af 8000 	nop.w

08001b50 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <chSchDoRescheduleAhead+0x34>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001b52:	b430      	push	{r4, r5}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001b54:	6810      	ldr	r0, [r2, #0]
  thread_t *otp, *cp;

  otp = currp;
 8001b56:	6991      	ldr	r1, [r2, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001b58:	6803      	ldr	r3, [r0, #0]
 8001b5a:	688c      	ldr	r4, [r1, #8]
 8001b5c:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001b5e:	2501      	movs	r5, #1
 8001b60:	6013      	str	r3, [r2, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001b62:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8001b64:	2200      	movs	r2, #0
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001b66:	7705      	strb	r5, [r0, #28]

  otp->p_state = CH_STATE_READY;
 8001b68:	770a      	strb	r2, [r1, #28]
 8001b6a:	e000      	b.n	8001b6e <chSchDoRescheduleAhead+0x1e>
 8001b6c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	42a2      	cmp	r2, r4
 8001b72:	d8fb      	bhi.n	8001b6c <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8001b74:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8001b76:	600b      	str	r3, [r1, #0]
  otp->p_prev = cp->p_prev;
 8001b78:	604a      	str	r2, [r1, #4]
  otp->p_prev->p_next = cp->p_prev = otp;
 8001b7a:	6011      	str	r1, [r2, #0]
 8001b7c:	6059      	str	r1, [r3, #4]

  chSysSwitch(currp, otp);
}
 8001b7e:	bc30      	pop	{r4, r5}
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8001b80:	f7fe bdb6 	b.w	80006f0 <_port_switch>
 8001b84:	20001eb8 	.word	0x20001eb8
 8001b88:	f3af 8000 	nop.w
 8001b8c:	f3af 8000 	nop.w

08001b90 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <chSchRescheduleS+0x14>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	6998      	ldr	r0, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI())
 8001b96:	6891      	ldr	r1, [r2, #8]
 8001b98:	6883      	ldr	r3, [r0, #8]
 8001b9a:	4299      	cmp	r1, r3
 8001b9c:	d800      	bhi.n	8001ba0 <chSchRescheduleS+0x10>
 8001b9e:	4770      	bx	lr
    chSchDoRescheduleAhead();
 8001ba0:	f7ff bfd6 	b.w	8001b50 <chSchDoRescheduleAhead>
 8001ba4:	20001eb8 	.word	0x20001eb8
 8001ba8:	f3af 8000 	nop.w
 8001bac:	f3af 8000 	nop.w

08001bb0 <chThdSetPriority.4319>:
 * @param[in] newprio   the new priority level of the running thread
 * @return              The old priority level.
 *
 * @api
 */
tprio_t chThdSetPriority(tprio_t newprio) {
 8001bb0:	b510      	push	{r4, lr}
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck(newprio <= HIGHPRIO);

  chSysLock();
#if CH_CFG_USE_MUTEXES
  oldprio = currp->p_realprio;
 8001bb8:	4908      	ldr	r1, [pc, #32]	; (8001bdc <chThdSetPriority.4319+0x2c>)
 8001bba:	698a      	ldr	r2, [r1, #24]
 8001bbc:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if ((currp->p_prio == currp->p_realprio) || (newprio > currp->p_prio))
 8001bbe:	6893      	ldr	r3, [r2, #8]
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d001      	beq.n	8001bc8 <chThdSetPriority.4319+0x18>
 8001bc4:	4283      	cmp	r3, r0
 8001bc6:	d200      	bcs.n	8001bca <chThdSetPriority.4319+0x1a>
    currp->p_prio = newprio;
 8001bc8:	6090      	str	r0, [r2, #8]
  currp->p_realprio = newprio;
 8001bca:	63d0      	str	r0, [r2, #60]	; 0x3c
#else
  oldprio = currp->p_prio;
  currp->p_prio = newprio;
#endif
  chSchRescheduleS();
 8001bcc:	f7ff ffe0 	bl	8001b90 <chSchRescheduleS>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return oldprio;
}
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	20001eb8 	.word	0x20001eb8

08001be0 <thd3_execute.6824>:
 * to verify that the priority change happens as expected.<br>
 * If the @p CH_CFG_USE_MUTEXES option is enabled then the priority changes are
 * also tested under priority inheritance boosted priority state.
 */

static void thd3_execute(void) {
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001be2:	4e51      	ldr	r6, [pc, #324]	; (8001d28 <thd3_execute.6824+0x148>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001be4:	69b3      	ldr	r3, [r6, #24]
 8001be6:	689c      	ldr	r4, [r3, #8]
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001be8:	1c65      	adds	r5, r4, #1
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff ffe0 	bl	8001bb0 <chThdSetPriority.4319>
  test_assert(1, p1 == prio,
 8001bf0:	ebb0 0c04 	subs.w	ip, r0, r4
 8001bf4:	f1dc 0100 	rsbs	r1, ip, #0
 8001bf8:	eb51 010c 	adcs.w	r1, r1, ip

static void thd3_execute(void) {
  tprio_t prio, p1;

  prio = chThdGetPriorityX();
  p1 = chThdSetPriority(prio + 1);
 8001bfc:	4607      	mov	r7, r0
  test_assert(1, p1 == prio,
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff fe3e 	bl	8001880 <_test_assert>
 8001c04:	b100      	cbz	r0, 8001c08 <thd3_execute.6824+0x28>
 8001c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c08:	69b2      	ldr	r2, [r6, #24]
              "unexpected returned priority level");
  test_assert(2, chThdGetPriorityX() == prio + 1,
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	6893      	ldr	r3, [r2, #8]
 8001c0e:	ebb5 0e03 	subs.w	lr, r5, r3
 8001c12:	f1de 0100 	rsbs	r1, lr, #0
 8001c16:	eb51 010e 	adcs.w	r1, r1, lr
 8001c1a:	f7ff fe31 	bl	8001880 <_test_assert>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d1f1      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected priority level");
  p1 = chThdSetPriority(p1);
 8001c22:	4638      	mov	r0, r7
 8001c24:	f7ff ffc4 	bl	8001bb0 <chThdSetPriority.4319>
  test_assert(3, p1 == prio + 1,
 8001c28:	1a28      	subs	r0, r5, r0
 8001c2a:	4242      	negs	r2, r0
 8001c2c:	eb52 0100 	adcs.w	r1, r2, r0
 8001c30:	2003      	movs	r0, #3
 8001c32:	f7ff fe25 	bl	8001880 <_test_assert>
 8001c36:	2800      	cmp	r0, #0
 8001c38:	d1e5      	bne.n	8001c06 <thd3_execute.6824+0x26>
 8001c3a:	69b3      	ldr	r3, [r6, #24]
              "unexpected returned priority level");
  test_assert(4, chThdGetPriorityX() == prio,
 8001c3c:	2004      	movs	r0, #4
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	1a62      	subs	r2, r4, r1
 8001c42:	4253      	negs	r3, r2
 8001c44:	eb53 0102 	adcs.w	r1, r3, r2
 8001c48:	f7ff fe1a 	bl	8001880 <_test_assert>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d1da      	bne.n	8001c06 <thd3_execute.6824+0x26>
 8001c50:	2720      	movs	r7, #32
 8001c52:	f387 8811 	msr	BASEPRI, r7
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001c56:	69b1      	ldr	r1, [r6, #24]
              "unexpected priority level");

#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  /* Simulates a priority boost situation (p_prio > p_realprio).*/
  chSysLock();
  chThdGetSelfX()->p_prio += 2;
 8001c58:	688a      	ldr	r2, [r1, #8]
 8001c5a:	1c93      	adds	r3, r2, #2
 8001c5c:	608b      	str	r3, [r1, #8]
 8001c5e:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8001c62:	69b0      	ldr	r0, [r6, #24]
  chSysUnlock();
  test_assert(5, chThdGetPriorityX() == prio + 2,
 8001c64:	1ca7      	adds	r7, r4, #2
 8001c66:	6881      	ldr	r1, [r0, #8]
 8001c68:	2005      	movs	r0, #5
 8001c6a:	1a7a      	subs	r2, r7, r1
 8001c6c:	4253      	negs	r3, r2
 8001c6e:	eb53 0102 	adcs.w	r1, r3, r2
 8001c72:	f7ff fe05 	bl	8001880 <_test_assert>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d1c5      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected priority level");

  /* Tries to raise but below the boost level. */
  p1 = chThdSetPriority(prio + 1);
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f7ff ff98 	bl	8001bb0 <chThdSetPriority.4319>
  test_assert(6, p1 == prio,
 8001c80:	ebb0 0c04 	subs.w	ip, r0, r4
 8001c84:	f1dc 0000 	rsbs	r0, ip, #0
 8001c88:	eb50 010c 	adcs.w	r1, r0, ip
 8001c8c:	2006      	movs	r0, #6
 8001c8e:	f7ff fdf7 	bl	8001880 <_test_assert>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d1b7      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected returned priority level");
  test_assert(7, chThdGetSelfX()->p_prio == prio + 2,
 8001c96:	69b1      	ldr	r1, [r6, #24]
 8001c98:	2007      	movs	r0, #7
 8001c9a:	688a      	ldr	r2, [r1, #8]
 8001c9c:	ebb7 0e02 	subs.w	lr, r7, r2
 8001ca0:	f1de 0300 	rsbs	r3, lr, #0
 8001ca4:	eb53 010e 	adcs.w	r1, r3, lr
 8001ca8:	f7ff fdea 	bl	8001880 <_test_assert>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d1aa      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected priority level");
  test_assert(8, chThdGetSelfX()->p_realprio == prio + 1,
 8001cb0:	69b1      	ldr	r1, [r6, #24]
 8001cb2:	2008      	movs	r0, #8
 8001cb4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001cb6:	1aab      	subs	r3, r5, r2
 8001cb8:	4259      	negs	r1, r3
 8001cba:	4159      	adcs	r1, r3
 8001cbc:	f7ff fde0 	bl	8001880 <_test_assert>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d1a0      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected returned real priority level");

  /* Tries to raise above the boost level. */
  p1 = chThdSetPriority(prio + 3);
 8001cc4:	1ce7      	adds	r7, r4, #3
 8001cc6:	4638      	mov	r0, r7
 8001cc8:	f7ff ff72 	bl	8001bb0 <chThdSetPriority.4319>
  test_assert(9, p1 == prio + 1,
 8001ccc:	1a28      	subs	r0, r5, r0
 8001cce:	4242      	negs	r2, r0
 8001cd0:	eb52 0100 	adcs.w	r1, r2, r0
 8001cd4:	2009      	movs	r0, #9
 8001cd6:	f7ff fdd3 	bl	8001880 <_test_assert>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d193      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected returned priority level");
  test_assert(10, chThdGetSelfX()->p_prio == prio + 3,
 8001cde:	69b3      	ldr	r3, [r6, #24]
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	6899      	ldr	r1, [r3, #8]
 8001ce4:	ebb7 0c01 	subs.w	ip, r7, r1
 8001ce8:	f1dc 0200 	rsbs	r2, ip, #0
 8001cec:	eb52 010c 	adcs.w	r1, r2, ip
 8001cf0:	f7ff fdc6 	bl	8001880 <_test_assert>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d186      	bne.n	8001c06 <thd3_execute.6824+0x26>
              "unexpected priority level");
  test_assert(11, chThdGetSelfX()->p_realprio == prio + 3,
 8001cf8:	69b3      	ldr	r3, [r6, #24]
 8001cfa:	200b      	movs	r0, #11
 8001cfc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001cfe:	ebb7 0e01 	subs.w	lr, r7, r1
 8001d02:	f1de 0200 	rsbs	r2, lr, #0
 8001d06:	eb52 010e 	adcs.w	r1, r2, lr
 8001d0a:	f7ff fdb9 	bl	8001880 <_test_assert>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	f47f af79 	bne.w	8001c06 <thd3_execute.6824+0x26>
 8001d14:	2320      	movs	r3, #32
 8001d16:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d1a:	69b2      	ldr	r2, [r6, #24]
              "unexpected real priority level");

  chSysLock();
  chThdGetSelfX()->p_prio = prio;
 8001d1c:	6094      	str	r4, [r2, #8]
  chThdGetSelfX()->p_realprio = prio;
 8001d1e:	63d4      	str	r4, [r2, #60]	; 0x3c
 8001d20:	f380 8811 	msr	BASEPRI, r0
 8001d24:	e76f      	b.n	8001c06 <thd3_execute.6824+0x26>
 8001d26:	bf00      	nop
 8001d28:	20001eb8 	.word	0x20001eb8
 8001d2c:	f3af 8000 	nop.w

08001d30 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001d30:	b4f0      	push	{r4, r5, r6, r7}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d32:	4f14      	ldr	r7, [pc, #80]	; (8001d84 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001d34:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d36:	69be      	ldr	r6, [r7, #24]
 8001d38:	6885      	ldr	r5, [r0, #8]
 8001d3a:	68b0      	ldr	r0, [r6, #8]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d3c:	2300      	movs	r3, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d3e:	4285      	cmp	r5, r0

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8001d40:	6221      	str	r1, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8001d42:	d80c      	bhi.n	8001d5e <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d44:	7723      	strb	r3, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001d46:	4639      	mov	r1, r7
  do {
    cp = cp->p_next;
 8001d48:	6809      	ldr	r1, [r1, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001d4a:	688a      	ldr	r2, [r1, #8]
 8001d4c:	4295      	cmp	r5, r2
 8001d4e:	d9fb      	bls.n	8001d48 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d50:	6848      	ldr	r0, [r1, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001d52:	6021      	str	r1, [r4, #0]
  tp->p_prev = cp->p_prev;
 8001d54:	6060      	str	r0, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001d56:	6004      	str	r4, [r0, #0]
 8001d58:	604c      	str	r4, [r1, #4]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001d5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d5c:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001d5e:	7733      	strb	r3, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001d60:	4639      	mov	r1, r7
  do {
    cp = cp->p_next;
 8001d62:	6809      	ldr	r1, [r1, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001d64:	688a      	ldr	r2, [r1, #8]
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d9fb      	bls.n	8001d62 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001d6a:	6848      	ldr	r0, [r1, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001d6c:	6031      	str	r1, [r6, #0]
  tp->p_prev = cp->p_prev;
 8001d6e:	6070      	str	r0, [r6, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8001d70:	6006      	str	r6, [r0, #0]
 8001d72:	604e      	str	r6, [r1, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001d74:	2301      	movs	r3, #1
    chSysSwitch(ntp, otp);
 8001d76:	4620      	mov	r0, r4
 8001d78:	4631      	mov	r1, r6
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001d7a:	7723      	strb	r3, [r4, #28]
  if (ntp->p_prio <= currp->p_prio) {
    chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 8001d7c:	61bc      	str	r4, [r7, #24]
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001d80:	f7fe bcb6 	b.w	80006f0 <_port_switch>
 8001d84:	20001eb8 	.word	0x20001eb8
 8001d88:	f3af 8000 	nop.w
 8001d8c:	f3af 8000 	nop.w

08001d90 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001d90:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <chMtxUnlock+0x58>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001d94:	4604      	mov	r4, r0
 8001d96:	2120      	movs	r1, #32
  thread_t *ctp = currp;
 8001d98:	6998      	ldr	r0, [r3, #24]
 8001d9a:	f381 8811 	msr	BASEPRI, r1
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8001d9e:	6825      	ldr	r5, [r4, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001da0:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001da2:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001da4:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001da6:	d01b      	beq.n	8001de0 <chMtxUnlock+0x50>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001da8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001daa:	b14b      	cbz	r3, 8001dc0 <chMtxUnlock+0x30>
 8001dac:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d003      	beq.n	8001dba <chMtxUnlock+0x2a>
 8001db2:	6892      	ldr	r2, [r2, #8]
 8001db4:	4291      	cmp	r1, r2
 8001db6:	bf38      	it	cc
 8001db8:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8001dba:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f5      	bne.n	8001dac <chMtxUnlock+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001dc0:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001dc2:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001dc4:	6081      	str	r1, [r0, #8]
 8001dc6:	6023      	str	r3, [r4, #0]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchWakeupS(tp, MSG_OK);
 8001dc8:	4628      	mov	r0, r5
 8001dca:	605c      	str	r4, [r3, #4]
 8001dcc:	2100      	movs	r1, #0
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001dce:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8001dd0:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 8001dd2:	63ac      	str	r4, [r5, #56]	; 0x38
      chSchWakeupS(tp, MSG_OK);
 8001dd4:	f7ff ffac 	bl	8001d30 <chSchWakeupS>
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f380 8811 	msr	BASEPRI, r0
 8001dde:	bd38      	pop	{r3, r4, r5, pc}
    }
    else
      mp->m_owner = NULL;
 8001de0:	2200      	movs	r2, #0
 8001de2:	60a2      	str	r2, [r4, #8]
 8001de4:	e7f8      	b.n	8001dd8 <chMtxUnlock+0x48>
 8001de6:	bf00      	nop
 8001de8:	20001eb8 	.word	0x20001eb8
 8001dec:	f3af 8000 	nop.w

08001df0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8001df0:	b508      	push	{r3, lr}
 8001df2:	2220      	movs	r2, #32
 8001df4:	4603      	mov	r3, r0
 8001df6:	f382 8811 	msr	BASEPRI, r2
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sp->s_cnt <= 0)
 8001dfa:	6880      	ldr	r0, [r0, #8]
 8001dfc:	1c41      	adds	r1, r0, #1
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	6099      	str	r1, [r3, #8]
 8001e02:	dd03      	ble.n	8001e0c <chSemSignal+0x1c>
 8001e04:	2300      	movs	r3, #0
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	bd08      	pop	{r3, pc}
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001e0c:	6818      	ldr	r0, [r3, #0]
    chSchWakeupS(queue_fifo_remove(&sp->s_queue), MSG_OK);
 8001e0e:	2100      	movs	r1, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001e10:	6802      	ldr	r2, [r0, #0]
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	6053      	str	r3, [r2, #4]
 8001e16:	f7ff ff8b 	bl	8001d30 <chSchWakeupS>
 8001e1a:	e7f3      	b.n	8001e04 <chSemSignal+0x14>
 8001e1c:	f3af 8000 	nop.w

08001e20 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8001e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e24:	4604      	mov	r4, r0
 8001e26:	2520      	movs	r5, #32
 8001e28:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e2c:	f641 66b8 	movw	r6, #7864	; 0x1eb8

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e30:	f1a1 0824 	sub.w	r8, r1, #36	; 0x24
 8001e34:	eb00 0708 	add.w	r7, r0, r8
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e38:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8001e3c:	f8d6 c014 	ldr.w	ip, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e40:	60c7      	str	r7, [r0, #12]
 8001e42:	f840 3008 	str.w	r3, [r0, r8]
 8001e46:	9b08      	ldr	r3, [sp, #32]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001e48:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	f240 7301 	movw	r3, #1793	; 0x701
 8001e50:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e54:	623b      	str	r3, [r7, #32]
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES
  queue_init(&tp->p_msgqueue);
 8001e56:	f100 0e28 	add.w	lr, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001e5a:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  list_init(&tp->p_waiting);
 8001e5c:	f100 0924 	add.w	r9, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001e60:	2302      	movs	r3, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
 8001e62:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001e64:	2201      	movs	r2, #1
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e66:	6106      	str	r6, [r0, #16]
 8001e68:	f8c0 c014 	str.w	ip, [r0, #20]
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001e6c:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e6e:	6170      	str	r0, [r6, #20]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001e70:	7703      	strb	r3, [r0, #28]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001e72:	f8cc 0010 	str.w	r0, [ip, #16]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001e76:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001e78:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS
  tp->p_epending = 0;
 8001e7a:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING
  tp->p_time = 0;
#endif
#if CH_CFG_USE_DYNAMIC
  tp->p_refs = 1;
 8001e7c:	7782      	strb	r2, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY
  tp->p_name = NULL;
 8001e7e:	6185      	str	r5, [r0, #24]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001e80:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8001e84:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
 8001e88:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  chSysLock();
  chSchWakeupS(tp = chThdCreateI(wsp, size, prio, pf, arg), MSG_OK);
 8001e8c:	f7ff ff50 	bl	8001d30 <chSchWakeupS>
 8001e90:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  return tp;
}
 8001e94:	4620      	mov	r0, r4
 8001e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w

08001ea0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001ea0:	f641 63b8 	movw	r3, #7864	; 0x1eb8
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001ea4:	b410      	push	{r4}
  thread_t *otp;

  chDbgCheckClassS();

  (otp = currp)->p_state = newstate;
 8001ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6999      	ldr	r1, [r3, #24]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8001eae:	6814      	ldr	r4, [r2, #0]
 8001eb0:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	7710      	strb	r0, [r2, #28]
  chSysSwitch(currp, otp);
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	6063      	str	r3, [r4, #4]
 8001eba:	601c      	str	r4, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001ebc:	619a      	str	r2, [r3, #24]
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
}
 8001ebe:	bc10      	pop	{r4}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001ec0:	f7fe bc16 	b.w	80006f0 <_port_switch>
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	f3af 8000 	nop.w
 8001ecc:	f3af 8000 	nop.w

08001ed0 <chMsgWait>:
 *
 * @return              A reference to the thread carrying the message.
 *
 * @api
 */
thread_t *chMsgWait(void) {
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
 8001ed8:	4c0b      	ldr	r4, [pc, #44]	; (8001f08 <chMsgWait+0x38>)
 8001eda:	69a2      	ldr	r2, [r4, #24]
 */
static inline bool chMsgIsPendingI(thread_t *tp) {

  chDbgCheckClassI();

  return (bool)(tp->p_msgqueue.p_next != (thread_t *)&tp->p_msgqueue);
 8001edc:	4613      	mov	r3, r2
 8001ede:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001ee2:	4298      	cmp	r0, r3
 8001ee4:	d008      	beq.n	8001ef8 <chMsgWait+0x28>
 8001ee6:	6801      	ldr	r1, [r0, #0]
 8001ee8:	6291      	str	r1, [r2, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTMSG);
  tp = queue_fifo_remove(&currp->p_msgqueue);
  tp->p_state = CH_STATE_SNDMSG;
 8001eea:	220d      	movs	r2, #13
 8001eec:	604b      	str	r3, [r1, #4]
 8001eee:	7702      	strb	r2, [r0, #28]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
  return tp;
}
 8001ef6:	bd10      	pop	{r4, pc}
thread_t *chMsgWait(void) {
  thread_t *tp;

  chSysLock();
  if (!chMsgIsPendingI(currp))
    chSchGoSleepS(CH_STATE_WTMSG);
 8001ef8:	200e      	movs	r0, #14
 8001efa:	f7ff ffd1 	bl	8001ea0 <chSchGoSleepS>
 8001efe:	69a2      	ldr	r2, [r4, #24]
 8001f00:	4613      	mov	r3, r2
 8001f02:	f853 0f28 	ldr.w	r0, [r3, #40]!
 8001f06:	e7ee      	b.n	8001ee6 <chMsgWait+0x16>
 8001f08:	20001eb8 	.word	0x20001eb8
 8001f0c:	f3af 8000 	nop.w

08001f10 <chSemWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemWait(semaphore_t *sp) {
 8001f10:	b510      	push	{r4, lr}
 8001f12:	4603      	mov	r3, r0
 8001f14:	2220      	movs	r2, #32
 8001f16:	f382 8811 	msr	BASEPRI, r2
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8001f1a:	6880      	ldr	r0, [r0, #8]
 8001f1c:	1e41      	subs	r1, r0, #1
 8001f1e:	2900      	cmp	r1, #0
 8001f20:	6099      	str	r1, [r3, #8]
 8001f22:	db04      	blt.n	8001f2e <chSemWait+0x1e>
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
    return currp->p_u.rdymsg;
  }
  return MSG_OK;
 8001f24:	2000      	movs	r0, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  msg = chSemWaitS(sp);
  chSysUnlock();
  return msg;
}
 8001f2c:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001f2e:	4c07      	ldr	r4, [pc, #28]	; (8001f4c <chSemWait+0x3c>)
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001f30:	2005      	movs	r0, #5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    currp->p_u.wtobjp = sp;
 8001f32:	69a2      	ldr	r2, [r4, #24]
 8001f34:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001f36:	6859      	ldr	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8001f38:	6013      	str	r3, [r2, #0]
  tp->p_prev = tqp->p_prev;
 8001f3a:	6051      	str	r1, [r2, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	600a      	str	r2, [r1, #0]
    sem_insert(currp, &sp->s_queue);
    chSchGoSleepS(CH_STATE_WTSEM);
 8001f40:	f7ff ffae 	bl	8001ea0 <chSchGoSleepS>
    return currp->p_u.rdymsg;
 8001f44:	69a3      	ldr	r3, [r4, #24]
 8001f46:	6a18      	ldr	r0, [r3, #32]
 8001f48:	e7ed      	b.n	8001f26 <chSemWait+0x16>
 8001f4a:	bf00      	nop
 8001f4c:	20001eb8 	.word	0x20001eb8

08001f50 <thread1.7054>:
static void sem1_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread1(void *p) {
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0

  chSemWait(&sem1);
 8001f54:	f640 4048 	movw	r0, #3144	; 0xc48
 8001f58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f5c:	f7ff ffd8 	bl	8001f10 <chSemWait>
  test_emit_token(*(char *)p);
 8001f60:	7820      	ldrb	r0, [r4, #0]
 8001f62:	f7ff fca5 	bl	80018b0 <test_emit_token>
  return 0;
}
 8001f66:	2000      	movs	r0, #0
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	bf00      	nop
 8001f6c:	f3af 8000 	nop.w

08001f70 <thread3.7057>:
static void sem3_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread3(void *p) {
 8001f70:	b510      	push	{r4, lr}

  (void)p;
  chSemWait(&sem1);
 8001f72:	f640 4448 	movw	r4, #3144	; 0xc48
 8001f76:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7ff ffc8 	bl	8001f10 <chSemWait>
  chSemSignal(&sem1);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff ff35 	bl	8001df0 <chSemSignal>
  return 0;
}
 8001f86:	2000      	movs	r0, #0
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	bf00      	nop
 8001f8c:	f3af 8000 	nop.w

08001f90 <_port_irq_epilogue>:
 8001f90:	2320      	movs	r3, #32
 8001f92:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0) {
 8001f96:	f44f 406d 	mov.w	r0, #60672	; 0xed00
 8001f9a:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8001f9e:	6841      	ldr	r1, [r0, #4]
 8001fa0:	f411 6200 	ands.w	r2, r1, #2048	; 0x800
 8001fa4:	d102      	bne.n	8001fac <_port_irq_epilogue+0x1c>
 8001fa6:	f382 8811 	msr	BASEPRI, r2
 8001faa:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001fac:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8001fb0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001fb4:	f843 0c04 	str.w	r0, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8001fb8:	f1a3 0120 	sub.w	r1, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001fbc:	f381 8809 	msr	PSP, r1
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_port_irq_epilogue+0x48>)
 8001fc2:	6810      	ldr	r0, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8001fc4:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8001fc6:	6881      	ldr	r1, [r0, #8]
 8001fc8:	6890      	ldr	r0, [r2, #8]
 8001fca:	4281      	cmp	r1, r0
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8001fcc:	bf8c      	ite	hi
 8001fce:	4803      	ldrhi	r0, [pc, #12]	; (8001fdc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8001fd0:	4803      	ldrls	r0, [pc, #12]	; (8001fe0 <_port_irq_epilogue+0x50>)
 8001fd2:	f843 0c08 	str.w	r0, [r3, #-8]
 8001fd6:	4770      	bx	lr
 8001fd8:	20001eb8 	.word	0x20001eb8
 8001fdc:	0800070f 	.word	0x0800070f
 8001fe0:	08000712 	.word	0x08000712
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	f3af 8000 	nop.w
 8001fec:	f3af 8000 	nop.w

08001ff0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <chSchReadyI+0x1c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001ff6:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8001ff8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	428a      	cmp	r2, r1
 8001ffe:	d2fb      	bcs.n	8001ff8 <chSchReadyI+0x8>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002000:	6859      	ldr	r1, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002002:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 8002004:	6041      	str	r1, [r0, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8002006:	6008      	str	r0, [r1, #0]
 8002008:	6058      	str	r0, [r3, #4]
  return tp;
}
 800200a:	4770      	bx	lr
 800200c:	20001eb8 	.word	0x20001eb8

08002010 <chMsgSend>:
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
  thread_t *ctp = currp;
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <chMsgSend+0x3c>)
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002012:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8002014:	6994      	ldr	r4, [r2, #24]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002016:	2520      	movs	r5, #32
 8002018:	f385 8811 	msr	BASEPRI, r5

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
 800201c:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8002020:	6225      	str	r5, [r4, #32]
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002022:	7f06      	ldrb	r6, [r0, #28]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8002024:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002026:	2e0e      	cmp	r6, #14
  tp->p_prev->p_next = cp->p_prev = tp;
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
 8002028:	6025      	str	r5, [r4, #0]
  thread_t *ctp = currp;

  chDbgCheck(tp != NULL);

  chSysLock();
  ctp->p_msg = msg;
 800202a:	6321      	str	r1, [r4, #48]	; 0x30
  tp->p_prev = tqp->p_prev;
 800202c:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800202e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002030:	6014      	str	r4, [r2, #0]
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
 8002032:	d007      	beq.n	8002044 <chMsgSend+0x34>
    chSchReadyI(tp);
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8002034:	200c      	movs	r0, #12
 8002036:	f7ff ff33 	bl	8001ea0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
 800203a:	6a20      	ldr	r0, [r4, #32]
 800203c:	2100      	movs	r1, #0
 800203e:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  return msg;
}
 8002042:	bd70      	pop	{r4, r5, r6, pc}
  chSysLock();
  ctp->p_msg = msg;
  ctp->p_u.wtobjp = &tp->p_msgqueue;
  msg_insert(ctp, &tp->p_msgqueue);
  if (tp->p_state == CH_STATE_WTMSG)
    chSchReadyI(tp);
 8002044:	f7ff ffd4 	bl	8001ff0 <chSchReadyI>
 8002048:	e7f4      	b.n	8002034 <chMsgSend+0x24>
 800204a:	bf00      	nop
 800204c:	20001eb8 	.word	0x20001eb8

08002050 <thread.7390>:
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8002050:	b510      	push	{r4, lr}

  chMsgSend(p, 'A');
 8002052:	2141      	movs	r1, #65	; 0x41
 * A thread is spawned that sends four messages back to the tester thread.<br>
 * The test expect to receive the messages in the correct sequence and to
 * not find a fifth message waiting.
 */

static msg_t thread(void *p) {
 8002054:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8002056:	f7ff ffdb 	bl	8002010 <chMsgSend>
  chMsgSend(p, 'B');
 800205a:	2142      	movs	r1, #66	; 0x42
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff ffd7 	bl	8002010 <chMsgSend>
  chMsgSend(p, 'C');
 8002062:	4620      	mov	r0, r4
 8002064:	2143      	movs	r1, #67	; 0x43
 8002066:	f7ff ffd3 	bl	8002010 <chMsgSend>
  return 0;
}
 800206a:	2000      	movs	r0, #0
 800206c:	bd10      	pop	{r4, pc}
 800206e:	bf00      	nop

08002070 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002070:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002072:	7f03      	ldrb	r3, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002074:	4311      	orrs	r1, r2
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002076:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8002078:	6341      	str	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800207a:	d00a      	beq.n	8002092 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 800207c:	2b0b      	cmp	r3, #11
 800207e:	d000      	beq.n	8002082 <chEvtSignalI+0x12>
 8002080:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8002082:	6a02      	ldr	r2, [r0, #32]
 8002084:	4011      	ands	r1, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8002086:	428a      	cmp	r2, r1
 8002088:	d1fa      	bne.n	8002080 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800208a:	2100      	movs	r1, #0
 800208c:	6201      	str	r1, [r0, #32]
    chSchReadyI(tp);
 800208e:	f7ff bfaf 	b.w	8001ff0 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != 0)) ||
 8002092:	6a03      	ldr	r3, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8002094:	4219      	tst	r1, r3
 8002096:	d1f8      	bne.n	800208a <chEvtSignalI+0x1a>
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	f3af 8000 	nop.w

080020a0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020a0:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80020a2:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020a4:	4606      	mov	r6, r0

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80020a6:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80020a8:	460d      	mov	r5, r1

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80020aa:	d00e      	beq.n	80020ca <chEvtBroadcastFlagsI+0x2a>
    elp->el_flags |= flags;
 80020ac:	68e3      	ldr	r3, [r4, #12]
 80020ae:	ea45 0003 	orr.w	r0, r5, r3
 80020b2:	60e0      	str	r0, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == 0) || ((elp->el_flags & elp->el_wflags) != 0))
 80020b4:	b115      	cbz	r5, 80020bc <chEvtBroadcastFlagsI+0x1c>
 80020b6:	6922      	ldr	r2, [r4, #16]
 80020b8:	4210      	tst	r0, r2
 80020ba:	d003      	beq.n	80020c4 <chEvtBroadcastFlagsI+0x24>
      chEvtSignalI(elp->el_listener, elp->el_events);
 80020bc:	6860      	ldr	r0, [r4, #4]
 80020be:	68a1      	ldr	r1, [r4, #8]
 80020c0:	f7ff ffd6 	bl	8002070 <chEvtSignalI>
    elp = elp->el_next;
 80020c4:	6824      	ldr	r4, [r4, #0]

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  while (elp != (event_listener_t *)esp) {
 80020c6:	42a6      	cmp	r6, r4
 80020c8:	d1f0      	bne.n	80020ac <chEvtBroadcastFlagsI+0xc>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f3af 8000 	nop.w

080020d0 <chMtxUnlockAll>:
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
  thread_t *ctp = currp;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <chMtxUnlockAll+0x50>)
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 80020d2:	b570      	push	{r4, r5, r6, lr}
 80020d4:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 80020d6:	699c      	ldr	r4, [r3, #24]
 80020d8:	f380 8811 	msr	BASEPRI, r0

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
 80020dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020de:	b1d3      	cbz	r3, 8002116 <chMtxUnlockAll+0x46>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 80020e0:	2600      	movs	r6, #0
 80020e2:	e00a      	b.n	80020fa <chMtxUnlockAll+0x2a>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80020e4:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
 80020e6:	6b95      	ldr	r5, [r2, #56]	; 0x38
 80020e8:	6019      	str	r1, [r3, #0]
 80020ea:	604b      	str	r3, [r1, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
 80020ec:	609a      	str	r2, [r3, #8]
        mp->m_next = tp->p_mtxlist;
 80020ee:	60dd      	str	r5, [r3, #12]
        tp->p_mtxlist = mp;
 80020f0:	6393      	str	r3, [r2, #56]	; 0x38
        chSchReadyI(tp);
 80020f2:	f7ff ff7d 	bl	8001ff0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
      }
    } while (ctp->p_mtxlist != NULL);
 80020f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020f8:	b14b      	cbz	r3, 800210e <chMtxUnlockAll+0x3e>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80020fa:	681a      	ldr	r2, [r3, #0]

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 80020fc:	68d9      	ldr	r1, [r3, #12]
      if (chMtxQueueNotEmptyS(mp)) {
 80020fe:	4293      	cmp	r3, r2
#endif
        thread_t *tp = queue_fifo_remove(&mp->m_queue);
        mp->m_owner = tp;
        mp->m_next = tp->p_mtxlist;
        tp->p_mtxlist = mp;
        chSchReadyI(tp);
 8002100:	4610      	mov	r0, r2

  chSysLock();
  if (ctp->p_mtxlist != NULL) {
    do {
      mutex_t *mp = ctp->p_mtxlist;
      ctp->p_mtxlist = mp->m_next;
 8002102:	63a1      	str	r1, [r4, #56]	; 0x38
      if (chMtxQueueNotEmptyS(mp)) {
 8002104:	d1ee      	bne.n	80020e4 <chMtxUnlockAll+0x14>
      }
      else {
#if CH_CFG_USE_MUTEXES_RECURSIVE
        mp->m_cnt = 0;
#endif
        mp->m_owner = NULL;
 8002106:	609e      	str	r6, [r3, #8]
      }
    } while (ctp->p_mtxlist != NULL);
 8002108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f5      	bne.n	80020fa <chMtxUnlockAll+0x2a>
    ctp->p_prio = ctp->p_realprio;
 800210e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002110:	60a0      	str	r0, [r4, #8]
    chSchRescheduleS();
 8002112:	f7ff fd3d 	bl	8001b90 <chSchRescheduleS>
 8002116:	2200      	movs	r2, #0
 8002118:	f382 8811 	msr	BASEPRI, r2
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	bf00      	nop
 8002120:	20001eb8 	.word	0x20001eb8
 8002124:	f3af 8000 	nop.w
 8002128:	f3af 8000 	nop.w
 800212c:	f3af 8000 	nop.w

08002130 <chMtxUnlockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8002130:	b430      	push	{r4, r5}
  thread_t *ctp = currp;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <chMtxUnlockS+0x4c>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8002134:	4604      	mov	r4, r0
 8002136:	6825      	ldr	r5, [r4, #0]
  thread_t *ctp = currp;
 8002138:	6998      	ldr	r0, [r3, #24]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800213a:	68e3      	ldr	r3, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800213c:	42ac      	cmp	r4, r5
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800213e:	6383      	str	r3, [r0, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8002140:	d017      	beq.n	8002172 <chMtxUnlockS+0x42>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8002142:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002144:	b14b      	cbz	r3, 800215a <chMtxUnlockS+0x2a>
 8002146:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) && (lmp->m_queue.p_next->p_prio > newprio))
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <chMtxUnlockS+0x24>
 800214c:	6892      	ldr	r2, [r2, #8]
 800214e:	4291      	cmp	r1, r2
 8002150:	bf38      	it	cc
 8002152:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        lmp = lmp->m_next;
 8002154:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f5      	bne.n	8002146 <chMtxUnlockS+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 800215a:	682b      	ldr	r3, [r5, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 800215c:	6baa      	ldr	r2, [r5, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 800215e:	6081      	str	r1, [r0, #8]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 8002160:	4628      	mov	r0, r5
 8002162:	6023      	str	r3, [r4, #0]
 8002164:	605c      	str	r4, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE
      mp->m_cnt = 1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8002166:	60a5      	str	r5, [r4, #8]
      mp->m_next = tp->p_mtxlist;
 8002168:	60e2      	str	r2, [r4, #12]
      tp->p_mtxlist = mp;
 800216a:	63ac      	str	r4, [r5, #56]	; 0x38
    else
      mp->m_owner = NULL;
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 800216c:	bc30      	pop	{r4, r5}
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
      tp->p_mtxlist = mp;
      chSchReadyI(tp);
 800216e:	f7ff bf3f 	b.w	8001ff0 <chSchReadyI>
    }
    else
      mp->m_owner = NULL;
 8002172:	2100      	movs	r1, #0
 8002174:	60a1      	str	r1, [r4, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE
  }
#endif
}
 8002176:	bc30      	pop	{r4, r5}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20001eb8 	.word	0x20001eb8

08002180 <chMtxLockS>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8002182:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <chMtxLockS+0xc0>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8002184:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8002186:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 8002188:	6994      	ldr	r4, [r2, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800218a:	2b00      	cmp	r3, #0
 800218c:	d051      	beq.n	8002232 <chMtxLockS+0xb2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800218e:	68a1      	ldr	r1, [r4, #8]
 8002190:	6898      	ldr	r0, [r3, #8]
 8002192:	4281      	cmp	r1, r0
 8002194:	d906      	bls.n	80021a4 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8002196:	7f1a      	ldrb	r2, [r3, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8002198:	6099      	str	r1, [r3, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800219a:	2a06      	cmp	r2, #6
 800219c:	d031      	beq.n	8002202 <chMtxLockS+0x82>
 800219e:	2a07      	cmp	r2, #7
 80021a0:	d01c      	beq.n	80021dc <chMtxLockS+0x5c>
 80021a2:	b192      	cbz	r2, 80021ca <chMtxLockS+0x4a>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80021a4:	4628      	mov	r0, r5
  do {
    cp = cp->p_next;
 80021a6:	6800      	ldr	r0, [r0, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80021a8:	4285      	cmp	r5, r0
 80021aa:	d003      	beq.n	80021b4 <chMtxLockS+0x34>
 80021ac:	6883      	ldr	r3, [r0, #8]
 80021ae:	68a1      	ldr	r1, [r4, #8]
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d2f8      	bcs.n	80021a6 <chMtxLockS+0x26>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80021b4:	6842      	ldr	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80021b6:	6020      	str	r0, [r4, #0]
  tp->p_prev = cp->p_prev;
 80021b8:	6062      	str	r2, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80021ba:	6044      	str	r4, [r0, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80021bc:	2006      	movs	r0, #6
 80021be:	6014      	str	r4, [r2, #0]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
 80021c0:	6225      	str	r5, [r4, #32]
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80021c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtobjp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80021c6:	f7ff be6b 	b.w	8001ea0 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80021ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ce:	6011      	str	r1, [r2, #0]
  tp->p_next->p_prev = tp->p_prev;
 80021d0:	6819      	ldr	r1, [r3, #0]
  #if CH_DBG_ENABLE_ASSERTS
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
  #endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          chSchReadyI(queue_dequeue(tp));
 80021d2:	4618      	mov	r0, r3
 80021d4:	604a      	str	r2, [r1, #4]
 80021d6:	f7ff ff0b 	bl	8001ff0 <chSchReadyI>
 80021da:	e7e3      	b.n	80021a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80021dc:	6858      	ldr	r0, [r3, #4]
 80021de:	681f      	ldr	r7, [r3, #0]
  #if CH_CFG_USE_MESSAGES && CH_CFG_USE_MESSAGES_PRIORITY
        case CH_STATE_SNDMSGQ:
  #endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 80021e0:	6a1e      	ldr	r6, [r3, #32]
 80021e2:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 80021e4:	681f      	ldr	r7, [r3, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80021e6:	4632      	mov	r2, r6
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
  tp->p_next->p_prev = tp->p_prev;
 80021e8:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80021ea:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80021ec:	4296      	cmp	r6, r2
 80021ee:	d002      	beq.n	80021f6 <chMtxLockS+0x76>
 80021f0:	6890      	ldr	r0, [r2, #8]
 80021f2:	4288      	cmp	r0, r1
 80021f4:	d2f9      	bcs.n	80021ea <chMtxLockS+0x6a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80021f6:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80021f8:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 80021fa:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 80021fc:	600b      	str	r3, [r1, #0]
 80021fe:	6053      	str	r3, [r2, #4]
 8002200:	e7d0      	b.n	80021a4 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8002202:	6858      	ldr	r0, [r3, #4]
 8002204:	681f      	ldr	r7, [r3, #0]
        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp),
                            (threads_queue_t *)tp->p_u.wtobjp);
 8002206:	6a1e      	ldr	r6, [r3, #32]
 8002208:	6007      	str	r7, [r0, #0]
  tp->p_next->p_prev = tp->p_prev;
 800220a:	681f      	ldr	r7, [r3, #0]
 800220c:	4632      	mov	r2, r6
 800220e:	6078      	str	r0, [r7, #4]

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8002210:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8002212:	4296      	cmp	r6, r2
 8002214:	d012      	beq.n	800223c <chMtxLockS+0xbc>
 8002216:	6890      	ldr	r0, [r2, #8]
 8002218:	4288      	cmp	r0, r1
 800221a:	d2f9      	bcs.n	8002210 <chMtxLockS+0x90>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800221c:	6851      	ldr	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800221e:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 8002220:	6059      	str	r1, [r3, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	6053      	str	r3, [r2, #4]
          tp = ((mutex_t *)tp->p_u.wtobjp)->m_owner;
 8002226:	68b3      	ldr	r3, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8002228:	68a1      	ldr	r1, [r4, #8]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	428a      	cmp	r2, r1
 800222e:	d3b2      	bcc.n	8002196 <chMtxLockS+0x16>
 8002230:	e7b8      	b.n	80021a4 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8002232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    chDbgAssert(mp->m_cnt == 0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8002234:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
 8002236:	60c3      	str	r3, [r0, #12]
    ctp->p_mtxlist = mp;
 8002238:	63a0      	str	r0, [r4, #56]	; 0x38
 800223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800223c:	4632      	mov	r2, r6
 800223e:	e7ed      	b.n	800221c <chMtxLockS+0x9c>
 8002240:	20001eb8 	.word	0x20001eb8
 8002244:	f3af 8000 	nop.w
 8002248:	f3af 8000 	nop.w
 800224c:	f3af 8000 	nop.w

08002250 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8002250:	b508      	push	{r3, lr}
 8002252:	2320      	movs	r3, #32
 8002254:	f383 8811 	msr	BASEPRI, r3

  chSysLock();

  chMtxLockS(mp);
 8002258:	f7ff ff92 	bl	8002180 <chMtxLockS>
 800225c:	2000      	movs	r0, #0
 800225e:	f380 8811 	msr	BASEPRI, r0
 8002262:	bd08      	pop	{r3, pc}
 8002264:	f3af 8000 	nop.w
 8002268:	f3af 8000 	nop.w
 800226c:	f3af 8000 	nop.w

08002270 <thread1.7272.4036>:
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 8002270:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m1);
 8002272:	f640 0400 	movw	r4, #2048	; 0x800
 8002276:	f2c2 0400 	movt	r4, #8192	; 0x2000
static void mtx1_setup(void) {

  chMtxObjectInit(&m1);
}

static msg_t thread1(void *p) {
 800227a:	4605      	mov	r5, r0

  chMtxLock(&m1);
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ffe7 	bl	8002250 <chMtxLock>
  test_emit_token(*(char *)p);
 8002282:	7828      	ldrb	r0, [r5, #0]
 8002284:	f7ff fb14 	bl	80018b0 <test_emit_token>
  chMtxUnlock(&m1);
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff fd81 	bl	8001d90 <chMtxUnlock>
  return 0;
}
 800228e:	2000      	movs	r0, #0
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	bf00      	nop
 8002294:	f3af 8000 	nop.w
 8002298:	f3af 8000 	nop.w
 800229c:	f3af 8000 	nop.w

080022a0 <thread12.7263>:
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 80022a0:	b538      	push	{r3, r4, r5, lr}

  chMtxLock(&m2);
 80022a2:	f640 4438 	movw	r4, #3128	; 0xc38
 80022a6:	f2c2 0400 	movt	r4, #8192	; 0x2000
  chMtxUnlock(&m1);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread12(void *p) {
 80022aa:	4605      	mov	r5, r0

  chMtxLock(&m2);
 80022ac:	4620      	mov	r0, r4
 80022ae:	f7ff ffcf 	bl	8002250 <chMtxLock>
  test_emit_token(*(char *)p);
 80022b2:	7828      	ldrb	r0, [r5, #0]
 80022b4:	f7ff fafc 	bl	80018b0 <test_emit_token>
  chMtxUnlock(&m2);
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fd69 	bl	8001d90 <chMtxUnlock>
  return 0;
}
 80022be:	2000      	movs	r0, #0
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	f3af 8000 	nop.w
 80022c8:	f3af 8000 	nop.w
 80022cc:	f3af 8000 	nop.w

080022d0 <chHeapStatus>:
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 80022d2:	4c0e      	ldr	r4, [pc, #56]	; (800230c <chHeapStatus+0x3c>)
 *                      fragmented free space
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *sizep) {
 80022d4:	460f      	mov	r7, r1
  union heap_header *qp;
  size_t n, sz;

  if (heapp == NULL)
    heapp = &default_heap;
 80022d6:	2800      	cmp	r0, #0
 80022d8:	bf18      	it	ne
 80022da:	4604      	movne	r4, r0

  H_LOCK(heapp);
 80022dc:	f104 0610 	add.w	r6, r4, #16
 80022e0:	4630      	mov	r0, r6
 80022e2:	f7ff ffb5 	bl	8002250 <chMtxLock>

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 80022e6:	68a3      	ldr	r3, [r4, #8]
 80022e8:	b16b      	cbz	r3, 8002306 <chHeapStatus+0x36>
 80022ea:	2200      	movs	r2, #0
 80022ec:	4614      	mov	r4, r2
 80022ee:	cb28      	ldmia	r3, {r3, r5}
 80022f0:	3401      	adds	r4, #1
    sz += qp->h.u.next->h.size;
 80022f2:	1952      	adds	r2, r2, r5
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1fa      	bne.n	80022ee <chHeapStatus+0x1e>
    sz += qp->h.u.next->h.size;
  if (sizep)
 80022f8:	b107      	cbz	r7, 80022fc <chHeapStatus+0x2c>
    *sizep = sz;
 80022fa:	603a      	str	r2, [r7, #0]

  H_UNLOCK(heapp);
 80022fc:	4630      	mov	r0, r6
 80022fe:	f7ff fd47 	bl	8001d90 <chMtxUnlock>
  return n;
}
 8002302:	4620      	mov	r0, r4
 8002304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (heapp == NULL)
    heapp = &default_heap;

  H_LOCK(heapp);

  sz = 0;
 8002306:	461a      	mov	r2, r3
  for (n = 0, qp = &heapp->h_free; qp->h.u.next; n++, qp = qp->h.u.next)
 8002308:	461c      	mov	r4, r3
 800230a:	e7f5      	b.n	80022f8 <chHeapStatus+0x28>
 800230c:	20000e08 	.word	0x20000e08

08002310 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
 8002312:	f850 5c08 	ldr.w	r5, [r0, #-8]
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 8002316:	4606      	mov	r6, r0
  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
  H_LOCK(heapp);
 8002318:	f105 0710 	add.w	r7, r5, #16
  union heap_header *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
 800231c:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002320:	3508      	adds	r5, #8
  H_LOCK(heapp);
 8002322:	4638      	mov	r0, r7
 8002324:	f7ff ff94 	bl	8002250 <chMtxLock>

  chDbgCheck(p != NULL);

  hp = (union heap_header *)p - 1;
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 8002328:	462b      	mov	r3, r5
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800232a:	42ab      	cmp	r3, r5
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800232c:	681a      	ldr	r2, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 800232e:	d001      	beq.n	8002334 <chHeapFree+0x24>
 8002330:	42a3      	cmp	r3, r4
 8002332:	d202      	bcs.n	800233a <chHeapFree+0x2a>
 8002334:	b11a      	cbz	r2, 800233e <chHeapFree+0x2e>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002336:	4294      	cmp	r4, r2
 8002338:	d301      	bcc.n	800233e <chHeapFree+0x2e>
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
      }
      break;
    }
    qp = qp->h.u.next;
 800233a:	4613      	mov	r3, r2
 800233c:	e7f5      	b.n	800232a <chHeapFree+0x1a>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800233e:	f856 1c04 	ldr.w	r1, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 8002342:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8002346:	601c      	str	r4, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002348:	f101 0208 	add.w	r2, r1, #8
 800234c:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8002350:	18a0      	adds	r0, r4, r2
 8002352:	42a8      	cmp	r0, r5
 8002354:	d00a      	beq.n	800236c <chHeapFree+0x5c>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	f102 0008 	add.w	r0, r2, #8
 800235c:	1819      	adds	r1, r3, r0
 800235e:	428c      	cmp	r4, r1
 8002360:	d012      	beq.n	8002388 <chHeapFree+0x78>
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8002362:	4638      	mov	r0, r7
  return;
}
 8002364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      break;
    }
    qp = qp->h.u.next;
  }

  H_UNLOCK(heapp);
 8002368:	f7ff bd12 	b.w	8001d90 <chMtxUnlock>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 800236c:	6840      	ldr	r0, [r0, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 800236e:	58a2      	ldr	r2, [r4, r2]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002370:	1809      	adds	r1, r1, r0
 8002372:	3108      	adds	r1, #8
 8002374:	f846 1c04 	str.w	r1, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 8002378:	f846 2c08 	str.w	r2, [r6, #-8]
      }
      if ((LIMIT(qp) == hp)) {
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	f102 0008 	add.w	r0, r2, #8
 8002382:	1819      	adds	r1, r3, r0
 8002384:	428c      	cmp	r4, r1
 8002386:	d1ec      	bne.n	8002362 <chHeapFree+0x52>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002388:	f856 0c04 	ldr.w	r0, [r6, #-4]
        qp->h.u.next = hp->h.u.next;
 800238c:	f856 1c08 	ldr.w	r1, [r6, #-8]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002390:	1812      	adds	r2, r2, r0
 8002392:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8002394:	e883 0006 	stmia.w	r3, {r1, r2}
 8002398:	e7e3      	b.n	8002362 <chHeapFree+0x52>
 800239a:	bf00      	nop
 800239c:	f3af 8000 	nop.w

080023a0 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
 80023a0:	b430      	push	{r4, r5}
 80023a2:	4603      	mov	r3, r0
 80023a4:	2120      	movs	r1, #32
 80023a6:	f381 8811 	msr	BASEPRI, r1
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > 0, "not referenced");
  refs = --tp->p_refs;
 80023aa:	7f82      	ldrb	r2, [r0, #30]
 80023ac:	1e54      	subs	r4, r2, #1
 80023ae:	b2e2      	uxtb	r2, r4
 80023b0:	7782      	strb	r2, [r0, #30]
 80023b2:	2400      	movs	r4, #0
 80023b4:	f384 8811 	msr	BASEPRI, r4
  chSysUnlock();

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
 80023b8:	b912      	cbnz	r2, 80023c0 <chThdRelease+0x20>
 80023ba:	7f04      	ldrb	r4, [r0, #28]
 80023bc:	2c0f      	cmp	r4, #15
 80023be:	d001      	beq.n	80023c4 <chThdRelease+0x24>
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 80023c0:	bc30      	pop	{r4, r5}
 80023c2:	4770      	bx	lr

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 80023c4:	7f44      	ldrb	r4, [r0, #29]
 80023c6:	f004 0403 	and.w	r4, r4, #3
 80023ca:	2c01      	cmp	r4, #1
 80023cc:	d00f      	beq.n	80023ee <chThdRelease+0x4e>
 80023ce:	2c02      	cmp	r4, #2
 80023d0:	d1f6      	bne.n	80023c0 <chThdRelease+0x20>
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 80023d2:	6944      	ldr	r4, [r0, #20]
 80023d4:	6905      	ldr	r5, [r0, #16]
#endif
      chPoolFree(tp->p_mpool, tp);
 80023d6:	6c00      	ldr	r0, [r0, #64]	; 0x40
      break;
#endif
#if CH_CFG_USE_MEMPOOLS
    case CH_FLAG_MODE_MEMPOOL:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 80023d8:	6125      	str	r5, [r4, #16]
 80023da:	691d      	ldr	r5, [r3, #16]
 80023dc:	616c      	str	r4, [r5, #20]
 80023de:	f381 8811 	msr	BASEPRI, r1
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80023e2:	6801      	ldr	r1, [r0, #0]
 80023e4:	6019      	str	r1, [r3, #0]
  mp->mp_next = php;
 80023e6:	6003      	str	r3, [r0, #0]
 80023e8:	f382 8811 	msr	BASEPRI, r2
 80023ec:	e7e8      	b.n	80023c0 <chThdRelease+0x20>
  if ((refs == 0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
 80023ee:	6942      	ldr	r2, [r0, #20]
 80023f0:	6901      	ldr	r1, [r0, #16]
 80023f2:	6111      	str	r1, [r2, #16]
 80023f4:	6903      	ldr	r3, [r0, #16]
 80023f6:	615a      	str	r2, [r3, #20]
      chPoolFree(tp->p_mpool, tp);
      break;
#endif
    }
  }
}
 80023f8:	bc30      	pop	{r4, r5}
#if CH_CFG_USE_HEAP
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY
      REG_REMOVE(tp);
#endif
      chHeapFree(tp);
 80023fa:	f7ff bf89 	b.w	8002310 <chHeapFree>
 80023fe:	bf00      	nop

08002400 <chThdWait>:
 * @param[in] tp        pointer to the thread
 * @return              The exit code from the terminated thread.
 *
 * @api
 */
msg_t chThdWait(thread_t *tp) {
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4604      	mov	r4, r0
 8002404:	2320      	movs	r3, #32
 8002406:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chDbgAssert(tp != currp, "waiting self");
#if CH_CFG_USE_DYNAMIC
  chDbgAssert(tp->p_refs > 0, "not referenced");
#endif
  if (tp->p_state != CH_STATE_FINAL) {
 800240a:	7f00      	ldrb	r0, [r0, #28]
 800240c:	280f      	cmp	r0, #15
 800240e:	d007      	beq.n	8002420 <chThdWait+0x20>
    list_insert(currp, &tp->p_waiting);
 8002410:	4908      	ldr	r1, [pc, #32]	; (8002434 <chThdWait+0x34>)
/* If the performance code path has been chosen then all the following
   functions are inlined into the various kernel modules.*/
#if CH_CFG_OPTIMIZE_SPEED
static inline void list_insert(thread_t *tp, threads_list_t *tlp) {

  tp->p_next = tlp->p_next;
 8002412:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002414:	698d      	ldr	r5, [r1, #24]
    chSchGoSleepS(CH_STATE_WTEXIT);
 8002416:	2009      	movs	r0, #9
 8002418:	602a      	str	r2, [r5, #0]
  tlp->p_next = tp;
 800241a:	6265      	str	r5, [r4, #36]	; 0x24
 800241c:	f7ff fd40 	bl	8001ea0 <chSchGoSleepS>
  }
  msg = tp->p_u.exitcode;
 8002420:	6a25      	ldr	r5, [r4, #32]
 8002422:	2300      	movs	r3, #0
 8002424:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff ffb9 	bl	80023a0 <chThdRelease>
#endif
  return msg;
}
 800242e:	4628      	mov	r0, r5
 8002430:	bd38      	pop	{r3, r4, r5, pc}
 8002432:	bf00      	nop
 8002434:	20001eb8 	.word	0x20001eb8
 8002438:	f3af 8000 	nop.w
 800243c:	f3af 8000 	nop.w

08002440 <test_wait_threads>:
}

/**
 * @brief   Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8002440:	b510      	push	{r4, lr}
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8002442:	4c12      	ldr	r4, [pc, #72]	; (800248c <test_wait_threads+0x4c>)
 8002444:	6820      	ldr	r0, [r4, #0]
 8002446:	b118      	cbz	r0, 8002450 <test_wait_threads+0x10>
      chThdWait(threads[i]);
 8002448:	f7ff ffda 	bl	8002400 <chThdWait>
      threads[i] = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	6023      	str	r3, [r4, #0]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 8002450:	6860      	ldr	r0, [r4, #4]
 8002452:	b120      	cbz	r0, 800245e <test_wait_threads+0x1e>
      chThdWait(threads[i]);
 8002454:	f7ff ffd4 	bl	8002400 <chThdWait>
      threads[i] = NULL;
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <test_wait_threads+0x4c>)
 800245a:	2200      	movs	r2, #0
 800245c:	6042      	str	r2, [r0, #4]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800245e:	68a0      	ldr	r0, [r4, #8]
 8002460:	b120      	cbz	r0, 800246c <test_wait_threads+0x2c>
      chThdWait(threads[i]);
 8002462:	f7ff ffcd 	bl	8002400 <chThdWait>
      threads[i] = NULL;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <test_wait_threads+0x4c>)
 8002468:	2100      	movs	r1, #0
 800246a:	6099      	str	r1, [r3, #8]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800246c:	68e0      	ldr	r0, [r4, #12]
 800246e:	b120      	cbz	r0, 800247a <test_wait_threads+0x3a>
      chThdWait(threads[i]);
 8002470:	f7ff ffc6 	bl	8002400 <chThdWait>
      threads[i] = NULL;
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <test_wait_threads+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60c2      	str	r2, [r0, #12]
 */
void test_wait_threads(void) {
  int i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
 800247a:	6920      	ldr	r0, [r4, #16]
 800247c:	b120      	cbz	r0, 8002488 <test_wait_threads+0x48>
      chThdWait(threads[i]);
 800247e:	f7ff ffbf 	bl	8002400 <chThdWait>
      threads[i] = NULL;
 8002482:	4b02      	ldr	r3, [pc, #8]	; (800248c <test_wait_threads+0x4c>)
 8002484:	2100      	movs	r1, #0
 8002486:	6119      	str	r1, [r3, #16]
 8002488:	bd10      	pop	{r4, pc}
 800248a:	bf00      	nop
 800248c:	20002008 	.word	0x20002008

08002490 <mtx1_execute.7299>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx1_execute(void) {
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	4e28      	ldr	r6, [pc, #160]	; (8002534 <mtx1_execute.7299+0xa4>)
 8002494:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002496:	69b3      	ldr	r3, [r6, #24]

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
 8002498:	4827      	ldr	r0, [pc, #156]	; (8002538 <mtx1_execute.7299+0xa8>)
 800249a:	689c      	ldr	r4, [r3, #8]
 800249c:	f7ff fed8 	bl	8002250 <chMtxLock>
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80024a0:	4826      	ldr	r0, [pc, #152]	; (800253c <mtx1_execute.7299+0xac>)
 80024a2:	1c62      	adds	r2, r4, #1
 80024a4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <mtx1_execute.7299+0xb0>)
 80024aa:	9000      	str	r0, [sp, #0]
 80024ac:	4825      	ldr	r0, [pc, #148]	; (8002544 <mtx1_execute.7299+0xb4>)
 80024ae:	f7ff fcb7 	bl	8001e20 <chThdCreateStatic>
 80024b2:	4d25      	ldr	r5, [pc, #148]	; (8002548 <mtx1_execute.7299+0xb8>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80024b4:	1ca2      	adds	r2, r4, #2

static void mtx1_execute(void) {

  tprio_t prio = chThdGetPriorityX(); /* Because priority inheritance.*/
  chMtxLock(&m1);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80024b6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80024b8:	4824      	ldr	r0, [pc, #144]	; (800254c <mtx1_execute.7299+0xbc>)
 80024ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <mtx1_execute.7299+0xb0>)
 80024c0:	9000      	str	r0, [sp, #0]
 80024c2:	4823      	ldr	r0, [pc, #140]	; (8002550 <mtx1_execute.7299+0xc0>)
 80024c4:	f7ff fcac 	bl	8001e20 <chThdCreateStatic>
 80024c8:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80024ca:	4822      	ldr	r0, [pc, #136]	; (8002554 <mtx1_execute.7299+0xc4>)
 80024cc:	1ce2      	adds	r2, r4, #3
 80024ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <mtx1_execute.7299+0xb0>)
 80024d4:	9000      	str	r0, [sp, #0]
 80024d6:	4820      	ldr	r0, [pc, #128]	; (8002558 <mtx1_execute.7299+0xc8>)
 80024d8:	f7ff fca2 	bl	8001e20 <chThdCreateStatic>
 80024dc:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80024de:	481f      	ldr	r0, [pc, #124]	; (800255c <mtx1_execute.7299+0xcc>)
 80024e0:	1d22      	adds	r2, r4, #4
 80024e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <mtx1_execute.7299+0xb0>)
 80024e8:	9000      	str	r0, [sp, #0]
 80024ea:	481d      	ldr	r0, [pc, #116]	; (8002560 <mtx1_execute.7299+0xd0>)
 80024ec:	f7ff fc98 	bl	8001e20 <chThdCreateStatic>
 80024f0:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80024f2:	481c      	ldr	r0, [pc, #112]	; (8002564 <mtx1_execute.7299+0xd4>)
 80024f4:	1d62      	adds	r2, r4, #5
 80024f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <mtx1_execute.7299+0xb0>)
 80024fc:	9000      	str	r0, [sp, #0]
 80024fe:	481a      	ldr	r0, [pc, #104]	; (8002568 <mtx1_execute.7299+0xd8>)
 8002500:	f7ff fc8e 	bl	8001e20 <chThdCreateStatic>
 8002504:	6128      	str	r0, [r5, #16]
  chMtxUnlock(&m1);
 8002506:	480c      	ldr	r0, [pc, #48]	; (8002538 <mtx1_execute.7299+0xa8>)
 8002508:	f7ff fc42 	bl	8001d90 <chMtxUnlock>
  test_wait_threads();
 800250c:	f7ff ff98 	bl	8002440 <test_wait_threads>
 8002510:	69b1      	ldr	r1, [r6, #24]
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
 8002512:	2001      	movs	r0, #1
 8002514:	688a      	ldr	r2, [r1, #8]
 8002516:	1aa3      	subs	r3, r4, r2
 8002518:	4259      	negs	r1, r3
 800251a:	4159      	adcs	r1, r3
 800251c:	f7ff f9b0 	bl	8001880 <_test_assert>
 8002520:	b108      	cbz	r0, 8002526 <mtx1_execute.7299+0x96>
  test_assert_sequence(2, "ABCDE");
}
 8002522:	b002      	add	sp, #8
 8002524:	bd70      	pop	{r4, r5, r6, pc}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002526:	4911      	ldr	r1, [pc, #68]	; (800256c <mtx1_execute.7299+0xdc>)
 8002528:	2002      	movs	r0, #2
}
 800252a:	b002      	add	sp, #8
 800252c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
  chMtxUnlock(&m1);
  test_wait_threads();
  test_assert(1, prio == chThdGetPriorityX(), "wrong priority level");
  test_assert_sequence(2, "ABCDE");
 8002530:	f7ff b95e 	b.w	80017f0 <_test_assert_sequence>
 8002534:	20001eb8 	.word	0x20001eb8
 8002538:	20000800 	.word	0x20000800
 800253c:	0800a1e8 	.word	0x0800a1e8
 8002540:	08002271 	.word	0x08002271
 8002544:	20001848 	.word	0x20001848
 8002548:	20002008 	.word	0x20002008
 800254c:	0800a2f8 	.word	0x0800a2f8
 8002550:	20001990 	.word	0x20001990
 8002554:	0800a1d8 	.word	0x0800a1d8
 8002558:	20001ad8 	.word	0x20001ad8
 800255c:	0800a1dc 	.word	0x0800a1dc
 8002560:	20001c20 	.word	0x20001c20
 8002564:	0800a1e0 	.word	0x0800a1e0
 8002568:	20001d68 	.word	0x20001d68
 800256c:	0800a1e4 	.word	0x0800a1e4

08002570 <thd1_execute.6828>:

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002572:	f641 67b8 	movw	r7, #7864	; 0x1eb8
 8002576:	f2c2 0700 	movt	r7, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800257a:	69bb      	ldr	r3, [r7, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800257c:	f641 0548 	movw	r5, #6216	; 0x1848
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	f641 1601 	movw	r6, #6401	; 0x1901
 8002586:	f24a 10e8 	movw	r0, #41448	; 0xa1e8

  test_emit_token(*(char *)p);
  return 0;
}

static void thd1_execute(void) {
 800258a:	b083      	sub	sp, #12

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800258c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002590:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002594:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002598:	3a05      	subs	r2, #5
 800259a:	4633      	mov	r3, r6
 800259c:	9000      	str	r0, [sp, #0]
 800259e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025a2:	4628      	mov	r0, r5
 80025a4:	f7ff fc3c 	bl	8001e20 <chThdCreateStatic>
 80025a8:	f242 0408 	movw	r4, #8200	; 0x2008
 80025ac:	69b9      	ldr	r1, [r7, #24]
 80025ae:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80025b2:	688b      	ldr	r3, [r1, #8]
  return 0;
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80025b4:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80025b6:	f24a 20f8 	movw	r0, #41720	; 0xa2f8
 80025ba:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025c2:	1f1a      	subs	r2, r3, #4
 80025c4:	9000      	str	r0, [sp, #0]
 80025c6:	4633      	mov	r3, r6
 80025c8:	1868      	adds	r0, r5, r1
 80025ca:	f7ff fc29 	bl	8001e20 <chThdCreateStatic>
 80025ce:	69ba      	ldr	r2, [r7, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80025d0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80025d4:	6893      	ldr	r3, [r2, #8]
}

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80025d6:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80025d8:	f24a 10d8 	movw	r0, #41432	; 0xa1d8
 80025dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025e0:	1eda      	subs	r2, r3, #3
 80025e2:	9000      	str	r0, [sp, #0]
 80025e4:	4633      	mov	r3, r6
 80025e6:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80025ea:	f7ff fc19 	bl	8001e20 <chThdCreateStatic>
 80025ee:	69b9      	ldr	r1, [r7, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80025f0:	4633      	mov	r3, r6
 80025f2:	688a      	ldr	r2, [r1, #8]

static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80025f4:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80025f6:	f24a 10dc 	movw	r0, #41436	; 0xa1dc
 80025fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025fe:	3a02      	subs	r2, #2
 8002600:	9000      	str	r0, [sp, #0]
 8002602:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002606:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800260a:	f7ff fc09 	bl	8001e20 <chThdCreateStatic>
 800260e:	69bb      	ldr	r3, [r7, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002610:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002614:	689a      	ldr	r2, [r3, #8]
static void thd1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8002616:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8002618:	f24a 10e0 	movw	r0, #41440	; 0xa1e0
 800261c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002620:	3a01      	subs	r2, #1
 8002622:	4633      	mov	r3, r6
 8002624:	9000      	str	r0, [sp, #0]
 8002626:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800262a:	f7ff fbf9 	bl	8001e20 <chThdCreateStatic>
 800262e:	6120      	str	r0, [r4, #16]
  test_wait_threads();
 8002630:	f7ff ff06 	bl	8002440 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002634:	f24a 11e4 	movw	r1, #41444	; 0xa1e4
 8002638:	2001      	movs	r0, #1
 800263a:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 800263e:	b003      	add	sp, #12
 8002640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002644:	f7ff b8d4 	b.w	80017f0 <_test_assert_sequence>
 8002648:	f3af 8000 	nop.w
 800264c:	f3af 8000 	nop.w

08002650 <thd2_execute.6826>:
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002654:	f641 66b8 	movw	r6, #7864	; 0x1eb8
 8002658:	f2c2 0600 	movt	r6, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800265c:	69b3      	ldr	r3, [r6, #24]

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800265e:	f641 1501 	movw	r5, #6401	; 0x1901
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	f24a 21f8 	movw	r1, #41720	; 0xa2f8
 * and atomically executed.<br>
 * The test expects the threads to perform their operations in increasing
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {
 8002668:	b082      	sub	sp, #8

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800266a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800266e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002672:	3a04      	subs	r2, #4
 8002674:	462b      	mov	r3, r5
 8002676:	9100      	str	r1, [sp, #0]
 8002678:	4833      	ldr	r0, [pc, #204]	; (8002748 <thd2_execute.6826+0xf8>)
 800267a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800267e:	f7ff fbcf 	bl	8001e20 <chThdCreateStatic>
 8002682:	f242 0408 	movw	r4, #8200	; 0x2008
 8002686:	69b7      	ldr	r7, [r6, #24]
 8002688:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800268c:	68bb      	ldr	r3, [r7, #8]
 * priority order regardless of the initial order.
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800268e:	6060      	str	r0, [r4, #4]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8002690:	f641 0748 	movw	r7, #6216	; 0x1848
 8002694:	f24a 10e8 	movw	r0, #41448	; 0xa1e8
 8002698:	f2c2 0700 	movt	r7, #8192	; 0x2000
 800269c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026a0:	1f5a      	subs	r2, r3, #5
 80026a2:	9000      	str	r0, [sp, #0]
 80026a4:	462b      	mov	r3, r5
 80026a6:	4638      	mov	r0, r7
 80026a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026ac:	f7ff fbb8 	bl	8001e20 <chThdCreateStatic>
 80026b0:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80026b2:	462b      	mov	r3, r5
 80026b4:	6891      	ldr	r1, [r2, #8]
 */

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80026b6:	6020      	str	r0, [r4, #0]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80026b8:	f24a 10e0 	movw	r0, #41440	; 0xa1e0
 80026bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026c0:	1e4a      	subs	r2, r1, #1
 80026c2:	9000      	str	r0, [sp, #0]
 80026c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026c8:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80026cc:	f7ff fba8 	bl	8001e20 <chThdCreateStatic>
 80026d0:	69b3      	ldr	r3, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80026d2:	f24a 11dc 	movw	r1, #41436	; 0xa1dc
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	f6c0 0100 	movt	r1, #2048	; 0x800

static void thd2_execute(void) {

  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 80026dc:	6120      	str	r0, [r4, #16]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80026de:	9100      	str	r1, [sp, #0]
 80026e0:	f507 7076 	add.w	r0, r7, #984	; 0x3d8
 80026e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026e8:	3a02      	subs	r2, #2
 80026ea:	462b      	mov	r3, r5
 80026ec:	f7ff fb98 	bl	8001e20 <chThdCreateStatic>
 80026f0:	f04f 0820 	mov.w	r8, #32
 80026f4:	60e0      	str	r0, [r4, #12]
 80026f6:	f388 8811 	msr	BASEPRI, r8
 80026fa:	69b0      	ldr	r0, [r6, #24]
  /* Done this way for coverage of chThdCreateI() and chThdStart().*/
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80026fc:	f24a 13d8 	movw	r3, #41432	; 0xa1d8
 8002700:	6882      	ldr	r2, [r0, #8]
 8002702:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f507 7024 	add.w	r0, r7, #656	; 0x290
 800270c:	462b      	mov	r3, r5
 800270e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002712:	3a03      	subs	r2, #3
 8002714:	f7ff f9e4 	bl	8001ae0 <chThdCreateI>
 8002718:	2500      	movs	r5, #0
 800271a:	60a0      	str	r0, [r4, #8]
 800271c:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  chThdStart(threads[2]);
 8002720:	68a0      	ldr	r0, [r4, #8]
 8002722:	f388 8811 	msr	BASEPRI, r8
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 8002726:	f7ff fc63 	bl	8001ff0 <chSchReadyI>
 800272a:	f385 8811 	msr	BASEPRI, r5
  test_wait_threads();
 800272e:	f7ff fe87 	bl	8002440 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8002732:	f24a 11e4 	movw	r1, #41444	; 0xa1e4
 8002736:	2001      	movs	r0, #1
 8002738:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 800273c:	b002      	add	sp, #8
 800273e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysLock();
  threads[2] = chThdCreateI(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
  chSysUnlock();
  chThdStart(threads[2]);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8002742:	f7ff b855 	b.w	80017f0 <_test_assert_sequence>
 8002746:	bf00      	nop
 8002748:	20001990 	.word	0x20001990
 800274c:	f3af 8000 	nop.w

08002750 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8002750:	b510      	push	{r4, lr}
 8002752:	2320      	movs	r3, #32
 8002754:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <chRegNextThread+0x28>)
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
 800275a:	6904      	ldr	r4, [r0, #16]
  if (ntp == (thread_t *)&ch.rlist)
 800275c:	428c      	cmp	r4, r1
 800275e:	d009      	beq.n	8002774 <chRegNextThread+0x24>
    ntp = NULL;
#if CH_CFG_USE_DYNAMIC
  else {
    chDbgAssert(ntp->p_refs < 255, "too many references");
    ntp->p_refs++;
 8002760:	7fa2      	ldrb	r2, [r4, #30]
 8002762:	1c53      	adds	r3, r2, #1
 8002764:	77a3      	strb	r3, [r4, #30]
 8002766:	2100      	movs	r1, #0
 8002768:	f381 8811 	msr	BASEPRI, r1
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC
  chThdRelease(tp);
 800276c:	f7ff fe18 	bl	80023a0 <chThdRelease>
#endif
  return ntp;
}
 8002770:	4620      	mov	r0, r4
 8002772:	bd10      	pop	{r4, pc}
  thread_t *ntp;

  chSysLock();
  ntp = tp->p_newer;
  if (ntp == (thread_t *)&ch.rlist)
    ntp = NULL;
 8002774:	2400      	movs	r4, #0
 8002776:	e7f6      	b.n	8002766 <chRegNextThread+0x16>
 8002778:	20001eb8 	.word	0x20001eb8
 800277c:	f3af 8000 	nop.w

08002780 <chHeapAlloc>:
 * @return              A pointer to the allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8002782:	4e22      	ldr	r6, [pc, #136]	; (800280c <chHeapAlloc+0x8c>)

  size = MEM_ALIGN_NEXT(size);
 8002784:	3107      	adds	r1, #7
 */
void *chHeapAlloc(memory_heap_t *heapp, size_t size) {
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;
 8002786:	2800      	cmp	r0, #0
 8002788:	bf18      	it	ne
 800278a:	4606      	movne	r6, r0

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);
 800278c:	f106 0710 	add.w	r7, r6, #16
 8002790:	4638      	mov	r0, r7
  union heap_header *qp, *hp, *fp;

  if (heapp == NULL)
    heapp = &default_heap;

  size = MEM_ALIGN_NEXT(size);
 8002792:	f021 0507 	bic.w	r5, r1, #7
  qp = &heapp->h_free;
 8002796:	f106 0408 	add.w	r4, r6, #8
  H_LOCK(heapp);
 800279a:	f7ff fd59 	bl	8002250 <chMtxLock>
 800279e:	e000      	b.n	80027a2 <chHeapAlloc+0x22>

  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80027a0:	461c      	mov	r4, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
  H_LOCK(heapp);

  while (qp->h.u.next != NULL) {
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	b303      	cbz	r3, 80027e8 <chHeapAlloc+0x68>
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4295      	cmp	r5, r2
 80027aa:	d8f9      	bhi.n	80027a0 <chHeapAlloc+0x20>
      if (hp->h.size < size + sizeof(union heap_header)) {
 80027ac:	f105 0108 	add.w	r1, r5, #8
 80027b0:	4291      	cmp	r1, r2
 80027b2:	d816      	bhi.n	80027e2 <chHeapAlloc+0x62>
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 80027b4:	f64f 7ef8 	movw	lr, #65528	; 0xfff8
 80027b8:	f6cf 7eff 	movt	lr, #65535	; 0xffff
 80027bc:	ebc5 0c0e 	rsb	ip, r5, lr
 80027c0:	eb0c 0e02 	add.w	lr, ip, r2
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        fp->h.u.next = hp->h.u.next;
 80027c4:	681a      	ldr	r2, [r3, #0]
           useful.*/
        qp->h.u.next = hp->h.u.next;
      }
      else {
        /* Block bigger enough, must split it.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
 80027c6:	1858      	adds	r0, r3, r1
        fp->h.u.next = hp->h.u.next;
 80027c8:	505a      	str	r2, [r3, r1]
        fp->h.size = hp->h.size - sizeof(union heap_header) - size;
 80027ca:	f8c0 e004 	str.w	lr, [r0, #4]
        qp->h.u.next = fp;
 80027ce:	6020      	str	r0, [r4, #0]
        hp->h.size = size;
 80027d0:	605d      	str	r5, [r3, #4]
      }
      hp->h.u.heap = heapp;
 80027d2:	461c      	mov	r4, r3
 80027d4:	f844 6b08 	str.w	r6, [r4], #8

      H_UNLOCK(heapp);
 80027d8:	4638      	mov	r0, r7
 80027da:	f7ff fad9 	bl	8001d90 <chMtxUnlock>
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 80027de:	4620      	mov	r0, r4
 80027e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hp->h.size >= size) {
      if (hp->h.size < size + sizeof(union heap_header)) {
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	6021      	str	r1, [r4, #0]
 80027e6:	e7f4      	b.n	80027d2 <chHeapAlloc+0x52>
      return (void *)(hp + 1);
    }
    qp = hp;
  }

  H_UNLOCK(heapp);
 80027e8:	4638      	mov	r0, r7
 80027ea:	f7ff fad1 	bl	8001d90 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
 80027ee:	6832      	ldr	r2, [r6, #0]
 80027f0:	b14a      	cbz	r2, 8002806 <chHeapAlloc+0x86>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 80027f2:	f105 0008 	add.w	r0, r5, #8
 80027f6:	4790      	blx	r2
    if (hp != NULL) {
 80027f8:	b128      	cbz	r0, 8002806 <chHeapAlloc+0x86>
      hp->h.u.heap = heapp;
      hp->h.size = size;
      hp++;
      return (void *)hp;
 80027fa:	f100 0408 	add.w	r4, r0, #8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 80027fe:	6006      	str	r6, [r0, #0]
      hp->h.size = size;
 8002800:	6045      	str	r5, [r0, #4]
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
}
 8002802:	4620      	mov	r0, r4
 8002804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hp->h.size = size;
      hp++;
      return (void *)hp;
    }
  }
  return NULL;
 8002806:	2400      	movs	r4, #0
 8002808:	e7e9      	b.n	80027de <chHeapAlloc+0x5e>
 800280a:	bf00      	nop
 800280c:	20000e08 	.word	0x20000e08

08002810 <heap1_execute.7927>:
static void heap1_setup(void) {

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}

static void heap1_execute(void) {
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	b082      	sub	sp, #8

  /*
   * Test on the default heap in order to cover the core allocator at
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
 8002814:	a901      	add	r1, sp, #4
 8002816:	2000      	movs	r0, #0
 8002818:	f7ff fd5a 	bl	80022d0 <chHeapStatus>
  p1 = chHeapAlloc(NULL, SIZE);
 800281c:	2110      	movs	r1, #16
 800281e:	2000      	movs	r0, #0
 8002820:	f7ff ffae 	bl	8002780 <chHeapAlloc>
  test_assert(1, p1 != NULL, "allocation failed");
 8002824:	1c01      	adds	r1, r0, #0
 8002826:	bf18      	it	ne
 8002828:	2101      	movne	r1, #1
 800282a:	4604      	mov	r4, r0
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff f827 	bl	8001880 <_test_assert>
 8002832:	4605      	mov	r5, r0
 8002834:	b108      	cbz	r0, 800283a <heap1_execute.7927+0x2a>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
  chHeapFree(p1);

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
  test_assert(12, n == sz, "size changed");
}
 8002836:	b002      	add	sp, #8
 8002838:	bd70      	pop	{r4, r5, r6, pc}
   * least one time.
   */
  (void)chHeapStatus(NULL, &sz);
  p1 = chHeapAlloc(NULL, SIZE);
  test_assert(1, p1 != NULL, "allocation failed");
  chHeapFree(p1);
 800283a:	4620      	mov	r0, r4
 800283c:	f7ff fd68 	bl	8002310 <chHeapFree>
  p1 = chHeapAlloc(NULL, (size_t)-256);
 8002840:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8002844:	4628      	mov	r0, r5
 8002846:	f7ff ff9b 	bl	8002780 <chHeapAlloc>
  test_assert(2, p1 == NULL, "allocation not failed");
 800284a:	f1d0 0101 	rsbs	r1, r0, #1
 800284e:	bf38      	it	cc
 8002850:	2100      	movcc	r1, #0
 8002852:	2002      	movs	r0, #2
 8002854:	f7ff f814 	bl	8001880 <_test_assert>
 8002858:	2800      	cmp	r0, #0
 800285a:	d1ec      	bne.n	8002836 <heap1_execute.7927+0x26>

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);
 800285c:	a901      	add	r1, sp, #4
 800285e:	487f      	ldr	r0, [pc, #508]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002860:	f7ff fd36 	bl	80022d0 <chHeapStatus>

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002864:	2110      	movs	r1, #16
 8002866:	487d      	ldr	r0, [pc, #500]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002868:	f7ff ff8a 	bl	8002780 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 800286c:	2110      	movs	r1, #16

  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800286e:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002870:	487a      	ldr	r0, [pc, #488]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002872:	f7ff ff85 	bl	8002780 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 8002876:	2110      	movs	r1, #16
  /* Initial local heap state.*/
  (void)chHeapStatus(&test_heap, &sz);

  /* Same order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002878:	4604      	mov	r4, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 800287a:	4878      	ldr	r0, [pc, #480]	; (8002a5c <heap1_execute.7927+0x24c>)
 800287c:	f7ff ff80 	bl	8002780 <chHeapAlloc>
 8002880:	4606      	mov	r6, r0
  chHeapFree(p1);                               /* Does not merge.*/
 8002882:	4628      	mov	r0, r5
 8002884:	f7ff fd44 	bl	8002310 <chHeapFree>
  chHeapFree(p2);                               /* Merges backward.*/
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff fd41 	bl	8002310 <chHeapFree>
  chHeapFree(p3);                               /* Merges both sides.*/
 800288e:	4630      	mov	r0, r6
 8002890:	f7ff fd3e 	bl	8002310 <chHeapFree>
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002894:	4669      	mov	r1, sp
 8002896:	4871      	ldr	r0, [pc, #452]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002898:	f7ff fd1a 	bl	80022d0 <chHeapStatus>
 800289c:	f1b0 0c01 	subs.w	ip, r0, #1
 80028a0:	f1dc 0100 	rsbs	r1, ip, #0
 80028a4:	eb51 010c 	adcs.w	r1, r1, ip
 80028a8:	2003      	movs	r0, #3
 80028aa:	f7fe ffe9 	bl	8001880 <_test_assert>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d1c1      	bne.n	8002836 <heap1_execute.7927+0x26>

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80028b2:	2110      	movs	r1, #16
 80028b4:	4869      	ldr	r0, [pc, #420]	; (8002a5c <heap1_execute.7927+0x24c>)
 80028b6:	f7ff ff63 	bl	8002780 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 80028ba:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges backward.*/
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 80028bc:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 80028be:	4867      	ldr	r0, [pc, #412]	; (8002a5c <heap1_execute.7927+0x24c>)
 80028c0:	f7ff ff5e 	bl	8002780 <chHeapAlloc>
  p3 = chHeapAlloc(&test_heap, SIZE);
 80028c4:	2110      	movs	r1, #16
  chHeapFree(p3);                               /* Merges both sides.*/
  test_assert(3, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Reverse order.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
  p2 = chHeapAlloc(&test_heap, SIZE);
 80028c6:	4605      	mov	r5, r0
  p3 = chHeapAlloc(&test_heap, SIZE);
 80028c8:	4864      	ldr	r0, [pc, #400]	; (8002a5c <heap1_execute.7927+0x24c>)
 80028ca:	f7ff ff59 	bl	8002780 <chHeapAlloc>
  chHeapFree(p3);                               /* Merges forward.*/
 80028ce:	f7ff fd1f 	bl	8002310 <chHeapFree>
  chHeapFree(p2);                               /* Merges forward.*/
 80028d2:	4628      	mov	r0, r5
 80028d4:	f7ff fd1c 	bl	8002310 <chHeapFree>
  chHeapFree(p1);                               /* Merges forward.*/
 80028d8:	4620      	mov	r0, r4
 80028da:	f7ff fd19 	bl	8002310 <chHeapFree>
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80028de:	4669      	mov	r1, sp
 80028e0:	485e      	ldr	r0, [pc, #376]	; (8002a5c <heap1_execute.7927+0x24c>)
 80028e2:	f7ff fcf5 	bl	80022d0 <chHeapStatus>
 80028e6:	f1b0 0e01 	subs.w	lr, r0, #1
 80028ea:	f1de 0000 	rsbs	r0, lr, #0
 80028ee:	eb50 010e 	adcs.w	r1, r0, lr
 80028f2:	2004      	movs	r0, #4
 80028f4:	f7fe ffc4 	bl	8001880 <_test_assert>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d19c      	bne.n	8002836 <heap1_execute.7927+0x26>

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 80028fc:	2111      	movs	r1, #17
 80028fe:	4857      	ldr	r0, [pc, #348]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002900:	f7ff ff3e 	bl	8002780 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002904:	2110      	movs	r1, #16
  chHeapFree(p2);                               /* Merges forward.*/
  chHeapFree(p1);                               /* Merges forward.*/
  test_assert(4, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
 8002906:	4604      	mov	r4, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002908:	4854      	ldr	r0, [pc, #336]	; (8002a5c <heap1_execute.7927+0x24c>)
 800290a:	f7ff ff39 	bl	8002780 <chHeapAlloc>
 800290e:	4605      	mov	r5, r0
  chHeapFree(p1);
 8002910:	4620      	mov	r0, r4
 8002912:	f7ff fcfd 	bl	8002310 <chHeapFree>
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 8002916:	4669      	mov	r1, sp
 8002918:	4850      	ldr	r0, [pc, #320]	; (8002a5c <heap1_execute.7927+0x24c>)
 800291a:	f7ff fcd9 	bl	80022d0 <chHeapStatus>
 800291e:	1e82      	subs	r2, r0, #2
 8002920:	4253      	negs	r3, r2
 8002922:	eb53 0102 	adcs.w	r1, r3, r2
 8002926:	2005      	movs	r0, #5
 8002928:	f7fe ffaa 	bl	8001880 <_test_assert>
 800292c:	2800      	cmp	r0, #0
 800292e:	d182      	bne.n	8002836 <heap1_execute.7927+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002930:	2110      	movs	r1, #16
 8002932:	484a      	ldr	r0, [pc, #296]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002934:	f7ff ff24 	bl	8002780 <chHeapAlloc>
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8002938:	4669      	mov	r1, sp
  /* Small fragments handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE + 1);
  p2 = chHeapAlloc(&test_heap, SIZE);
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
 800293a:	4604      	mov	r4, r0
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 800293c:	4847      	ldr	r0, [pc, #284]	; (8002a5c <heap1_execute.7927+0x24c>)
 800293e:	f7ff fcc7 	bl	80022d0 <chHeapStatus>
 8002942:	2801      	cmp	r0, #1
 8002944:	f000 8088 	beq.w	8002a58 <heap1_execute.7927+0x248>
 8002948:	4669      	mov	r1, sp
 800294a:	4844      	ldr	r0, [pc, #272]	; (8002a5c <heap1_execute.7927+0x24c>)
 800294c:	f7ff fcc0 	bl	80022d0 <chHeapStatus>
 8002950:	3802      	subs	r0, #2
 8002952:	4241      	negs	r1, r0
 8002954:	4141      	adcs	r1, r0
 8002956:	2006      	movs	r0, #6
 8002958:	f7fe ff92 	bl	8001880 <_test_assert>
 800295c:	2800      	cmp	r0, #0
 800295e:	f47f af6a 	bne.w	8002836 <heap1_execute.7927+0x26>
                 (chHeapStatus(&test_heap, &n) == 2), "heap fragmented");
  chHeapFree(p2);
 8002962:	4628      	mov	r0, r5
 8002964:	f7ff fcd4 	bl	8002310 <chHeapFree>
  chHeapFree(p1);
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff fcd1 	bl	8002310 <chHeapFree>
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 800296e:	4669      	mov	r1, sp
 8002970:	483a      	ldr	r0, [pc, #232]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002972:	f7ff fcad 	bl	80022d0 <chHeapStatus>
 8002976:	1e42      	subs	r2, r0, #1
 8002978:	4253      	negs	r3, r2
 800297a:	eb53 0102 	adcs.w	r1, r3, r2
 800297e:	2007      	movs	r0, #7
 8002980:	f7fe ff7e 	bl	8001880 <_test_assert>
 8002984:	2800      	cmp	r0, #0
 8002986:	f47f af56 	bne.w	8002836 <heap1_execute.7927+0x26>

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 800298a:	2110      	movs	r1, #16
 800298c:	4833      	ldr	r0, [pc, #204]	; (8002a5c <heap1_execute.7927+0x24c>)
 800298e:	f7ff fef7 	bl	8002780 <chHeapAlloc>
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002992:	2110      	movs	r1, #16
  chHeapFree(p2);
  chHeapFree(p1);
  test_assert(7, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Skip fragment handling.*/
  p1 = chHeapAlloc(&test_heap, SIZE);
 8002994:	4605      	mov	r5, r0
  p2 = chHeapAlloc(&test_heap, SIZE);
 8002996:	4831      	ldr	r0, [pc, #196]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002998:	f7ff fef2 	bl	8002780 <chHeapAlloc>
 800299c:	4604      	mov	r4, r0
  chHeapFree(p1);
 800299e:	4628      	mov	r0, r5
 80029a0:	f7ff fcb6 	bl	8002310 <chHeapFree>
  test_assert(8, chHeapStatus(&test_heap, &n) == 2, "invalid state");
 80029a4:	4669      	mov	r1, sp
 80029a6:	482d      	ldr	r0, [pc, #180]	; (8002a5c <heap1_execute.7927+0x24c>)
 80029a8:	f7ff fc92 	bl	80022d0 <chHeapStatus>
 80029ac:	f1b0 0c02 	subs.w	ip, r0, #2
 80029b0:	f1dc 0000 	rsbs	r0, ip, #0
 80029b4:	eb50 010c 	adcs.w	r1, r0, ip
 80029b8:	2008      	movs	r0, #8
 80029ba:	f7fe ff61 	bl	8001880 <_test_assert>
 80029be:	2800      	cmp	r0, #0
 80029c0:	f47f af39 	bne.w	8002836 <heap1_execute.7927+0x26>
  p1 = chHeapAlloc(&test_heap, SIZE * 2);       /* Skips first fragment.*/
 80029c4:	2120      	movs	r1, #32
 80029c6:	4825      	ldr	r0, [pc, #148]	; (8002a5c <heap1_execute.7927+0x24c>)
 80029c8:	f7ff feda 	bl	8002780 <chHeapAlloc>
  chHeapFree(p1);
 80029cc:	f7ff fca0 	bl	8002310 <chHeapFree>
  chHeapFree(p2);
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7ff fc9d 	bl	8002310 <chHeapFree>
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 80029d6:	4669      	mov	r1, sp
 80029d8:	4820      	ldr	r0, [pc, #128]	; (8002a5c <heap1_execute.7927+0x24c>)
 80029da:	f7ff fc79 	bl	80022d0 <chHeapStatus>
 80029de:	f1b0 0e01 	subs.w	lr, r0, #1
 80029e2:	f1de 0100 	rsbs	r1, lr, #0
 80029e6:	eb51 010e 	adcs.w	r1, r1, lr
 80029ea:	2009      	movs	r0, #9
 80029ec:	f7fe ff48 	bl	8001880 <_test_assert>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	f47f af20 	bne.w	8002836 <heap1_execute.7927+0x26>

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
 80029f6:	4669      	mov	r1, sp
 80029f8:	4818      	ldr	r0, [pc, #96]	; (8002a5c <heap1_execute.7927+0x24c>)
 80029fa:	f7ff fc69 	bl	80022d0 <chHeapStatus>
  p1 = chHeapAlloc(&test_heap, n);
 80029fe:	9900      	ldr	r1, [sp, #0]
 8002a00:	4816      	ldr	r0, [pc, #88]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002a02:	f7ff febd 	bl	8002780 <chHeapAlloc>
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8002a06:	4669      	mov	r1, sp
  chHeapFree(p2);
  test_assert(9, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");

  /* Allocate all handling.*/
  (void)chHeapStatus(&test_heap, &n);
  p1 = chHeapAlloc(&test_heap, n);
 8002a08:	4604      	mov	r4, r0
  test_assert(10, chHeapStatus(&test_heap, &n) == 0, "not empty");
 8002a0a:	4814      	ldr	r0, [pc, #80]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002a0c:	f7ff fc60 	bl	80022d0 <chHeapStatus>
 8002a10:	f1d0 0101 	rsbs	r1, r0, #1
 8002a14:	bf38      	it	cc
 8002a16:	2100      	movcc	r1, #0
 8002a18:	200a      	movs	r0, #10
 8002a1a:	f7fe ff31 	bl	8001880 <_test_assert>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	f47f af09 	bne.w	8002836 <heap1_execute.7927+0x26>
  chHeapFree(p1);
 8002a24:	4620      	mov	r0, r4
 8002a26:	f7ff fc73 	bl	8002310 <chHeapFree>

  test_assert(11, chHeapStatus(&test_heap, &n) == 1, "heap fragmented");
 8002a2a:	4669      	mov	r1, sp
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <heap1_execute.7927+0x24c>)
 8002a2e:	f7ff fc4f 	bl	80022d0 <chHeapStatus>
 8002a32:	1e42      	subs	r2, r0, #1
 8002a34:	4253      	negs	r3, r2
 8002a36:	eb53 0102 	adcs.w	r1, r3, r2
 8002a3a:	200b      	movs	r0, #11
 8002a3c:	f7fe ff20 	bl	8001880 <_test_assert>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	f47f aef8 	bne.w	8002836 <heap1_execute.7927+0x26>
  test_assert(12, n == sz, "size changed");
 8002a46:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8002a4a:	200c      	movs	r0, #12
 8002a4c:	1aca      	subs	r2, r1, r3
 8002a4e:	4251      	negs	r1, r2
 8002a50:	4151      	adcs	r1, r2
 8002a52:	f7fe ff15 	bl	8001880 <_test_assert>
 8002a56:	e6ee      	b.n	8002836 <heap1_execute.7927+0x26>
  chHeapFree(p1);
  test_assert(5, chHeapStatus(&test_heap, &n) == 2, "invalid state");
  p1 = chHeapAlloc(&test_heap, SIZE);
  /* Note, the first situation happens when the alignment size is smaller
     than the header size, the second in the other cases.*/
  test_assert(6, (chHeapStatus(&test_heap, &n) == 1) ||
 8002a58:	4601      	mov	r1, r0
 8002a5a:	e77c      	b.n	8002956 <heap1_execute.7927+0x146>
 8002a5c:	200014d8 	.word	0x200014d8

08002a60 <chThdCreateFromHeap>:
 * @retval NULL         if the memory cannot be allocated.
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              tprio_t prio, tfunc_t pf, void *arg) {
 8002a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a62:	b083      	sub	sp, #12
 8002a64:	460d      	mov	r5, r1
 8002a66:	4617      	mov	r7, r2
 8002a68:	461e      	mov	r6, r3
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
 8002a6a:	f7ff fe89 	bl	8002780 <chHeapAlloc>
  if (wsp == NULL)
 8002a6e:	4604      	mov	r4, r0
 8002a70:	b190      	cbz	r0, 8002a98 <chThdCreateFromHeap+0x38>
 8002a72:	2320      	movs	r3, #32
 8002a74:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8002a78:	9c08      	ldr	r4, [sp, #32]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	463a      	mov	r2, r7
 8002a7e:	4633      	mov	r3, r6
 8002a80:	9400      	str	r4, [sp, #0]
 8002a82:	f7ff f82d 	bl	8001ae0 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_HEAP;
 8002a86:	2101      	movs	r1, #1
 8002a88:	7741      	strb	r1, [r0, #29]
  chSchWakeupS(tp, MSG_OK);
 8002a8a:	2100      	movs	r1, #0
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif
  
  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8002a8c:	4604      	mov	r4, r0
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002a8e:	f7ff f94f 	bl	8001d30 <chSchWakeupS>
 8002a92:	2000      	movs	r0, #0
 8002a94:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return tp;
}
 8002a98:	4620      	mov	r0, r4
 8002a9a:	b003      	add	sp, #12
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <chSemSignalI>:
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8002aa0:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8002aa2:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (++sp->s_cnt <= 0) {
 8002aa4:	1c50      	adds	r0, r2, #1
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	6098      	str	r0, [r3, #8]
 8002aaa:	dd00      	ble.n	8002aae <chSemSignalI+0xe>
 8002aac:	4770      	bx	lr
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8002aae:	681a      	ldr	r2, [r3, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002ab0:	6811      	ldr	r1, [r2, #0]
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
    chSchReadyI(tp);
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	6019      	str	r1, [r3, #0]
 8002ab6:	604b      	str	r3, [r1, #4]

  if (++sp->s_cnt <= 0) {
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = queue_fifo_remove(&sp->s_queue);
    tp->p_u.rdymsg = MSG_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6213      	str	r3, [r2, #32]
    chSchReadyI(tp);
 8002abc:	f7ff ba98 	b.w	8001ff0 <chSchReadyI>

08002ac0 <chSemResetI>:
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((sp != NULL) && (n >= 0));
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
 8002ac2:	6885      	ldr	r5, [r0, #8]
 * @param[in] n         the new value of the semaphore counter. The value must
 *                      be non-negative.
 *
 * @iclass
 */
void chSemResetI(semaphore_t *sp, cnt_t n) {
 8002ac4:	4604      	mov	r4, r0
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002ac6:	3501      	adds	r5, #1
 8002ac8:	2d00      	cmp	r5, #0
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
 8002aca:	6081      	str	r1, [r0, #8]
  while (++cnt <= 0)
 8002acc:	dc29      	bgt.n	8002b22 <chSemResetI+0x62>
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002ace:	6840      	ldr	r0, [r0, #4]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002ad0:	f06f 0701 	mvn.w	r7, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002ad4:	6843      	ldr	r3, [r0, #4]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002ad6:	1c6e      	adds	r6, r5, #1
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002adc:	f7ff fa88 	bl	8001ff0 <chSchReadyI>
 8002ae0:	f005 0101 	and.w	r1, r5, #1
 8002ae4:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002ae6:	b1ed      	cbz	r5, 8002b24 <chSemResetI+0x64>
 8002ae8:	b149      	cbz	r1, 8002afe <chSemResetI+0x3e>
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002aea:	6860      	ldr	r0, [r4, #4]
 8002aec:	3601      	adds	r6, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002aee:	6842      	ldr	r2, [r0, #4]
 8002af0:	6062      	str	r2, [r4, #4]
 8002af2:	6014      	str	r4, [r2, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002af4:	f7ff fa7c 	bl	8001ff0 <chSchReadyI>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002af8:	2e01      	cmp	r6, #1
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002afa:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002afc:	d013      	beq.n	8002b26 <chSemResetI+0x66>
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002afe:	6860      	ldr	r0, [r4, #4]
 8002b00:	1c75      	adds	r5, r6, #1

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002b02:	6843      	ldr	r3, [r0, #4]
 8002b04:	3602      	adds	r6, #2
 8002b06:	6063      	str	r3, [r4, #4]
 8002b08:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_RESET;
 8002b0a:	f7ff fa71 	bl	8001ff0 <chSchReadyI>
 8002b0e:	6207      	str	r7, [r0, #32]
  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
  return tp;
}

static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_prev;
 8002b10:	6860      	ldr	r0, [r4, #4]

  (tqp->p_prev = tp->p_prev)->p_next = (thread_t *)tqp;
 8002b12:	6841      	ldr	r1, [r0, #4]
 8002b14:	6061      	str	r1, [r4, #4]
 8002b16:	600c      	str	r4, [r1, #0]
 8002b18:	f7ff fa6a 	bl	8001ff0 <chSchReadyI>
 8002b1c:	6207      	str	r7, [r0, #32]
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  cnt = sp->s_cnt;
  sp->s_cnt = n;
  while (++cnt <= 0)
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	d1ed      	bne.n	8002afe <chSemResetI+0x3e>
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b28:	f3af 8000 	nop.w
 8002b2c:	f3af 8000 	nop.w

08002b30 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8002b30:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <chThdExitS+0x3c>)
 8002b34:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002b36:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002b38:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8002b3c:	428d      	cmp	r5, r1
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  tp->p_u.exitcode = msg;
 8002b3e:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002b40:	d007      	beq.n	8002b52 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8002b42:	680a      	ldr	r2, [r1, #0]
    chSchReadyI(list_remove(&tp->p_waiting));
 8002b44:	4608      	mov	r0, r1
 8002b46:	6262      	str	r2, [r4, #36]	; 0x24
 8002b48:	f7ff fa52 	bl	8001ff0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8002b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT
  while (list_notempty(&tp->p_waiting))
 8002b4e:	42a9      	cmp	r1, r5
 8002b50:	d1f7      	bne.n	8002b42 <chThdExitS+0x12>
    chSchReadyI(list_remove(&tp->p_waiting));
#endif
#if CH_CFG_USE_REGISTRY
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
 8002b52:	7f60      	ldrb	r0, [r4, #29]
 8002b54:	0783      	lsls	r3, r0, #30
 8002b56:	d104      	bne.n	8002b62 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8002b58:	6963      	ldr	r3, [r4, #20]
 8002b5a:	6922      	ldr	r2, [r4, #16]
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	6921      	ldr	r1, [r4, #16]
 8002b60:	614b      	str	r3, [r1, #20]
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002b62:	200f      	movs	r0, #15
  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8002b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)
    REG_REMOVE(tp);
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8002b68:	f7ff b99a 	b.w	8001ea0 <chSchGoSleepS>
 8002b6c:	20001eb8 	.word	0x20001eb8

08002b70 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b74:	f2ce 0300 	movt	r3, #57344	; 0xe000
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002b78:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <chTMStopMeasurementX+0x44>)
 8002b7a:	6859      	ldr	r1, [r3, #4]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8002b7c:	b430      	push	{r4, r5}
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
 8002b7e:	6884      	ldr	r4, [r0, #8]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8002b80:	6f13      	ldr	r3, [r2, #112]	; 0x70

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002b82:	68c5      	ldr	r5, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8002b84:	1b09      	subs	r1, r1, r4
 8002b86:	1ac9      	subs	r1, r1, r3
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
 8002b88:	6844      	ldr	r4, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002b8a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002b8e:	3501      	adds	r5, #1
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8002b90:	1852      	adds	r2, r2, r1
 8002b92:	f143 0300 	adc.w	r3, r3, #0
  if (tmp->last > tmp->worst)
 8002b96:	42a1      	cmp	r1, r4

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8002b98:	60c5      	str	r5, [r0, #12]
  tmp->last = now - tmp->last - offset;
 8002b9a:	6081      	str	r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8002b9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
  if (tmp->last > tmp->worst)
 8002ba0:	d805      	bhi.n	8002bae <chTMStopMeasurementX+0x3e>
    tmp->worst = tmp->last;
  else if (tmp->last < tmp->best)
 8002ba2:	6802      	ldr	r2, [r0, #0]
 8002ba4:	4291      	cmp	r1, r2
    tmp->best = tmp->last;
 8002ba6:	bf38      	it	cc
 8002ba8:	6001      	strcc	r1, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8002baa:	bc30      	pop	{r4, r5}
 8002bac:	4770      	bx	lr

  tmp->n++;
  tmp->last = now - tmp->last - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst)
    tmp->worst = tmp->last;
 8002bae:	6041      	str	r1, [r0, #4]
 8002bb0:	e7fb      	b.n	8002baa <chTMStopMeasurementX+0x3a>
 8002bb2:	bf00      	nop
 8002bb4:	20001eb8 	.word	0x20001eb8
 8002bb8:	f3af 8000 	nop.w
 8002bbc:	f3af 8000 	nop.w

08002bc0 <chTMStartMeasurementX>:
 8002bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002bc8:	6859      	ldr	r1, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002bca:	6081      	str	r1, [r0, #8]
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <BusFault_Handler>:
 * @details Any undefined exception vector points to this function by default.
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
void _unhandled_exception(void) {
 8002bd0:	e7fe      	b.n	8002bd0 <BusFault_Handler>
 8002bd2:	bf00      	nop
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	f3af 8000 	nop.w
 8002bdc:	f3af 8000 	nop.w

08002be0 <mtx5_execute.7301>:
static void mtx5_setup(void) {

  chMtxObjectInit(&m1);
}

static void mtx5_execute(void) {
 8002be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002be4:	4d3b      	ldr	r5, [pc, #236]	; (8002cd4 <mtx5_execute.7301+0xf4>)
 8002be6:	2020      	movs	r0, #32
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002be8:	69ab      	ldr	r3, [r5, #24]
 8002bea:	689e      	ldr	r6, [r3, #8]
 8002bec:	f380 8811 	msr	BASEPRI, r0
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8002bf0:	4c39      	ldr	r4, [pc, #228]	; (8002cd8 <mtx5_execute.7301+0xf8>)
 8002bf2:	68a1      	ldr	r1, [r4, #8]
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	d060      	beq.n	8002cba <mtx5_execute.7301+0xda>
    if (mp->m_owner == currp) {
      mp->m_cnt++;
      return true;
    }
#endif
    return false;
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f380 8811 	msr	BASEPRI, r0
#if !CH_CFG_USE_MUTEXES_RECURSIVE
  bool b;
  tprio_t prio = chThdGetPriorityX();

  b = chMtxTryLock(&m1);
  test_assert(1, b, "already locked");
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7fe fe3d 	bl	8001880 <_test_assert>
 8002c06:	b108      	cbz	r0, 8002c0c <mtx5_execute.7301+0x2c>
 8002c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c0c:	2720      	movs	r7, #32
 8002c0e:	f387 8811 	msr	BASEPRI, r7
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->m_owner != NULL) {
 8002c12:	68a1      	ldr	r1, [r4, #8]
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <mtx5_execute.7301+0xf8>)
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d056      	beq.n	8002cc8 <mtx5_execute.7301+0xe8>
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	2700      	movs	r7, #0
 8002c1e:	f387 8811 	msr	BASEPRI, r7

  b = chMtxTryLock(&m1);
  test_assert(2, !b, "not locked");
 8002c22:	2002      	movs	r0, #2
 8002c24:	f7fe fe2c 	bl	8001880 <_test_assert>
 8002c28:	4607      	mov	r7, r0
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d1ec      	bne.n	8002c08 <mtx5_execute.7301+0x28>
 8002c2e:	2120      	movs	r1, #32
 8002c30:	f381 8811 	msr	BASEPRI, r1

  chSysLock();
  chMtxUnlockS(&m1);
 8002c34:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002cd8 <mtx5_execute.7301+0xf8>
 8002c38:	4640      	mov	r0, r8
 8002c3a:	f7ff fa79 	bl	8002130 <chMtxUnlockS>
 8002c3e:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 8002c42:	6823      	ldr	r3, [r4, #0]
  chSysUnlock();

  test_assert(3, queue_isempty(&m1.m_queue), "queue not empty");
 8002c44:	2003      	movs	r0, #3
 8002c46:	ebb3 0e04 	subs.w	lr, r3, r4
 8002c4a:	f1de 0200 	rsbs	r2, lr, #0
 8002c4e:	eb52 010e 	adcs.w	r1, r2, lr
 8002c52:	f7fe fe15 	bl	8001880 <_test_assert>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d1d6      	bne.n	8002c08 <mtx5_execute.7301+0x28>
  test_assert(4, m1.m_owner == NULL, "still owned");
 8002c5a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8002c5e:	2004      	movs	r0, #4
 8002c60:	f1d1 0101 	rsbs	r1, r1, #1
 8002c64:	bf38      	it	cc
 8002c66:	2100      	movcc	r1, #0
 8002c68:	f7fe fe0a 	bl	8001880 <_test_assert>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1cb      	bne.n	8002c08 <mtx5_execute.7301+0x28>
 8002c70:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == prio, "wrong priority level");
 8002c72:	2005      	movs	r0, #5
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	1ab3      	subs	r3, r6, r2
 8002c78:	4259      	negs	r1, r3
 8002c7a:	4159      	adcs	r1, r3
 8002c7c:	f7fe fe00 	bl	8001880 <_test_assert>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d1c1      	bne.n	8002c08 <mtx5_execute.7301+0x28>
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
 8002c84:	4640      	mov	r0, r8
 8002c86:	f7ff fae3 	bl	8002250 <chMtxLock>
  chMtxUnlockAll();
 8002c8a:	f7ff fa21 	bl	80020d0 <chMtxUnlockAll>
 8002c8e:	f8d8 2000 	ldr.w	r2, [r8]
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
 8002c92:	2006      	movs	r0, #6
 8002c94:	ebb2 0308 	subs.w	r3, r2, r8
 8002c98:	4259      	negs	r1, r3
 8002c9a:	4159      	adcs	r1, r3
 8002c9c:	f7fe fdf0 	bl	8001880 <_test_assert>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d1b1      	bne.n	8002c08 <mtx5_execute.7301+0x28>
  test_assert(7, m1.m_owner == NULL, "still owned");
 8002ca4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002ca8:	2007      	movs	r0, #7
 8002caa:	f1d2 0101 	rsbs	r1, r2, #1
 8002cae:	bf38      	it	cc
 8002cb0:	2100      	movcc	r1, #0
}
 8002cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* !CH_CFG_USE_MUTEXES_RECURSIVE */
  
  chMtxLock(&m1);
  chMtxUnlockAll();
  test_assert(6, queue_isempty(&m1.m_queue), "queue not empty");
  test_assert(7, m1.m_owner == NULL, "still owned");
 8002cb6:	f7fe bde3 	b.w	8001880 <_test_assert>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8002cba:	69ab      	ldr	r3, [r5, #24]
  mp->m_next = currp->p_mtxlist;
  currp->p_mtxlist = mp;
 8002cbc:	2101      	movs	r1, #1
  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
  mp->m_next = currp->p_mtxlist;
 8002cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8002cc0:	60a3      	str	r3, [r4, #8]
  mp->m_next = currp->p_mtxlist;
 8002cc2:	60e2      	str	r2, [r4, #12]
  currp->p_mtxlist = mp;
 8002cc4:	639c      	str	r4, [r3, #56]	; 0x38
 8002cc6:	e798      	b.n	8002bfa <mtx5_execute.7301+0x1a>

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8002cc8:	69aa      	ldr	r2, [r5, #24]
  mp->m_next = currp->p_mtxlist;
 8002cca:	6b90      	ldr	r0, [r2, #56]	; 0x38

  chDbgAssert(mp->m_cnt == 0, "counter is not zero");

  mp->m_cnt++;
#endif
  mp->m_owner = currp;
 8002ccc:	609a      	str	r2, [r3, #8]
  mp->m_next = currp->p_mtxlist;
 8002cce:	60d8      	str	r0, [r3, #12]
  currp->p_mtxlist = mp;
 8002cd0:	6393      	str	r3, [r2, #56]	; 0x38
 8002cd2:	e7a3      	b.n	8002c1c <mtx5_execute.7301+0x3c>
 8002cd4:	20001eb8 	.word	0x20001eb8
 8002cd8:	20000800 	.word	0x20000800
 8002cdc:	f3af 8000 	nop.w

08002ce0 <chIQPutI.4391>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8002ce0:	4603      	mov	r3, r0
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8002ce2:	6942      	ldr	r2, [r0, #20]
 8002ce4:	6980      	ldr	r0, [r0, #24]
 8002ce6:	b510      	push	{r4, lr}
 8002ce8:	4282      	cmp	r2, r0
 8002cea:	6898      	ldr	r0, [r3, #8]
 8002cec:	d01b      	beq.n	8002d26 <chIQPutI.4391+0x46>
  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
 8002cee:	3001      	adds	r0, #1
 8002cf0:	6098      	str	r0, [r3, #8]
  *iqp->q_wrptr++ = b;
 8002cf2:	f802 1b01 	strb.w	r1, [r2], #1
  if (iqp->q_wrptr >= iqp->q_top)
 8002cf6:	6919      	ldr	r1, [r3, #16]

  if (chIQIsFullI(iqp))
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
 8002cf8:	615a      	str	r2, [r3, #20]
  if (iqp->q_wrptr >= iqp->q_top)
 8002cfa:	428a      	cmp	r2, r1
 8002cfc:	d20c      	bcs.n	8002d18 <chIQPutI.4391+0x38>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002cfe:	681a      	ldr	r2, [r3, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp))
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00e      	beq.n	8002d22 <chIQPutI.4391+0x42>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8002d04:	6811      	ldr	r1, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002d06:	2400      	movs	r4, #0
 8002d08:	6019      	str	r1, [r3, #0]
  chSchReadyI(tp);
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	604b      	str	r3, [r1, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8002d0e:	6214      	str	r4, [r2, #32]
  chSchReadyI(tp);
 8002d10:	f7ff f96e 	bl	8001ff0 <chSchReadyI>
    iqp->q_wrptr = iqp->q_buffer;

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8002d14:	4620      	mov	r0, r4
 8002d16:	bd10      	pop	{r4, pc}
    return Q_FULL;

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top)
    iqp->q_wrptr = iqp->q_buffer;
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	615a      	str	r2, [r3, #20]
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d1f0      	bne.n	8002d04 <chIQPutI.4391+0x24>

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);

  return Q_OK;
 8002d22:	2000      	movs	r0, #0
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d0e1      	beq.n	8002cee <chIQPutI.4391+0xe>
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {

  chDbgCheckClassI();

  if (chIQIsFullI(iqp))
    return Q_FULL;
 8002d2a:	f06f 0003 	mvn.w	r0, #3
 8002d2e:	bd10      	pop	{r4, pc}

08002d30 <queues1_execute.8272>:
  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
  return 0;
}

static void queues1_execute(void) {
 8002d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d34:	2620      	movs	r6, #32
 8002d36:	b082      	sub	sp, #8
 8002d38:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8002d3c:	4ca6      	ldr	r4, [pc, #664]	; (8002fd8 <queues1_execute.8272+0x2a8>)
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chIQIsEmptyI(&iq), "not empty");
 8002d3e:	2001      	movs	r0, #1
 8002d40:	68a1      	ldr	r1, [r4, #8]
 8002d42:	f1d1 0101 	rsbs	r1, r1, #1
 8002d46:	bf38      	it	cc
 8002d48:	2100      	movcc	r1, #0
 8002d4a:	f7fe fd99 	bl	8001880 <_test_assert>
 8002d4e:	4605      	mov	r5, r0
 8002d50:	bb08      	cbnz	r0, 8002d96 <queues1_execute.8272+0x66>
 8002d52:	f380 8811 	msr	BASEPRI, r0
 8002d56:	f386 8811 	msr	BASEPRI, r6

  /* Queue filling */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8002d5a:	2141      	movs	r1, #65	; 0x41
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f7ff ffbf 	bl	8002ce0 <chIQPutI.4391>
 8002d62:	2142      	movs	r1, #66	; 0x42
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff ffbb 	bl	8002ce0 <chIQPutI.4391>
 8002d6a:	2143      	movs	r1, #67	; 0x43
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff ffb7 	bl	8002ce0 <chIQPutI.4391>
 8002d72:	4620      	mov	r0, r4
 8002d74:	2144      	movs	r1, #68	; 0x44
 8002d76:	f7ff ffb3 	bl	8002ce0 <chIQPutI.4391>
 8002d7a:	f385 8811 	msr	BASEPRI, r5
 8002d7e:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8002d82:	6962      	ldr	r2, [r4, #20]
 8002d84:	69a3      	ldr	r3, [r4, #24]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d052      	beq.n	8002e30 <queues1_execute.8272+0x100>
 8002d8a:	4629      	mov	r1, r5
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	f7fe fd77 	bl	8001880 <_test_assert>
 8002d92:	4605      	mov	r5, r0
 8002d94:	b128      	cbz	r0, 8002da2 <queues1_execute.8272+0x72>
 8002d96:	2200      	movs	r2, #0
 8002d98:	f382 8811 	msr	BASEPRI, r2
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
}
 8002d9c:	b002      	add	sp, #8
 8002d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da2:	f380 8811 	msr	BASEPRI, r0
 8002da6:	f04f 0820 	mov.w	r8, #32
 8002daa:	f388 8811 	msr	BASEPRI, r8
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
  chSysUnlock();
  test_assert_lock(2, chIQIsFullI(&iq), "still has space");
  test_assert_lock(3, chIQPutI(&iq, 0) == Q_FULL, "failed to report Q_FULL");
 8002dae:	4e8a      	ldr	r6, [pc, #552]	; (8002fd8 <queues1_execute.8272+0x2a8>)
 8002db0:	4601      	mov	r1, r0
 8002db2:	4630      	mov	r0, r6
 8002db4:	f7ff ff94 	bl	8002ce0 <chIQPutI.4391>
 8002db8:	3004      	adds	r0, #4
 8002dba:	bf14      	ite	ne
 8002dbc:	2100      	movne	r1, #0
 8002dbe:	2101      	moveq	r1, #1
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f7fe fd5d 	bl	8001880 <_test_assert>
 8002dc6:	4607      	mov	r7, r0
 8002dc8:	bb78      	cbnz	r0, 8002e2a <queues1_execute.8272+0xfa>
 8002dca:	f380 8811 	msr	BASEPRI, r0
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8002dce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f002 feb4 	bl	8005b40 <chIQGetTimeout>

  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    test_emit_token(chIQGet(&iq));
 8002dd8:	b2c0      	uxtb	r0, r0
 8002dda:	f7fe fd69 	bl	80018b0 <test_emit_token>
 8002dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002de2:	4630      	mov	r0, r6
 8002de4:	f002 feac 	bl	8005b40 <chIQGetTimeout>
 8002de8:	b2c0      	uxtb	r0, r0
 8002dea:	f7fe fd61 	bl	80018b0 <test_emit_token>
 8002dee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002df2:	4630      	mov	r0, r6
 8002df4:	f002 fea4 	bl	8005b40 <chIQGetTimeout>
 8002df8:	b2c0      	uxtb	r0, r0
 8002dfa:	f7fe fd59 	bl	80018b0 <test_emit_token>
 8002dfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e02:	4630      	mov	r0, r6
 8002e04:	f002 fe9c 	bl	8005b40 <chIQGetTimeout>
 8002e08:	b2c0      	uxtb	r0, r0
 8002e0a:	f7fe fd51 	bl	80018b0 <test_emit_token>
 8002e0e:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8002e12:	68b1      	ldr	r1, [r6, #8]
  test_assert_lock(4, chIQIsEmptyI(&iq), "still full");
 8002e14:	2004      	movs	r0, #4
 8002e16:	f1d1 0101 	rsbs	r1, r1, #1
 8002e1a:	bf38      	it	cc
 8002e1c:	2100      	movcc	r1, #0
 8002e1e:	f7fe fd2f 	bl	8001880 <_test_assert>
 8002e22:	b150      	cbz	r0, 8002e3a <queues1_execute.8272+0x10a>
 8002e24:	f387 8811 	msr	BASEPRI, r7
 8002e28:	e7b8      	b.n	8002d9c <queues1_execute.8272+0x6c>
 8002e2a:	f385 8811 	msr	BASEPRI, r5
 8002e2e:	e7b5      	b.n	8002d9c <queues1_execute.8272+0x6c>
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0));
 8002e30:	68a0      	ldr	r0, [r4, #8]
 8002e32:	1c01      	adds	r1, r0, #0
 8002e34:	bf18      	it	ne
 8002e36:	2101      	movne	r1, #1
 8002e38:	e7a8      	b.n	8002d8c <queues1_execute.8272+0x5c>
 8002e3a:	f380 8811 	msr	BASEPRI, r0
  test_assert_sequence(5, "ABCD");
 8002e3e:	2005      	movs	r0, #5
 8002e40:	4966      	ldr	r1, [pc, #408]	; (8002fdc <queues1_execute.8272+0x2ac>)
 8002e42:	f7fe fcd5 	bl	80017f0 <_test_assert_sequence>
 8002e46:	4605      	mov	r5, r0
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d1a7      	bne.n	8002d9c <queues1_execute.8272+0x6c>
 8002e4c:	f388 8811 	msr	BASEPRI, r8

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8002e50:	2141      	movs	r1, #65	; 0x41
 8002e52:	4630      	mov	r0, r6
 8002e54:	f7ff ff44 	bl	8002ce0 <chIQPutI.4391>
 8002e58:	2142      	movs	r1, #66	; 0x42
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f7ff ff40 	bl	8002ce0 <chIQPutI.4391>
 8002e60:	2143      	movs	r1, #67	; 0x43
 8002e62:	4630      	mov	r0, r6
 8002e64:	f7ff ff3c 	bl	8002ce0 <chIQPutI.4391>
 8002e68:	4630      	mov	r0, r6
 8002e6a:	2144      	movs	r1, #68	; 0x44
 8002e6c:	f7ff ff38 	bl	8002ce0 <chIQPutI.4391>
 8002e70:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  /* Reading the whole thing */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8002e74:	2208      	movs	r2, #8
 8002e76:	462b      	mov	r3, r5
 8002e78:	4959      	ldr	r1, [pc, #356]	; (8002fe0 <queues1_execute.8272+0x2b0>)
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	f002 fea8 	bl	8005bd0 <chIQReadTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8002e80:	1f05      	subs	r5, r0, #4
 8002e82:	426a      	negs	r2, r5
 8002e84:	eb52 0105 	adcs.w	r1, r2, r5
 8002e88:	2006      	movs	r0, #6
 8002e8a:	f7fe fcf9 	bl	8001880 <_test_assert>
 8002e8e:	4605      	mov	r5, r0
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d183      	bne.n	8002d9c <queues1_execute.8272+0x6c>
 8002e94:	f388 8811 	msr	BASEPRI, r8
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8002e98:	68b7      	ldr	r7, [r6, #8]
  test_assert_lock(7, chIQIsEmptyI(&iq), "still full");
 8002e9a:	2007      	movs	r0, #7
 8002e9c:	f1d7 0101 	rsbs	r1, r7, #1
 8002ea0:	bf38      	it	cc
 8002ea2:	2100      	movcc	r1, #0
 8002ea4:	f7fe fcec 	bl	8001880 <_test_assert>
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d1bd      	bne.n	8002e2a <queues1_execute.8272+0xfa>
 8002eae:	f380 8811 	msr	BASEPRI, r0
 8002eb2:	f388 8811 	msr	BASEPRI, r8

  /* Queue filling again */
  chSysLock();
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chIQPutI(&iq, 'A' + i);
 8002eb6:	2141      	movs	r1, #65	; 0x41
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f7ff ff11 	bl	8002ce0 <chIQPutI.4391>
 8002ebe:	2142      	movs	r1, #66	; 0x42
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f7ff ff0d 	bl	8002ce0 <chIQPutI.4391>
 8002ec6:	2143      	movs	r1, #67	; 0x43
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff ff09 	bl	8002ce0 <chIQPutI.4391>
 8002ece:	4630      	mov	r0, r6
 8002ed0:	2144      	movs	r1, #68	; 0x44
 8002ed2:	f7ff ff05 	bl	8002ce0 <chIQPutI.4391>
 8002ed6:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();

  /* Partial reads */
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8002eda:	4941      	ldr	r1, [pc, #260]	; (8002fe0 <queues1_execute.8272+0x2b0>)
 8002edc:	2202      	movs	r2, #2
 8002ede:	463b      	mov	r3, r7
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f002 fe75 	bl	8005bd0 <chIQReadTimeout>
  test_assert(8, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8002ee6:	1e83      	subs	r3, r0, #2
 8002ee8:	4258      	negs	r0, r3
 8002eea:	eb50 0103 	adcs.w	r1, r0, r3
 8002eee:	2008      	movs	r0, #8
 8002ef0:	f7fe fcc6 	bl	8001880 <_test_assert>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	f47f af51 	bne.w	8002d9c <queues1_execute.8272+0x6c>
  n = chIQReadTimeout(&iq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8002efa:	4603      	mov	r3, r0
 8002efc:	4938      	ldr	r1, [pc, #224]	; (8002fe0 <queues1_execute.8272+0x2b0>)
 8002efe:	2202      	movs	r2, #2
 8002f00:	4630      	mov	r0, r6
 8002f02:	f002 fe65 	bl	8005bd0 <chIQReadTimeout>
  test_assert(9, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 8002f06:	1e82      	subs	r2, r0, #2
 8002f08:	4251      	negs	r1, r2
 8002f0a:	4151      	adcs	r1, r2
 8002f0c:	2009      	movs	r0, #9
 8002f0e:	f7fe fcb7 	bl	8001880 <_test_assert>
 8002f12:	4607      	mov	r7, r0
 8002f14:	2800      	cmp	r0, #0
 8002f16:	f47f af41 	bne.w	8002d9c <queues1_execute.8272+0x6c>
 8002f1a:	f388 8811 	msr	BASEPRI, r8
 8002f1e:	68b5      	ldr	r5, [r6, #8]
  test_assert_lock(10, chIQIsEmptyI(&iq), "still full");
 8002f20:	200a      	movs	r0, #10
 8002f22:	f1d5 0101 	rsbs	r1, r5, #1
 8002f26:	bf38      	it	cc
 8002f28:	2100      	movcc	r1, #0
 8002f2a:	f7fe fca9 	bl	8001880 <_test_assert>
 8002f2e:	4605      	mov	r5, r0
 8002f30:	2800      	cmp	r0, #0
 8002f32:	f47f af77 	bne.w	8002e24 <queues1_execute.8272+0xf4>
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	f388 8811 	msr	BASEPRI, r8

  /* Testing reset */
  chSysLock();
  chIQPutI(&iq, 0);
 8002f3e:	4601      	mov	r1, r0
 8002f40:	4630      	mov	r0, r6
 8002f42:	f7ff fecd 	bl	8002ce0 <chIQPutI.4391>
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8002f46:	68f3      	ldr	r3, [r6, #12]
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f06f 0101 	mvn.w	r1, #1
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8002f4e:	6173      	str	r3, [r6, #20]
 8002f50:	61b3      	str	r3, [r6, #24]
  iqp->q_counter = 0;
 8002f52:	60b5      	str	r5, [r6, #8]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8002f54:	f001 fdc4 	bl	8004ae0 <chThdDequeueAllI>
 8002f58:	f385 8811 	msr	BASEPRI, r5
 8002f5c:	f388 8811 	msr	BASEPRI, r8
  chIQResetI(&iq);
  chSysUnlock();
  test_assert_lock(11, chIQGetFullI(&iq) == 0, "still full");
 8002f60:	68b2      	ldr	r2, [r6, #8]
 8002f62:	200b      	movs	r0, #11
 8002f64:	f1d2 0101 	rsbs	r1, r2, #1
 8002f68:	bf38      	it	cc
 8002f6a:	2100      	movcc	r1, #0
 8002f6c:	f7fe fc88 	bl	8001880 <_test_assert>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f47f af10 	bne.w	8002d96 <queues1_execute.8272+0x66>
 8002f76:	2500      	movs	r5, #0
 8002f78:	f385 8811 	msr	BASEPRI, r5
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8002f7c:	4819      	ldr	r0, [pc, #100]	; (8002fe4 <queues1_execute.8272+0x2b4>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
 8002f7e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002f82:	6982      	ldr	r2, [r0, #24]
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <queues1_execute.8272+0x2b8>)
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	4818      	ldr	r0, [pc, #96]	; (8002fec <queues1_execute.8272+0x2bc>)
 8002f8a:	9500      	str	r5, [sp, #0]
 8002f8c:	3201      	adds	r2, #1
 8002f8e:	f7fe ff47 	bl	8001e20 <chThdCreateStatic>
 8002f92:	4917      	ldr	r1, [pc, #92]	; (8002ff0 <queues1_execute.8272+0x2c0>)
 8002f94:	2320      	movs	r3, #32
 8002f96:	6008      	str	r0, [r1, #0]
 8002f98:	f383 8811 	msr	BASEPRI, r3
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
 8002f9c:	68a2      	ldr	r2, [r4, #8]
 8002f9e:	200c      	movs	r0, #12
 8002fa0:	1b53      	subs	r3, r2, r5
 8002fa2:	4259      	negs	r1, r3
 8002fa4:	4159      	adcs	r1, r3
 8002fa6:	f7fe fc6b 	bl	8001880 <_test_assert>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	f47f af3d 	bne.w	8002e2a <queues1_execute.8272+0xfa>
 8002fb0:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 8002fb4:	f7ff fa44 	bl	8002440 <test_wait_threads>

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8002fb8:	210a      	movs	r1, #10
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <queues1_execute.8272+0x2a8>)
 8002fbc:	f002 fdc0 	bl	8005b40 <chIQGetTimeout>
 8002fc0:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 8002fc4:	f1dc 0000 	rsbs	r0, ip, #0
 8002fc8:	eb50 010c 	adcs.w	r1, r0, ip
 8002fcc:	200d      	movs	r0, #13
}
 8002fce:	b002      	add	sp, #8
 8002fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, NULL);
  test_assert_lock(12, chIQGetFullI(&iq) == 0, "not empty");
  test_wait_threads();

  /* Timeout */
  test_assert(13, chIQGetTimeout(&iq, 10) == Q_TIMEOUT, "wrong timeout return");
 8002fd4:	f7fe bc54 	b.w	8001880 <_test_assert>
 8002fd8:	20000cbc 	.word	0x20000cbc
 8002fdc:	0800a210 	.word	0x0800a210
 8002fe0:	20001990 	.word	0x20001990
 8002fe4:	20001eb8 	.word	0x20001eb8
 8002fe8:	08005b91 	.word	0x08005b91
 8002fec:	20001848 	.word	0x20001848
 8002ff0:	20002008 	.word	0x20002008
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	f3af 8000 	nop.w
 8002ffc:	f3af 8000 	nop.w

08003000 <bmk9_execute.8477>:
 * loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk9_execute(void) {
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8003002:	4a26      	ldr	r2, [pc, #152]	; (800309c <bmk9_execute.8477+0x9c>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8003004:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <bmk9_execute.8477+0xa0>)
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003006:	2400      	movs	r4, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8003008:	f102 0110 	add.w	r1, r2, #16
 800300c:	605b      	str	r3, [r3, #4]
 800300e:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8003010:	609c      	str	r4, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8003012:	615a      	str	r2, [r3, #20]
 8003014:	619a      	str	r2, [r3, #24]
 8003016:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
 8003018:	6119      	str	r1, [r3, #16]
  iqp->q_notify = infy;
 800301a:	61dc      	str	r4, [r3, #28]
  iqp->q_link = link;
 800301c:	621c      	str	r4, [r3, #32]
  static uint8_t ib[16];
  static input_queue_t iq;

  chIQObjectInit(&iq, ib, sizeof(ib), NULL, NULL);
  n = 0;
  test_wait_tick();
 800301e:	f004 fca7 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8003022:	f002 ff15 	bl	8005e50 <test_start_timer.constprop.19>
 8003026:	4f1f      	ldr	r7, [pc, #124]	; (80030a4 <bmk9_execute.8477+0xa4>)
 8003028:	2620      	movs	r6, #32
  do {
    chSysLock();
    chIQPutI(&iq, 0);
 800302a:	4625      	mov	r5, r4
 800302c:	f386 8811 	msr	BASEPRI, r6
 8003030:	2100      	movs	r1, #0
 8003032:	481b      	ldr	r0, [pc, #108]	; (80030a0 <bmk9_execute.8477+0xa0>)
 8003034:	f7ff fe54 	bl	8002ce0 <chIQPutI.4391>
    chIQPutI(&iq, 1);
 8003038:	2101      	movs	r1, #1
 800303a:	4819      	ldr	r0, [pc, #100]	; (80030a0 <bmk9_execute.8477+0xa0>)
 800303c:	f7ff fe50 	bl	8002ce0 <chIQPutI.4391>
    chIQPutI(&iq, 2);
 8003040:	2102      	movs	r1, #2
 8003042:	4817      	ldr	r0, [pc, #92]	; (80030a0 <bmk9_execute.8477+0xa0>)
 8003044:	f7ff fe4c 	bl	8002ce0 <chIQPutI.4391>
    chIQPutI(&iq, 3);
 8003048:	2103      	movs	r1, #3
 800304a:	4815      	ldr	r0, [pc, #84]	; (80030a0 <bmk9_execute.8477+0xa0>)
 800304c:	f7ff fe48 	bl	8002ce0 <chIQPutI.4391>
 8003050:	f385 8811 	msr	BASEPRI, r5
 *
 * @api
 */
static inline msg_t chIQGet(input_queue_t *iqp) {

  return chIQGetTimeout(iqp, TIME_INFINITE);
 8003054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003058:	4811      	ldr	r0, [pc, #68]	; (80030a0 <bmk9_execute.8477+0xa0>)
 800305a:	f002 fd71 	bl	8005b40 <chIQGetTimeout>
 800305e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003062:	480f      	ldr	r0, [pc, #60]	; (80030a0 <bmk9_execute.8477+0xa0>)
 8003064:	f002 fd6c 	bl	8005b40 <chIQGetTimeout>
 8003068:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800306c:	480c      	ldr	r0, [pc, #48]	; (80030a0 <bmk9_execute.8477+0xa0>)
 800306e:	f002 fd67 	bl	8005b40 <chIQGetTimeout>
 8003072:	480b      	ldr	r0, [pc, #44]	; (80030a0 <bmk9_execute.8477+0xa0>)
 8003074:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003078:	f002 fd62 	bl	8005b40 <chIQGetTimeout>
    (void)chIQGet(&iq);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800307c:	7838      	ldrb	r0, [r7, #0]
    chSysUnlock();
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    (void)chIQGet(&iq);
    n++;
 800307e:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8003080:	2800      	cmp	r0, #0
 8003082:	d0d3      	beq.n	800302c <bmk9_execute.8477+0x2c>
  test_print("--- Score : ");
 8003084:	4808      	ldr	r0, [pc, #32]	; (80030a8 <bmk9_execute.8477+0xa8>)
 8003086:	f7fe fc5b 	bl	8001940 <test_print>
  test_printn(n * 4);
 800308a:	00a0      	lsls	r0, r4, #2
 800308c:	f7fe fc68 	bl	8001960 <test_printn>
  test_println(" bytes/S");
 8003090:	4806      	ldr	r0, [pc, #24]	; (80030ac <bmk9_execute.8477+0xac>)
}
 8003092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" bytes/S");
 8003096:	f7fe bc3b 	b.w	8001910 <test_println>
 800309a:	bf00      	nop
 800309c:	20000db8 	.word	0x20000db8
 80030a0:	20000d0c 	.word	0x20000d0c
 80030a4:	20000dcc 	.word	0x20000dcc
 80030a8:	0800a218 	.word	0x0800a218
 80030ac:	0800a228 	.word	0x0800a228

080030b0 <cmd_threads.11057>:
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80030b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80030b2:	2900      	cmp	r1, #0
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}

static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 80030b4:	b085      	sub	sp, #20
 80030b6:	4606      	mov	r6, r0
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 80030b8:	dd05      	ble.n	80030c6 <cmd_threads.11057+0x16>
    chprintf(chp, "Usage: threads\r\n");
 80030ba:	4916      	ldr	r1, [pc, #88]	; (8003114 <cmd_threads.11057+0x64>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 80030bc:	b005      	add	sp, #20
 80030be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: threads\r\n");
 80030c2:	f005 b88d 	b.w	80081e0 <chprintf.11034>
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
 80030c6:	4914      	ldr	r1, [pc, #80]	; (8003118 <cmd_threads.11057+0x68>)
 80030c8:	f005 f88a 	bl	80081e0 <chprintf.11034>
 80030cc:	2320      	movs	r3, #32
 80030ce:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 80030d2:	4812      	ldr	r0, [pc, #72]	; (800311c <cmd_threads.11057+0x6c>)
 80030d4:	2500      	movs	r5, #0
 80030d6:	6904      	ldr	r4, [r0, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 80030d8:	7fa1      	ldrb	r1, [r4, #30]
 80030da:	1c4a      	adds	r2, r1, #1
 80030dc:	77a2      	strb	r2, [r4, #30]
 80030de:	f385 8811 	msr	BASEPRI, r5
 80030e2:	4f0f      	ldr	r7, [pc, #60]	; (8003120 <cmd_threads.11057+0x70>)
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80030e4:	68a0      	ldr	r0, [r4, #8]
 80030e6:	68e3      	ldr	r3, [r4, #12]
 80030e8:	9000      	str	r0, [sp, #0]
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80030ea:	7fa2      	ldrb	r2, [r4, #30]
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80030ec:	490d      	ldr	r1, [pc, #52]	; (8003124 <cmd_threads.11057+0x74>)
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
 80030ee:	1e55      	subs	r5, r2, #1
    return;
  }
  chprintf(chp, "    addr    stack prio refs     state\r\n");
  tp = chRegFirstThread();
  do {
    chprintf(chp, "%08lx %08lx %4lu %4lu %9s\r\n",
 80030f0:	9501      	str	r5, [sp, #4]
 80030f2:	7f20      	ldrb	r0, [r4, #28]
 80030f4:	4622      	mov	r2, r4
 80030f6:	f857 5020 	ldr.w	r5, [r7, r0, lsl #2]
 80030fa:	4630      	mov	r0, r6
 80030fc:	9502      	str	r5, [sp, #8]
 80030fe:	f005 f86f 	bl	80081e0 <chprintf.11034>
            (uint32_t)tp, (uint32_t)tp->p_ctx.r13,
            (uint32_t)tp->p_prio, (uint32_t)(tp->p_refs - 1),
            states[tp->p_state]);
    tp = chRegNextThread(tp);
 8003102:	4620      	mov	r0, r4
 8003104:	f7ff fb24 	bl	8002750 <chRegNextThread>
  } while (tp != NULL);
 8003108:	4604      	mov	r4, r0
 800310a:	2800      	cmp	r0, #0
 800310c:	d1ea      	bne.n	80030e4 <cmd_threads.11057+0x34>
}
 800310e:	b005      	add	sp, #20
 8003110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003112:	bf00      	nop
 8003114:	0800a234 	.word	0x0800a234
 8003118:	0800a248 	.word	0x0800a248
 800311c:	20001eb8 	.word	0x20001eb8
 8003120:	0800a3f0 	.word	0x0800a3f0
 8003124:	0800a270 	.word	0x0800a270
 8003128:	f3af 8000 	nop.w
 800312c:	f3af 8000 	nop.w

08003130 <silabs_send_command>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
 8003130:	2901      	cmp	r1, #1
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003132:	b538      	push	{r3, r4, r5, lr}
 8003134:	4605      	mov	r5, r0
	if (argc != 1) {
 8003136:	d126      	bne.n	8003186 <silabs_send_command+0x56>
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
 8003138:	6814      	ldr	r4, [r2, #0]
 800313a:	4620      	mov	r0, r4
 800313c:	f006 fee8 	bl	8009f10 <strlen>
 8003140:	2806      	cmp	r0, #6
 8003142:	d005      	beq.n	8003150 <silabs_send_command+0x20>
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 8003144:	4914      	ldr	r1, [pc, #80]	; (8003198 <silabs_send_command+0x68>)
 8003146:	4628      	mov	r0, r5
	}
	strncpy(Command_string,argv[0],6);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8003148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
		return;
	}
	if (strlen(argv[0]) != 6) {
		chprintf(chp, "<packet> must be exactly 6 characters\r\n");
 800314c:	f005 b8e0 	b.w	8008310 <chprintf.11613>
		return;
	}
	strncpy(Command_string,argv[0],6);
 8003150:	4602      	mov	r2, r0
 8003152:	4621      	mov	r1, r4
 8003154:	4811      	ldr	r0, [pc, #68]	; (800319c <silabs_send_command+0x6c>)
 8003156:	f006 ff0b 	bl	8009f70 <strncpy>
	Command=3;	
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <silabs_send_command+0x70>)
 800315c:	2203      	movs	r2, #3
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	2020      	movs	r0, #32
 8003162:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8003166:	480f      	ldr	r0, [pc, #60]	; (80031a4 <silabs_send_command+0x74>)
 8003168:	6881      	ldr	r1, [r0, #8]
 800316a:	2900      	cmp	r1, #0
 800316c:	dd10      	ble.n	8003190 <silabs_send_command+0x60>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 800316e:	f7fe fd0f 	bl	8001b90 <chSchRescheduleS>
 8003172:	2200      	movs	r2, #0
 8003174:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <silabs_send_command+0x78>)
 800317a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 800317e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003182:	f002 be55 	b.w	8005e30 <chSemWaitTimeout>
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 8003186:	4909      	ldr	r1, [pc, #36]	; (80031ac <silabs_send_command+0x7c>)
	}
	strncpy(Command_string,argv[0],6);
	Command=3;	
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}
 8003188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	}
}

void silabs_send_command(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc != 1) {
		chprintf(chp, "Sends a packet, Usage: s <packet>\r\n");
 800318c:	f005 b8c0 	b.w	8008310 <chprintf.11613>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8003190:	f7ff fc86 	bl	8002aa0 <chSemSignalI>
 8003194:	e7eb      	b.n	800316e <silabs_send_command+0x3e>
 8003196:	bf00      	nop
 8003198:	0800a2b0 	.word	0x0800a2b0
 800319c:	20001840 	.word	0x20001840
 80031a0:	200017a4 	.word	0x200017a4
 80031a4:	20001804 	.word	0x20001804
 80031a8:	20001834 	.word	0x20001834
 80031ac:	0800a28c 	.word	0x0800a28c

080031b0 <Reset_Handler>:
  uint32_t psp, reg;

  /* Process Stack initialization, it is allocated starting from the
     symbol __process_stack_end__ and its lower limit is the symbol
     __process_stack_base__.*/
  asm volatile ("cpsid   i");
 80031b0:	b672      	cpsid	i
  psp = SYMVAL(__process_stack_end__);
 80031b2:	4978      	ldr	r1, [pc, #480]	; (8003394 <Reset_Handler+0x1e4>)
  asm volatile ("msr     PSP, %0" : : "r" (psp));
 80031b4:	f381 8809 	msr	PSP, r1
  reg = CRT0_CONTROL_INIT | 4;
#else
  /* CPU mode initialization.*/
  reg = CRT0_CONTROL_INIT;
#endif
  asm volatile ("msr     CONTROL, %0" : : "r" (reg));
 80031b8:	2302      	movs	r3, #2
 80031ba:	f383 8814 	msr	CONTROL, r3
  asm volatile ("isb");
 80031be:	f3bf 8f6f 	isb	sy
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80031c2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80031c6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80031ca:	6822      	ldr	r2, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80031cc:	4620      	mov	r0, r4
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80031ce:	f042 0501 	orr.w	r5, r2, #1
 80031d2:	6025      	str	r5, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80031d4:	6806      	ldr	r6, [r0, #0]
 80031d6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80031da:	07b2      	lsls	r2, r6, #30
 80031dc:	f2c4 0702 	movt	r7, #16386	; 0x4002
 80031e0:	d5f8      	bpl.n	80031d4 <Reset_Handler+0x24>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80031e2:	683b      	ldr	r3, [r7, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80031e4:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80031e6:	f003 04f9 	and.w	r4, r3, #249	; 0xf9
 80031ea:	603c      	str	r4, [r7, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80031ec:	4638      	mov	r0, r7
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80031ee:	607a      	str	r2, [r7, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80031f0:	6845      	ldr	r5, [r0, #4]
 80031f2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80031f6:	f015 0f0c 	tst.w	r5, #12
 80031fa:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80031fe:	d1f7      	bne.n	80031f0 <Reset_Handler+0x40>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8003200:	6837      	ldr	r7, [r6, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8003202:	4634      	mov	r4, r6
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8003204:	f447 3380 	orr.w	r3, r7, #65536	; 0x10000
 8003208:	6033      	str	r3, [r6, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800320a:	6820      	ldr	r0, [r4, #0]
 800320c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003210:	0387      	lsls	r7, r0, #14
 8003212:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8003216:	d5f8      	bpl.n	800320a <Reset_Handler+0x5a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8003218:	686a      	ldr	r2, [r5, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800321a:	462f      	mov	r7, r5
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800321c:	f442 2610 	orr.w	r6, r2, #589824	; 0x90000
 8003220:	606e      	str	r6, [r5, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8003222:	682c      	ldr	r4, [r5, #0]
 8003224:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 8003228:	602b      	str	r3, [r5, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003230:	0186      	lsls	r6, r0, #6
 8003232:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8003236:	d5f8      	bpl.n	800322a <Reset_Handler+0x7a>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8003238:	f44f 47c8 	mov.w	r7, #25600	; 0x6400
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800323c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8003240:	f2c0 0749 	movt	r7, #73	; 0x49
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8003244:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003248:	2611      	movs	r6, #17
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Clock settings.*/
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800324a:	606f      	str	r7, [r5, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800324c:	6016      	str	r6, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800324e:	686c      	ldr	r4, [r5, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003250:	462f      	mov	r7, r5
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8003252:	f044 0302 	orr.w	r3, r4, #2
 8003256:	606b      	str	r3, [r5, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 050c 	and.w	r5, r0, #12
 800325e:	2d08      	cmp	r5, #8
 8003260:	d1fa      	bne.n	8003258 <Reset_Handler+0xa8>
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8003262:	4e4d      	ldr	r6, [pc, #308]	; (8003398 <Reset_Handler+0x1e8>)
 8003264:	4a4d      	ldr	r2, [pc, #308]	; (800339c <Reset_Handler+0x1ec>)
 8003266:	4296      	cmp	r6, r2
 8003268:	d218      	bcs.n	800329c <Reset_Handler+0xec>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800326a:	1cd4      	adds	r4, r2, #3
 800326c:	1d37      	adds	r7, r6, #4
 800326e:	1be3      	subs	r3, r4, r7
 8003270:	f023 0503 	bic.w	r5, r3, #3
 8003274:	4634      	mov	r4, r6
 8003276:	19ae      	adds	r6, r5, r6
  /* Early initialization hook invocation.*/
  __early_init();

#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
 8003278:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800327c:	42b4      	cmp	r4, r6
 800327e:	6020      	str	r0, [r4, #0]
 8003280:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8003284:	d00a      	beq.n	800329c <Reset_Handler+0xec>
 8003286:	b11a      	cbz	r2, 8003290 <Reset_Handler+0xe0>
 8003288:	42b7      	cmp	r7, r6
 800328a:	463c      	mov	r4, r7
 800328c:	6038      	str	r0, [r7, #0]
 800328e:	d005      	beq.n	800329c <Reset_Handler+0xec>
 8003290:	1d27      	adds	r7, r4, #4
 8003292:	6060      	str	r0, [r4, #4]
 8003294:	3408      	adds	r4, #8
 8003296:	42b4      	cmp	r4, r6
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	d1f9      	bne.n	8003290 <Reset_Handler+0xe0>
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 800329c:	4d40      	ldr	r5, [pc, #256]	; (80033a0 <Reset_Handler+0x1f0>)
 800329e:	428d      	cmp	r5, r1
 80032a0:	d218      	bcs.n	80032d4 <Reset_Handler+0x124>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <Reset_Handler+0x1f4>)
 80032a4:	1d2e      	adds	r6, r5, #4
 80032a6:	1b98      	subs	r0, r3, r6
 80032a8:	f020 0203 	bic.w	r2, r0, #3
 80032ac:	1951      	adds	r1, r2, r5
#if CRT0_INIT_STACKS
  /* Main and Process stacks initialization.*/
  fill32(&__main_stack_base__,
         &__main_stack_end__,
         CRT0_STACKS_FILL_PATTERN);
  fill32(&__process_stack_base__,
 80032ae:	f04f 3455 	mov.w	r4, #1431655765	; 0x55555555
 80032b2:	428d      	cmp	r5, r1
 80032b4:	462b      	mov	r3, r5
 80032b6:	602c      	str	r4, [r5, #0]
 80032b8:	f3c2 0780 	ubfx	r7, r2, #2, #1
 80032bc:	d00a      	beq.n	80032d4 <Reset_Handler+0x124>
 80032be:	b11f      	cbz	r7, 80032c8 <Reset_Handler+0x118>
 80032c0:	428e      	cmp	r6, r1
 80032c2:	4633      	mov	r3, r6
 80032c4:	6034      	str	r4, [r6, #0]
 80032c6:	d005      	beq.n	80032d4 <Reset_Handler+0x124>
 80032c8:	1d1d      	adds	r5, r3, #4
 80032ca:	605c      	str	r4, [r3, #4]
 80032cc:	3308      	adds	r3, #8
 80032ce:	428b      	cmp	r3, r1
 80032d0:	606c      	str	r4, [r5, #4]
 80032d2:	d1f9      	bne.n	80032c8 <Reset_Handler+0x118>
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80032d4:	4934      	ldr	r1, [pc, #208]	; (80033a8 <Reset_Handler+0x1f8>)
 80032d6:	4e35      	ldr	r6, [pc, #212]	; (80033ac <Reset_Handler+0x1fc>)
 80032d8:	42b1      	cmp	r1, r6
 80032da:	d21b      	bcs.n	8003314 <Reset_Handler+0x164>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 80032dc:	1cf2      	adds	r2, r6, #3
 80032de:	1d0c      	adds	r4, r1, #4
 80032e0:	1b17      	subs	r7, r2, r4
 80032e2:	4833      	ldr	r0, [pc, #204]	; (80033b0 <Reset_Handler+0x200>)
 80032e4:	f027 0203 	bic.w	r2, r7, #3
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
      *dp++ = *tp++;
 80032e8:	6805      	ldr	r5, [r0, #0]
 80032ea:	1d16      	adds	r6, r2, #4
 80032ec:	2304      	movs	r3, #4
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80032ee:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 80032f0:	600d      	str	r5, [r1, #0]
 80032f2:	f3c2 0780 	ubfx	r7, r2, #2, #1
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80032f6:	d00d      	beq.n	8003314 <Reset_Handler+0x164>
 80032f8:	b127      	cbz	r7, 8003304 <Reset_Handler+0x154>
      *dp++ = *tp++;
 80032fa:	6842      	ldr	r2, [r0, #4]
 80032fc:	2308      	movs	r3, #8
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 80032fe:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8003300:	6022      	str	r2, [r4, #0]
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8003302:	d007      	beq.n	8003314 <Reset_Handler+0x164>
      *dp++ = *tp++;
 8003304:	581d      	ldr	r5, [r3, r0]
 8003306:	1d1f      	adds	r7, r3, #4
 8003308:	505d      	str	r5, [r3, r1]
 800330a:	59c4      	ldr	r4, [r0, r7]
 800330c:	3308      	adds	r3, #8
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 800330e:	42b3      	cmp	r3, r6
      *dp++ = *tp++;
 8003310:	51cc      	str	r4, [r1, r7]
  {
    uint32_t *tp, *dp;

    tp = &_textdata;
    dp = &_data;
    while (dp < &_edata)
 8003312:	d1f7      	bne.n	8003304 <Reset_Handler+0x154>
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 8003314:	4827      	ldr	r0, [pc, #156]	; (80033b4 <Reset_Handler+0x204>)
 8003316:	4928      	ldr	r1, [pc, #160]	; (80033b8 <Reset_Handler+0x208>)
 8003318:	4288      	cmp	r0, r1
 800331a:	d217      	bcs.n	800334c <Reset_Handler+0x19c>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 800331c:	1cce      	adds	r6, r1, #3
 800331e:	1d07      	adds	r7, r0, #4
 8003320:	1bf2      	subs	r2, r6, r7
 8003322:	f022 0503 	bic.w	r5, r2, #3
 8003326:	4603      	mov	r3, r0
 8003328:	1828      	adds	r0, r5, r0
  }
#endif

#if CRT0_INIT_BSS
  /* BSS segment initialization.*/
  fill32(&_bss_start, &_bss_end, 0);
 800332a:	2400      	movs	r4, #0
 800332c:	4283      	cmp	r3, r0
 800332e:	601c      	str	r4, [r3, #0]
 8003330:	f3c5 0180 	ubfx	r1, r5, #2, #1
 8003334:	d00a      	beq.n	800334c <Reset_Handler+0x19c>
 8003336:	b119      	cbz	r1, 8003340 <Reset_Handler+0x190>
 8003338:	4287      	cmp	r7, r0
 800333a:	463b      	mov	r3, r7
 800333c:	603c      	str	r4, [r7, #0]
 800333e:	d005      	beq.n	800334c <Reset_Handler+0x19c>
 8003340:	1d1e      	adds	r6, r3, #4
 8003342:	605c      	str	r4, [r3, #4]
 8003344:	3308      	adds	r3, #8
 8003346:	4283      	cmp	r3, r0
 8003348:	6074      	str	r4, [r6, #4]
 800334a:	d1f9      	bne.n	8003340 <Reset_Handler+0x190>

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 800334c:	4d1b      	ldr	r5, [pc, #108]	; (80033bc <Reset_Handler+0x20c>)
 800334e:	4f1c      	ldr	r7, [pc, #112]	; (80033c0 <Reset_Handler+0x210>)
 8003350:	42bd      	cmp	r5, r7
 8003352:	d21c      	bcs.n	800338e <Reset_Handler+0x1de>
 * @brief   Reset vector.
 */
#if !defined(__DOXYGEN__)
__attribute__((naked))
#endif
void Reset_Handler(void) {
 8003354:	1cfa      	adds	r2, r7, #3
 8003356:	1d2e      	adds	r6, r5, #4
 8003358:	1b94      	subs	r4, r2, r6
 800335a:	08a0      	lsrs	r0, r4, #2
 800335c:	1c47      	adds	r7, r0, #1
 800335e:	2401      	movs	r4, #1
#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
      (*fpp)();
 8003360:	6829      	ldr	r1, [r5, #0]
 8003362:	ea00 0804 	and.w	r8, r0, r4
 8003366:	4788      	blx	r1

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8003368:	42bc      	cmp	r4, r7
 800336a:	d010      	beq.n	800338e <Reset_Handler+0x1de>
 800336c:	f1b8 0f00 	cmp.w	r8, #0
 8003370:	d005      	beq.n	800337e <Reset_Handler+0x1ce>
      (*fpp)();
 8003372:	6833      	ldr	r3, [r6, #0]
 8003374:	2402      	movs	r4, #2
 8003376:	4798      	blx	r3

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 8003378:	42bc      	cmp	r4, r7
 800337a:	4635      	mov	r5, r6
 800337c:	d007      	beq.n	800338e <Reset_Handler+0x1de>
      (*fpp)();
 800337e:	686a      	ldr	r2, [r5, #4]
 8003380:	4790      	blx	r2
 8003382:	3402      	adds	r4, #2
 8003384:	68ae      	ldr	r6, [r5, #8]
 8003386:	47b0      	blx	r6
 8003388:	3508      	adds	r5, #8

#if CRT0_CALL_CONSTRUCTORS
  /* Constructors invocation.*/
  {
    funcpp_t fpp = &__init_array_start;
    while (fpp < &__init_array_end) {
 800338a:	42bc      	cmp	r4, r7
 800338c:	d1f7      	bne.n	800337e <Reset_Handler+0x1ce>
    }
  }
#endif

  /* Invoking application main() function.*/
  main();
 800338e:	f7fc fed7 	bl	8000140 <main.4458>
 8003392:	bf00      	nop
 8003394:	20000800 	.word	0x20000800
 8003398:	20000000 	.word	0x20000000
 800339c:	20000400 	.word	0x20000400
 80033a0:	20000400 	.word	0x20000400
 80033a4:	20000803 	.word	0x20000803
 80033a8:	20000800 	.word	0x20000800
 80033ac:	20000d0c 	.word	0x20000d0c
 80033b0:	0800b668 	.word	0x0800b668
 80033b4:	20000d0c 	.word	0x20000d0c
 80033b8:	2000201c 	.word	0x2000201c
 80033bc:	08000140 	.word	0x08000140
 80033c0:	08000140 	.word	0x08000140
 80033c4:	f3af 8000 	nop.w
 80033c8:	f3af 8000 	nop.w
 80033cc:	f3af 8000 	nop.w

080033d0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80033d0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80033d2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80033d6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d047      	beq.n	800346c <_usb_ep0in+0x9c>
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d047      	beq.n	8003470 <_usb_ep0in+0xa0>
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d01c      	beq.n	800341e <_usb_ep0in+0x4e>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80033e4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80033e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80033ec:	6819      	ldr	r1, [r3, #0]
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80033ee:	6842      	ldr	r2, [r0, #4]
 80033f0:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
 80033f4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80033f8:	f081 0110 	eor.w	r1, r1, #16
 80033fc:	6019      	str	r1, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80033fe:	6819      	ldr	r1, [r3, #0]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8003406:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800340a:	f481 5180 	eor.w	r1, r1, #4096	; 0x1000
 800340e:	6019      	str	r1, [r3, #0]
 8003410:	b10a      	cbz	r2, 8003416 <_usb_ep0in+0x46>
 8003412:	2105      	movs	r1, #5
 8003414:	4790      	blx	r2
  usbp->ep0state = USB_EP0_ERROR;
 8003416:	2006      	movs	r0, #6
 8003418:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 800341c:	bd38      	pop	{r3, r4, r5, pc}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 800341e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8003422:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 8003426:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = usbFetchWord(&usbp->setup[6]);
 8003428:	ea43 2105 	orr.w	r1, r3, r5, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
 800342c:	4291      	cmp	r1, r2
 800342e:	68c3      	ldr	r3, [r0, #12]
 8003430:	d905      	bls.n	800343e <_usb_ep0in+0x6e>
 8003432:	8a19      	ldrh	r1, [r3, #16]
 8003434:	fbb2 f5f1 	udiv	r5, r2, r1
 8003438:	fb01 2515 	mls	r5, r1, r5, r2
 800343c:	b1fd      	cbz	r5, 800347e <_usb_ep0in+0xae>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800343e:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = FALSE;
 8003440:	2500      	movs	r5, #0
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8003442:	2003      	movs	r0, #3
 8003444:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8003448:	4629      	mov	r1, r5
 800344a:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800344c:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800344e:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 8003450:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8003452:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003454:	f004 f8ec 	bl	8007630 <usb_lld_prepare_receive>
 8003458:	2220      	movs	r2, #32
 800345a:	f382 8811 	msr	BASEPRI, r2
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareReceive(usbp, 0, NULL, 0);
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0);
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	f004 f8c5 	bl	80075f0 <usbStartReceiveI>
 8003466:	f385 8811 	msr	BASEPRI, r5
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	68c3      	ldr	r3, [r0, #12]
 800346e:	e7e6      	b.n	800343e <_usb_ep0in+0x6e>
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL)
 8003470:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003472:	b103      	cbz	r3, 8003476 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
 8003474:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8003476:	2100      	movs	r1, #0
 8003478:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 800347c:	bd38      	pop	{r3, r4, r5, pc}
    max = usbFetchWord(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) && ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0)) {
      usbPrepareTransmit(usbp, 0, NULL, 0);
 800347e:	4629      	mov	r1, r5
 8003480:	462a      	mov	r2, r5
 8003482:	f001 fe95 	bl	80051b0 <usbPrepareTransmit.constprop.5>
 8003486:	2020      	movs	r0, #32
 8003488:	f380 8811 	msr	BASEPRI, r0
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 800348c:	4620      	mov	r0, r4
 800348e:	4629      	mov	r1, r5
 8003490:	f004 f88e 	bl	80075b0 <usbStartTransmitI>
 8003494:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8003498:	2202      	movs	r2, #2
 800349a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800349e:	bd38      	pop	{r3, r4, r5, pc}

080034a0 <thread4.7051>:
 * <h2>Description</h2>
 * This test case tests the binary semaphores functionality. The test both
 * checks the binary semaphore status and the expected status of the underlying
 * counting semaphore.
 */
static msg_t thread4(void *p) {
 80034a0:	b508      	push	{r3, lr}
 80034a2:	2220      	movs	r2, #32
 80034a4:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80034a8:	6881      	ldr	r1, [r0, #8]
 80034aa:	2900      	cmp	r1, #0
 80034ac:	dd05      	ble.n	80034ba <thread4.7051+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80034ae:	f7fe fb6f 	bl	8001b90 <chSchRescheduleS>
 80034b2:	2000      	movs	r0, #0
 80034b4:	f380 8811 	msr	BASEPRI, r0

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}
 80034b8:	bd08      	pop	{r3, pc}
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80034ba:	f7ff faf1 	bl	8002aa0 <chSemSignalI>
 80034be:	e7f6      	b.n	80034ae <thread4.7051+0xe>

080034c0 <thread2.7700>:
  chThdSleepMilliseconds(50);
  chEvtSignal((thread_t *)p, 1);
  return 0;
}

static msg_t thread2(void *p) {
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	2520      	movs	r5, #32
 80034c4:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80034c8:	f640 4058 	movw	r0, #3160	; 0xc58
 80034cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80034d0:	2100      	movs	r1, #0
 80034d2:	f7fe fde5 	bl	80020a0 <chEvtBroadcastFlagsI>
 80034d6:	2400      	movs	r4, #0
  chSchRescheduleS();
 80034d8:	f7fe fb5a 	bl	8001b90 <chSchRescheduleS>
 80034dc:	f384 8811 	msr	BASEPRI, r4

  (void)p;
  chEvtBroadcast(&es1);
  chThdSleepMilliseconds(50);
 80034e0:	2064      	movs	r0, #100	; 0x64
 80034e2:	f004 fa35 	bl	8007950 <chThdSleep>
 80034e6:	f385 8811 	msr	BASEPRI, r5
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 80034ea:	f640 407c 	movw	r0, #3196	; 0xc7c
 80034ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80034f2:	4621      	mov	r1, r4
 80034f4:	f7fe fdd4 	bl	80020a0 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 80034f8:	f7fe fb4a 	bl	8001b90 <chSchRescheduleS>
 80034fc:	f384 8811 	msr	BASEPRI, r4
  chEvtBroadcast(&es2);
  return 0;
}
 8003500:	4620      	mov	r0, r4
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	f3af 8000 	nop.w
 8003508:	f3af 8000 	nop.w
 800350c:	f3af 8000 	nop.w

08003510 <usb_event.11379>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
  extern SerialUSBDriver SDU1;

  switch (event) {
 8003510:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8003512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003514:	460d      	mov	r5, r1
 8003516:	4606      	mov	r6, r0
  extern SerialUSBDriver SDU1;

  switch (event) {
 8003518:	d145      	bne.n	80035a6 <usb_event.11379+0x96>
 800351a:	2320      	movs	r3, #32
 800351c:	f383 8811 	msr	BASEPRI, r3
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
  USBDriver *usbp = sdup->config->usbp;
 8003520:	4c21      	ldr	r4, [pc, #132]	; (80035a8 <usb_event.11379+0x98>)
    chSysLockFromISR();

    /* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 8003522:	2101      	movs	r1, #1
 8003524:	4a21      	ldr	r2, [pc, #132]	; (80035ac <usb_event.11379+0x9c>)
 8003526:	f004 f90b 	bl	8007740 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800352a:	4630      	mov	r0, r6
 800352c:	4629      	mov	r1, r5
 800352e:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <usb_event.11379+0xa0>)
 8003530:	f004 f906 	bl	8007740 <usbInitEndpointI>

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8003534:	f104 070c 	add.w	r7, r4, #12
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8003538:	69a3      	ldr	r3, [r4, #24]
 800353a:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
  iqp->q_counter = 0;
 800353e:	2500      	movs	r5, #0
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 8003540:	4638      	mov	r0, r7
 8003542:	f06f 0101 	mvn.w	r1, #1
 8003546:	6816      	ldr	r6, [r2, #0]
 */
void chIQResetI(input_queue_t *iqp) {

  chDbgCheckClassI();

  iqp->q_rdptr = iqp->q_wrptr = iqp->q_buffer;
 8003548:	6223      	str	r3, [r4, #32]
 800354a:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_counter = 0;
 800354c:	6165      	str	r5, [r4, #20]
  chThdDequeueAllI(&iqp->q_waiting, Q_RESET);
 800354e:	f001 fac7 	bl	8004ae0 <chThdDequeueAllI>
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8003552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  oqp->q_counter = chQSizeI(oqp);
 8003554:	6c21      	ldr	r1, [r4, #64]	; 0x40
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003556:	f104 0030 	add.w	r0, r4, #48	; 0x30
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 800355a:	1aca      	subs	r2, r1, r3
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 800355c:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 8003560:	6463      	str	r3, [r4, #68]	; 0x44
 8003562:	64a3      	str	r3, [r4, #72]	; 0x48
  oqp->q_counter = chQSizeI(oqp);
 8003564:	63a2      	str	r2, [r4, #56]	; 0x38
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 8003566:	f001 fabb 	bl	8004ae0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800356a:	1d20      	adds	r0, r4, #4
 800356c:	2101      	movs	r1, #1
 800356e:	f7fe fd97 	bl	80020a0 <chEvtBroadcastFlagsI>
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
 8003572:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 8003576:	f04f 0e01 	mov.w	lr, #1
 800357a:	7941      	ldrb	r1, [r0, #5]
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 800357c:	4630      	mov	r0, r6
 800357e:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8003582:	68db      	ldr	r3, [r3, #12]
  iqResetI(&sdup->iqueue);
  oqResetI(&sdup->oqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  usbPrepareQueuedReceive(usbp, sdup->config->bulk_out, &sdup->iqueue,
 8003584:	8a5a      	ldrh	r2, [r3, #18]
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8003586:	699b      	ldr	r3, [r3, #24]

  osp->rxqueued           = TRUE;
 8003588:	f883 e000 	strb.w	lr, [r3]
  osp->mode.queue.rxqueue = iqp;
 800358c:	60df      	str	r7, [r3, #12]
  osp->rxsize             = n;
 800358e:	605a      	str	r2, [r3, #4]
  osp->rxcnt              = 0;
 8003590:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8003592:	f004 f84d 	bl	8007630 <usb_lld_prepare_receive>
                          usbp->epc[sdup->config->bulk_out]->out_maxsize);
  usbStartReceiveI(usbp, sdup->config->bulk_out);
 8003596:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 800359a:	4630      	mov	r0, r6
 800359c:	7949      	ldrb	r1, [r1, #5]
 800359e:	f004 f827 	bl	80075f0 <usbStartReceiveI>
 80035a2:	f385 8811 	msr	BASEPRI, r5
 80035a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a8:	2000153c 	.word	0x2000153c
 80035ac:	0800ac70 	.word	0x0800ac70
 80035b0:	0800a450 	.word	0x0800a450
 80035b4:	f3af 8000 	nop.w
 80035b8:	f3af 8000 	nop.w
 80035bc:	f3af 8000 	nop.w

080035c0 <chOQGetI.constprop.24.4427>:
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <chOQGetI.constprop.24.4427+0x4c>)
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 80035c2:	b510      	push	{r4, lr}
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	6959      	ldr	r1, [r3, #20]
 80035c8:	6898      	ldr	r0, [r3, #8]
 80035ca:	4291      	cmp	r1, r2
 80035cc:	d018      	beq.n	8003600 <chOQGetI.constprop.24.4427+0x40>
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 80035ce:	1c44      	adds	r4, r0, #1
 80035d0:	609c      	str	r4, [r3, #8]
  b = *oqp->q_rdptr++;
 80035d2:	f812 4b01 	ldrb.w	r4, [r2], #1
  if (oqp->q_rdptr >= oqp->q_top)
 80035d6:	6918      	ldr	r0, [r3, #16]

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 80035d8:	619a      	str	r2, [r3, #24]
  if (oqp->q_rdptr >= oqp->q_top)
 80035da:	4282      	cmp	r2, r0
  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;

  oqp->q_counter++;
 80035dc:	490b      	ldr	r1, [pc, #44]	; (800360c <chOQGetI.constprop.24.4427+0x4c>)
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
 80035de:	d20c      	bcs.n	80035fa <chOQGetI.constprop.24.4427+0x3a>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <chOQGetI.constprop.24.4427+0x4c>)
 80035e4:	4298      	cmp	r0, r3
 80035e6:	d006      	beq.n	80035f6 <chOQGetI.constprop.24.4427+0x36>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80035e8:	6803      	ldr	r3, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80035ea:	2100      	movs	r1, #0
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	6201      	str	r1, [r0, #32]
 80035f0:	6013      	str	r3, [r2, #0]
  chSchReadyI(tp);
 80035f2:	f7fe fcfd 	bl	8001ff0 <chSchReadyI>
    oqp->q_rdptr = oqp->q_buffer;

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);

  return b;
 80035f6:	4620      	mov	r0, r4
 80035f8:	bd10      	pop	{r4, pc}
    return Q_EMPTY;

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top)
    oqp->q_rdptr = oqp->q_buffer;
 80035fa:	68ca      	ldr	r2, [r1, #12]
 80035fc:	618a      	str	r2, [r1, #24]
 80035fe:	e7ef      	b.n	80035e0 <chOQGetI.constprop.24.4427+0x20>
 8003600:	2800      	cmp	r0, #0
 8003602:	d0e4      	beq.n	80035ce <chOQGetI.constprop.24.4427+0xe>
  uint8_t b;

  chDbgCheckClassI();

  if (chOQIsEmptyI(oqp))
    return Q_EMPTY;
 8003604:	f06f 0002 	mvn.w	r0, #2
 8003608:	bd10      	pop	{r4, pc}
 800360a:	bf00      	nop
 800360c:	20000c98 	.word	0x20000c98

08003610 <queues2_execute.8268>:
  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
  return 0;
}

static void queues2_execute(void) {
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	2320      	movs	r3, #32
 8003614:	b083      	sub	sp, #12
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	4d9c      	ldr	r5, [pc, #624]	; (800388c <queues2_execute.8268+0x27c>)
 800361c:	696a      	ldr	r2, [r5, #20]
 800361e:	69a8      	ldr	r0, [r5, #24]
 8003620:	4282      	cmp	r2, r0
 8003622:	f000 8082 	beq.w	800372a <queues2_execute.8268+0x11a>
 8003626:	2100      	movs	r1, #0
  unsigned i;
  size_t n;

  /* Initial empty state */
  test_assert_lock(1, chOQIsEmptyI(&oq), "not empty");
 8003628:	2001      	movs	r0, #1
 800362a:	f7fe f929 	bl	8001880 <_test_assert>
 800362e:	4607      	mov	r7, r0
 8003630:	2800      	cmp	r0, #0
 8003632:	d159      	bne.n	80036e8 <queues2_execute.8268+0xd8>
 8003634:	f380 8811 	msr	BASEPRI, r0
 *
 * @api
 */
static inline msg_t chOQPut(output_queue_t *oqp, uint8_t b) {

  return chOQPutTimeout(oqp, b, TIME_INFINITE);
 8003638:	4c94      	ldr	r4, [pc, #592]	; (800388c <queues2_execute.8268+0x27c>)
 800363a:	2141      	movs	r1, #65	; 0x41
 800363c:	4620      	mov	r0, r4
 800363e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003642:	f002 fb15 	bl	8005c70 <chOQPutTimeout>
 8003646:	2142      	movs	r1, #66	; 0x42
 8003648:	4620      	mov	r0, r4
 800364a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364e:	f002 fb0f 	bl	8005c70 <chOQPutTimeout>
 8003652:	2143      	movs	r1, #67	; 0x43
 8003654:	4620      	mov	r0, r4
 8003656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365a:	f002 fb09 	bl	8005c70 <chOQPutTimeout>
 800365e:	4620      	mov	r0, r4
 8003660:	2144      	movs	r1, #68	; 0x44
 8003662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003666:	f002 fb03 	bl	8005c70 <chOQPutTimeout>
 800366a:	2620      	movs	r6, #32
 800366c:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003670:	68ad      	ldr	r5, [r5, #8]

  /* Queue filling */
  for (i = 0; i < TEST_QUEUES_SIZE; i++)
    chOQPut(&oq, 'A' + i);
  test_assert_lock(2, chOQIsFullI(&oq), "still has space");
 8003672:	2002      	movs	r0, #2
 8003674:	f1d5 0101 	rsbs	r1, r5, #1
 8003678:	bf38      	it	cc
 800367a:	2100      	movcc	r1, #0
 800367c:	f7fe f900 	bl	8001880 <_test_assert>
 8003680:	4605      	mov	r5, r0
 8003682:	2800      	cmp	r0, #0
 8003684:	d135      	bne.n	80036f2 <queues2_execute.8268+0xe2>
 8003686:	f380 8811 	msr	BASEPRI, r0
 800368a:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 800368e:	f7ff ff97 	bl	80035c0 <chOQGetI.constprop.24.4427>
 8003692:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 8003696:	b2c0      	uxtb	r0, r0
 8003698:	f7fe f90a 	bl	80018b0 <test_emit_token>
 800369c:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80036a0:	f7ff ff8e 	bl	80035c0 <chOQGetI.constprop.24.4427>
 80036a4:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80036a8:	b2c0      	uxtb	r0, r0
 80036aa:	f7fe f901 	bl	80018b0 <test_emit_token>
 80036ae:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80036b2:	f7ff ff85 	bl	80035c0 <chOQGetI.constprop.24.4427>
 80036b6:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80036ba:	b2c0      	uxtb	r0, r0
 80036bc:	f7fe f8f8 	bl	80018b0 <test_emit_token>
 80036c0:	f386 8811 	msr	BASEPRI, r6
  /* Queue emptying */
  for (i = 0; i < TEST_QUEUES_SIZE; i++) {
    char c;

    chSysLock();
    c = chOQGetI(&oq);
 80036c4:	f7ff ff7c 	bl	80035c0 <chOQGetI.constprop.24.4427>
 80036c8:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    test_emit_token(c);
 80036cc:	b2c0      	uxtb	r0, r0
 80036ce:	f7fe f8ef 	bl	80018b0 <test_emit_token>
 80036d2:	f386 8811 	msr	BASEPRI, r6
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0));
 80036d6:	6962      	ldr	r2, [r4, #20]
 80036d8:	69a3      	ldr	r3, [r4, #24]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d02a      	beq.n	8003734 <queues2_execute.8268+0x124>
 80036de:	4629      	mov	r1, r5
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
 80036e0:	2003      	movs	r0, #3
 80036e2:	f7fe f8cd 	bl	8001880 <_test_assert>
 80036e6:	b138      	cbz	r0, 80036f8 <queues2_execute.8268+0xe8>
 80036e8:	2100      	movs	r1, #0
 80036ea:	f381 8811 	msr	BASEPRI, r1
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
}
 80036ee:	b003      	add	sp, #12
 80036f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f2:	f387 8811 	msr	BASEPRI, r7
 80036f6:	e7fa      	b.n	80036ee <queues2_execute.8268+0xde>
 80036f8:	f380 8811 	msr	BASEPRI, r0
    c = chOQGetI(&oq);
    chSysUnlock();
    test_emit_token(c);
  }
  test_assert_lock(3, chOQIsEmptyI(&oq), "still full");
  test_assert_sequence(4, "ABCD");
 80036fc:	2004      	movs	r0, #4
 80036fe:	4964      	ldr	r1, [pc, #400]	; (8003890 <queues2_execute.8268+0x280>)
 8003700:	f7fe f876 	bl	80017f0 <_test_assert_sequence>
 8003704:	4604      	mov	r4, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	d1f1      	bne.n	80036ee <queues2_execute.8268+0xde>
 800370a:	2520      	movs	r5, #32
 800370c:	f385 8811 	msr	BASEPRI, r5
  test_assert_lock(5, chOQGetI(&oq) == Q_EMPTY, "failed to report Q_EMPTY");
 8003710:	f7ff ff56 	bl	80035c0 <chOQGetI.constprop.24.4427>
 8003714:	3003      	adds	r0, #3
 8003716:	bf14      	ite	ne
 8003718:	2100      	movne	r1, #0
 800371a:	2101      	moveq	r1, #1
 800371c:	2005      	movs	r0, #5
 800371e:	f7fe f8af 	bl	8001880 <_test_assert>
 8003722:	b160      	cbz	r0, 800373e <queues2_execute.8268+0x12e>
 8003724:	f384 8811 	msr	BASEPRI, r4
 8003728:	e7e1      	b.n	80036ee <queues2_execute.8268+0xde>
 800372a:	68a9      	ldr	r1, [r5, #8]
 800372c:	3100      	adds	r1, #0
 800372e:	bf18      	it	ne
 8003730:	2101      	movne	r1, #1
 8003732:	e779      	b.n	8003628 <queues2_execute.8268+0x18>
 8003734:	68a0      	ldr	r0, [r4, #8]
 8003736:	1c01      	adds	r1, r0, #0
 8003738:	bf18      	it	ne
 800373a:	2101      	movne	r1, #1
 800373c:	e7d0      	b.n	80036e0 <queues2_execute.8268+0xd0>
 800373e:	f380 8811 	msr	BASEPRI, r0

  /* Writing the whole thing */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE * 2, TIME_IMMEDIATE);
 8003742:	4c52      	ldr	r4, [pc, #328]	; (800388c <queues2_execute.8268+0x27c>)
 8003744:	2208      	movs	r2, #8
 8003746:	4603      	mov	r3, r0
 8003748:	4952      	ldr	r1, [pc, #328]	; (8003894 <queues2_execute.8268+0x284>)
 800374a:	4620      	mov	r0, r4
 800374c:	f002 fad8 	bl	8005d00 <chOQWriteTimeout>
  test_assert(6, n == TEST_QUEUES_SIZE, "wrong returned size");
 8003750:	1f06      	subs	r6, r0, #4
 8003752:	4271      	negs	r1, r6
 8003754:	4171      	adcs	r1, r6
 8003756:	2006      	movs	r0, #6
 8003758:	f7fe f892 	bl	8001880 <_test_assert>
 800375c:	4606      	mov	r6, r0
 800375e:	2800      	cmp	r0, #0
 8003760:	d1c5      	bne.n	80036ee <queues2_execute.8268+0xde>
 8003762:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003766:	68a7      	ldr	r7, [r4, #8]
  test_assert_lock(7, chOQIsFullI(&oq), "not full");
 8003768:	2007      	movs	r0, #7
 800376a:	f1d7 0101 	rsbs	r1, r7, #1
 800376e:	bf38      	it	cc
 8003770:	2100      	movcc	r1, #0
 8003772:	f7fe f885 	bl	8001880 <_test_assert>
 8003776:	4607      	mov	r7, r0
 8003778:	b110      	cbz	r0, 8003780 <queues2_execute.8268+0x170>
 800377a:	f386 8811 	msr	BASEPRI, r6
 800377e:	e7b6      	b.n	80036ee <queues2_execute.8268+0xde>
 8003780:	f380 8811 	msr	BASEPRI, r0
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8003784:	4a44      	ldr	r2, [pc, #272]	; (8003898 <queues2_execute.8268+0x288>)
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8003786:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800378a:	6990      	ldr	r0, [r2, #24]
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <queues2_execute.8268+0x28c>)
 800378e:	6886      	ldr	r6, [r0, #8]
 8003790:	9700      	str	r7, [sp, #0]
 8003792:	1c72      	adds	r2, r6, #1
 8003794:	4842      	ldr	r0, [pc, #264]	; (80038a0 <queues2_execute.8268+0x290>)
 8003796:	f7fe fb43 	bl	8001e20 <chThdCreateStatic>
 800379a:	4b42      	ldr	r3, [pc, #264]	; (80038a4 <queues2_execute.8268+0x294>)
 800379c:	6018      	str	r0, [r3, #0]
 800379e:	f385 8811 	msr	BASEPRI, r5
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 80037a2:	6921      	ldr	r1, [r4, #16]
 80037a4:	68e2      	ldr	r2, [r4, #12]
 80037a6:	68a0      	ldr	r0, [r4, #8]
 80037a8:	1a8e      	subs	r6, r1, r2
 80037aa:	1a33      	subs	r3, r6, r0
  test_assert_lock(8, chOQGetFullI(&oq) == TEST_QUEUES_SIZE, "not empty");
 80037ac:	2008      	movs	r0, #8
 80037ae:	f1b3 0c04 	subs.w	ip, r3, #4
 80037b2:	f1dc 0100 	rsbs	r1, ip, #0
 80037b6:	eb51 010c 	adcs.w	r1, r1, ip
 80037ba:	f7fe f861 	bl	8001880 <_test_assert>
 80037be:	4606      	mov	r6, r0
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d196      	bne.n	80036f2 <queues2_execute.8268+0xe2>
 80037c4:	f380 8811 	msr	BASEPRI, r0
  test_wait_threads();
 80037c8:	f7fe fe3a 	bl	8002440 <test_wait_threads>
 80037cc:	f385 8811 	msr	BASEPRI, r5
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80037d0:	68e3      	ldr	r3, [r4, #12]
  oqp->q_counter = chQSizeI(oqp);
 80037d2:	6922      	ldr	r2, [r4, #16]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 80037d4:	4620      	mov	r0, r4
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = chQSizeI(oqp);
 80037d6:	1ad2      	subs	r2, r2, r3
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 80037d8:	f06f 0101 	mvn.w	r1, #1
 */
void chOQResetI(output_queue_t *oqp) {

  chDbgCheckClassI();

  oqp->q_rdptr = oqp->q_wrptr = oqp->q_buffer;
 80037dc:	6163      	str	r3, [r4, #20]
 80037de:	61a3      	str	r3, [r4, #24]
  oqp->q_counter = chQSizeI(oqp);
 80037e0:	60a2      	str	r2, [r4, #8]
  chThdDequeueAllI(&oqp->q_waiting, Q_RESET);
 80037e2:	f001 f97d 	bl	8004ae0 <chThdDequeueAllI>
 80037e6:	f386 8811 	msr	BASEPRI, r6
 80037ea:	f385 8811 	msr	BASEPRI, r5
 80037ee:	6920      	ldr	r0, [r4, #16]
 80037f0:	68e1      	ldr	r1, [r4, #12]

  /* Testing reset */
  chSysLock();
  chOQResetI(&oq);
  chSysUnlock();
  test_assert_lock(9, chOQGetFullI(&oq) == 0, "still full");
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	1a42      	subs	r2, r0, r1
 80037f6:	2009      	movs	r0, #9
 80037f8:	ebb2 0e03 	subs.w	lr, r2, r3
 80037fc:	f1de 0100 	rsbs	r1, lr, #0
 8003800:	eb51 010e 	adcs.w	r1, r1, lr
 8003804:	f7fe f83c 	bl	8001880 <_test_assert>
 8003808:	4603      	mov	r3, r0
 800380a:	2800      	cmp	r0, #0
 800380c:	d1b5      	bne.n	800377a <queues2_execute.8268+0x16a>
 800380e:	f380 8811 	msr	BASEPRI, r0

  /* Partial writes */
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003812:	2202      	movs	r2, #2
 8003814:	491f      	ldr	r1, [pc, #124]	; (8003894 <queues2_execute.8268+0x284>)
 8003816:	4620      	mov	r0, r4
 8003818:	f002 fa72 	bl	8005d00 <chOQWriteTimeout>
  test_assert(10, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800381c:	3802      	subs	r0, #2
 800381e:	4243      	negs	r3, r0
 8003820:	eb53 0100 	adcs.w	r1, r3, r0
 8003824:	200a      	movs	r0, #10
 8003826:	f7fe f82b 	bl	8001880 <_test_assert>
 800382a:	4603      	mov	r3, r0
 800382c:	2800      	cmp	r0, #0
 800382e:	f47f af5e 	bne.w	80036ee <queues2_execute.8268+0xde>
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
 8003832:	4918      	ldr	r1, [pc, #96]	; (8003894 <queues2_execute.8268+0x284>)
 8003834:	2202      	movs	r2, #2
 8003836:	4620      	mov	r0, r4
 8003838:	f002 fa62 	bl	8005d00 <chOQWriteTimeout>
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
 800383c:	1e82      	subs	r2, r0, #2
 800383e:	4251      	negs	r1, r2
 8003840:	4151      	adcs	r1, r2
 8003842:	200b      	movs	r0, #11
 8003844:	f7fe f81c 	bl	8001880 <_test_assert>
 8003848:	2800      	cmp	r0, #0
 800384a:	f47f af50 	bne.w	80036ee <queues2_execute.8268+0xde>
 800384e:	f385 8811 	msr	BASEPRI, r5
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8003852:	68a3      	ldr	r3, [r4, #8]
  test_assert_lock(12, chOQIsFullI(&oq), "not full");
 8003854:	200c      	movs	r0, #12
 8003856:	f1d3 0101 	rsbs	r1, r3, #1
 800385a:	bf38      	it	cc
 800385c:	2100      	movcc	r1, #0
 800385e:	f7fe f80f 	bl	8001880 <_test_assert>
 8003862:	2800      	cmp	r0, #0
 8003864:	f47f af40 	bne.w	80036e8 <queues2_execute.8268+0xd8>
 8003868:	2100      	movs	r1, #0
 800386a:	f381 8811 	msr	BASEPRI, r1

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 800386e:	220a      	movs	r2, #10
 8003870:	4806      	ldr	r0, [pc, #24]	; (800388c <queues2_execute.8268+0x27c>)
 8003872:	f002 f9fd 	bl	8005c70 <chOQPutTimeout>
 8003876:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 800387a:	4242      	negs	r2, r0
 800387c:	eb52 0100 	adcs.w	r1, r2, r0
 8003880:	200d      	movs	r0, #13
}
 8003882:	b003      	add	sp, #12
 8003884:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  n = chOQWriteTimeout(&oq, wa[1], TEST_QUEUES_SIZE / 2, TIME_IMMEDIATE);
  test_assert(11, n == TEST_QUEUES_SIZE / 2, "wrong returned size");
  test_assert_lock(12, chOQIsFullI(&oq), "not full");

  /* Timeout */
  test_assert(13, chOQPutTimeout(&oq, 0, 10) == Q_TIMEOUT, "wrong timeout return");
 8003888:	f7fd bffa 	b.w	8001880 <_test_assert>
 800388c:	20000c98 	.word	0x20000c98
 8003890:	0800a210 	.word	0x0800a210
 8003894:	20001990 	.word	0x20001990
 8003898:	20001eb8 	.word	0x20001eb8
 800389c:	08005cc1 	.word	0x08005cc1
 80038a0:	20001848 	.word	0x20001848
 80038a4:	20002008 	.word	0x20002008
 80038a8:	f3af 8000 	nop.w
 80038ac:	f3af 8000 	nop.w

080038b0 <si446x_spi>:
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 80038b4:	2400      	movs	r4, #0
};

/*
 * Si446x spi comms - blocking using the DMA driver from ChibiOS
*/
uint8_t si446x_spi( uint8_t tx_bytes, uint8_t* tx_buff, uint8_t rx_bytes, uint8_t* rx_buff){
 80038b6:	b08b      	sub	sp, #44	; 0x2c
 80038b8:	4607      	mov	r7, r0
 80038ba:	460e      	mov	r6, r1
 80038bc:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint8_t dummy_buffer[20]={};/*For dummy data*/
 80038c0:	9405      	str	r4, [sp, #20]
 80038c2:	9406      	str	r4, [sp, #24]
 80038c4:	9407      	str	r4, [sp, #28]
 80038c6:	9408      	str	r4, [sp, #32]
 80038c8:	9409      	str	r4, [sp, #36]	; 0x24
 80038ca:	f04f 0820 	mov.w	r8, #32
 80038ce:	f388 8811 	msr	BASEPRI, r8
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80038d2:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8003a20 <si446x_spi+0x170>
 80038d6:	2101      	movs	r1, #1
 80038d8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80038dc:	891a      	ldrh	r2, [r3, #8]
 80038de:	6858      	ldr	r0, [r3, #4]
 80038e0:	fa01 f502 	lsl.w	r5, r1, r2
 80038e4:	6145      	str	r5, [r0, #20]
 80038e6:	f384 8811 	msr	BASEPRI, r4
 80038ea:	f388 8811 	msr	BASEPRI, r8
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80038ee:	4639      	mov	r1, r7
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80038f0:	f641 67b8 	movw	r7, #7864	; 0x1eb8
 80038f4:	2503      	movs	r5, #3
 80038f6:	4650      	mov	r0, sl
 80038f8:	4632      	mov	r2, r6
 80038fa:	ab05      	add	r3, sp, #20
 80038fc:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8003900:	f88a 5000 	strb.w	r5, [sl]
 8003904:	f003 ff54 	bl	80077b0 <spi_lld_exchange>
 8003908:	69be      	ldr	r6, [r7, #24]
 800390a:	ab0a      	add	r3, sp, #40	; 0x28
 800390c:	f10a 0208 	add.w	r2, sl, #8
 8003910:	f843 2d1c 	str.w	r2, [r3, #-28]!
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wtobjp = &trp;
 8003914:	6233      	str	r3, [r6, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8003916:	4628      	mov	r0, r5
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8003918:	f8ca 6008 	str.w	r6, [sl, #8]
  tp->p_u.wtobjp = &trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 800391c:	f7fe fac0 	bl	8001ea0 <chSchGoSleepS>
 8003920:	f384 8811 	msr	BASEPRI, r4
 8003924:	f388 8811 	msr	BASEPRI, r8

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8003928:	4650      	mov	r0, sl
 800392a:	f003 ff61 	bl	80077f0 <spi_lld_unselect>
 800392e:	f384 8811 	msr	BASEPRI, r4
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
 8003932:	2044      	movs	r0, #68	; 0x44
 8003934:	f88d 0014 	strb.w	r0, [sp, #20]
 8003938:	f388 8811 	msr	BASEPRI, r8
 800393c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8003940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003942:	f384 8811 	msr	BASEPRI, r4
	uint32_t millis = MS2ST(chVTGetSystemTime());
 8003946:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
 800394a:	fa1f f981 	uxth.w	r9, r1
 800394e:	fb06 f409 	mul.w	r4, r6, r9
 8003952:	f644 55d3 	movw	r5, #19923	; 0x4dd3
 8003956:	f104 33ff 	add.w	r3, r4, #4294967295
 800395a:	f2c1 0562 	movt	r5, #4194	; 0x1062
 800395e:	fba5 2003 	umull	r2, r0, r5, r3
 8003962:	ea4f 1290 	mov.w	r2, r0, lsr #6
 8003966:	f102 0101 	add.w	r1, r2, #1
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 800396a:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	uint8_t dummy_buffer[20]={};/*For dummy data*/
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
 800396e:	fa1f f981 	uxth.w	r9, r1
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 8003972:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003976:	e013      	b.n	80039a0 <si446x_spi+0xf0>
		chThdSleepMicroseconds(20);
 8003978:	f003 ffea 	bl	8007950 <chThdSleep>
 800397c:	f388 8811 	msr	BASEPRI, r8
 8003980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003982:	f38b 8811 	msr	BASEPRI, fp
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
 8003986:	b28b      	uxth	r3, r1
 8003988:	fb06 f303 	mul.w	r3, r6, r3
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	fba5 1002 	umull	r1, r0, r5, r2
 8003992:	0981      	lsrs	r1, r0, #6
 8003994:	1c4b      	adds	r3, r1, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	ebc9 0002 	rsb	r0, r9, r2
 800399c:	280a      	cmp	r0, #10
 800399e:	d80a      	bhi.n	80039b6 <si446x_spi+0x106>
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80039a0:	68a3      	ldr	r3, [r4, #8]
		chThdSleepMicroseconds(20);
 80039a2:	2001      	movs	r0, #1
	spiSelect(&SPID1); /* Slave Select assertion. */
	spiExchange(&SPID1, tx_bytes, tx_buff, dummy_buffer); /* Atomic transfer operations. */
	spiUnselect(&SPID1); /* Slave Select de-assertion. */
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
 80039a4:	f413 6b00 	ands.w	fp, r3, #2048	; 0x800
 80039a8:	d0e6      	beq.n	8003978 <si446x_spi+0xc8>
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
		}
	}/*Wait for CTS high*/
	if(rx_bytes) {
 80039aa:	9a00      	ldr	r2, [sp, #0]
 80039ac:	b92a      	cbnz	r2, 80039ba <si446x_spi+0x10a>
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 80039ae:	9800      	ldr	r0, [sp, #0]
}
 80039b0:	b00b      	add	sp, #44	; 0x2c
 80039b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dummy_buffer[0]=0x44;/*Silabs read command*/
	uint32_t millis = MS2ST(chVTGetSystemTime());
	while(!palReadPad(GPIOB, GPIOB_CTS)){
		chThdSleepMicroseconds(20);
		if((MS2ST(chVTGetSystemTime())-millis)>10){/*Silabs stalled*/
			return 1;		
 80039b6:	2001      	movs	r0, #1
 80039b8:	e7fa      	b.n	80039b0 <si446x_spi+0x100>
 80039ba:	2520      	movs	r5, #32
 80039bc:	f385 8811 	msr	BASEPRI, r5
 80039c0:	f8da 6004 	ldr.w	r6, [sl, #4]
 80039c4:	8934      	ldrh	r4, [r6, #8]
 80039c6:	6873      	ldr	r3, [r6, #4]
 80039c8:	fa00 f104 	lsl.w	r1, r0, r4
 80039cc:	2400      	movs	r4, #0
 80039ce:	6159      	str	r1, [r3, #20]
 80039d0:	f384 8811 	msr	BASEPRI, r4
 80039d4:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80039d8:	2603      	movs	r6, #3
 80039da:	9900      	ldr	r1, [sp, #0]
 80039dc:	aa05      	add	r2, sp, #20
 80039de:	9b01      	ldr	r3, [sp, #4]
 80039e0:	480f      	ldr	r0, [pc, #60]	; (8003a20 <si446x_spi+0x170>)
 80039e2:	f88a 6000 	strb.w	r6, [sl]
 80039e6:	f003 fee3 	bl	80077b0 <spi_lld_exchange>
 80039ea:	f641 62b8 	movw	r2, #7864	; 0x1eb8
 80039ee:	480d      	ldr	r0, [pc, #52]	; (8003a24 <si446x_spi+0x174>)
 80039f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80039f4:	ab0a      	add	r3, sp, #40	; 0x28
 80039f6:	6992      	ldr	r2, [r2, #24]
 80039f8:	f843 0d18 	str.w	r0, [r3, #-24]!
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wtobjp = &trp;
 80039fc:	6213      	str	r3, [r2, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80039fe:	4630      	mov	r0, r6
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8003a00:	f8ca 2008 	str.w	r2, [sl, #8]
  tp->p_u.wtobjp = &trp;
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8003a04:	f7fe fa4c 	bl	8001ea0 <chSchGoSleepS>
 8003a08:	f384 8811 	msr	BASEPRI, r4
 8003a0c:	f385 8811 	msr	BASEPRI, r5

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <si446x_spi+0x170>)
 8003a12:	f003 feed 	bl	80077f0 <spi_lld_unselect>
 8003a16:	f384 8811 	msr	BASEPRI, r4
	if(rx_bytes) {
		spiSelect(&SPID1); /* Slave Select assertion. */
		spiExchange(&SPID1, rx_bytes, dummy_buffer, rx_buff); /* Atomic transfer operations. */
		spiUnselect(&SPID1); /* Slave Select de-assertion. */
	}
	return 0;
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	e7c8      	b.n	80039b0 <si446x_spi+0x100>
 8003a1e:	bf00      	nop
 8003a20:	200017a8 	.word	0x200017a8
 8003a24:	200017b0 	.word	0x200017b0
 8003a28:	f3af 8000 	nop.w
 8003a2c:	f3af 8000 	nop.w

08003a30 <si446x_set_frequency>:
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8003a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8003a34:	f247 233f 	movw	r3, #29247	; 0x723f
 8003a38:	f6c2 2305 	movt	r3, #10757	; 0x2a05
 8003a3c:	4298      	cmp	r0, r3
/**
  * @brief  This function sets silabs center frequency
  * @param  Center frequency in Hz
  * @retval None
  */
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
 8003a3e:	b087      	sub	sp, #28
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8003a40:	f200 80b0 	bhi.w	8003ba4 <si446x_set_frequency+0x174>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8003a44:	f64d 513f 	movw	r1, #56639	; 0xdd3f
 8003a48:	f6c1 714a 	movt	r1, #8010	; 0x1f4a
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	f200 80ae 	bhi.w	8003bae <si446x_set_frequency+0x17e>
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8003a52:	f645 253f 	movw	r5, #23103	; 0x5a3f
 8003a56:	f2c1 550a 	movt	r5, #5386	; 0x150a
 8003a5a:	42a8      	cmp	r0, r5
 8003a5c:	f200 80b5 	bhi.w	8003bca <si446x_set_frequency+0x19a>
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8003a60:	f64d 13bf 	movw	r3, #55743	; 0xd9bf
 8003a64:	f6c0 633e 	movt	r3, #3646	; 0xe3e
 8003a68:	4298      	cmp	r0, r3
 8003a6a:	f200 80a9 	bhi.w	8003bc0 <si446x_set_frequency+0x190>
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
 8003a6e:	f64c 623f 	movw	r2, #52799	; 0xce3f
 8003a72:	f6c0 228c 	movt	r2, #2700	; 0xa8c
 8003a76:	4290      	cmp	r0, r2
 8003a78:	4c56      	ldr	r4, [pc, #344]	; (8003bd4 <si446x_set_frequency+0x1a4>)
 8003a7a:	f200 809d 	bhi.w	8003bb8 <si446x_set_frequency+0x188>
 8003a7e:	2118      	movs	r1, #24
 8003a80:	7021      	strb	r1, [r4, #0]
 8003a82:	270d      	movs	r7, #13
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
 8003a84:	f44f 45ea 	mov.w	r5, #29952	; 0x7500
 8003a88:	f2c0 3519 	movt	r5, #793	; 0x319
 8003a8c:	fbb5 f5f1 	udiv	r5, r5, r1
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8003a90:	fbb0 f8f5 	udiv	r8, r0, r5
	float ratio = (float)freq / (float)f_pfd;
 8003a94:	f7fd fb62 	bl	800115c <__aeabi_ui2f>
 8003a98:	4606      	mov	r6, r0
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7fd fb5e 	bl	800115c <__aeabi_ui2f>
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	f7fd fc68 	bl	8001378 <__aeabi_fdiv>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
 8003aa8:	f108 38ff 	add.w	r8, r8, #4294967295
	float ratio = (float)freq / (float)f_pfd;
 8003aac:	4605      	mov	r5, r0
	float rest = ratio - (float)n;
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7fd fb54 	bl	800115c <__aeabi_ui2f>
 8003ab4:	4601      	mov	r1, r0
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f7fd fa9e 	bl	8000ff8 <__aeabi_fsub>
	uint32_t m = (unsigned long)(rest * 524288UL);
 8003abc:	f04f 4192 	mov.w	r1, #1224736768	; 0x49000000
 8003ac0:	f7fd fba6 	bl	8001210 <__aeabi_fmul>
 8003ac4:	f7fd fd94 	bl	80015f0 <__aeabi_f2uiz>
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 8003ac8:	f8df e114 	ldr.w	lr, [pc, #276]	; 8003be0 <si446x_set_frequency+0x1b0>
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8003acc:	2611      	movs	r6, #17
 8003ace:	2501      	movs	r5, #1
	if (freq < 177000000UL) { Outdiv = 24; band = 5;};
	uint32_t f_pfd = 2 * VCXO_FREQ / Outdiv;
	uint32_t n = ((uint32_t)(freq / f_pfd)) - 1;
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
 8003ad0:	4681      	mov	r9, r0
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003ad2:	a902      	add	r1, sp, #8
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	ab01      	add	r3, sp, #4
 8003ad8:	2005      	movs	r0, #5
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8003ada:	f04f 0a20 	mov.w	sl, #32
 8003ade:	f04f 0b51 	mov.w	fp, #81	; 0x51
	float ratio = (float)freq / (float)f_pfd;
	float rest = ratio - (float)n;
	uint32_t m = (unsigned long)(rest * 524288UL);
	// set the band parameter
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
 8003ae2:	f88e 7000 	strb.w	r7, [lr]
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
 8003ae6:	f88d a009 	strb.w	sl, [sp, #9]
 8003aea:	f88d b00b 	strb.w	fp, [sp, #11]
 8003aee:	f88d 700c 	strb.w	r7, [sp, #12]
 8003af2:	f88d 6008 	strb.w	r6, [sp, #8]
 8003af6:	f88d 500a 	strb.w	r5, [sp, #10]
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003afa:	f7ff fed9 	bl	80038b0 <si446x_spi>
 8003afe:	4682      	mov	sl, r0
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
 8003b00:	f994 0000 	ldrsb.w	r0, [r4]
 8003b04:	4c34      	ldr	r4, [pc, #208]	; (8003bd8 <si446x_set_frequency+0x1a8>)
 8003b06:	04c7      	lsls	r7, r0, #19
 8003b08:	8823      	ldrh	r3, [r4, #0]
 8003b0a:	f64e 00a5 	movw	r0, #59557	; 0xe8a5
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	fb01 f207 	mul.w	r2, r1, r7
 8003b14:	f2ca 5030 	movt	r0, #42288	; 0xa530
 8003b18:	fba0 2302 	umull	r2, r3, r0, r2
	uint32_t sy_sel = 8;
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
 8003b1c:	ea4f 4719 	mov.w	r7, r9, lsr #16
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8003b20:	2400      	movs	r4, #0
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8003b22:	eba9 4907 	sub.w	r9, r9, r7, lsl #16
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8003b26:	f04f 0b40 	mov.w	fp, #64	; 0x40
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
 8003b2a:	ea4f 6e53 	mov.w	lr, r3, lsr #25
	Active_banddiv=sy_sel+band;
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x20, 0x01, 0x51, Active_banddiv}, 5*sizeof(uint8_t));
	failure=si446x_spi( 5, tx_buffer, 0, rx_buffer);
	// Set the pll parameters
	uint32_t m2 = m / 0x10000;
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
 8003b2e:	ea4f 2c19 	mov.w	ip, r9, lsr #8
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8003b32:	a902      	add	r1, sp, #8
 8003b34:	4622      	mov	r2, r4
 8003b36:	ab01      	add	r3, sp, #4
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8003b38:	f88d b009 	strb.w	fp, [sp, #9]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8003b3c:	200a      	movs	r0, #10
	uint32_t m1 = (m - m2 * 0x10000) / 0x100;
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
 8003b3e:	f04f 0b06 	mov.w	fp, #6
 8003b42:	f88d 400b 	strb.w	r4, [sp, #11]
 8003b46:	f88d 700d 	strb.w	r7, [sp, #13]
 8003b4a:	f88d c00e 	strb.w	ip, [sp, #14]
 8003b4e:	f88d 4010 	strb.w	r4, [sp, #16]
 8003b52:	f88d e011 	strb.w	lr, [sp, #17]
 8003b56:	f88d 6008 	strb.w	r6, [sp, #8]
 8003b5a:	f88d b00a 	strb.w	fp, [sp, #10]
 8003b5e:	f88d 800c 	strb.w	r8, [sp, #12]
 8003b62:	f88d 900f 	strb.w	r9, [sp, #15]
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8003b66:	f7ff fea3 	bl	80038b0 <si446x_spi>
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8003b6a:	491c      	ldr	r1, [pc, #112]	; (8003bdc <si446x_set_frequency+0x1ac>)
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003b6c:	4622      	mov	r2, r4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8003b6e:	780f      	ldrb	r7, [r1, #0]
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8003b70:	ea40 0a0a 	orr.w	sl, r0, sl
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003b74:	a902      	add	r1, sp, #8
 8003b76:	2005      	movs	r0, #5
 8003b78:	ab01      	add	r3, sp, #4
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
 8003b7a:	2422      	movs	r4, #34	; 0x22
 8003b7c:	f88d 6008 	strb.w	r6, [sp, #8]
 8003b80:	f88d 4009 	strb.w	r4, [sp, #9]
 8003b84:	f88d 500a 	strb.w	r5, [sp, #10]
 8003b88:	f88d 500b 	strb.w	r5, [sp, #11]
 8003b8c:	f88d 700c 	strb.w	r7, [sp, #12]
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003b90:	f7ff fe8e 	bl	80038b0 <si446x_spi>
	uint32_t m0 = (m - m2 * 0x10000 - m1 * 0x100);
	uint32_t channel_increment = 524288 * Outdiv * Active_shift / (2 * VCXO_FREQ);
	uint8_t c1 = channel_increment / 0x100;
	uint8_t c0 = channel_increment - (0x100 * c1);
	memcpy(tx_buffer, (uint8_t [10]){0x11, 0x40, 0x06, 0x00, n, m2, m1, m0, c1, c0}, 10*sizeof(uint8_t));
	failure|=si446x_spi( 10, tx_buffer, 0, rx_buffer);
 8003b94:	fa5f fa8a 	uxtb.w	sl, sl
	// Set the Power
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x22, 0x01, 0x01, Active_level}, 5*sizeof(uint8_t));
	failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003b98:	ea4a 0200 	orr.w	r2, sl, r0
	return failure;
 8003b9c:	b2d0      	uxtb	r0, r2
}
 8003b9e:	b007      	add	sp, #28
 8003ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba4:	4c0b      	ldr	r4, [pc, #44]	; (8003bd4 <si446x_set_frequency+0x1a4>)
uint8_t si446x_set_frequency(uint32_t freq) {/*Set the output divider according to recommended ranges given in Si446x datasheet*/
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
 8003ba6:	2708      	movs	r7, #8
 8003ba8:	f994 1000 	ldrsb.w	r1, [r4]
 8003bac:	e76a      	b.n	8003a84 <si446x_set_frequency+0x54>
 8003bae:	4c09      	ldr	r4, [pc, #36]	; (8003bd4 <si446x_set_frequency+0x1a4>)
 8003bb0:	2206      	movs	r2, #6
 8003bb2:	7022      	strb	r2, [r4, #0]
 8003bb4:	2709      	movs	r7, #9
 8003bb6:	e7f7      	b.n	8003ba8 <si446x_set_frequency+0x178>
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
	if (freq < 239000000UL) { Outdiv = 16; band = 4;};
 8003bb8:	2110      	movs	r1, #16
 8003bba:	7021      	strb	r1, [r4, #0]
 8003bbc:	270c      	movs	r7, #12
 8003bbe:	e761      	b.n	8003a84 <si446x_set_frequency+0x54>
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
	if (freq < 353000000UL) { Outdiv = 12; band = 3;};
 8003bc0:	4c04      	ldr	r4, [pc, #16]	; (8003bd4 <si446x_set_frequency+0x1a4>)
 8003bc2:	270c      	movs	r7, #12
 8003bc4:	7027      	strb	r7, [r4, #0]
 8003bc6:	270b      	movs	r7, #11
 8003bc8:	e7ee      	b.n	8003ba8 <si446x_set_frequency+0x178>
	uint8_t band = 0;
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	uint8_t failure=0;
	if (freq < 705000000UL) { Outdiv = 6; band = 1;};
	if (freq < 525000000UL) { Outdiv = 8; band = 2;};
 8003bca:	4c02      	ldr	r4, [pc, #8]	; (8003bd4 <si446x_set_frequency+0x1a4>)
 8003bcc:	2608      	movs	r6, #8
 8003bce:	7026      	strb	r6, [r4, #0]
 8003bd0:	270a      	movs	r7, #10
 8003bd2:	e7e9      	b.n	8003ba8 <si446x_set_frequency+0x178>
 8003bd4:	20000814 	.word	0x20000814
 8003bd8:	20000810 	.word	0x20000810
 8003bdc:	20000813 	.word	0x20000813
 8003be0:	20000812 	.word	0x20000812
 8003be4:	f3af 8000 	nop.w
 8003be8:	f3af 8000 	nop.w
 8003bec:	f3af 8000 	nop.w

08003bf0 <si446x_initialise>:
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Reset the radio */
	SDN_HIGH;
 8003bf4:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8003bf8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8003bfc:	f44f 7500 	mov.w	r5, #512	; 0x200
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
 8003c00:	b0ad      	sub	sp, #180	; 0xb4
	/* Reset the radio */
	SDN_HIGH;
	chThdSleepMilliseconds(10);
 8003c02:	2014      	movs	r0, #20
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
}

void si446x_initialise(void) {
	/* Reset the radio */
	SDN_HIGH;
 8003c04:	6125      	str	r5, [r4, #16]
	chThdSleepMilliseconds(10);
 8003c06:	f003 fea3 	bl	8007950 <chThdSleep>
	SDN_LOW;						/*Radio is now reset*/
 8003c0a:	6165      	str	r5, [r4, #20]
	chThdSleepMilliseconds(10);				/*Wait another 10ms to boot*/
 8003c0c:	2014      	movs	r0, #20
 8003c0e:	f003 fe9f 	bl	8007950 <chThdSleep>
	while(!palReadPad(GPIOB, GPIOB_CTS)){chThdSleepMilliseconds(10);}/*Wait for CTS high after POR*/
 8003c12:	68a3      	ldr	r3, [r4, #8]
 8003c14:	051a      	lsls	r2, r3, #20
 8003c16:	d5f9      	bpl.n	8003c0c <si446x_initialise+0x1c>
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8003c18:	4c0b      	ldr	r4, [pc, #44]	; (8003c48 <si446x_initialise+0x58>)
 8003c1a:	2701      	movs	r7, #1
 8003c1c:	2602      	movs	r6, #2
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8003c1e:	4632      	mov	r2, r6
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8003c20:	7026      	strb	r6, [r4, #0]
 8003c22:	7067      	strb	r7, [r4, #1]
 8003c24:	70a7      	strb	r7, [r4, #2]
 8003c26:	70e7      	strb	r7, [r4, #3]
 8003c28:	258c      	movs	r5, #140	; 0x8c
 8003c2a:	26ba      	movs	r6, #186	; 0xba
 8003c2c:	2780      	movs	r7, #128	; 0x80
 8003c2e:	7125      	strb	r5, [r4, #4]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8003c30:	2007      	movs	r0, #7
 8003c32:	4621      	mov	r1, r4
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <si446x_initialise+0x5c>)
	//divide VCXO_FREQ into its bytes; MSB first
	uint8_t x3 = VCXO_FREQ / 0x1000000;
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
 8003c36:	7166      	strb	r6, [r4, #5]
 8003c38:	71a7      	strb	r7, [r4, #6]
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8003c3a:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	uint8_t x2 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000) / 0x10000;
	uint8_t x1 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000) / 0x100;
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
 8003c3e:	f7ff fe37 	bl	80038b0 <si446x_spi>
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
 8003c42:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8003c46:	e006      	b.n	8003c56 <si446x_initialise+0x66>
 8003c48:	20001794 	.word	0x20001794
 8003c4c:	200017f8 	.word	0x200017f8
 8003c50:	2014      	movs	r0, #20
 8003c52:	f003 fe7d 	bl	8007950 <chThdSleep>
 8003c56:	68a8      	ldr	r0, [r5, #8]
 8003c58:	68aa      	ldr	r2, [r5, #8]
 8003c5a:	f000 0101 	and.w	r1, r0, #1
 8003c5e:	f3c2 2380 	ubfx	r3, r2, #10, #1
 8003c62:	f083 0601 	eor.w	r6, r3, #1
 8003c66:	ea56 0301 	orrs.w	r3, r6, r1
 8003c6a:	d1f1      	bne.n	8003c50 <si446x_initialise+0x60>
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8003c6c:	2500      	movs	r5, #0
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8003c6e:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8003fc4 <si446x_initialise+0x3d4>
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8003c72:	2720      	movs	r7, #32
	si446x_spi( 4, tx_buffer, 0, NULL);
 8003c74:	462a      	mov	r2, r5
 8003c76:	462b      	mov	r3, r5
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8003c78:	7027      	strb	r7, [r4, #0]
	si446x_spi( 4, tx_buffer, 0, NULL);
 8003c7a:	49cd      	ldr	r1, [pc, #820]	; (8003fb0 <si446x_initialise+0x3c0>)
 8003c7c:	2004      	movs	r0, #4
	uint8_t x0 = (VCXO_FREQ - (uint32_t)x3 * 0x1000000 - (uint32_t)x2 * 0x10000 - (uint32_t)x1 * 0x100); 
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
 8003c7e:	7065      	strb	r5, [r4, #1]
 8003c80:	70a5      	strb	r5, [r4, #2]
 8003c82:	70e5      	strb	r5, [r4, #3]
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8003c84:	4ecb      	ldr	r6, [pc, #812]	; (8003fb4 <si446x_initialise+0x3c4>)
	memcpy(tx_buffer, (uint8_t [7]){0x02, 0x01, 0x01, x3, x2, x1, x0}, 7*sizeof(uint8_t));
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
 8003c86:	f7ff fe13 	bl	80038b0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8003c8a:	f838 eb04 	ldrh.w	lr, [r8], #4
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8003c8e:	4633      	mov	r3, r6
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8003c90:	f8a4 e000 	strh.w	lr, [r4]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8003c94:	220c      	movs	r2, #12
 8003c96:	49c6      	ldr	r1, [pc, #792]	; (8003fb0 <si446x_initialise+0x3c0>)
 8003c98:	2002      	movs	r0, #2
	/*Now send the command over SPI1*/
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
 8003c9a:	f8ad e008 	strh.w	lr, [sp, #8]
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8003c9e:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8003fc8 <si446x_initialise+0x3d8>
	si446x_spi( 7, tx_buffer, 2, rx_buffer);
	while(GET_NIRQ|(!palReadPad(GPIOB, GPIOB_POR))){chThdSleepMilliseconds(10);}/*Wait for NIRQ low and POR high*/
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
 8003ca2:	f7ff fe05 	bl	80038b0 <si446x_spi>
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8003ca6:	e898 0003 	ldmia.w	r8, {r0, r1}
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8003caa:	f8b6 c003 	ldrh.w	ip, [r6, #3]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8003cae:	9007      	str	r0, [sp, #28]
 8003cb0:	f8ad 1020 	strh.w	r1, [sp, #32]
 8003cb4:	a807      	add	r0, sp, #28
 8003cb6:	c803      	ldmia	r0, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, NULL);
 8003cb8:	462b      	mov	r3, r5
	memcpy(tx_buffer, (uint8_t [4]){0x20, 0x00, 0x00, 0x00}, 4*sizeof(uint8_t));/*Clear all interrupts*/
	si446x_spi( 4, tx_buffer, 0, NULL);
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
 8003cba:	f8a9 c000 	strh.w	ip, [r9]
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
 8003cbe:	462a      	mov	r2, r5
	memcpy(tx_buffer, (uint8_t [2]){0x01, 0x01}, 2*sizeof(uint8_t));
	si446x_spi( 2, tx_buffer, 12, rx_buffer);
	part=rx_buffer[3];//Should be 0x44
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
 8003cc0:	6020      	str	r0, [r4, #0]
 8003cc2:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, NULL);
 8003cc4:	2006      	movs	r0, #6
 8003cc6:	49ba      	ldr	r1, [pc, #744]	; (8003fb0 <si446x_initialise+0x3c0>)
 8003cc8:	f7ff fdf2 	bl	80038b0 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8003ccc:	4aba      	ldr	r2, [pc, #744]	; (8003fb8 <si446x_initialise+0x3c8>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003cce:	a924      	add	r1, sp, #144	; 0x90
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8003cd0:	6810      	ldr	r0, [r2, #0]
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003cd2:	9100      	str	r1, [sp, #0]
	Silabs_Part_ID=*((uint16_t*)(&rx_buffer[3]));/* This can now be used to check that part */
	//Only enable the packet received interrupt - global interrupt config and PH interrupt config bytes
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x01, 0x02, 0x00, 0x01, 0x10}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, NULL);
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
 8003cd4:	f7ff feac 	bl	8003a30 <si446x_set_frequency>
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8003cd8:	4bb8      	ldr	r3, [pc, #736]	; (8003fbc <si446x_initialise+0x3cc>)
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003cda:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8003cde:	f993 7000 	ldrsb.w	r7, [r3]
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003ce2:	f04f 0a11 	mov.w	sl, #17
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8003ce6:	04b8      	lsls	r0, r7, #18
 8003ce8:	f7fd fa3c 	bl	8001164 <__aeabi_i2f>
 8003cec:	f645 5140 	movw	r1, #23872	; 0x5d40
 8003cf0:	f6c4 31c6 	movt	r1, #19398	; 0x4bc6
 8003cf4:	f7fd fb40 	bl	8001378 <__aeabi_fdiv>
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f2c4 3196 	movt	r1, #17302	; 0x4396
void si446x_set_deviation_channel_bps(uint32_t deviation, uint32_t channel_space, uint32_t bps) {
	uint8_t tx_buffer[16];
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
 8003cfe:	4681      	mov	r9, r0
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 8003d00:	f7fd fa86 	bl	8001210 <__aeabi_fmul>
 8003d04:	f7fc fe70 	bl	80009e8 <__aeabi_f2d>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8003d10:	f7fc febe 	bl	8000a90 <__aeabi_dmul>
 8003d14:	f7fd f8fc 	bl	8000f10 <__aeabi_d2uiz>
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003d18:	2720      	movs	r7, #32
	uint8_t rx_buffer[2];
	//Make sure that Si446x::sendFrequencyToSi446x() was called before this function, so that we have set the global variable 'Outdiv' properly
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
 8003d1a:	4686      	mov	lr, r0
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8003d1c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8003d20:	9001      	str	r0, [sp, #4]
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003d22:	f88d 70a1 	strb.w	r7, [sp, #161]	; 0xa1
 8003d26:	270a      	movs	r7, #10
 8003d28:	f88d 70a3 	strb.w	r7, [sp, #163]	; 0xa3
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8003d2c:	9f01      	ldr	r7, [sp, #4]
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8003d2e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003d32:	462a      	mov	r2, r5
 8003d34:	ab24      	add	r3, sp, #144	; 0x90
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003d36:	f04f 0b03 	mov.w	fp, #3
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	2007      	movs	r0, #7
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
 8003d3e:	f88d c0a5 	strb.w	ip, [sp, #165]	; 0xa5
	//Outdiv = 8;
	float units_per_hz = (( 0x40000 * Outdiv ) / (float)VCXO_FREQ);
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
 8003d42:	f88d e0a6 	strb.w	lr, [sp, #166]	; 0xa6
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003d46:	f88d b0a2 	strb.w	fp, [sp, #162]	; 0xa2
	// Set deviation for RTTY
	uint32_t modem_freq_dev = (uint32_t)(units_per_hz * deviation / 2.0 );
	uint32_t mask = 0b11111111;
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
 8003d4a:	f88d 70a4 	strb.w	r7, [sp, #164]	; 0xa4
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003d4e:	f88d a0a0 	strb.w	sl, [sp, #160]	; 0xa0
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003d52:	f7ff fdad 	bl	80038b0 <si446x_spi>
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
 8003d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d5a:	4648      	mov	r0, r9
 8003d5c:	f2c4 513b 	movt	r1, #17723	; 0x453b
 8003d60:	f7fd fa56 	bl	8001210 <__aeabi_fmul>
 8003d64:	f7fc fe40 	bl	80009e8 <__aeabi_f2d>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8003d70:	f7fc fe8e 	bl	8000a90 <__aeabi_dmul>
 8003d74:	f7fd f8cc 	bl	8000f10 <__aeabi_d2uiz>
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8003d78:	f04f 0702 	mov.w	r7, #2
	uint8_t modem_freq_dev_0 = mask & modem_freq_dev;
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
 8003d7c:	4686      	mov	lr, r0
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8003d7e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003d82:	4641      	mov	r1, r8
 8003d84:	462a      	mov	r2, r5
 8003d86:	ab24      	add	r3, sp, #144	; 0x90
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8003d88:	f88d 70a2 	strb.w	r7, [sp, #162]	; 0xa2
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003d8c:	2006      	movs	r0, #6
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8003d8e:	2704      	movs	r7, #4
 8003d90:	f04f 0940 	mov.w	r9, #64	; 0x40
 8003d94:	f88d 90a1 	strb.w	r9, [sp, #161]	; 0xa1
 8003d98:	f88d 70a3 	strb.w	r7, [sp, #163]	; 0xa3
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
 8003d9c:	f88d c0a4 	strb.w	ip, [sp, #164]	; 0xa4
	uint8_t modem_freq_dev_1 = mask & (modem_freq_dev >> 8);
	uint8_t modem_freq_dev_2 = mask & (modem_freq_dev >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x0A, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
 8003da0:	f88d e0a5 	strb.w	lr, [sp, #165]	; 0xa5
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
 8003da4:	f88d a0a0 	strb.w	sl, [sp, #160]	; 0xa0
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003da8:	f7ff fd82 	bl	80038b0 <si446x_spi>
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8003dac:	4a84      	ldr	r2, [pc, #528]	; (8003fc0 <si446x_initialise+0x3d0>)
 8003dae:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 8003db2:	7813      	ldrb	r3, [r2, #0]
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003db4:	4641      	mov	r1, r8
	uint32_t channel_spacing = (uint32_t)(units_per_hz * channel_space / 2.0 );
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
 8003db6:	fb00 fe03 	mul.w	lr, r0, r3
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003dba:	462a      	mov	r2, r5
 8003dbc:	2007      	movs	r0, #7
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 8003dbe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003dc2:	ab24      	add	r3, sp, #144	; 0x90
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003dc4:	2720      	movs	r7, #32
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
	modem_freq_dev_1 = mask & (bps >> 8);
 8003dc6:	f88d c0a5 	strb.w	ip, [sp, #165]	; 0xa5
	modem_freq_dev_0 = mask & channel_spacing ;
	modem_freq_dev_1 = mask & (channel_spacing >> 8);
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x40, 0x02, 0x04, modem_freq_dev_1, modem_freq_dev_0}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	bps*=Active_banddiv;		/*From WDS settings, modem speed is in 0.1bps units, but it seems to scale with the frequency, for Manchester is data bps*/
	modem_freq_dev_0 = mask & bps;
 8003dca:	f88d e0a6 	strb.w	lr, [sp, #166]	; 0xa6
	modem_freq_dev_1 = mask & (bps >> 8);
	modem_freq_dev_2 = mask & (bps >> 16);
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x03, modem_freq_dev_2, modem_freq_dev_1, modem_freq_dev_0}, 7*sizeof(uint8_t));
 8003dce:	f88d 70a1 	strb.w	r7, [sp, #161]	; 0xa1
 8003dd2:	f88d b0a2 	strb.w	fp, [sp, #162]	; 0xa2
 8003dd6:	f88d b0a3 	strb.w	fp, [sp, #163]	; 0xa3
 8003dda:	f88d a0a0 	strb.w	sl, [sp, #160]	; 0xa0
 8003dde:	f88d 50a4 	strb.w	r5, [sp, #164]	; 0xa4
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003de2:	f7ff fd65 	bl	80038b0 <si446x_spi>
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8003de6:	4977      	ldr	r1, [pc, #476]	; (8003fc4 <si446x_initialise+0x3d4>)
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8003de8:	4f76      	ldr	r7, [pc, #472]	; (8003fc4 <si446x_initialise+0x3d4>)
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8003dea:	f851 0f0c 	ldr.w	r0, [r1, #12]!
 8003dee:	ab0f      	add	r3, sp, #60	; 0x3c
 8003df0:	888a      	ldrh	r2, [r1, #4]
 8003df2:	900f      	str	r0, [sp, #60]	; 0x3c
 8003df4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8003df8:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003dfc:	462a      	mov	r2, r5
  * @retval None
  */
void si446x_set_modem(void) {
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
 8003dfe:	6020      	str	r0, [r4, #0]
 8003e00:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8003e02:	4633      	mov	r3, r6
 8003e04:	496a      	ldr	r1, [pc, #424]	; (8003fb0 <si446x_initialise+0x3c0>)
 8003e06:	2005      	movs	r0, #5
 8003e08:	f7ff fd52 	bl	80038b0 <si446x_spi>
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8003e0c:	f857 0f14 	ldr.w	r0, [r7, #20]!
 8003e10:	ab13      	add	r3, sp, #76	; 0x4c
 8003e12:	88b9      	ldrh	r1, [r7, #4]
 8003e14:	79ba      	ldrb	r2, [r7, #6]
 8003e16:	9013      	str	r0, [sp, #76]	; 0x4c
 8003e18:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
 8003e1c:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 8003e20:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8003e24:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8003fc4 <si446x_initialise+0x3d4>
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8003e28:	ea4f 4b11 	mov.w	fp, r1, lsr #16
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003e2c:	462a      	mov	r2, r5
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8003e2e:	6020      	str	r0, [r4, #0]
 8003e30:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003e32:	4633      	mov	r3, r6
	//Set to CW mode
	//Sets modem into direct asynchronous 2FSK mode using packet handler (default config is ok here), no Manchester
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x00, 0x02, 0x00}, 6*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
 8003e34:	f884 b006 	strb.w	fp, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003e38:	495d      	ldr	r1, [pc, #372]	; (8003fb0 <si446x_initialise+0x3c0>)
 8003e3a:	2007      	movs	r0, #7
 8003e3c:	f7ff fd38 	bl	80038b0 <si446x_spi>
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8003e40:	f859 0f1c 	ldr.w	r0, [r9, #28]!
 8003e44:	af18      	add	r7, sp, #96	; 0x60
 8003e46:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003e4a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003e4e:	f8b9 e00c 	ldrh.w	lr, [r9, #12]
 8003e52:	c707      	stmia	r7!, {r0, r1, r2}
 8003e54:	f899 000e 	ldrb.w	r0, [r9, #14]
 8003e58:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8003fb0 <si446x_initialise+0x3c0>
 8003e5c:	f8a7 e000 	strh.w	lr, [r7]
 8003e60:	70b8      	strb	r0, [r7, #2]
 8003e62:	ab18      	add	r3, sp, #96	; 0x60
 8003e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e66:	e8a9 0007 	stmia.w	r9!, {r0, r1, r2}
 8003e6a:	ea4f 4713 	mov.w	r7, r3, lsr #16
 8003e6e:	4649      	mov	r1, r9
 8003e70:	46cb      	mov	fp, r9
 8003e72:	f821 390c 	strh.w	r3, [r1], #-12
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 8003e76:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Also configure the RX packet CRC stuff here, 6 byte payload for FIELD1, using CRC and CRC check for rx with no seed, and 2FSK (note shared register area)
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x12, 0x03, 0x0E, 0x06, 0x00, 0xAA}, 7*sizeof(uint8_t));
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
 8003e78:	f80b 7f02 	strb.w	r7, [fp, #2]!
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
 8003e7c:	4633      	mov	r3, r6
 8003e7e:	200f      	movs	r0, #15
 8003e80:	f7ff fd16 	bl	80038b0 <si446x_spi>
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8003e84:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <si446x_initialise+0x3d4>)
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8003e86:	af11      	add	r7, sp, #68	; 0x44
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure the rx signal path, these setting are from WDS - lower the IF slightly and setup the CIC Rx filter
	memcpy(tx_buffer, (uint8_t [15]){0x11, 0x20, 0x0B, 0x19, 0x80, 0x08, 0x03, 0x80, 0x00, 0xF0, 0x10, 0x74, 0xE8, 0x00, 0x55}, 15*sizeof(uint8_t));
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
 8003e88:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8003e9a:	f1ab 010e 	sub.w	r1, fp, #14
 8003e9e:	462a      	mov	r2, r5
 8003ea0:	4633      	mov	r3, r6
 8003ea2:	2010      	movs	r0, #16
 8003ea4:	f7ff fd04 	bl	80038b0 <si446x_spi>
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8003ea8:	4a46      	ldr	r2, [pc, #280]	; (8003fc4 <si446x_initialise+0x3d4>)
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8003eaa:	f10d 0880 	add.w	r8, sp, #128	; 0x80
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8003eae:	f852 0f3c 	ldr.w	r0, [r2, #60]!
 8003eb2:	8891      	ldrh	r1, [r2, #4]
 8003eb4:	7993      	ldrb	r3, [r2, #6]
 8003eb6:	9011      	str	r0, [sp, #68]	; 0x44
 8003eb8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8003ebc:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8003ec0:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003ec4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003ec8:	f884 c006 	strb.w	ip, [r4, #6]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003ecc:	462a      	mov	r2, r5
	si446x_spi( 15, tx_buffer, 0, rx_buffer);
	//Configure BCR - NCO settings for the RX signal path - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x20, 0x0C, 0x24, 0x06, 0x0C, 0xAB, 0x03, 0x03, 0x02, 0xC2, 0x00, 0x04, 0x32, 0xC0, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
 8003ece:	6020      	str	r0, [r4, #0]
 8003ed0:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
 8003ed2:	4633      	mov	r3, r6
 8003ed4:	f1a9 010c 	sub.w	r1, r9, #12
 8003ed8:	2007      	movs	r0, #7
 8003eda:	f7ff fce9 	bl	80038b0 <si446x_spi>
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8003ede:	4a39      	ldr	r2, [pc, #228]	; (8003fc4 <si446x_initialise+0x3d4>)
 8003ee0:	af0d      	add	r7, sp, #52	; 0x34
 8003ee2:	f852 0f44 	ldr.w	r0, [r2, #68]!
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003ee6:	4633      	mov	r3, r6
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8003ee8:	8891      	ldrh	r1, [r2, #4]
 8003eea:	900d      	str	r0, [sp, #52]	; 0x34
 8003eec:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 8003ef0:	e897 0003 	ldmia.w	r7, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003ef4:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure AFC/AGC settings for Rx path, WDS settings - only change the AFC here, as the other settings are only slightly tweaked by WDS
	memcpy(tx_buffer, (uint8_t [7]){0x11, 0x20, 0x03, 0x30, 0x03, 0x64, 0xC0}, 7*sizeof(uint8_t));//This just sets AFC limiter values
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
 8003ef6:	6020      	str	r0, [r4, #0]
 8003ef8:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003efa:	2006      	movs	r0, #6
 8003efc:	f1a9 010c 	sub.w	r1, r9, #12
 8003f00:	f7ff fcd6 	bl	80038b0 <si446x_spi>
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8003f04:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <si446x_initialise+0x3d4>)
 8003f06:	ab0b      	add	r3, sp, #44	; 0x2c
 8003f08:	f852 0f4c 	ldr.w	r0, [r2, #76]!
 8003f0c:	8897      	ldrh	r7, [r2, #4]
 8003f0e:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f10:	f8ad 7030 	strh.w	r7, [sp, #48]	; 0x30
 8003f14:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003f18:	462a      	mov	r2, r5
	si446x_spi( 7, tx_buffer, 0, rx_buffer);
	//Configure Rx search period control - WDS settings, note that the second setting can be overwritten if the frequency is changed
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x50, 0x84, 0x0A}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
 8003f1a:	6020      	str	r0, [r4, #0]
 8003f1c:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 8003f1e:	4633      	mov	r3, r6
 8003f20:	f1a9 010c 	sub.w	r1, r9, #12
 8003f24:	2006      	movs	r0, #6
 8003f26:	f7ff fcc3 	bl	80038b0 <si446x_spi>
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <si446x_initialise+0x3d4>)
 8003f2c:	ab15      	add	r3, sp, #84	; 0x54
 8003f2e:	f852 0f54 	ldr.w	r0, [r2, #84]!
 8003f32:	f1a9 0e0c 	sub.w	lr, r9, #12
 8003f36:	6851      	ldr	r1, [r2, #4]
 8003f38:	7a17      	ldrb	r7, [r2, #8]
 8003f3a:	c303      	stmia	r3!, {r0, r1}
 8003f3c:	a915      	add	r1, sp, #84	; 0x54
 8003f3e:	701f      	strb	r7, [r3, #0]
 8003f40:	c907      	ldmia	r1, {r0, r1, r2}
 8003f42:	e8ae 0003 	stmia.w	lr!, {r0, r1}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8003f46:	4633      	mov	r3, r6
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure Rx BCR and AFC config - WDS settings
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x20, 0x02, 0x54, 0x0F, 0x07}, 6*sizeof(uint8_t));
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
 8003f48:	f88e 2000 	strb.w	r2, [lr]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8003f4c:	f1a9 010c 	sub.w	r1, r9, #12
 8003f50:	462a      	mov	r2, r5
 8003f52:	2009      	movs	r0, #9
 8003f54:	f7ff fcac 	bl	80038b0 <si446x_spi>
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <si446x_initialise+0x3d4>)
 8003f5a:	af24      	add	r7, sp, #144	; 0x90
 8003f5c:	f853 0f60 	ldr.w	r0, [r3, #96]!
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003f68:	9800      	ldr	r0, [sp, #0]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8003f6a:	4f16      	ldr	r7, [pc, #88]	; (8003fc4 <si446x_initialise+0x3d4>)
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
	//Configure signal arrival detect - WDS settings
	memcpy(tx_buffer, (uint8_t [9]){0x11, 0x20, 0x05, 0x5B, 0x40, 0x04, 0x21, 0x78, 0x20}, 9*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
 8003f6c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8003f6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8003f72:	f1a9 010c 	sub.w	r1, r9, #12
 8003f76:	462a      	mov	r2, r5
 8003f78:	4633      	mov	r3, r6
 8003f7a:	2009      	movs	r0, #9
 8003f7c:	f7ff fc98 	bl	80038b0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <si446x_initialise+0x3d4>)
 8003f82:	f853 0f70 	ldr.w	r0, [r3, #112]!
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8003f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8003f94:	f1a9 010c 	sub.w	r1, r9, #12
 8003f98:	462a      	mov	r2, r5
 8003f9a:	4633      	mov	r3, r6
 8003f9c:	2009      	movs	r0, #9
 8003f9e:	f7ff fc87 	bl	80038b0 <si446x_spi>
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8003fa2:	f857 0f80 	ldr.w	r0, [r7, #128]!
 8003fa6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	e00d      	b.n	8003fcc <si446x_initialise+0x3dc>
 8003fb0:	20001794 	.word	0x20001794
 8003fb4:	200017f8 	.word	0x200017f8
 8003fb8:	20000c54 	.word	0x20000c54
 8003fbc:	20000814 	.word	0x20000814
 8003fc0:	20000812 	.word	0x20000812
 8003fc4:	0800a110 	.word	0x0800a110
 8003fc8:	20001450 	.word	0x20001450
 8003fcc:	68fb      	ldr	r3, [r7, #12]
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8003fce:	2720      	movs	r7, #32
	//Configure first and second set of Rx filter coefficients - WDS settings
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x00, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x0C, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
 8003fd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
 8003fd8:	f1a9 010c 	sub.w	r1, r9, #12
 8003fdc:	462a      	mov	r2, r5
 8003fde:	4633      	mov	r3, r6
 8003fe0:	2009      	movs	r0, #9
 8003fe2:	f7ff fc65 	bl	80038b0 <si446x_spi>
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8003fe6:	7067      	strb	r7, [r4, #1]
 8003fe8:	2704      	movs	r7, #4
 8003fea:	70a7      	strb	r7, [r4, #2]
 8003fec:	f04f 073c 	mov.w	r7, #60	; 0x3c
 8003ff0:	f04f 0e4a 	mov.w	lr, #74	; 0x4a
 8003ff4:	7127      	strb	r7, [r4, #4]
 8003ff6:	f04f 0c3e 	mov.w	ip, #62	; 0x3e
 8003ffa:	270c      	movs	r7, #12
 8003ffc:	f04f 0812 	mov.w	r8, #18
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8004000:	f1a9 010c 	sub.w	r1, r9, #12
 8004004:	462a      	mov	r2, r5
 8004006:	4633      	mov	r3, r6
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8004008:	f884 e003 	strb.w	lr, [r4, #3]
 800400c:	7167      	strb	r7, [r4, #5]
 800400e:	f884 8006 	strb.w	r8, [r4, #6]
 8004012:	f884 c007 	strb.w	ip, [r4, #7]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 8004016:	2008      	movs	r0, #8
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x21, 0x0C, 0x18, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F}, 16*sizeof(uint8_t));
	si446x_spi( 9, tx_buffer, 0, rx_buffer);
	//Configure the RSSI thresholding for RX mode, with 12dB jump threshold (reset if RSSI changes this much during Rx), RSSI mean with packet toggle
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
 8004018:	f884 a000 	strb.w	sl, [r4]
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
 800401c:	f7ff fc48 	bl	80038b0 <si446x_spi>
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8004020:	f04f 0c24 	mov.w	ip, #36	; 0x24
 8004024:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8004028:	70a7      	strb	r7, [r4, #2]
 800402a:	f884 c004 	strb.w	ip, [r4, #4]
 800402e:	f884 c007 	strb.w	ip, [r4, #7]
 8004032:	f04f 0830 	mov.w	r8, #48	; 0x30
 8004036:	f04f 0742 	mov.w	r7, #66	; 0x42
 800403a:	f04f 0c52 	mov.w	ip, #82	; 0x52
 800403e:	f884 8001 	strb.w	r8, [r4, #1]
 8004042:	f884 e005 	strb.w	lr, [r4, #5]
 8004046:	f884 e008 	strb.w	lr, [r4, #8]
 800404a:	7267      	strb	r7, [r4, #9]
 800404c:	f884 c00a 	strb.w	ip, [r4, #10]
 8004050:	f884 e00b 	strb.w	lr, [r4, #11]
 8004054:	f04f 0c4f 	mov.w	ip, #79	; 0x4f
 8004058:	f884 e00e 	strb.w	lr, [r4, #14]
 800405c:	f04f 0841 	mov.w	r8, #65	; 0x41
 8004060:	f04f 0e44 	mov.w	lr, #68	; 0x44
 8004064:	f04f 0743 	mov.w	r7, #67	; 0x43
 8004068:	f884 c00d 	strb.w	ip, [r4, #13]
 800406c:	f884 e00f 	strb.w	lr, [r4, #15]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8004070:	f1a9 010c 	sub.w	r1, r9, #12
 8004074:	462a      	mov	r2, r5
 8004076:	4633      	mov	r3, r6
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 8004078:	7327      	strb	r7, [r4, #12]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 800407a:	2010      	movs	r0, #16
	//RSSI_THRESH is in dBm, it needs to be converted to 0.5dBm steps offset by ~130
	uint8_t rssi = (2*(RSSI_THRESH+130))&0xFF;
	memcpy(tx_buffer, (uint8_t [8]){0x11, 0x20, 0x04, 0x4A, rssi, 0x0C, 0x12, 0x3E}, 8*sizeof(uint8_t));
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
 800407c:	f884 a000 	strb.w	sl, [r4]
 8004080:	70e5      	strb	r5, [r4, #3]
 8004082:	f884 8006 	strb.w	r8, [r4, #6]
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
 8004086:	f7ff fc13 	bl	80038b0 <si446x_spi>
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <si446x_initialise+0x510>)
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 800408c:	4f1c      	ldr	r7, [pc, #112]	; (8004100 <si446x_initialise+0x510>)
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 800408e:	f852 1f90 	ldr.w	r1, [r2, #144]!
 8004092:	a805      	add	r0, sp, #20
 8004094:	7913      	ldrb	r3, [r2, #4]
 8004096:	9105      	str	r1, [sp, #20]
 8004098:	f88d 3018 	strb.w	r3, [sp, #24]
 800409c:	c803      	ldmia	r0, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800409e:	462a      	mov	r2, r5
	si446x_spi( 8, tx_buffer, 0, rx_buffer);
	//Configure the match value, this constrains the first 4 bytes of data to match e.g. $$RO
	memcpy(tx_buffer, (uint8_t [16]){0x11, 0x30, 0x0C, 0x00,Silabs_Header[0], 0xFF, 0x41,Silabs_Header[1], 0xFF, 0x42,Silabs_Header[2], 0xFF, 0x43,Silabs_Header[3], 0xFF, 0x44}, 16*sizeof(uint8_t));
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
 80040a0:	6020      	str	r0, [r4, #0]
 80040a2:	7121      	strb	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80040a4:	4633      	mov	r3, r6
 80040a6:	f1a9 010c 	sub.w	r1, r9, #12
 80040aa:	2005      	movs	r0, #5
 80040ac:	f7ff fc00 	bl	80038b0 <si446x_spi>
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 80040b0:	f857 1f98 	ldr.w	r1, [r7, #152]!
 80040b4:	a803      	add	r0, sp, #12
 80040b6:	793a      	ldrb	r2, [r7, #4]
 80040b8:	9103      	str	r1, [sp, #12]
 80040ba:	f88d 2010 	strb.w	r2, [sp, #16]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80040be:	4f10      	ldr	r7, [pc, #64]	; (8004100 <si446x_initialise+0x510>)
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 80040c0:	c803      	ldmia	r0, {r0, r1}
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80040c2:	462a      	mov	r2, r5
	si446x_spi( 16, tx_buffer, 0, rx_buffer);
	//Configure the Packet handler to (NOT use seperate FIELD config for RX), and turn off after packet rx
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x06, 0x00}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
 80040c4:	6020      	str	r0, [r4, #0]
 80040c6:	7121      	strb	r1, [r4, #4]
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
 80040c8:	4633      	mov	r3, r6
 80040ca:	f1a9 010c 	sub.w	r1, r9, #12
 80040ce:	2005      	movs	r0, #5
 80040d0:	f7ff fbee 	bl	80038b0 <si446x_spi>
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80040d4:	f857 1fa0 	ldr.w	r1, [r7, #160]!
 80040d8:	ab09      	add	r3, sp, #36	; 0x24
 80040da:	88b8      	ldrh	r0, [r7, #4]
 80040dc:	9109      	str	r1, [sp, #36]	; 0x24
 80040de:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 80040e2:	e893 0003 	ldmia.w	r3, {r0, r1}
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80040e6:	462a      	mov	r2, r5
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Use CCIT-16 CRC with 0xFFFF seed on the packet handler, same as UKHAS protocol
	memcpy(tx_buffer, (uint8_t [5]){0x11, 0x12, 0x01, 0x00, 0x85}, 5*sizeof(uint8_t));
	si446x_spi( 5, tx_buffer, 0, rx_buffer);
	//Set the sync word as two bytes 0xD391, this has good autocorrelation 8/1 peak to secondary ratio, default config used, no bit errors, 16 bit
	memcpy(tx_buffer, (uint8_t [6]){0x11, 0x11, 0x02, 0x01, 0xD3, 0x91}, 6*sizeof(uint8_t));
 80040e8:	6020      	str	r0, [r4, #0]
 80040ea:	80a1      	strh	r1, [r4, #4]
	si446x_spi( 6, tx_buffer, 0, rx_buffer);
 80040ec:	4633      	mov	r3, r6
 80040ee:	f1a9 010c 	sub.w	r1, r9, #12
 80040f2:	2006      	movs	r0, #6
 80040f4:	f7ff fbdc 	bl	80038b0 <si446x_spi>
	//Setup the default frequency and power
	si446x_set_frequency(Active_Frequency);
	//Setup default channel config
	si446x_set_deviation_channel_bps(300, 3000, 200);
	si446x_set_modem();
}
 80040f8:	b02d      	add	sp, #180	; 0xb4
 80040fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	0800a110 	.word	0x0800a110
 8004104:	f3af 8000 	nop.w
 8004108:	f3af 8000 	nop.w
 800410c:	f3af 8000 	nop.w

08004110 <chMBPost.constprop.30>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t time) {
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4605      	mov	r5, r0
 8004114:	2320      	movs	r3, #32
 8004116:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 800411a:	480c      	ldr	r0, [pc, #48]	; (800414c <chMBPost.constprop.30+0x3c>)
 800411c:	f001 fe40 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8004120:	4604      	mov	r4, r0
 8004122:	b970      	cbnz	r0, 8004142 <chMBPost.constprop.30+0x32>
    *mbp->mb_wrptr++ = msg;
 8004124:	480a      	ldr	r0, [pc, #40]	; (8004150 <chMBPost.constprop.30+0x40>)
 8004126:	6882      	ldr	r2, [r0, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8004128:	6841      	ldr	r1, [r0, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800412a:	f842 5b04 	str.w	r5, [r2], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 800412e:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8004130:	6082      	str	r2, [r0, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8004132:	bf24      	itt	cs
 8004134:	6802      	ldrcs	r2, [r0, #0]
 8004136:	6082      	strcs	r2, [r0, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8004138:	4806      	ldr	r0, [pc, #24]	; (8004154 <chMBPost.constprop.30+0x44>)
 800413a:	f7fe fcb1 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 800413e:	f7fd fd27 	bl	8001b90 <chSchRescheduleS>
 8004142:	2300      	movs	r3, #0
 8004144:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBPostS(mbp, msg, time);
  chSysUnlock();
  return rdymsg;
}
 8004148:	4620      	mov	r0, r4
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000cfc 	.word	0x20000cfc
 8004150:	20000ce0 	.word	0x20000ce0
 8004154:	20000cf0 	.word	0x20000cf0
 8004158:	f3af 8000 	nop.w
 800415c:	f3af 8000 	nop.w

08004160 <queues1_setup.8264>:
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8004160:	f641 0248 	movw	r2, #6216	; 0x1848
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8004164:	f640 43bc 	movw	r3, #3260	; 0xcbc
 8004168:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800416c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  iqp->q_top = bp + size;
 8004170:	1d10      	adds	r0, r2, #4
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
 8004172:	615a      	str	r2, [r3, #20]
 8004174:	619a      	str	r2, [r3, #24]
 8004176:	60da      	str	r2, [r3, #12]
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 8004178:	f646 42e1 	movw	r2, #27873	; 0x6ce1
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800417c:	2100      	movs	r1, #0
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
  iqp->q_notify = infy;
 800417e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004182:	605b      	str	r3, [r3, #4]
 8004184:	601b      	str	r3, [r3, #0]
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8004186:	6099      	str	r1, [r3, #8]
  iqp->q_buffer = iqp->q_rdptr = iqp->q_wrptr = bp;
  iqp->q_top = bp + size;
 8004188:	6118      	str	r0, [r3, #16]
  iqp->q_notify = infy;
 800418a:	61da      	str	r2, [r3, #28]
  iqp->q_link = link;
 800418c:	6219      	str	r1, [r3, #32]
 800418e:	4770      	bx	lr

08004190 <queues2_setup.8259>:
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 8004190:	f641 0248 	movw	r2, #6216	; 0x1848
 8004194:	f640 4398 	movw	r3, #3224	; 0xc98
 8004198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800419c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  oqp->q_top = bp + size;
 80041a0:	1d11      	adds	r1, r2, #4
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
 80041a2:	615a      	str	r2, [r3, #20]
 80041a4:	619a      	str	r2, [r3, #24]
 80041a6:	60da      	str	r2, [r3, #12]
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80041a8:	f646 42e1 	movw	r2, #27873	; 0x6ce1
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80041ac:	2004      	movs	r0, #4
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
 80041ae:	6119      	str	r1, [r3, #16]
  oqp->q_notify = onfy;
 80041b0:	f6c0 0200 	movt	r2, #2048	; 0x800
  oqp->q_link = link;
 80041b4:	2100      	movs	r1, #0
 80041b6:	605b      	str	r3, [r3, #4]
 80041b8:	601b      	str	r3, [r3, #0]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80041ba:	6098      	str	r0, [r3, #8]
  oqp->q_buffer = oqp->q_rdptr = oqp->q_wrptr = bp;
  oqp->q_top = bp + size;
  oqp->q_notify = onfy;
 80041bc:	61da      	str	r2, [r3, #28]
  oqp->q_link = link;
 80041be:	6219      	str	r1, [r3, #32]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	f3af 8000 	nop.w
 80041c8:	f3af 8000 	nop.w
 80041cc:	f3af 8000 	nop.w

080041d0 <mtx8_setup.7283>:
 80041d0:	f640 0118 	movw	r1, #2072	; 0x818
 80041d4:	f640 0200 	movw	r2, #2048	; 0x800
 80041d8:	f640 4338 	movw	r3, #3128	; 0xc38
 80041dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80041e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 80041e8:	2000      	movs	r0, #0
 80041ea:	6049      	str	r1, [r1, #4]
 80041ec:	6009      	str	r1, [r1, #0]
 80041ee:	6052      	str	r2, [r2, #4]
 80041f0:	6012      	str	r2, [r2, #0]
 80041f2:	6090      	str	r0, [r2, #8]
 80041f4:	605b      	str	r3, [r3, #4]
 80041f6:	601b      	str	r3, [r3, #0]
 80041f8:	6098      	str	r0, [r3, #8]
 80041fa:	4770      	bx	lr
 80041fc:	f3af 8000 	nop.w

08004200 <mtx7_setup.7285>:
 8004200:	f640 0218 	movw	r2, #2072	; 0x818
 8004204:	f640 0300 	movw	r3, #2048	; 0x800
 8004208:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800420c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004210:	2000      	movs	r0, #0
 8004212:	6052      	str	r2, [r2, #4]
 8004214:	6012      	str	r2, [r2, #0]
 8004216:	605b      	str	r3, [r3, #4]
 8004218:	601b      	str	r3, [r3, #0]
 800421a:	6098      	str	r0, [r3, #8]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <mtx6_setup.7287>:
 8004220:	f640 0218 	movw	r2, #2072	; 0x818
 8004224:	f640 0300 	movw	r3, #2048	; 0x800
 8004228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800422c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004230:	2000      	movs	r0, #0
 8004232:	6052      	str	r2, [r2, #4]
 8004234:	6012      	str	r2, [r2, #0]
 8004236:	605b      	str	r3, [r3, #4]
 8004238:	601b      	str	r3, [r3, #0]
 800423a:	6098      	str	r0, [r3, #8]
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <mtx5_setup.7289>:
 8004240:	f640 0300 	movw	r3, #2048	; 0x800
 8004244:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004248:	2200      	movs	r2, #0
 800424a:	605b      	str	r3, [r3, #4]
 800424c:	601b      	str	r3, [r3, #0]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	f3af 8000 	nop.w
 8004258:	f3af 8000 	nop.w
 800425c:	f3af 8000 	nop.w

08004260 <mtx4_setup.7291>:
 8004260:	f640 0200 	movw	r2, #2048	; 0x800
 8004264:	f640 4338 	movw	r3, #3128	; 0xc38
 8004268:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800426c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004270:	2100      	movs	r1, #0
 8004272:	6052      	str	r2, [r2, #4]
 8004274:	6012      	str	r2, [r2, #0]
 8004276:	6091      	str	r1, [r2, #8]
 8004278:	605b      	str	r3, [r3, #4]
 800427a:	601b      	str	r3, [r3, #0]
 800427c:	6099      	str	r1, [r3, #8]
 800427e:	4770      	bx	lr

08004280 <mtx1_setup.7293>:
 8004280:	f640 0300 	movw	r3, #2048	; 0x800
 8004284:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004288:	2200      	movs	r2, #0
 800428a:	605b      	str	r3, [r3, #4]
 800428c:	601b      	str	r3, [r3, #0]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	f3af 8000 	nop.w
 8004298:	f3af 8000 	nop.w
 800429c:	f3af 8000 	nop.w

080042a0 <bmk12_setup.8464>:
 80042a0:	f241 5304 	movw	r3, #5380	; 0x1504
 80042a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042a8:	2200      	movs	r2, #0
 80042aa:	605b      	str	r3, [r3, #4]
 80042ac:	601b      	str	r3, [r3, #0]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	f3af 8000 	nop.w
 80042b8:	f3af 8000 	nop.w
 80042bc:	f3af 8000 	nop.w

080042c0 <spi_lld_serve_tx_interrupt.9951>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80042c0:	070b      	lsls	r3, r1, #28
 80042c2:	d400      	bmi.n	80042c6 <spi_lld_serve_tx_interrupt.9951+0x6>
 80042c4:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042c6:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80042c8:	4a01      	ldr	r2, [pc, #4]	; (80042d0 <spi_lld_serve_tx_interrupt.9951+0x10>)
 80042ca:	4b02      	ldr	r3, [pc, #8]	; (80042d4 <spi_lld_serve_tx_interrupt.9951+0x14>)
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
 80042ce:	e7fe      	b.n	80042ce <spi_lld_serve_tx_interrupt.9951+0xe>
 80042d0:	0800a480 	.word	0x0800a480
 80042d4:	20001eb8 	.word	0x20001eb8
 80042d8:	f3af 8000 	nop.w
 80042dc:	f3af 8000 	nop.w

080042e0 <thread2.8457>:

  return (msg_t)p;
}

#if CH_CFG_USE_MESSAGES || defined(__DOXYGEN__)
static msg_t thread2(void *p) {
 80042e0:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80042e2:	2620      	movs	r6, #32
 80042e4:	2500      	movs	r5, #0
  thread_t *tp;
  msg_t msg;

  (void)p;
  do {
    tp = chMsgWait();
 80042e6:	f7fd fdf3 	bl	8001ed0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 80042ea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80042ec:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80042f0:	4621      	mov	r1, r4
 80042f2:	f7fd fd1d 	bl	8001d30 <chSchWakeupS>
 80042f6:	f385 8811 	msr	BASEPRI, r5
    msg = chMsgGet(tp);
    chMsgRelease(tp, msg);
  } while (msg);
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	d1f3      	bne.n	80042e6 <thread2.8457+0x6>
  return 0;
}
 80042fe:	4620      	mov	r0, r4
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	bf00      	nop
 8004304:	f3af 8000 	nop.w
 8004308:	f3af 8000 	nop.w
 800430c:	f3af 8000 	nop.w

08004310 <pools1_execute.7964>:
static void pools1_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void pools1_execute(void) {
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	2620      	movs	r6, #32
 8004314:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004318:	4c79      	ldr	r4, [pc, #484]	; (8004500 <pools1_execute.7964+0x1f0>)
 800431a:	4d7a      	ldr	r5, [pc, #488]	; (8004504 <pools1_execute.7964+0x1f4>)
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	602a      	str	r2, [r5, #0]
  mp->mp_next = php;
 8004322:	6025      	str	r5, [r4, #0]
 8004324:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 8004328:	6861      	ldr	r1, [r4, #4]
 800432a:	194a      	adds	r2, r1, r5
 800432c:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004330:	6820      	ldr	r0, [r4, #0]
  mp->mp_next = php;
 8004332:	6022      	str	r2, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004334:	5148      	str	r0, [r1, r5]
 8004336:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800433a:	6860      	ldr	r0, [r4, #4]
 800433c:	1811      	adds	r1, r2, r0
 800433e:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004342:	6827      	ldr	r7, [r4, #0]
  mp->mp_next = php;
 8004344:	6021      	str	r1, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004346:	5017      	str	r7, [r2, r0]
 8004348:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800434c:	6860      	ldr	r0, [r4, #4]
 800434e:	180a      	adds	r2, r1, r0
 8004350:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004354:	6827      	ldr	r7, [r4, #0]
  mp->mp_next = php;
 8004356:	6022      	str	r2, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004358:	500f      	str	r7, [r1, r0]
 800435a:	f383 8811 	msr	BASEPRI, r3

  chDbgCheck((mp != NULL) && (n != 0));

  while (n) {
    chPoolAdd(mp, p);
    p = (void *)(((uint8_t *)p) + mp->mp_object_size);
 800435e:	6861      	ldr	r1, [r4, #4]
 8004360:	1857      	adds	r7, r2, r1
 8004362:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004366:	6820      	ldr	r0, [r4, #0]
  mp->mp_next = php;
 8004368:	6027      	str	r7, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800436a:	5050      	str	r0, [r2, r1]
 800436c:	f383 8811 	msr	BASEPRI, r3
  /* Adding the WAs to the pool.*/
  chPoolLoadArray(&mp1, wa[0], MAX_THREADS);

  /* Emptying the pool.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(1, chPoolAlloc(&mp1) != NULL, "list empty");
 8004370:	4620      	mov	r0, r4
 8004372:	f7fd fb5d 	bl	8001a30 <chPoolAlloc>
 8004376:	1c01      	adds	r1, r0, #0
 8004378:	bf18      	it	ne
 800437a:	2101      	movne	r1, #1
 800437c:	2001      	movs	r0, #1
 800437e:	f7fd fa7f 	bl	8001880 <_test_assert>
 8004382:	2800      	cmp	r0, #0
 8004384:	f040 80a9 	bne.w	80044da <pools1_execute.7964+0x1ca>
 8004388:	4620      	mov	r0, r4
 800438a:	f7fd fb51 	bl	8001a30 <chPoolAlloc>
 800438e:	1c01      	adds	r1, r0, #0
 8004390:	bf18      	it	ne
 8004392:	2101      	movne	r1, #1
 8004394:	2001      	movs	r0, #1
 8004396:	f7fd fa73 	bl	8001880 <_test_assert>
 800439a:	2800      	cmp	r0, #0
 800439c:	f040 809d 	bne.w	80044da <pools1_execute.7964+0x1ca>
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7fd fb45 	bl	8001a30 <chPoolAlloc>
 80043a6:	1c01      	adds	r1, r0, #0
 80043a8:	bf18      	it	ne
 80043aa:	2101      	movne	r1, #1
 80043ac:	2001      	movs	r0, #1
 80043ae:	f7fd fa67 	bl	8001880 <_test_assert>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	f040 8091 	bne.w	80044da <pools1_execute.7964+0x1ca>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f7fd fb39 	bl	8001a30 <chPoolAlloc>
 80043be:	1c01      	adds	r1, r0, #0
 80043c0:	bf18      	it	ne
 80043c2:	2101      	movne	r1, #1
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fd fa5b 	bl	8001880 <_test_assert>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	f040 8085 	bne.w	80044da <pools1_execute.7964+0x1ca>
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7fd fb2d 	bl	8001a30 <chPoolAlloc>
 80043d6:	1c01      	adds	r1, r0, #0
 80043d8:	bf18      	it	ne
 80043da:	2101      	movne	r1, #1
 80043dc:	2001      	movs	r0, #1
 80043de:	f7fd fa4f 	bl	8001880 <_test_assert>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d179      	bne.n	80044da <pools1_execute.7964+0x1ca>

  /* Now must be empty.*/
  test_assert(2, chPoolAlloc(&mp1) == NULL, "list not empty");
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7fd fb22 	bl	8001a30 <chPoolAlloc>
 80043ec:	f1d0 0101 	rsbs	r1, r0, #1
 80043f0:	bf38      	it	cc
 80043f2:	2100      	movcc	r1, #0
 80043f4:	2002      	movs	r0, #2
 80043f6:	f7fd fa43 	bl	8001880 <_test_assert>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d16d      	bne.n	80044da <pools1_execute.7964+0x1ca>
 80043fe:	f386 8811 	msr	BASEPRI, r6
 8004402:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 8004404:	6025      	str	r5, [r4, #0]
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f380 8811 	msr	BASEPRI, r0
 800440c:	f386 8811 	msr	BASEPRI, r6
 8004410:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 8004412:	f505 72a4 	add.w	r2, r5, #328	; 0x148
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004416:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
  mp->mp_next = php;
 800441a:	6022      	str	r2, [r4, #0]
 800441c:	f380 8811 	msr	BASEPRI, r0
 8004420:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004424:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 8004426:	f505 7124 	add.w	r1, r5, #656	; 0x290
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800442a:	f8c5 3290 	str.w	r3, [r5, #656]	; 0x290
  mp->mp_next = php;
 800442e:	6021      	str	r1, [r4, #0]
 8004430:	f380 8811 	msr	BASEPRI, r0
 8004434:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004438:	6823      	ldr	r3, [r4, #0]
  mp->mp_next = php;
 800443a:	f505 7276 	add.w	r2, r5, #984	; 0x3d8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800443e:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
  mp->mp_next = php;
 8004442:	6022      	str	r2, [r4, #0]
 8004444:	f380 8811 	msr	BASEPRI, r0
 8004448:	f386 8811 	msr	BASEPRI, r6
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800444c:	6821      	ldr	r1, [r4, #0]
  mp->mp_next = php;
 800444e:	f505 63a4 	add.w	r3, r5, #1312	; 0x520
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004452:	f8c5 1520 	str.w	r1, [r5, #1312]	; 0x520
  mp->mp_next = php;
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	f380 8811 	msr	BASEPRI, r0
  for (i = 0; i < MAX_THREADS; i++)
    chPoolFree(&mp1, wa[i]);

  /* Emptying the pool again.*/
  for (i = 0; i < MAX_THREADS; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "list empty");
 800445c:	4620      	mov	r0, r4
 800445e:	f7fd fae7 	bl	8001a30 <chPoolAlloc>
 8004462:	1c01      	adds	r1, r0, #0
 8004464:	bf18      	it	ne
 8004466:	2101      	movne	r1, #1
 8004468:	2003      	movs	r0, #3
 800446a:	f7fd fa09 	bl	8001880 <_test_assert>
 800446e:	2800      	cmp	r0, #0
 8004470:	d133      	bne.n	80044da <pools1_execute.7964+0x1ca>
 8004472:	4620      	mov	r0, r4
 8004474:	f7fd fadc 	bl	8001a30 <chPoolAlloc>
 8004478:	1c01      	adds	r1, r0, #0
 800447a:	bf18      	it	ne
 800447c:	2101      	movne	r1, #1
 800447e:	2003      	movs	r0, #3
 8004480:	f7fd f9fe 	bl	8001880 <_test_assert>
 8004484:	bb48      	cbnz	r0, 80044da <pools1_execute.7964+0x1ca>
 8004486:	4620      	mov	r0, r4
 8004488:	f7fd fad2 	bl	8001a30 <chPoolAlloc>
 800448c:	1c01      	adds	r1, r0, #0
 800448e:	bf18      	it	ne
 8004490:	2101      	movne	r1, #1
 8004492:	2003      	movs	r0, #3
 8004494:	f7fd f9f4 	bl	8001880 <_test_assert>
 8004498:	b9f8      	cbnz	r0, 80044da <pools1_execute.7964+0x1ca>
 800449a:	4620      	mov	r0, r4
 800449c:	f7fd fac8 	bl	8001a30 <chPoolAlloc>
 80044a0:	1c01      	adds	r1, r0, #0
 80044a2:	bf18      	it	ne
 80044a4:	2101      	movne	r1, #1
 80044a6:	2003      	movs	r0, #3
 80044a8:	f7fd f9ea 	bl	8001880 <_test_assert>
 80044ac:	b9a8      	cbnz	r0, 80044da <pools1_execute.7964+0x1ca>
 80044ae:	4620      	mov	r0, r4
 80044b0:	f7fd fabe 	bl	8001a30 <chPoolAlloc>
 80044b4:	1c01      	adds	r1, r0, #0
 80044b6:	bf18      	it	ne
 80044b8:	2101      	movne	r1, #1
 80044ba:	2003      	movs	r0, #3
 80044bc:	f7fd f9e0 	bl	8001880 <_test_assert>
 80044c0:	b958      	cbnz	r0, 80044da <pools1_execute.7964+0x1ca>

  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7fd fab4 	bl	8001a30 <chPoolAlloc>
 80044c8:	f1d0 0101 	rsbs	r1, r0, #1
 80044cc:	bf38      	it	cc
 80044ce:	2100      	movcc	r1, #0
 80044d0:	2004      	movs	r0, #4
 80044d2:	f7fd f9d5 	bl	8001880 <_test_assert>
 80044d6:	4602      	mov	r2, r0
 80044d8:	b100      	cbz	r0, 80044dc <pools1_execute.7964+0x1cc>
 80044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <pools1_execute.7964+0x1f8>)
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
  mp->mp_object_size = size;
 80044de:	2110      	movs	r1, #16

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80044e0:	4620      	mov	r0, r4
 80044e2:	6061      	str	r1, [r4, #4]
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80044e4:	6022      	str	r2, [r4, #0]
  mp->mp_object_size = size;
  mp->mp_provider = provider;
 80044e6:	60a3      	str	r3, [r4, #8]
 80044e8:	f7fd faa2 	bl	8001a30 <chPoolAlloc>
 80044ec:	f1d0 0101 	rsbs	r1, r0, #1
 80044f0:	bf38      	it	cc
 80044f2:	2100      	movcc	r1, #0
 80044f4:	2005      	movs	r0, #5
}
 80044f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* Now must be empty again.*/
  test_assert(4, chPoolAlloc(&mp1) == NULL, "list not empty");

  /* Covering the case where a provider is unable to return more memory.*/
  chPoolObjectInit(&mp1, 16, null_provider);
  test_assert(5, chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80044fa:	f7fd b9c1 	b.w	8001880 <_test_assert>
 80044fe:	bf00      	nop
 8004500:	20000820 	.word	0x20000820
 8004504:	20001848 	.word	0x20001848
 8004508:	08006cf1 	.word	0x08006cf1
 800450c:	f3af 8000 	nop.w

08004510 <dyn2_execute.8090>:
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8004510:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <dyn2_execute.8090+0x130>)
static void dyn2_setup(void) {

  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}

static void dyn2_execute(void) {
 8004512:	b570      	push	{r4, r5, r6, lr}
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	2020      	movs	r0, #32
 8004518:	688d      	ldr	r5, [r1, #8]
 800451a:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800451e:	4b49      	ldr	r3, [pc, #292]	; (8004644 <dyn2_execute.8090+0x134>)
 8004520:	4a49      	ldr	r2, [pc, #292]	; (8004648 <dyn2_execute.8090+0x138>)
 8004522:	681c      	ldr	r4, [r3, #0]
 8004524:	2100      	movs	r1, #0
 8004526:	6014      	str	r4, [r2, #0]
  mp->mp_next = php;
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f381 8811 	msr	BASEPRI, r1
 800452e:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004532:	681c      	ldr	r4, [r3, #0]
  mp->mp_next = php;
 8004534:	f502 76a4 	add.w	r6, r2, #328	; 0x148
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004538:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
  mp->mp_next = php;
 800453c:	601e      	str	r6, [r3, #0]
 800453e:	f381 8811 	msr	BASEPRI, r1
 8004542:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004546:	681c      	ldr	r4, [r3, #0]
  mp->mp_next = php;
 8004548:	f502 7624 	add.w	r6, r2, #656	; 0x290
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800454c:	f8c2 4290 	str.w	r4, [r2, #656]	; 0x290
  mp->mp_next = php;
 8004550:	601e      	str	r6, [r3, #0]
 8004552:	f381 8811 	msr	BASEPRI, r1
 8004556:	f380 8811 	msr	BASEPRI, r0
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 800455a:	6818      	ldr	r0, [r3, #0]
  mp->mp_next = php;
 800455c:	f502 7476 	add.w	r4, r2, #984	; 0x3d8
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 8004560:	f8c2 03d8 	str.w	r0, [r2, #984]	; 0x3d8
  mp->mp_next = php;
 8004564:	601c      	str	r4, [r3, #0]
 8004566:	f381 8811 	msr	BASEPRI, r1
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 800456a:	4938      	ldr	r1, [pc, #224]	; (800464c <dyn2_execute.8090+0x13c>)
 800456c:	1e68      	subs	r0, r5, #1
 800456e:	f001 fc8f 	bl	8005e90 <chThdCreateFromMemoryPool.constprop.54>
 8004572:	4c37      	ldr	r4, [pc, #220]	; (8004650 <dyn2_execute.8090+0x140>)
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004574:	4937      	ldr	r1, [pc, #220]	; (8004654 <dyn2_execute.8090+0x144>)
  /* Adding the WAs to the pool. */
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
 8004576:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004578:	1ea8      	subs	r0, r5, #2
 800457a:	f001 fc89 	bl	8005e90 <chThdCreateFromMemoryPool.constprop.54>
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800457e:	4936      	ldr	r1, [pc, #216]	; (8004658 <dyn2_execute.8090+0x148>)
  for (i = 0; i < 4; i++)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
 8004580:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 8004582:	1ee8      	subs	r0, r5, #3
 8004584:	f001 fc84 	bl	8005e90 <chThdCreateFromMemoryPool.constprop.54>
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004588:	4934      	ldr	r1, [pc, #208]	; (800465c <dyn2_execute.8090+0x14c>)
    chPoolFree(&mp1, wa[i]);

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
 800458a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 800458c:	1f28      	subs	r0, r5, #4
 800458e:	f001 fc7f 	bl	8005e90 <chThdCreateFromMemoryPool.constprop.54>
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004592:	4933      	ldr	r1, [pc, #204]	; (8004660 <dyn2_execute.8090+0x150>)

  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
 8004594:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 8004596:	1f68      	subs	r0, r5, #5
 8004598:	f001 fc7a 	bl	8005e90 <chThdCreateFromMemoryPool.constprop.54>

  test_assert(1, (threads[0] != NULL) &&
 800459c:	6821      	ldr	r1, [r4, #0]
  /* Starting threads from the memory pool. */
  threads[0] = chThdCreateFromMemoryPool(&mp1, prio-1, thread, "A");
  threads[1] = chThdCreateFromMemoryPool(&mp1, prio-2, thread, "B");
  threads[2] = chThdCreateFromMemoryPool(&mp1, prio-3, thread, "C");
  threads[3] = chThdCreateFromMemoryPool(&mp1, prio-4, thread, "D");
  threads[4] = chThdCreateFromMemoryPool(&mp1, prio-5, thread, "E");
 800459e:	6120      	str	r0, [r4, #16]

  test_assert(1, (threads[0] != NULL) &&
 80045a0:	b149      	cbz	r1, 80045b6 <dyn2_execute.8090+0xa6>
 80045a2:	6861      	ldr	r1, [r4, #4]
 80045a4:	b139      	cbz	r1, 80045b6 <dyn2_execute.8090+0xa6>
 80045a6:	68a1      	ldr	r1, [r4, #8]
 80045a8:	b129      	cbz	r1, 80045b6 <dyn2_execute.8090+0xa6>
 80045aa:	68e1      	ldr	r1, [r4, #12]
 80045ac:	b119      	cbz	r1, 80045b6 <dyn2_execute.8090+0xa6>
 80045ae:	f1d0 0101 	rsbs	r1, r0, #1
 80045b2:	bf38      	it	cc
 80045b4:	2100      	movcc	r1, #0
 80045b6:	2001      	movs	r0, #1
 80045b8:	f7fd f962 	bl	8001880 <_test_assert>
 80045bc:	b100      	cbz	r0, 80045c0 <dyn2_execute.8090+0xb0>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] != NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 80045c0:	f7fd ff3e 	bl	8002440 <test_wait_threads>
  test_assert_sequence(2, "ABCD");
 80045c4:	2002      	movs	r0, #2
 80045c6:	4927      	ldr	r1, [pc, #156]	; (8004664 <dyn2_execute.8090+0x154>)
 80045c8:	f7fd f912 	bl	80017f0 <_test_assert_sequence>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d1f6      	bne.n	80045be <dyn2_execute.8090+0xae>

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
 80045d0:	481c      	ldr	r0, [pc, #112]	; (8004644 <dyn2_execute.8090+0x134>)
 80045d2:	f7fd fa2d 	bl	8001a30 <chPoolAlloc>
 80045d6:	1c01      	adds	r1, r0, #0
 80045d8:	bf18      	it	ne
 80045da:	2101      	movne	r1, #1
 80045dc:	2003      	movs	r0, #3
 80045de:	f7fd f94f 	bl	8001880 <_test_assert>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1eb      	bne.n	80045be <dyn2_execute.8090+0xae>
 80045e6:	4817      	ldr	r0, [pc, #92]	; (8004644 <dyn2_execute.8090+0x134>)
 80045e8:	f7fd fa22 	bl	8001a30 <chPoolAlloc>
 80045ec:	1c01      	adds	r1, r0, #0
 80045ee:	bf18      	it	ne
 80045f0:	2101      	movne	r1, #1
 80045f2:	2003      	movs	r0, #3
 80045f4:	f7fd f944 	bl	8001880 <_test_assert>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d1e0      	bne.n	80045be <dyn2_execute.8090+0xae>
 80045fc:	4811      	ldr	r0, [pc, #68]	; (8004644 <dyn2_execute.8090+0x134>)
 80045fe:	f7fd fa17 	bl	8001a30 <chPoolAlloc>
 8004602:	1c01      	adds	r1, r0, #0
 8004604:	bf18      	it	ne
 8004606:	2101      	movne	r1, #1
 8004608:	2003      	movs	r0, #3
 800460a:	f7fd f939 	bl	8001880 <_test_assert>
 800460e:	2800      	cmp	r0, #0
 8004610:	d1d5      	bne.n	80045be <dyn2_execute.8090+0xae>
 8004612:	480c      	ldr	r0, [pc, #48]	; (8004644 <dyn2_execute.8090+0x134>)
 8004614:	f7fd fa0c 	bl	8001a30 <chPoolAlloc>
 8004618:	1c01      	adds	r1, r0, #0
 800461a:	bf18      	it	ne
 800461c:	2101      	movne	r1, #1
 800461e:	2003      	movs	r0, #3
 8004620:	f7fd f92e 	bl	8001880 <_test_assert>
 8004624:	2800      	cmp	r0, #0
 8004626:	d1ca      	bne.n	80045be <dyn2_execute.8090+0xae>
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8004628:	4806      	ldr	r0, [pc, #24]	; (8004644 <dyn2_execute.8090+0x134>)
 800462a:	f7fd fa01 	bl	8001a30 <chPoolAlloc>
 800462e:	f1d0 0101 	rsbs	r1, r0, #1
 8004632:	bf38      	it	cc
 8004634:	2100      	movcc	r1, #0
 8004636:	2004      	movs	r0, #4
}
 8004638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_assert_sequence(2, "ABCD");

  /* Now the pool must be full again. */
  for (i = 0; i < 4; i++)
    test_assert(3, chPoolAlloc(&mp1) != NULL, "pool list empty");
  test_assert(4, chPoolAlloc(&mp1) == NULL, "pool list not empty");
 800463c:	f7fd b920 	b.w	8001880 <_test_assert>
 8004640:	20001eb8 	.word	0x20001eb8
 8004644:	20001454 	.word	0x20001454
 8004648:	20001848 	.word	0x20001848
 800464c:	0800a1e0 	.word	0x0800a1e0
 8004650:	20002008 	.word	0x20002008
 8004654:	0800a1dc 	.word	0x0800a1dc
 8004658:	0800a1d8 	.word	0x0800a1d8
 800465c:	0800a2f8 	.word	0x0800a2f8
 8004660:	0800a1e8 	.word	0x0800a1e8
 8004664:	0800a210 	.word	0x0800a210
 8004668:	f3af 8000 	nop.w
 800466c:	f3af 8000 	nop.w

08004670 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	b091      	sub	sp, #68	; 0x44
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8004676:	ab0a      	add	r3, sp, #40	; 0x28
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8004678:	f10d 0429 	add.w	r4, sp, #41	; 0x29
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800467c:	9303      	str	r3, [sp, #12]
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800467e:	9402      	str	r4, [sp, #8]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004680:	468b      	mov	fp, r1
 8004682:	4692      	mov	sl, r2
 8004684:	9902      	ldr	r1, [sp, #8]
 8004686:	9a03      	ldr	r2, [sp, #12]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8004688:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800468c:	4607      	mov	r7, r0
 800468e:	1a8c      	subs	r4, r1, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004690:	2000      	movs	r0, #0

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8004692:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004696:	9004      	str	r0, [sp, #16]
 8004698:	9407      	str	r4, [sp, #28]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 800469a:	9306      	str	r3, [sp, #24]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800469c:	465c      	mov	r4, fp
 800469e:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
 80046a2:	b171      	cbz	r1, 80046c2 <chvprintf+0x52>
      return n;
    if (c != '%') {
 80046a4:	2925      	cmp	r1, #37	; 0x25
 80046a6:	d010      	beq.n	80046ca <chvprintf+0x5a>
      chSequentialStreamPut(chp, (uint8_t)c);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4638      	mov	r0, r7
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80046b0:	46a3      	mov	fp, r4
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 80046b2:	9904      	ldr	r1, [sp, #16]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80046b4:	465c      	mov	r4, fp
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 80046b6:	1c48      	adds	r0, r1, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 80046b8:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0)
      return n;
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
 80046bc:	9004      	str	r0, [sp, #16]
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
    if (c == 0)
 80046be:	2900      	cmp	r1, #0
 80046c0:	d1f0      	bne.n	80046a4 <chvprintf+0x34>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 80046c2:	9804      	ldr	r0, [sp, #16]
 80046c4:	b011      	add	sp, #68	; 0x44
 80046c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 80046ca:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80046ce:	2b2d      	cmp	r3, #45	; 0x2d
 80046d0:	bf03      	ittte	eq
 80046d2:	f89b 3002 	ldrbeq.w	r3, [fp, #2]
      fmt++;
 80046d6:	f10b 0402 	addeq.w	r4, fp, #2
      left_align = TRUE;
 80046da:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 80046de:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 80046e2:	2b30      	cmp	r3, #48	; 0x30
 80046e4:	f000 81d0 	beq.w	8004a88 <chvprintf+0x418>
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 80046e8:	f04f 0820 	mov.w	r8, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 80046ec:	46a3      	mov	fp, r4
    }
    width = 0;
 80046ee:	2600      	movs	r6, #0
 80046f0:	e009      	b.n	8004706 <chvprintf+0x96>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 80046f2:	f89a 5000 	ldrb.w	r5, [sl]
 80046f6:	f10a 0a04 	add.w	sl, sl, #4
      else
        break;
      width = width * 10 + c;
 80046fa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80046fe:	f89b 3000 	ldrb.w	r3, [fp]
 8004702:	eb05 0646 	add.w	r6, r5, r6, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004706:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800470a:	b2ed      	uxtb	r5, r5
 800470c:	2d09      	cmp	r5, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 800470e:	f10b 0b01 	add.w	fp, fp, #1
      if (c >= '0' && c <= '9')
 8004712:	d9f2      	bls.n	80046fa <chvprintf+0x8a>
        c -= '0';
      else if (c == '*')
 8004714:	2b2a      	cmp	r3, #42	; 0x2a
 8004716:	d0ec      	beq.n	80046f2 <chvprintf+0x82>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8004718:	2b2e      	cmp	r3, #46	; 0x2e
 800471a:	f000 819f 	beq.w	8004a5c <chvprintf+0x3ec>
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
 800471e:	2500      	movs	r5, #0
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004720:	2b6c      	cmp	r3, #108	; 0x6c
 8004722:	f000 8192 	beq.w	8004a4a <chvprintf+0x3da>
 8004726:	2b4c      	cmp	r3, #76	; 0x4c
 8004728:	f000 818f 	beq.w	8004a4a <chvprintf+0x3da>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800472c:	f1a3 0144 	sub.w	r1, r3, #68	; 0x44
 8004730:	2934      	cmp	r1, #52	; 0x34
 8004732:	f200 8174 	bhi.w	8004a1e <chvprintf+0x3ae>
 8004736:	e8df f011 	tbh	[pc, r1, lsl #1]
 800473a:	017d      	.short	0x017d
 800473c:	01720172 	.word	0x01720172
 8004740:	01720172 	.word	0x01720172
 8004744:	0172017d 	.word	0x0172017d
 8004748:	01720172 	.word	0x01720172
 800474c:	01720172 	.word	0x01720172
 8004750:	01720178 	.word	0x01720178
 8004754:	01720172 	.word	0x01720172
 8004758:	01720172 	.word	0x01720172
 800475c:	01720186 	.word	0x01720186
 8004760:	01640172 	.word	0x01640172
 8004764:	01720172 	.word	0x01720172
 8004768:	01720172 	.word	0x01720172
 800476c:	01720172 	.word	0x01720172
 8004770:	01720172 	.word	0x01720172
 8004774:	01720172 	.word	0x01720172
 8004778:	017d00c6 	.word	0x017d00c6
 800477c:	006b0172 	.word	0x006b0172
 8004780:	01720172 	.word	0x01720172
 8004784:	0172017d 	.word	0x0172017d
 8004788:	01720172 	.word	0x01720172
 800478c:	01720172 	.word	0x01720172
 8004790:	01720178 	.word	0x01720178
 8004794:	01720172 	.word	0x01720172
 8004798:	01720035 	.word	0x01720035
 800479c:	01720186 	.word	0x01720186
 80047a0:	01640172 	.word	0x01640172
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80047a4:	f8da 2000 	ldr.w	r2, [sl]
        s = "(null)";
 80047a8:	48a1      	ldr	r0, [pc, #644]	; (8004a30 <chvprintf+0x3c0>)
      if (precision == 0)
        precision = 32767;
 80047aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
 80047ae:	2a00      	cmp	r2, #0
 80047b0:	bf08      	it	eq
 80047b2:	4602      	moveq	r2, r0
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80047b4:	7814      	ldrb	r4, [r2, #0]
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80047b6:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 80047ba:	2d00      	cmp	r5, #0
 80047bc:	bf08      	it	eq
 80047be:	461d      	moveq	r5, r3
      for (p = s; *p && (--precision >= 0); p++)
 80047c0:	2c00      	cmp	r4, #0
 80047c2:	f000 8188 	beq.w	8004ad6 <chvprintf+0x466>
 80047c6:	7854      	ldrb	r4, [r2, #1]
 80047c8:	1e69      	subs	r1, r5, #1
 80047ca:	f001 0001 	and.w	r0, r1, #1
 80047ce:	18ad      	adds	r5, r5, r2
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80047d0:	1c51      	adds	r1, r2, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80047d2:	b1c4      	cbz	r4, 8004806 <chvprintf+0x196>
 80047d4:	428d      	cmp	r5, r1
 80047d6:	460b      	mov	r3, r1
 80047d8:	d006      	beq.n	80047e8 <chvprintf+0x178>
 80047da:	b178      	cbz	r0, 80047fc <chvprintf+0x18c>
 80047dc:	784c      	ldrb	r4, [r1, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80047de:	3101      	adds	r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80047e0:	b18c      	cbz	r4, 8004806 <chvprintf+0x196>
 80047e2:	428d      	cmp	r5, r1
 80047e4:	460b      	mov	r3, r1
 80047e6:	d109      	bne.n	80047fc <chvprintf+0x18c>
 80047e8:	1aad      	subs	r5, r5, r2
 80047ea:	9505      	str	r5, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 80047ec:	f04f 0820 	mov.w	r8, #32
 80047f0:	e074      	b.n	80048dc <chvprintf+0x26c>
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80047f2:	784c      	ldrb	r4, [r1, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80047f4:	3101      	adds	r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80047f6:	b134      	cbz	r4, 8004806 <chvprintf+0x196>
 80047f8:	429d      	cmp	r5, r3
 80047fa:	d0f5      	beq.n	80047e8 <chvprintf+0x178>
 80047fc:	785c      	ldrb	r4, [r3, #1]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 80047fe:	1c59      	adds	r1, r3, #1
 8004800:	1c4b      	adds	r3, r1, #1
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8004802:	2c00      	cmp	r4, #0
 8004804:	d1f5      	bne.n	80047f2 <chvprintf+0x182>
 8004806:	1a89      	subs	r1, r1, r2
 8004808:	9105      	str	r1, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800480a:	f04f 0820 	mov.w	r8, #32
 800480e:	e065      	b.n	80048dc <chvprintf+0x26c>
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8004810:	f10a 0a07 	add.w	sl, sl, #7
 8004814:	f02a 0207 	bic.w	r2, sl, #7
 8004818:	e9d2 0100 	ldrd	r0, r1, [r2]
 800481c:	f102 0a08 	add.w	sl, r2, #8
 8004820:	f7fc fb96 	bl	8000f50 <__aeabi_d2f>
      if (f < 0) {
 8004824:	2100      	movs	r1, #0
      }
      p = ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8004826:	4604      	mov	r4, r0
      if (f < 0) {
 8004828:	f7fc fe90 	bl	800154c <__aeabi_fcmplt>
 800482c:	2800      	cmp	r0, #0
 800482e:	f040 8142 	bne.w	8004ab6 <chvprintf+0x446>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8004832:	ab0a      	add	r3, sp, #40	; 0x28
                                      10000000, 100000000, 1000000000};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8004834:	3d01      	subs	r5, #1
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8004836:	f24a 41a0 	movw	r1, #42144	; 0xa4a0
 800483a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800483e:	2d08      	cmp	r5, #8
 8004840:	bf28      	it	cs
 8004842:	2508      	movcs	r5, #8
 8004844:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]

  l = (long)num;
 8004848:	4620      	mov	r0, r4
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 800484a:	9205      	str	r2, [sp, #20]

  l = (long)num;
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f7fc fea7 	bl	80015a0 <__aeabi_f2iz>
  p = long_to_string_with_divisor(p, l, 10, 0);
 8004852:	9b01      	ldr	r3, [sp, #4]

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8004854:	4605      	mov	r5, r0
  p = long_to_string_with_divisor(p, l, 10, 0);
 8004856:	220a      	movs	r2, #10
 8004858:	4629      	mov	r1, r5
 800485a:	4618      	mov	r0, r3
 800485c:	2300      	movs	r3, #0
 800485e:	f002 fe6f 	bl	8007540 <long_to_string_with_divisor.10737>
  *p++ = '.';
 8004862:	4684      	mov	ip, r0
 8004864:	202e      	movs	r0, #46	; 0x2e
 8004866:	f80c 0b01 	strb.w	r0, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 800486a:	4620      	mov	r0, r4
 800486c:	f8cd c004 	str.w	ip, [sp, #4]
 8004870:	f7fc f8ba 	bl	80009e8 <__aeabi_f2d>
 8004874:	e9cd 0108 	strd	r0, r1, [sp, #32]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8004878:	4628      	mov	r0, r5
 800487a:	f7fc f8a3 	bl	80009c4 <__aeabi_i2d>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004886:	f7fb ff4f 	bl	8000728 <__aeabi_dsub>
 800488a:	4604      	mov	r4, r0
 800488c:	9805      	ldr	r0, [sp, #20]
 800488e:	460d      	mov	r5, r1
 8004890:	f7fc f888 	bl	80009a4 <__aeabi_ui2d>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4620      	mov	r0, r4
 800489a:	4629      	mov	r1, r5
 800489c:	f7fc f8f8 	bl	8000a90 <__aeabi_dmul>
 80048a0:	f7fc fb0e 	bl	8000ec0 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80048a4:	9a05      	ldr	r2, [sp, #20]
 80048a6:	9b06      	ldr	r3, [sp, #24]
 80048a8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80048ac:	fba3 2402 	umull	r2, r4, r3, r2
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 80048b0:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80048b2:	220a      	movs	r2, #10
 80048b4:	4660      	mov	r0, ip
 80048b6:	08e3      	lsrs	r3, r4, #3
 80048b8:	f002 fe42 	bl	8007540 <long_to_string_with_divisor.10737>
 80048bc:	9903      	ldr	r1, [sp, #12]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80048be:	aa0a      	add	r2, sp, #40	; 0x28
 80048c0:	1a40      	subs	r0, r0, r1
 80048c2:	9005      	str	r0, [sp, #20]
 80048c4:	e00a      	b.n	80048dc <chvprintf+0x26c>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80048c6:	f8da 2000 	ldr.w	r2, [sl]
 80048ca:	9b07      	ldr	r3, [sp, #28]
 80048cc:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80048d0:	9305      	str	r3, [sp, #20]
 80048d2:	f10a 0a04 	add.w	sl, sl, #4
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80048d6:	f04f 0820 	mov.w	r8, #32
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80048da:	aa0a      	add	r2, sp, #40	; 0x28
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80048dc:	9b05      	ldr	r3, [sp, #20]
 80048de:	1af6      	subs	r6, r6, r3
 80048e0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80048e4:	f1b9 0f00 	cmp.w	r9, #0
 80048e8:	d133      	bne.n	8004952 <chvprintf+0x2e2>
      width = -width;
 80048ea:	4276      	negs	r6, r6
    if (width < 0) {
 80048ec:	2e00      	cmp	r6, #0
 80048ee:	d030      	beq.n	8004952 <chvprintf+0x2e2>
      if (*s == '-' && filler == '0') {
 80048f0:	7811      	ldrb	r1, [r2, #0]
 80048f2:	292d      	cmp	r1, #45	; 0x2d
 80048f4:	f000 80cd 	beq.w	8004a92 <chvprintf+0x422>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 80048f8:	6838      	ldr	r0, [r7, #0]
 80048fa:	4641      	mov	r1, r8
 80048fc:	6883      	ldr	r3, [r0, #8]
 80048fe:	9201      	str	r2, [sp, #4]
 8004900:	4638      	mov	r0, r7
 8004902:	43f4      	mvns	r4, r6
 8004904:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8004906:	f116 0901 	adds.w	r9, r6, #1
 800490a:	f004 0401 	and.w	r4, r4, #1
 800490e:	9a01      	ldr	r2, [sp, #4]
 8004910:	d01b      	beq.n	800494a <chvprintf+0x2da>
 8004912:	b14c      	cbz	r4, 8004928 <chvprintf+0x2b8>
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	4638      	mov	r0, r7
 8004918:	688b      	ldr	r3, [r1, #8]
 800491a:	9201      	str	r2, [sp, #4]
 800491c:	4641      	mov	r1, r8
 800491e:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8004920:	f119 0901 	adds.w	r9, r9, #1
 8004924:	9a01      	ldr	r2, [sp, #4]
 8004926:	d010      	beq.n	800494a <chvprintf+0x2da>
 8004928:	4615      	mov	r5, r2
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 800492a:	6838      	ldr	r0, [r7, #0]
 800492c:	4641      	mov	r1, r8
 800492e:	6884      	ldr	r4, [r0, #8]
 8004930:	4638      	mov	r0, r7
 8004932:	47a0      	blx	r4
 8004934:	6839      	ldr	r1, [r7, #0]
        n++;
      } while (++width != 0);
 8004936:	f109 0401 	add.w	r4, r9, #1
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
 800493a:	688b      	ldr	r3, [r1, #8]
 800493c:	4638      	mov	r0, r7
 800493e:	4641      	mov	r1, r8
 8004940:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8004942:	f114 0901 	adds.w	r9, r4, #1
 8004946:	d1f0      	bne.n	800492a <chvprintf+0x2ba>
 8004948:	462a      	mov	r2, r5
 800494a:	9804      	ldr	r0, [sp, #16]
 800494c:	1b86      	subs	r6, r0, r6
 800494e:	9604      	str	r6, [sp, #16]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004950:	2600      	movs	r6, #0
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8004952:	9905      	ldr	r1, [sp, #20]
 8004954:	2900      	cmp	r1, #0
 8004956:	dd2e      	ble.n	80049b6 <chvprintf+0x346>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8004958:	4615      	mov	r5, r2
 800495a:	683b      	ldr	r3, [r7, #0]
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800495c:	1854      	adds	r4, r2, r1
 800495e:	ea6f 0902 	mvn.w	r9, r2
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
 8004962:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004966:	eb04 0e09 	add.w	lr, r4, r9
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	4638      	mov	r0, r7
 800496e:	f00e 0901 	and.w	r9, lr, #1
 8004972:	4790      	blx	r2
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8004974:	42a5      	cmp	r5, r4
 8004976:	d01a      	beq.n	80049ae <chvprintf+0x33e>
 8004978:	f1b9 0f00 	cmp.w	r9, #0
 800497c:	d007      	beq.n	800498e <chvprintf+0x31e>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800497e:	6838      	ldr	r0, [r7, #0]
 8004980:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004984:	6883      	ldr	r3, [r0, #8]
 8004986:	4638      	mov	r0, r7
 8004988:	4798      	blx	r3
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800498a:	42a5      	cmp	r5, r4
 800498c:	d00f      	beq.n	80049ae <chvprintf+0x33e>
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	46a9      	mov	r9, r5
 8004992:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004996:	6893      	ldr	r3, [r2, #8]
 8004998:	4638      	mov	r0, r7
 800499a:	4798      	blx	r3
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	7869      	ldrb	r1, [r5, #1]
 80049a0:	6882      	ldr	r2, [r0, #8]
 80049a2:	f109 0501 	add.w	r5, r9, #1
 80049a6:	4638      	mov	r0, r7
 80049a8:	4790      	blx	r2
      do {
        chSequentialStreamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80049aa:	42a5      	cmp	r5, r4
 80049ac:	d1ef      	bne.n	800498e <chvprintf+0x31e>
 80049ae:	9904      	ldr	r1, [sp, #16]
 80049b0:	9c05      	ldr	r4, [sp, #20]
 80049b2:	190b      	adds	r3, r1, r4
 80049b4:	9304      	str	r3, [sp, #16]
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	f43f ae70 	beq.w	800469c <chvprintf+0x2c>
      chSequentialStreamPut(chp, (uint8_t)filler);
 80049bc:	683d      	ldr	r5, [r7, #0]
 80049be:	1e73      	subs	r3, r6, #1
 80049c0:	68aa      	ldr	r2, [r5, #8]
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80049c2:	461c      	mov	r4, r3
      chSequentialStreamPut(chp, (uint8_t)filler);
 80049c4:	4638      	mov	r0, r7
 80049c6:	4641      	mov	r1, r8
 80049c8:	f003 0501 	and.w	r5, r3, #1
 80049cc:	4790      	blx	r2
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80049ce:	b1a4      	cbz	r4, 80049fa <chvprintf+0x38a>
 80049d0:	b135      	cbz	r5, 80049e0 <chvprintf+0x370>
      chSequentialStreamPut(chp, (uint8_t)filler);
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	4638      	mov	r0, r7
 80049d6:	688b      	ldr	r3, [r1, #8]
 80049d8:	4641      	mov	r1, r8
 80049da:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80049dc:	3c01      	subs	r4, #1
 80049de:	d00c      	beq.n	80049fa <chvprintf+0x38a>
      chSequentialStreamPut(chp, (uint8_t)filler);
 80049e0:	6838      	ldr	r0, [r7, #0]
 80049e2:	4641      	mov	r1, r8
 80049e4:	6882      	ldr	r2, [r0, #8]
 80049e6:	4638      	mov	r0, r7
 80049e8:	4790      	blx	r2
 80049ea:	6839      	ldr	r1, [r7, #0]
      n++;
      width--;
 80049ec:	3c01      	subs	r4, #1
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
      chSequentialStreamPut(chp, (uint8_t)filler);
 80049ee:	688b      	ldr	r3, [r1, #8]
 80049f0:	4638      	mov	r0, r7
 80049f2:	4641      	mov	r1, r8
 80049f4:	4798      	blx	r3
    while (--i >= 0) {
      chSequentialStreamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80049f6:	3c01      	subs	r4, #1
 80049f8:	d1f2      	bne.n	80049e0 <chvprintf+0x370>
 80049fa:	9804      	ldr	r0, [sp, #16]
 80049fc:	1832      	adds	r2, r6, r0
 80049fe:	9204      	str	r2, [sp, #16]
 8004a00:	e64c      	b.n	800469c <chvprintf+0x2c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004a02:	2210      	movs	r2, #16
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8004a04:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8004a08:	a80a      	add	r0, sp, #40	; 0x28
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8004a0a:	f10a 0a04 	add.w	sl, sl, #4
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f002 fd96 	bl	8007540 <long_to_string_with_divisor.10737>
 8004a14:	9903      	ldr	r1, [sp, #12]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8004a16:	aa0a      	add	r2, sp, #40	; 0x28
 8004a18:	1a40      	subs	r0, r0, r1
 8004a1a:	9005      	str	r0, [sp, #20]
 8004a1c:	e75e      	b.n	80048dc <chvprintf+0x26c>
 8004a1e:	9a07      	ldr	r2, [sp, #28]
      else
        l = va_arg(ap, unsigned int);
      p = ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8004a20:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004a24:	9205      	str	r2, [sp, #20]
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8004a26:	aa0a      	add	r2, sp, #40	; 0x28
 8004a28:	e758      	b.n	80048dc <chvprintf+0x26c>
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	e7ea      	b.n	8004a04 <chvprintf+0x394>
 8004a2e:	bf00      	nop
 8004a30:	0800a48c 	.word	0x0800a48c
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8004a34:	f8da 1000 	ldr.w	r1, [sl]
 8004a38:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 8004a3c:	2900      	cmp	r1, #0
 8004a3e:	db42      	blt.n	8004ac6 <chvprintf+0x456>
    if (c != '%') {
      chSequentialStreamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8004a40:	a80a      	add	r0, sp, #40	; 0x28
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8004a42:	220a      	movs	r2, #10
 8004a44:	e7e3      	b.n	8004a0e <chvprintf+0x39e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004a46:	220a      	movs	r2, #10
 8004a48:	e7dc      	b.n	8004a04 <chvprintf+0x394>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
 8004a4a:	f89b 4000 	ldrb.w	r4, [fp]
 8004a4e:	2c00      	cmp	r4, #0
 8004a50:	f43f ae6c 	beq.w	800472c <chvprintf+0xbc>
        c = *fmt++;
 8004a54:	f10b 0b01 	add.w	fp, fp, #1
 8004a58:	4623      	mov	r3, r4
 8004a5a:	e667      	b.n	800472c <chvprintf+0xbc>
 8004a5c:	4659      	mov	r1, fp
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8004a5e:	2500      	movs	r5, #0
 8004a60:	e005      	b.n	8004a6e <chvprintf+0x3fe>
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8004a62:	f89a 4000 	ldrb.w	r4, [sl]
 8004a66:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 8004a6a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8004a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8004a72:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8004a76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004a7a:	b2d4      	uxtb	r4, r2
 8004a7c:	2c09      	cmp	r4, #9
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8004a7e:	468b      	mov	fp, r1
        if (c >= '0' && c <= '9')
 8004a80:	d9f3      	bls.n	8004a6a <chvprintf+0x3fa>
          c -= '0';
        else if (c == '*')
 8004a82:	2b2a      	cmp	r3, #42	; 0x2a
 8004a84:	d0ed      	beq.n	8004a62 <chvprintf+0x3f2>
 8004a86:	e64b      	b.n	8004720 <chvprintf+0xb0>
 8004a88:	7863      	ldrb	r3, [r4, #1]
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
 8004a8a:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
 8004a8e:	3401      	adds	r4, #1
 8004a90:	e62c      	b.n	80046ec <chvprintf+0x7c>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8004a92:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8004a96:	f47f af2f 	bne.w	80048f8 <chvprintf+0x288>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8004a9a:	683c      	ldr	r4, [r7, #0]
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	9201      	str	r2, [sp, #4]
 8004aa2:	4798      	blx	r3
 8004aa4:	9901      	ldr	r1, [sp, #4]
        n++;
 8004aa6:	9804      	ldr	r0, [sp, #16]
        i--;
 8004aa8:	9b05      	ldr	r3, [sp, #20]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
 8004aaa:	1c4a      	adds	r2, r1, #1
        n++;
 8004aac:	1c44      	adds	r4, r0, #1
        i--;
 8004aae:	1e59      	subs	r1, r3, #1
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        chSequentialStreamPut(chp, (uint8_t)*s++);
        n++;
 8004ab0:	9404      	str	r4, [sp, #16]
        i--;
 8004ab2:	9105      	str	r1, [sp, #20]
 8004ab4:	e720      	b.n	80048f8 <chvprintf+0x288>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8004ab6:	202d      	movs	r0, #45	; 0x2d
        f = -f;
 8004ab8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8004abc:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8004ac0:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 8004ac4:	e6b6      	b.n	8004834 <chvprintf+0x1c4>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8004ac6:	242d      	movs	r4, #45	; 0x2d
 8004ac8:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        l = -l;
 8004acc:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8004ace:	f10d 0029 	add.w	r0, sp, #41	; 0x29
  return p;
}

static char *ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8004ad2:	220a      	movs	r2, #10
 8004ad4:	e79b      	b.n	8004a0e <chvprintf+0x39e>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8004ad6:	9405      	str	r4, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8004ad8:	f04f 0820 	mov.w	r8, #32
 8004adc:	e6fe      	b.n	80048dc <chvprintf+0x26c>
 8004ade:	bf00      	nop

08004ae0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8004ae2:	6803      	ldr	r3, [r0, #0]
 8004ae4:	4604      	mov	r4, r0

  while (queue_notempty(tqp))
 8004ae6:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8004ae8:	460d      	mov	r5, r1

  while (queue_notempty(tqp))
 8004aea:	d009      	beq.n	8004b00 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8004aec:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  chSchReadyI(tp);
 8004aee:	4618      	mov	r0, r3
 8004af0:	6022      	str	r2, [r4, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8004af2:	621d      	str	r5, [r3, #32]
 8004af4:	6054      	str	r4, [r2, #4]
  chSchReadyI(tp);
 8004af6:	f7fd fa7b 	bl	8001ff0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	429c      	cmp	r4, r3
 8004afe:	d1f5      	bne.n	8004aec <chThdDequeueAllI+0xc>
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	f3af 8000 	nop.w
 8004b08:	f3af 8000 	nop.w
 8004b0c:	f3af 8000 	nop.w

08004b10 <usb_packet_write_from_queue.10326.4242>:
 *                      not exceed the maximum packet size for this endpoint.
 *
 * @notapi
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
 8004b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004b14:	6807      	ldr	r7, [r0, #0]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004b16:	6042      	str	r2, [r0, #4]
 */
static void usb_packet_write_from_queue(stm32_usb_descriptor_t *udp,
                                        output_queue_t *oqp, size_t n) {
  size_t nhw;
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004b18:	f107 5300 	add.w	r3, r7, #536870912	; 0x20000000
 8004b1c:	f503 5640 	add.w	r6, r3, #12288	; 0x3000
 8004b20:	0077      	lsls	r7, r6, #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004b22:	0856      	lsrs	r6, r2, #1
 8004b24:	d04f      	beq.n	8004bc6 <usb_packet_write_from_queue.10326.4242+0xb6>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b26:	698b      	ldr	r3, [r1, #24]
 8004b28:	690c      	ldr	r4, [r1, #16]
 8004b2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004b2e:	1e75      	subs	r5, r6, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b30:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b32:	618b      	str	r3, [r1, #24]
 8004b34:	f005 0c01 	and.w	ip, r5, #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b38:	d26a      	bcs.n	8004c10 <usb_packet_write_from_queue.10326.4242+0x100>
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b3a:	f813 5b01 	ldrb.w	r5, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b3e:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b40:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004b42:	bf28      	it	cs
 8004b44:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b46:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8004b4a:	4638      	mov	r0, r7
    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004b4c:	bf28      	it	cs
 8004b4e:	618b      	strcs	r3, [r1, #24]
    *pmap++ = w;
 8004b50:	f840 5b04 	str.w	r5, [r0], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004b54:	1e75      	subs	r5, r6, #1
 8004b56:	d034      	beq.n	8004bc2 <usb_packet_write_from_queue.10326.4242+0xb2>
 8004b58:	f1bc 0f00 	cmp.w	ip, #0
 8004b5c:	d013      	beq.n	8004b86 <usb_packet_write_from_queue.10326.4242+0x76>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b5e:	698b      	ldr	r3, [r1, #24]
 8004b60:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b64:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b66:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8004b68:	d228      	bcs.n	8004bbc <usb_packet_write_from_queue.10326.4242+0xac>
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b6a:	f813 8b01 	ldrb.w	r8, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b6e:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b70:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004b72:	bf28      	it	cs
 8004b74:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b76:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004b7a:	bf28      	it	cs
 8004b7c:	618b      	strcs	r3, [r1, #24]
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004b7e:	3d01      	subs	r5, #1
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8004b80:	f840 cb04 	str.w	ip, [r0], #4
  syssts_t sts;
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
 8004b84:	d01d      	beq.n	8004bc2 <usb_packet_write_from_queue.10326.4242+0xb2>
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b86:	698b      	ldr	r3, [r1, #24]
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
    nhw--;
 8004b88:	3d01      	subs	r5, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b8a:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b8e:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004b90:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004b92:	bf24      	itt	cs
 8004b94:	68cb      	ldrcs	r3, [r1, #12]
 8004b96:	618b      	strcs	r3, [r1, #24]
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b98:	f813 8b01 	ldrb.w	r8, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004b9c:	42a3      	cmp	r3, r4
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004b9e:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004ba0:	bf28      	it	cs
 8004ba2:	68cb      	ldrcs	r3, [r1, #12]
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
 8004ba4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004ba8:	bf28      	it	cs
 8004baa:	618b      	strcs	r3, [r1, #24]
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004bac:	698b      	ldr	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    w |= (stm32_usb_pma_t)*oqp->q_rdptr++ << 8;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
    *pmap++ = w;
 8004bae:	f840 cb04 	str.w	ip, [r0], #4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004bb2:	f813 cb01 	ldrb.w	ip, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004bb6:	42a3      	cmp	r3, r4
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004bb8:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8004bba:	d3d6      	bcc.n	8004b6a <usb_packet_write_from_queue.10326.4242+0x5a>
      oqp->q_rdptr = oqp->q_buffer;
 8004bbc:	68cb      	ldr	r3, [r1, #12]
 8004bbe:	618b      	str	r3, [r1, #24]
 8004bc0:	e7d3      	b.n	8004b6a <usb_packet_write_from_queue.10326.4242+0x5a>
 8004bc2:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    *pmap++ = w;
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8004bc6:	07d0      	lsls	r0, r2, #31
 8004bc8:	d509      	bpl.n	8004bde <usb_packet_write_from_queue.10326.4242+0xce>
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004bca:	698b      	ldr	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
 8004bcc:	6908      	ldr	r0, [r1, #16]
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004bce:	f813 4b01 	ldrb.w	r4, [r3], #1
    if (oqp->q_rdptr >= oqp->q_top)
 8004bd2:	4283      	cmp	r3, r0
    nhw--;
  }

  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *pmap = (stm32_usb_pma_t)*oqp->q_rdptr++;
 8004bd4:	603c      	str	r4, [r7, #0]
 8004bd6:	618b      	str	r3, [r1, #24]
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004bd8:	bf24      	itt	cs
 8004bda:	68cb      	ldrcs	r3, [r1, #12]
 8004bdc:	618b      	strcs	r3, [r1, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8004bde:	f3ef 8312 	mrs	r3, BASEPRI_MAX
 * @xclass
 */
syssts_t chSysGetStatusAndLockX(void) {

  syssts_t sts = port_get_irq_status();
  if (port_irq_enabled(sts)) {
 8004be2:	b9f3      	cbnz	r3, 8004c22 <usb_packet_write_from_queue.10326.4242+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be4:	f3ef 8305 	mrs	r3, IPSR

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004be8:	2420      	movs	r4, #32
 8004bea:	f384 8811 	msr	BASEPRI, r4
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8004bee:	688b      	ldr	r3, [r1, #8]
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	189a      	adds	r2, r3, r2
 8004bf4:	608a      	str	r2, [r1, #8]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	f7ff ff72 	bl	8004ae0 <chThdDequeueAllI>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bfc:	f3ef 8105 	mrs	r1, IPSR
 * @retval false        not running in ISR mode.
 * @retval true         running in ISR mode.
 */
static inline bool port_is_isr_context(void) {

  return (bool)((__get_IPSR() & 0x1FF) != 0);
 8004c00:	05c8      	lsls	r0, r1, #23
 8004c02:	0dc4      	lsrs	r4, r0, #23
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context())
 8004c04:	b13c      	cbz	r4, 8004c16 <usb_packet_write_from_queue.10326.4242+0x106>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8004c06:	2300      	movs	r3, #0
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w  = (stm32_usb_pma_t)*oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top)
      oqp->q_rdptr = oqp->q_buffer;
 8004c10:	68cb      	ldr	r3, [r1, #12]
 8004c12:	618b      	str	r3, [r1, #24]
 8004c14:	e791      	b.n	8004b3a <usb_packet_write_from_queue.10326.4242+0x2a>
      chSysUnlockFromISR();
    else {
      chSchRescheduleS();
 8004c16:	f7fc ffbb 	bl	8001b90 <chSchRescheduleS>
 8004c1a:	f384 8811 	msr	BASEPRI, r4
 8004c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  /* Updating queue.*/
  sts = osalSysGetStatusAndLockX();

  oqp->q_counter += n;
 8004c22:	688b      	ldr	r3, [r1, #8]
 8004c24:	4608      	mov	r0, r1
 8004c26:	189a      	adds	r2, r3, r2
 8004c28:	608a      	str	r2, [r1, #8]
 8004c2a:	2100      	movs	r1, #0
  osalThreadDequeueAllI(&oqp->q_waiting, Q_OK);

  osalSysRestoreStatusX(sts);
}
 8004c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c30:	f7ff bf56 	b.w	8004ae0 <chThdDequeueAllI>
 8004c34:	f3af 8000 	nop.w
 8004c38:	f3af 8000 	nop.w
 8004c3c:	f3af 8000 	nop.w

08004c40 <Vector90>:
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t istr;
  USBDriver *usbp = &USBD1;

  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;
 8004c44:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004c48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c4c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
/**
 * @brief   USB low priority interrupt handler.
 *
 * @isr
 */
CH_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8004c4e:	b083      	sub	sp, #12
  CH_IRQ_PROLOGUE();

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
 8004c50:	0561      	lsls	r1, r4, #21
 8004c52:	f100 823a 	bmi.w	80050ca <Vector90+0x48a>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
 8004c56:	0522      	lsls	r2, r4, #20
 8004c58:	d518      	bpl.n	8004c8c <Vector90+0x4c>
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004c5a:	48ba      	ldr	r0, [pc, #744]	; (8004f44 <Vector90+0x304>)
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8004c5c:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004c60:	f2c4 0300 	movt	r3, #16384	; 0x4000
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004c64:	6842      	ldr	r2, [r0, #4]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8004c66:	6c19      	ldr	r1, [r3, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004c68:	6812      	ldr	r2, [r2, #0]
    STM32_USB->ISTR = ~ISTR_RESET;
  }

  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
 8004c6a:	f041 0108 	orr.w	r1, r1, #8
 8004c6e:	6419      	str	r1, [r3, #64]	; 0x40
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8004c70:	b10a      	cbz	r2, 8004c76 <Vector90+0x36>
 8004c72:	2103      	movs	r1, #3
 8004c74:	4790      	blx	r2
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8004c76:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 8004c7a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004c7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8004c80:	f46f 6100 	mvn.w	r1, #2048	; 0x800
  /* USB bus SUSPEND condition handling.*/
  if (istr & ISTR_SUSP) {
    STM32_USB->CNTR |= CNTR_FSUSP;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
#if STM32_USB_LOW_POWER_ON_SUSPEND
    STM32_USB->CNTR |= CNTR_LP_MODE;
 8004c84:	f043 0204 	orr.w	r2, r3, #4
 8004c88:	6402      	str	r2, [r0, #64]	; 0x40
#endif
    STM32_USB->ISTR = ~ISTR_SUSP;
 8004c8a:	6441      	str	r1, [r0, #68]	; 0x44
  }

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
 8004c8c:	04e3      	lsls	r3, r4, #19
 8004c8e:	d512      	bpl.n	8004cb6 <Vector90+0x76>
    uint32_t fnr = STM32_USB->FNR;
 8004c90:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004c94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c98:	6c98      	ldr	r0, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8004c9a:	0400      	lsls	r0, r0, #16
 8004c9c:	f140 8208 	bpl.w	80050b0 <Vector90+0x470>
    }
#if STM32_USB_LOW_POWER_ON_SUSPEND
    else {
      /* Just noise, going back in SUSPEND mode, reference manual 22.4.5,
         table 169.*/
      STM32_USB->CNTR |= CNTR_LP_MODE;
 8004ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca2:	f042 0104 	orr.w	r1, r2, #4
 8004ca6:	6419      	str	r1, [r3, #64]	; 0x40
    }
#endif
    STM32_USB->ISTR = ~ISTR_WKUP;
 8004ca8:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004cac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004cb0:	f46f 5080 	mvn.w	r0, #4096	; 0x1000
 8004cb4:	6458      	str	r0, [r3, #68]	; 0x44
  }

  /* SOF handling.*/
  if (istr & ISTR_SOF) {
 8004cb6:	05a1      	lsls	r1, r4, #22
 8004cb8:	d50b      	bpl.n	8004cd2 <Vector90+0x92>
    _usb_isr_invoke_sof_cb(usbp);
 8004cba:	48a2      	ldr	r0, [pc, #648]	; (8004f44 <Vector90+0x304>)
 8004cbc:	6841      	ldr	r1, [r0, #4]
 8004cbe:	68ca      	ldr	r2, [r1, #12]
 8004cc0:	b102      	cbz	r2, 8004cc4 <Vector90+0x84>
 8004cc2:	4790      	blx	r2
    STM32_USB->ISTR = ~ISTR_SOF;
 8004cc4:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8004cc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004ccc:	f46f 7000 	mvn.w	r0, #512	; 0x200
 8004cd0:	6458      	str	r0, [r3, #68]	; 0x44
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8004cd2:	0422      	lsls	r2, r4, #16
 8004cd4:	f140 80fb 	bpl.w	8004ece <Vector90+0x28e>
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
 8004cd8:	f44f 48b8 	mov.w	r8, #23552	; 0x5c00
 8004cdc:	f2c4 0800 	movt	r8, #16384	; 0x4000
 8004ce0:	f004 040f 	and.w	r4, r4, #15
 8004ce4:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8004ce8:	f640 5534 	movw	r5, #3380	; 0xd34
 8004cec:	1ca6      	adds	r6, r4, #2
 8004cee:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004cf2:	eb05 0186 	add.w	r1, r5, r6, lsl #2

    if (epr & EPR_CTR_TX) {
 8004cf6:	063b      	lsls	r3, r7, #24
  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
    size_t n;
    uint32_t ep;
    uint32_t epr = STM32_USB->EPR[ep = istr & ISTR_EP_ID_MASK];
    const USBEndpointConfig *epcp = usbp->epc[ep];
 8004cf8:	684d      	ldr	r5, [r1, #4]

    if (epr & EPR_CTR_TX) {
 8004cfa:	d572      	bpl.n	8004de2 <Vector90+0x1a2>
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8004cfc:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004d00:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
    const USBEndpointConfig *epcp = usbp->epc[ep];

    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);
 8004d04:	f422 43f1 	bic.w	r3, r2, #30848	; 0x7880
 8004d08:	f023 0070 	bic.w	r0, r3, #112	; 0x70
 8004d0c:	f848 0024 	str.w	r0, [r8, r4, lsl #2]

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004d10:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
      epcp->in_state->txcnt  += transmitted;
 8004d14:	696b      	ldr	r3, [r5, #20]
    if (epr & EPR_CTR_TX) {
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
 8004d16:	f101 5200 	add.w	r2, r1, #536870912	; 0x20000000
 8004d1a:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
 8004d1e:	eb00 010c 	add.w	r1, r0, ip
 8004d22:	004a      	lsls	r2, r1, #1
 8004d24:	f8d2 9004 	ldr.w	r9, [r2, #4]
      epcp->in_state->txcnt  += transmitted;
 8004d28:	6898      	ldr	r0, [r3, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
 8004d2a:	6859      	ldr	r1, [r3, #4]
      size_t transmitted;
      /* IN endpoint, transmission.*/
      EPR_CLEAR_CTR_TX(ep);

      transmitted = (size_t)USB_GET_DESCRIPTOR(ep)->TXCOUNT0;
      epcp->in_state->txcnt  += transmitted;
 8004d2c:	eb09 0200 	add.w	r2, r9, r0
 8004d30:	609a      	str	r2, [r3, #8]
      n = epcp->in_state->txsize - epcp->in_state->txcnt;
      if (n > 0) {
 8004d32:	1a8a      	subs	r2, r1, r2
 8004d34:	f000 80f2 	beq.w	8004f1c <Vector90+0x2dc>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
 8004d38:	8a29      	ldrh	r1, [r5, #16]
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
 8004d3a:	7818      	ldrb	r0, [r3, #0]
 8004d3c:	428a      	cmp	r2, r1
 8004d3e:	bf28      	it	cs
 8004d40:	460a      	movcs	r2, r1
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f040 81a4 	bne.w	8005090 <Vector90+0x450>
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 8004d48:	68d8      	ldr	r0, [r3, #12]
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8004d4a:	1c51      	adds	r1, r2, #1
        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
 8004d4c:	4448      	add	r0, r9
 8004d4e:	60d8      	str	r0, [r3, #12]
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004d50:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d54:	0849      	lsrs	r1, r1, #1
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                      epcp->in_state->mode.queue.txqueue,
                                      n);
        else {
          epcp->in_state->mode.linear.txbuf += transmitted;
          usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8004d56:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004d5a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d5e:	449c      	add	ip, r3
 8004d60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004d64:	f8dc 3000 	ldr.w	r3, [ip]

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8004d68:	f8cc 2004 	str.w	r2, [ip, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8004d6c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8004d70:	f502 5c40 	add.w	ip, r2, #12288	; 0x3000
 8004d74:	ea4f 0c4c 	mov.w	ip, ip, lsl #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d78:	d023      	beq.n	8004dc2 <Vector90+0x182>
 8004d7a:	3901      	subs	r1, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d7c:	f830 9b02 	ldrh.w	r9, [r0], #2
 8004d80:	4663      	mov	r3, ip
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d82:	460a      	mov	r2, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d84:	f843 9b04 	str.w	r9, [r3], #4
 8004d88:	f001 0101 	and.w	r1, r1, #1
 8004d8c:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d8e:	b1c2      	cbz	r2, 8004dc2 <Vector90+0x182>
 8004d90:	b139      	cbz	r1, 8004da2 <Vector90+0x162>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d92:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8004d96:	3304      	adds	r3, #4
 8004d98:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004d9a:	3a01      	subs	r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004d9c:	f8cc 1004 	str.w	r1, [ip, #4]
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004da0:	d00f      	beq.n	8004dc2 <Vector90+0x182>
 8004da2:	46a4      	mov	ip, r4
 8004da4:	46a9      	mov	r9, r5
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8004da6:	f830 5c02 	ldrh.w	r5, [r0, #-2]
 8004daa:	4619      	mov	r1, r3
 8004dac:	f830 4b02 	ldrh.w	r4, [r0], #2
 8004db0:	f841 5b04 	str.w	r5, [r1], #4
 8004db4:	3002      	adds	r0, #2
 8004db6:	605c      	str	r4, [r3, #4]
 8004db8:	1d0b      	adds	r3, r1, #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8004dba:	3a02      	subs	r2, #2
 8004dbc:	d1f3      	bne.n	8004da6 <Vector90+0x166>
 8004dbe:	4664      	mov	r4, ip
 8004dc0:	464d      	mov	r5, r9
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	f381 8811 	msr	BASEPRI, r1
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8004dc8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8004dcc:	f422 41f0 	bic.w	r1, r2, #30720	; 0x7800
 8004dd0:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8004dd4:	f080 0330 	eor.w	r3, r0, #48	; 0x30
 8004dd8:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f382 8811 	msr	BASEPRI, r2
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
 8004de2:	0438      	lsls	r0, r7, #16
 8004de4:	d56e      	bpl.n	8004ec4 <Vector90+0x284>
      EPR_CLEAR_CTR_RX(ep);
 8004de6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8004dea:	f422 4178 	bic.w	r1, r2, #63488	; 0xf800
 8004dee:	f021 0070 	bic.w	r0, r1, #112	; 0x70
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8004df2:	0539      	lsls	r1, r7, #20
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
      }
    }
    if (epr & EPR_CTR_RX) {
      EPR_CLEAR_CTR_RX(ep);
 8004df4:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
 8004df8:	f100 8084 	bmi.w	8004f04 <Vector90+0x2c4>
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004dfc:	f8d8 7050 	ldr.w	r7, [r8, #80]	; 0x50
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8004e00:	f8d5 9018 	ldr.w	r9, [r5, #24]
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004e04:	f107 5300 	add.w	r3, r7, #536870912	; 0x20000000
 8004e08:	f503 5240 	add.w	r2, r3, #12288	; 0x3000
 8004e0c:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 8004e10:	004b      	lsls	r3, r1, #1
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8004e12:	68d8      	ldr	r0, [r3, #12]

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8004e14:	f899 2000 	ldrb.w	r2, [r9]
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
      }
      else {
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8004e18:	ea4f 5c80 	mov.w	ip, r0, lsl #22
 8004e1c:	ea4f 579c 	mov.w	r7, ip, lsr #22

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	f040 8091 	bne.w	8004f48 <Vector90+0x308>
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004e26:	6898      	ldr	r0, [r3, #8]

  n = (n + 1) / 2;
 8004e28:	1c7b      	adds	r3, r7, #1
 *
 * @notapi
 */
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004e2a:	f100 5100 	add.w	r1, r0, #536870912	; 0x20000000
 8004e2e:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
 8004e32:	0051      	lsls	r1, r2, #1

  n = (n + 1) / 2;
  while (n > 0) {
 8004e34:	085a      	lsrs	r2, r3, #1
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
                                   epcp->out_state->mode.queue.rxqueue,
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
 8004e36:	f8d9 000c 	ldr.w	r0, [r9, #12]
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004e3a:	d022      	beq.n	8004e82 <Vector90+0x242>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004e3c:	680b      	ldr	r3, [r1, #0]
 8004e3e:	3a01      	subs	r2, #1
 8004e40:	f820 3b02 	strh.w	r3, [r0], #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004e44:	4613      	mov	r3, r2
 8004e46:	3002      	adds	r0, #2
 8004e48:	f002 0201 	and.w	r2, r2, #1
 8004e4c:	b1bb      	cbz	r3, 8004e7e <Vector90+0x23e>
 8004e4e:	b132      	cbz	r2, 8004e5e <Vector90+0x21e>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004e50:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8004e54:	f820 2c02 	strh.w	r2, [r0, #-2]
 8004e58:	3002      	adds	r0, #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	d00f      	beq.n	8004e7e <Vector90+0x23e>
 8004e5e:	46a2      	mov	sl, r4
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004e60:	684c      	ldr	r4, [r1, #4]
 8004e62:	f101 0c04 	add.w	ip, r1, #4
 8004e66:	6889      	ldr	r1, [r1, #8]
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f820 4c02 	strh.w	r4, [r0, #-2]
 8004e6e:	f822 1b02 	strh.w	r1, [r2], #2
 8004e72:	1c90      	adds	r0, r2, #2
static void usb_packet_read_to_buffer(stm32_usb_descriptor_t *udp,
                                      uint8_t *buf, size_t n) {
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  n = (n + 1) / 2;
  while (n > 0) {
 8004e74:	3b02      	subs	r3, #2
 8004e76:	f10c 0104 	add.w	r1, ip, #4
 8004e7a:	d1f1      	bne.n	8004e60 <Vector90+0x220>
 8004e7c:	4654      	mov	r4, sl
 8004e7e:	f8d9 000c 	ldr.w	r0, [r9, #12]
                                   n);
        else {
          usb_packet_read_to_buffer(udp,
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
 8004e82:	19c3      	adds	r3, r0, r7
 8004e84:	f8c9 300c 	str.w	r3, [r9, #12]
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
        epcp->out_state->rxsize             -= n;
        epcp->out_state->rxpkts             -= 1;
 8004e88:	f8b9 3010 	ldrh.w	r3, [r9, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004e8c:	8a68      	ldrh	r0, [r5, #18]
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004e8e:	f8d9 1008 	ldr.w	r1, [r9, #8]
        epcp->out_state->rxsize             -= n;
 8004e92:	f8d9 2004 	ldr.w	r2, [r9, #4]
        epcp->out_state->rxpkts             -= 1;
 8004e96:	3b01      	subs	r3, #1
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004e98:	19c9      	adds	r1, r1, r7
        epcp->out_state->rxsize             -= n;
 8004e9a:	1bd2      	subs	r2, r2, r7
        epcp->out_state->rxpkts             -= 1;
 8004e9c:	b29b      	uxth	r3, r3

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004e9e:	4287      	cmp	r7, r0
                                    epcp->out_state->mode.linear.rxbuf,
                                    n);
          epcp->out_state->mode.linear.rxbuf += n;
        }
        /* Transaction data updated.*/
        epcp->out_state->rxcnt              += n;
 8004ea0:	f8c9 1008 	str.w	r1, [r9, #8]
        epcp->out_state->rxsize             -= n;
 8004ea4:	f8c9 2004 	str.w	r2, [r9, #4]
        epcp->out_state->rxpkts             -= 1;
 8004ea8:	f8a9 3010 	strh.w	r3, [r9, #16]

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
 8004eac:	d314      	bcc.n	8004ed8 <Vector90+0x298>
 8004eae:	b19b      	cbz	r3, 8004ed8 <Vector90+0x298>
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
        }
        else {
          /* Transfer not complete, there are more packets to receive.*/
          EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8004eb0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8004eb4:	f420 4190 	bic.w	r1, r0, #18432	; 0x4800
 8004eb8:	f021 0270 	bic.w	r2, r1, #112	; 0x70
 8004ebc:	f482 5340 	eor.w	r3, r2, #12288	; 0x3000
 8004ec0:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
        }
      }
    }
    istr = STM32_USB->ISTR;
 8004ec4:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
    _usb_isr_invoke_sof_cb(usbp);
    STM32_USB->ISTR = ~ISTR_SOF;
  }

  /* Endpoint events handling.*/
  while (istr & ISTR_CTR) {
 8004ec8:	0423      	lsls	r3, r4, #16
 8004eca:	f53f af09 	bmi.w	8004ce0 <Vector90+0xa0>
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
}
 8004ece:	b003      	add	sp, #12
 8004ed0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      }
    }
    istr = STM32_USB->ISTR;
  }

  CH_IRQ_EPILOGUE();
 8004ed4:	f7fd b85c 	b.w	8001f90 <_port_irq_epilogue>

        /* The transaction is completed if the specified number of packets
           has been received or the current packet is a short packet.*/
        if ((n < epcp->out_maxsize) || (epcp->out_state->rxpkts == 0)) {
          /* Transfer complete, invokes the callback.*/
          _usb_isr_invoke_out_cb(usbp, ep);
 8004ed8:	2001      	movs	r0, #1
 8004eda:	40a0      	lsls	r0, r4
 8004edc:	f640 5134 	movw	r1, #3380	; 0xd34
 8004ee0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004ee4:	894a      	ldrh	r2, [r1, #10]
 8004ee6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004eea:	ea22 0200 	bic.w	r2, r2, r0
 8004eee:	6873      	ldr	r3, [r6, #4]
 8004ef0:	f640 5034 	movw	r0, #3380	; 0xd34
 8004ef4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ef8:	8142      	strh	r2, [r0, #10]
 8004efa:	4621      	mov	r1, r4
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	4811      	ldr	r0, [pc, #68]	; (8004f44 <Vector90+0x304>)
 8004f00:	4790      	blx	r2
 8004f02:	e7df      	b.n	8004ec4 <Vector90+0x284>
      EPR_CLEAR_CTR_RX(ep);
      /* OUT endpoint, receive.*/
      if (epr & EPR_SETUP) {
        /* Setup packets handling, setup packets are handled using a
           specific callback.*/
        _usb_isr_invoke_setup_cb(usbp, ep);
 8004f04:	f640 5134 	movw	r1, #3380	; 0xd34
 8004f08:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004f0c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004f10:	6873      	ldr	r3, [r6, #4]
 8004f12:	480c      	ldr	r0, [pc, #48]	; (8004f44 <Vector90+0x304>)
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4621      	mov	r1, r4
 8004f18:	4790      	blx	r2
 8004f1a:	e7d3      	b.n	8004ec4 <Vector90+0x284>
        usb_lld_start_in(usbp, ep);
        osalSysUnlockFromISR();
      }
      else {
        /* Transfer completed, invokes the callback.*/
        _usb_isr_invoke_in_cb(usbp, ep);
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	40a0      	lsls	r0, r4
 8004f20:	f640 5334 	movw	r3, #3380	; 0xd34
 8004f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f28:	8919      	ldrh	r1, [r3, #8]
 8004f2a:	68aa      	ldr	r2, [r5, #8]
 8004f2c:	ea21 0100 	bic.w	r1, r1, r0
 8004f30:	f640 5034 	movw	r0, #3380	; 0xd34
 8004f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004f38:	8101      	strh	r1, [r0, #8]
 8004f3a:	4802      	ldr	r0, [pc, #8]	; (8004f44 <Vector90+0x304>)
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4790      	blx	r2
 8004f40:	e74f      	b.n	8004de2 <Vector90+0x1a2>
 8004f42:	bf00      	nop
 8004f44:	20000d34 	.word	0x20000d34
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004f48:	6899      	ldr	r1, [r3, #8]

  nhw = n / 2;
  while (nhw > 0) {
 8004f4a:	ea5f 5cdc 	movs.w	ip, ip, lsr #23
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004f4e:	f101 5e00 	add.w	lr, r1, #536870912	; 0x20000000
 8004f52:	f50e 5240 	add.w	r2, lr, #12288	; 0x3000
        stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
        n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;

        /* Reads the packet into the defined buffer.*/
        if (epcp->out_state->rxqueued)
          usb_packet_read_to_queue(udp,
 8004f56:	f8d9 300c 	ldr.w	r3, [r9, #12]
 * @notapi
 */
static void usb_packet_read_to_queue(stm32_usb_descriptor_t *udp,
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);
 8004f5a:	ea4f 0e42 	mov.w	lr, r2, lsl #1

  nhw = n / 2;
  while (nhw > 0) {
 8004f5e:	d07a      	beq.n	8005056 <Vector90+0x416>
    stm32_usb_pma_t w;

    w = *pmap++;
 8004f60:	4672      	mov	r2, lr
    *iqp->q_wrptr++ = (uint8_t)w;
 8004f62:	f8d3 b014 	ldr.w	fp, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8004f66:	f852 9b04 	ldr.w	r9, [r2], #4
 8004f6a:	f10c 3aff 	add.w	sl, ip, #4294967295
    *iqp->q_wrptr++ = (uint8_t)w;
 8004f6e:	f80b 9b01 	strb.w	r9, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004f72:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004f74:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004f78:	458b      	cmp	fp, r1
 8004f7a:	f00a 0a01 	and.w	sl, sl, #1
 8004f7e:	f080 8094 	bcs.w	80050aa <Vector90+0x46a>
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004f82:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8004f86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8004f8a:	f80b 9b01 	strb.w	r9, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004f8e:	6919      	ldr	r1, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004f90:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004f94:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004f96:	bf24      	itt	cs
 8004f98:	68d9      	ldrcs	r1, [r3, #12]
 8004f9a:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8004f9c:	f1bc 0901 	subs.w	r9, ip, #1
 8004fa0:	d057      	beq.n	8005052 <Vector90+0x412>
 8004fa2:	f1ba 0f00 	cmp.w	sl, #0
 8004fa6:	d01d      	beq.n	8004fe4 <Vector90+0x3a4>
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004fa8:	f8d3 b014 	ldr.w	fp, [r3, #20]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 8004fac:	f852 ab04 	ldr.w	sl, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8004fb0:	f80b ab01 	strb.w	sl, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004fb4:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004fb6:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004fba:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004fbc:	bf28      	it	cs
 8004fbe:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004fc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8004fc4:	bf28      	it	cs
 8004fc6:	6159      	strcs	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004fc8:	f8d3 b014 	ldr.w	fp, [r3, #20]
 8004fcc:	f80b ab01 	strb.w	sl, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004fd0:	6919      	ldr	r1, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004fd2:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004fd6:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004fd8:	bf24      	itt	cs
 8004fda:	68d9      	ldrcs	r1, [r3, #12]
 8004fdc:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 8004fde:	f1b9 0901 	subs.w	r9, r9, #1
 8004fe2:	d036      	beq.n	8005052 <Vector90+0x412>
 8004fe4:	9001      	str	r0, [sp, #4]
    stm32_usb_pma_t w;

    w = *pmap++;
 8004fe6:	f852 0b04 	ldr.w	r0, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
 8004fea:	f8d3 b014 	ldr.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8004fee:	ea4f 2a10 	mov.w	sl, r0, lsr #8
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004ff2:	f80b 0b01 	strb.w	r0, [fp], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8004ff6:	6919      	ldr	r1, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8004ff8:	f8c3 b014 	str.w	fp, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8004ffc:	458b      	cmp	fp, r1
      iqp->q_wrptr = iqp->q_buffer;
 8004ffe:	bf28      	it	cs
 8005000:	68d9      	ldrcs	r1, [r3, #12]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
 8005002:	f109 39ff 	add.w	r9, r9, #4294967295
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 8005006:	bf28      	it	cs
 8005008:	6159      	strcs	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 800500a:	6959      	ldr	r1, [r3, #20]
 800500c:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8005010:	6918      	ldr	r0, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8005012:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8005014:	4281      	cmp	r1, r0
      iqp->q_wrptr = iqp->q_buffer;
 8005016:	bf28      	it	cs
 8005018:	68d9      	ldrcs	r1, [r3, #12]

  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
 800501a:	f852 ab04 	ldr.w	sl, [r2], #4
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 800501e:	bf28      	it	cs
 8005020:	6159      	strcs	r1, [r3, #20]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 8005022:	6959      	ldr	r1, [r3, #20]
 8005024:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8005028:	6918      	ldr	r0, [r3, #16]
  nhw = n / 2;
  while (nhw > 0) {
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
 800502a:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 800502c:	4281      	cmp	r1, r0
 800502e:	d301      	bcc.n	8005034 <Vector90+0x3f4>
      iqp->q_wrptr = iqp->q_buffer;
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	6159      	str	r1, [r3, #20]
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8005034:	6959      	ldr	r1, [r3, #20]
 8005036:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 800503a:	f801 ab01 	strb.w	sl, [r1], #1
    if (iqp->q_wrptr >= iqp->q_top)
 800503e:	6918      	ldr	r0, [r3, #16]

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    *iqp->q_wrptr++ = (uint8_t)(w >> 8);
 8005040:	6159      	str	r1, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8005042:	4281      	cmp	r1, r0
      iqp->q_wrptr = iqp->q_buffer;
 8005044:	bf24      	itt	cs
 8005046:	68d9      	ldrcs	r1, [r3, #12]
 8005048:	6159      	strcs	r1, [r3, #20]
                                     input_queue_t *iqp, size_t n) {
  size_t nhw;
  stm32_usb_pma_t *pmap= USB_ADDR2PTR(udp->RXADDR0);

  nhw = n / 2;
  while (nhw > 0) {
 800504a:	f1b9 0901 	subs.w	r9, r9, #1
 800504e:	d1ca      	bne.n	8004fe6 <Vector90+0x3a6>
 8005050:	9801      	ldr	r0, [sp, #4]
 8005052:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
 8005056:	07c2      	lsls	r2, r0, #31
 8005058:	d50a      	bpl.n	8005070 <Vector90+0x430>
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	f8de 1000 	ldr.w	r1, [lr]
 8005060:	f802 1b01 	strb.w	r1, [r2], #1
    if (iqp->q_wrptr >= iqp->q_top)
 8005064:	6918      	ldr	r0, [r3, #16]
      iqp->q_wrptr = iqp->q_buffer;
    nhw--;
  }
  /* Last byte for odd numbers.*/
  if ((n & 1) != 0) {
    *iqp->q_wrptr++ = (uint8_t)*pmap;
 8005066:	615a      	str	r2, [r3, #20]
    if (iqp->q_wrptr >= iqp->q_top)
 8005068:	4282      	cmp	r2, r0
      iqp->q_wrptr = iqp->q_buffer;
 800506a:	bf24      	itt	cs
 800506c:	68da      	ldrcs	r2, [r3, #12]
 800506e:	615a      	strcs	r2, [r3, #20]
 8005070:	2120      	movs	r1, #32
 8005072:	f381 8811 	msr	BASEPRI, r1
  }

  /* Updating queue.*/
  osalSysLockFromISR();

  iqp->q_counter += n;
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	4618      	mov	r0, r3
 800507a:	19ca      	adds	r2, r1, r7
 800507c:	609a      	str	r2, [r3, #8]
 800507e:	2100      	movs	r1, #0
 8005080:	f7ff fd2e 	bl	8004ae0 <chThdDequeueAllI>
 8005084:	2200      	movs	r2, #0
 8005086:	f382 8811 	msr	BASEPRI, r2
 800508a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800508e:	e6fb      	b.n	8004e88 <Vector90+0x248>
        /* Transfer not completed, there are more packets to send.*/
        if (n > epcp->in_maxsize)
          n = epcp->in_maxsize;

        if (epcp->in_state->txqueued)
          usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 8005090:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 8005094:	68d9      	ldr	r1, [r3, #12]
 8005096:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800509a:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 800509e:	eb00 030c 	add.w	r3, r0, ip
 80050a2:	0058      	lsls	r0, r3, #1
 80050a4:	f7ff fd34 	bl	8004b10 <usb_packet_write_from_queue.10326.4242>
 80050a8:	e68b      	b.n	8004dc2 <Vector90+0x182>
    stm32_usb_pma_t w;

    w = *pmap++;
    *iqp->q_wrptr++ = (uint8_t)w;
    if (iqp->q_wrptr >= iqp->q_top)
      iqp->q_wrptr = iqp->q_buffer;
 80050aa:	68d9      	ldr	r1, [r3, #12]
 80050ac:	6159      	str	r1, [r3, #20]
 80050ae:	e768      	b.n	8004f82 <Vector90+0x342>
  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80050b0:	480f      	ldr	r0, [pc, #60]	; (80050f0 <Vector90+0x4b0>)

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80050b2:	6c19      	ldr	r1, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80050b4:	6842      	ldr	r2, [r0, #4]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80050b6:	f021 0108 	bic.w	r1, r1, #8
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80050ba:	6812      	ldr	r2, [r2, #0]

  /* USB bus WAKEUP condition handling.*/
  if (istr & ISTR_WKUP) {
    uint32_t fnr = STM32_USB->FNR;
    if (!(fnr & FNR_RXDP)) {
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80050bc:	6419      	str	r1, [r3, #64]	; 0x40
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80050be:	2a00      	cmp	r2, #0
 80050c0:	f43f adf2 	beq.w	8004ca8 <Vector90+0x68>
 80050c4:	2104      	movs	r1, #4
 80050c6:	4790      	blx	r2
 80050c8:	e5ee      	b.n	8004ca8 <Vector90+0x68>

  istr = STM32_USB->ISTR;

  /* USB bus reset condition handling.*/
  if (istr & ISTR_RESET) {
    _usb_reset(usbp);
 80050ca:	4d09      	ldr	r5, [pc, #36]	; (80050f0 <Vector90+0x4b0>)
 80050cc:	4628      	mov	r0, r5
 80050ce:	f002 faff 	bl	80076d0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80050d2:	6868      	ldr	r0, [r5, #4]
 80050d4:	6802      	ldr	r2, [r0, #0]
 80050d6:	b112      	cbz	r2, 80050de <Vector90+0x49e>
 80050d8:	4628      	mov	r0, r5
 80050da:	2100      	movs	r1, #0
 80050dc:	4790      	blx	r2
    STM32_USB->ISTR = ~ISTR_RESET;
 80050de:	f44f 41b8 	mov.w	r1, #23552	; 0x5c00
 80050e2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80050e6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80050ea:	644b      	str	r3, [r1, #68]	; 0x44
 80050ec:	e5b3      	b.n	8004c56 <Vector90+0x16>
 80050ee:	bf00      	nop
 80050f0:	20000d34 	.word	0x20000d34
 80050f4:	f3af 8000 	nop.w
 80050f8:	f3af 8000 	nop.w
 80050fc:	f3af 8000 	nop.w

08005100 <usb_lld_prepare_transmit>:
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005100:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005104:	68c2      	ldr	r2, [r0, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 8005106:	b430      	push	{r4, r5}
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8005108:	6953      	ldr	r3, [r2, #20]

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 800510a:	8a10      	ldrh	r0, [r2, #16]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800510c:	460c      	mov	r4, r1
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
 800510e:	685a      	ldr	r2, [r3, #4]
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
 8005110:	7819      	ldrb	r1, [r3, #0]
 8005112:	4290      	cmp	r0, r2
 8005114:	bf38      	it	cc
 8005116:	4602      	movcc	r2, r0
 8005118:	2900      	cmp	r1, #0
 800511a:	d136      	bne.n	800518a <usb_lld_prepare_transmit+0x8a>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 800511c:	f44f 45b8 	mov.w	r5, #23552	; 0x5c00
 8005120:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8005124:	6d28      	ldr	r0, [r5, #80]	; 0x50
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
 8005126:	1c51      	adds	r1, r2, #1

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8005128:	f100 5500 	add.w	r5, r0, #536870912	; 0x20000000
 800512c:	f505 5040 	add.w	r0, r5, #12288	; 0x3000
 8005130:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005134:	0064      	lsls	r4, r4, #1
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005136:	6825      	ldr	r5, [r4, #0]

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
 8005138:	68d8      	ldr	r0, [r3, #12]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800513a:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
 800513e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8005142:	6062      	str	r2, [r4, #4]
 * @notapi
 */
static void usb_packet_write_from_buffer(stm32_usb_descriptor_t *udp,
                                         const uint8_t *buf,
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8005144:	005b      	lsls	r3, r3, #1

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8005146:	084a      	lsrs	r2, r1, #1
 8005148:	d01d      	beq.n	8005186 <usb_lld_prepare_transmit+0x86>
 800514a:	1e51      	subs	r1, r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800514c:	f830 4b02 	ldrh.w	r4, [r0], #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8005150:	460a      	mov	r2, r1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8005152:	f843 4b04 	str.w	r4, [r3], #4
 8005156:	f001 0101 	and.w	r1, r1, #1
 800515a:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800515c:	b19a      	cbz	r2, 8005186 <usb_lld_prepare_transmit+0x86>
 800515e:	b131      	cbz	r1, 800516e <usb_lld_prepare_transmit+0x6e>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8005160:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8005164:	3002      	adds	r0, #2
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8005166:	3a01      	subs	r2, #1
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 8005168:	f843 1b04 	str.w	r1, [r3], #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 800516c:	d00b      	beq.n	8005186 <usb_lld_prepare_transmit+0x86>
    /* Note, this line relies on the Cortex-M3/M4 ability to perform
       unaligned word accesses.*/
    *pmap++ = (stm32_usb_pma_t)*(const uint16_t *)buf;
 800516e:	f830 5c02 	ldrh.w	r5, [r0, #-2]
 8005172:	4619      	mov	r1, r3
 8005174:	f830 4b02 	ldrh.w	r4, [r0], #2
 8005178:	f841 5b04 	str.w	r5, [r1], #4
 800517c:	3002      	adds	r0, #2
 800517e:	605c      	str	r4, [r3, #4]
 8005180:	1d0b      	adds	r3, r1, #4
                                         size_t n) {
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);

  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
  n = (n + 1) / 2;
  while (n > 0) {
 8005182:	3a02      	subs	r2, #2
 8005184:	d1f3      	bne.n	800516e <usb_lld_prepare_transmit+0x6e>
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 8005186:	bc30      	pop	{r4, r5}
 8005188:	4770      	bx	lr
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 800518a:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 800518e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8005192:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8005194:	68d9      	ldr	r1, [r3, #12]
 8005196:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800519a:	f503 5040 	add.w	r0, r3, #12288	; 0x3000
 800519e:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
 80051a2:	0058      	lsls	r0, r3, #1
                                isp->mode.queue.txqueue, n);
  else
    usb_packet_write_from_buffer(USB_GET_DESCRIPTOR(ep),
                                 isp->mode.linear.txbuf, n);
}
 80051a4:	bc30      	pop	{r4, r5}
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
    n = (size_t)usbp->epc[ep]->in_maxsize;

  if (isp->txqueued)
    usb_packet_write_from_queue(USB_GET_DESCRIPTOR(ep),
 80051a6:	f7ff bcb3 	b.w	8004b10 <usb_packet_write_from_queue.10326.4242>
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w

080051b0 <usbPrepareTransmit.constprop.5>:
 * @param[in] buf       buffer where to fetch the data to be transmitted
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
 80051b0:	b410      	push	{r4}
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80051b2:	68c3      	ldr	r3, [r0, #12]

  isp->txqueued           = FALSE;
 80051b4:	2400      	movs	r4, #0
 *
 * @special
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80051b6:	695b      	ldr	r3, [r3, #20]

  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
 80051b8:	60d9      	str	r1, [r3, #12]
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80051ba:	4621      	mov	r1, r4
 */
void usbPrepareTransmit(USBDriver *usbp, usbep_t ep,
                        const uint8_t *buf, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = FALSE;
 80051bc:	701c      	strb	r4, [r3, #0]
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
 80051be:	605a      	str	r2, [r3, #4]
  isp->txcnt              = 0;
 80051c0:	609c      	str	r4, [r3, #8]

  usb_lld_prepare_transmit(usbp, ep);
}
 80051c2:	bc10      	pop	{r4}
  isp->txqueued           = FALSE;
  isp->mode.linear.txbuf  = buf;
  isp->txsize             = n;
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 80051c4:	f7ff bf9c 	b.w	8005100 <usb_lld_prepare_transmit>
 80051c8:	f3af 8000 	nop.w
 80051cc:	f3af 8000 	nop.w

080051d0 <gpt_lld_start>:
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 80051d0:	7803      	ldrb	r3, [r0, #0]
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
 80051d2:	b430      	push	{r4, r5}
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d013      	beq.n	8005200 <gpt_lld_start+0x30>
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80051d8:	6842      	ldr	r2, [r0, #4]
 80051da:	6881      	ldr	r1, [r0, #8]
 80051dc:	6814      	ldr	r4, [r2, #0]
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80051de:	68d5      	ldr	r5, [r2, #12]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80051e0:	fbb1 f1f4 	udiv	r1, r1, r4
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80051e4:	68c3      	ldr	r3, [r0, #12]
  gptp->tim->CR2  = gptp->config->cr2;
 80051e6:	6894      	ldr	r4, [r2, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80051e8:	1e48      	subs	r0, r1, #1
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80051ea:	2200      	movs	r2, #0
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
 80051ec:	b281      	uxth	r1, r0
  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  gptp->tim->CR2  = gptp->config->cr2;
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80051ee:	f025 00ff 	bic.w	r0, r5, #255	; 0xff
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
 80051f2:	601a      	str	r2, [r3, #0]
  gptp->tim->CR2  = gptp->config->cr2;
 80051f4:	605c      	str	r4, [r3, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
 80051f6:	6299      	str	r1, [r3, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
 80051f8:	611a      	str	r2, [r3, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
 80051fa:	60d8      	str	r0, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
}
 80051fc:	bc30      	pop	{r4, r5}
 80051fe:	4770      	bx	lr
      nvicEnableVector(STM32_TIM2_NUMBER, STM32_GPT_TIM2_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
 8005200:	4922      	ldr	r1, [pc, #136]	; (800528c <gpt_lld_start+0xbc>)
 8005202:	4288      	cmp	r0, r1
 8005204:	d022      	beq.n	800524c <gpt_lld_start+0x7c>
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
 8005206:	4a22      	ldr	r2, [pc, #136]	; (8005290 <gpt_lld_start+0xc0>)
 8005208:	4290      	cmp	r0, r2
 800520a:	d1e5      	bne.n	80051d8 <gpt_lld_start+0x8>
      rccEnableTIM4(FALSE);
 800520c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005210:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005214:	69dc      	ldr	r4, [r3, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8005216:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800521a:	f044 0504 	orr.w	r5, r4, #4
 800521e:	61dd      	str	r5, [r3, #28]
      rccResetTIM4();
 8005220:	691d      	ldr	r5, [r3, #16]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005222:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    }
#endif
#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
      rccEnableTIM4(FALSE);
      rccResetTIM4();
 8005226:	f045 0504 	orr.w	r5, r5, #4
 800522a:	611d      	str	r5, [r3, #16]
 800522c:	2500      	movs	r5, #0
 800522e:	611d      	str	r5, [r3, #16]
 8005230:	f2ce 0200 	movt	r2, #57344	; 0xe000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005234:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005238:	f2c0 21dc 	movt	r1, #732	; 0x2dc
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800523c:	2370      	movs	r3, #112	; 0x70
 800523e:	f882 331e 	strb.w	r3, [r2, #798]	; 0x31e
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005242:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8005246:	6014      	str	r4, [r2, #0]
 8005248:	6081      	str	r1, [r0, #8]
 800524a:	e7c5      	b.n	80051d8 <gpt_lld_start+0x8>
      gptp->clock = STM32_TIMCLK1;
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
 800524c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005254:	69d9      	ldr	r1, [r3, #28]
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 8005256:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800525a:	f041 0402 	orr.w	r4, r1, #2
 800525e:	61dc      	str	r4, [r3, #28]
      rccResetTIM3();
 8005260:	691d      	ldr	r5, [r3, #16]
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005262:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    }
#endif
#if STM32_GPT_USE_TIM3
    if (&GPTD3 == gptp) {
      rccEnableTIM3(FALSE);
      rccResetTIM3();
 8005266:	f045 0502 	orr.w	r5, r5, #2
 800526a:	611d      	str	r5, [r3, #16]
 800526c:	2500      	movs	r5, #0
 800526e:	611d      	str	r5, [r3, #16]
 8005270:	f2ce 0200 	movt	r2, #57344	; 0xe000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005274:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
      nvicEnableVector(STM32_TIM3_NUMBER, STM32_GPT_TIM3_IRQ_PRIORITY);
      gptp->clock = STM32_TIMCLK1;
 8005278:	f2c0 21dc 	movt	r1, #732	; 0x2dc
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800527c:	2370      	movs	r3, #112	; 0x70
 800527e:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 8005282:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 8005286:	6014      	str	r4, [r2, #0]
 8005288:	6081      	str	r1, [r0, #8]
 800528a:	e7a5      	b.n	80051d8 <gpt_lld_start+0x8>
 800528c:	200017d8 	.word	0x200017d8
 8005290:	200017e8 	.word	0x200017e8
 8005294:	f3af 8000 	nop.w
 8005298:	f3af 8000 	nop.w
 800529c:	f3af 8000 	nop.w

080052a0 <mbox1_setup.7601>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 80052a0:	f640 43e0 	movw	r3, #3296	; 0xce0
 80052a4:	f641 0248 	movw	r2, #6216	; 0x1848
 80052a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 * Messages are posted/fetched from a mailbox in carefully designed sequences
 * in order to stimulate all the possible code paths inside the mailbox.<br>
 * The test expects to find a consistent mailbox status after each operation.
 */

static void mbox1_setup(void) {
 80052b0:	b410      	push	{r4}
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 80052b2:	f103 001c 	add.w	r0, r3, #28
  mbp->mb_top = &buf[n];
 80052b6:	f102 0414 	add.w	r4, r2, #20
 80052ba:	f103 0110 	add.w	r1, r3, #16
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > 0));

  mbp->mb_buffer = mbp->mb_wrptr = mbp->mb_rdptr = buf;
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	609a      	str	r2, [r3, #8]
  mbp->mb_top = &buf[n];
 80052c2:	e883 0014 	stmia.w	r3, {r2, r4}
 80052c6:	6218      	str	r0, [r3, #32]
 80052c8:	61d8      	str	r0, [r3, #28]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 80052ca:	2205      	movs	r2, #5
 80052cc:	2000      	movs	r0, #0
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24
 80052d0:	6159      	str	r1, [r3, #20]
 80052d2:	6119      	str	r1, [r3, #16]
 80052d4:	6198      	str	r0, [r3, #24]

  chMBObjectInit(&mb1, (msg_t *)test.wa.T0, MB_SIZE);
}
 80052d6:	bc10      	pop	{r4}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	f3af 8000 	nop.w

080052e0 <sem3_setup.7070>:
 80052e0:	f640 4348 	movw	r3, #3144	; 0xc48
 80052e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052e8:	2200      	movs	r2, #0
 80052ea:	605b      	str	r3, [r3, #4]
 80052ec:	601b      	str	r3, [r3, #0]
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	f3af 8000 	nop.w
 80052f8:	f3af 8000 	nop.w
 80052fc:	f3af 8000 	nop.w

08005300 <sem2_setup.7072>:
 8005300:	f640 4348 	movw	r3, #3144	; 0xc48
 8005304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005308:	2200      	movs	r2, #0
 800530a:	605b      	str	r3, [r3, #4]
 800530c:	601b      	str	r3, [r3, #0]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	f3af 8000 	nop.w
 8005318:	f3af 8000 	nop.w
 800531c:	f3af 8000 	nop.w

08005320 <sem1_setup.7074>:
 8005320:	f640 4348 	movw	r3, #3144	; 0xc48
 8005324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005328:	2200      	movs	r2, #0
 800532a:	605b      	str	r3, [r3, #4]
 800532c:	601b      	str	r3, [r3, #0]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	f3af 8000 	nop.w
 8005338:	f3af 8000 	nop.w
 800533c:	f3af 8000 	nop.w

08005340 <bmk11_setup.8468>:
 8005340:	f241 43f8 	movw	r3, #5368	; 0x14f8
 8005344:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005348:	2201      	movs	r2, #1
 800534a:	605b      	str	r3, [r3, #4]
 800534c:	601b      	str	r3, [r3, #0]
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	f3af 8000 	nop.w
 8005358:	f3af 8000 	nop.w
 800535c:	f3af 8000 	nop.w

08005360 <bmk7_setup.8470>:
 8005360:	f241 43f8 	movw	r3, #5368	; 0x14f8
 8005364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005368:	2200      	movs	r2, #0
 800536a:	605b      	str	r3, [r3, #4]
 800536c:	601b      	str	r3, [r3, #0]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	f3af 8000 	nop.w
 8005378:	f3af 8000 	nop.w
 800537c:	f3af 8000 	nop.w

08005380 <dyn2_setup.8092>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 8005380:	f241 4354 	movw	r3, #5204	; 0x1454
 8005384:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005388:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 800538a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 800538e:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 8005390:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	f3af 8000 	nop.w
 800539c:	f3af 8000 	nop.w

080053a0 <pools1_setup.7960>:
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80053a0:	f640 0320 	movw	r3, #2080	; 0x820
 80053a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80053a8:	2200      	movs	r2, #0
  mp->mp_object_size = size;
 80053aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */
void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->mp_next = NULL;
 80053ae:	601a      	str	r2, [r3, #0]
  mp->mp_object_size = size;
 80053b0:	6059      	str	r1, [r3, #4]
  mp->mp_provider = provider;
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	f3af 8000 	nop.w
 80053bc:	f3af 8000 	nop.w

080053c0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  STM32_ST_TIM->SR = 0;
 80053c4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80053c8:	f04f 0800 	mov.w	r8, #0
 80053cc:	f8c6 8010 	str.w	r8, [r6, #16]
 80053d0:	2720      	movs	r7, #32
 80053d2:	f387 8811 	msr	BASEPRI, r7
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 80053d6:	4c20      	ldr	r4, [pc, #128]	; (8005458 <VectorB0+0x98>)
 80053d8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80053da:	8ce1      	ldrh	r1, [r4, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 80053dc:	69e3      	ldr	r3, [r4, #28]
 80053de:	b280      	uxth	r0, r0
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 80053e0:	1a45      	subs	r5, r0, r1

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 80053e2:	891a      	ldrh	r2, [r3, #8]
 80053e4:	b2ad      	uxth	r5, r5
 80053e6:	4295      	cmp	r5, r2
 80053e8:	f104 051c 	add.w	r5, r4, #28
 80053ec:	d318      	bcc.n	8005420 <VectorB0+0x60>
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80053ee:	6818      	ldr	r0, [r3, #0]
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
      break;

    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80053f0:	1852      	adds	r2, r2, r1
 80053f2:	84e2      	strh	r2, [r4, #38]	; 0x26

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80053f4:	68d9      	ldr	r1, [r3, #12]
    /* The "last time" becomes this timer's expiration time.*/
    delta -= vtp->vt_delta;
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    /* The timer is removed from the list and marked as non-armed.*/
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80053f6:	6045      	str	r5, [r0, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80053f8:	61e0      	str	r0, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = (vtfunc_t)NULL;
 80053fa:	f8c3 800c 	str.w	r8, [r3, #12]
 80053fe:	f388 8811 	msr	BASEPRI, r8

    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
 8005402:	6918      	ldr	r0, [r3, #16]
 8005404:	4788      	blx	r1
 8005406:	f387 8811 	msr	BASEPRI, r7
 800540a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 800540c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 800540e:	69e3      	ldr	r3, [r4, #28]
 8005410:	b280      	uxth	r0, r0
    systime_t delta;

    /* Getting the current system time and calculating the time window since
       the last time has expired.*/
    now = chVTGetSystemTimeX();
    delta = now - ch.vtlist.vt_lasttime;
 8005412:	ebc1 0c00 	rsb	ip, r1, r0

    /* The next element is outside the current time window, the loop
       is stopped here.*/
    if ((vtp = ch.vtlist.vt_next)->vt_delta > delta)
 8005416:	891a      	ldrh	r2, [r3, #8]
 8005418:	fa1f fc8c 	uxth.w	ip, ip
 800541c:	4594      	cmp	ip, r2
 800541e:	d2e6      	bcs.n	80053ee <VectorB0+0x2e>
    /* The callback is invoked outside the kernel critical zone.*/
    chSysUnlockFromISR();
    fn(vtp->vt_par);
    chSysLockFromISR();
  }
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8005420:	42ab      	cmp	r3, r5
 8005422:	d013      	beq.n	800544c <VectorB0+0x8c>
    port_timer_stop_alarm();
  }
  else {
    /* Updating the alarm to the next deadline, deadline that must not be
       closer in time than the minimum time delta.*/
    if (vtp->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8005424:	2a01      	cmp	r2, #1
 8005426:	d00b      	beq.n	8005440 <VectorB0+0x80>
      port_timer_set_alarm(now + vtp->vt_delta);
 8005428:	1812      	adds	r2, r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800542a:	b291      	uxth	r1, r2
 800542c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005430:	6341      	str	r1, [r0, #52]	; 0x34
 8005432:	2100      	movs	r1, #0
 8005434:	f381 8811 	msr	BASEPRI, r1
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8005438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 800543c:	f7fc bda8 	b.w	8001f90 <_port_irq_epilogue>
    else
      port_timer_set_alarm(now + CH_CFG_ST_TIMEDELTA);
 8005440:	1c81      	adds	r1, r0, #2
 8005442:	b288      	uxth	r0, r1
 8005444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005448:	6358      	str	r0, [r3, #52]	; 0x34
 800544a:	e7f2      	b.n	8005432 <VectorB0+0x72>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800544c:	2200      	movs	r2, #0
 800544e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	e7ed      	b.n	8005432 <VectorB0+0x72>
 8005456:	bf00      	nop
 8005458:	20001eb8 	.word	0x20001eb8
 800545c:	f3af 8000 	nop.w

08005460 <spi_lld_serve_rx_interrupt.9955>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005462:	070b      	lsls	r3, r1, #28
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8005464:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005466:	d431      	bmi.n	80054cc <spi_lld_serve_rx_interrupt.9955+0x6c>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8005468:	6a42      	ldr	r2, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 800546a:	6a03      	ldr	r3, [r0, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800546c:	6815      	ldr	r5, [r2, #0]
 800546e:	6856      	ldr	r6, [r2, #4]
 8005470:	682f      	ldr	r7, [r5, #0]
 8005472:	210f      	movs	r1, #15
 8005474:	f027 070f 	bic.w	r7, r7, #15
 8005478:	602f      	str	r7, [r5, #0]
 800547a:	7a15      	ldrb	r5, [r2, #8]
  dmaStreamDisable(spip->dmarx);
 800547c:	681a      	ldr	r2, [r3, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 800547e:	fa01 f505 	lsl.w	r5, r1, r5
 8005482:	6035      	str	r5, [r6, #0]
  dmaStreamDisable(spip->dmarx);
 8005484:	6816      	ldr	r6, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8005486:	6845      	ldr	r5, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8005488:	f026 060f 	bic.w	r6, r6, #15
 800548c:	6016      	str	r6, [r2, #0]
 800548e:	7a1e      	ldrb	r6, [r3, #8]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	fa01 f106 	lsl.w	r1, r1, r6

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8005496:	682b      	ldr	r3, [r5, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8005498:	6011      	str	r1, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800549a:	b1a3      	cbz	r3, 80054c6 <spi_lld_serve_rx_interrupt.9955+0x66>
 800549c:	2104      	movs	r1, #4
 800549e:	7001      	strb	r1, [r0, #0]
 80054a0:	4798      	blx	r3
 80054a2:	7820      	ldrb	r0, [r4, #0]
 80054a4:	2804      	cmp	r0, #4
 80054a6:	d00e      	beq.n	80054c6 <spi_lld_serve_rx_interrupt.9955+0x66>
 80054a8:	2320      	movs	r3, #32
 80054aa:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80054ae:	68a1      	ldr	r1, [r4, #8]
 80054b0:	b129      	cbz	r1, 80054be <spi_lld_serve_rx_interrupt.9955+0x5e>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 80054b2:	2200      	movs	r2, #0
 80054b4:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    chSchReadyI(tp);
 80054b6:	4608      	mov	r0, r1

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 80054b8:	620a      	str	r2, [r1, #32]
    chSchReadyI(tp);
 80054ba:	f7fc fd99 	bl	8001ff0 <chSchReadyI>
 80054be:	2000      	movs	r0, #0
 80054c0:	f380 8811 	msr	BASEPRI, r0
 80054c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c6:	2202      	movs	r2, #2
 80054c8:	7022      	strb	r2, [r4, #0]
 80054ca:	e7ed      	b.n	80054a8 <spi_lld_serve_rx_interrupt.9955+0x48>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054cc:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80054ce:	4c02      	ldr	r4, [pc, #8]	; (80054d8 <spi_lld_serve_rx_interrupt.9955+0x78>)
 80054d0:	4f02      	ldr	r7, [pc, #8]	; (80054dc <spi_lld_serve_rx_interrupt.9955+0x7c>)
 80054d2:	62bc      	str	r4, [r7, #40]	; 0x28
 80054d4:	e7fe      	b.n	80054d4 <spi_lld_serve_rx_interrupt.9955+0x74>
 80054d6:	bf00      	nop
 80054d8:	0800a480 	.word	0x0800a480
 80054dc:	20001eb8 	.word	0x20001eb8

080054e0 <chSemSignalWait.constprop.52.4464>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 80054e0:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80054e2:	2320      	movs	r3, #32
 80054e4:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(((spw->s_cnt >= 0) && queue_isempty(&spw->s_queue)) ||
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
 80054e8:	4c14      	ldr	r4, [pc, #80]	; (800553c <chSemSignalWait.constprop.52.4464+0x5c>)
 80054ea:	68a0      	ldr	r0, [r4, #8]
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	60a3      	str	r3, [r4, #8]
 80054f2:	dd18      	ble.n	8005526 <chSemSignalWait.constprop.52.4464+0x46>
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
 80054f4:	1e58      	subs	r0, r3, #1
 80054f6:	2800      	cmp	r0, #0
 80054f8:	60a0      	str	r0, [r4, #8]
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <chSemSignalWait.constprop.52.4464+0x5c>)
 80054fc:	db06      	blt.n	800550c <chSemSignalWait.constprop.52.4464+0x2c>
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->p_u.rdymsg;
  }
  else {
    chSchRescheduleS();
 80054fe:	f7fc fb47 	bl	8001b90 <chSchRescheduleS>
    msg = MSG_OK;
 8005502:	2000      	movs	r0, #0
 8005504:	2100      	movs	r1, #0
 8005506:	f381 8811 	msr	BASEPRI, r1
  }
  chSysUnlock();
  return msg;
}
 800550a:	bd10      	pop	{r4, pc}

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
 800550c:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <chSemSignalWait.constprop.52.4464+0x60>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 800550e:	6853      	ldr	r3, [r2, #4]
 8005510:	69a4      	ldr	r4, [r4, #24]
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 8005512:	2005      	movs	r0, #5
 8005514:	e884 000c 	stmia.w	r4, {r2, r3}
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
  if (--spw->s_cnt < 0) {
    thread_t *ctp = currp;
    sem_insert(ctp, &spw->s_queue);
    ctp->p_u.wtobjp = spw;
 8005518:	6222      	str	r2, [r4, #32]
  tp->p_prev->p_next = tqp->p_prev = tp;
 800551a:	6054      	str	r4, [r2, #4]
 800551c:	601c      	str	r4, [r3, #0]
    chSchGoSleepS(CH_STATE_WTSEM);
 800551e:	f7fc fcbf 	bl	8001ea0 <chSchGoSleepS>
    msg = ctp->p_u.rdymsg;
 8005522:	6a20      	ldr	r0, [r4, #32]
 8005524:	e7ee      	b.n	8005504 <chSemSignalWait.constprop.52.4464+0x24>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005526:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005528:	6801      	ldr	r1, [r0, #0]
 800552a:	604c      	str	r4, [r1, #4]
 800552c:	6021      	str	r1, [r4, #0]
              ((spw->s_cnt < 0) && queue_notempty(&spw->s_queue)),
              "inconsistent semaphore");

  chSysLock();
  if (++sps->s_cnt <= 0)
    chSchReadyI(queue_fifo_remove(&sps->s_queue))->p_u.rdymsg = MSG_OK;
 800552e:	f7fc fd5f 	bl	8001ff0 <chSchReadyI>
 8005532:	2200      	movs	r2, #0
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	6202      	str	r2, [r0, #32]
 8005538:	e7dc      	b.n	80054f4 <chSemSignalWait.constprop.52.4464+0x14>
 800553a:	bf00      	nop
 800553c:	20000c48 	.word	0x20000c48
 8005540:	20001eb8 	.word	0x20001eb8
 8005544:	f3af 8000 	nop.w
 8005548:	f3af 8000 	nop.w
 800554c:	f3af 8000 	nop.w

08005550 <chCondSignal.constprop.49.4476>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 8005550:	b508      	push	{r3, lr}
 8005552:	2320      	movs	r3, #32
 8005554:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <chCondSignal.constprop.49.4476+0x24>)
 800555a:	6818      	ldr	r0, [r3, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->c_queue))
 800555c:	4298      	cmp	r0, r3
 800555e:	d005      	beq.n	800556c <chCondSignal.constprop.49.4476+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005560:	6802      	ldr	r2, [r0, #0]
    chSchWakeupS(queue_fifo_remove(&cp->c_queue), MSG_OK);
 8005562:	2100      	movs	r1, #0
 8005564:	6053      	str	r3, [r2, #4]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f7fc fbe2 	bl	8001d30 <chSchWakeupS>
 800556c:	2000      	movs	r0, #0
 800556e:	f380 8811 	msr	BASEPRI, r0
 8005572:	bd08      	pop	{r3, pc}
 8005574:	20000818 	.word	0x20000818
 8005578:	f3af 8000 	nop.w
 800557c:	f3af 8000 	nop.w

08005580 <sem3_execute.7095>:
  chSemWait(&sem1);
  chSemSignal(&sem1);
  return 0;
}

static void sem3_execute(void) {
 8005580:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005582:	4b1f      	ldr	r3, [pc, #124]	; (8005600 <sem3_execute.7095+0x80>)
 8005584:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8005586:	6998      	ldr	r0, [r3, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005588:	2400      	movs	r4, #0
 800558a:	6882      	ldr	r2, [r0, #8]
 800558c:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <sem3_execute.7095+0x84>)
 800558e:	3201      	adds	r2, #1
 8005590:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005594:	9400      	str	r4, [sp, #0]
 8005596:	481c      	ldr	r0, [pc, #112]	; (8005608 <sem3_execute.7095+0x88>)
 8005598:	f7fc fc42 	bl	8001e20 <chThdCreateStatic>
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 800559c:	4c1b      	ldr	r4, [pc, #108]	; (800560c <sem3_execute.7095+0x8c>)
 800559e:	491c      	ldr	r1, [pc, #112]	; (8005610 <sem3_execute.7095+0x90>)
 80055a0:	6008      	str	r0, [r1, #0]
  chSemSignalWait(&sem1, &sem1);
 80055a2:	f7ff ff9d 	bl	80054e0 <chSemSignalWait.constprop.52.4464>
 80055a6:	6823      	ldr	r3, [r4, #0]
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
 80055a8:	2001      	movs	r0, #1
 80055aa:	ebb3 0e04 	subs.w	lr, r3, r4
 80055ae:	f1de 0200 	rsbs	r2, lr, #0
 80055b2:	eb52 010e 	adcs.w	r1, r2, lr
 80055b6:	f7fc f963 	bl	8001880 <_test_assert>
 80055ba:	b108      	cbz	r0, 80055c0 <sem3_execute.7095+0x40>
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
}
 80055bc:	b002      	add	sp, #8
 80055be:	bd10      	pop	{r4, pc}
static void sem3_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
  chSemSignalWait(&sem1, &sem1);
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");
 80055c0:	68a1      	ldr	r1, [r4, #8]
 80055c2:	2002      	movs	r0, #2
 80055c4:	f1d1 0101 	rsbs	r1, r1, #1
 80055c8:	bf38      	it	cc
 80055ca:	2100      	movcc	r1, #0
 80055cc:	f7fc f958 	bl	8001880 <_test_assert>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1f3      	bne.n	80055bc <sem3_execute.7095+0x3c>

  chSemSignalWait(&sem1, &sem1);
 80055d4:	f7ff ff84 	bl	80054e0 <chSemSignalWait.constprop.52.4464>
 80055d8:	6823      	ldr	r3, [r4, #0]
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
 80055da:	2003      	movs	r0, #3
 80055dc:	1b1a      	subs	r2, r3, r4
 80055de:	4251      	negs	r1, r2
 80055e0:	4151      	adcs	r1, r2
 80055e2:	f7fc f94d 	bl	8001880 <_test_assert>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d1e8      	bne.n	80055bc <sem3_execute.7095+0x3c>
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80055ea:	68a3      	ldr	r3, [r4, #8]
 80055ec:	2004      	movs	r0, #4
 80055ee:	f1d3 0101 	rsbs	r1, r3, #1
 80055f2:	bf38      	it	cc
 80055f4:	2100      	movcc	r1, #0
}
 80055f6:	b002      	add	sp, #8
 80055f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_assert(1, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(2, sem1.s_cnt == 0, "counter not zero");

  chSemSignalWait(&sem1, &sem1);
  test_assert(3, queue_isempty(&sem1.s_queue), "queue not empty");
  test_assert(4, sem1.s_cnt == 0, "counter not zero");
 80055fc:	f7fc b940 	b.w	8001880 <_test_assert>
 8005600:	20001eb8 	.word	0x20001eb8
 8005604:	08001f71 	.word	0x08001f71
 8005608:	20001848 	.word	0x20001848
 800560c:	20000c48 	.word	0x20000c48
 8005610:	20002008 	.word	0x20002008
 8005614:	f3af 8000 	nop.w
 8005618:	f3af 8000 	nop.w
 800561c:	f3af 8000 	nop.w

08005620 <mtx8_execute.7281>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005620:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005622:	f641 63b8 	movw	r3, #7864	; 0x1eb8
 8005626:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800562a:	6998      	ldr	r0, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 800562c:	f641 0548 	movw	r5, #6216	; 0x1848
 8005630:	6886      	ldr	r6, [r0, #8]
 8005632:	f24a 14e0 	movw	r4, #41440	; 0xa1e0
  test_emit_token(*(char *)p);
  chMtxUnlock(&m2);
  return 0;
}

static void mtx8_execute(void) {
 8005636:	b082      	sub	sp, #8

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread11, "A");
 8005638:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800563c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005640:	f645 2331 	movw	r3, #23089	; 0x5a31
 8005644:	1c72      	adds	r2, r6, #1
 8005646:	9400      	str	r4, [sp, #0]
 8005648:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800564c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005650:	4628      	mov	r0, r5
 8005652:	f7fc fbe5 	bl	8001e20 <chThdCreateStatic>
 8005656:	f242 0408 	movw	r4, #8200	; 0x2008
 800565a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800565e:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
 8005660:	f24a 10d8 	movw	r0, #41432	; 0xa1d8
 8005664:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005668:	f6c0 0000 	movt	r0, #2048	; 0x800
 800566c:	f646 6331 	movw	r3, #28209	; 0x6e31
 8005670:	1cb2      	adds	r2, r6, #2
 8005672:	9000      	str	r0, [sp, #0]
 8005674:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005678:	1868      	adds	r0, r5, r1
 800567a:	f7fc fbd1 	bl	8001e20 <chThdCreateStatic>
 800567e:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
 8005680:	f24a 10dc 	movw	r0, #41436	; 0xa1dc
 8005684:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005688:	f242 23a1 	movw	r3, #8865	; 0x22a1
 800568c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005690:	1cf2      	adds	r2, r6, #3
 8005692:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005696:	9000      	str	r0, [sp, #0]
 8005698:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800569c:	f7fc fbc0 	bl	8001e20 <chThdCreateStatic>
 80056a0:	60a0      	str	r0, [r4, #8]
  chCondSignal(&c1);
 80056a2:	f7ff ff55 	bl	8005550 <chCondSignal.constprop.49.4476>
  chCondSignal(&c1);
 80056a6:	f7ff ff53 	bl	8005550 <chCondSignal.constprop.49.4476>
  test_wait_threads();
 80056aa:	f7fc fec9 	bl	8002440 <test_wait_threads>
  test_assert_sequence(1, "ABC");
 80056ae:	f24a 41d0 	movw	r1, #42192	; 0xa4d0
 80056b2:	2001      	movs	r0, #1
 80056b4:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 80056b8:	b002      	add	sp, #8
 80056ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "C");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread12, "B");
  chCondSignal(&c1);
  chCondSignal(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABC");
 80056be:	f7fc b897 	b.w	80017f0 <_test_assert_sequence>
 80056c2:	bf00      	nop
 80056c4:	f3af 8000 	nop.w
 80056c8:	f3af 8000 	nop.w
 80056cc:	f3af 8000 	nop.w

080056d0 <sem1_execute.7091>:
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80056d4:	4e4f      	ldr	r6, [pc, #316]	; (8005814 <sem1_execute.7091+0x144>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80056d6:	4f50      	ldr	r7, [pc, #320]	; (8005818 <sem1_execute.7091+0x148>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80056d8:	69b3      	ldr	r3, [r6, #24]
  chSemWait(&sem1);
  test_emit_token(*(char *)p);
  return 0;
}

static void sem1_execute(void) {
 80056da:	b082      	sub	sp, #8

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80056e2:	4b4e      	ldr	r3, [pc, #312]	; (800581c <sem1_execute.7091+0x14c>)
 80056e4:	3205      	adds	r2, #5
 80056e6:	9700      	str	r7, [sp, #0]
 80056e8:	484d      	ldr	r0, [pc, #308]	; (8005820 <sem1_execute.7091+0x150>)
 80056ea:	f7fc fb99 	bl	8001e20 <chThdCreateStatic>
 80056ee:	4d4d      	ldr	r5, [pc, #308]	; (8005824 <sem1_execute.7091+0x154>)
 80056f0:	69b1      	ldr	r1, [r6, #24]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80056f2:	4b4a      	ldr	r3, [pc, #296]	; (800581c <sem1_execute.7091+0x14c>)
 80056f4:	688c      	ldr	r4, [r1, #8]
  return 0;
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80056f6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 80056f8:	484b      	ldr	r0, [pc, #300]	; (8005828 <sem1_execute.7091+0x158>)
 80056fa:	1c62      	adds	r2, r4, #1
 80056fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005700:	9000      	str	r0, [sp, #0]
 8005702:	484a      	ldr	r0, [pc, #296]	; (800582c <sem1_execute.7091+0x15c>)
 8005704:	f7fc fb8c 	bl	8001e20 <chThdCreateStatic>
 8005708:	69b3      	ldr	r3, [r6, #24]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800570a:	4c49      	ldr	r4, [pc, #292]	; (8005830 <sem1_execute.7091+0x160>)
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	f44f 71a4 	mov.w	r1, #328	; 0x148
}

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8005712:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005714:	3203      	adds	r2, #3
 8005716:	4b41      	ldr	r3, [pc, #260]	; (800581c <sem1_execute.7091+0x14c>)
 8005718:	9400      	str	r4, [sp, #0]
 800571a:	4846      	ldr	r0, [pc, #280]	; (8005834 <sem1_execute.7091+0x164>)
 800571c:	f7fc fb80 	bl	8001e20 <chThdCreateStatic>
 8005720:	69b1      	ldr	r1, [r6, #24]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005722:	688b      	ldr	r3, [r1, #8]

static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8005724:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005726:	4844      	ldr	r0, [pc, #272]	; (8005838 <sem1_execute.7091+0x168>)
 8005728:	1d1a      	adds	r2, r3, #4
 800572a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800572e:	4b3b      	ldr	r3, [pc, #236]	; (800581c <sem1_execute.7091+0x14c>)
 8005730:	9000      	str	r0, [sp, #0]
 8005732:	4842      	ldr	r0, [pc, #264]	; (800583c <sem1_execute.7091+0x16c>)
 8005734:	f7fc fb74 	bl	8001e20 <chThdCreateStatic>
 8005738:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 800573a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800573e:	6894      	ldr	r4, [r2, #8]
static void sem1_execute(void) {

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8005740:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005742:	483f      	ldr	r0, [pc, #252]	; (8005840 <sem1_execute.7091+0x170>)
 8005744:	1ca2      	adds	r2, r4, #2
 8005746:	4b35      	ldr	r3, [pc, #212]	; (800581c <sem1_execute.7091+0x14c>)
 8005748:	9000      	str	r0, [sp, #0]
 800574a:	483e      	ldr	r0, [pc, #248]	; (8005844 <sem1_execute.7091+0x174>)
 800574c:	f7fc fb68 	bl	8001e20 <chThdCreateStatic>
  chSemSignal(&sem1);
 8005750:	4c3d      	ldr	r4, [pc, #244]	; (8005848 <sem1_execute.7091+0x178>)

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8005752:	6128      	str	r0, [r5, #16]
  chSemSignal(&sem1);
 8005754:	4620      	mov	r0, r4
 8005756:	f7fc fb4b 	bl	8001df0 <chSemSignal>
  chSemSignal(&sem1);
 800575a:	4620      	mov	r0, r4
 800575c:	f7fc fb48 	bl	8001df0 <chSemSignal>
  chSemSignal(&sem1);
 8005760:	4620      	mov	r0, r4
 8005762:	f7fc fb45 	bl	8001df0 <chSemSignal>
  chSemSignal(&sem1);
 8005766:	4620      	mov	r0, r4
 8005768:	f7fc fb42 	bl	8001df0 <chSemSignal>
  chSemSignal(&sem1);
 800576c:	4620      	mov	r0, r4
 800576e:	f7fc fb3f 	bl	8001df0 <chSemSignal>
  test_wait_threads();
 8005772:	f7fc fe65 	bl	8002440 <test_wait_threads>
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
 8005776:	2001      	movs	r0, #1
 8005778:	4934      	ldr	r1, [pc, #208]	; (800584c <sem1_execute.7091+0x17c>)
 800577a:	f7fc f839 	bl	80017f0 <_test_assert_sequence>
 800577e:	4680      	mov	r8, r0
 8005780:	b110      	cbz	r0, 8005788 <sem1_execute.7091+0xb8>
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
}
 8005782:	b002      	add	sp, #8
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	69b3      	ldr	r3, [r6, #24]
#if CH_CFG_USE_SEMAPHORES_PRIORITY
  test_assert_sequence(1, "ADCEB");
#else
  test_assert_sequence(1, "ABCDE");
#endif
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800578a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	4823      	ldr	r0, [pc, #140]	; (8005820 <sem1_execute.7091+0x150>)
 8005792:	4b22      	ldr	r3, [pc, #136]	; (800581c <sem1_execute.7091+0x14c>)
 8005794:	9700      	str	r7, [sp, #0]
 8005796:	3205      	adds	r2, #5
 8005798:	f7fc fb42 	bl	8001e20 <chThdCreateStatic>
 800579c:	6028      	str	r0, [r5, #0]
 800579e:	2520      	movs	r5, #32
 80057a0:	f385 8811 	msr	BASEPRI, r5
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  while (n > 0) {
    if (++sp->s_cnt <= 0)
 80057a4:	68a1      	ldr	r1, [r4, #8]
 80057a6:	1c48      	adds	r0, r1, #1
 80057a8:	2800      	cmp	r0, #0
 80057aa:	60a0      	str	r0, [r4, #8]
 80057ac:	dd29      	ble.n	8005802 <sem1_execute.7091+0x132>
 80057ae:	68a5      	ldr	r5, [r4, #8]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <sem1_execute.7091+0x178>)
 80057b2:	1c69      	adds	r1, r5, #1
 80057b4:	2900      	cmp	r1, #0
 80057b6:	60a1      	str	r1, [r4, #8]
 80057b8:	dd1a      	ble.n	80057f0 <sem1_execute.7091+0x120>
  chSysLock();
  chSemAddCounterI(&sem1, 2);
  chSchRescheduleS();
 80057ba:	f7fc f9e9 	bl	8001b90 <chSchRescheduleS>
 80057be:	2500      	movs	r5, #0
 80057c0:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_wait_threads();
 80057c4:	f7fc fe3c 	bl	8002440 <test_wait_threads>
 80057c8:	2020      	movs	r0, #32
 80057ca:	f380 8811 	msr	BASEPRI, r0
  test_assert_lock(2, chSemGetCounterI(&sem1) == 1, "invalid counter");
 80057ce:	68a2      	ldr	r2, [r4, #8]
 80057d0:	2002      	movs	r0, #2
 80057d2:	f1b2 0c01 	subs.w	ip, r2, #1
 80057d6:	f1dc 0100 	rsbs	r1, ip, #0
 80057da:	eb51 010c 	adcs.w	r1, r1, ip
 80057de:	f7fc f84f 	bl	8001880 <_test_assert>
 80057e2:	b910      	cbnz	r0, 80057ea <sem1_execute.7091+0x11a>
 80057e4:	f380 8811 	msr	BASEPRI, r0
 80057e8:	e7cb      	b.n	8005782 <sem1_execute.7091+0xb2>
 80057ea:	f385 8811 	msr	BASEPRI, r5
 80057ee:	e7c8      	b.n	8005782 <sem1_execute.7091+0xb2>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80057f0:	6810      	ldr	r0, [r2, #0]
      chSchReadyI(queue_fifo_remove(&sp->s_queue))->p_u.rdymsg = MSG_OK;
 80057f2:	2500      	movs	r5, #0

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80057f4:	6803      	ldr	r3, [r0, #0]
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	f7fc fbf9 	bl	8001ff0 <chSchReadyI>
 80057fe:	6205      	str	r5, [r0, #32]
 8005800:	e7db      	b.n	80057ba <sem1_execute.7091+0xea>
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8005802:	6820      	ldr	r0, [r4, #0]

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8005804:	6803      	ldr	r3, [r0, #0]
 8005806:	605c      	str	r4, [r3, #4]
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	f7fc fbf1 	bl	8001ff0 <chSchReadyI>
 800580e:	f8c0 8020 	str.w	r8, [r0, #32]
 8005812:	e7cc      	b.n	80057ae <sem1_execute.7091+0xde>
 8005814:	20001eb8 	.word	0x20001eb8
 8005818:	0800a1e0 	.word	0x0800a1e0
 800581c:	08001f51 	.word	0x08001f51
 8005820:	20001848 	.word	0x20001848
 8005824:	20002008 	.word	0x20002008
 8005828:	0800a1dc 	.word	0x0800a1dc
 800582c:	20001990 	.word	0x20001990
 8005830:	0800a1d8 	.word	0x0800a1d8
 8005834:	20001ad8 	.word	0x20001ad8
 8005838:	0800a2f8 	.word	0x0800a2f8
 800583c:	20001c20 	.word	0x20001c20
 8005840:	0800a1e8 	.word	0x0800a1e8
 8005844:	20001d68 	.word	0x20001d68
 8005848:	20000c48 	.word	0x20000c48
 800584c:	0800a1e4 	.word	0x0800a1e4

08005850 <mtx6_execute.7297>:
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 8005850:	b5f0      	push	{r4, r5, r6, r7, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005852:	f641 63b8 	movw	r3, #7864	; 0x1eb8
 8005856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 800585a:	6998      	ldr	r0, [r3, #24]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800585c:	f641 0648 	movw	r6, #6216	; 0x1848
 8005860:	6887      	ldr	r7, [r0, #8]
 8005862:	f646 6531 	movw	r5, #28209	; 0x6e31
 8005866:	f24a 11e8 	movw	r1, #41448	; 0xa1e8
  test_emit_token(*(char *)p);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx6_execute(void) {
 800586a:	b083      	sub	sp, #12

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 800586c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8005870:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005874:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005878:	1c7a      	adds	r2, r7, #1
 800587a:	462b      	mov	r3, r5
 800587c:	9100      	str	r1, [sp, #0]
 800587e:	4630      	mov	r0, r6
 8005880:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005884:	f7fc facc 	bl	8001e20 <chThdCreateStatic>
 8005888:	f242 0408 	movw	r4, #8200	; 0x2008
 800588c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005890:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8005892:	f24a 20f8 	movw	r0, #41720	; 0xa2f8
 8005896:	f6c0 0000 	movt	r0, #2048	; 0x800
 800589a:	1cba      	adds	r2, r7, #2
 800589c:	462b      	mov	r3, r5
 800589e:	9000      	str	r0, [sp, #0]
 80058a0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058a4:	f506 70a4 	add.w	r0, r6, #328	; 0x148
 80058a8:	f7fc faba 	bl	8001e20 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80058ac:	f24a 11d8 	movw	r1, #41432	; 0xa1d8
 80058b0:	f6c0 0100 	movt	r1, #2048	; 0x800

static void mtx6_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 80058b4:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 80058b6:	1cfa      	adds	r2, r7, #3
 80058b8:	462b      	mov	r3, r5
 80058ba:	9100      	str	r1, [sp, #0]
 80058bc:	f506 7024 	add.w	r0, r6, #656	; 0x290
 80058c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058c4:	f7fc faac 	bl	8001e20 <chThdCreateStatic>
 80058c8:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80058ca:	f24a 10dc 	movw	r0, #41436	; 0xa1dc
 80058ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80058d2:	1d3a      	adds	r2, r7, #4
 80058d4:	462b      	mov	r3, r5
 80058d6:	9000      	str	r0, [sp, #0]
 80058d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058dc:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 80058e0:	f7fc fa9e 	bl	8001e20 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80058e4:	f24a 12e0 	movw	r2, #41440	; 0xa1e0
 80058e8:	f6c0 0200 	movt	r2, #2048	; 0x800

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 80058ec:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 80058ee:	9200      	str	r2, [sp, #0]
 80058f0:	462b      	mov	r3, r5
 80058f2:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 80058f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058fa:	1d7a      	adds	r2, r7, #5
 80058fc:	f7fc fa90 	bl	8001e20 <chThdCreateStatic>
 8005900:	2320      	movs	r3, #32
 8005902:	6120      	str	r0, [r4, #16]
 8005904:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chCondSignalI(&c1);
 8005908:	f001 fcd2 	bl	80072b0 <chCondSignalI.constprop.48>
  chCondSignalI(&c1);
 800590c:	f001 fcd0 	bl	80072b0 <chCondSignalI.constprop.48>
  chCondSignalI(&c1);
 8005910:	f001 fcce 	bl	80072b0 <chCondSignalI.constprop.48>
  chCondSignalI(&c1);
 8005914:	f001 fccc 	bl	80072b0 <chCondSignalI.constprop.48>
  chCondSignalI(&c1);
 8005918:	f001 fcca 	bl	80072b0 <chCondSignalI.constprop.48>
  chSchRescheduleS();
 800591c:	f7fc f938 	bl	8001b90 <chSchRescheduleS>
 8005920:	2100      	movs	r1, #0
 8005922:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  test_wait_threads();
 8005926:	f7fc fd8b 	bl	8002440 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 800592a:	f24a 11e4 	movw	r1, #41444	; 0xa1e4
 800592e:	2001      	movs	r0, #1
 8005930:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 8005934:	b003      	add	sp, #12
 8005936:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chCondSignalI(&c1);
  chCondSignalI(&c1);
  chSchRescheduleS();
  chSysUnlock();
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 800593a:	f7fb bf59 	b.w	80017f0 <_test_assert_sequence>
 800593e:	bf00      	nop

08005940 <chVTDoResetI>:
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8005940:	4915      	ldr	r1, [pc, #84]	; (8005998 <chVTDoResetI+0x58>)
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8005942:	b4f0      	push	{r4, r5, r6, r7}
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 8005944:	e890 0014 	ldmia.w	r0, {r2, r4}
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8005948:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800594c:	8916      	ldrh	r6, [r2, #8]
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800594e:	460b      	mov	r3, r1
 8005950:	f853 5f1c 	ldr.w	r5, [r3, #28]!
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
 8005954:	6022      	str	r2, [r4, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8005956:	6807      	ldr	r7, [r0, #0]
  chDbgCheckClassI();
  chDbgCheck(vtp != NULL);
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8005958:	44b4      	add	ip, r6
 800595a:	f8a2 c008 	strh.w	ip, [r2, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = (vtfunc_t)NULL;
 800595e:	2600      	movs	r6, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8005960:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8005964:	429d      	cmp	r5, r3
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

  /* Removing the element from the delta list.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8005966:	607c      	str	r4, [r7, #4]
  vtp->vt_func = (vtfunc_t)NULL;
 8005968:	60c6      	str	r6, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800596a:	848a      	strh	r2, [r1, #36]	; 0x24

#if CH_CFG_ST_TIMEDELTA > 0 || defined(__DOXYGEN__)
  {
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800596c:	d010      	beq.n	8005990 <chVTDoResetI+0x50>
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 800596e:	8928      	ldrh	r0, [r5, #8]
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8005970:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
      port_timer_stop_alarm();
    }
    else {
      /* Updating the alarm to the next deadline, deadline that must not be
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
 8005972:	2801      	cmp	r0, #1
 8005974:	d906      	bls.n	8005984 <chVTDoResetI+0x44>
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8005976:	1841      	adds	r1, r0, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8005978:	b28b      	uxth	r3, r1
 800597a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800597e:	6353      	str	r3, [r2, #52]	; 0x34
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             CH_CFG_ST_TIMEDELTA);
    }
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8005980:	bcf0      	pop	{r4, r5, r6, r7}
 8005982:	4770      	bx	lr
         closer in time than the minimum time delta.*/
      if (ch.vtlist.vt_next->vt_delta >= CH_CFG_ST_TIMEDELTA)
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
                             ch.vtlist.vt_next->vt_delta);
      else
        port_timer_set_alarm(ch.vtlist.vt_lasttime +
 8005984:	1c8b      	adds	r3, r1, #2
 8005986:	b29a      	uxth	r2, r3
 8005988:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800598c:	6342      	str	r2, [r0, #52]	; 0x34
 800598e:	e7f7      	b.n	8005980 <chVTDoResetI+0x40>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8005990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005994:	60c6      	str	r6, [r0, #12]
 8005996:	e7f3      	b.n	8005980 <chVTDoResetI+0x40>
 8005998:	20001eb8 	.word	0x20001eb8
 800599c:	f3af 8000 	nop.w

080059a0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 80059a0:	b4f0      	push	{r4, r5, r6, r7}
  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
  p = ch.vtlist.vt_next;
 80059a2:	4d1f      	ldr	r5, [pc, #124]	; (8005a20 <chVTDoSetI+0x80>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80059a4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80059a8:	462e      	mov	r6, r5
 80059aa:	f856 4f1c 	ldr.w	r4, [r6, #28]!
 80059ae:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
    systime_t now = port_timer_get_time();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;
 80059b2:	2901      	cmp	r1, #1
 80059b4:	bf98      	it	ls
 80059b6:	2102      	movls	r1, #2

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 80059b8:	42b4      	cmp	r4, r6
  virtual_timer_t *p;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80059ba:	6103      	str	r3, [r0, #16]
  vtp->vt_func = vtfunc;
 80059bc:	60c2      	str	r2, [r0, #12]
 80059be:	fa1f fc8c 	uxth.w	ip, ip
    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < CH_CFG_ST_TIMEDELTA)
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
 80059c2:	d021      	beq.n	8005a08 <chVTDoSetI+0x68>
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 80059c4:	8cea      	ldrh	r2, [r5, #38]	; 0x26

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 80059c6:	8923      	ldrh	r3, [r4, #8]
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
    }
    else {
      /* Now the delay is calculated as delta from the last tick interrupt
         time.*/
      delay += now - ch.vtlist.vt_lasttime;
 80059c8:	ebc2 0c0c 	rsb	ip, r2, ip
 80059cc:	4461      	add	r1, ip
 80059ce:	b289      	uxth	r1, r1

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
 80059d0:	4299      	cmp	r1, r3
 80059d2:	d315      	bcc.n	8005a00 <chVTDoSetI+0x60>
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 80059d4:	4299      	cmp	r1, r3
 80059d6:	d905      	bls.n	80059e4 <chVTDoSetI+0x44>
    delay -= p->vt_delta;
    p = p->vt_next;
 80059d8:	6824      	ldr	r4, [r4, #0]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
    delay -= p->vt_delta;
 80059da:	1ac9      	subs	r1, r1, r3
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 80059dc:	8923      	ldrh	r3, [r4, #8]
    delay -= p->vt_delta;
 80059de:	b289      	uxth	r1, r1
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delay) {
 80059e0:	428b      	cmp	r3, r1
 80059e2:	d3f9      	bcc.n	80059d8 <chVTDoSetI+0x38>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay
 80059e4:	8101      	strh	r1, [r0, #8]
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 80059e6:	6863      	ldr	r3, [r4, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 80059e8:	8922      	ldrh	r2, [r4, #8]
    delay -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_prev = (vtp->vt_next = p)->vt_prev;
 80059ea:	6004      	str	r4, [r0, #0]
 80059ec:	6043      	str	r3, [r0, #4]
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
 80059ee:	6018      	str	r0, [r3, #0]
 80059f0:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 80059f2:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_delta = (systime_t)-1;
 80059f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  vtp->vt_prev->vt_next = p->vt_prev = vtp;
  vtp->vt_delta = delay

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delay;
 80059f8:	8121      	strh	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80059fa:	84a8      	strh	r0, [r5, #36]	; 0x24
}
 80059fc:	bcf0      	pop	{r4, r5, r6, r7}
 80059fe:	4770      	bx	lr
      delay += now - ch.vtlist.vt_lasttime;

      /* If the specified delay is closer in time than the first element
         in the delta list then it becomes the next alarm event in time.*/
      if (delay < p->vt_delta)
        port_timer_set_alarm(ch.vtlist.vt_lasttime + delay);
 8005a00:	188a      	adds	r2, r1, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8005a02:	b292      	uxth	r2, r2
 8005a04:	637a      	str	r2, [r7, #52]	; 0x34
 8005a06:	e7e5      	b.n	80059d4 <chVTDoSetI+0x34>

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8005a08:	eb01 030c 	add.w	r3, r1, ip
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	637a      	str	r2, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8005a10:	2300      	movs	r3, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8005a12:	2202      	movs	r2, #2
      delay = CH_CFG_ST_TIMEDELTA;

    if (&ch.vtlist == (virtual_timers_list_t *)p) {
      /* The delta list is empty, the current time becomes the new
         delta list base time.*/
      ch.vtlist.vt_lasttime = now;
 8005a14:	f8a5 c026 	strh.w	ip, [r5, #38]	; 0x26
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8005a1c:	60fa      	str	r2, [r7, #12]
 8005a1e:	e7d9      	b.n	80059d4 <chVTDoSetI+0x34>
 8005a20:	20001eb8 	.word	0x20001eb8
 8005a24:	f3af 8000 	nop.w
 8005a28:	f3af 8000 	nop.w
 8005a2c:	f3af 8000 	nop.w

08005a30 <thread11.7269.4129>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread11(void *p) {
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	4607      	mov	r7, r0

  chMtxLock(&m2);
 8005a34:	481b      	ldr	r0, [pc, #108]	; (8005aa4 <thread11.7269.4129+0x74>)
 8005a36:	f7fc fc0b 	bl	8002250 <chMtxLock>
  chMtxLock(&m1);
 8005a3a:	481b      	ldr	r0, [pc, #108]	; (8005aa8 <thread11.7269.4129+0x78>)
 8005a3c:	f7fc fc08 	bl	8002250 <chMtxLock>
 8005a40:	2320      	movs	r3, #32
 8005a42:	f383 8811 	msr	BASEPRI, r3
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8005a46:	4e19      	ldr	r6, [pc, #100]	; (8005aac <thread11.7269.4129+0x7c>)
 *
 * @sclass
 */
static inline mutex_t *chMtxGetNextMutexS(void) {

  return chThdGetSelfX()->p_mtxlist;
 8005a48:	69b0      	ldr	r0, [r6, #24]
 8005a4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (time != TIME_IMMEDIATE));
  chDbgAssert(currp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7fc fb6f 	bl	8002130 <chMtxUnlockS>
  currp->p_u.wtobjp = cp;
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <thread11.7269.4129+0x80>)
 8005a54:	69b2      	ldr	r2, [r6, #24]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8005a56:	461d      	mov	r5, r3
 8005a58:	6213      	str	r3, [r2, #32]
  do {
    cp = cp->p_next;
 8005a5a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	d003      	beq.n	8005a68 <thread11.7269.4129+0x38>
 8005a60:	6898      	ldr	r0, [r3, #8]
 8005a62:	6891      	ldr	r1, [r2, #8]
 8005a64:	4288      	cmp	r0, r1
 8005a66:	d2f8      	bcs.n	8005a5a <thread11.7269.4129+0x2a>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8005a68:	6858      	ldr	r0, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8005a6a:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
 8005a6c:	6050      	str	r0, [r2, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8005a6e:	6002      	str	r2, [r0, #0]
 8005a70:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8005a72:	2007      	movs	r0, #7
 8005a74:	f7fc fa14 	bl	8001ea0 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8005a78:	69b2      	ldr	r2, [r6, #24]
  queue_prio_insert(currp, &cp->c_queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, time);
  if (msg != MSG_TIMEOUT)
 8005a7a:	6a13      	ldr	r3, [r2, #32]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	d002      	beq.n	8005a86 <thread11.7269.4129+0x56>
    chMtxLockS(mp);
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7fc fb7d 	bl	8002180 <chMtxLockS>
 8005a86:	2400      	movs	r4, #0
 8005a88:	f384 8811 	msr	BASEPRI, r4
#if CH_CFG_USE_CONDVARS_TIMEOUT || defined(__DOXYGEN__)
  chCondWaitTimeout(&c1, TIME_INFINITE);
#else
  chCondWait(&c1);
#endif
  test_emit_token(*(char *)p);
 8005a8c:	7838      	ldrb	r0, [r7, #0]
 8005a8e:	f7fb ff0f 	bl	80018b0 <test_emit_token>
  chMtxUnlock(&m1);
 8005a92:	4805      	ldr	r0, [pc, #20]	; (8005aa8 <thread11.7269.4129+0x78>)
 8005a94:	f7fc f97c 	bl	8001d90 <chMtxUnlock>
  chMtxUnlock(&m2);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <thread11.7269.4129+0x74>)
 8005a9a:	f7fc f979 	bl	8001d90 <chMtxUnlock>
  return 0;
}
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000c38 	.word	0x20000c38
 8005aa8:	20000800 	.word	0x20000800
 8005aac:	20001eb8 	.word	0x20001eb8
 8005ab0:	20000818 	.word	0x20000818
 8005ab4:	f3af 8000 	nop.w
 8005ab8:	f3af 8000 	nop.w
 8005abc:	f3af 8000 	nop.w

08005ac0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8005ac0:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8005ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ac6:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8005ac8:	b087      	sub	sp, #28
 8005aca:	4605      	mov	r5, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8005acc:	d011      	beq.n	8005af2 <chSchGoSleepTimeoutS+0x32>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8005ace:	4c0b      	ldr	r4, [pc, #44]	; (8005afc <chSchGoSleepTimeoutS+0x3c>)
 8005ad0:	4a0b      	ldr	r2, [pc, #44]	; (8005b00 <chSchGoSleepTimeoutS+0x40>)
 8005ad2:	69a3      	ldr	r3, [r4, #24]
 8005ad4:	a801      	add	r0, sp, #4
 8005ad6:	f7ff ff63 	bl	80059a0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8005ada:	4628      	mov	r0, r5
 8005adc:	f7fc f9e0 	bl	8001ea0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt))
 8005ae0:	9804      	ldr	r0, [sp, #16]
 8005ae2:	b110      	cbz	r0, 8005aea <chSchGoSleepTimeoutS+0x2a>
      chVTDoResetI(&vt);
 8005ae4:	a801      	add	r0, sp, #4
 8005ae6:	f7ff ff2b 	bl	8005940 <chVTDoResetI>
  }
  else
    chSchGoSleepS(newstate);
  return currp->p_u.rdymsg;
 8005aea:	69a1      	ldr	r1, [r4, #24]
}
 8005aec:	6a08      	ldr	r0, [r1, #32]
 8005aee:	b007      	add	sp, #28
 8005af0:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
    if (chVTIsArmedI(&vt))
      chVTDoResetI(&vt);
  }
  else
    chSchGoSleepS(newstate);
 8005af2:	f7fc f9d5 	bl	8001ea0 <chSchGoSleepS>
 8005af6:	4c01      	ldr	r4, [pc, #4]	; (8005afc <chSchGoSleepTimeoutS+0x3c>)
 8005af8:	e7f7      	b.n	8005aea <chSchGoSleepTimeoutS+0x2a>
 8005afa:	bf00      	nop
 8005afc:	20001eb8 	.word	0x20001eb8
 8005b00:	08001681 	.word	0x08001681
 8005b04:	f3af 8000 	nop.w
 8005b08:	f3af 8000 	nop.w
 8005b0c:	f3af 8000 	nop.w

08005b10 <chThdEnqueueTimeoutS.4274>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8005b10:	b410      	push	{r4}
 8005b12:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout)
 8005b14:	b151      	cbz	r1, 8005b2c <chThdEnqueueTimeoutS.4274+0x1c>
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
 8005b16:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <chThdEnqueueTimeoutS.4274+0x24>)
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8005b18:	6844      	ldr	r4, [r0, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8005b1c:	2004      	movs	r0, #4
 8005b1e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8005b22:	6053      	str	r3, [r2, #4]
 8005b24:	6023      	str	r3, [r4, #0]
}
 8005b26:	bc10      	pop	{r4}

  if (TIME_IMMEDIATE == timeout)
    return MSG_TIMEOUT;

  queue_insert(currp, tqp);
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8005b28:	f7ff bfca 	b.w	8005ac0 <chSchGoSleepTimeoutS>
}
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	bc10      	pop	{r4}
 8005b32:	4770      	bx	lr
 8005b34:	20001eb8 	.word	0x20001eb8
 8005b38:	f3af 8000 	nop.w
 8005b3c:	f3af 8000 	nop.w

08005b40 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t time) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	2320      	movs	r3, #32
 8005b44:	4604      	mov	r4, r0
 8005b46:	460e      	mov	r6, r1
 8005b48:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify)
 8005b4c:	69c1      	ldr	r1, [r0, #28]
 8005b4e:	b101      	cbz	r1, 8005b52 <chIQGetTimeout+0x12>
    iqp->q_notify(iqp);
 8005b50:	4788      	blx	r1
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) <= 0);
 8005b52:	68a5      	ldr	r5, [r4, #8]

  while (chIQIsEmptyI(iqp)) {
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8005b54:	4620      	mov	r0, r4
 8005b56:	4631      	mov	r1, r6

  chSysLock();
  if (iqp->q_notify)
    iqp->q_notify(iqp);

  while (chIQIsEmptyI(iqp)) {
 8005b58:	b935      	cbnz	r5, 8005b68 <chIQGetTimeout+0x28>
    msg_t msg;
    if ((msg = chThdEnqueueTimeoutS(&iqp->q_waiting, time)) < Q_OK) {
 8005b5a:	f7ff ffd9 	bl	8005b10 <chThdEnqueueTimeoutS.4274>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	daf7      	bge.n	8005b52 <chIQGetTimeout+0x12>
 8005b62:	f385 8811 	msr	BASEPRI, r5
 8005b66:	bd70      	pop	{r4, r5, r6, pc}
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8005b68:	69a3      	ldr	r3, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8005b6a:	3d01      	subs	r5, #1
 8005b6c:	60a5      	str	r5, [r4, #8]
  b = *iqp->q_rdptr++;
 8005b6e:	f813 0b01 	ldrb.w	r0, [r3], #1
  if (iqp->q_rdptr >= iqp->q_top)
 8005b72:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8005b74:	61a3      	str	r3, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top)
 8005b76:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 8005b78:	bf24      	itt	cs
 8005b7a:	68e3      	ldrcs	r3, [r4, #12]
 8005b7c:	61a3      	strcs	r3, [r4, #24]
 8005b7e:	2100      	movs	r1, #0
 8005b80:	f381 8811 	msr	BASEPRI, r1

  chSysUnlock();
  return b;
}
 8005b84:	bd70      	pop	{r4, r5, r6, pc}
 8005b86:	bf00      	nop
 8005b88:	f3af 8000 	nop.w
 8005b8c:	f3af 8000 	nop.w

08005b90 <thread1.8252>:
}

static msg_t thread1(void *p) {

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8005b90:	f640 40bc 	movw	r0, #3260	; 0xcbc
static void queues1_setup(void) {

  chIQObjectInit(&iq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread1(void *p) {
 8005b94:	b508      	push	{r3, lr}

  (void)p;
  chIQGetTimeout(&iq, MS2ST(200));
 8005b96:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005b9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005b9e:	f7ff ffcf 	bl	8005b40 <chIQGetTimeout>
  return 0;
}
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	bd08      	pop	{r3, pc}
 8005ba6:	bf00      	nop
 8005ba8:	f3af 8000 	nop.w
 8005bac:	f3af 8000 	nop.w

08005bb0 <gett.8862>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
 8005bb0:	300c      	adds	r0, #12
 8005bb2:	f7ff bfc5 	b.w	8005b40 <chIQGetTimeout>
 8005bb6:	bf00      	nop
 8005bb8:	f3af 8000 	nop.w
 8005bbc:	f3af 8000 	nop.w

08005bc0 <get.8866>:
  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
 8005bc0:	300c      	adds	r0, #12
 8005bc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005bc6:	f7ff bfbb 	b.w	8005b40 <chIQGetTimeout>
 8005bca:	bf00      	nop
 8005bcc:	f3af 8000 	nop.w

08005bd0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t time) {
 8005bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 8005bd8:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8005bdc:	f04f 0b20 	mov.w	fp, #32
 8005be0:	f38b 8811 	msr	BASEPRI, fp
  size_t r = 0;
 8005be4:	2600      	movs	r6, #0
 *                      .
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
 8005be6:	f101 0801 	add.w	r8, r1, #1
 8005bea:	eb01 0a02 	add.w	sl, r1, r2

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    if (nfy)
 8005bee:	f1b9 0f00 	cmp.w	r9, #0
 8005bf2:	d001      	beq.n	8005bf8 <chIQReadTimeout+0x28>
      nfy(iqp);
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	47c8      	blx	r9
 8005bf8:	68a7      	ldr	r7, [r4, #8]

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4629      	mov	r1, r5
  chSysLock();
  while (true) {
    if (nfy)
      nfy(iqp);

    while (chIQIsEmptyI(iqp)) {
 8005bfe:	b947      	cbnz	r7, 8005c12 <chIQReadTimeout+0x42>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, time) != Q_OK) {
 8005c00:	f7ff ff86 	bl	8005b10 <chThdEnqueueTimeoutS.4274>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d0f7      	beq.n	8005bf8 <chIQReadTimeout+0x28>
 8005c08:	f387 8811 	msr	BASEPRI, r7
    if (--n == 0)
      return r;

    chSysLock();
  }
}
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8005c12:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8005c14:	1e7b      	subs	r3, r7, #1
 8005c16:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8005c18:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005c1c:	f808 0c01 	strb.w	r0, [r8, #-1]
    if (iqp->q_rdptr >= iqp->q_top)
 8005c20:	6921      	ldr	r1, [r4, #16]
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8005c22:	61a2      	str	r2, [r4, #24]
    if (iqp->q_rdptr >= iqp->q_top)
 8005c24:	428a      	cmp	r2, r1
      iqp->q_rdptr = iqp->q_buffer;
 8005c26:	bf24      	itt	cs
 8005c28:	68e1      	ldrcs	r1, [r4, #12]
 8005c2a:	61a1      	strcs	r1, [r4, #24]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f383 8811 	msr	BASEPRI, r3

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    r++;
 8005c32:	3601      	adds	r6, #1
    if (--n == 0)
 8005c34:	45d0      	cmp	r8, sl
 8005c36:	d0e9      	beq.n	8005c0c <chIQReadTimeout+0x3c>
 8005c38:	f38b 8811 	msr	BASEPRI, fp
 8005c3c:	f108 0801 	add.w	r8, r8, #1
 8005c40:	e7d5      	b.n	8005bee <chIQReadTimeout+0x1e>
 8005c42:	bf00      	nop
 8005c44:	f3af 8000 	nop.w
 8005c48:	f3af 8000 	nop.w
 8005c4c:	f3af 8000 	nop.w

08005c50 <readt.8838>:
  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t time) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp, n, time);
 8005c50:	300c      	adds	r0, #12
 8005c52:	f7ff bfbd 	b.w	8005bd0 <chIQReadTimeout>
 8005c56:	bf00      	nop
 8005c58:	f3af 8000 	nop.w
 8005c5c:	f3af 8000 	nop.w

08005c60 <read.8846>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialUSBDriver *)ip)->iqueue, bp,
 8005c60:	300c      	adds	r0, #12
 8005c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c66:	f7ff bfb3 	b.w	8005bd0 <chIQReadTimeout>
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w

08005c70 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	4604      	mov	r4, r0
 8005c74:	460f      	mov	r7, r1
 8005c76:	4616      	mov	r6, r2
 8005c78:	2320      	movs	r3, #32
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) <= 0);
 8005c7e:	68a5      	ldr	r5, [r4, #8]

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8005c80:	4620      	mov	r0, r4
 8005c82:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t time) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 8005c84:	b935      	cbnz	r5, 8005c94 <chOQPutTimeout+0x24>
    msg_t msg;

    if ((msg = chThdEnqueueTimeoutS(&oqp->q_waiting, time)) < Q_OK) {
 8005c86:	f7ff ff43 	bl	8005b10 <chThdEnqueueTimeoutS.4274>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	daf7      	bge.n	8005c7e <chOQPutTimeout+0xe>
 8005c8e:	f385 8811 	msr	BASEPRI, r5
 8005c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8005c94:	6960      	ldr	r0, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 8005c96:	3d01      	subs	r5, #1
 8005c98:	60a5      	str	r5, [r4, #8]
  *oqp->q_wrptr++ = b;
 8005c9a:	f800 7b01 	strb.w	r7, [r0], #1
  if (oqp->q_wrptr >= oqp->q_top)
 8005c9e:	6922      	ldr	r2, [r4, #16]
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8005ca0:	6160      	str	r0, [r4, #20]
  if (oqp->q_wrptr >= oqp->q_top)
 8005ca2:	4290      	cmp	r0, r2
    oqp->q_wrptr = oqp->q_buffer;
 8005ca4:	bf28      	it	cs
 8005ca6:	68e0      	ldrcs	r0, [r4, #12]

  if (oqp->q_notify)
 8005ca8:	69e1      	ldr	r1, [r4, #28]
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
  if (oqp->q_wrptr >= oqp->q_top)
    oqp->q_wrptr = oqp->q_buffer;
 8005caa:	bf28      	it	cs
 8005cac:	6160      	strcs	r0, [r4, #20]

  if (oqp->q_notify)
 8005cae:	b109      	cbz	r1, 8005cb4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	4788      	blx	r1
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0

  chSysUnlock();
  return Q_OK;
}
 8005cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cbc:	f3af 8000 	nop.w

08005cc0 <thread2.8249>:
}

static msg_t thread2(void *p) {

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005cc0:	f640 4098 	movw	r0, #3224	; 0xc98
static void queues2_setup(void) {

  chOQObjectInit(&oq, wa[0], TEST_QUEUES_SIZE, notify, NULL);
}

static msg_t thread2(void *p) {
 8005cc4:	b508      	push	{r3, lr}

  (void)p;
  chOQPutTimeout(&oq, 0, MS2ST(200));
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ccc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005cd0:	f7ff ffce 	bl	8005c70 <chOQPutTimeout>
  return 0;
}
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	bd08      	pop	{r3, pc}
 8005cd8:	f3af 8000 	nop.w
 8005cdc:	f3af 8000 	nop.w

08005ce0 <putt.8869>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, timeout);
 8005ce0:	3030      	adds	r0, #48	; 0x30
 8005ce2:	f7ff bfc5 	b.w	8005c70 <chOQPutTimeout>
 8005ce6:	bf00      	nop
 8005ce8:	f3af 8000 	nop.w
 8005cec:	f3af 8000 	nop.w

08005cf0 <put.8874>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialUSBDriver *)ip)->oqueue, b, TIME_INFINITE);
 8005cf0:	3030      	adds	r0, #48	; 0x30
 8005cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf6:	f7ff bfbb 	b.w	8005c70 <chOQPutTimeout>
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w

08005d00 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t time) {
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	4604      	mov	r4, r0
 8005d06:	b083      	sub	sp, #12
 8005d08:	460f      	mov	r7, r1
 8005d0a:	4615      	mov	r5, r2
 8005d0c:	469b      	mov	fp, r3
  qnotify_t nfy = oqp->q_notify;
 8005d0e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8005d12:	f04f 0a20 	mov.w	sl, #32
 8005d16:	f38a 8811 	msr	BASEPRI, sl
  size_t w = 0;
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	46b1      	mov	r9, r6
 8005d1e:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
    if (oqp->q_wrptr >= oqp->q_top)
      oqp->q_wrptr = oqp->q_buffer;

    if (nfy)
      nfy(oqp);
 8005d20:	4620      	mov	r0, r4
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005d22:	1e5a      	subs	r2, r3, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8005d24:	b1db      	cbz	r3, 8005d5e <chOQWriteTimeout+0x5e>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005d26:	60a2      	str	r2, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8005d28:	6963      	ldr	r3, [r4, #20]
 8005d2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d2e:	f803 1b01 	strb.w	r1, [r3], #1
    if (oqp->q_wrptr >= oqp->q_top)
 8005d32:	6922      	ldr	r2, [r4, #16]
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8005d34:	6163      	str	r3, [r4, #20]
    if (oqp->q_wrptr >= oqp->q_top)
 8005d36:	4293      	cmp	r3, r2
      oqp->q_wrptr = oqp->q_buffer;
 8005d38:	bf24      	itt	cs
 8005d3a:	68e3      	ldrcs	r3, [r4, #12]
 8005d3c:	6163      	strcs	r3, [r4, #20]

    if (nfy)
 8005d3e:	f1b8 0f00 	cmp.w	r8, #0
 8005d42:	d000      	beq.n	8005d46 <chOQWriteTimeout+0x46>
      nfy(oqp);
 8005d44:	47c0      	blx	r8
 8005d46:	f389 8811 	msr	BASEPRI, r9

    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
    w++;
 8005d4a:	3601      	adds	r6, #1
    if (--n == 0)
 8005d4c:	3d01      	subs	r5, #1
 8005d4e:	d010      	beq.n	8005d72 <chOQWriteTimeout+0x72>
 8005d50:	f38a 8811 	msr	BASEPRI, sl
 8005d54:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
    if (oqp->q_wrptr >= oqp->q_top)
      oqp->q_wrptr = oqp->q_buffer;

    if (nfy)
      nfy(oqp);
 8005d56:	4620      	mov	r0, r4
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
        chSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
 8005d58:	1e5a      	subs	r2, r3, #1

  chDbgCheck(n > 0);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e3      	bne.n	8005d26 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, time) != Q_OK) {
 8005d5e:	4659      	mov	r1, fp
 8005d60:	4620      	mov	r0, r4
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	f7ff fed4 	bl	8005b10 <chThdEnqueueTimeoutS.4274>
 8005d68:	9901      	ldr	r1, [sp, #4]
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d0d7      	beq.n	8005d1e <chOQWriteTimeout+0x1e>
 8005d6e:	f381 8811 	msr	BASEPRI, r1
    w++;
    if (--n == 0)
      return w;
    chSysLock();
  }
}
 8005d72:	4630      	mov	r0, r6
 8005d74:	b003      	add	sp, #12
 8005d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <writet.8851>:
  return iqGetTimeout(&((SerialUSBDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t time) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp, n, time);
 8005d80:	3030      	adds	r0, #48	; 0x30
 8005d82:	f7ff bfbd 	b.w	8005d00 <chOQWriteTimeout>
 8005d86:	bf00      	nop
 8005d88:	f3af 8000 	nop.w
 8005d8c:	f3af 8000 	nop.w

08005d90 <write.8857>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialUSBDriver *)ip)->oqueue, bp,
 8005d90:	3030      	adds	r0, #48	; 0x30
 8005d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d96:	f7ff bfb3 	b.w	8005d00 <chOQWriteTimeout>
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005da0:	4603      	mov	r3, r0
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8005da2:	6880      	ldr	r0, [r0, #8]
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005da4:	b410      	push	{r4}
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8005da6:	1e42      	subs	r2, r0, #1
 8005da8:	2a00      	cmp	r2, #0
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 8005daa:	460c      	mov	r4, r1
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	db02      	blt.n	8005db6 <chSemWaitTimeoutS+0x16>
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
 8005db0:	2000      	movs	r0, #0
}
 8005db2:	bc10      	pop	{r4}
 8005db4:	4770      	bx	lr
  chDbgAssert(((sp->s_cnt >= 0) && queue_isempty(&sp->s_queue)) ||
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
 8005db6:	b159      	cbz	r1, 8005dd0 <chSemWaitTimeoutS+0x30>
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8005db8:	4c07      	ldr	r4, [pc, #28]	; (8005dd8 <chSemWaitTimeoutS+0x38>)
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8005dba:	2005      	movs	r0, #5
  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
 8005dbc:	69a2      	ldr	r2, [r4, #24]
 8005dbe:	6213      	str	r3, [r2, #32]
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8005dc0:	685c      	ldr	r4, [r3, #4]
 8005dc2:	e882 0018 	stmia.w	r2, {r3, r4}
  tp->p_prev->p_next = tqp->p_prev = tp;
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	6022      	str	r2, [r4, #0]
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
  }
  return MSG_OK;
}
 8005dca:	bc10      	pop	{r4}
      sp->s_cnt++;
      return MSG_TIMEOUT;
    }
    currp->p_u.wtobjp = sp;
    sem_insert(currp, &sp->s_queue);
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 8005dcc:	f7ff be78 	b.w	8005ac0 <chSchGoSleepTimeoutS>
              ((sp->s_cnt < 0) && queue_notempty(&sp->s_queue)),
              "inconsistent semaphore");

  if (--sp->s_cnt < 0) {
    if (TIME_IMMEDIATE == time) {
      sp->s_cnt++;
 8005dd0:	6098      	str	r0, [r3, #8]
      return MSG_TIMEOUT;
 8005dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd6:	e7ec      	b.n	8005db2 <chSemWaitTimeoutS+0x12>
 8005dd8:	20001eb8 	.word	0x20001eb8
 8005ddc:	f3af 8000 	nop.w

08005de0 <chMBFetch.constprop.26>:
 * @retval MSG_RESET    if the mailbox has been reset while waiting.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t time) {
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4605      	mov	r5, r0
 8005de4:	2320      	movs	r3, #32
 8005de6:	f383 8811 	msr	BASEPRI, r3
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
 8005dea:	480d      	ldr	r0, [pc, #52]	; (8005e20 <chMBFetch.constprop.26+0x40>)
 8005dec:	f7ff ffd8 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005df0:	4604      	mov	r4, r0
 8005df2:	b980      	cbnz	r0, 8005e16 <chMBFetch.constprop.26+0x36>
    *msgp = *mbp->mb_rdptr++;
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <chMBFetch.constprop.26+0x44>)
 8005df6:	68da      	ldr	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
 8005df8:	6859      	ldr	r1, [r3, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005dfa:	f852 0b04 	ldr.w	r0, [r2], #4
    if (mbp->mb_rdptr >= mbp->mb_top)
 8005dfe:	428a      	cmp	r2, r1
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
 8005e00:	6028      	str	r0, [r5, #0]
 8005e02:	60da      	str	r2, [r3, #12]
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8005e04:	bf28      	it	cs
 8005e06:	681a      	ldrcs	r2, [r3, #0]
    chSemSignalI(&mbp->mb_emptysem);
 8005e08:	4807      	ldr	r0, [pc, #28]	; (8005e28 <chMBFetch.constprop.26+0x48>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_fullsem, time);
  if (rdymsg == MSG_OK) {
    *msgp = *mbp->mb_rdptr++;
    if (mbp->mb_rdptr >= mbp->mb_top)
      mbp->mb_rdptr = mbp->mb_buffer;
 8005e0a:	bf28      	it	cs
 8005e0c:	60da      	strcs	r2, [r3, #12]
    chSemSignalI(&mbp->mb_emptysem);
 8005e0e:	f7fc fe47 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8005e12:	f7fb febd 	bl	8001b90 <chSchRescheduleS>
 8005e16:	2300      	movs	r3, #0
 8005e18:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  rdymsg = chMBFetchS(mbp, msgp, time);
  chSysUnlock();
  return rdymsg;
}
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20000cf0 	.word	0x20000cf0
 8005e24:	20000ce0 	.word	0x20000ce0
 8005e28:	20000cfc 	.word	0x20000cfc
 8005e2c:	00000000 	.word	0x00000000

08005e30 <chSemWaitTimeout>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @api
 */
msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 8005e30:	b508      	push	{r3, lr}
 8005e32:	2320      	movs	r3, #32
 8005e34:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chSysLock();
  msg = chSemWaitTimeoutS(sp, time);
 8005e38:	f7ff ffb2 	bl	8005da0 <chSemWaitTimeoutS>
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  return msg;
}
 8005e42:	bd08      	pop	{r3, pc}
 8005e44:	f3af 8000 	nop.w
 8005e48:	f3af 8000 	nop.w
 8005e4c:	f3af 8000 	nop.w

08005e50 <test_start_timer.constprop.19>:
/**
 * @brief   Starts the test timer.
 *
 * @param[in] ms        time in milliseconds
 */
void test_start_timer(unsigned ms) {
 8005e50:	b508      	push	{r3, lr}

  systime_t duration = MS2ST(ms);
  test_timer_done = FALSE;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <test_start_timer.constprop.19+0x30>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	2020      	movs	r0, #32
 8005e5a:	f380 8811 	msr	BASEPRI, r0
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->vt_func != NULL);
 8005e5e:	4809      	ldr	r0, [pc, #36]	; (8005e84 <test_start_timer.constprop.19+0x34>)
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp))
 8005e60:	68c1      	ldr	r1, [r0, #12]
 8005e62:	b109      	cbz	r1, 8005e68 <test_start_timer.constprop.19+0x18>
    chVTDoResetI(vtp);
 8005e64:	f7ff fd6c 	bl	8005940 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8005e68:	4806      	ldr	r0, [pc, #24]	; (8005e84 <test_start_timer.constprop.19+0x34>)
 8005e6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005e6e:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <test_start_timer.constprop.19+0x38>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	f7ff fd95 	bl	80059a0 <chVTDoSetI>
 8005e76:	2200      	movs	r2, #0
 8005e78:	f382 8811 	msr	BASEPRI, r2
 8005e7c:	bd08      	pop	{r3, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000dcc 	.word	0x20000dcc
 8005e84:	20001460 	.word	0x20001460
 8005e88:	08001631 	.word	0x08001631
 8005e8c:	f3af 8000 	nop.w

08005e90 <chThdCreateFromMemoryPool.constprop.54>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e92:	4c0f      	ldr	r4, [pc, #60]	; (8005ed0 <chThdCreateFromMemoryPool.constprop.54+0x40>)
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005e94:	b083      	sub	sp, #12
 8005e96:	4607      	mov	r7, r0
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e98:	4620      	mov	r0, r4
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, tprio_t prio,
 8005e9a:	460e      	mov	r6, r1
  void *wsp;
  thread_t *tp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8005e9c:	f7fb fdc8 	bl	8001a30 <chPoolAlloc>
  if (wsp == NULL)
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	b190      	cbz	r0, 8005eca <chThdCreateFromMemoryPool.constprop.54+0x3a>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <chThdCreateFromMemoryPool.constprop.54+0x44>)
 8005eac:	6861      	ldr	r1, [r4, #4]
 8005eae:	463a      	mov	r2, r7
 8005eb0:	9600      	str	r6, [sp, #0]
 8005eb2:	f7fb fe15 	bl	8001ae0 <chThdCreateI>
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	7741      	strb	r1, [r0, #29]
  tp->p_mpool = mp;
 8005eba:	6404      	str	r4, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8005ebc:	2100      	movs	r1, #0
                  (uint8_t *)wsp + mp->mp_object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, mp->mp_object_size, prio, pf, arg);
 8005ebe:	4605      	mov	r5, r0
  tp->p_flags = CH_FLAG_MODE_MEMPOOL;
  tp->p_mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 8005ec0:	f7fb ff36 	bl	8001d30 <chSchWakeupS>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return tp;
}
 8005eca:	4628      	mov	r0, r5
 8005ecc:	b003      	add	sp, #12
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed0:	20001454 	.word	0x20001454
 8005ed4:	08006df1 	.word	0x08006df1
 8005ed8:	f3af 8000 	nop.w
 8005edc:	f3af 8000 	nop.w

08005ee0 <mbox1_execute.7599>:

static void mbox1_execute(void) {
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	2520      	movs	r5, #32
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	f385 8811 	msr	BASEPRI, r5
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8005eec:	4c67      	ldr	r4, [pc, #412]	; (800608c <mbox1_execute.7599+0x1ac>)
  unsigned i;

  /*
   * Testing initial space.
   */
  test_assert_lock(1, chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 8005eee:	2001      	movs	r0, #1
 8005ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ef2:	f1b1 0e05 	subs.w	lr, r1, #5
 8005ef6:	f1de 0200 	rsbs	r2, lr, #0
 8005efa:	eb52 010e 	adcs.w	r1, r2, lr
 8005efe:	f7fb fcbf 	bl	8001880 <_test_assert>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 8257 	bne.w	80063b6 <mbox1_execute.7599+0x4d6>
 8005f08:	f380 8811 	msr	BASEPRI, r0
 8005f0c:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005f10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f14:	f104 001c 	add.w	r0, r4, #28
 8005f18:	f7ff ff42 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	b970      	cbnz	r0, 8005f3e <mbox1_execute.7599+0x5e>
    *mbp->mb_wrptr++ = msg;
 8005f20:	68a3      	ldr	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f22:	6860      	ldr	r0, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005f24:	2142      	movs	r1, #66	; 0x42
 8005f26:	f843 1b04 	str.w	r1, [r3], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f2a:	4283      	cmp	r3, r0
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005f2c:	60a3      	str	r3, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f2e:	d301      	bcc.n	8005f34 <mbox1_execute.7599+0x54>
      mbp->mb_wrptr = mbp->mb_buffer;
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	60a2      	str	r2, [r4, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8005f34:	4856      	ldr	r0, [pc, #344]	; (8006090 <mbox1_execute.7599+0x1b0>)
 8005f36:	f7fc fdb3 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8005f3a:	f7fb fe29 	bl	8001b90 <chSchRescheduleS>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f383 8811 	msr	BASEPRI, r3
  /*
   * Testing enqueuing and backward circularity.
   */
  for (i = 0; i < MB_SIZE - 1; i++) {
    msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
    test_assert(2, msg1 == MSG_OK, "wrong wake-up message");
 8005f44:	2002      	movs	r0, #2
 8005f46:	1aea      	subs	r2, r5, r3
 8005f48:	4251      	negs	r1, r2
 8005f4a:	4151      	adcs	r1, r2
 8005f4c:	f7fb fc98 	bl	8001880 <_test_assert>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f040 8098 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8005f56:	2520      	movs	r5, #32
 8005f58:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005f5c:	484d      	ldr	r0, [pc, #308]	; (8006094 <mbox1_execute.7599+0x1b4>)
 8005f5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f62:	f7ff ff1d 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005f66:	4605      	mov	r5, r0
 8005f68:	b970      	cbnz	r0, 8005f88 <mbox1_execute.7599+0xa8>
    *mbp->mb_wrptr++ = msg;
 8005f6a:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f6c:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005f6e:	2243      	movs	r2, #67	; 0x43
 8005f70:	f840 2b04 	str.w	r2, [r0], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f74:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005f76:	60a0      	str	r0, [r4, #8]
 8005f78:	4944      	ldr	r1, [pc, #272]	; (800608c <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005f7a:	f080 8220 	bcs.w	80063be <mbox1_execute.7599+0x4de>
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8005f7e:	4844      	ldr	r0, [pc, #272]	; (8006090 <mbox1_execute.7599+0x1b0>)
 8005f80:	f7fc fd8e 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8005f84:	f7fb fe04 	bl	8001b90 <chSchRescheduleS>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	2002      	movs	r0, #2
 8005f90:	1aea      	subs	r2, r5, r3
 8005f92:	4251      	negs	r1, r2
 8005f94:	4151      	adcs	r1, r2
 8005f96:	f7fb fc73 	bl	8001880 <_test_assert>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d173      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
 8005f9e:	2520      	movs	r5, #32
 8005fa0:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005fa4:	483b      	ldr	r0, [pc, #236]	; (8006094 <mbox1_execute.7599+0x1b4>)
 8005fa6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005faa:	f7ff fef9 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005fae:	4605      	mov	r5, r0
 8005fb0:	b970      	cbnz	r0, 8005fd0 <mbox1_execute.7599+0xf0>
    *mbp->mb_wrptr++ = msg;
 8005fb2:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005fb4:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005fb6:	2244      	movs	r2, #68	; 0x44
 8005fb8:	f840 2b04 	str.w	r2, [r0], #4
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005fbc:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8005fbe:	60a0      	str	r0, [r4, #8]
 8005fc0:	4932      	ldr	r1, [pc, #200]	; (800608c <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 8005fc2:	f080 81ff 	bcs.w	80063c4 <mbox1_execute.7599+0x4e4>
      mbp->mb_wrptr = mbp->mb_buffer;
    chSemSignalI(&mbp->mb_fullsem);
 8005fc6:	4832      	ldr	r0, [pc, #200]	; (8006090 <mbox1_execute.7599+0x1b0>)
 8005fc8:	f7fc fd6a 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8005fcc:	f7fb fde0 	bl	8001b90 <chSchRescheduleS>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	2002      	movs	r0, #2
 8005fd8:	ebb5 0c03 	subs.w	ip, r5, r3
 8005fdc:	f1dc 0200 	rsbs	r2, ip, #0
 8005fe0:	eb52 010c 	adcs.w	r1, r2, ip
 8005fe4:	f7fb fc4c 	bl	8001880 <_test_assert>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d14c      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
 8005fec:	2520      	movs	r5, #32
 8005fee:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8005ff2:	4828      	ldr	r0, [pc, #160]	; (8006094 <mbox1_execute.7599+0x1b4>)
 8005ff4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ff8:	f7ff fed2 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	b978      	cbnz	r0, 8006020 <mbox1_execute.7599+0x140>
    *mbp->mb_wrptr++ = msg;
 8006000:	68a0      	ldr	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
 8006002:	6863      	ldr	r3, [r4, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 8006004:	2145      	movs	r1, #69	; 0x45
 8006006:	f840 1b04 	str.w	r1, [r0], #4
 800600a:	4a20      	ldr	r2, [pc, #128]	; (800608c <mbox1_execute.7599+0x1ac>)
    if (mbp->mb_wrptr >= mbp->mb_top)
 800600c:	4298      	cmp	r0, r3
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
 800600e:	60a0      	str	r0, [r4, #8]
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 8006010:	bf24      	itt	cs
 8006012:	6810      	ldrcs	r0, [r2, #0]
 8006014:	6090      	strcs	r0, [r2, #8]
    chSemSignalI(&mbp->mb_fullsem);
 8006016:	481e      	ldr	r0, [pc, #120]	; (8006090 <mbox1_execute.7599+0x1b0>)
 8006018:	f7fc fd42 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 800601c:	f7fb fdb8 	bl	8001b90 <chSchRescheduleS>
 8006020:	2300      	movs	r3, #0
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	2002      	movs	r0, #2
 8006028:	ebb5 0e03 	subs.w	lr, r5, r3
 800602c:	f1de 0100 	rsbs	r1, lr, #0
 8006030:	eb51 010e 	adcs.w	r1, r1, lr
 8006034:	f7fb fc24 	bl	8001880 <_test_assert>
 8006038:	bb28      	cbnz	r0, 8006086 <mbox1_execute.7599+0x1a6>
 800603a:	2520      	movs	r5, #32
 800603c:	f385 8811 	msr	BASEPRI, r5
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 8006040:	4814      	ldr	r0, [pc, #80]	; (8006094 <mbox1_execute.7599+0x1b4>)
 8006042:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006046:	f7ff feab 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 800604a:	4605      	mov	r5, r0
 800604c:	b970      	cbnz	r0, 800606c <mbox1_execute.7599+0x18c>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	1f03      	subs	r3, r0, #4
 8006054:	4293      	cmp	r3, r2
 8006056:	60e3      	str	r3, [r4, #12]
 8006058:	490c      	ldr	r1, [pc, #48]	; (800608c <mbox1_execute.7599+0x1ac>)
 800605a:	f0c0 81b6 	bcc.w	80063ca <mbox1_execute.7599+0x4ea>
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 800605e:	2241      	movs	r2, #65	; 0x41
    chSemSignalI(&mbp->mb_fullsem);
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <mbox1_execute.7599+0x1b0>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 8006062:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8006064:	f7fc fd1c 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8006068:	f7fb fd92 	bl	8001b90 <chSchRescheduleS>
 800606c:	2100      	movs	r1, #0
 800606e:	f381 8811 	msr	BASEPRI, r1
  }
  msg1 = chMBPostAhead(&mb1, 'A', TIME_INFINITE);
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");
 8006072:	2003      	movs	r0, #3
 8006074:	1a6b      	subs	r3, r5, r1
 8006076:	425a      	negs	r2, r3
 8006078:	eb52 0103 	adcs.w	r1, r2, r3
 800607c:	f7fb fc00 	bl	8001880 <_test_assert>
 8006080:	2800      	cmp	r0, #0
 8006082:	f000 81ab 	beq.w	80063dc <mbox1_execute.7599+0x4fc>
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
}
 8006086:	b002      	add	sp, #8
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	20000ce0 	.word	0x20000ce0
 8006090:	20000cf0 	.word	0x20000cf0
 8006094:	20000cfc 	.word	0x20000cfc
 8006098:	f380 8811 	msr	BASEPRI, r0
 800609c:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing I-Class.
   */
  chSysLock();
  msg1 = chMBPostI(&mb1, 'A');
 80060a0:	2041      	movs	r0, #65	; 0x41
 80060a2:	f001 f97d 	bl	80073a0 <chMBPostI.constprop.29>
  test_assert(22, msg1 == MSG_OK, "wrong wake-up message");
 80060a6:	f1d0 0101 	rsbs	r1, r0, #1
 80060aa:	bf38      	it	cc
 80060ac:	2100      	movcc	r1, #0
 80060ae:	2016      	movs	r0, #22
 80060b0:	f7fb fbe6 	bl	8001880 <_test_assert>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d1e6      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'B');
 80060b8:	2042      	movs	r0, #66	; 0x42
 80060ba:	f001 f971 	bl	80073a0 <chMBPostI.constprop.29>
  test_assert(23, msg1 == MSG_OK, "wrong wake-up message");
 80060be:	f1d0 0101 	rsbs	r1, r0, #1
 80060c2:	bf38      	it	cc
 80060c4:	2100      	movcc	r1, #0
 80060c6:	2017      	movs	r0, #23
 80060c8:	f7fb fbda 	bl	8001880 <_test_assert>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d1da      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'C');
 80060d0:	2043      	movs	r0, #67	; 0x43
 80060d2:	f001 f965 	bl	80073a0 <chMBPostI.constprop.29>
  test_assert(24, msg1 == MSG_OK, "wrong wake-up message");
 80060d6:	f1d0 0101 	rsbs	r1, r0, #1
 80060da:	bf38      	it	cc
 80060dc:	2100      	movcc	r1, #0
 80060de:	2018      	movs	r0, #24
 80060e0:	f7fb fbce 	bl	8001880 <_test_assert>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d1ce      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'D');
 80060e8:	2044      	movs	r0, #68	; 0x44
 80060ea:	f001 f959 	bl	80073a0 <chMBPostI.constprop.29>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
 80060ee:	f1d0 0101 	rsbs	r1, r0, #1
 80060f2:	bf38      	it	cc
 80060f4:	2100      	movcc	r1, #0
 80060f6:	2019      	movs	r0, #25
 80060f8:	f7fb fbc2 	bl	8001880 <_test_assert>
 80060fc:	4607      	mov	r7, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	d1c1      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostI(&mb1, 'E');
 8006102:	2045      	movs	r0, #69	; 0x45
 8006104:	f001 f94c 	bl	80073a0 <chMBPostI.constprop.29>
 8006108:	4602      	mov	r2, r0
 800610a:	f387 8811 	msr	BASEPRI, r7
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
 800610e:	201a      	movs	r0, #26
 8006110:	f1d2 0101 	rsbs	r1, r2, #1
 8006114:	bf38      	it	cc
 8006116:	2100      	movcc	r1, #0
 8006118:	f7fb fbb2 	bl	8001880 <_test_assert>
 800611c:	2800      	cmp	r0, #0
 800611e:	d1b2      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006120:	68e9      	ldr	r1, [r5, #12]
 8006122:	68ab      	ldr	r3, [r5, #8]
 8006124:	201b      	movs	r0, #27
 8006126:	1aca      	subs	r2, r1, r3
 8006128:	4251      	negs	r1, r2
 800612a:	4151      	adcs	r1, r2
 800612c:	f7fb fba8 	bl	8001880 <_test_assert>
 8006130:	2800      	cmp	r0, #0
 8006132:	d1a8      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
 8006134:	2505      	movs	r5, #5
 8006136:	46b0      	mov	r8, r6
 8006138:	4607      	mov	r7, r0
 800613a:	2620      	movs	r6, #32
 800613c:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8006140:	a801      	add	r0, sp, #4
 8006142:	f001 f96d 	bl	8007420 <chMBFetchI.constprop.25>
 8006146:	4603      	mov	r3, r0
 8006148:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
 800614c:	201c      	movs	r0, #28
 800614e:	f1d3 0101 	rsbs	r1, r3, #1
 8006152:	bf38      	it	cc
 8006154:	2100      	movcc	r1, #0
 8006156:	f7fb fb93 	bl	8001880 <_test_assert>
 800615a:	2800      	cmp	r0, #0
 800615c:	d193      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
 800615e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006162:	f7fb fba5 	bl	80018b0 <test_emit_token>
  test_assert(25, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostI(&mb1, 'E');
  chSysUnlock();
  test_assert(26, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(27, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 8006166:	3d01      	subs	r5, #1
 8006168:	d1e7      	bne.n	800613a <mbox1_execute.7599+0x25a>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(28, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(29, "ABCDE");
 800616a:	201d      	movs	r0, #29
 800616c:	4999      	ldr	r1, [pc, #612]	; (80063d4 <mbox1_execute.7599+0x4f4>)
 800616e:	f7fb fb3f 	bl	80017f0 <_test_assert_sequence>
 8006172:	2800      	cmp	r0, #0
 8006174:	d187      	bne.n	8006086 <mbox1_execute.7599+0x1a6>
 8006176:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(30, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800617a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800617c:	201e      	movs	r0, #30
 800617e:	1f7a      	subs	r2, r7, #5
 8006180:	4251      	negs	r1, r2
 8006182:	4151      	adcs	r1, r2
 8006184:	4f94      	ldr	r7, [pc, #592]	; (80063d8 <mbox1_execute.7599+0x4f8>)
 8006186:	f7fb fb7b 	bl	8001880 <_test_assert>
 800618a:	f385 8811 	msr	BASEPRI, r5
 800618e:	2800      	cmp	r0, #0
 8006190:	f47f af79 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8006194:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(31, chMBGetUsedCountI(&mb1) == 0, "still full");
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	201f      	movs	r0, #31
 800619c:	f1d3 0101 	rsbs	r1, r3, #1
 80061a0:	bf38      	it	cc
 80061a2:	2100      	movcc	r1, #0
 80061a4:	f7fb fb6c 	bl	8001880 <_test_assert>
 80061a8:	f385 8811 	msr	BASEPRI, r5
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f47f af6a 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  test_assert(32, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4630      	mov	r0, r6
 80061b8:	ebb2 0e01 	subs.w	lr, r2, r1
 80061bc:	f1de 0300 	rsbs	r3, lr, #0
 80061c0:	eb53 010e 	adcs.w	r1, r3, lr
 80061c4:	f7fb fb5c 	bl	8001880 <_test_assert>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f47f af5c 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80061ce:	f386 8811 	msr	BASEPRI, r6

  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'E');
 80061d2:	2045      	movs	r0, #69	; 0x45
 80061d4:	f001 f904 	bl	80073e0 <chMBPostAheadI.constprop.27>
  test_assert(33, msg1 == MSG_OK, "wrong wake-up message");
 80061d8:	f1d0 0101 	rsbs	r1, r0, #1
 80061dc:	bf38      	it	cc
 80061de:	2100      	movcc	r1, #0
 80061e0:	2021      	movs	r0, #33	; 0x21
 80061e2:	f7fb fb4d 	bl	8001880 <_test_assert>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f47f af4d 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'D');
 80061ec:	2044      	movs	r0, #68	; 0x44
 80061ee:	f001 f8f7 	bl	80073e0 <chMBPostAheadI.constprop.27>
  test_assert(34, msg1 == MSG_OK, "wrong wake-up message");
 80061f2:	f1d0 0101 	rsbs	r1, r0, #1
 80061f6:	bf38      	it	cc
 80061f8:	2100      	movcc	r1, #0
 80061fa:	2022      	movs	r0, #34	; 0x22
 80061fc:	f7fb fb40 	bl	8001880 <_test_assert>
 8006200:	2800      	cmp	r0, #0
 8006202:	f47f af40 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'C');
 8006206:	2043      	movs	r0, #67	; 0x43
 8006208:	f001 f8ea 	bl	80073e0 <chMBPostAheadI.constprop.27>
  test_assert(35, msg1 == MSG_OK, "wrong wake-up message");
 800620c:	f1d0 0101 	rsbs	r1, r0, #1
 8006210:	bf38      	it	cc
 8006212:	2100      	movcc	r1, #0
 8006214:	2023      	movs	r0, #35	; 0x23
 8006216:	f7fb fb33 	bl	8001880 <_test_assert>
 800621a:	2800      	cmp	r0, #0
 800621c:	f47f af33 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'B');
 8006220:	2042      	movs	r0, #66	; 0x42
 8006222:	f001 f8dd 	bl	80073e0 <chMBPostAheadI.constprop.27>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
 8006226:	f1d0 0101 	rsbs	r1, r0, #1
 800622a:	bf38      	it	cc
 800622c:	2100      	movcc	r1, #0
 800622e:	2024      	movs	r0, #36	; 0x24
 8006230:	f7fb fb26 	bl	8001880 <_test_assert>
 8006234:	2800      	cmp	r0, #0
 8006236:	f47f af26 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBPostAheadI(&mb1, 'A');
 800623a:	2041      	movs	r0, #65	; 0x41
 800623c:	f001 f8d0 	bl	80073e0 <chMBPostAheadI.constprop.27>
 8006240:	2100      	movs	r1, #0
 8006242:	4602      	mov	r2, r0
 8006244:	f381 8811 	msr	BASEPRI, r1
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
 8006248:	2025      	movs	r0, #37	; 0x25
 800624a:	ebb2 0c01 	subs.w	ip, r2, r1
 800624e:	f1dc 0300 	rsbs	r3, ip, #0
 8006252:	eb53 010c 	adcs.w	r1, r3, ip
 8006256:	f7fb fb13 	bl	8001880 <_test_assert>
 800625a:	2800      	cmp	r0, #0
 800625c:	f47f af13 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006260:	68e2      	ldr	r2, [r4, #12]
 8006262:	68a1      	ldr	r1, [r4, #8]
 8006264:	2026      	movs	r0, #38	; 0x26
 8006266:	1a53      	subs	r3, r2, r1
 8006268:	425a      	negs	r2, r3
 800626a:	eb52 0103 	adcs.w	r1, r2, r3
 800626e:	f7fb fb07 	bl	8001880 <_test_assert>
 8006272:	2800      	cmp	r0, #0
 8006274:	f47f af07 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8006278:	2505      	movs	r5, #5
 800627a:	f04f 0820 	mov.w	r8, #32
 800627e:	4607      	mov	r7, r0
 8006280:	2620      	movs	r6, #32
 8006282:	f388 8811 	msr	BASEPRI, r8
  for (i = 0; i < MB_SIZE; i++) {
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 8006286:	a801      	add	r0, sp, #4
 8006288:	f001 f8ca 	bl	8007420 <chMBFetchI.constprop.25>
 800628c:	4601      	mov	r1, r0
 800628e:	f387 8811 	msr	BASEPRI, r7
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
 8006292:	2027      	movs	r0, #39	; 0x27
 8006294:	f1d1 0101 	rsbs	r1, r1, #1
 8006298:	bf38      	it	cc
 800629a:	2100      	movcc	r1, #0
 800629c:	f7fb faf0 	bl	8001880 <_test_assert>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f47f aef0 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
 80062a6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80062aa:	f7fb fb01 	bl	80018b0 <test_emit_token>
  test_assert(36, msg1 == MSG_OK, "wrong wake-up message");
  msg1 = chMBPostAheadI(&mb1, 'A');
  chSysUnlock();
  test_assert(37, msg1 == MSG_OK, "wrong wake-up message");
  test_assert(38, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
  for (i = 0; i < MB_SIZE; i++) {
 80062ae:	3d01      	subs	r5, #1
 80062b0:	d1e6      	bne.n	8006280 <mbox1_execute.7599+0x3a0>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(39, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
  }
  test_assert_sequence(40, "ABCDE");
 80062b2:	2028      	movs	r0, #40	; 0x28
 80062b4:	4947      	ldr	r1, [pc, #284]	; (80063d4 <mbox1_execute.7599+0x4f4>)
 80062b6:	f7fb fa9b 	bl	80017f0 <_test_assert_sequence>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f47f aee3 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80062c0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(41, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80062c4:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80062c6:	2029      	movs	r0, #41	; 0x29
 80062c8:	1f63      	subs	r3, r4, #5
 80062ca:	425a      	negs	r2, r3
 80062cc:	eb52 0103 	adcs.w	r1, r2, r3
 80062d0:	4c41      	ldr	r4, [pc, #260]	; (80063d8 <mbox1_execute.7599+0x4f8>)
 80062d2:	f7fb fad5 	bl	8001880 <_test_assert>
 80062d6:	f385 8811 	msr	BASEPRI, r5
 80062da:	2800      	cmp	r0, #0
 80062dc:	f47f aed3 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80062e0:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(42, chMBGetUsedCountI(&mb1) == 0, "still full");
 80062e4:	69a1      	ldr	r1, [r4, #24]
 80062e6:	202a      	movs	r0, #42	; 0x2a
 80062e8:	f1d1 0101 	rsbs	r1, r1, #1
 80062ec:	bf38      	it	cc
 80062ee:	2100      	movcc	r1, #0
 80062f0:	f7fb fac6 	bl	8001880 <_test_assert>
 80062f4:	f385 8811 	msr	BASEPRI, r5
 80062f8:	2800      	cmp	r0, #0
 80062fa:	f47f aec4 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  test_assert(43, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80062fe:	68e2      	ldr	r2, [r4, #12]
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	202b      	movs	r0, #43	; 0x2b
 8006304:	ebb2 0e03 	subs.w	lr, r2, r3
 8006308:	f1de 0100 	rsbs	r1, lr, #0
 800630c:	eb51 010e 	adcs.w	r1, r1, lr
 8006310:	f7fb fab6 	bl	8001880 <_test_assert>
 8006314:	2800      	cmp	r0, #0
 8006316:	f47f aeb6 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 800631a:	f386 8811 	msr	BASEPRI, r6
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 800631e:	6823      	ldr	r3, [r4, #0]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	f104 001c 	add.w	r0, r4, #28
 8006326:	1ad1      	subs	r1, r2, r3
 8006328:	1089      	asrs	r1, r1, #2
void chMBResetI(mailbox_t *mbp) {

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->mb_wrptr = mbp->mb_rdptr = mbp->mb_buffer;
 800632a:	60e3      	str	r3, [r4, #12]
 800632c:	60a3      	str	r3, [r4, #8]
  chSemResetI(&mbp->mb_emptysem, mbp->mb_top - mbp->mb_buffer);
 800632e:	f7fc fbc7 	bl	8002ac0 <chSemResetI>
  chSemResetI(&mbp->mb_fullsem, 0);
 8006332:	f104 0010 	add.w	r0, r4, #16
 8006336:	4629      	mov	r1, r5
 8006338:	f7fc fbc2 	bl	8002ac0 <chSemResetI>
 */
void chMBReset(mailbox_t *mbp) {

  chSysLock();
  chMBResetI(mbp);
  chSchRescheduleS();
 800633c:	f7fb fc28 	bl	8001b90 <chSchRescheduleS>
 8006340:	f385 8811 	msr	BASEPRI, r5
 8006344:	f386 8811 	msr	BASEPRI, r6
  chMBReset(&mb1);

  /*
   * Re-testing final conditions.
   */
  test_assert_lock(44, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8006348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634a:	202c      	movs	r0, #44	; 0x2c
 800634c:	f1b3 0c05 	subs.w	ip, r3, #5
 8006350:	f1dc 0200 	rsbs	r2, ip, #0
 8006354:	eb52 010c 	adcs.w	r1, r2, ip
 8006358:	f7fb fa92 	bl	8001880 <_test_assert>
 800635c:	f385 8811 	msr	BASEPRI, r5
 8006360:	2800      	cmp	r0, #0
 8006362:	f47f ae90 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8006366:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(45, chMBGetUsedCountI(&mb1) == 0, "still full");
 800636a:	69a1      	ldr	r1, [r4, #24]
 800636c:	202d      	movs	r0, #45	; 0x2d
 800636e:	f1d1 0101 	rsbs	r1, r1, #1
 8006372:	bf38      	it	cc
 8006374:	2100      	movcc	r1, #0
 8006376:	f7fb fa83 	bl	8001880 <_test_assert>
 800637a:	f385 8811 	msr	BASEPRI, r5
 800637e:	2800      	cmp	r0, #0
 8006380:	f47f ae81 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8006384:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(46, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	202e      	movs	r0, #46	; 0x2e
 800638e:	1ad2      	subs	r2, r2, r3
 8006390:	4251      	negs	r1, r2
 8006392:	4151      	adcs	r1, r2
 8006394:	f7fb fa74 	bl	8001880 <_test_assert>
 8006398:	f385 8811 	msr	BASEPRI, r5
 800639c:	2800      	cmp	r0, #0
 800639e:	f47f ae72 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80063a2:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(47, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	68e3      	ldr	r3, [r4, #12]
 80063aa:	202f      	movs	r0, #47	; 0x2f
 80063ac:	1ad2      	subs	r2, r2, r3
 80063ae:	4251      	negs	r1, r2
 80063b0:	4151      	adcs	r1, r2
 80063b2:	f7fb fa65 	bl	8001880 <_test_assert>
 80063b6:	2000      	movs	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	e663      	b.n	8006086 <mbox1_execute.7599+0x1a6>

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    *mbp->mb_wrptr++ = msg;
    if (mbp->mb_wrptr >= mbp->mb_top)
      mbp->mb_wrptr = mbp->mb_buffer;
 80063be:	6808      	ldr	r0, [r1, #0]
 80063c0:	6088      	str	r0, [r1, #8]
 80063c2:	e5dc      	b.n	8005f7e <mbox1_execute.7599+0x9e>
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	6088      	str	r0, [r1, #8]
 80063c8:	e5fd      	b.n	8005fc6 <mbox1_execute.7599+0xe6>
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
 80063ca:	684b      	ldr	r3, [r1, #4]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	60cb      	str	r3, [r1, #12]
 80063d0:	e645      	b.n	800605e <mbox1_execute.7599+0x17e>
 80063d2:	bf00      	nop
 80063d4:	0800a1e4 	.word	0x0800a1e4
 80063d8:	20000ce0 	.word	0x20000ce0
  test_assert(3, msg1 == MSG_OK, "wrong wake-up message");

  /*
   * Testing post timeout.
   */
  msg1 = chMBPost(&mb1, 'X', 1);
 80063dc:	2101      	movs	r1, #1
 80063de:	2058      	movs	r0, #88	; 0x58
 80063e0:	f7fd fe96 	bl	8004110 <chMBPost.constprop.30>
  test_assert(4, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80063e4:	f1b0 35ff 	subs.w	r5, r0, #4294967295
 80063e8:	4268      	negs	r0, r5
 80063ea:	eb50 0105 	adcs.w	r1, r0, r5
 80063ee:	2004      	movs	r0, #4
 80063f0:	f7fb fa46 	bl	8001880 <_test_assert>
 80063f4:	4605      	mov	r5, r0
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f47f ae45 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80063fc:	2620      	movs	r6, #32
 80063fe:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostI(&mb1, 'X');
 8006402:	2058      	movs	r0, #88	; 0x58
 8006404:	f000 ffcc 	bl	80073a0 <chMBPostI.constprop.29>
 8006408:	4601      	mov	r1, r0
 800640a:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(5, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800640e:	2005      	movs	r0, #5
 8006410:	f1b1 3cff 	subs.w	ip, r1, #4294967295
 8006414:	f1dc 0300 	rsbs	r3, ip, #0
 8006418:	eb53 010c 	adcs.w	r1, r3, ip
 800641c:	f7fb fa30 	bl	8001880 <_test_assert>
 8006420:	2800      	cmp	r0, #0
 8006422:	f47f ae30 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8006426:	f386 8811 	msr	BASEPRI, r6
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
 800642a:	488e      	ldr	r0, [pc, #568]	; (8006664 <mbox1_execute.7599+0x784>)
 800642c:	2101      	movs	r1, #1
 800642e:	f7ff fcb7 	bl	8005da0 <chSemWaitTimeoutS>
  if (rdymsg == MSG_OK) {
 8006432:	4605      	mov	r5, r0
 8006434:	b980      	cbnz	r0, 8006458 <mbox1_execute.7599+0x578>
    if (--mbp->mb_rdptr < mbp->mb_buffer)
 8006436:	68e0      	ldr	r0, [r4, #12]
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	1f03      	subs	r3, r0, #4
 800643c:	4293      	cmp	r3, r2
 800643e:	60e3      	str	r3, [r4, #12]
 8006440:	4989      	ldr	r1, [pc, #548]	; (8006668 <mbox1_execute.7599+0x788>)
 8006442:	d202      	bcs.n	800644a <mbox1_execute.7599+0x56a>
      mbp->mb_rdptr = mbp->mb_top - 1;
 8006444:	684b      	ldr	r3, [r1, #4]
 8006446:	3b04      	subs	r3, #4
 8006448:	60cb      	str	r3, [r1, #12]
    *mbp->mb_rdptr = msg;
 800644a:	2258      	movs	r2, #88	; 0x58
    chSemSignalI(&mbp->mb_fullsem);
 800644c:	4887      	ldr	r0, [pc, #540]	; (800666c <mbox1_execute.7599+0x78c>)

  rdymsg = chSemWaitTimeoutS(&mbp->mb_emptysem, time);
  if (rdymsg == MSG_OK) {
    if (--mbp->mb_rdptr < mbp->mb_buffer)
      mbp->mb_rdptr = mbp->mb_top - 1;
    *mbp->mb_rdptr = msg;
 800644e:	601a      	str	r2, [r3, #0]
    chSemSignalI(&mbp->mb_fullsem);
 8006450:	f7fc fb26 	bl	8002aa0 <chSemSignalI>
    chSchRescheduleS();
 8006454:	f7fb fb9c 	bl	8001b90 <chSchRescheduleS>
 8006458:	2000      	movs	r0, #0
 800645a:	f380 8811 	msr	BASEPRI, r0
  msg1 = chMBPostAhead(&mb1, 'X', 1);
  test_assert(6, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800645e:	2006      	movs	r0, #6
 8006460:	f1b5 3eff 	subs.w	lr, r5, #4294967295
 8006464:	f1de 0500 	rsbs	r5, lr, #0
 8006468:	eb55 010e 	adcs.w	r1, r5, lr
 800646c:	f7fb fa08 	bl	8001880 <_test_assert>
 8006470:	4605      	mov	r5, r0
 8006472:	2800      	cmp	r0, #0
 8006474:	f47f ae07 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 8006478:	2620      	movs	r6, #32
 800647a:	f386 8811 	msr	BASEPRI, r6
  chSysLock();
  msg1 = chMBPostAheadI(&mb1, 'X');
 800647e:	2058      	movs	r0, #88	; 0x58
 8006480:	f000 ffae 	bl	80073e0 <chMBPostAheadI.constprop.27>
 8006484:	4601      	mov	r1, r0
 8006486:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(7, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800648a:	2007      	movs	r0, #7
 800648c:	f1b1 33ff 	subs.w	r3, r1, #4294967295
 8006490:	425a      	negs	r2, r3
 8006492:	eb52 0103 	adcs.w	r1, r2, r3
 8006496:	f7fb f9f3 	bl	8001880 <_test_assert>
 800649a:	4605      	mov	r5, r0
 800649c:	2800      	cmp	r0, #0
 800649e:	f47f adf2 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80064a2:	f386 8811 	msr	BASEPRI, r6

  /*
   * Testing final conditions.
   */
  test_assert_lock(8, chMBGetFreeCountI(&mb1) == 0, "still empty");
 80064a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80064a8:	2008      	movs	r0, #8
 80064aa:	f1d7 0101 	rsbs	r1, r7, #1
 80064ae:	bf38      	it	cc
 80064b0:	2100      	movcc	r1, #0
 80064b2:	f7fb f9e5 	bl	8001880 <_test_assert>
 80064b6:	4f6c      	ldr	r7, [pc, #432]	; (8006668 <mbox1_execute.7599+0x788>)
 80064b8:	4680      	mov	r8, r0
 80064ba:	b110      	cbz	r0, 80064c2 <mbox1_execute.7599+0x5e2>
 80064bc:	f385 8811 	msr	BASEPRI, r5
 80064c0:	e5e1      	b.n	8006086 <mbox1_execute.7599+0x1a6>
 80064c2:	f380 8811 	msr	BASEPRI, r0
 80064c6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(9, chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 80064ca:	69bd      	ldr	r5, [r7, #24]
 80064cc:	2009      	movs	r0, #9
 80064ce:	1f6b      	subs	r3, r5, #5
 80064d0:	4259      	negs	r1, r3
 80064d2:	4159      	adcs	r1, r3
 80064d4:	f7fb f9d4 	bl	8001880 <_test_assert>
 80064d8:	4605      	mov	r5, r0
 80064da:	b110      	cbz	r0, 80064e2 <mbox1_execute.7599+0x602>
 80064dc:	f388 8811 	msr	BASEPRI, r8
 80064e0:	e5d1      	b.n	8006086 <mbox1_execute.7599+0x1a6>
 80064e2:	f380 8811 	msr	BASEPRI, r0
 80064e6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	200a      	movs	r0, #10
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	4251      	negs	r1, r2
 80064f4:	4151      	adcs	r1, r2
 80064f6:	f7fb f9c3 	bl	8001880 <_test_assert>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d1de      	bne.n	80064bc <mbox1_execute.7599+0x5dc>
 80064fe:	f380 8811 	msr	BASEPRI, r0
 8006502:	2505      	movs	r5, #5
 8006504:	e005      	b.n	8006512 <mbox1_execute.7599+0x632>
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
    test_emit_token(msg2);
 8006506:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800650a:	f7fb f9d1 	bl	80018b0 <test_emit_token>
  test_assert_lock(10, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");

  /*
   * Testing dequeuing.
   */
  for (i = 0; i < MB_SIZE; i++) {
 800650e:	3d01      	subs	r5, #1
 8006510:	d00e      	beq.n	8006530 <mbox1_execute.7599+0x650>
    msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 8006512:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006516:	a801      	add	r0, sp, #4
 8006518:	f7ff fc62 	bl	8005de0 <chMBFetch.constprop.26>
    test_assert(11, msg1 == MSG_OK, "wrong wake-up message");
 800651c:	f1d0 0101 	rsbs	r1, r0, #1
 8006520:	bf38      	it	cc
 8006522:	2100      	movcc	r1, #0
 8006524:	200b      	movs	r0, #11
 8006526:	f7fb f9ab 	bl	8001880 <_test_assert>
 800652a:	2800      	cmp	r0, #0
 800652c:	d0eb      	beq.n	8006506 <mbox1_execute.7599+0x626>
 800652e:	e5aa      	b.n	8006086 <mbox1_execute.7599+0x1a6>
    test_emit_token(msg2);
  }
  test_assert_sequence(12, "ABCDE");
 8006530:	200c      	movs	r0, #12
 8006532:	494f      	ldr	r1, [pc, #316]	; (8006670 <mbox1_execute.7599+0x790>)
 8006534:	f7fb f95c 	bl	80017f0 <_test_assert_sequence>
 8006538:	2800      	cmp	r0, #0
 800653a:	f47f ada4 	bne.w	8006086 <mbox1_execute.7599+0x1a6>

  /*
   * Testing buffer circularity.
   */
  msg1 = chMBPost(&mb1, 'B' + i, TIME_INFINITE);
 800653e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006542:	2047      	movs	r0, #71	; 0x47
 8006544:	f7fd fde4 	bl	8004110 <chMBPost.constprop.30>
  test_assert(13, msg1 == MSG_OK, "wrong wake-up message");
 8006548:	f1d0 0101 	rsbs	r1, r0, #1
 800654c:	bf38      	it	cc
 800654e:	2100      	movcc	r1, #0
 8006550:	200d      	movs	r0, #13
 8006552:	f7fb f995 	bl	8001880 <_test_assert>
 8006556:	2800      	cmp	r0, #0
 8006558:	f47f ad95 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  msg1 = chMBFetch(&mb1, &msg2, TIME_INFINITE);
 800655c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006560:	a801      	add	r0, sp, #4
 8006562:	f7ff fc3d 	bl	8005de0 <chMBFetch.constprop.26>
  test_assert(14, msg1 == MSG_OK, "wrong wake-up message");
 8006566:	f1d0 0101 	rsbs	r1, r0, #1
 800656a:	bf38      	it	cc
 800656c:	2100      	movcc	r1, #0
 800656e:	200e      	movs	r0, #14
 8006570:	f7fb f986 	bl	8001880 <_test_assert>
 8006574:	2800      	cmp	r0, #0
 8006576:	f47f ad86 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  test_assert(15, mb1.mb_buffer == mb1.mb_wrptr, "write pointer not aligned to base");
 800657a:	6826      	ldr	r6, [r4, #0]
 800657c:	68a3      	ldr	r3, [r4, #8]
 800657e:	200f      	movs	r0, #15
 8006580:	ebb6 0c03 	subs.w	ip, r6, r3
 8006584:	f1dc 0200 	rsbs	r2, ip, #0
 8006588:	eb52 010c 	adcs.w	r1, r2, ip
 800658c:	4e36      	ldr	r6, [pc, #216]	; (8006668 <mbox1_execute.7599+0x788>)
 800658e:	f7fb f977 	bl	8001880 <_test_assert>
 8006592:	2800      	cmp	r0, #0
 8006594:	f47f ad77 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
  test_assert(16, mb1.mb_buffer == mb1.mb_rdptr, "read pointer not aligned to base");
 8006598:	6831      	ldr	r1, [r6, #0]
 800659a:	68f3      	ldr	r3, [r6, #12]
 800659c:	2010      	movs	r0, #16
 800659e:	ebb1 0e03 	subs.w	lr, r1, r3
 80065a2:	f1de 0200 	rsbs	r2, lr, #0
 80065a6:	eb52 010e 	adcs.w	r1, r2, lr
 80065aa:	f7fb f969 	bl	8001880 <_test_assert>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f47f ad69 	bne.w	8006086 <mbox1_execute.7599+0x1a6>

  /*
   * Testing fetch timeout.
   */
  msg1 = chMBFetch(&mb1, &msg2, 1);
 80065b4:	2101      	movs	r1, #1
 80065b6:	a801      	add	r0, sp, #4
 80065b8:	f7ff fc12 	bl	8005de0 <chMBFetch.constprop.26>
  test_assert(17, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80065bc:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 80065c0:	4241      	negs	r1, r0
 80065c2:	4141      	adcs	r1, r0
 80065c4:	2011      	movs	r0, #17
 80065c6:	f7fb f95b 	bl	8001880 <_test_assert>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	f47f ad5b 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80065d0:	2720      	movs	r7, #32
 80065d2:	f387 8811 	msr	BASEPRI, r7
  chSysLock();
  msg1 = chMBFetchI(&mb1, &msg2);
 80065d6:	a801      	add	r0, sp, #4
 80065d8:	f000 ff22 	bl	8007420 <chMBFetchI.constprop.25>
 80065dc:	4603      	mov	r3, r0
 80065de:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();
  test_assert(18, msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80065e2:	2012      	movs	r0, #18
 80065e4:	f1b3 32ff 	subs.w	r2, r3, #4294967295
 80065e8:	4251      	negs	r1, r2
 80065ea:	4151      	adcs	r1, r2
 80065ec:	f7fb f948 	bl	8001880 <_test_assert>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f47f ad48 	bne.w	8006086 <mbox1_execute.7599+0x1a6>
 80065f6:	f387 8811 	msr	BASEPRI, r7

  /*
   * Testing final conditions.
   */
  test_assert_lock(19, chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 80065fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065fc:	2013      	movs	r0, #19
 80065fe:	1f5a      	subs	r2, r3, #5
 8006600:	4251      	negs	r1, r2
 8006602:	4151      	adcs	r1, r2
 8006604:	f7fb f93c 	bl	8001880 <_test_assert>
 8006608:	2800      	cmp	r0, #0
 800660a:	f47f aed4 	bne.w	80063b6 <mbox1_execute.7599+0x4d6>
 800660e:	f04f 0800 	mov.w	r8, #0
 8006612:	f388 8811 	msr	BASEPRI, r8
 8006616:	2620      	movs	r6, #32
 8006618:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(20, chMBGetUsedCountI(&mb1) == 0, "still full");
 800661c:	69a7      	ldr	r7, [r4, #24]
 800661e:	2014      	movs	r0, #20
 8006620:	ebb7 0508 	subs.w	r5, r7, r8
 8006624:	426b      	negs	r3, r5
 8006626:	eb53 0105 	adcs.w	r1, r3, r5
 800662a:	f7fb f929 	bl	8001880 <_test_assert>
 800662e:	4d0e      	ldr	r5, [pc, #56]	; (8006668 <mbox1_execute.7599+0x788>)
 8006630:	4607      	mov	r7, r0
 8006632:	2800      	cmp	r0, #0
 8006634:	f47f af52 	bne.w	80064dc <mbox1_execute.7599+0x5fc>
 8006638:	f380 8811 	msr	BASEPRI, r0
 800663c:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(21, mb1.mb_rdptr == mb1.mb_wrptr, "pointers not aligned");
 8006640:	68a9      	ldr	r1, [r5, #8]
 8006642:	68ea      	ldr	r2, [r5, #12]
 8006644:	2015      	movs	r0, #21
 8006646:	ebb2 0c01 	subs.w	ip, r2, r1
 800664a:	f1dc 0300 	rsbs	r3, ip, #0
 800664e:	eb53 010c 	adcs.w	r1, r3, ip
 8006652:	f7fb f915 	bl	8001880 <_test_assert>
 8006656:	2800      	cmp	r0, #0
 8006658:	f43f ad1e 	beq.w	8006098 <mbox1_execute.7599+0x1b8>
 800665c:	f387 8811 	msr	BASEPRI, r7
 8006660:	e511      	b.n	8006086 <mbox1_execute.7599+0x1a6>
 8006662:	bf00      	nop
 8006664:	20000cfc 	.word	0x20000cfc
 8006668:	20000ce0 	.word	0x20000ce0
 800666c:	20000cf0 	.word	0x20000cf0
 8006670:	0800a1e4 	.word	0x0800a1e4
 8006674:	f3af 8000 	nop.w
 8006678:	f3af 8000 	nop.w
 800667c:	f3af 8000 	nop.w

08006680 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_usb_pma_t *pmap;
  stm32_usb_descriptor_t *udp;
  uint32_t n;

  (void)usbp;
  udp = USB_GET_DESCRIPTOR(ep);
 8006682:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006686:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800668a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800668c:	4604      	mov	r4, r0
 800668e:	f102 5500 	add.w	r5, r2, #536870912	; 0x20000000
 8006692:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 8006696:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800669a:	004f      	lsls	r7, r1, #1
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 800669c:	68bb      	ldr	r3, [r7, #8]
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 800669e:	6842      	ldr	r2, [r0, #4]
 80066a0:	f103 5500 	add.w	r5, r3, #536870912	; 0x20000000
 80066a4:	f505 5640 	add.w	r6, r5, #12288	; 0x3000
 80066a8:	0071      	lsls	r1, r6, #1
  for (n = 0; n < 4; n++) {
    *(uint16_t *)buf = (uint16_t)*pmap++;
 80066aa:	680f      	ldr	r7, [r1, #0]
 80066ac:	684e      	ldr	r6, [r1, #4]
 80066ae:	688d      	ldr	r5, [r1, #8]
 80066b0:	6893      	ldr	r3, [r2, #8]
 80066b2:	68c9      	ldr	r1, [r1, #12]
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80066b4:	2200      	movs	r2, #0
 80066b6:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 80066ba:	f8a0 7074 	strh.w	r7, [r0, #116]	; 0x74
 80066be:	f8a0 6076 	strh.w	r6, [r0, #118]	; 0x76
 80066c2:	f8a0 5078 	strh.w	r5, [r0, #120]	; 0x78
 80066c6:	f8a0 107a 	strh.w	r1, [r0, #122]	; 0x7a
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 80066ca:	b333      	cbz	r3, 800671a <_usb_ep0setup+0x9a>
      !(usbp->config->requests_hook_cb(usbp))) {
 80066cc:	4798      	blx	r3
  usbp->ep0state = USB_EP0_WAITING_SETUP;
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
 80066ce:	b320      	cbz	r0, 800671a <_usb_ep0setup+0x9a>
 80066d0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80066d2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = usbFetchWord(&usbp->setup[6]);
 80066d6:	f894 107b 	ldrb.w	r1, [r4, #123]	; 0x7b
 80066da:	f894 007a 	ldrb.w	r0, [r4, #122]	; 0x7a
 80066de:	ea40 2201 	orr.w	r2, r0, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
 80066e2:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80066e4:	bf3c      	itt	cc
 80066e6:	66e2      	strcc	r2, [r4, #108]	; 0x6c
 80066e8:	4615      	movcc	r5, r2
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80066ea:	061b      	lsls	r3, r3, #24
 80066ec:	f100 80aa 	bmi.w	8006844 <_usb_ep0setup+0x1c4>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	f040 808e 	bne.w	8006812 <_usb_ep0setup+0x192>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80066f6:	2305      	movs	r3, #5
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 80066f8:	4629      	mov	r1, r5
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80066fa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareTransmit(usbp, 0, NULL, 0);
 80066fe:	4620      	mov	r0, r4
 8006700:	462a      	mov	r2, r5
 8006702:	f7fe fd55 	bl	80051b0 <usbPrepareTransmit.constprop.5>
 8006706:	2120      	movs	r1, #32
 8006708:	f381 8811 	msr	BASEPRI, r1
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f000 ff4e 	bl	80075b0 <usbStartTransmitI>
 8006714:	f385 8811 	msr	BASEPRI, r5
 8006718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     request.*/
  if (!(usbp->config->requests_hook_cb) ||
      !(usbp->config->requests_hook_cb(usbp))) {
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800671a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800671e:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 8006722:	d01d      	beq.n	8006760 <_usb_ep0setup+0xe0>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006724:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8006728:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800672c:	6819      	ldr	r1, [r3, #0]
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800672e:	6862      	ldr	r2, [r4, #4]
 8006730:	f421 40f0 	bic.w	r0, r1, #30720	; 0x7800
 8006734:	f020 0140 	bic.w	r1, r0, #64	; 0x40
 8006738:	f081 0010 	eor.w	r0, r1, #16
 800673c:	6018      	str	r0, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800673e:	6819      	ldr	r1, [r3, #0]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	f421 4090 	bic.w	r0, r1, #18432	; 0x4800
 8006746:	f020 0170 	bic.w	r1, r0, #112	; 0x70
 800674a:	f481 5080 	eor.w	r0, r1, #4096	; 0x1000
 800674e:	6018      	str	r0, [r3, #0]
 8006750:	b112      	cbz	r2, 8006758 <_usb_ep0setup+0xd8>
 8006752:	4620      	mov	r0, r4
 8006754:	2105      	movs	r1, #5
 8006756:	4790      	blx	r2
      usbp->ep0state = USB_EP0_ERROR;
 8006758:	2306      	movs	r3, #6
 800675a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800675e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
 8006760:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006764:	f003 007f 	and.w	r0, r3, #127	; 0x7f
                              USB_RTYPE_TYPE_MASK)) |
 8006768:	ea40 2205 	orr.w	r2, r0, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800676c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006770:	f000 80d8 	beq.w	8006924 <_usb_ep0setup+0x2a4>
 8006774:	dd18      	ble.n	80067a8 <_usb_ep0setup+0x128>
 8006776:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800677a:	f000 80fd 	beq.w	8006978 <_usb_ep0setup+0x2f8>
 800677e:	f340 808c 	ble.w	800689a <_usb_ep0setup+0x21a>
 8006782:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8006786:	f000 80e4 	beq.w	8006952 <_usb_ep0setup+0x2d2>
 800678a:	f640 4102 	movw	r1, #3074	; 0xc02
 800678e:	428a      	cmp	r2, r1
 8006790:	f000 8097 	beq.w	80068c2 <_usb_ep0setup+0x242>
 8006794:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006798:	d1c4      	bne.n	8006724 <_usb_ep0setup+0xa4>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800679a:	2501      	movs	r5, #1
 800679c:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80067a0:	66a2      	str	r2, [r4, #104]	; 0x68
 80067a2:	66e5      	str	r5, [r4, #108]	; 0x6c
 80067a4:	6726      	str	r6, [r4, #112]	; 0x70
 80067a6:	e796      	b.n	80066d6 <_usb_ep0setup+0x56>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80067a8:	2a02      	cmp	r2, #2
 80067aa:	f000 80a1 	beq.w	80068f0 <_usb_ep0setup+0x270>
 80067ae:	f340 8083 	ble.w	80068b8 <_usb_ep0setup+0x238>
 80067b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80067b6:	f000 808b 	beq.w	80068d0 <_usb_ep0setup+0x250>
 80067ba:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80067be:	d1b1      	bne.n	8006724 <_usb_ep0setup+0xa4>
        return FALSE;
      }
    }
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 80067c0:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1ad      	bne.n	8006724 <_usb_ep0setup+0xa4>
      return FALSE;
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 80067c8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 80067cc:	f015 010f 	ands.w	r1, r5, #15
 80067d0:	d01a      	beq.n	8006808 <_usb_ep0setup+0x188>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 80067d2:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80067d6:	f2c4 0200 	movt	r2, #16384	; 0x4000
      if (usbp->setup[4] & 0x80)
 80067da:	f015 0f80 	tst.w	r5, #128	; 0x80
 80067de:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80067e2:	f040 811c 	bne.w	8006a1e <_usb_ep0setup+0x39e>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 80067e6:	f400 5540 	and.w	r5, r0, #12288	; 0x3000
 80067ea:	f5b5 5f40 	cmp.w	r5, #12288	; 0x3000
 80067ee:	d00b      	beq.n	8006808 <_usb_ep0setup+0x188>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 80067f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067f4:	f423 40f0 	bic.w	r0, r3, #30720	; 0x7800
 80067f8:	f020 0540 	bic.w	r5, r0, #64	; 0x40
 80067fc:	f485 5300 	eor.w	r3, r5, #8192	; 0x2000
 8006800:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006804:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
      if (usbp->setup[4] & 0x80)
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0F);
      else
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0F);
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006808:	2500      	movs	r5, #0
 800680a:	66a5      	str	r5, [r4, #104]	; 0x68
 800680c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800680e:	6725      	str	r5, [r4, #112]	; 0x70
 8006810:	e761      	b.n	80066d6 <_usb_ep0setup+0x56>
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006812:	68e6      	ldr	r6, [r4, #12]
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006814:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006816:	69b3      	ldr	r3, [r6, #24]
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 8006818:	2004      	movs	r0, #4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800681a:	2600      	movs	r6, #0
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 800681c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8006820:	4631      	mov	r1, r6
 8006822:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 8006824:	701e      	strb	r6, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 8006826:	60da      	str	r2, [r3, #12]
  osp->rxsize             = n;
 8006828:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 800682a:	609e      	str	r6, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 800682c:	f000 ff00 	bl	8007630 <usb_lld_prepare_receive>
 8006830:	2120      	movs	r1, #32
 8006832:	f381 8811 	msr	BASEPRI, r1
    if (usbp->ep0n > 0) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 8006836:	4620      	mov	r0, r4
 8006838:	4631      	mov	r1, r6
 800683a:	f000 fed9 	bl	80075f0 <usbStartReceiveI>
 800683e:	f386 8811 	msr	BASEPRI, r6
 8006842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max)
    usbp->ep0n = max;
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n > 0) {
 8006844:	b195      	cbz	r5, 800686c <_usb_ep0setup+0x1ec>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 8006846:	2201      	movs	r2, #1
 8006848:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800684c:	4620      	mov	r0, r4
 800684e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006850:	462a      	mov	r2, r5
 8006852:	f7fe fcad 	bl	80051b0 <usbPrepareTransmit.constprop.5>
 8006856:	2320      	movs	r3, #32
 8006858:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0);
 800685c:	2100      	movs	r1, #0
 800685e:	4620      	mov	r0, r4
 8006860:	f000 fea6 	bl	80075b0 <usbStartTransmitI>
 8006864:	2000      	movs	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800686c:	68e2      	ldr	r2, [r4, #12]
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 800686e:	2003      	movs	r0, #3
 * @param[in] n         transaction size
 *
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8006870:	6993      	ldr	r3, [r2, #24]
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8006872:	4629      	mov	r1, r5
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 8006874:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
  osp->rxqueued           = FALSE;
  osp->mode.linear.rxbuf  = buf;
  osp->rxsize             = n;
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 8006878:	4620      	mov	r0, r4
 * @special
 */
void usbPrepareReceive(USBDriver *usbp, usbep_t ep, uint8_t *buf, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = FALSE;
 800687a:	701d      	strb	r5, [r3, #0]
  osp->mode.linear.rxbuf  = buf;
 800687c:	60dd      	str	r5, [r3, #12]
  osp->rxsize             = n;
 800687e:	605d      	str	r5, [r3, #4]
  osp->rxcnt              = 0;
 8006880:	609d      	str	r5, [r3, #8]

  usb_lld_prepare_receive(usbp, ep);
 8006882:	f000 fed5 	bl	8007630 <usb_lld_prepare_receive>
 8006886:	2120      	movs	r1, #32
 8006888:	f381 8811 	msr	BASEPRI, r1
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      usbPrepareReceive(usbp, 0, NULL, 0);
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0);
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f000 feae 	bl	80075f0 <usbStartReceiveI>
 8006894:	f385 8811 	msr	BASEPRI, r5
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800689a:	f240 3102 	movw	r1, #770	; 0x302
 800689e:	428a      	cmp	r2, r1
 80068a0:	f000 8083 	beq.w	80069aa <_usb_ep0setup+0x32a>
 80068a4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80068a8:	f47f af3c 	bne.w	8006724 <_usb_ep0setup+0xa4>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
        (usbp->setup[1] == USB_REQ_SET_ADDRESS))
      set_address(usbp);
    usbSetupTransfer(usbp, NULL, 0, NULL);
#else
    usbSetupTransfer(usbp, NULL, 0, set_address);
 80068ac:	4d6a      	ldr	r5, [pc, #424]	; (8006a58 <_usb_ep0setup+0x3d8>)
 80068ae:	66a6      	str	r6, [r4, #104]	; 0x68
 80068b0:	6725      	str	r5, [r4, #112]	; 0x70
 80068b2:	66e6      	str	r6, [r4, #108]	; 0x6c
 80068b4:	4635      	mov	r5, r6
 80068b6:	e70e      	b.n	80066d6 <_usb_ep0setup+0x56>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80068b8:	2a00      	cmp	r2, #0
 80068ba:	d043      	beq.n	8006944 <_usb_ep0setup+0x2c4>
 80068bc:	2a01      	cmp	r2, #1
 80068be:	f47f af31 	bne.w	8006724 <_usb_ep0setup+0xa4>
    return TRUE;
  case USB_RTYPE_RECIPIENT_INTERFACE | (USB_REQ_GET_STATUS << 8):
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 80068c2:	4866      	ldr	r0, [pc, #408]	; (8006a5c <_usb_ep0setup+0x3dc>)
 80068c4:	2502      	movs	r5, #2
 80068c6:	2100      	movs	r1, #0
 80068c8:	66a0      	str	r0, [r4, #104]	; 0x68
 80068ca:	66e5      	str	r5, [r4, #108]	; 0x6c
 80068cc:	6721      	str	r1, [r4, #112]	; 0x70
 80068ce:	e702      	b.n	80066d6 <_usb_ep0setup+0x56>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80068d0:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
 80068d4:	2901      	cmp	r1, #1
 80068d6:	f47f af25 	bne.w	8006724 <_usb_ep0setup+0xa4>
      usbp->status &= ~2;
 80068da:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80068de:	66a6      	str	r6, [r4, #104]	; 0x68
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2;
 80068e0:	f022 0002 	bic.w	r0, r2, #2
 80068e4:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80068e8:	66e6      	str	r6, [r4, #108]	; 0x6c
 80068ea:	6726      	str	r6, [r4, #112]	; 0x70
 80068ec:	4635      	mov	r5, r6
 80068ee:	e6f2      	b.n	80066d6 <_usb_ep0setup+0x56>
       using a hook..*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
 80068f0:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80068f4:	f44f 40b8 	mov.w	r0, #23552	; 0x5c00
 80068f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80068fc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006900:	f001 010f 	and.w	r1, r1, #15
 8006904:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8006908:	d177      	bne.n	80069fa <_usb_ep0setup+0x37a>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 800690a:	f410 5140 	ands.w	r1, r0, #12288	; 0x3000
 800690e:	f43f af09 	beq.w	8006724 <_usb_ep0setup+0xa4>
 8006912:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006916:	d06a      	beq.n	80069ee <_usb_ep0setup+0x36e>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006918:	4d51      	ldr	r5, [pc, #324]	; (8006a60 <_usb_ep0setup+0x3e0>)
 800691a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800691c:	66a5      	str	r5, [r4, #104]	; 0x68
 800691e:	6726      	str	r6, [r4, #112]	; 0x70
 8006920:	4615      	mov	r5, r2
 8006922:	e6d8      	b.n	80066d6 <_usb_ep0setup+0x56>
    }
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006924:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
 8006928:	2801      	cmp	r0, #1
 800692a:	f47f aefb 	bne.w	8006724 <_usb_ep0setup+0xa4>
      usbp->status |= 2;
 800692e:	f8b4 507c 	ldrh.w	r5, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006932:	66a6      	str	r6, [r4, #104]	; 0x68
    return FALSE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2;
 8006934:	f045 0202 	orr.w	r2, r5, #2
 8006938:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800693c:	66e6      	str	r6, [r4, #108]	; 0x6c
 800693e:	6726      	str	r6, [r4, #112]	; 0x70
 8006940:	4635      	mov	r5, r6
 8006942:	e6c8      	b.n	80066d6 <_usb_ep0setup+0x56>
  switch (((usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                              USB_RTYPE_TYPE_MASK)) |
           (usbp->setup[1] << 8))) {
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8006944:	2502      	movs	r5, #2
 8006946:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 800694a:	66a1      	str	r1, [r4, #104]	; 0x68
 800694c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800694e:	6722      	str	r2, [r4, #112]	; 0x70
 8006950:	e6c1      	b.n	80066d6 <_usb_ep0setup+0x56>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8006952:	f894 5076 	ldrb.w	r5, [r4, #118]	; 0x76
 8006956:	f884 507f 	strb.w	r5, [r4, #127]	; 0x7f
    if (usbp->configuration == 0)
 800695a:	2d00      	cmp	r5, #0
 800695c:	d144      	bne.n	80069e8 <_usb_ep0setup+0x368>
      usbp->state = USB_SELECTED;
 800695e:	2003      	movs	r0, #3
 8006960:	7020      	strb	r0, [r4, #0]
    else
      usbp->state = USB_ACTIVE;
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	680d      	ldr	r5, [r1, #0]
 8006966:	2d00      	cmp	r5, #0
 8006968:	f43f af4e 	beq.w	8006808 <_usb_ep0setup+0x188>
 800696c:	4620      	mov	r0, r4
 800696e:	2102      	movs	r1, #2
 8006970:	47a8      	blx	r5
 8006972:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006976:	e747      	b.n	8006808 <_usb_ep0setup+0x188>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 8006978:	6862      	ldr	r2, [r4, #4]
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
 800697a:	f894 7079 	ldrb.w	r7, [r4, #121]	; 0x79
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return TRUE;
  case USB_RTYPE_RECIPIENT_DEVICE | (USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(
 800697e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8006982:	6855      	ldr	r5, [r2, #4]
 8006984:	4620      	mov	r0, r4
 8006986:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 800698a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800698e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006992:	47a8      	blx	r5
           usbp, usbp->setup[3], usbp->setup[2],
           usbFetchWord(&usbp->setup[4]));
    if (dp == NULL)
 8006994:	2800      	cmp	r0, #0
 8006996:	f43f aec5 	beq.w	8006724 <_usb_ep0setup+0xa4>
      return FALSE;
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800699a:	6841      	ldr	r1, [r0, #4]
 800699c:	6805      	ldr	r5, [r0, #0]
 800699e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80069a2:	66a1      	str	r1, [r4, #104]	; 0x68
 80069a4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80069a6:	6726      	str	r6, [r4, #112]	; 0x70
 80069a8:	e695      	b.n	80066d6 <_usb_ep0setup+0x56>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT)
 80069aa:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	f47f aeb8 	bne.w	8006724 <_usb_ep0setup+0xa4>
      return FALSE;
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0F) > 0) {
 80069b4:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
 80069b8:	f010 010f 	ands.w	r1, r0, #15
 80069bc:	f43f af24 	beq.w	8006808 <_usb_ep0setup+0x188>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80069c0:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80069c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
      if (usbp->setup[4] & 0x80)
 80069c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80069cc:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80069d0:	d137      	bne.n	8006a42 <_usb_ep0setup+0x3c2>
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80069d2:	f425 4290 	bic.w	r2, r5, #18432	; 0x4800
 80069d6:	f022 0070 	bic.w	r0, r2, #112	; 0x70
 80069da:	f480 5580 	eor.w	r5, r0, #4096	; 0x1000
 80069de:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 80069e2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80069e6:	e70f      	b.n	8006808 <_usb_ep0setup+0x188>
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0)
      usbp->state = USB_SELECTED;
    else
      usbp->state = USB_ACTIVE;
 80069e8:	2204      	movs	r2, #4
 80069ea:	7022      	strb	r2, [r4, #0]
 80069ec:	e7b9      	b.n	8006962 <_usb_ep0setup+0x2e2>
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0F)) {
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80069ee:	4d1d      	ldr	r5, [pc, #116]	; (8006a64 <_usb_ep0setup+0x3e4>)
 80069f0:	66e2      	str	r2, [r4, #108]	; 0x6c
 80069f2:	66a5      	str	r5, [r4, #104]	; 0x68
 80069f4:	6726      	str	r6, [r4, #112]	; 0x70
 80069f6:	4615      	mov	r5, r2
 80069f8:	e66d      	b.n	80066d6 <_usb_ep0setup+0x56>
 * @notapi
 */
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 80069fa:	f000 0130 	and.w	r1, r0, #48	; 0x30
 80069fe:	2910      	cmp	r1, #16
 8006a00:	d806      	bhi.n	8006a10 <_usb_ep0setup+0x390>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    return TRUE;
  case USB_RTYPE_RECIPIENT_ENDPOINT | (USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if (usbp->setup[4] & 0x80) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0F)) {
 8006a02:	4819      	ldr	r0, [pc, #100]	; (8006a68 <_usb_ep0setup+0x3e8>)
 8006a04:	5c41      	ldrb	r1, [r0, r1]
 8006a06:	2901      	cmp	r1, #1
 8006a08:	d0f1      	beq.n	80069ee <_usb_ep0setup+0x36e>
 8006a0a:	2902      	cmp	r1, #2
 8006a0c:	f47f ae8a 	bne.w	8006724 <_usb_ep0setup+0xa4>
      case EP_STATUS_STALLED:
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        return TRUE;
      case EP_STATUS_ACTIVE:
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006a10:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <_usb_ep0setup+0x3e0>)
 8006a12:	2502      	movs	r5, #2
 8006a14:	2000      	movs	r0, #0
 8006a16:	66a2      	str	r2, [r4, #104]	; 0x68
 8006a18:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006a1a:	6720      	str	r0, [r4, #112]	; 0x70
 8006a1c:	e65b      	b.n	80066d6 <_usb_ep0setup+0x56>

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8006a1e:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8006a22:	2830      	cmp	r0, #48	; 0x30
 8006a24:	f43f aef0 	beq.w	8006808 <_usb_ep0setup+0x188>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8006a28:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8006a2c:	f425 43f0 	bic.w	r3, r5, #30720	; 0x7800
 8006a30:	f023 0040 	bic.w	r0, r3, #64	; 0x40
 8006a34:	f080 0520 	eor.w	r5, r0, #32
 8006a38:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8006a3c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006a40:	e6e2      	b.n	8006808 <_usb_ep0setup+0x188>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006a42:	f425 42f0 	bic.w	r2, r5, #30720	; 0x7800
 8006a46:	f022 0040 	bic.w	r0, r2, #64	; 0x40
 8006a4a:	f080 0510 	eor.w	r5, r0, #16
 8006a4e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8006a52:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006a56:	e6d7      	b.n	8006808 <_usb_ep0setup+0x188>
 8006a58:	08006c11 	.word	0x08006c11
 8006a5c:	0800a540 	.word	0x0800a540
 8006a60:	0800a550 	.word	0x0800a550
 8006a64:	0800a500 	.word	0x0800a500
 8006a68:	0800a4e0 	.word	0x0800a4e0
 8006a6c:	f3af 8000 	nop.w

08006a70 <onotify.8832>:
/**
 * @brief   Notification of data inserted into the output queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void onotify(io_queue_t *qp) {
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = qGetLink(qp);
 8006a72:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8006a74:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	7811      	ldrb	r1, [r2, #0]
 8006a7c:	2904      	cmp	r1, #4
 8006a7e:	d000      	beq.n	8006a82 <onotify.8832+0x12>
 8006a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a82:	7a20      	ldrb	r0, [r4, #8]
 8006a84:	2802      	cmp	r0, #2
 8006a86:	d1fb      	bne.n	8006a80 <onotify.8832+0x10>
      (sdup->state != SDU_READY))
    return;

  /* If there is not an ongoing transaction and the output queue contains
     data then a new transaction is started.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in) &&
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	8912      	ldrh	r2, [r2, #8]
 8006a8c:	fa42 f103 	asr.w	r1, r2, r3
 8006a90:	f011 0301 	ands.w	r3, r1, #1
 8006a94:	d1f4      	bne.n	8006a80 <onotify.8832+0x10>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 8006a96:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006a98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a9c:	1a40      	subs	r0, r0, r1
 8006a9e:	1a82      	subs	r2, r0, r2
 8006aa0:	d0ee      	beq.n	8006a80 <onotify.8832+0x10>
 8006aa2:	f383 8811 	msr	BASEPRI, r3
      ((n = oqGetFullI(&sdup->oqueue)) > 0)) {
    osalSysUnlock();

    usbPrepareQueuedTransmit(sdup->config->usbp,
 8006aa6:	f8d4 5254 	ldr.w	r5, [r4, #596]	; 0x254
 8006aaa:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006aae:	6828      	ldr	r0, [r5, #0]
 8006ab0:	7929      	ldrb	r1, [r5, #4]
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006ab2:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8006ab6:	68fd      	ldr	r5, [r7, #12]

  isp->txqueued           = TRUE;
 8006ab8:	2701      	movs	r7, #1
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8006aba:	696d      	ldr	r5, [r5, #20]

  isp->txqueued           = TRUE;
  isp->mode.queue.txqueue = oqp;
  isp->txsize             = n;
  isp->txcnt              = 0;
 8006abc:	60ab      	str	r3, [r5, #8]
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  isp->txqueued           = TRUE;
 8006abe:	702f      	strb	r7, [r5, #0]
  isp->mode.queue.txqueue = oqp;
 8006ac0:	60ee      	str	r6, [r5, #12]
  isp->txsize             = n;
 8006ac2:	606a      	str	r2, [r5, #4]
  isp->txcnt              = 0;

  usb_lld_prepare_transmit(usbp, ep);
 8006ac4:	f7fe fb1c 	bl	8005100 <usb_lld_prepare_transmit>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	f383 8811 	msr	BASEPRI, r3
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8006ace:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 8006ad2:	6808      	ldr	r0, [r1, #0]
 8006ad4:	7909      	ldrb	r1, [r1, #4]
  }
}
 8006ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedTransmit(sdup->config->usbp,
                             sdup->config->bulk_in,
                             &sdup->oqueue, n);

    osalSysLock();
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in);
 8006ada:	f000 bd69 	b.w	80075b0 <usbStartTransmitI>
 8006ade:	bf00      	nop

08006ae0 <dyn1_setup.8088>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006ae0:	f241 4398 	movw	r3, #5272	; 0x1498
 8006ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8006ae8:	f641 0248 	movw	r2, #6216	; 0x1848
  test_emit_token(*(char *)p);
  return 0;
}

#if (CH_CFG_USE_HEAP && !CH_CFG_USE_MALLOC_HEAP) || defined(__DOXYGEN__)
static void dyn1_setup(void) {
 8006aec:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006aee:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 8006af0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8006af4:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8006af8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8006afc:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 8006afe:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8006b00:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8006b02:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8006b04:	6054      	str	r4, [r2, #4]
 8006b06:	6158      	str	r0, [r3, #20]
 8006b08:	6118      	str	r0, [r3, #16]
 8006b0a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 8006b0c:	bc10      	pop	{r4}
 8006b0e:	4770      	bx	lr

08006b10 <get_descriptor.11370>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8006b10:	2902      	cmp	r1, #2
 8006b12:	d006      	beq.n	8006b22 <get_descriptor.11370+0x12>
 8006b14:	2903      	cmp	r1, #3
 8006b16:	d006      	beq.n	8006b26 <get_descriptor.11370+0x16>
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
 8006b18:	4807      	ldr	r0, [pc, #28]	; (8006b38 <get_descriptor.11370+0x28>)
 8006b1a:	2901      	cmp	r1, #1
 8006b1c:	bf18      	it	ne
 8006b1e:	2000      	movne	r0, #0
 8006b20:	4770      	bx	lr
  (void)lang;
  switch (dtype) {
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
 8006b22:	4806      	ldr	r0, [pc, #24]	; (8006b3c <get_descriptor.11370+0x2c>)
 8006b24:	4770      	bx	lr
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8006b26:	2a03      	cmp	r2, #3
 8006b28:	d803      	bhi.n	8006b32 <get_descriptor.11370+0x22>
      return &vcom_strings[dindex];
 8006b2a:	4805      	ldr	r0, [pc, #20]	; (8006b40 <get_descriptor.11370+0x30>)
 8006b2c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8006b30:	4770      	bx	lr
  }
  return NULL;
 8006b32:	2000      	movs	r0, #0
}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	0800a5b0 	.word	0x0800a5b0
 8006b3c:	0800a5a0 	.word	0x0800a5a0
 8006b40:	0800a6e0 	.word	0x0800a6e0
 8006b44:	f3af 8000 	nop.w
 8006b48:	f3af 8000 	nop.w
 8006b4c:	f3af 8000 	nop.w

08006b50 <usb_lld_init_endpoint.4444>:
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8006b50:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006b54:	68da      	ldr	r2, [r3, #12]
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8006b56:	b470      	push	{r4, r5, r6}
  uint16_t nblocks, epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];

  /* Setting the endpoint type.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8006b58:	6815      	ldr	r5, [r2, #0]
 8006b5a:	f005 0603 	and.w	r6, r5, #3
 8006b5e:	1e73      	subs	r3, r6, #1
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	bf96      	itet	ls
 8006b64:	4c28      	ldrls	r4, [pc, #160]	; (8006c08 <usb_lld_init_endpoint.4444+0xb8>)
 8006b66:	f44f 7300 	movhi.w	r3, #512	; 0x200
 8006b6a:	f834 3013 	ldrhls.w	r3, [r4, r3, lsl #1]
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  /* IN endpoint initially in NAK mode.*/
  if (epcp->in_cb != NULL)
 8006b6e:	6894      	ldr	r4, [r2, #8]
 8006b70:	b10c      	cbz	r4, 8006b76 <usb_lld_init_endpoint.4444+0x26>
    epr |= EPR_STAT_TX_NAK;
 8006b72:	f043 0320 	orr.w	r3, r3, #32

  /* OUT endpoint initially in NAK mode.*/
  if (epcp->out_cb != NULL)
 8006b76:	68d5      	ldr	r5, [r2, #12]
 8006b78:	b10d      	cbz	r5, 8006b7e <usb_lld_init_endpoint.4444+0x2e>
    epr |= EPR_STAT_RX_NAK;
 8006b7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 8006b7e:	ea43 0601 	orr.w	r6, r3, r1
 8006b82:	f426 45f0 	bic.w	r5, r6, #30720	; 0x7800
 8006b86:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8006b8a:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8006b8e:	f025 0670 	bic.w	r6, r5, #112	; 0x70
 8006b92:	f844 6021 	str.w	r6, [r4, r1, lsl #2]
  EPR_TOGGLE(ep, epr);
 8006b96:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
 8006b9a:	f647 0570 	movw	r5, #30832	; 0x7870
 8006b9e:	401d      	ands	r5, r3

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8006ba0:	8a53      	ldrh	r3, [r2, #18]
  if (epcp->out_cb != NULL)
    epr |= EPR_STAT_RX_NAK;

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);
 8006ba2:	4075      	eors	r5, r6
 8006ba4:	f844 5021 	str.w	r5, [r4, r1, lsl #2]

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8006ba8:	1e5c      	subs	r4, r3, #1
  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
 8006baa:	2b3e      	cmp	r3, #62	; 0x3e
 8006bac:	d821      	bhi.n	8006bf2 <usb_lld_init_endpoint.4444+0xa2>
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8006bae:	f044 0601 	orr.w	r6, r4, #1
 8006bb2:	1c75      	adds	r5, r6, #1
 8006bb4:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 8006bb8:	0266      	lsls	r6, r4, #9
 8006bba:	f406 457c 	and.w	r5, r6, #64512	; 0xfc00
  dp = USB_GET_DESCRIPTOR(ep);
 8006bbe:	f44f 46b8 	mov.w	r6, #23552	; 0x5c00
 8006bc2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8006bc6:	6d36      	ldr	r6, [r6, #80]	; 0x50
 * @param[in] size      size of the packet buffer to allocate
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8006bc8:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8006bcc:	8a12      	ldrh	r2, [r2, #16]
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8006bce:	f106 5600 	add.w	r6, r6, #536870912	; 0x20000000
 8006bd2:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8006bd6:	1912      	adds	r2, r2, r4
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
 8006bd8:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8006bdc:	0049      	lsls	r1, r1, #1
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8006bde:	18d3      	adds	r3, r2, r3
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
              0x8000;
  else
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
 8006be0:	2600      	movs	r6, #0
 8006be2:	604e      	str	r6, [r1, #4]
  dp->RXCOUNT0 = nblocks;
 8006be4:	60cd      	str	r5, [r1, #12]
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8006be6:	600c      	str	r4, [r1, #0]
 */
static uint32_t usb_pm_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8006be8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
  dp = USB_GET_DESCRIPTOR(ep);
  dp->TXCOUNT0 = 0;
  dp->RXCOUNT0 = nblocks;
  dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
  dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8006bec:	608a      	str	r2, [r1, #8]
}
 8006bee:	bc70      	pop	{r4, r5, r6}
 8006bf0:	4770      	bx	lr
  EPR_SET(ep, epr | ep);
  EPR_TOGGLE(ep, epr);

  /* Endpoint size and address initialization.*/
  if (epcp->out_maxsize > 62)
    nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8006bf2:	f044 051f 	orr.w	r5, r4, #31
 8006bf6:	1c6c      	adds	r4, r5, #1
 8006bf8:	1166      	asrs	r6, r4, #5
 8006bfa:	ea6f 65c6 	mvn.w	r5, r6, lsl #27
 8006bfe:	ea6f 4455 	mvn.w	r4, r5, lsr #17
 8006c02:	b2a5      	uxth	r5, r4
 8006c04:	e7db      	b.n	8006bbe <usb_lld_init_endpoint.4444+0x6e>
 8006c06:	bf00      	nop
 8006c08:	0800a570 	.word	0x0800a570
 8006c0c:	f3af 8000 	nop.w

08006c10 <set_address.9473>:
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8006c10:	b538      	push	{r3, r4, r5, lr}

  usbp->address = usbp->setup[2];
 8006c12:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006c16:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8006c18:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8006c1c:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006c20:	680d      	ldr	r5, [r1, #0]
 8006c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c26:	f2c4 0300 	movt	r3, #16384	; 0x4000
/**
 * @brief  SET ADDRESS transaction callback.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	64da      	str	r2, [r3, #76]	; 0x4c

  usbp->address = usbp->setup[2];
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8006c2e:	b10d      	cbz	r5, 8006c34 <set_address.9473+0x24>
 8006c30:	2101      	movs	r1, #1
 8006c32:	47a8      	blx	r5
  usbp->state = USB_SELECTED;
 8006c34:	2003      	movs	r0, #3
 8006c36:	7020      	strb	r0, [r4, #0]
 8006c38:	bd38      	pop	{r3, r4, r5, pc}
 8006c3a:	bf00      	nop
 8006c3c:	f3af 8000 	nop.w

08006c40 <gpt_lld_serve_interrupt.10064.4505>:
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
 8006c40:	7801      	ldrb	r1, [r0, #0]
/**
 * @brief   Shared IRQ handler.
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {
 8006c42:	b508      	push	{r3, lr}

  gptp->tim->SR = 0;
 8006c44:	68c3      	ldr	r3, [r0, #12]
 8006c46:	2200      	movs	r2, #0
  if (gptp->state == GPT_ONESHOT) {
 8006c48:	2904      	cmp	r1, #4
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
 8006c4a:	611a      	str	r2, [r3, #16]
  if (gptp->state == GPT_ONESHOT) {
 8006c4c:	d107      	bne.n	8006c5e <gpt_lld_serve_interrupt.10064.4505+0x1e>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
 8006c4e:	2102      	movs	r1, #2
 8006c50:	7001      	strb	r1, [r0, #0]
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  gptp->tim->CR1   = 0;                         /* Initially stopped.       */
 8006c52:	601a      	str	r2, [r3, #0]
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8006c54:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8006c5c:	60d9      	str	r1, [r3, #12]
  gptp->tim->SR = 0;
  if (gptp->state == GPT_ONESHOT) {
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
 8006c5e:	6843      	ldr	r3, [r0, #4]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	4790      	blx	r2
 8006c64:	bd08      	pop	{r3, pc}
 8006c66:	bf00      	nop
 8006c68:	f3af 8000 	nop.w
 8006c6c:	f3af 8000 	nop.w

08006c70 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	f3af 8000 	nop.w
 8006c78:	f3af 8000 	nop.w
 8006c7c:	f3af 8000 	nop.w

08006c80 <sduRequestsHook>:
 * @retval TRUE         Message handled internally.
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8006c80:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006c84:	f003 0160 	and.w	r1, r3, #96	; 0x60
 8006c88:	2920      	cmp	r1, #32
 8006c8a:	d001      	beq.n	8006c90 <sduRequestsHook+0x10>
      return TRUE;
    default:
      return FALSE;
    }
  }
  return FALSE;
 8006c8c:	2000      	movs	r0, #0
}
 8006c8e:	4770      	bx	lr
 * @retval FALSE        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 8006c90:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8006c94:	2a21      	cmp	r2, #33	; 0x21
 8006c96:	d003      	beq.n	8006ca0 <sduRequestsHook+0x20>
 8006c98:	2a22      	cmp	r2, #34	; 0x22
 8006c9a:	d009      	beq.n	8006cb0 <sduRequestsHook+0x30>
 8006c9c:	2a20      	cmp	r2, #32
 8006c9e:	d1f5      	bne.n	8006c8c <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return TRUE;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8006ca0:	4906      	ldr	r1, [pc, #24]	; (8006cbc <sduRequestsHook+0x3c>)
 8006ca2:	2207      	movs	r2, #7
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	6681      	str	r1, [r0, #104]	; 0x68
 8006ca8:	66c2      	str	r2, [r0, #108]	; 0x6c
 8006caa:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 8006cac:	2001      	movs	r0, #1
 8006cae:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6683      	str	r3, [r0, #104]	; 0x68
 8006cb4:	66c3      	str	r3, [r0, #108]	; 0x6c
 8006cb6:	6703      	str	r3, [r0, #112]	; 0x70
      return TRUE;
 8006cb8:	2001      	movs	r0, #1
 8006cba:	4770      	bx	lr
 8006cbc:	2000082c 	.word	0x2000082c

08006cc0 <tmo.8442>:
 * A virtual timer is set and immediately reset into a continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	f3af 8000 	nop.w
 8006cc8:	f3af 8000 	nop.w
 8006ccc:	f3af 8000 	nop.w

08006cd0 <thread1.8445>:
#endif

static msg_t thread1(void *p) {

  return (msg_t)p;
}
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	f3af 8000 	nop.w
 8006cd8:	f3af 8000 	nop.w
 8006cdc:	f3af 8000 	nop.w

08006ce0 <notify.8246>:

#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)

#define TEST_QUEUES_SIZE 4

static void notify(io_queue_t *qp) {
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	f3af 8000 	nop.w
 8006cec:	f3af 8000 	nop.w

08006cf0 <null_provider.7957>:

static void *null_provider(size_t size) {

  (void)size;
  return NULL;
}
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4770      	bx	lr
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	f3af 8000 	nop.w
 8006cfc:	f3af 8000 	nop.w

08006d00 <mtx7_execute.7295>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8006d00:	b530      	push	{r4, r5, lr}
 8006d02:	4b2c      	ldr	r3, [pc, #176]	; (8006db4 <mtx7_execute.7295+0xb4>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006d04:	4c2c      	ldr	r4, [pc, #176]	; (8006db8 <mtx7_execute.7295+0xb8>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8006d06:	6998      	ldr	r0, [r3, #24]

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static void mtx7_execute(void) {
 8006d08:	b083      	sub	sp, #12
 8006d0a:	6885      	ldr	r5, [r0, #8]

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006d0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d10:	1c6a      	adds	r2, r5, #1
 8006d12:	9400      	str	r4, [sp, #0]
 8006d14:	4b29      	ldr	r3, [pc, #164]	; (8006dbc <mtx7_execute.7295+0xbc>)
 8006d16:	482a      	ldr	r0, [pc, #168]	; (8006dc0 <mtx7_execute.7295+0xc0>)
 8006d18:	f7fb f882 	bl	8001e20 <chThdCreateStatic>
 8006d1c:	4c29      	ldr	r4, [pc, #164]	; (8006dc4 <mtx7_execute.7295+0xc4>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006d1e:	492a      	ldr	r1, [pc, #168]	; (8006dc8 <mtx7_execute.7295+0xc8>)
}

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
 8006d20:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006d22:	1caa      	adds	r2, r5, #2
 8006d24:	9100      	str	r1, [sp, #0]
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <mtx7_execute.7295+0xbc>)
 8006d28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d2c:	4827      	ldr	r0, [pc, #156]	; (8006dcc <mtx7_execute.7295+0xcc>)
 8006d2e:	f7fb f877 	bl	8001e20 <chThdCreateStatic>
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006d32:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <mtx7_execute.7295+0xd0>)

static void mtx7_execute(void) {

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
 8006d34:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
 8006d36:	1cea      	adds	r2, r5, #3
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d3e:	4b1f      	ldr	r3, [pc, #124]	; (8006dbc <mtx7_execute.7295+0xbc>)
 8006d40:	4824      	ldr	r0, [pc, #144]	; (8006dd4 <mtx7_execute.7295+0xd4>)
 8006d42:	f7fb f86d 	bl	8001e20 <chThdCreateStatic>
 8006d46:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006d48:	4823      	ldr	r0, [pc, #140]	; (8006dd8 <mtx7_execute.7295+0xd8>)
 8006d4a:	1d2a      	adds	r2, r5, #4
 8006d4c:	9000      	str	r0, [sp, #0]
 8006d4e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d52:	4b1a      	ldr	r3, [pc, #104]	; (8006dbc <mtx7_execute.7295+0xbc>)
 8006d54:	4821      	ldr	r0, [pc, #132]	; (8006ddc <mtx7_execute.7295+0xdc>)
 8006d56:	f7fb f863 	bl	8001e20 <chThdCreateStatic>
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8006d5a:	4a21      	ldr	r2, [pc, #132]	; (8006de0 <mtx7_execute.7295+0xe0>)

  tprio_t prio = chThdGetPriorityX();
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread10, "E");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread10, "D");
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
 8006d5c:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
 8006d5e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d62:	9200      	str	r2, [sp, #0]
 8006d64:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <mtx7_execute.7295+0xbc>)
 8006d66:	1d6a      	adds	r2, r5, #5
 8006d68:	481e      	ldr	r0, [pc, #120]	; (8006de4 <mtx7_execute.7295+0xe4>)
 8006d6a:	f7fb f859 	bl	8001e20 <chThdCreateStatic>
 8006d6e:	6120      	str	r0, [r4, #16]
 8006d70:	2420      	movs	r4, #32
 8006d72:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8006d76:	4c1c      	ldr	r4, [pc, #112]	; (8006de8 <mtx7_execute.7295+0xe8>)
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	42a3      	cmp	r3, r4
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8006d7c:	bf18      	it	ne
 8006d7e:	f06f 0501 	mvnne.w	r5, #1
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8006d82:	d009      	beq.n	8006d98 <mtx7_execute.7295+0x98>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 8006d84:	6819      	ldr	r1, [r3, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8006d86:	4618      	mov	r0, r3
 8006d88:	604c      	str	r4, [r1, #4]
 8006d8a:	6021      	str	r1, [r4, #0]
 8006d8c:	f7fb f930 	bl	8001ff0 <chSchReadyI>
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8006d90:	6823      	ldr	r3, [r4, #0]
    chSchReadyI(queue_fifo_remove(&cp->c_queue))->p_u.rdymsg = MSG_RESET;
 8006d92:	6205      	str	r5, [r0, #32]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (cp->c_queue.p_next != (void *)&cp->c_queue)
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d1f5      	bne.n	8006d84 <mtx7_execute.7295+0x84>
 */
void chCondBroadcast(condition_variable_t *cp) {

  chSysLock();
  chCondBroadcastI(cp);
  chSchRescheduleS();
 8006d98:	f7fa fefa 	bl	8001b90 <chSchRescheduleS>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f380 8811 	msr	BASEPRI, r0
  chCondBroadcast(&c1);
  test_wait_threads();
 8006da2:	f7fb fb4d 	bl	8002440 <test_wait_threads>
  test_assert_sequence(1, "ABCDE");
 8006da6:	4911      	ldr	r1, [pc, #68]	; (8006dec <mtx7_execute.7295+0xec>)
 8006da8:	2001      	movs	r0, #1
}
 8006daa:	b003      	add	sp, #12
 8006dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread10, "C");
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread10, "B");
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread10, "A");
  chCondBroadcast(&c1);
  test_wait_threads();
  test_assert_sequence(1, "ABCDE");
 8006db0:	f7fa bd1e 	b.w	80017f0 <_test_assert_sequence>
 8006db4:	20001eb8 	.word	0x20001eb8
 8006db8:	0800a1e8 	.word	0x0800a1e8
 8006dbc:	08006e31 	.word	0x08006e31
 8006dc0:	20001848 	.word	0x20001848
 8006dc4:	20002008 	.word	0x20002008
 8006dc8:	0800a2f8 	.word	0x0800a2f8
 8006dcc:	20001990 	.word	0x20001990
 8006dd0:	0800a1d8 	.word	0x0800a1d8
 8006dd4:	20001ad8 	.word	0x20001ad8
 8006dd8:	0800a1dc 	.word	0x0800a1dc
 8006ddc:	20001c20 	.word	0x20001c20
 8006de0:	0800a1e0 	.word	0x0800a1e0
 8006de4:	20001d68 	.word	0x20001d68
 8006de8:	20000818 	.word	0x20000818
 8006dec:	0800a1e4 	.word	0x0800a1e4

08006df0 <thread.8077>:
 * is attempted.<br>
 * The test expects the first two threads to successfully start and the last
 * one to fail.
 */

static msg_t thread(void *p) {
 8006df0:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8006df2:	7800      	ldrb	r0, [r0, #0]
 8006df4:	f7fa fd5c 	bl	80018b0 <test_emit_token>
  return 0;
}
 8006df8:	2000      	movs	r0, #0
 8006dfa:	bd08      	pop	{r3, pc}
 8006dfc:	f3af 8000 	nop.w

08006e00 <thread4>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <thread4+0x20>)
 * the thread is awakened as fast is possible by the tester thread.<br>
 * The Context Switch performance is calculated by measuring the number of
 * iterations after a second of continuous operations.
 */

msg_t thread4(void *p) {
 8006e02:	b510      	push	{r4, lr}
 8006e04:	2020      	movs	r0, #32
 8006e06:	699c      	ldr	r4, [r3, #24]
 8006e08:	f380 8811 	msr	BASEPRI, r0
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8006e0c:	2003      	movs	r0, #3
 8006e0e:	f7fb f847 	bl	8001ea0 <chSchGoSleepS>
    msg = self->p_u.rdymsg;
  } while (msg == MSG_OK);
 8006e12:	6a21      	ldr	r1, [r4, #32]
 8006e14:	2900      	cmp	r1, #0
 8006e16:	d0f9      	beq.n	8006e0c <thread4+0xc>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8006e1e:	bd10      	pop	{r4, pc}
 8006e20:	20001eb8 	.word	0x20001eb8
 8006e24:	f3af 8000 	nop.w
 8006e28:	f3af 8000 	nop.w
 8006e2c:	f3af 8000 	nop.w

08006e30 <thread10.7266>:

  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}

static msg_t thread10(void *p) {
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	4607      	mov	r7, r0

  chMtxLock(&m1);
 8006e34:	4815      	ldr	r0, [pc, #84]	; (8006e8c <thread10.7266+0x5c>)
 8006e36:	f7fb fa0b 	bl	8002250 <chMtxLock>
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 8006e40:	4813      	ldr	r0, [pc, #76]	; (8006e90 <thread10.7266+0x60>)
 8006e42:	6984      	ldr	r4, [r0, #24]
 8006e44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(ctp->p_mtxlist != NULL, "not owning a mutex");

  mp = chMtxGetNextMutexS();
  chMtxUnlockS(mp);
 8006e46:	4630      	mov	r0, r6
 8006e48:	f7fb f972 	bl	8002130 <chMtxUnlockS>
  ctp->p_u.wtobjp = cp;
 8006e4c:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <thread10.7266+0x64>)
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8006e4e:	461d      	mov	r5, r3
 8006e50:	6223      	str	r3, [r4, #32]
  do {
    cp = cp->p_next;
 8006e52:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	d003      	beq.n	8006e60 <thread10.7266+0x30>
 8006e58:	6899      	ldr	r1, [r3, #8]
 8006e5a:	68a2      	ldr	r2, [r4, #8]
 8006e5c:	4291      	cmp	r1, r2
 8006e5e:	d2f8      	bcs.n	8006e52 <thread10.7266+0x22>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8006e60:	6858      	ldr	r0, [r3, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8006e62:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
 8006e64:	6060      	str	r0, [r4, #4]
  tp->p_prev->p_next = cp->p_prev = tp;
 8006e66:	6004      	str	r4, [r0, #0]
 8006e68:	605c      	str	r4, [r3, #4]
  queue_prio_insert(ctp, &cp->c_queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8006e6a:	2007      	movs	r0, #7
 8006e6c:	f7fb f818 	bl	8001ea0 <chSchGoSleepS>
  msg = ctp->p_u.rdymsg;
  chMtxLockS(mp);
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7fb f985 	bl	8002180 <chMtxLockS>
 8006e76:	2400      	movs	r4, #0
 8006e78:	f384 8811 	msr	BASEPRI, r4
  chCondWait(&c1);
  test_emit_token(*(char *)p);
 8006e7c:	7838      	ldrb	r0, [r7, #0]
 8006e7e:	f7fa fd17 	bl	80018b0 <test_emit_token>
  chMtxUnlock(&m1);
 8006e82:	4802      	ldr	r0, [pc, #8]	; (8006e8c <thread10.7266+0x5c>)
 8006e84:	f7fa ff84 	bl	8001d90 <chMtxUnlock>
  return 0;
}
 8006e88:	4620      	mov	r0, r4
 8006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8c:	20000800 	.word	0x20000800
 8006e90:	20001eb8 	.word	0x20001eb8
 8006e94:	20000818 	.word	0x20000818
 8006e98:	f3af 8000 	nop.w
 8006e9c:	f3af 8000 	nop.w

08006ea0 <Vector8C>:
 */
CH_IRQ_HANDLER(STM32_USB1_HP_HANDLER) {

  CH_IRQ_PROLOGUE();

  CH_IRQ_EPILOGUE();
 8006ea0:	f7fb b876 	b.w	8001f90 <_port_irq_epilogue>
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	f3af 8000 	nop.w
 8006eac:	f3af 8000 	nop.w

08006eb0 <VectorB8>:
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);
 8006eb0:	f241 70e8 	movw	r0, #6120	; 0x17e8
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 8006eb4:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);
 8006eb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006eba:	f7ff fec1 	bl	8006c40 <gpt_lld_serve_interrupt.10064.4505>

  OSAL_IRQ_EPILOGUE();
}
 8006ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD4);

  OSAL_IRQ_EPILOGUE();
 8006ec2:	f7fb b865 	b.w	8001f90 <_port_irq_epilogue>
 8006ec6:	bf00      	nop
 8006ec8:	f3af 8000 	nop.w
 8006ecc:	f3af 8000 	nop.w

08006ed0 <VectorB4>:
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);
 8006ed0:	f241 70d8 	movw	r0, #6104	; 0x17d8
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8006ed4:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);
 8006ed6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006eda:	f7ff feb1 	bl	8006c40 <gpt_lld_serve_interrupt.10064.4505>

  OSAL_IRQ_EPILOGUE();
}
 8006ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  gpt_lld_serve_interrupt(&GPTD3);

  OSAL_IRQ_EPILOGUE();
 8006ee2:	f7fb b855 	b.w	8001f90 <_port_irq_epilogue>
 8006ee6:	bf00      	nop
 8006ee8:	f3af 8000 	nop.w
 8006eec:	f3af 8000 	nop.w

08006ef0 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ef6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8006ef8:	4806      	ldr	r0, [pc, #24]	; (8006f14 <Vector84+0x24>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
 8006efa:	f3c1 6103 	ubfx	r1, r1, #24, #4
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
 8006efe:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8006f00:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
 8006f02:	060c      	lsls	r4, r1, #24
 8006f04:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8006f06:	b10a      	cbz	r2, 8006f0c <Vector84+0x1c>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8006f08:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8006f0a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8006f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 24) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 24;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006f10:	f7fb b83e 	b.w	8001f90 <_port_irq_epilogue>
 8006f14:	20000dd0 	.word	0x20000dd0
 8006f18:	f3af 8000 	nop.w
 8006f1c:	f3af 8000 	nop.w

08006f20 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f26:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8006f28:	4806      	ldr	r0, [pc, #24]	; (8006f44 <Vector80+0x24>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
 8006f2a:	f3c1 5103 	ubfx	r1, r1, #20, #4
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
 8006f2e:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8006f30:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
 8006f32:	050c      	lsls	r4, r1, #20
 8006f34:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8006f36:	b10a      	cbz	r2, 8006f3c <Vector80+0x1c>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8006f38:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006f3a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8006f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 20) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 20;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006f40:	f7fb b826 	b.w	8001f90 <_port_irq_epilogue>
 8006f44:	20000dd0 	.word	0x20000dd0
 8006f48:	f3af 8000 	nop.w
 8006f4c:	f3af 8000 	nop.w

08006f50 <Vector7C>:
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f56:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8006f58:	4806      	ldr	r0, [pc, #24]	; (8006f74 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
 8006f5a:	f3c1 4103 	ubfx	r1, r1, #16, #4
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
 8006f5e:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 8006f60:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
 8006f62:	040c      	lsls	r4, r1, #16
 8006f64:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8006f66:	b10a      	cbz	r2, 8006f6c <Vector7C+0x1c>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8006f68:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006f6a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8006f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 16;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006f70:	f7fb b80e 	b.w	8001f90 <_port_irq_epilogue>
 8006f74:	20000dd0 	.word	0x20000dd0
 8006f78:	f3af 8000 	nop.w
 8006f7c:	f3af 8000 	nop.w

08006f80 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f86:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8006f88:	4806      	ldr	r0, [pc, #24]	; (8006fa4 <Vector78+0x24>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
 8006f8a:	f3c1 3103 	ubfx	r1, r1, #12, #4
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
 8006f8e:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8006f90:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
 8006f92:	030c      	lsls	r4, r1, #12
 8006f94:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[3].dma_func)
 8006f96:	b10a      	cbz	r2, 8006f9c <Vector78+0x1c>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8006f98:	69c0      	ldr	r0, [r0, #28]
 8006f9a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8006f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 12) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 12;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006fa0:	f7fa bff6 	b.w	8001f90 <_port_irq_epilogue>
 8006fa4:	20000dd0 	.word	0x20000dd0
 8006fa8:	f3af 8000 	nop.w
 8006fac:	f3af 8000 	nop.w

08006fb0 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fb6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8006fb8:	4806      	ldr	r0, [pc, #24]	; (8006fd4 <Vector74+0x24>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
 8006fba:	f3c1 2103 	ubfx	r1, r1, #8, #4
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
 8006fbe:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8006fc0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
 8006fc2:	020c      	lsls	r4, r1, #8
 8006fc4:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[2].dma_func)
 8006fc6:	b10a      	cbz	r2, 8006fcc <Vector74+0x1c>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8006fc8:	6940      	ldr	r0, [r0, #20]
 8006fca:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8006fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 8) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 8;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8006fd0:	f7fa bfde 	b.w	8001f90 <_port_irq_epilogue>
 8006fd4:	20000dd0 	.word	0x20000dd0
 8006fd8:	f3af 8000 	nop.w
 8006fdc:	f3af 8000 	nop.w

08006fe0 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006fe6:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8006fe8:	4806      	ldr	r0, [pc, #24]	; (8007004 <Vector70+0x24>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
 8006fea:	f3c1 1103 	ubfx	r1, r1, #4, #4
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
 8006fee:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8006ff0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
 8006ff2:	010c      	lsls	r4, r1, #4
 8006ff4:	605c      	str	r4, [r3, #4]
  if (dma_isr_redir[1].dma_func)
 8006ff6:	b10a      	cbz	r2, 8006ffc <Vector70+0x1c>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8006ff8:	68c0      	ldr	r0, [r0, #12]
 8006ffa:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8006ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->ISR >> 4) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 4;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8007000:	f7fa bfc6 	b.w	8001f90 <_port_irq_epilogue>
 8007004:	20000dd0 	.word	0x20000dd0
 8007008:	f3af 8000 	nop.w
 800700c:	f3af 8000 	nop.w

08007010 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 8007010:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 8007012:	2300      	movs	r3, #0
 8007014:	f2c4 0302 	movt	r3, #16386	; 0x4002
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 8007018:	4806      	ldr	r0, [pc, #24]	; (8007034 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800701a:	6819      	ldr	r1, [r3, #0]
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800701c:	6802      	ldr	r2, [r0, #0]
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
 800701e:	f001 010f 	and.w	r1, r1, #15
  DMA1->IFCR = flags << 0;
 8007022:	6059      	str	r1, [r3, #4]
  if (dma_isr_redir[0].dma_func)
 8007024:	b10a      	cbz	r2, 800702a <Vector6C+0x1a>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8007026:	6840      	ldr	r0, [r0, #4]
 8007028:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800702a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->ISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->IFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800702e:	f7fa bfaf 	b.w	8001f90 <_port_irq_epilogue>
 8007032:	bf00      	nop
 8007034:	20000dd0 	.word	0x20000dd0
 8007038:	f3af 8000 	nop.w
 800703c:	f3af 8000 	nop.w

08007040 <thread8.8448>:
 * variable and yields.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread8(void *p) {
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d0b      	ldr	r5, [pc, #44]	; (8007070 <thread8.8448+0x30>)
 8007044:	4604      	mov	r4, r0

  do {
    chThdYield();
 8007046:	f7fa fd23 	bl	8001a90 <chThdYield>
    chThdYield();
 800704a:	f7fa fd21 	bl	8001a90 <chThdYield>
    chThdYield();
 800704e:	f7fa fd1f 	bl	8001a90 <chThdYield>
    chThdYield();
 8007052:	f7fa fd1d 	bl	8001a90 <chThdYield>
    (*(uint32_t *)p) += 4;
 8007056:	6822      	ldr	r2, [r4, #0]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 8007058:	69ab      	ldr	r3, [r5, #24]
 800705a:	1d10      	adds	r0, r2, #4
 800705c:	6020      	str	r0, [r4, #0]
 800705e:	7f59      	ldrb	r1, [r3, #29]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 8007060:	f001 0204 	and.w	r2, r1, #4
 8007064:	b2d3      	uxtb	r3, r2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ed      	beq.n	8007046 <thread8.8448+0x6>
  return 0;
}
 800706a:	2000      	movs	r0, #0
 800706c:	bd38      	pop	{r3, r4, r5, pc}
 800706e:	bf00      	nop
 8007070:	20001eb8 	.word	0x20001eb8
 8007074:	f3af 8000 	nop.w
 8007078:	f3af 8000 	nop.w
 800707c:	f3af 8000 	nop.w

08007080 <thread3.8451>:
 * continuous loop.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static msg_t thread3(void *p) {
 8007080:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007082:	4c07      	ldr	r4, [pc, #28]	; (80070a0 <thread3.8451+0x20>)
 8007084:	e002      	b.n	800708c <thread3.8451+0xc>

  (void)p;
  while (!chThdShouldTerminateX())
    chSemWait(&sem1);
 8007086:	4807      	ldr	r0, [pc, #28]	; (80070a4 <thread3.8451+0x24>)
 8007088:	f7fa ff42 	bl	8001f10 <chSemWait>
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->p_flags & CH_FLAG_TERMINATE) != 0);
 800708c:	69a3      	ldr	r3, [r4, #24]
 800708e:	7f58      	ldrb	r0, [r3, #29]
 */

static msg_t thread3(void *p) {

  (void)p;
  while (!chThdShouldTerminateX())
 8007090:	f000 0104 	and.w	r1, r0, #4
 8007094:	b2ca      	uxtb	r2, r1
 8007096:	2a00      	cmp	r2, #0
 8007098:	d0f5      	beq.n	8007086 <thread3.8451+0x6>
    chSemWait(&sem1);
  return 0;
}
 800709a:	2000      	movs	r0, #0
 800709c:	bd10      	pop	{r4, pc}
 800709e:	bf00      	nop
 80070a0:	20001eb8 	.word	0x20001eb8
 80070a4:	200014f8 	.word	0x200014f8
 80070a8:	f3af 8000 	nop.w
 80070ac:	f3af 8000 	nop.w

080070b0 <bmk13_execute.8460>:
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 80070b0:	f24a 50c0 	movw	r0, #42432	; 0xa5c0
 *
 * <h2>Description</h2>
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {
 80070b4:	b510      	push	{r4, lr}

  test_print("--- System: ");
 80070b6:	f6c0 0000 	movt	r0, #2048	; 0x800
  test_printn(sizeof(ch_system_t));
  test_println(" bytes");
 80070ba:	f24a 54d0 	movw	r4, #42448	; 0xa5d0
 80070be:	f6c0 0400 	movt	r4, #2048	; 0x800
 * The memory size of the various kernel objects is printed.
 */

static void bmk13_execute(void) {

  test_print("--- System: ");
 80070c2:	f7fa fc3d 	bl	8001940 <test_print>
  test_printn(sizeof(ch_system_t));
 80070c6:	f44f 70a8 	mov.w	r0, #336	; 0x150
 80070ca:	f7fa fc49 	bl	8001960 <test_printn>
  test_println(" bytes");
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7fa fc1e 	bl	8001910 <test_println>
  test_print("--- Thread: ");
 80070d4:	f24a 50d8 	movw	r0, #42456	; 0xa5d8
 80070d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80070dc:	f7fa fc30 	bl	8001940 <test_print>
  test_printn(sizeof(thread_t));
 80070e0:	2044      	movs	r0, #68	; 0x44
 80070e2:	f7fa fc3d 	bl	8001960 <test_printn>
  test_println(" bytes");
 80070e6:	4620      	mov	r0, r4
 80070e8:	f7fa fc12 	bl	8001910 <test_println>
  test_print("--- Timer : ");
 80070ec:	f24a 50e8 	movw	r0, #42472	; 0xa5e8
 80070f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80070f4:	f7fa fc24 	bl	8001940 <test_print>
  test_printn(sizeof(virtual_timer_t));
 80070f8:	2014      	movs	r0, #20
 80070fa:	f7fa fc31 	bl	8001960 <test_printn>
  test_println(" bytes");
 80070fe:	4620      	mov	r0, r4
 8007100:	f7fa fc06 	bl	8001910 <test_println>
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
  test_print("--- Semaph: ");
 8007104:	f24a 50f8 	movw	r0, #42488	; 0xa5f8
 8007108:	f6c0 0000 	movt	r0, #2048	; 0x800
 800710c:	f7fa fc18 	bl	8001940 <test_print>
  test_printn(sizeof(semaphore_t));
 8007110:	200c      	movs	r0, #12
 8007112:	f7fa fc25 	bl	8001960 <test_printn>
  test_println(" bytes");
 8007116:	4620      	mov	r0, r4
 8007118:	f7fa fbfa 	bl	8001910 <test_println>
#endif
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
  test_print("--- EventS: ");
 800711c:	f24a 6008 	movw	r0, #42504	; 0xa608
 8007120:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007124:	f7fa fc0c 	bl	8001940 <test_print>
  test_printn(sizeof(event_source_t));
 8007128:	2004      	movs	r0, #4
 800712a:	f7fa fc19 	bl	8001960 <test_printn>
  test_println(" bytes");
 800712e:	4620      	mov	r0, r4
 8007130:	f7fa fbee 	bl	8001910 <test_println>
  test_print("--- EventL: ");
 8007134:	f24a 6018 	movw	r0, #42520	; 0xa618
 8007138:	f6c0 0000 	movt	r0, #2048	; 0x800
 800713c:	f7fa fc00 	bl	8001940 <test_print>
  test_printn(sizeof(event_listener_t));
 8007140:	2014      	movs	r0, #20
 8007142:	f7fa fc0d 	bl	8001960 <test_printn>
  test_println(" bytes");
 8007146:	4620      	mov	r0, r4
 8007148:	f7fa fbe2 	bl	8001910 <test_println>
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
  test_print("--- Mutex : ");
 800714c:	f24a 6028 	movw	r0, #42536	; 0xa628
 8007150:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007154:	f7fa fbf4 	bl	8001940 <test_print>
  test_printn(sizeof(mutex_t));
 8007158:	2010      	movs	r0, #16
 800715a:	f7fa fc01 	bl	8001960 <test_printn>
  test_println(" bytes");
 800715e:	4620      	mov	r0, r4
 8007160:	f7fa fbd6 	bl	8001910 <test_println>
#endif
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
  test_print("--- CondV.: ");
 8007164:	f24a 6038 	movw	r0, #42552	; 0xa638
 8007168:	f6c0 0000 	movt	r0, #2048	; 0x800
 800716c:	f7fa fbe8 	bl	8001940 <test_print>
  test_printn(sizeof(condition_variable_t));
 8007170:	2008      	movs	r0, #8
 8007172:	f7fa fbf5 	bl	8001960 <test_printn>
  test_println(" bytes");
 8007176:	4620      	mov	r0, r4
 8007178:	f7fa fbca 	bl	8001910 <test_println>
#endif
#if CH_CFG_USE_QUEUES || defined(__DOXYGEN__)
  test_print("--- Queue : ");
 800717c:	f24a 6048 	movw	r0, #42568	; 0xa648
 8007180:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007184:	f7fa fbdc 	bl	8001940 <test_print>
  test_printn(sizeof(io_queue_t));
 8007188:	2024      	movs	r0, #36	; 0x24
 800718a:	f7fa fbe9 	bl	8001960 <test_printn>
  test_println(" bytes");
 800718e:	4620      	mov	r0, r4
 8007190:	f7fa fbbe 	bl	8001910 <test_println>
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
 8007194:	f24a 6058 	movw	r0, #42584	; 0xa658
 8007198:	f6c0 0000 	movt	r0, #2048	; 0x800
 800719c:	f7fa fbd0 	bl	8001940 <test_print>
  test_printn(sizeof(mailbox_t));
 80071a0:	2028      	movs	r0, #40	; 0x28
 80071a2:	f7fa fbdd 	bl	8001960 <test_printn>
  test_println(" bytes");
 80071a6:	4620      	mov	r0, r4
#endif
}
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_println(" bytes");
#endif
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
  test_print("--- MailB.: ");
  test_printn(sizeof(mailbox_t));
  test_println(" bytes");
 80071ac:	f7fa bbb0 	b.w	8001910 <test_println>

080071b0 <dyn1_execute.8094>:
static void dyn1_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn1_execute(void) {
 80071b0:	b570      	push	{r4, r5, r6, lr}
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80071b2:	4b34      	ldr	r3, [pc, #208]	; (8007284 <dyn1_execute.8094+0xd4>)
 80071b4:	b084      	sub	sp, #16
 80071b6:	699a      	ldr	r2, [r3, #24]
  size_t n, sz;
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
 80071b8:	a903      	add	r1, sp, #12
 80071ba:	4833      	ldr	r0, [pc, #204]	; (8007288 <dyn1_execute.8094+0xd8>)
 80071bc:	6895      	ldr	r5, [r2, #8]
 80071be:	f7fb f887 	bl	80022d0 <chHeapStatus>
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80071c2:	4832      	ldr	r0, [pc, #200]	; (800728c <dyn1_execute.8094+0xdc>)
 80071c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80071c8:	1e6a      	subs	r2, r5, #1
 80071ca:	4b31      	ldr	r3, [pc, #196]	; (8007290 <dyn1_execute.8094+0xe0>)
 80071cc:	9000      	str	r0, [sp, #0]
 80071ce:	482e      	ldr	r0, [pc, #184]	; (8007288 <dyn1_execute.8094+0xd8>)
 80071d0:	f7fb fc46 	bl	8002a60 <chThdCreateFromHeap>
 80071d4:	4c2f      	ldr	r4, [pc, #188]	; (8007294 <dyn1_execute.8094+0xe4>)
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80071d6:	4e30      	ldr	r6, [pc, #192]	; (8007298 <dyn1_execute.8094+0xe8>)
 80071d8:	1eaa      	subs	r2, r5, #2
 80071da:	4b2d      	ldr	r3, [pc, #180]	; (8007290 <dyn1_execute.8094+0xe0>)
  void *p1;
  tprio_t prio = chThdGetPriorityX();

  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
 80071dc:	6020      	str	r0, [r4, #0]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80071de:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80071e2:	9600      	str	r6, [sp, #0]
 80071e4:	4828      	ldr	r0, [pc, #160]	; (8007288 <dyn1_execute.8094+0xd8>)
 80071e6:	f7fb fc3b 	bl	8002a60 <chThdCreateFromHeap>
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80071ea:	a902      	add	r1, sp, #8
  (void)chHeapStatus(&heap1, &sz);
  /* Starting threads from the heap. */
  threads[0] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-1, thread, "A");
  threads[1] = chThdCreateFromHeap(&heap1,
 80071ec:	6060      	str	r0, [r4, #4]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-2, thread, "B");
  /* Allocating the whole heap in order to make the thread creation fail.*/
  (void)chHeapStatus(&heap1, &n);
 80071ee:	4826      	ldr	r0, [pc, #152]	; (8007288 <dyn1_execute.8094+0xd8>)
 80071f0:	f7fb f86e 	bl	80022d0 <chHeapStatus>
  p1 = chHeapAlloc(&heap1, n);
 80071f4:	9902      	ldr	r1, [sp, #8]
 80071f6:	4824      	ldr	r0, [pc, #144]	; (8007288 <dyn1_execute.8094+0xd8>)
 80071f8:	f7fb fac2 	bl	8002780 <chHeapAlloc>
 80071fc:	4606      	mov	r6, r0
  threads[2] = chThdCreateFromHeap(&heap1,
 80071fe:	4827      	ldr	r0, [pc, #156]	; (800729c <dyn1_execute.8094+0xec>)
 8007200:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007204:	1eea      	subs	r2, r5, #3
 8007206:	4b22      	ldr	r3, [pc, #136]	; (8007290 <dyn1_execute.8094+0xe0>)
 8007208:	9000      	str	r0, [sp, #0]
 800720a:	481f      	ldr	r0, [pc, #124]	; (8007288 <dyn1_execute.8094+0xd8>)
 800720c:	f7fb fc28 	bl	8002a60 <chThdCreateFromHeap>
 8007210:	60a0      	str	r0, [r4, #8]
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);
 8007212:	4630      	mov	r0, r6
 8007214:	f7fb f87c 	bl	8002310 <chHeapFree>

  test_assert(1, (threads[0] != NULL) &&
 8007218:	6821      	ldr	r1, [r4, #0]
 800721a:	b129      	cbz	r1, 8007228 <dyn1_execute.8094+0x78>
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	b119      	cbz	r1, 8007228 <dyn1_execute.8094+0x78>
 8007220:	68a1      	ldr	r1, [r4, #8]
 8007222:	2900      	cmp	r1, #0
 8007224:	d025      	beq.n	8007272 <dyn1_execute.8094+0xc2>
 8007226:	2100      	movs	r1, #0
 8007228:	2001      	movs	r0, #1
 800722a:	f7fa fb29 	bl	8001880 <_test_assert>
 800722e:	b108      	cbz	r0, 8007234 <dyn1_execute.8094+0x84>
  test_assert_sequence(2, "AB");

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
  test_assert(4, n == sz, "heap size changed");
}
 8007230:	b004      	add	sp, #16
 8007232:	bd70      	pop	{r4, r5, r6, pc}
                 (threads[3] == NULL) &&
                 (threads[4] == NULL),
                 "thread creation failed");

  /* Claiming the memory from terminated threads. */
  test_wait_threads();
 8007234:	f7fb f904 	bl	8002440 <test_wait_threads>
  test_assert_sequence(2, "AB");
 8007238:	2002      	movs	r0, #2
 800723a:	4919      	ldr	r1, [pc, #100]	; (80072a0 <dyn1_execute.8094+0xf0>)
 800723c:	f7fa fad8 	bl	80017f0 <_test_assert_sequence>
 8007240:	2800      	cmp	r0, #0
 8007242:	d1f5      	bne.n	8007230 <dyn1_execute.8094+0x80>

  /* Heap status checked again.*/
  test_assert(3, chHeapStatus(&heap1, &n) == 1, "heap fragmented");
 8007244:	a902      	add	r1, sp, #8
 8007246:	4810      	ldr	r0, [pc, #64]	; (8007288 <dyn1_execute.8094+0xd8>)
 8007248:	f7fb f842 	bl	80022d0 <chHeapStatus>
 800724c:	1e42      	subs	r2, r0, #1
 800724e:	4250      	negs	r0, r2
 8007250:	eb50 0102 	adcs.w	r1, r0, r2
 8007254:	2003      	movs	r0, #3
 8007256:	f7fa fb13 	bl	8001880 <_test_assert>
 800725a:	2800      	cmp	r0, #0
 800725c:	d1e8      	bne.n	8007230 <dyn1_execute.8094+0x80>
  test_assert(4, n == sz, "heap size changed");
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	9902      	ldr	r1, [sp, #8]
 8007262:	2004      	movs	r0, #4
 8007264:	1aca      	subs	r2, r1, r3
 8007266:	4253      	negs	r3, r2
 8007268:	eb53 0102 	adcs.w	r1, r3, r2
 800726c:	f7fa fb08 	bl	8001880 <_test_assert>
 8007270:	e7de      	b.n	8007230 <dyn1_execute.8094+0x80>
  threads[2] = chThdCreateFromHeap(&heap1,
                                   THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE),
                                   prio-3, thread, "C");
  chHeapFree(p1);

  test_assert(1, (threads[0] != NULL) &&
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1d7      	bne.n	8007228 <dyn1_execute.8094+0x78>
 8007278:	6921      	ldr	r1, [r4, #16]
 800727a:	f1d1 0101 	rsbs	r1, r1, #1
 800727e:	bf38      	it	cc
 8007280:	2100      	movcc	r1, #0
 8007282:	e7d1      	b.n	8007228 <dyn1_execute.8094+0x78>
 8007284:	20001eb8 	.word	0x20001eb8
 8007288:	20001498 	.word	0x20001498
 800728c:	0800a1e0 	.word	0x0800a1e0
 8007290:	08006df1 	.word	0x08006df1
 8007294:	20002008 	.word	0x20002008
 8007298:	0800a1dc 	.word	0x0800a1dc
 800729c:	0800a1d8 	.word	0x0800a1d8
 80072a0:	0800a668 	.word	0x0800a668
 80072a4:	f3af 8000 	nop.w
 80072a8:	f3af 8000 	nop.w
 80072ac:	f3af 8000 	nop.w

080072b0 <chCondSignalI.constprop.48>:
 *
 * @notapi
 */
static inline bool queue_notempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (thread_t *)tqp);
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <chCondSignalI.constprop.48+0x18>)
 80072b2:	6818      	ldr	r0, [r3, #0]
void chCondSignalI(condition_variable_t *cp) {

  chDbgCheckClassI();
  chDbgCheck(cp != NULL);

  if (queue_notempty(&cp->c_queue)) {
 80072b4:	4298      	cmp	r0, r3
 80072b6:	d006      	beq.n	80072c6 <chCondSignalI.constprop.48+0x16>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  (tqp->p_next = tp->p_next)->p_prev = (thread_t *)tqp;
 80072b8:	6802      	ldr	r2, [r0, #0]
    thread_t *tp = queue_fifo_remove(&cp->c_queue);
    tp->p_u.rdymsg = MSG_OK;
 80072ba:	2100      	movs	r1, #0
 80072bc:	6053      	str	r3, [r2, #4]
 80072be:	6201      	str	r1, [r0, #32]
 80072c0:	601a      	str	r2, [r3, #0]
    chSchReadyI(tp);
 80072c2:	f7fa be95 	b.w	8001ff0 <chSchReadyI>
 80072c6:	4770      	bx	lr
 80072c8:	20000818 	.word	0x20000818
 80072cc:	f3af 8000 	nop.w

080072d0 <chEvtGetAndClearEvents.constprop.42>:
 80072d0:	2320      	movs	r3, #32
 80072d2:	f383 8811 	msr	BASEPRI, r3
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 80072d6:	f641 60b8 	movw	r0, #7864	; 0x1eb8
 80072da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80072de:	6982      	ldr	r2, [r0, #24]
  currp->p_epending &= ~events;
 80072e0:	2100      	movs	r1, #0
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
  eventmask_t m;

  chSysLock();

  m = currp->p_epending & events;
 80072e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  currp->p_epending &= ~events;
 80072e4:	6351      	str	r1, [r2, #52]	; 0x34
 80072e6:	f381 8811 	msr	BASEPRI, r1

  chSysUnlock();
  return m;
}
 80072ea:	4770      	bx	lr
 80072ec:	f3af 8000 	nop.w

080072f0 <evt1_setup.7710>:
 * the associated event handlers are invoked in LSb-first order.
 */

static void evt1_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 80072f0:	f7ff bfee 	b.w	80072d0 <chEvtGetAndClearEvents.constprop.42>
 80072f4:	f3af 8000 	nop.w
 80072f8:	f3af 8000 	nop.w
 80072fc:	f3af 8000 	nop.w

08007300 <evt2_setup.7708>:
 * the expected time and that there are no stuck event flags.
 */

static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8007300:	f7ff bfe6 	b.w	80072d0 <chEvtGetAndClearEvents.constprop.42>
 8007304:	f3af 8000 	nop.w
 8007308:	f3af 8000 	nop.w
 800730c:	f3af 8000 	nop.w

08007310 <evt3_setup.7706>:
 * After each test phase the test verifies that there are no stuck event flags.
 */

static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
 8007310:	f7ff bfde 	b.w	80072d0 <chEvtGetAndClearEvents.constprop.42>
 8007314:	f3af 8000 	nop.w
 8007318:	f3af 8000 	nop.w
 800731c:	f3af 8000 	nop.w

08007320 <chEvtWaitOne.constprop.38>:
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
  thread_t *ctp = currp;
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <chEvtWaitOne.constprop.38+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the lowest event id served and cleared.
 *
 * @api
 */
eventmask_t chEvtWaitOne(eventmask_t events) {
 8007322:	b510      	push	{r4, lr}
 8007324:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 8007326:	699c      	ldr	r4, [r3, #24]
 8007328:	f380 8811 	msr	BASEPRI, r0
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 800732c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800732e:	b932      	cbnz	r2, 800733e <chEvtWaitOne.constprop.38+0x1e>
    ctp->p_u.ewmask = events;
 8007330:	f04f 31ff 	mov.w	r1, #4294967295
 8007334:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007336:	200a      	movs	r0, #10
 8007338:	f7fa fdb2 	bl	8001ea0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800733c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  m ^= m & (m - 1);
 800733e:	4250      	negs	r0, r2
 8007340:	4010      	ands	r0, r2
  ctp->p_epending &= ~m;
 8007342:	ea22 0200 	bic.w	r2, r2, r0
 8007346:	6362      	str	r2, [r4, #52]	; 0x34
 8007348:	2300      	movs	r3, #0
 800734a:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 800734e:	bd10      	pop	{r4, pc}
 8007350:	20001eb8 	.word	0x20001eb8
 8007354:	f3af 8000 	nop.w
 8007358:	f3af 8000 	nop.w
 800735c:	f3af 8000 	nop.w

08007360 <chEvtWaitAny.constprop.37>:
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
  thread_t *ctp = currp;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <chEvtWaitAny.constprop.37+0x30>)
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 8007362:	b510      	push	{r4, lr}
 8007364:	2020      	movs	r0, #32
  thread_t *ctp = currp;
 8007366:	699c      	ldr	r4, [r3, #24]
 8007368:	f380 8811 	msr	BASEPRI, r0
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 800736c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800736e:	b930      	cbnz	r0, 800737e <chEvtWaitAny.constprop.37+0x1e>
    ctp->p_u.ewmask = events;
 8007370:	f04f 31ff 	mov.w	r1, #4294967295
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007374:	200a      	movs	r0, #10
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
    ctp->p_u.ewmask = events;
 8007376:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTOREVT);
 8007378:	f7fa fd92 	bl	8001ea0 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800737c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 800737e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007380:	2300      	movs	r3, #0
 8007382:	ea22 0200 	bic.w	r2, r2, r0
 8007386:	6362      	str	r2, [r4, #52]	; 0x34
 8007388:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
  return m;
}
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	20001eb8 	.word	0x20001eb8
	...

080073a0 <chMBPostI.constprop.29>:
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <chMBPostI.constprop.29+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 80073a2:	b510      	push	{r4, lr}
 80073a4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 80073a6:	2900      	cmp	r1, #0
 80073a8:	dd10      	ble.n	80073cc <chMBPostI.constprop.29+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80073aa:	689a      	ldr	r2, [r3, #8]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 80073ac:	3901      	subs	r1, #1
  if (mbp->mb_wrptr >= mbp->mb_top)
 80073ae:	685c      	ldr	r4, [r3, #4]
 80073b0:	6259      	str	r1, [r3, #36]	; 0x24
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80073b2:	f842 0b04 	str.w	r0, [r2], #4
  if (mbp->mb_wrptr >= mbp->mb_top)
 80073b6:	42a2      	cmp	r2, r4
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
 80073b8:	609a      	str	r2, [r3, #8]
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 80073ba:	bf28      	it	cs
 80073bc:	681a      	ldrcs	r2, [r3, #0]
  chSemSignalI(&mbp->mb_fullsem);
 80073be:	4806      	ldr	r0, [pc, #24]	; (80073d8 <chMBPostI.constprop.29+0x38>)
  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
 80073c0:	bf28      	it	cs
 80073c2:	609a      	strcs	r2, [r3, #8]
  chSemSignalI(&mbp->mb_fullsem);
 80073c4:	f7fb fb6c 	bl	8002aa0 <chSemSignalI>
  return MSG_OK;
 80073c8:	2000      	movs	r0, #0
 80073ca:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
  *mbp->mb_wrptr++ = msg;
  if (mbp->mb_wrptr >= mbp->mb_top)
    mbp->mb_wrptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop
 80073d4:	20000ce0 	.word	0x20000ce0
 80073d8:	20000cf0 	.word	0x20000cf0
 80073dc:	f3af 8000 	nop.w

080073e0 <chMBPostAheadI.constprop.27>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 80073e0:	4b0c      	ldr	r3, [pc, #48]	; (8007414 <chMBPostAheadI.constprop.27+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 *                      posted.
 *
 * @iclass
 */
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 80073e2:	b510      	push	{r4, lr}
 80073e4:	6a59      	ldr	r1, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
 80073e6:	2900      	cmp	r1, #0
 80073e8:	dd10      	ble.n	800740c <chMBPostAheadI.constprop.27+0x2c>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_emptysem);
  if (--mbp->mb_rdptr < mbp->mb_buffer)
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	681c      	ldr	r4, [r3, #0]
 80073ee:	3a04      	subs	r2, #4
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 80073f0:	3901      	subs	r1, #1
 80073f2:	42a2      	cmp	r2, r4
 80073f4:	6259      	str	r1, [r3, #36]	; 0x24
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	d202      	bcs.n	8007400 <chMBPostAheadI.constprop.27+0x20>
    mbp->mb_rdptr = mbp->mb_top - 1;
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	3a04      	subs	r2, #4
 80073fe:	60da      	str	r2, [r3, #12]
  *mbp->mb_rdptr = msg;
 8007400:	6010      	str	r0, [r2, #0]
  chSemSignalI(&mbp->mb_fullsem);
 8007402:	4805      	ldr	r0, [pc, #20]	; (8007418 <chMBPostAheadI.constprop.27+0x38>)
 8007404:	f7fb fb4c 	bl	8002aa0 <chSemSignalI>
  return MSG_OK;
 8007408:	2000      	movs	r0, #0
 800740a:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  if (chSemGetCounterI(&mbp->mb_emptysem) <= 0)
    return MSG_TIMEOUT;
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
  if (--mbp->mb_rdptr < mbp->mb_buffer)
    mbp->mb_rdptr = mbp->mb_top - 1;
  *mbp->mb_rdptr = msg;
  chSemSignalI(&mbp->mb_fullsem);
  return MSG_OK;
}
 8007410:	bd10      	pop	{r4, pc}
 8007412:	bf00      	nop
 8007414:	20000ce0 	.word	0x20000ce0
 8007418:	20000cf0 	.word	0x20000cf0
 800741c:	f3af 8000 	nop.w

08007420 <chMBFetchI.constprop.25>:
 */
static inline cnt_t chSemGetCounterI(semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->s_cnt;
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <chMBFetchI.constprop.25+0x34>)
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 8007422:	b510      	push	{r4, lr}
 8007424:	6999      	ldr	r1, [r3, #24]

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
 8007426:	2900      	cmp	r1, #0
 8007428:	dd11      	ble.n	800744e <chMBFetchI.constprop.25+0x2e>
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800742a:	68da      	ldr	r2, [r3, #12]
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt--;
 800742c:	1e4c      	subs	r4, r1, #1
 800742e:	619c      	str	r4, [r3, #24]
 8007430:	f852 4b04 	ldr.w	r4, [r2], #4
  if (mbp->mb_rdptr >= mbp->mb_top)
 8007434:	6859      	ldr	r1, [r3, #4]
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 8007436:	6004      	str	r4, [r0, #0]
  if (mbp->mb_rdptr >= mbp->mb_top)
 8007438:	428a      	cmp	r2, r1
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
 800743a:	60da      	str	r2, [r3, #12]
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 800743c:	bf28      	it	cs
 800743e:	681a      	ldrcs	r2, [r3, #0]
  chSemSignalI(&mbp->mb_emptysem);
 8007440:	4805      	ldr	r0, [pc, #20]	; (8007458 <chMBFetchI.constprop.25+0x38>)
  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
  chSemFastWaitI(&mbp->mb_fullsem);
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
 8007442:	bf28      	it	cs
 8007444:	60da      	strcs	r2, [r3, #12]
  chSemSignalI(&mbp->mb_emptysem);
 8007446:	f7fb fb2b 	bl	8002aa0 <chSemSignalI>
  return MSG_OK;
 800744a:	2000      	movs	r0, #0
 800744c:	bd10      	pop	{r4, pc}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  if (chSemGetCounterI(&mbp->mb_fullsem) <= 0)
    return MSG_TIMEOUT;
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
  *msgp = *mbp->mb_rdptr++;
  if (mbp->mb_rdptr >= mbp->mb_top)
    mbp->mb_rdptr = mbp->mb_buffer;
  chSemSignalI(&mbp->mb_emptysem);
  return MSG_OK;
}
 8007452:	bd10      	pop	{r4, pc}
 8007454:	20000ce0 	.word	0x20000ce0
 8007458:	20000cfc 	.word	0x20000cfc
 800745c:	00000000 	.word	0x00000000

08007460 <dmaStreamAllocate.constprop.11>:
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8007460:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 8007462:	7a43      	ldrb	r3, [r0, #9]
 8007464:	2701      	movs	r7, #1
 8007466:	fa07 f503 	lsl.w	r5, r7, r3
 800746a:	4c21      	ldr	r4, [pc, #132]	; (80074f0 <dmaStreamAllocate.constprop.11+0x90>)
 800746c:	6826      	ldr	r6, [r4, #0]
 800746e:	4235      	tst	r5, r6
 8007470:	d13a      	bne.n	80074e8 <dmaStreamAllocate.constprop.11+0x88>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8007472:	4f20      	ldr	r7, [pc, #128]	; (80074f4 <dmaStreamAllocate.constprop.11+0x94>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 8007474:	4335      	orrs	r5, r6
 8007476:	6025      	str	r5, [r4, #0]
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8007478:	eb07 06c3 	add.w	r6, r7, r3, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800747c:	066c      	lsls	r4, r5, #25
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800747e:	f847 1033 	str.w	r1, [r7, r3, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 8007482:	6072      	str	r2, [r6, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 8007484:	d007      	beq.n	8007496 <dmaStreamAllocate.constprop.11+0x36>
    rccEnableDMA1(FALSE);
 8007486:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800748a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800748e:	6962      	ldr	r2, [r4, #20]
 8007490:	f042 0501 	orr.w	r5, r2, #1
 8007494:	6165      	str	r5, [r4, #20]
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8007496:	6803      	ldr	r3, [r0, #0]
 8007498:	6842      	ldr	r2, [r0, #4]
 800749a:	681f      	ldr	r7, [r3, #0]
 800749c:	250f      	movs	r5, #15
 800749e:	f027 040f 	bic.w	r4, r7, #15
 80074a2:	601c      	str	r4, [r3, #0]
 80074a4:	7a04      	ldrb	r4, [r0, #8]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80074a6:	2700      	movs	r7, #0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80074a8:	fa05 f404 	lsl.w	r4, r5, r4
 80074ac:	6014      	str	r4, [r2, #0]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80074ae:	601f      	str	r7, [r3, #0]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80074b0:	b1e1      	cbz	r1, 80074ec <dmaStreamAllocate.constprop.11+0x8c>
    nvicEnableVector(dmastp->vector, priority);
 80074b2:	7a80      	ldrb	r0, [r0, #10]
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80074b4:	2401      	movs	r4, #1
 80074b6:	f000 011f 	and.w	r1, r0, #31
 80074ba:	fa04 f401 	lsl.w	r4, r4, r1
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80074be:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80074c2:	0941      	lsrs	r1, r0, #5
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80074c4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80074c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80074cc:	f505 4261 	add.w	r2, r5, #57600	; 0xe100
 80074d0:	20a0      	movs	r0, #160	; 0xa0
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80074d2:	f101 0560 	add.w	r5, r1, #96	; 0x60
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 80074d6:	f882 0300 	strb.w	r0, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 80074da:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 80074de:	4638      	mov	r0, r7
 80074e0:	f843 4021 	str.w	r4, [r3, r1, lsl #2]

  return FALSE;
}
 80074e4:	bcf0      	pop	{r4, r5, r6, r7}
 80074e6:	4770      	bx	lr

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 80074e8:	4638      	mov	r0, r7
 80074ea:	e7fb      	b.n	80074e4 <dmaStreamAllocate.constprop.11+0x84>
  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 80074ec:	4608      	mov	r0, r1
 80074ee:	e7f9      	b.n	80074e4 <dmaStreamAllocate.constprop.11+0x84>
 80074f0:	2000143c 	.word	0x2000143c
 80074f4:	20000dd0 	.word	0x20000dd0
 80074f8:	f3af 8000 	nop.w
 80074fc:	f3af 8000 	nop.w

08007500 <_strtok.10608.constprop.4>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8007500:	b538      	push	{r3, r4, r5, lr}
  char *token;
  if (str)
 8007502:	4604      	mov	r4, r0
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8007504:	460d      	mov	r5, r1
  char *token;
  if (str)
 8007506:	b198      	cbz	r0, 8007530 <_strtok.10608.constprop.4+0x30>
    *saveptr = str;
 8007508:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800750a:	490c      	ldr	r1, [pc, #48]	; (800753c <_strtok.10608.constprop.4+0x3c>)
 800750c:	4620      	mov	r0, r4
 800750e:	f002 fddf 	bl	800a0d0 <strspn>
 8007512:	1824      	adds	r4, r4, r0
  *saveptr = strpbrk(token, delim);
 8007514:	4620      	mov	r0, r4
 8007516:	4909      	ldr	r1, [pc, #36]	; (800753c <_strtok.10608.constprop.4+0x3c>)
 8007518:	f002 fdb2 	bl	800a080 <strpbrk>
 800751c:	6028      	str	r0, [r5, #0]
  if (*saveptr)
 800751e:	b118      	cbz	r0, 8007528 <_strtok.10608.constprop.4+0x28>
    *(*saveptr)++ = '\0';
 8007520:	2300      	movs	r3, #0
 8007522:	f800 3b01 	strb.w	r3, [r0], #1
 8007526:	6028      	str	r0, [r5, #0]

  return *token ? token : NULL;
 8007528:	7820      	ldrb	r0, [r4, #0]
 800752a:	b120      	cbz	r0, 8007536 <_strtok.10608.constprop.4+0x36>
}
 800752c:	4620      	mov	r0, r4
 800752e:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 8007530:	680c      	ldr	r4, [r1, #0]

  if (!token)
 8007532:	2c00      	cmp	r4, #0
 8007534:	d1e9      	bne.n	800750a <_strtok.10608.constprop.4+0xa>
    return NULL;
 8007536:	2400      	movs	r4, #0
  *saveptr = strpbrk(token, delim);
  if (*saveptr)
    *(*saveptr)++ = '\0';

  return *token ? token : NULL;
}
 8007538:	4620      	mov	r0, r4
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	0800a66c 	.word	0x0800a66c

08007540 <long_to_string_with_divisor.10737>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8007540:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8007542:	2b00      	cmp	r3, #0
 8007544:	bf08      	it	eq
 8007546:	460b      	moveq	r3, r1
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8007548:	4607      	mov	r7, r0
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800754a:	f100 0c0b 	add.w	ip, r0, #11
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 800754e:	f100 050a 	add.w	r5, r0, #10
    ll = divisor;
  }

  q = p + MAX_FILLER;
  do {
    i = (int)(l % radix);
 8007552:	fbb1 f6f2 	udiv	r6, r1, r2
 8007556:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 800755a:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 800755e:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8007560:	bfc8      	it	gt
 8007562:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8007566:	b2e4      	uxtb	r4, r4
    l /= radix;
  } while ((ll /= radix) != 0);
 8007568:	fbb3 f3f2 	udiv	r3, r3, r2
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 800756c:	4628      	mov	r0, r5
    l /= radix;
 800756e:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8007570:	f805 4901 	strb.w	r4, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1ec      	bne.n	8007552 <long_to_string_with_divisor.10737+0x12>

  i = (int)(p + MAX_FILLER - q);
 8007578:	ebc0 030c 	rsb	r3, r0, ip
 800757c:	43f9      	mvns	r1, r7
 800757e:	4602      	mov	r2, r0
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8007580:	18f8      	adds	r0, r7, r3
 8007582:	1843      	adds	r3, r0, r1
 8007584:	07db      	lsls	r3, r3, #31
 8007586:	d50a      	bpl.n	800759e <long_to_string_with_divisor.10737+0x5e>
    l /= radix;
  } while ((ll /= radix) != 0);

  i = (int)(p + MAX_FILLER - q);
  do
    *p++ = *q++;
 8007588:	f807 4b01 	strb.w	r4, [r7], #1
 800758c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8007590:	e005      	b.n	800759e <long_to_string_with_divisor.10737+0x5e>
 8007592:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8007596:	707c      	strb	r4, [r7, #1]
 8007598:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800759c:	1c5f      	adds	r7, r3, #1
 800759e:	463b      	mov	r3, r7
 80075a0:	f803 4b01 	strb.w	r4, [r3], #1
  while (--i);
 80075a4:	4283      	cmp	r3, r0
 80075a6:	d1f4      	bne.n	8007592 <long_to_string_with_divisor.10737+0x52>

  return p;
}
 80075a8:	bcf0      	pop	{r4, r5, r6, r7}
 80075aa:	4770      	bx	lr
 80075ac:	f3af 8000 	nop.w

080075b0 <usbStartTransmitI>:
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 80075b0:	8902      	ldrh	r2, [r0, #8]
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartTransmitI(USBDriver *usbp, usbep_t ep) {
 80075b2:	b470      	push	{r4, r5, r6}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
 80075b4:	fa42 f301 	asr.w	r3, r2, r1
 80075b8:	f013 0301 	ands.w	r3, r3, #1
 80075bc:	d002      	beq.n	80075c4 <usbStartTransmitI+0x14>
    return TRUE;
 80075be:	2001      	movs	r0, #1

  usbp->transmitting |= (1 << ep);
  usb_lld_start_in(usbp, ep);
  return FALSE;
}
 80075c0:	bc70      	pop	{r4, r5, r6}
 80075c2:	4770      	bx	lr
  osalDbgCheck(usbp != NULL);

  if (usbGetTransmitStatusI(usbp, ep))
    return TRUE;

  usbp->transmitting |= (1 << ep);
 80075c4:	2601      	movs	r6, #1
 80075c6:	fa06 f601 	lsl.w	r6, r6, r1
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80075ca:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 80075ce:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80075d2:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 80075d6:	4332      	orrs	r2, r6
 80075d8:	f425 45f0 	bic.w	r5, r5, #30720	; 0x7800
 80075dc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80075e0:	f085 0530 	eor.w	r5, r5, #48	; 0x30
 80075e4:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
  return FALSE;
 80075e6:	4618      	mov	r0, r3
 80075e8:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
 80075ec:	e7e8      	b.n	80075c0 <usbStartTransmitI+0x10>
 80075ee:	bf00      	nop

080075f0 <usbStartReceiveI>:
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 80075f0:	8942      	ldrh	r2, [r0, #10]
 * @retval FALSE        Operation started successfully.
 * @retval TRUE         Endpoint busy, operation not started.
 *
 * @iclass
 */
bool usbStartReceiveI(USBDriver *usbp, usbep_t ep) {
 80075f2:	b470      	push	{r4, r5, r6}

  osalDbgCheckClassI();
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
 80075f4:	fa42 f301 	asr.w	r3, r2, r1
 80075f8:	f013 0301 	ands.w	r3, r3, #1
 80075fc:	d002      	beq.n	8007604 <usbStartReceiveI+0x14>
    return TRUE;
 80075fe:	2001      	movs	r0, #1

  usbp->receiving |= (1 << ep);
  usb_lld_start_out(usbp, ep);
  return FALSE;
}
 8007600:	bc70      	pop	{r4, r5, r6}
 8007602:	4770      	bx	lr
  osalDbgCheck(usbp != NULL);

  if (usbGetReceiveStatusI(usbp, ep))
    return TRUE;

  usbp->receiving |= (1 << ep);
 8007604:	2601      	movs	r6, #1
 8007606:	fa06 f601 	lsl.w	r6, r6, r1
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800760a:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 800760e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8007612:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 8007616:	4332      	orrs	r2, r6
 8007618:	f425 4590 	bic.w	r5, r5, #18432	; 0x4800
 800761c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8007620:	f485 5540 	eor.w	r5, r5, #12288	; 0x3000
 8007624:	8142      	strh	r2, [r0, #10]
  usb_lld_start_out(usbp, ep);
  return FALSE;
 8007626:	4618      	mov	r0, r3
 8007628:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
 800762c:	e7e8      	b.n	8007600 <usbStartReceiveI+0x10>
 800762e:	bf00      	nop

08007630 <usb_lld_prepare_receive>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8007630:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007634:	68c8      	ldr	r0, [r1, #12]
 8007636:	6983      	ldr	r3, [r0, #24]

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	b132      	cbz	r2, 800764a <usb_lld_prepare_receive+0x1a>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800763c:	8a41      	ldrh	r1, [r0, #18]
 800763e:	1e50      	subs	r0, r2, #1
 8007640:	1842      	adds	r2, r0, r1
 8007642:	fbb2 f1f1 	udiv	r1, r2, r1
 8007646:	8219      	strh	r1, [r3, #16]
 8007648:	4770      	bx	lr
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
    osp->rxpkts = 1;
 800764a:	2001      	movs	r0, #1
 800764c:	8218      	strh	r0, [r3, #16]
 800764e:	4770      	bx	lr

08007650 <inotify.8835>:
/**
 * @brief   Notification of data removed from the input queue.
 *
 * @param[in] qp        the queue pointer.
 */
static void inotify(io_queue_t *qp) {
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = qGetLink(qp);
 8007652:	6a04      	ldr	r4, [r0, #32]

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007654:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
 8007658:	6813      	ldr	r3, [r2, #0]
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	2904      	cmp	r1, #4
 800765e:	d000      	beq.n	8007662 <inotify.8835+0x12>
 8007660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007662:	7a20      	ldrb	r0, [r4, #8]
 8007664:	2802      	cmp	r0, #2
 8007666:	d1fb      	bne.n	8007660 <inotify.8835+0x10>
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8007668:	7952      	ldrb	r2, [r2, #5]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 800766a:	8959      	ldrh	r1, [r3, #10]
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 800766c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8007670:	fa41 f002 	asr.w	r0, r1, r2
    return;

  /* If there is in the queue enough space to hold at least one packet and
     a transaction is not yet started then a new transaction is started for
     the available space.*/
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	8a53      	ldrh	r3, [r2, #18]
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
 8007678:	f010 0201 	ands.w	r2, r0, #1
 800767c:	d1f0      	bne.n	8007660 <inotify.8835+0x10>
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 800767e:	f104 0514 	add.w	r5, r4, #20
 8007682:	cd23      	ldmia	r5, {r0, r1, r5}
 8007684:	1a69      	subs	r1, r5, r1
 8007686:	1a08      	subs	r0, r1, r0
 8007688:	4283      	cmp	r3, r0
 800768a:	d8e9      	bhi.n	8007660 <inotify.8835+0x10>
 800768c:	f382 8811 	msr	BASEPRI, r2
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
    usbPrepareQueuedReceive(sdup->config->usbp,
 8007690:	f8d4 7254 	ldr.w	r7, [r4, #596]	; 0x254
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 8007694:	fbb0 f6f3 	udiv	r6, r0, r3
    usbPrepareQueuedReceive(sdup->config->usbp,
 8007698:	7979      	ldrb	r1, [r7, #5]
 800769a:	6838      	ldr	r0, [r7, #0]
  maxsize = sdup->config->usbp->epc[sdup->config->bulk_out]->out_maxsize;
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out) &&
      ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize)) {
    osalSysUnlock();

    n = (n / maxsize) * maxsize;
 800769c:	fb03 f306 	mul.w	r3, r3, r6
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80076a0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80076a4:	68ef      	ldr	r7, [r5, #12]
    usbPrepareQueuedReceive(sdup->config->usbp,
 80076a6:	f104 060c 	add.w	r6, r4, #12
 80076aa:	69bd      	ldr	r5, [r7, #24]

  osp->rxqueued           = TRUE;
 80076ac:	2701      	movs	r7, #1
  osp->mode.queue.rxqueue = iqp;
  osp->rxsize             = n;
  osp->rxcnt              = 0;
 80076ae:	60aa      	str	r2, [r5, #8]
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  osp->rxqueued           = TRUE;
 80076b0:	702f      	strb	r7, [r5, #0]
  osp->mode.queue.rxqueue = iqp;
 80076b2:	60ee      	str	r6, [r5, #12]
  osp->rxsize             = n;
 80076b4:	606b      	str	r3, [r5, #4]
  osp->rxcnt              = 0;

  usb_lld_prepare_receive(usbp, ep);
 80076b6:	f7ff ffbb 	bl	8007630 <usb_lld_prepare_receive>
 80076ba:	2220      	movs	r2, #32
 80076bc:	f382 8811 	msr	BASEPRI, r2
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 80076c0:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
 80076c4:	6808      	ldr	r0, [r1, #0]
 80076c6:	7949      	ldrb	r1, [r1, #5]
  }
}
 80076c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    usbPrepareQueuedReceive(sdup->config->usbp,
                            sdup->config->bulk_out,
                            &sdup->iqueue, n);

    osalSysLock();
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out);
 80076cc:	f7ff bf90 	b.w	80075f0 <usbStartReceiveI>

080076d0 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 80076d0:	2200      	movs	r2, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 80076d2:	b470      	push	{r4, r5, r6}
 80076d4:	4603      	mov	r3, r0
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
 80076d6:	6844      	ldr	r4, [r0, #4]
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
  usbp->address       = 0;
 80076d8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  usbp->configuration = 0;
 80076dc:	f880 207f 	strb.w	r2, [r0, #127]	; 0x7f
 80076e0:	68e5      	ldr	r5, [r4, #12]
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 80076e2:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 80076e6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 80076ea:	2602      	movs	r6, #2
  usbp->status        = 0;
 80076ec:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
  usbp->address       = 0;
  usbp->configuration = 0;
  usbp->transmitting  = 0;
 80076f0:	8102      	strh	r2, [r0, #8]
  usbp->receiving     = 0;
 80076f2:	8142      	strh	r2, [r0, #10]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= USB_MAX_ENDPOINTS; i++)
    usbp->epc[i] = NULL;
 80076f4:	6102      	str	r2, [r0, #16]
 80076f6:	6142      	str	r2, [r0, #20]
 80076f8:	6182      	str	r2, [r0, #24]
 80076fa:	61c2      	str	r2, [r0, #28]
 80076fc:	6202      	str	r2, [r0, #32]
 80076fe:	6242      	str	r2, [r0, #36]	; 0x24
 8007700:	6282      	str	r2, [r0, #40]	; 0x28

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8007702:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
 8007706:	7006      	strb	r6, [r0, #0]
  STM32_USB->ISTR   = 0;
  STM32_USB->DADDR  = DADDR_EF;
  cntr              = /*CNTR_ESOFM | */ CNTR_RESETM  | CNTR_SUSPM |
 8007708:	4295      	cmp	r5, r2
 800770a:	bf14      	ite	ne
 800770c:	f44f 451e 	movne.w	r5, #40448	; 0x9e00
 8007710:	f44f 451c 	moveq.w	r5, #39936	; 0x9c00
 */
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
 8007714:	6522      	str	r2, [r4, #80]	; 0x50
  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
  usb_lld_init_endpoint(usbp, 0);
 8007716:	4611      	mov	r1, r2
void usb_lld_reset(USBDriver *usbp) {
  uint32_t cntr;

  /* Post reset initialization.*/
  STM32_USB->BTABLE = 0;
  STM32_USB->ISTR   = 0;
 8007718:	6462      	str	r2, [r4, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 800771a:	2280      	movs	r2, #128	; 0x80
 800771c:	64e2      	str	r2, [r4, #76]	; 0x4c
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 800771e:	2240      	movs	r2, #64	; 0x40
                      CNTR_WKUPM | /*CNTR_ERRM | CNTR_PMAOVRM |*/ CNTR_CTRM;
  /* The SOF interrupt is only enabled if a callback is defined for
     this service because it is an high rate source.*/
  if (usbp->config->sof_cb != NULL)
    cntr |= CNTR_SOFM;
  STM32_USB->CNTR = cntr;
 8007720:	6425      	str	r5, [r4, #64]	; 0x40
 */
static void usb_pm_reset(USBDriver *usbp) {

  /* The first 64 bytes are reserved for the descriptors table. The effective
     available RAM for endpoint buffers is just 448 bytes.*/
  usbp->pmnext = 64;
 8007722:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

  /* Resets the packet memory allocator.*/
  usb_pm_reset(usbp);

  /* EP0 initialization.*/
  usbp->epc[0] = &ep0config;
 8007726:	4a02      	ldr	r2, [pc, #8]	; (8007730 <_usb_reset+0x60>)
 8007728:	60c2      	str	r2, [r0, #12]
  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;

  /* Low level reset.*/
  usb_lld_reset(usbp);
}
 800772a:	bc70      	pop	{r4, r5, r6}
  usb_lld_init_endpoint(usbp, 0);
 800772c:	f7ff ba10 	b.w	8006b50 <usb_lld_init_endpoint.4444>
 8007730:	0800a510 	.word	0x0800a510
 8007734:	f3af 8000 	nop.w
 8007738:	f3af 8000 	nop.w
 800773c:	f3af 8000 	nop.w

08007740 <usbInitEndpointI>:
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 8007740:	6953      	ldr	r3, [r2, #20]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 8007742:	b570      	push	{r4, r5, r6, lr}
 8007744:	4614      	mov	r4, r2
 8007746:	4606      	mov	r6, r0
 8007748:	460d      	mov	r5, r1
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  if (epcp->in_state != NULL)
 800774a:	b123      	cbz	r3, 8007756 <usbInitEndpointI+0x16>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 800774c:	4618      	mov	r0, r3
 800774e:	2100      	movs	r1, #0
 8007750:	2210      	movs	r2, #16
 8007752:	f002 fb1d 	bl	8009d90 <memset>
  if (epcp->out_state != NULL)
 8007756:	69a0      	ldr	r0, [r4, #24]
 8007758:	b118      	cbz	r0, 8007762 <usbInitEndpointI+0x22>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 800775a:	2100      	movs	r1, #0
 800775c:	2214      	movs	r2, #20
 800775e:	f002 fb17 	bl	8009d90 <memset>

  usbp->epc[ep] = epcp;
 8007762:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8007766:	60c4      	str	r4, [r0, #12]

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
}
 800776c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));

  usbp->epc[ep] = epcp;

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 8007770:	f7ff b9ee 	b.w	8006b50 <usb_lld_init_endpoint.4444>
 8007774:	f3af 8000 	nop.w
 8007778:	f3af 8000 	nop.w
 800777c:	f3af 8000 	nop.w

08007780 <gpt_lld_start_timer>:

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8007780:	6842      	ldr	r2, [r0, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8007782:	68c3      	ldr	r3, [r0, #12]
 8007784:	3901      	subs	r1, #1

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
  if (NULL != gptp->config->callback)
 8007786:	6850      	ldr	r0, [r2, #4]
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
 8007788:	62d9      	str	r1, [r3, #44]	; 0x2c
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 800778a:	2200      	movs	r2, #0
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {

  gptp->tim->ARR   = (uint32_t)(interval - 1);  /* Time constant.           */
  gptp->tim->EGR   = STM32_TIM_EGR_UG;          /* Update event.            */
 800778c:	2101      	movs	r1, #1
 800778e:	6159      	str	r1, [r3, #20]
  gptp->tim->CNT   = 0;                         /* Reset counter.           */
 8007790:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is because the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR    = 0;                         /* Clear pending IRQs.      */
 8007792:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
 8007794:	b110      	cbz	r0, 800779c <gpt_lld_start_timer+0x1c>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
 8007796:	68d8      	ldr	r0, [r3, #12]
 8007798:	4308      	orrs	r0, r1
 800779a:	60d8      	str	r0, [r3, #12]
  gptp->tim->CR1   = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
 800779c:	2205      	movs	r2, #5
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	f3af 8000 	nop.w
 80077a8:	f3af 8000 	nop.w
 80077ac:	f3af 8000 	nop.w

080077b0 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 80077b0:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80077b2:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80077b4:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80077b6:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80077b8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80077ba:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80077bc:	6838      	ldr	r0, [r7, #0]
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80077be:	f046 0680 	orr.w	r6, r6, #128	; 0x80

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80077c2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80077c6:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80077c8:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80077ca:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80077cc:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80077ce:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80077d0:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	f043 0101 	orr.w	r1, r3, #1
 80077d8:	6021      	str	r1, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 80077da:	6802      	ldr	r2, [r0, #0]
 80077dc:	f042 0301 	orr.w	r3, r2, #1
 80077e0:	6003      	str	r3, [r0, #0]
}
 80077e2:	bcf0      	pop	{r4, r5, r6, r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	f3af 8000 	nop.w
 80077ec:	f3af 8000 	nop.w

080077f0 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 80077f0:	6843      	ldr	r3, [r0, #4]
 80077f2:	2101      	movs	r1, #1
 80077f4:	891a      	ldrh	r2, [r3, #8]
 80077f6:	6858      	ldr	r0, [r3, #4]
 80077f8:	fa01 f302 	lsl.w	r3, r1, r2
 80077fc:	6103      	str	r3, [r0, #16]
 80077fe:	4770      	bx	lr

08007800 <spicb.11599>:


/*
 * SPI end transfer callback.
 */
static void spicb(SPIDriver *spip) {
 8007800:	b508      	push	{r3, lr}
 8007802:	2320      	movs	r3, #32
 8007804:	f383 8811 	msr	BASEPRI, r3
  /* On transfer end just releases the slave select line.*/
  chSysLockFromISR();
  spiUnselectI(spip);
 8007808:	f7ff fff2 	bl	80077f0 <spi_lld_unselect>
 800780c:	2000      	movs	r0, #0
 800780e:	f380 8811 	msr	BASEPRI, r0
 8007812:	bd08      	pop	{r3, pc}
 8007814:	f3af 8000 	nop.w
 8007818:	f3af 8000 	nop.w
 800781c:	f3af 8000 	nop.w

08007820 <regfind.8080>:
 * <h2>Description</h2>
 * Registry and Thread References APIs are tested for functionality and
 * coverage.
 */

static bool regfind(thread_t *tp) {
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4605      	mov	r5, r0
 8007824:	2320      	movs	r3, #32
 8007826:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.r_newer;
 800782a:	480a      	ldr	r0, [pc, #40]	; (8007854 <regfind.8080+0x34>)
 800782c:	2400      	movs	r4, #0
 800782e:	6903      	ldr	r3, [r0, #16]
#if CH_CFG_USE_DYNAMIC
  tp->p_refs++;
 8007830:	7f9a      	ldrb	r2, [r3, #30]
 8007832:	1c51      	adds	r1, r2, #1
 8007834:	7799      	strb	r1, [r3, #30]
 8007836:	f384 8811 	msr	BASEPRI, r4
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
    ftp = chRegNextThread(ftp);
 800783a:	4618      	mov	r0, r3
  thread_t *ftp;
  bool found = false;

  ftp = chRegFirstThread();
  do {
    found |= ftp == tp;
 800783c:	42ab      	cmp	r3, r5
 800783e:	bf08      	it	eq
 8007840:	f044 0401 	orreq.w	r4, r4, #1
    ftp = chRegNextThread(ftp);
 8007844:	f7fa ff84 	bl	8002750 <chRegNextThread>
  } while (ftp != NULL);
 8007848:	4603      	mov	r3, r0
 800784a:	2800      	cmp	r0, #0
 800784c:	d1f5      	bne.n	800783a <regfind.8080+0x1a>
  return found;
}
 800784e:	4620      	mov	r0, r4
 8007850:	bd38      	pop	{r3, r4, r5, pc}
 8007852:	bf00      	nop
 8007854:	20001eb8 	.word	0x20001eb8
 8007858:	f3af 8000 	nop.w
 800785c:	f3af 8000 	nop.w

08007860 <heap1_setup.7929>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8007860:	f241 43d8 	movw	r3, #5336	; 0x14d8
 8007864:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8007868:	f641 0248 	movw	r2, #6216	; 0x1848
 * allocator.<br>
 * The test expects to find the heap back to the initial status after each
 * sequence.
 */

static void heap1_setup(void) {
 800786c:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800786e:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 8007870:	f2c2 0200 	movt	r2, #8192	; 0x2000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8007874:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 8007878:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800787c:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 800787e:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 8007880:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 8007882:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 8007884:	6054      	str	r4, [r2, #4]
 8007886:	6158      	str	r0, [r3, #20]
 8007888:	6118      	str	r0, [r3, #16]
 800788a:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&test_heap, test.buffer, sizeof(union test_buffers));
}
 800788c:	bc10      	pop	{r4}
 800788e:	4770      	bx	lr

08007890 <dyn3_setup.8086>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 8007890:	f241 4398 	movw	r3, #5272	; 0x1498
 8007894:	f2c2 0300 	movt	r3, #8192	; 0x2000
  heapp->h_free.h.u.next = hp = buf;
 8007898:	f641 0248 	movw	r2, #6216	; 0x1848

static void dyn3_setup(void) {
 800789c:	b410      	push	{r4}
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 800789e:	2100      	movs	r1, #0
  heapp->h_free.h.u.next = hp = buf;
 80078a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80078a4:	f103 0010 	add.w	r0, r3, #16
  heapp->h_free.h.size = 0;
  hp->h.u.next = NULL;
  hp->h.size = size - sizeof(union heap_header);
 80078a8:	f44f 64cc 	mov.w	r4, #1632	; 0x660
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
  union heap_header *hp;

  chDbgCheck(MEM_IS_ALIGNED(buf) && MEM_IS_ALIGNED(size));

  heapp->h_provider = (memgetfunc_t)NULL;
 80078ac:	6019      	str	r1, [r3, #0]
  heapp->h_free.h.u.next = hp = buf;
 80078ae:	609a      	str	r2, [r3, #8]
  heapp->h_free.h.size = 0;
 80078b0:	60d9      	str	r1, [r3, #12]
  hp->h.u.next = NULL;
 80078b2:	6011      	str	r1, [r2, #0]
  hp->h.size = size - sizeof(union heap_header);
 80078b4:	6054      	str	r4, [r2, #4]
 80078b6:	6158      	str	r0, [r3, #20]
 80078b8:	6118      	str	r0, [r3, #16]
 80078ba:	6199      	str	r1, [r3, #24]

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}
 80078bc:	bc10      	pop	{r4}
 80078be:	4770      	bx	lr

080078c0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 80078c0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80078c4:	b510      	push	{r4, lr}

  (void)ep;
  switch (usbp->ep0state) {
 80078c6:	2b03      	cmp	r3, #3
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80078c8:	4604      	mov	r4, r0

  (void)ep;
  switch (usbp->ep0state) {
 80078ca:	d031      	beq.n	8007930 <_usb_ep0out+0x70>
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d01d      	beq.n	800790c <_usb_ep0out+0x4c>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80078d0:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80078d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80078d8:	6819      	ldr	r1, [r3, #0]
  /* Error response, the state machine goes into an error state, the low
     level layer will have to reset it to USB_EP0_WAITING_SETUP after
     receiving a SETUP packet.*/
  usb_lld_stall_in(usbp, 0);
  usb_lld_stall_out(usbp, 0);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	f421 40f0 	bic.w	r0, r1, #30720	; 0x7800
 80078e0:	f020 0140 	bic.w	r1, r0, #64	; 0x40
 80078e4:	f081 0010 	eor.w	r0, r1, #16
 80078e8:	6018      	str	r0, [r3, #0]
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80078ea:	6819      	ldr	r1, [r3, #0]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	f421 4090 	bic.w	r0, r1, #18432	; 0x4800
 80078f2:	f020 0170 	bic.w	r1, r0, #112	; 0x70
 80078f6:	f481 5080 	eor.w	r0, r1, #4096	; 0x1000
 80078fa:	6018      	str	r0, [r3, #0]
 80078fc:	b112      	cbz	r2, 8007904 <_usb_ep0out+0x44>
 80078fe:	4620      	mov	r0, r4
 8007900:	2105      	movs	r1, #5
 8007902:	4790      	blx	r2
  usbp->ep0state = USB_EP0_ERROR;
 8007904:	2306      	movs	r3, #6
 8007906:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 800790a:	bd10      	pop	{r4, pc}
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 800790c:	2100      	movs	r1, #0

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 800790e:	2205      	movs	r2, #5
 8007910:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    usbPrepareTransmit(usbp, 0, NULL, 0);
 8007914:	460a      	mov	r2, r1
 8007916:	f7fd fc4b 	bl	80051b0 <usbPrepareTransmit.constprop.5>
 800791a:	2020      	movs	r0, #32
 800791c:	f380 8811 	msr	BASEPRI, r0
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0);
 8007920:	2100      	movs	r1, #0
 8007922:	4620      	mov	r0, r4
 8007924:	f7ff fe44 	bl	80075b0 <usbStartTransmitI>
 8007928:	2100      	movs	r1, #0
 800792a:	f381 8811 	msr	BASEPRI, r1
 800792e:	bd10      	pop	{r4, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0)
 8007930:	68c3      	ldr	r3, [r0, #12]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	6891      	ldr	r1, [r2, #8]
 8007936:	2900      	cmp	r1, #0
 8007938:	d1ca      	bne.n	80078d0 <_usb_ep0out+0x10>
      break;
#endif
    if (usbp->ep0endcb != NULL)
 800793a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800793c:	b103      	cbz	r3, 8007940 <_usb_ep0out+0x80>
      usbp->ep0endcb(usbp);
 800793e:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8007940:	2000      	movs	r0, #0
 8007942:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 8007946:	bd10      	pop	{r4, pc}
 8007948:	f3af 8000 	nop.w
 800794c:	f3af 8000 	nop.w

08007950 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8007950:	b508      	push	{r3, lr}
 8007952:	4601      	mov	r1, r0
 8007954:	2320      	movs	r3, #32
 8007956:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800795a:	2008      	movs	r0, #8
 800795c:	f7fe f8b0 	bl	8005ac0 <chSchGoSleepTimeoutS>
 8007960:	2000      	movs	r0, #0
 8007962:	f380 8811 	msr	BASEPRI, r0
 8007966:	bd08      	pop	{r3, pc}
 8007968:	f3af 8000 	nop.w
 800796c:	f3af 8000 	nop.w

08007970 <test_wait_tick>:
/**
 * @brief   Delays execution until next system time tick.
 *
 * @return              The system time.
 */
systime_t test_wait_tick(void) {
 8007970:	b508      	push	{r3, lr}

  chThdSleep(1);
 8007972:	2001      	movs	r0, #1
 8007974:	f7ff ffec 	bl	8007950 <chThdSleep>
 8007978:	2320      	movs	r3, #32
 800797a:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800797e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007982:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007984:	2200      	movs	r2, #0
 8007986:	f382 8811 	msr	BASEPRI, r2
  return chVTGetSystemTime();
}
 800798a:	b288      	uxth	r0, r1
 800798c:	bd08      	pop	{r3, pc}
 800798e:	bf00      	nop

08007990 <TestThread.4031>:
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i, j;

  chp = p;
 8007994:	4c9d      	ldr	r4, [pc, #628]	; (8007c0c <TestThread.4031+0x27c>)
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007996:	b083      	sub	sp, #12
  int i, j;

  chp = p;
 8007998:	6020      	str	r0, [r4, #0]
  test_println("");
 800799a:	489d      	ldr	r0, [pc, #628]	; (8007c10 <TestThread.4031+0x280>)
 800799c:	f7f9 ffb8 	bl	8001910 <test_println>
  test_println("*** ChibiOS/RT test suite");
 80079a0:	489c      	ldr	r0, [pc, #624]	; (8007c14 <TestThread.4031+0x284>)
 80079a2:	f7f9 ffb5 	bl	8001910 <test_println>
 80079a6:	4d9c      	ldr	r5, [pc, #624]	; (8007c18 <TestThread.4031+0x288>)
  test_println("***");
 80079a8:	489c      	ldr	r0, [pc, #624]	; (8007c1c <TestThread.4031+0x28c>)
 80079aa:	f7f9 ffb1 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079ae:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 80079b0:	6820      	ldr	r0, [r4, #0]
 80079b2:	6803      	ldr	r3, [r0, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079b8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80079bc:	2900      	cmp	r1, #0
 80079be:	d1f7      	bne.n	80079b0 <TestThread.4031+0x20>
  chp = p;
  test_println("");
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
 80079c0:	4897      	ldr	r0, [pc, #604]	; (8007c20 <TestThread.4031+0x290>)
 80079c2:	4e98      	ldr	r6, [pc, #608]	; (8007c24 <TestThread.4031+0x294>)
 80079c4:	f7f9 ffa4 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079c8:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 80079ca:	6820      	ldr	r0, [r4, #0]
 80079cc:	6807      	ldr	r7, [r0, #0]
 80079ce:	68bd      	ldr	r5, [r7, #8]
 80079d0:	47a8      	blx	r5
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079d6:	2900      	cmp	r1, #0
 80079d8:	d1f7      	bne.n	80079ca <TestThread.4031+0x3a>
  test_println("*** ChibiOS/RT test suite");
  test_println("***");
  test_print("*** Kernel:       ");
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
 80079da:	4893      	ldr	r0, [pc, #588]	; (8007c28 <TestThread.4031+0x298>)
 80079dc:	4e93      	ldr	r6, [pc, #588]	; (8007c2c <TestThread.4031+0x29c>)
 80079de:	f7f9 ff97 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079e2:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	6803      	ldr	r3, [r0, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d1f7      	bne.n	80079e4 <TestThread.4031+0x54>
  test_println(CH_KERNEL_VERSION);
  test_print("*** Compiled:     ");
  test_println(__DATE__ " - " __TIME__);
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
 80079f4:	488e      	ldr	r0, [pc, #568]	; (8007c30 <TestThread.4031+0x2a0>)
 80079f6:	4f8f      	ldr	r7, [pc, #572]	; (8007c34 <TestThread.4031+0x2a4>)
 80079f8:	f7f9 ff8a 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 80079fc:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	6805      	ldr	r5, [r0, #0]
 8007a02:	68ae      	ldr	r6, [r5, #8]
 8007a04:	47b0      	blx	r6
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a06:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d1f7      	bne.n	80079fe <TestThread.4031+0x6e>
#ifdef PORT_COMPILER_NAME
  test_print("*** Compiler:     ");
  test_println(PORT_COMPILER_NAME);
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
 8007a0e:	488a      	ldr	r0, [pc, #552]	; (8007c38 <TestThread.4031+0x2a8>)
 8007a10:	4f8a      	ldr	r7, [pc, #552]	; (8007c3c <TestThread.4031+0x2ac>)
 8007a12:	f7f9 ff7d 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a16:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	6803      	ldr	r3, [r0, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a20:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8007a24:	2900      	cmp	r1, #0
 8007a26:	d1f7      	bne.n	8007a18 <TestThread.4031+0x88>
#endif
  test_print("*** Architecture: ");
  test_println(PORT_ARCHITECTURE_NAME);
#ifdef PORT_CORE_VARIANT_NAME
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
 8007a28:	4885      	ldr	r0, [pc, #532]	; (8007c40 <TestThread.4031+0x2b0>)
 8007a2a:	4d86      	ldr	r5, [pc, #536]	; (8007c44 <TestThread.4031+0x2b4>)
 8007a2c:	f7f9 ff70 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a30:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	6806      	ldr	r6, [r0, #0]
 8007a36:	68b7      	ldr	r7, [r6, #8]
 8007a38:	47b8      	blx	r7
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a3a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a3e:	2900      	cmp	r1, #0
 8007a40:	d1f7      	bne.n	8007a32 <TestThread.4031+0xa2>
  test_print("*** Core Variant: ");
  test_println(PORT_CORE_VARIANT_NAME);
#endif
#ifdef PORT_INFO
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
 8007a42:	4881      	ldr	r0, [pc, #516]	; (8007c48 <TestThread.4031+0x2b8>)
 8007a44:	4d81      	ldr	r5, [pc, #516]	; (8007c4c <TestThread.4031+0x2bc>)
 8007a46:	f7f9 ff63 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a4a:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	6803      	ldr	r3, [r0, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a54:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d1f7      	bne.n	8007a4c <TestThread.4031+0xbc>
  test_print("*** Port Info:    ");
  test_println(PORT_INFO);
#endif
#ifdef PLATFORM_NAME
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
 8007a5c:	487c      	ldr	r0, [pc, #496]	; (8007c50 <TestThread.4031+0x2c0>)
 8007a5e:	4e7d      	ldr	r6, [pc, #500]	; (8007c54 <TestThread.4031+0x2c4>)
 8007a60:	f7f9 ff56 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a64:	212a      	movs	r1, #42	; 0x2a
    chSequentialStreamPut(chp, *msgp++);
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	6807      	ldr	r7, [r0, #0]
 8007a6a:	68bd      	ldr	r5, [r7, #8]
 8007a6c:	47a8      	blx	r5
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d1f7      	bne.n	8007a66 <TestThread.4031+0xd6>
  test_print("*** Platform:     ");
  test_println(PLATFORM_NAME);
#endif
#ifdef BOARD_NAME
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
 8007a76:	4878      	ldr	r0, [pc, #480]	; (8007c58 <TestThread.4031+0x2c8>)
 8007a78:	9100      	str	r1, [sp, #0]
 8007a7a:	f7f9 ff49 	bl	8001910 <test_println>
#endif
  test_println("");
 8007a7e:	4864      	ldr	r0, [pc, #400]	; (8007c10 <TestThread.4031+0x280>)
 8007a80:	f7f9 ff46 	bl	8001910 <test_println>

  global_fail = FALSE;
 8007a84:	9900      	ldr	r1, [sp, #0]
 8007a86:	4875      	ldr	r0, [pc, #468]	; (8007c5c <TestThread.4031+0x2cc>)
 8007a88:	f241 43b8 	movw	r3, #5304	; 0x14b8
 8007a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007a90:	4f73      	ldr	r7, [pc, #460]	; (8007c60 <TestThread.4031+0x2d0>)
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8007a92:	4e74      	ldr	r6, [pc, #464]	; (8007c64 <TestThread.4031+0x2d4>)
 8007a94:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8007c98 <TestThread.4031+0x308>
 8007a98:	9001      	str	r0, [sp, #4]
  test_print("*** Test Board:   ");
  test_println(BOARD_NAME);
#endif
  test_println("");

  global_fail = FALSE;
 8007a9a:	7019      	strb	r1, [r3, #0]
  i = 0;
 8007a9c:	468a      	mov	sl, r1
 8007a9e:	f10a 0a01 	add.w	sl, sl, #1
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007aa2:	f04f 0800 	mov.w	r8, #0

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8007aa6:	f857 2b04 	ldr.w	r2, [r7], #4
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	f000 8085 	beq.w	8007bba <TestThread.4031+0x22a>
 8007ab0:	4d6d      	ldr	r5, [pc, #436]	; (8007c68 <TestThread.4031+0x2d8>)
      print_line();
 8007ab2:	f7f9 ff9d 	bl	80019f0 <print_line.6617>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007ab6:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	6802      	ldr	r2, [r0, #0]
 8007abc:	6893      	ldr	r3, [r2, #8]
 8007abe:	4798      	blx	r3
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007ac0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d1f7      	bne.n	8007ab8 <TestThread.4031+0x128>
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
 8007ac8:	4650      	mov	r0, sl
 8007aca:	f7f9 ff49 	bl	8001960 <test_printn>
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8007ace:	484f      	ldr	r0, [pc, #316]	; (8007c0c <TestThread.4031+0x27c>)
 8007ad0:	212e      	movs	r1, #46	; 0x2e
 8007ad2:	6800      	ldr	r0, [r0, #0]
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8007ad4:	f108 0801 	add.w	r8, r8, #1
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
    chSequentialStreamPut(chp, *msgp++);
 8007ad8:	6805      	ldr	r5, [r0, #0]
 8007ada:	68aa      	ldr	r2, [r5, #8]
 8007adc:	4790      	blx	r2
 8007ade:	4d63      	ldr	r5, [pc, #396]	; (8007c6c <TestThread.4031+0x2dc>)
    while (patterns[i][j]) {
      print_line();
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	f7f9 ff3d 	bl	8001960 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007ae6:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	6803      	ldr	r3, [r0, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007af0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007af4:	2900      	cmp	r1, #0
 8007af6:	d1f7      	bne.n	8007ae8 <TestThread.4031+0x158>
      test_print("--- Test Case ");
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
 8007af8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8007afc:	680d      	ldr	r5, [r1, #0]
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007afe:	7829      	ldrb	r1, [r5, #0]
 8007b00:	b139      	cbz	r1, 8007b12 <TestThread.4031+0x182>
    chSequentialStreamPut(chp, *msgp++);
 8007b02:	6820      	ldr	r0, [r4, #0]
 8007b04:	6803      	ldr	r3, [r0, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b0a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	d1f7      	bne.n	8007b02 <TestThread.4031+0x172>
      test_printn(i + 1);
      test_print(".");
      test_printn(j + 1);
      test_print(" (");
      test_print(patterns[i][j]->name);
      test_println(")");
 8007b12:	4857      	ldr	r0, [pc, #348]	; (8007c70 <TestThread.4031+0x2e0>)
 8007b14:	f7f9 fefc 	bl	8001910 <test_println>
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
 8007b18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007b1c:	f7ff ff18 	bl	8007950 <chThdSleep>

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8007b20:	4854      	ldr	r0, [pc, #336]	; (8007c74 <TestThread.4031+0x2e4>)
      test_print(patterns[i][j]->name);
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
 8007b22:	f857 bc04 	ldr.w	fp, [r7, #-4]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007b26:	2100      	movs	r1, #0
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;
 8007b28:	6001      	str	r1, [r0, #0]
 8007b2a:	6041      	str	r1, [r0, #4]
 8007b2c:	6081      	str	r1, [r0, #8]
 8007b2e:	60c1      	str	r1, [r0, #12]
 8007b30:	6101      	str	r1, [r0, #16]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007b32:	4d51      	ldr	r5, [pc, #324]	; (8007c78 <TestThread.4031+0x2e8>)
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8007b34:	f8db 3004 	ldr.w	r3, [fp, #4]
/*
 * Tokens.
 */
static void clear_tokens(void) {

  tokp = tokens_buffer;
 8007b38:	f8c6 9000 	str.w	r9, [r6]
static void execute_test(const struct testcase *tcp) {
  int i;

  /* Initialization */
  clear_tokens();
  local_fail = FALSE;
 8007b3c:	7029      	strb	r1, [r5, #0]
  for (i = 0; i < MAX_THREADS; i++)
    threads[i] = NULL;

  if (tcp->setup != NULL)
 8007b3e:	b103      	cbz	r3, 8007b42 <TestThread.4031+0x1b2>
    tcp->setup();
 8007b40:	4798      	blx	r3
  tcp->execute();
 8007b42:	f8db 200c 	ldr.w	r2, [fp, #12]
 8007b46:	4790      	blx	r2
  if (tcp->teardown != NULL)
 8007b48:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007b4c:	b100      	cbz	r0, 8007b50 <TestThread.4031+0x1c0>
    tcp->teardown();
 8007b4e:	4780      	blx	r0

  test_wait_threads();
 8007b50:	f7fa fc76 	bl	8002440 <test_wait_threads>
      test_println(")");
#if DELAY_BETWEEN_TESTS > 0
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
 8007b54:	7829      	ldrb	r1, [r5, #0]
 8007b56:	2900      	cmp	r1, #0
 8007b58:	f000 80a0 	beq.w	8007c9c <TestThread.4031+0x30c>
 8007b5c:	4d47      	ldr	r5, [pc, #284]	; (8007c7c <TestThread.4031+0x2ec>)
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b5e:	212d      	movs	r1, #45	; 0x2d
    chSequentialStreamPut(chp, *msgp++);
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	6803      	ldr	r3, [r0, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b68:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d1f7      	bne.n	8007b60 <TestThread.4031+0x1d0>
      chThdSleepMilliseconds(DELAY_BETWEEN_TESTS);
#endif
      execute_test(patterns[i][j]);
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
 8007b70:	4843      	ldr	r0, [pc, #268]	; (8007c80 <TestThread.4031+0x2f0>)
 8007b72:	4d44      	ldr	r5, [pc, #272]	; (8007c84 <TestThread.4031+0x2f4>)
 8007b74:	6800      	ldr	r0, [r0, #0]
 8007b76:	f7f9 fef3 	bl	8001960 <test_printn>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b7a:	2120      	movs	r1, #32
    chSequentialStreamPut(chp, *msgp++);
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	6803      	ldr	r3, [r0, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007b84:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	d1f7      	bne.n	8007b7c <TestThread.4031+0x1ec>
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8007b8c:	6831      	ldr	r1, [r6, #0]
 8007b8e:	4549      	cmp	r1, r9
 8007b90:	d90b      	bls.n	8007baa <TestThread.4031+0x21a>
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007b92:	4d3d      	ldr	r5, [pc, #244]	; (8007c88 <TestThread.4031+0x2f8>)

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
    chSequentialStreamPut(chp, *cp++);
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b9a:	6803      	ldr	r3, [r0, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	4790      	blx	r2
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8007ba0:	6830      	ldr	r0, [r6, #0]
 * @brief   Test execution thread function.
 *
 * @param[in] p         pointer to a @p BaseChannel object for test output
 * @return              A failure boolean value.
 */
msg_t TestThread(void *p) {
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	3501      	adds	r5, #1
}

static void print_tokens(void) {
  char *cp = tokens_buffer;

  while (cp < tokp)
 8007ba6:	4281      	cmp	r1, r0
 8007ba8:	d3f4      	bcc.n	8007b94 <TestThread.4031+0x204>
      if (local_fail) {
        test_print("--- Result: FAILURE (#");
        test_printn(failpoint);
        test_print(" [");
        print_tokens();
        test_println("])");
 8007baa:	4838      	ldr	r0, [pc, #224]	; (8007c8c <TestThread.4031+0x2fc>)
 8007bac:	f7f9 feb0 	bl	8001910 <test_println>

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
    j = 0;
    while (patterns[i][j]) {
 8007bb0:	f857 2b04 	ldr.w	r2, [r7], #4
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	f47f af7b 	bne.w	8007ab0 <TestThread.4031+0x120>
#endif
  test_println("");

  global_fail = FALSE;
  i = 0;
  while (patterns[i]) {
 8007bba:	9d01      	ldr	r5, [sp, #4]
 8007bbc:	f855 7f04 	ldr.w	r7, [r5, #4]!
 8007bc0:	9501      	str	r5, [sp, #4]
 8007bc2:	2f00      	cmp	r7, #0
 8007bc4:	f47f af6b 	bne.w	8007a9e <TestThread.4031+0x10e>
        test_println("--- Result: SUCCESS");
      j++;
    }
    i++;
  }
  print_line();
 8007bc8:	f7f9 ff12 	bl	80019f0 <print_line.6617>
 8007bcc:	4d30      	ldr	r5, [pc, #192]	; (8007c90 <TestThread.4031+0x300>)
  test_println("");
 8007bce:	4810      	ldr	r0, [pc, #64]	; (8007c10 <TestThread.4031+0x280>)
 8007bd0:	f7f9 fe9e 	bl	8001910 <test_println>
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bd4:	2146      	movs	r1, #70	; 0x46
    chSequentialStreamPut(chp, *msgp++);
 8007bd6:	6820      	ldr	r0, [r4, #0]
 8007bd8:	6803      	ldr	r3, [r0, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	4790      	blx	r2
 *
 * @param[in] msgp      the message
 */
void test_print(const char *msgp) {

  while (*msgp)
 8007bde:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d1f7      	bne.n	8007bd6 <TestThread.4031+0x246>
    i++;
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
 8007be6:	f241 40b8 	movw	r0, #5304	; 0x14b8
 8007bea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007bee:	7801      	ldrb	r1, [r0, #0]
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	d157      	bne.n	8007ca4 <TestThread.4031+0x314>
    test_println("FAILURE");
  else
    test_println("SUCCESS");
 8007bf4:	4827      	ldr	r0, [pc, #156]	; (8007c94 <TestThread.4031+0x304>)
 8007bf6:	f7f9 fe8b 	bl	8001910 <test_println>

  return (msg_t)global_fail;
 8007bfa:	f241 43b8 	movw	r3, #5304	; 0x14b8
 8007bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c02:	7818      	ldrb	r0, [r3, #0]
}
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200014bc 	.word	0x200014bc
 8007c10:	0800b0a8 	.word	0x0800b0a8
 8007c14:	0800a750 	.word	0x0800a750
 8007c18:	0800a770 	.word	0x0800a770
 8007c1c:	0800a76c 	.word	0x0800a76c
 8007c20:	0800a7d0 	.word	0x0800a7d0
 8007c24:	0800a7dc 	.word	0x0800a7dc
 8007c28:	0800a7f0 	.word	0x0800a7f0
 8007c2c:	0800a808 	.word	0x0800a808
 8007c30:	0800a81c 	.word	0x0800a81c
 8007c34:	0800a864 	.word	0x0800a864
 8007c38:	0800a878 	.word	0x0800a878
 8007c3c:	0800a880 	.word	0x0800a880
 8007c40:	0800a894 	.word	0x0800a894
 8007c44:	0800a8a0 	.word	0x0800a8a0
 8007c48:	0800a8b4 	.word	0x0800a8b4
 8007c4c:	0800a8cc 	.word	0x0800a8cc
 8007c50:	0800a8e0 	.word	0x0800a8e0
 8007c54:	0800a90c 	.word	0x0800a90c
 8007c58:	0800a920 	.word	0x0800a920
 8007c5c:	0800add0 	.word	0x0800add0
 8007c60:	0800aca0 	.word	0x0800aca0
 8007c64:	20001490 	.word	0x20001490
 8007c68:	0800a784 	.word	0x0800a784
 8007c6c:	0800a930 	.word	0x0800a930
 8007c70:	0800a794 	.word	0x0800a794
 8007c74:	20002008 	.word	0x20002008
 8007c78:	20001494 	.word	0x20001494
 8007c7c:	0800a798 	.word	0x0800a798
 8007c80:	200014c0 	.word	0x200014c0
 8007c84:	0800a934 	.word	0x0800a934
 8007c88:	200014c5 	.word	0x200014c5
 8007c8c:	0800a7b0 	.word	0x0800a7b0
 8007c90:	0800a938 	.word	0x0800a938
 8007c94:	0800a7c0 	.word	0x0800a7c0
 8007c98:	200014c4 	.word	0x200014c4
        test_print(" [");
        print_tokens();
        test_println("])");
      }
      else
        test_println("--- Result: SUCCESS");
 8007c9c:	4803      	ldr	r0, [pc, #12]	; (8007cac <TestThread.4031+0x31c>)
 8007c9e:	f7f9 fe37 	bl	8001910 <test_println>
 8007ca2:	e700      	b.n	8007aa6 <TestThread.4031+0x116>
  }
  print_line();
  test_println("");
  test_print("Final result: ");
  if (global_fail)
    test_println("FAILURE");
 8007ca4:	4802      	ldr	r0, [pc, #8]	; (8007cb0 <TestThread.4031+0x320>)
 8007ca6:	f7f9 fe33 	bl	8001910 <test_println>
 8007caa:	e7a6      	b.n	8007bfa <TestThread.4031+0x26a>
 8007cac:	0800a7b4 	.word	0x0800a7b4
 8007cb0:	0800a7c8 	.word	0x0800a7c8
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	f3af 8000 	nop.w
 8007cbc:	f3af 8000 	nop.w

08007cc0 <thread2.7060>:
static void sem2_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static msg_t thread2(void *p) {
 8007cc0:	b508      	push	{r3, lr}

  (void)p;
  chThdSleepMilliseconds(50);
 8007cc2:	2064      	movs	r0, #100	; 0x64
 8007cc4:	f7ff fe44 	bl	8007950 <chThdSleep>
 8007cc8:	2320      	movs	r3, #32
 8007cca:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  chSemSignalI(&sem1); /* For coverage reasons */
 8007cce:	f640 4048 	movw	r0, #3144	; 0xc48
 8007cd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007cd6:	f7fa fee3 	bl	8002aa0 <chSemSignalI>
  chSchRescheduleS();
 8007cda:	f7f9 ff59 	bl	8001b90 <chSchRescheduleS>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f380 8811 	msr	BASEPRI, r0
  chSysUnlock();
  return 0;
}
 8007ce4:	bd08      	pop	{r3, pc}
 8007ce6:	bf00      	nop
 8007ce8:	f3af 8000 	nop.w
 8007cec:	f3af 8000 	nop.w

08007cf0 <mtx4_execute.7303>:
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007cf4:	4d86      	ldr	r5, [pc, #536]	; (8007f10 <mtx4_execute.7303+0x220>)
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007cf6:	4887      	ldr	r0, [pc, #540]	; (8007f14 <mtx4_execute.7303+0x224>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007cf8:	69ab      	ldr	r3, [r5, #24]
  chMtxLock(&m1);
  chMtxUnlock(&m1);
  return 0;
}

static void mtx4_execute(void) {
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	689c      	ldr	r4, [r3, #8]
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007cfe:	f44f 71a4 	mov.w	r1, #328	; 0x148

static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
 8007d02:	1c67      	adds	r7, r4, #1
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007d04:	4b84      	ldr	r3, [pc, #528]	; (8007f18 <mtx4_execute.7303+0x228>)
 8007d06:	463a      	mov	r2, r7
 8007d08:	9000      	str	r0, [sp, #0]
 8007d0a:	4884      	ldr	r0, [pc, #528]	; (8007f1c <mtx4_execute.7303+0x22c>)
 8007d0c:	f7fa f888 	bl	8001e20 <chThdCreateStatic>
 8007d10:	4e83      	ldr	r6, [pc, #524]	; (8007f20 <mtx4_execute.7303+0x230>)
static void mtx4_execute(void) {
  tprio_t p, p1, p2;

  p = chThdGetPriorityX();
  p1 = p + 1;
  p2 = p + 2;
 8007d12:	f104 0802 	add.w	r8, r4, #2
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
 8007d16:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
 8007d18:	4882      	ldr	r0, [pc, #520]	; (8007f24 <mtx4_execute.7303+0x234>)
 8007d1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d1e:	4642      	mov	r2, r8
 8007d20:	4b81      	ldr	r3, [pc, #516]	; (8007f28 <mtx4_execute.7303+0x238>)
 8007d22:	9000      	str	r0, [sp, #0]
 8007d24:	4881      	ldr	r0, [pc, #516]	; (8007f2c <mtx4_execute.7303+0x23c>)
 8007d26:	f7fa f87b 	bl	8001e20 <chThdCreateStatic>
 8007d2a:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8007d2c:	4880      	ldr	r0, [pc, #512]	; (8007f30 <mtx4_execute.7303+0x240>)
 8007d2e:	f7fa fa8f 	bl	8002250 <chMtxLock>
 8007d32:	69a9      	ldr	r1, [r5, #24]
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
 8007d34:	2001      	movs	r0, #1
 8007d36:	688a      	ldr	r2, [r1, #8]
 8007d38:	1aa3      	subs	r3, r4, r2
 8007d3a:	4259      	negs	r1, r3
 8007d3c:	4159      	adcs	r1, r3
 8007d3e:	f7f9 fd9f 	bl	8001880 <_test_assert>
 8007d42:	b110      	cbz	r0, 8007d4a <mtx4_execute.7303+0x5a>
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
}
 8007d44:	b002      	add	sp, #8
 8007d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  p2 = p + 2;
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "B");
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "A");
  chMtxLock(&m2);
  test_assert(1, chThdGetPriorityX() == p, "wrong priority level");
  chThdSleepMilliseconds(100);
 8007d4a:	20c8      	movs	r0, #200	; 0xc8
 8007d4c:	f7ff fe00 	bl	8007950 <chThdSleep>
 8007d50:	69aa      	ldr	r2, [r5, #24]
  test_assert(2, chThdGetPriorityX() == p1, "wrong priority level");
 8007d52:	2002      	movs	r0, #2
 8007d54:	6893      	ldr	r3, [r2, #8]
 8007d56:	1afa      	subs	r2, r7, r3
 8007d58:	4251      	negs	r1, r2
 8007d5a:	4151      	adcs	r1, r2
 8007d5c:	f7f9 fd90 	bl	8001880 <_test_assert>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d1ef      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  chMtxLock(&m1);
 8007d64:	4873      	ldr	r0, [pc, #460]	; (8007f34 <mtx4_execute.7303+0x244>)
 8007d66:	f7fa fa73 	bl	8002250 <chMtxLock>
 8007d6a:	69ab      	ldr	r3, [r5, #24]
  test_assert(3, chThdGetPriorityX() == p1, "wrong priority level");
 8007d6c:	2003      	movs	r0, #3
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	ebb7 0c02 	subs.w	ip, r7, r2
 8007d74:	f1dc 0100 	rsbs	r1, ip, #0
 8007d78:	eb51 010c 	adcs.w	r1, r1, ip
 8007d7c:	f7f9 fd80 	bl	8001880 <_test_assert>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d1df      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007d84:	20c8      	movs	r0, #200	; 0xc8
 8007d86:	f7ff fde3 	bl	8007950 <chThdSleep>
 8007d8a:	69ab      	ldr	r3, [r5, #24]
  test_assert(4, chThdGetPriorityX() == p2, "wrong priority level");
 8007d8c:	2004      	movs	r0, #4
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	ebb8 0e02 	subs.w	lr, r8, r2
 8007d94:	f1de 0100 	rsbs	r1, lr, #0
 8007d98:	eb51 010e 	adcs.w	r1, r1, lr
 8007d9c:	f7f9 fd70 	bl	8001880 <_test_assert>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d1cf      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  chMtxUnlock(&m1);
 8007da4:	4863      	ldr	r0, [pc, #396]	; (8007f34 <mtx4_execute.7303+0x244>)
 8007da6:	f7f9 fff3 	bl	8001d90 <chMtxUnlock>
 8007daa:	69ab      	ldr	r3, [r5, #24]
  test_assert(5, chThdGetPriorityX() == p1, "wrong priority level");
 8007dac:	2005      	movs	r0, #5
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	1abb      	subs	r3, r7, r2
 8007db2:	4259      	negs	r1, r3
 8007db4:	4159      	adcs	r1, r3
 8007db6:	f7f9 fd63 	bl	8001880 <_test_assert>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d1c2      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007dbe:	20c8      	movs	r0, #200	; 0xc8
 8007dc0:	f7ff fdc6 	bl	8007950 <chThdSleep>
 8007dc4:	69aa      	ldr	r2, [r5, #24]
  test_assert(6, chThdGetPriorityX() == p1, "wrong priority level");
 8007dc6:	2006      	movs	r0, #6
 8007dc8:	6893      	ldr	r3, [r2, #8]
 8007dca:	1afa      	subs	r2, r7, r3
 8007dcc:	4251      	negs	r1, r2
 8007dce:	4151      	adcs	r1, r2
 8007dd0:	f7f9 fd56 	bl	8001880 <_test_assert>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1b5      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  chMtxUnlockAll();
 8007dd8:	f7fa f97a 	bl	80020d0 <chMtxUnlockAll>
 8007ddc:	69ab      	ldr	r3, [r5, #24]
  test_assert(7, chThdGetPriorityX() == p, "wrong priority level");
 8007dde:	2007      	movs	r0, #7
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	ebb4 0c02 	subs.w	ip, r4, r2
 8007de6:	f1dc 0100 	rsbs	r1, ip, #0
 8007dea:	eb51 010c 	adcs.w	r1, r1, ip
 8007dee:	f7f9 fd47 	bl	8001880 <_test_assert>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1a6      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  test_wait_threads();
 8007df6:	f7fa fb23 	bl	8002440 <test_wait_threads>

  /* Test repeated in order to cover chMtxUnlockS().*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, p1, thread4a, "D");
 8007dfa:	484f      	ldr	r0, [pc, #316]	; (8007f38 <mtx4_execute.7303+0x248>)
 8007dfc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e00:	463a      	mov	r2, r7
 8007e02:	4b45      	ldr	r3, [pc, #276]	; (8007f18 <mtx4_execute.7303+0x228>)
 8007e04:	9000      	str	r0, [sp, #0]
 8007e06:	4845      	ldr	r0, [pc, #276]	; (8007f1c <mtx4_execute.7303+0x22c>)
 8007e08:	f7fa f80a 	bl	8001e20 <chThdCreateStatic>
 8007e0c:	6030      	str	r0, [r6, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, p2, thread4b, "C");
 8007e0e:	484b      	ldr	r0, [pc, #300]	; (8007f3c <mtx4_execute.7303+0x24c>)
 8007e10:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007e14:	4642      	mov	r2, r8
 8007e16:	4b44      	ldr	r3, [pc, #272]	; (8007f28 <mtx4_execute.7303+0x238>)
 8007e18:	9000      	str	r0, [sp, #0]
 8007e1a:	4844      	ldr	r0, [pc, #272]	; (8007f2c <mtx4_execute.7303+0x23c>)
 8007e1c:	f7fa f800 	bl	8001e20 <chThdCreateStatic>
 8007e20:	6070      	str	r0, [r6, #4]
  chMtxLock(&m2);
 8007e22:	4843      	ldr	r0, [pc, #268]	; (8007f30 <mtx4_execute.7303+0x240>)
 8007e24:	f7fa fa14 	bl	8002250 <chMtxLock>
 8007e28:	69ab      	ldr	r3, [r5, #24]
  test_assert(8, chThdGetPriorityX() == p, "wrong priority level");
 8007e2a:	2008      	movs	r0, #8
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	ebb4 0e02 	subs.w	lr, r4, r2
 8007e32:	f1de 0100 	rsbs	r1, lr, #0
 8007e36:	eb51 010e 	adcs.w	r1, r1, lr
 8007e3a:	f7f9 fd21 	bl	8001880 <_test_assert>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d180      	bne.n	8007d44 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007e42:	20c8      	movs	r0, #200	; 0xc8
 8007e44:	f7ff fd84 	bl	8007950 <chThdSleep>
 8007e48:	69ab      	ldr	r3, [r5, #24]
  test_assert(9, chThdGetPriorityX() == p1, "wrong priority level");
 8007e4a:	2009      	movs	r0, #9
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	1abb      	subs	r3, r7, r2
 8007e50:	4259      	negs	r1, r3
 8007e52:	4159      	adcs	r1, r3
 8007e54:	f7f9 fd14 	bl	8001880 <_test_assert>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f47f af73 	bne.w	8007d44 <mtx4_execute.7303+0x54>
  chMtxLock(&m1);
 8007e5e:	4835      	ldr	r0, [pc, #212]	; (8007f34 <mtx4_execute.7303+0x244>)
 8007e60:	f7fa f9f6 	bl	8002250 <chMtxLock>
 8007e64:	69aa      	ldr	r2, [r5, #24]
  test_assert(10, chThdGetPriorityX() == p1, "wrong priority level");
 8007e66:	200a      	movs	r0, #10
 8007e68:	6893      	ldr	r3, [r2, #8]
 8007e6a:	1afa      	subs	r2, r7, r3
 8007e6c:	4251      	negs	r1, r2
 8007e6e:	4151      	adcs	r1, r2
 8007e70:	f7f9 fd06 	bl	8001880 <_test_assert>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f47f af65 	bne.w	8007d44 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007e7a:	20c8      	movs	r0, #200	; 0xc8
 8007e7c:	f7ff fd68 	bl	8007950 <chThdSleep>
 8007e80:	69ae      	ldr	r6, [r5, #24]
  test_assert(11, chThdGetPriorityX() == p2, "wrong priority level");
 8007e82:	200b      	movs	r0, #11
 8007e84:	68b3      	ldr	r3, [r6, #8]
 8007e86:	ebb8 0c03 	subs.w	ip, r8, r3
 8007e8a:	f1dc 0200 	rsbs	r2, ip, #0
 8007e8e:	eb52 010c 	adcs.w	r1, r2, ip
 8007e92:	f7f9 fcf5 	bl	8001880 <_test_assert>
 8007e96:	4606      	mov	r6, r0
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f47f af53 	bne.w	8007d44 <mtx4_execute.7303+0x54>
 8007e9e:	2020      	movs	r0, #32
 8007ea0:	f380 8811 	msr	BASEPRI, r0
  chSysLock();
  chMtxUnlockS(&m1);
 8007ea4:	4823      	ldr	r0, [pc, #140]	; (8007f34 <mtx4_execute.7303+0x244>)
 8007ea6:	f7fa f943 	bl	8002130 <chMtxUnlockS>
  chSchRescheduleS();
 8007eaa:	f7f9 fe71 	bl	8001b90 <chSchRescheduleS>
 8007eae:	f386 8811 	msr	BASEPRI, r6
 8007eb2:	69a9      	ldr	r1, [r5, #24]
  chSysUnlock();
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
 8007eb4:	200c      	movs	r0, #12
 8007eb6:	688b      	ldr	r3, [r1, #8]
 8007eb8:	ebb7 0e03 	subs.w	lr, r7, r3
 8007ebc:	f1de 0200 	rsbs	r2, lr, #0
 8007ec0:	eb52 010e 	adcs.w	r1, r2, lr
 8007ec4:	f7f9 fcdc 	bl	8001880 <_test_assert>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	f47f af3b 	bne.w	8007d44 <mtx4_execute.7303+0x54>
  chThdSleepMilliseconds(100);
 8007ece:	20c8      	movs	r0, #200	; 0xc8
 8007ed0:	f7ff fd3e 	bl	8007950 <chThdSleep>
 8007ed4:	69a9      	ldr	r1, [r5, #24]
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
 8007ed6:	200d      	movs	r0, #13
 8007ed8:	688b      	ldr	r3, [r1, #8]
 8007eda:	1afa      	subs	r2, r7, r3
 8007edc:	4251      	negs	r1, r2
 8007ede:	4151      	adcs	r1, r2
 8007ee0:	f7f9 fcce 	bl	8001880 <_test_assert>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f47f af2d 	bne.w	8007d44 <mtx4_execute.7303+0x54>
  chMtxUnlockAll();
 8007eea:	f7fa f8f1 	bl	80020d0 <chMtxUnlockAll>
 8007eee:	69ab      	ldr	r3, [r5, #24]
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
 8007ef0:	200e      	movs	r0, #14
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	1aa3      	subs	r3, r4, r2
 8007ef6:	4259      	negs	r1, r3
 8007ef8:	4159      	adcs	r1, r3
 8007efa:	f7f9 fcc1 	bl	8001880 <_test_assert>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f47f af20 	bne.w	8007d44 <mtx4_execute.7303+0x54>
  test_wait_threads();
}
 8007f04:	b002      	add	sp, #8
 8007f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_assert(12, chThdGetPriorityX() == p1, "wrong priority level");
  chThdSleepMilliseconds(100);
  test_assert(13, chThdGetPriorityX() == p1, "wrong priority level");
  chMtxUnlockAll();
  test_assert(14, chThdGetPriorityX() == p, "wrong priority level");
  test_wait_threads();
 8007f0a:	f7fa ba99 	b.w	8002440 <test_wait_threads>
 8007f0e:	bf00      	nop
 8007f10:	20001eb8 	.word	0x20001eb8
 8007f14:	0800a1dc 	.word	0x0800a1dc
 8007f18:	08007f71 	.word	0x08007f71
 8007f1c:	20001848 	.word	0x20001848
 8007f20:	20002008 	.word	0x20002008
 8007f24:	0800a1e0 	.word	0x0800a1e0
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	20001990 	.word	0x20001990
 8007f30:	20000c38 	.word	0x20000c38
 8007f34:	20000800 	.word	0x20000800
 8007f38:	0800a2f8 	.word	0x0800a2f8
 8007f3c:	0800a1d8 	.word	0x0800a1d8

08007f40 <thread4b.7275.4058>:
  chMtxLock(&m2);
  chMtxUnlock(&m2);
  return 0;
}

static msg_t thread4b(void *p) {
 8007f40:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(150);
  chMtxLock(&m1);
 8007f42:	f640 0400 	movw	r4, #2048	; 0x800
 8007f46:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static msg_t thread4b(void *p) {

  (void)p;
  chThdSleepMilliseconds(150);
 8007f4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f4e:	f7ff fcff 	bl	8007950 <chThdSleep>
  chMtxLock(&m1);
 8007f52:	4620      	mov	r0, r4
 8007f54:	f7fa f97c 	bl	8002250 <chMtxLock>
  chMtxUnlock(&m1);
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7f9 ff19 	bl	8001d90 <chMtxUnlock>
  return 0;
}
 8007f5e:	2000      	movs	r0, #0
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	f3af 8000 	nop.w
 8007f68:	f3af 8000 	nop.w
 8007f6c:	f3af 8000 	nop.w

08007f70 <thread4a.7278.4055>:

  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static msg_t thread4a(void *p) {
 8007f70:	b510      	push	{r4, lr}

  (void)p;
  chThdSleepMilliseconds(50);
  chMtxLock(&m2);
 8007f72:	f640 4438 	movw	r4, #3128	; 0xc38
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8007f76:	2064      	movs	r0, #100	; 0x64
  chMtxLock(&m2);
 8007f78:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

static msg_t thread4a(void *p) {

  (void)p;
  chThdSleepMilliseconds(50);
 8007f7c:	f7ff fce8 	bl	8007950 <chThdSleep>
  chMtxLock(&m2);
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7fa f965 	bl	8002250 <chMtxLock>
  chMtxUnlock(&m2);
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7f9 ff02 	bl	8001d90 <chMtxUnlock>
  return 0;
}
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	bd10      	pop	{r4, pc}

08007f90 <thread1.7703>:
static void evt2_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static msg_t thread1(void *p) {
 8007f90:	b510      	push	{r4, lr}
 8007f92:	4604      	mov	r4, r0

  chThdSleepMilliseconds(50);
 8007f94:	2064      	movs	r0, #100	; 0x64
 8007f96:	f7ff fcdb 	bl	8007950 <chThdSleep>
 8007f9a:	2320      	movs	r3, #32
 8007f9c:	f383 8811 	msr	BASEPRI, r3
void chEvtSignal(thread_t *tp, eventmask_t events) {

  chDbgCheck(tp != NULL);

  chSysLock();
  chEvtSignalI(tp, events);
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f7fa f864 	bl	8002070 <chEvtSignalI>
  chSchRescheduleS();
 8007fa8:	f7f9 fdf2 	bl	8001b90 <chSchRescheduleS>
 8007fac:	2000      	movs	r0, #0
 8007fae:	f380 8811 	msr	BASEPRI, r0
  chEvtSignal((thread_t *)p, 1);
  return 0;
}
 8007fb2:	bd10      	pop	{r4, pc}
 8007fb4:	f3af 8000 	nop.w
 8007fb8:	f3af 8000 	nop.w
 8007fbc:	f3af 8000 	nop.w

08007fc0 <dyn3_execute.8084>:

static void dyn3_execute(void) {
 8007fc0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8007fc2:	4b4c      	ldr	r3, [pc, #304]	; (80080f4 <dyn3_execute.8084+0x134>)
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007fc4:	4c4c      	ldr	r4, [pc, #304]	; (80080f8 <dyn3_execute.8084+0x138>)
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8007fc6:	6998      	ldr	r0, [r3, #24]
static void dyn3_setup(void) {

  chHeapObjectInit(&heap1, test.buffer, sizeof(union test_buffers));
}

static void dyn3_execute(void) {
 8007fc8:	b082      	sub	sp, #8
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007fca:	6882      	ldr	r2, [r0, #8]
 8007fcc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007fd0:	3a01      	subs	r2, #1
 8007fd2:	4b4a      	ldr	r3, [pc, #296]	; (80080fc <dyn3_execute.8084+0x13c>)
 8007fd4:	9400      	str	r4, [sp, #0]
 8007fd6:	484a      	ldr	r0, [pc, #296]	; (8008100 <dyn3_execute.8084+0x140>)
 8007fd8:	f7fa fd42 	bl	8002a60 <chThdCreateFromHeap>
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8007fdc:	7f81      	ldrb	r1, [r0, #30]
static void dyn3_execute(void) {
  thread_t *tp;
  tprio_t prio = chThdGetPriorityX();

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
 8007fde:	4604      	mov	r4, r0
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	1a0b      	subs	r3, r1, r0
 8007fe4:	425a      	negs	r2, r3
 8007fe6:	eb52 0103 	adcs.w	r1, r2, r3
 8007fea:	f7f9 fc49 	bl	8001880 <_test_assert>
 8007fee:	b108      	cbz	r0, 8007ff4 <dyn3_execute.8084+0x34>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
}
 8007ff0:	b002      	add	sp, #8
 8007ff2:	bd10      	pop	{r4, pc}
 8007ff4:	2120      	movs	r1, #32
 8007ff6:	f381 8811 	msr	BASEPRI, r1
 */
thread_t *chThdAddRef(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->p_refs < 255, "too many references");
  tp->p_refs++;
 8007ffa:	7fa3      	ldrb	r3, [r4, #30]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	77a2      	strb	r2, [r4, #30]
 8008000:	f380 8811 	msr	BASEPRI, r0

  /* Testing references increase/decrease and final detach.*/
  tp = chThdCreateFromHeap(&heap1, WA_SIZE, prio-1, thread, "A");
  test_assert(1, tp->p_refs == 1, "wrong initial reference counter");
  chThdAddRef(tp);
  test_assert(2, tp->p_refs == 2, "references increase failure");
 8008004:	7fa1      	ldrb	r1, [r4, #30]
 8008006:	2002      	movs	r0, #2
 8008008:	1a0b      	subs	r3, r1, r0
 800800a:	425a      	negs	r2, r3
 800800c:	eb52 0103 	adcs.w	r1, r2, r3
 8008010:	f7f9 fc36 	bl	8001880 <_test_assert>
 8008014:	2800      	cmp	r0, #0
 8008016:	d1eb      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  chThdRelease(tp);
 8008018:	4620      	mov	r0, r4
 800801a:	f7fa f9c1 	bl	80023a0 <chThdRelease>
  test_assert(3, tp->p_refs == 1, "references decrease failure");
 800801e:	7fa1      	ldrb	r1, [r4, #30]
 8008020:	2003      	movs	r0, #3
 8008022:	f1b1 0c01 	subs.w	ip, r1, #1
 8008026:	f1dc 0300 	rsbs	r3, ip, #0
 800802a:	eb53 010c 	adcs.w	r1, r3, ip
 800802e:	f7f9 fc27 	bl	8001880 <_test_assert>
 8008032:	2800      	cmp	r0, #0
 8008034:	d1dc      	bne.n	8007ff0 <dyn3_execute.8084+0x30>

  /* Verify the new threads count.*/
  test_assert(4, regfind(tp), "thread missing from registry");
 8008036:	4620      	mov	r0, r4
 8008038:	f7ff fbf2 	bl	8007820 <regfind.8080>
 800803c:	4601      	mov	r1, r0
 800803e:	2004      	movs	r0, #4
 8008040:	f7f9 fc1e 	bl	8001880 <_test_assert>
 8008044:	2800      	cmp	r0, #0
 8008046:	d1d3      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  test_assert(5, regfind(tp), "thread disappeared");
 8008048:	4620      	mov	r0, r4
 800804a:	f7ff fbe9 	bl	8007820 <regfind.8080>
 800804e:	4601      	mov	r1, r0
 8008050:	2005      	movs	r0, #5
 8008052:	f7f9 fc15 	bl	8001880 <_test_assert>
 8008056:	2800      	cmp	r0, #0
 8008058:	d1ca      	bne.n	8007ff0 <dyn3_execute.8084+0x30>

  /* Detach and let the thread execute and terminate.*/
  chThdRelease(tp);
 800805a:	4620      	mov	r0, r4
 800805c:	f7fa f9a0 	bl	80023a0 <chThdRelease>
  test_assert(6, tp->p_refs == 0, "detach failure");
 8008060:	7fa2      	ldrb	r2, [r4, #30]
 8008062:	2006      	movs	r0, #6
 8008064:	f1d2 0101 	rsbs	r1, r2, #1
 8008068:	bf38      	it	cc
 800806a:	2100      	movcc	r1, #0
 800806c:	f7f9 fc08 	bl	8001880 <_test_assert>
 8008070:	2800      	cmp	r0, #0
 8008072:	d1bd      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  test_assert(7, tp->p_state == CH_STATE_READY, "invalid state");
 8008074:	7f21      	ldrb	r1, [r4, #28]
 8008076:	2007      	movs	r0, #7
 8008078:	f1d1 0101 	rsbs	r1, r1, #1
 800807c:	bf38      	it	cc
 800807e:	2100      	movcc	r1, #0
 8008080:	f7f9 fbfe 	bl	8001880 <_test_assert>
 8008084:	2800      	cmp	r0, #0
 8008086:	d1b3      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  test_assert(8, regfind(tp), "thread disappeared");
 8008088:	4620      	mov	r0, r4
 800808a:	f7ff fbc9 	bl	8007820 <regfind.8080>
 800808e:	4601      	mov	r1, r0
 8008090:	2008      	movs	r0, #8
 8008092:	f7f9 fbf5 	bl	8001880 <_test_assert>
 8008096:	2800      	cmp	r0, #0
 8008098:	d1aa      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  test_assert(9, regfind(tp), "thread disappeared");
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff fbc0 	bl	8007820 <regfind.8080>
 80080a0:	4601      	mov	r1, r0
 80080a2:	2009      	movs	r0, #9
 80080a4:	f7f9 fbec 	bl	8001880 <_test_assert>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1a1      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
 80080ac:	2064      	movs	r0, #100	; 0x64
 80080ae:	f7ff fc4f 	bl	8007950 <chThdSleep>
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");
 80080b2:	7f23      	ldrb	r3, [r4, #28]
 80080b4:	200a      	movs	r0, #10
 80080b6:	f1b3 0e0f 	subs.w	lr, r3, #15
 80080ba:	f1de 0200 	rsbs	r2, lr, #0
 80080be:	eb52 010e 	adcs.w	r1, r2, lr
 80080c2:	f7f9 fbdd 	bl	8001880 <_test_assert>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d192      	bne.n	8007ff0 <dyn3_execute.8084+0x30>

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7ff fba8 	bl	8007820 <regfind.8080>
 80080d0:	4601      	mov	r1, r0
 80080d2:	200b      	movs	r0, #11
 80080d4:	f7f9 fbd4 	bl	8001880 <_test_assert>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d189      	bne.n	8007ff0 <dyn3_execute.8084+0x30>
  test_assert(12, !regfind(tp), "thread still in registry");
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff fb9f 	bl	8007820 <regfind.8080>
 80080e2:	f080 0001 	eor.w	r0, r0, #1
 80080e6:	b2c1      	uxtb	r1, r0
 80080e8:	200c      	movs	r0, #12
}
 80080ea:	b002      	add	sp, #8
 80080ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chThdSleepMilliseconds(50);           /* The thread just terminates.      */
  test_assert(10, tp->p_state == CH_STATE_FINAL, "invalid state");

  /* Clearing the zombie by scanning the registry.*/
  test_assert(11, regfind(tp), "thread disappeared");
  test_assert(12, !regfind(tp), "thread still in registry");
 80080f0:	f7f9 bbc6 	b.w	8001880 <_test_assert>
 80080f4:	20001eb8 	.word	0x20001eb8
 80080f8:	0800a1e0 	.word	0x0800a1e0
 80080fc:	08006df1 	.word	0x08006df1
 8008100:	20001498 	.word	0x20001498
 8008104:	f3af 8000 	nop.w
 8008108:	f3af 8000 	nop.w
 800810c:	f3af 8000 	nop.w

08008110 <Thread1.11031>:
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8008110:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <Thread1.11031+0x40>)
 8008112:	4a10      	ldr	r2, [pc, #64]	; (8008154 <Thread1.11031+0x44>)
 8008114:	6998      	ldr	r0, [r3, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 8008116:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 800811a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800811e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8008158 <Thread1.11031+0x48>

/*
 * Blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {
 8008122:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 8008124:	f2c4 0501 	movt	r5, #16385	; 0x4001
 */
static THD_WORKING_AREA(waThread1, 128);
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
 8008128:	6182      	str	r2, [r0, #24]
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
    palClearPad(GPIOB, GPIOB_LED);
 800812a:	4637      	mov	r7, r6
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800812c:	f898 4000 	ldrb.w	r4, [r8]
    palClearPad(GPIOB, GPIOB_LED);
 8008130:	616f      	str	r7, [r5, #20]
static __attribute__((noreturn)) THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (TRUE) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8008132:	2c04      	cmp	r4, #4
 8008134:	bf14      	ite	ne
 8008136:	f44f 747a 	movne.w	r4, #1000	; 0x3e8
 800813a:	f44f 74fa 	moveq.w	r4, #500	; 0x1f4
    palClearPad(GPIOB, GPIOB_LED);
    chThdSleepMilliseconds(time);
 800813e:	4620      	mov	r0, r4
 8008140:	f7ff fc06 	bl	8007950 <chThdSleep>
    palSetPad(GPIOB, GPIOB_LED);
 8008144:	612e      	str	r6, [r5, #16]
    chThdSleepMilliseconds(time);
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff fc02 	bl	8007950 <chThdSleep>
 800814c:	e7ee      	b.n	800812c <Thread1.11031+0x1c>
 800814e:	bf00      	nop
 8008150:	20001eb8 	.word	0x20001eb8
 8008154:	0800a948 	.word	0x0800a948
 8008158:	20000d34 	.word	0x20000d34
 800815c:	f3af 8000 	nop.w

08008160 <RF_switch.part.4.11638>:
}

/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
 8008160:	b508      	push	{r3, lr}
 8008162:	2320      	movs	r3, #32
 8008164:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8008168:	f241 73d8 	movw	r3, #6104	; 0x17d8
 800816c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  gpt_lld_start_timer(gptp, interval);
 8008170:	4618      	mov	r0, r3
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8008172:	2204      	movs	r2, #4
  gpt_lld_start_timer(gptp, interval);
 8008174:	2123      	movs	r1, #35	; 0x23
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 8008176:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
 8008178:	f7ff fb02 	bl	8007780 <gpt_lld_start_timer>
 800817c:	2000      	movs	r0, #0
 800817e:	f380 8811 	msr	BASEPRI, r0
 8008182:	bd08      	pop	{r3, pc}
 8008184:	f3af 8000 	nop.w
 8008188:	f3af 8000 	nop.w
 800818c:	f3af 8000 	nop.w

08008190 <switch_output_callback.11666>:
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 8008190:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008194:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008198:	2210      	movs	r2, #16
 800819a:	611a      	str	r2, [r3, #16]
  SPI_CR1_MSTR | SPI_CR1_BR_0
};

static void switch_output_callback(GPTDriver *gpt_ptr) {
	RF_switch(2);
}
 800819c:	f7ff bfe0 	b.w	8008160 <RF_switch.part.4.11638>

080081a0 <switch_off_callback.11663>:
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80081a0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80081a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80081a8:	f2c4 0201 	movt	r2, #16385	; 0x4001
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80081ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80081b0:	2110      	movs	r1, #16
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80081b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
	else {
		palClearPad(GPIOB, GPIOB_RFSWITCH_A);
 80081b6:	6151      	str	r1, [r2, #20]
		palClearPad(GPIOA, GPIOA_RFSWITCH_B);/*Clear both the pins*/
 80081b8:	6158      	str	r0, [r3, #20]
 80081ba:	4770      	bx	lr
 80081bc:	f3af 8000 	nop.w

080081c0 <chprintf.10588>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80081c0:	b40e      	push	{r1, r2, r3}
 80081c2:	b500      	push	{lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	ab03      	add	r3, sp, #12
 80081c8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80081cc:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80081ce:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80081d0:	f7fc fa4e 	bl	8004670 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80081d4:	b002      	add	sp, #8
 80081d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80081da:	b003      	add	sp, #12
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <chprintf.11034>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80081e0:	b40e      	push	{r1, r2, r3}
 80081e2:	b500      	push	{lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 80081ec:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80081ee:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80081f0:	f7fc fa3e 	bl	8004670 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80081f4:	b002      	add	sp, #8
 80081f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fa:	b003      	add	sp, #12
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop

08008200 <cmd_mem.11065>:
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008200:	b530      	push	{r4, r5, lr}
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8008202:	2900      	cmp	r1, #0
/*===========================================================================*/

#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)

static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008204:	b083      	sub	sp, #12
 8008206:	4604      	mov	r4, r0
  size_t n, size;

  (void)argv;
  if (argc > 0) {
 8008208:	dd04      	ble.n	8008214 <cmd_mem.11065+0x14>
    chprintf(chp, "Usage: mem\r\n");
 800820a:	490f      	ldr	r1, [pc, #60]	; (8008248 <cmd_mem.11065+0x48>)
 800820c:	f7ff ffe8 	bl	80081e0 <chprintf.11034>
  }
  n = chHeapStatus(NULL, &size);
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u\r\n", n);
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
}
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: mem\r\n");
    return;
  }
  n = chHeapStatus(NULL, &size);
 8008214:	a901      	add	r1, sp, #4
 8008216:	2000      	movs	r0, #0
 8008218:	f7fa f85a 	bl	80022d0 <chHeapStatus>
 *
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  return (size_t)(endmem - nextmem);
 800821c:	4b0b      	ldr	r3, [pc, #44]	; (800824c <cmd_mem.11065+0x4c>)
 800821e:	4605      	mov	r5, r0
 8008220:	480b      	ldr	r0, [pc, #44]	; (8008250 <cmd_mem.11065+0x50>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	6803      	ldr	r3, [r0, #0]
  chprintf(chp, "core free memory : %u bytes\r\n", chCoreGetStatusX());
 8008226:	490b      	ldr	r1, [pc, #44]	; (8008254 <cmd_mem.11065+0x54>)
 8008228:	1ad2      	subs	r2, r2, r3
 800822a:	4620      	mov	r0, r4
 800822c:	f7ff ffd8 	bl	80081e0 <chprintf.11034>
  chprintf(chp, "heap fragments   : %u\r\n", n);
 8008230:	462a      	mov	r2, r5
 8008232:	4620      	mov	r0, r4
 8008234:	4908      	ldr	r1, [pc, #32]	; (8008258 <cmd_mem.11065+0x58>)
 8008236:	f7ff ffd3 	bl	80081e0 <chprintf.11034>
  chprintf(chp, "heap free total  : %u bytes\r\n", size);
 800823a:	4620      	mov	r0, r4
 800823c:	4907      	ldr	r1, [pc, #28]	; (800825c <cmd_mem.11065+0x5c>)
 800823e:	9a01      	ldr	r2, [sp, #4]
 8008240:	f7ff ffce 	bl	80081e0 <chprintf.11034>
 8008244:	e7e4      	b.n	8008210 <cmd_mem.11065+0x10>
 8008246:	bf00      	nop
 8008248:	0800a950 	.word	0x0800a950
 800824c:	20000d30 	.word	0x20000d30
 8008250:	20000dc8 	.word	0x20000dc8
 8008254:	0800a960 	.word	0x0800a960
 8008258:	0800a980 	.word	0x0800a980
 800825c:	0800a998 	.word	0x0800a998

08008260 <cmd_test.11049>:
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008260:	b510      	push	{r4, lr}
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8008262:	2900      	cmp	r1, #0
            states[tp->p_state]);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8008264:	b082      	sub	sp, #8
 8008266:	4604      	mov	r4, r0
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8008268:	dd05      	ble.n	8008276 <cmd_test.11049+0x16>
    chprintf(chp, "Usage: test\r\n");
 800826a:	490e      	ldr	r1, [pc, #56]	; (80082a4 <cmd_test.11049+0x44>)
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 800826c:	b002      	add	sp, #8
 800826e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: test\r\n");
 8008272:	f7ff bfb5 	b.w	80081e0 <chprintf.11034>
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <cmd_test.11049+0x48>)
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
 8008278:	2000      	movs	r0, #0
 800827a:	699a      	ldr	r2, [r3, #24]
 800827c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8008280:	6892      	ldr	r2, [r2, #8]
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <cmd_test.11049+0x4c>)
 8008284:	9400      	str	r4, [sp, #0]
 8008286:	f7fa fbeb 	bl	8002a60 <chThdCreateFromHeap>
                           TestThread, chp);
  if (tp == NULL) {
 800828a:	b120      	cbz	r0, 8008296 <cmd_test.11049+0x36>
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
}
 800828c:	b002      	add	sp, #8
 800828e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
    return;
  }
  chThdWait(tp);
 8008292:	f7fa b8b5 	b.w	8002400 <chThdWait>
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 8008296:	4906      	ldr	r1, [pc, #24]	; (80082b0 <cmd_test.11049+0x50>)
 8008298:	4620      	mov	r0, r4
    return;
  }
  chThdWait(tp);
}
 800829a:	b002      	add	sp, #8
 800829c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
  }
  tp = chThdCreateFromHeap(NULL, TEST_WA_SIZE, chThdGetPriorityX(),
                           TestThread, chp);
  if (tp == NULL) {
    chprintf(chp, "out of memory\r\n");
 80082a0:	f7ff bf9e 	b.w	80081e0 <chprintf.11034>
 80082a4:	0800a9b8 	.word	0x0800a9b8
 80082a8:	20001eb8 	.word	0x20001eb8
 80082ac:	08007991 	.word	0x08007991
 80082b0:	0800a9c8 	.word	0x0800a9c8
 80082b4:	f3af 8000 	nop.w
 80082b8:	f3af 8000 	nop.w
 80082bc:	f3af 8000 	nop.w

080082c0 <cmd_write.11041>:
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 80082c0:	2900      	cmp	r1, #0
    return;
  }
  chThdWait(tp);
}

static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 80082c2:	b538      	push	{r3, r4, r5, lr}
 80082c4:	4604      	mov	r4, r0
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
 80082c6:	dc15      	bgt.n	80082f4 <cmd_write.11041+0x34>
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
 80082c8:	4d0d      	ldr	r5, [pc, #52]	; (8008300 <cmd_write.11041+0x40>)
 80082ca:	e006      	b.n	80082da <cmd_write.11041+0x1a>
 80082cc:	6828      	ldr	r0, [r5, #0]
 80082ce:	490d      	ldr	r1, [pc, #52]	; (8008304 <cmd_write.11041+0x44>)
 80082d0:	6803      	ldr	r3, [r0, #0]
 80082d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082d6:	480a      	ldr	r0, [pc, #40]	; (8008300 <cmd_write.11041+0x40>)
 80082d8:	4798      	blx	r3
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
    return;
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	2100      	movs	r1, #0
 80082de:	4620      	mov	r0, r4
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	4790      	blx	r2
 80082e4:	3001      	adds	r0, #1
 80082e6:	d0f1      	beq.n	80082cc <cmd_write.11041+0xc>
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 80082e8:	4907      	ldr	r1, [pc, #28]	; (8008308 <cmd_write.11041+0x48>)
 80082ea:	4620      	mov	r0, r4
}
 80082ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
 80082f0:	f7ff bf76 	b.w	80081e0 <chprintf.11034>
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 80082f4:	4905      	ldr	r1, [pc, #20]	; (800830c <cmd_write.11041+0x4c>)

  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
    chSequentialStreamWrite(&SDU1, buf, sizeof buf - 1);
  }
  chprintf(chp, "\r\n\nstopped\r\n");
}
 80082f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
      "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";

  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: write\r\n");
 80082fa:	f7ff bf71 	b.w	80081e0 <chprintf.11034>
 80082fe:	bf00      	nop
 8008300:	2000153c 	.word	0x2000153c
 8008304:	20000834 	.word	0x20000834
 8008308:	0800a9d8 	.word	0x0800a9d8
 800830c:	0800a9e8 	.word	0x0800a9e8

08008310 <chprintf.11613>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008310:	b40e      	push	{r1, r2, r3}
 8008312:	b500      	push	{lr}
 8008314:	b082      	sub	sp, #8
 8008316:	ab03      	add	r3, sp, #12
 8008318:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
 800831c:	461a      	mov	r2, r3
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800831e:	9301      	str	r3, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 8008320:	f7fc f9a6 	bl	8004670 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8008324:	b002      	add	sp, #8
 8008326:	f85d eb04 	ldr.w	lr, [sp], #4
 800832a:	b003      	add	sp, #12
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <silabs_get_part_id>:
	chBSemSignal(&Silabs_busy);
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
 8008330:	b929      	cbnz	r1, 800833e <silabs_get_part_id+0xe>
		chprintf(chp, "Gets part ID, Usage: p \r\n");
		return;
	}
	chprintf(chp, "%4X\r\n",Silabs_Part_ID);
 8008332:	4b04      	ldr	r3, [pc, #16]	; (8008344 <silabs_get_part_id+0x14>)
 8008334:	4904      	ldr	r1, [pc, #16]	; (8008348 <silabs_get_part_id+0x18>)
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	b292      	uxth	r2, r2
 800833a:	f7ff bfe9 	b.w	8008310 <chprintf.11613>
	chBSemWaitTimeout(&Silabs_callback, MS2ST(1000));	
}

void silabs_get_part_id(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc) {
		chprintf(chp, "Gets part ID, Usage: p \r\n");
 800833e:	4903      	ldr	r1, [pc, #12]	; (800834c <silabs_get_part_id+0x1c>)
 8008340:	f7ff bfe6 	b.w	8008310 <chprintf.11613>
 8008344:	20001450 	.word	0x20001450
 8008348:	0800aa14 	.word	0x0800aa14
 800834c:	0800a9f8 	.word	0x0800a9f8

08008350 <msg1_execute.7393>:

static void msg1_execute(void) {
 8008350:	b570      	push	{r4, r5, r6, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008352:	f641 63b8 	movw	r3, #7864	; 0x1eb8
 8008356:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800835a:	6998      	ldr	r0, [r3, #24]
 800835c:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing the whole messages loop.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800835e:	6882      	ldr	r2, [r0, #8]
 8008360:	f242 0351 	movw	r3, #8273	; 0x2051
 8008364:	9000      	str	r0, [sp, #0]
 8008366:	f641 0048 	movw	r0, #6216	; 0x1848
 800836a:	3201      	adds	r2, #1
 800836c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008370:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008374:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008378:	f7f9 fd52 	bl	8001e20 <chThdCreateStatic>
 800837c:	f242 0108 	movw	r1, #8200	; 0x2008
 8008380:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008384:	6008      	str	r0, [r1, #0]
                                 thread, chThdGetSelfX());
  tp = chMsgWait();
 8008386:	f7f9 fda3 	bl	8001ed0 <chMsgWait>
 800838a:	2520      	movs	r5, #32
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 800838c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800838e:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8008392:	4631      	mov	r1, r6
 8008394:	f7f9 fccc 	bl	8001d30 <chSchWakeupS>
 8008398:	2400      	movs	r4, #0
 800839a:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 800839e:	b2f0      	uxtb	r0, r6
 80083a0:	f7f9 fa86 	bl	80018b0 <test_emit_token>
  tp = chMsgWait();
 80083a4:	f7f9 fd94 	bl	8001ed0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 80083a8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80083aa:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80083ae:	4631      	mov	r1, r6
 80083b0:	f7f9 fcbe 	bl	8001d30 <chSchWakeupS>
 80083b4:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80083b8:	b2f0      	uxtb	r0, r6
 80083ba:	f7f9 fa79 	bl	80018b0 <test_emit_token>
  tp = chMsgWait();
 80083be:	f7f9 fd87 	bl	8001ed0 <chMsgWait>
 *
 * @api
 */
static inline msg_t chMsgGet(thread_t *tp) {

  return tp->p_msg;
 80083c2:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80083c4:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 80083c8:	4631      	mov	r1, r6
 80083ca:	f7f9 fcb1 	bl	8001d30 <chSchWakeupS>
 80083ce:	f384 8811 	msr	BASEPRI, r4
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
 80083d2:	b2f0      	uxtb	r0, r6
 80083d4:	f7f9 fa6c 	bl	80018b0 <test_emit_token>
  test_assert_sequence(1, "ABC");
 80083d8:	f24a 41d0 	movw	r1, #42192	; 0xa4d0
 80083dc:	2001      	movs	r0, #1
 80083de:	f6c0 0100 	movt	r1, #2048	; 0x800
}
 80083e2:	b002      	add	sp, #8
 80083e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  test_emit_token(msg);
  tp = chMsgWait();
  msg = chMsgGet(tp);
  chMsgRelease(tp, msg);
  test_emit_token(msg);
  test_assert_sequence(1, "ABC");
 80083e8:	f7f9 ba02 	b.w	80017f0 <_test_assert_sequence>
 80083ec:	f3af 8000 	nop.w

080083f0 <cmd_info.10627>:
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80083f0:	b510      	push	{r4, lr}

  (void)argv;
  if (argc > 0) {
 80083f2:	2900      	cmp	r1, #0
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 80083f4:	b082      	sub	sp, #8
 80083f6:	4604      	mov	r4, r0

  (void)argv;
  if (argc > 0) {
 80083f8:	dd06      	ble.n	8008408 <cmd_info.10627+0x18>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80083fa:	4919      	ldr	r1, [pc, #100]	; (8008460 <cmd_info.10627+0x70>)
 80083fc:	4a19      	ldr	r2, [pc, #100]	; (8008464 <cmd_info.10627+0x74>)
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
#endif
#endif
}
 80083fe:	b002      	add	sp, #8
 8008400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8008404:	f7ff bedc 	b.w	80081c0 <chprintf.10588>
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8008408:	4917      	ldr	r1, [pc, #92]	; (8008468 <cmd_info.10627+0x78>)
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <cmd_info.10627+0x7c>)
 800840c:	f7ff fed8 	bl	80081c0 <chprintf.10588>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8008410:	4620      	mov	r0, r4
 8008412:	4917      	ldr	r1, [pc, #92]	; (8008470 <cmd_info.10627+0x80>)
 8008414:	4a17      	ldr	r2, [pc, #92]	; (8008474 <cmd_info.10627+0x84>)
 8008416:	f7ff fed3 	bl	80081c0 <chprintf.10588>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 800841a:	4620      	mov	r0, r4
 800841c:	4916      	ldr	r1, [pc, #88]	; (8008478 <cmd_info.10627+0x88>)
 800841e:	4a17      	ldr	r2, [pc, #92]	; (800847c <cmd_info.10627+0x8c>)
 8008420:	f7ff fece 	bl	80081c0 <chprintf.10588>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8008424:	4620      	mov	r0, r4
 8008426:	4916      	ldr	r1, [pc, #88]	; (8008480 <cmd_info.10627+0x90>)
 8008428:	4a16      	ldr	r2, [pc, #88]	; (8008484 <cmd_info.10627+0x94>)
 800842a:	f7ff fec9 	bl	80081c0 <chprintf.10588>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 800842e:	4620      	mov	r0, r4
 8008430:	4915      	ldr	r1, [pc, #84]	; (8008488 <cmd_info.10627+0x98>)
 8008432:	4a16      	ldr	r2, [pc, #88]	; (800848c <cmd_info.10627+0x9c>)
 8008434:	f7ff fec4 	bl	80081c0 <chprintf.10588>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8008438:	4620      	mov	r0, r4
 800843a:	4915      	ldr	r1, [pc, #84]	; (8008490 <cmd_info.10627+0xa0>)
 800843c:	4a15      	ldr	r2, [pc, #84]	; (8008494 <cmd_info.10627+0xa4>)
 800843e:	f7ff febf 	bl	80081c0 <chprintf.10588>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8008442:	4620      	mov	r0, r4
 8008444:	4914      	ldr	r1, [pc, #80]	; (8008498 <cmd_info.10627+0xa8>)
 8008446:	4a15      	ldr	r2, [pc, #84]	; (800849c <cmd_info.10627+0xac>)
 8008448:	f7ff feba 	bl	80081c0 <chprintf.10588>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 800844c:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <cmd_info.10627+0xb0>)
 800844e:	4620      	mov	r0, r4
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4914      	ldr	r1, [pc, #80]	; (80084a4 <cmd_info.10627+0xb4>)
 8008454:	4a14      	ldr	r2, [pc, #80]	; (80084a8 <cmd_info.10627+0xb8>)
 8008456:	4b15      	ldr	r3, [pc, #84]	; (80084ac <cmd_info.10627+0xbc>)
 8008458:	f7ff feb2 	bl	80081c0 <chprintf.10588>
#endif
#endif
}
 800845c:	b002      	add	sp, #8
 800845e:	bd10      	pop	{r4, pc}
 8008460:	0800aa30 	.word	0x0800aa30
 8008464:	0800aa3c 	.word	0x0800aa3c
 8008468:	0800aa44 	.word	0x0800aa44
 800846c:	0800a7d0 	.word	0x0800a7d0
 8008470:	0800aa58 	.word	0x0800aa58
 8008474:	0800a81c 	.word	0x0800a81c
 8008478:	0800aa6c 	.word	0x0800aa6c
 800847c:	0800a878 	.word	0x0800a878
 8008480:	0800aa80 	.word	0x0800aa80
 8008484:	0800a894 	.word	0x0800a894
 8008488:	0800aa94 	.word	0x0800aa94
 800848c:	0800a8b4 	.word	0x0800a8b4
 8008490:	0800aaa8 	.word	0x0800aaa8
 8008494:	0800a8e0 	.word	0x0800a8e0
 8008498:	0800aabc 	.word	0x0800aabc
 800849c:	0800a920 	.word	0x0800a920
 80084a0:	0800aaf8 	.word	0x0800aaf8
 80084a4:	0800aad0 	.word	0x0800aad0
 80084a8:	0800aae8 	.word	0x0800aae8
 80084ac:	0800aaf4 	.word	0x0800aaf4

080084b0 <cmd_systime.10619>:

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 80084b0:	2900      	cmp	r1, #0
 80084b2:	dd03      	ble.n	80084bc <cmd_systime.10619+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80084b4:	4908      	ldr	r1, [pc, #32]	; (80084d8 <cmd_systime.10619+0x28>)
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <cmd_systime.10619+0x2c>)
 80084b8:	f7ff be82 	b.w	80081c0 <chprintf.10588>
 80084bc:	2320      	movs	r3, #32
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80084c6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80084c8:	2300      	movs	r3, #0
 80084ca:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 80084ce:	4904      	ldr	r1, [pc, #16]	; (80084e0 <cmd_systime.10619+0x30>)
 80084d0:	b292      	uxth	r2, r2
 80084d2:	f7ff be75 	b.w	80081c0 <chprintf.10588>
 80084d6:	bf00      	nop
 80084d8:	0800aa30 	.word	0x0800aa30
 80084dc:	0800ab04 	.word	0x0800ab04
 80084e0:	0800ab0c 	.word	0x0800ab0c
 80084e4:	f3af 8000 	nop.w
 80084e8:	f3af 8000 	nop.w
 80084ec:	f3af 8000 	nop.w

080084f0 <evt1_execute.7722>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
static ROMCONST evhandler_t evhndl[] = {h1, h2, h3};

static void evt1_execute(void) {
 80084f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f4:	4c31      	ldr	r4, [pc, #196]	; (80085bc <evt1_execute.7722+0xcc>)
 80084f6:	b08a      	sub	sp, #40	; 0x28
 80084f8:	2020      	movs	r0, #32
 80084fa:	6024      	str	r4, [r4, #0]
 80084fc:	f380 8811 	msr	BASEPRI, r0
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008500:	492f      	ldr	r1, [pc, #188]	; (80085c0 <evt1_execute.7722+0xd0>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	ad0a      	add	r5, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 8008506:	698e      	ldr	r6, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008508:	f845 3d28 	str.w	r3, [r5, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 800850c:	2701      	movs	r7, #1
  elp->el_flags    = 0;
 800850e:	2300      	movs	r3, #0
  elp->el_wflags   = wflags;
 8008510:	f04f 32ff 	mov.w	r2, #4294967295

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8008514:	6025      	str	r5, [r4, #0]
  elp->el_listener = currp;
 8008516:	9601      	str	r6, [sp, #4]
  elp->el_events   = events;
 8008518:	9702      	str	r7, [sp, #8]
  elp->el_flags    = 0;
 800851a:	9303      	str	r3, [sp, #12]
  elp->el_wflags   = wflags;
 800851c:	9204      	str	r2, [sp, #16]
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f380 8811 	msr	BASEPRI, r0
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8008526:	6820      	ldr	r0, [r4, #0]
 8008528:	ae0a      	add	r6, sp, #40	; 0x28
  esp->es_next     = elp;
  elp->el_listener = currp;
 800852a:	6989      	ldr	r1, [r1, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800852c:	f846 0d14 	str.w	r0, [r6, #-20]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8008530:	f04f 0802 	mov.w	r8, #2

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8008534:	6026      	str	r6, [r4, #0]
  elp->el_listener = currp;
 8008536:	9106      	str	r1, [sp, #24]
  elp->el_events   = events;
 8008538:	f8cd 801c 	str.w	r8, [sp, #28]
  elp->el_flags    = 0;
 800853c:	9308      	str	r3, [sp, #32]
  elp->el_wflags   = wflags;
 800853e:	9209      	str	r2, [sp, #36]	; 0x24
 8008540:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline bool chEvtIsListeningI(event_source_t *esp) {

  return (bool)((void *)esp != (void *)esp->es_next);
 8008544:	6823      	ldr	r3, [r4, #0]
   * Testing chEvtRegisterMask() and chEvtUnregister().
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
 8008546:	4638      	mov	r0, r7
 8008548:	1b19      	subs	r1, r3, r4
 800854a:	bf18      	it	ne
 800854c:	2101      	movne	r1, #1
 800854e:	f7f9 f997 	bl	8001880 <_test_assert>
 8008552:	b110      	cbz	r0, 800855a <evt1_execute.7722+0x6a>
  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
}
 8008554:	b00a      	add	sp, #40	; 0x28
 8008556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   */
  chEvtObjectInit(&es1);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es1, &el2, 2);
  test_assert(1, chEvtIsListeningI(&es1), "no listener");
  chEvtUnregister(&es1, &el1);
 800855a:	4620      	mov	r0, r4
 800855c:	4669      	mov	r1, sp
 800855e:	f7f9 fa7f 	bl	8001a60 <chEvtUnregister>
 8008562:	6822      	ldr	r2, [r4, #0]
  test_assert(2, chEvtIsListeningI(&es1), "no listener");
 8008564:	4640      	mov	r0, r8
 8008566:	1b11      	subs	r1, r2, r4
 8008568:	bf18      	it	ne
 800856a:	2101      	movne	r1, #1
 800856c:	f7f9 f988 	bl	8001880 <_test_assert>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1ef      	bne.n	8008554 <evt1_execute.7722+0x64>
  chEvtUnregister(&es1, &el2);
 8008574:	4620      	mov	r0, r4
 8008576:	4631      	mov	r1, r6
 8008578:	f7f9 fa72 	bl	8001a60 <chEvtUnregister>
  test_assert(3, !chEvtIsListeningI(&es1), "stuck listener");
 800857c:	6821      	ldr	r1, [r4, #0]
 800857e:	2003      	movs	r0, #3
 8008580:	1b0b      	subs	r3, r1, r4
 8008582:	425a      	negs	r2, r3
 8008584:	eb52 0103 	adcs.w	r1, r2, r3
 8008588:	f7f9 f97a 	bl	8001880 <_test_assert>
 800858c:	2800      	cmp	r0, #0
 800858e:	d1e1      	bne.n	8008554 <evt1_execute.7722+0x64>
  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 8008590:	4e0c      	ldr	r6, [pc, #48]	; (80085c4 <evt1_execute.7722+0xd4>)
 8008592:	2507      	movs	r5, #7
 8008594:	4604      	mov	r4, r0
 8008596:	e001      	b.n	800859c <evt1_execute.7722+0xac>
    }
    eid++;
 8008598:	3401      	adds	r4, #1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = 0;
  while (events) {
 800859a:	b155      	cbz	r5, 80085b2 <evt1_execute.7722+0xc2>
    if (events & EVENT_MASK(eid)) {
 800859c:	fa07 f104 	lsl.w	r1, r7, r4
 80085a0:	4229      	tst	r1, r5
 80085a2:	d0f9      	beq.n	8008598 <evt1_execute.7722+0xa8>
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
 80085a4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80085a8:	4620      	mov	r0, r4

  eid = 0;
  while (events) {
    if (events & EVENT_MASK(eid)) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
 80085aa:	ea25 0501 	bic.w	r5, r5, r1
      handlers[eid](eid);
 80085ae:	4798      	blx	r3
 80085b0:	e7f2      	b.n	8008598 <evt1_execute.7722+0xa8>

  /*
   * Testing chEvtDispatch().
   */
  chEvtDispatch(evhndl, 7);
  test_assert_sequence(4, "ABC");
 80085b2:	2004      	movs	r0, #4
 80085b4:	4904      	ldr	r1, [pc, #16]	; (80085c8 <evt1_execute.7722+0xd8>)
 80085b6:	f7f9 f91b 	bl	80017f0 <_test_assert_sequence>
 80085ba:	e7cb      	b.n	8008554 <evt1_execute.7722+0x64>
 80085bc:	20000c58 	.word	0x20000c58
 80085c0:	20001eb8 	.word	0x20001eb8
 80085c4:	0800aa20 	.word	0x0800aa20
 80085c8:	0800a4d0 	.word	0x0800a4d0
 80085cc:	f3af 8000 	nop.w

080085d0 <thd4_execute.6832>:
 * <h2>Description</h2>
 * Delay APIs and associated macros are tested, the invoking thread is verified
 * to wake up at the exact expected time.
 */

static void thd4_execute(void) {
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  systime_t time;

  test_wait_tick();
 80085d2:	f7ff f9cd 	bl	8007970 <test_wait_tick>
 80085d6:	2620      	movs	r6, #32
 80085d8:	f386 8811 	msr	BASEPRI, r6
 80085dc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 80085e0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80085e2:	2300      	movs	r3, #0
 80085e4:	b2a4      	uxth	r4, r4
 80085e6:	f383 8811 	msr	BASEPRI, r3

  /* Timeouts in microseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMicroseconds(100000);
 80085ea:	20c8      	movs	r0, #200	; 0xc8
 80085ec:	f7ff f9b0 	bl	8007950 <chThdSleep>
  test_assert_time_window(1,
 80085f0:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80085f4:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 80085f8:	2001      	movs	r0, #1
 80085fa:	b289      	uxth	r1, r1
 80085fc:	b292      	uxth	r2, r2
 80085fe:	f7f9 f8cf 	bl	80017a0 <_test_assert_time_window>
 8008602:	b100      	cbz	r0, 8008606 <thd4_execute.6832+0x36>
 8008604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008606:	f386 8811 	msr	BASEPRI, r6
 800860a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800860c:	b2a4      	uxth	r4, r4
 800860e:	f380 8811 	msr	BASEPRI, r0
                          time + US2ST(100000),
                          time + US2ST(100000) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in milliseconds.*/
  time = chVTGetSystemTime();
  chThdSleepMilliseconds(100);
 8008612:	20c8      	movs	r0, #200	; 0xc8
 8008614:	f7ff f99c 	bl	8007950 <chThdSleep>
  test_assert_time_window(2,
 8008618:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 800861c:	f104 02ca 	add.w	r2, r4, #202	; 0xca
 8008620:	2002      	movs	r0, #2
 8008622:	b299      	uxth	r1, r3
 8008624:	b292      	uxth	r2, r2
 8008626:	f7f9 f8bb 	bl	80017a0 <_test_assert_time_window>
 800862a:	2800      	cmp	r0, #0
 800862c:	d1ea      	bne.n	8008604 <thd4_execute.6832+0x34>
 800862e:	f386 8811 	msr	BASEPRI, r6
 8008632:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008634:	b28c      	uxth	r4, r1
 8008636:	f380 8811 	msr	BASEPRI, r0
                          time + MS2ST(100),
                          time + MS2ST(100) + CH_CFG_ST_TIMEDELTA);

  /* Timeouts in seconds.*/
  time = chVTGetSystemTime();
  chThdSleepSeconds(1);
 800863a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800863e:	f7ff f987 	bl	8007950 <chThdSleep>
  test_assert_time_window(3,
 8008642:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 8008646:	f204 72d2 	addw	r2, r4, #2002	; 0x7d2
 800864a:	2003      	movs	r0, #3
 800864c:	b299      	uxth	r1, r3
 800864e:	b292      	uxth	r2, r2
 8008650:	f7f9 f8a6 	bl	80017a0 <_test_assert_time_window>
 8008654:	2800      	cmp	r0, #0
 8008656:	d1d5      	bne.n	8008604 <thd4_execute.6832+0x34>
 8008658:	f386 8811 	msr	BASEPRI, r6
 800865c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800865e:	b2bf      	uxth	r7, r7
 8008660:	f380 8811 	msr	BASEPRI, r0
                          time + S2ST(1),
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
 8008664:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8008668:	b284      	uxth	r4, r0
 800866a:	f386 8811 	msr	BASEPRI, r6
 800866e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 * @api
 */
void chThdSleepUntil(systime_t time) {

  chSysLock();
  if ((time -= chVTGetSystemTimeX()) > 0)
 8008670:	1a63      	subs	r3, r4, r1
 8008672:	b299      	uxth	r1, r3
 8008674:	b959      	cbnz	r1, 800868e <thd4_execute.6832+0xbe>
 8008676:	2200      	movs	r2, #0
 8008678:	f382 8811 	msr	BASEPRI, r2
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800867c:	f107 03ca 	add.w	r3, r7, #202	; 0xca
 8008680:	2004      	movs	r0, #4
 8008682:	4621      	mov	r1, r4
 8008684:	b29a      	uxth	r2, r3
                          time,
                          time + CH_CFG_ST_TIMEDELTA);
}
 8008686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          time + S2ST(1) + CH_CFG_ST_TIMEDELTA);

  /* Absolute timelines.*/
  time = chVTGetSystemTime() + MS2ST(100);
  chThdSleepUntil(time);
  test_assert_time_window(4,
 800868a:	f7f9 b889 	b.w	80017a0 <_test_assert_time_window>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800868e:	2008      	movs	r0, #8
 8008690:	f7fd fa16 	bl	8005ac0 <chSchGoSleepTimeoutS>
 8008694:	e7ef      	b.n	8008676 <thd4_execute.6832+0xa6>
 8008696:	bf00      	nop
 8008698:	f3af 8000 	nop.w
 800869c:	f3af 8000 	nop.w

080086a0 <sem2_execute.7099>:

static void sem2_execute(void) {
 80086a0:	b570      	push	{r4, r5, r6, lr}
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80086a2:	4ca2      	ldr	r4, [pc, #648]	; (800892c <sem2_execute.7099+0x28c>)
 80086a4:	2100      	movs	r1, #0
  chSchRescheduleS();
  chSysUnlock();
  return 0;
}

static void sem2_execute(void) {
 80086a6:	b082      	sub	sp, #8
  msg_t msg;

  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7fd fbc1 	bl	8005e30 <chSemWaitTimeout>
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
 80086ae:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 80086b2:	f1dc 0100 	rsbs	r1, ip, #0
 80086b6:	eb51 010c 	adcs.w	r1, r1, ip
 80086ba:	2001      	movs	r0, #1
 80086bc:	f7f9 f8e0 	bl	8001880 <_test_assert>
 80086c0:	b108      	cbz	r0, 80086c6 <sem2_execute.7099+0x26>
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
}
 80086c2:	b002      	add	sp, #8
 80086c4:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @notapi
 */
static inline bool queue_isempty(threads_queue_t *tqp) {

  return (bool)(tqp->p_next == (thread_t *)tqp);
 80086c6:	6822      	ldr	r2, [r4, #0]
  /*
   * Testing special case TIME_IMMEDIATE.
   */
  msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
  test_assert(1, msg == MSG_TIMEOUT, "wrong wake-up message");
  test_assert(2, queue_isempty(&sem1.s_queue), "queue not empty");
 80086c8:	2002      	movs	r0, #2
 80086ca:	ebb2 0e04 	subs.w	lr, r2, r4
 80086ce:	f1de 0300 	rsbs	r3, lr, #0
 80086d2:	eb53 010e 	adcs.w	r1, r3, lr
 80086d6:	f7f9 f8d3 	bl	8001880 <_test_assert>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1f1      	bne.n	80086c2 <sem2_execute.7099+0x22>
  test_assert(3, sem1.s_cnt == 0, "counter not zero");
 80086de:	68a5      	ldr	r5, [r4, #8]
 80086e0:	2003      	movs	r0, #3
 80086e2:	f1d5 0101 	rsbs	r1, r5, #1
 80086e6:	bf38      	it	cc
 80086e8:	2100      	movcc	r1, #0
 80086ea:	f7f9 f8c9 	bl	8001880 <_test_assert>
 80086ee:	4605      	mov	r5, r0
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1e6      	bne.n	80086c2 <sem2_execute.7099+0x22>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80086f4:	488e      	ldr	r0, [pc, #568]	; (8008930 <sem2_execute.7099+0x290>)

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80086f6:	4b8f      	ldr	r3, [pc, #572]	; (8008934 <sem2_execute.7099+0x294>)
 80086f8:	6982      	ldr	r2, [r0, #24]
 80086fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80086fe:	6892      	ldr	r2, [r2, #8]
 8008700:	488d      	ldr	r0, [pc, #564]	; (8008938 <sem2_execute.7099+0x298>)
 8008702:	3a01      	subs	r2, #1
 8008704:	9500      	str	r5, [sp, #0]
 8008706:	f7f9 fb8b 	bl	8001e20 <chThdCreateStatic>
 800870a:	4b8c      	ldr	r3, [pc, #560]	; (800893c <sem2_execute.7099+0x29c>)
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 800870c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  test_assert(3, sem1.s_cnt == 0, "counter not zero");

  /*
   * Testing not timeout condition.
   */
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008710:	6018      	str	r0, [r3, #0]
                                 thread2, 0);
  msg = chSemWaitTimeout(&sem1, MS2ST(500));
 8008712:	4620      	mov	r0, r4
 8008714:	f7fd fb8c 	bl	8005e30 <chSemWaitTimeout>
 8008718:	4605      	mov	r5, r0
  test_wait_threads();
 800871a:	f7f9 fe91 	bl	8002440 <test_wait_threads>
  test_assert(4, msg == MSG_OK, "wrong wake-up message");
 800871e:	2004      	movs	r0, #4
 8008720:	f1d5 0101 	rsbs	r1, r5, #1
 8008724:	bf38      	it	cc
 8008726:	2100      	movcc	r1, #0
 8008728:	f7f9 f8aa 	bl	8001880 <_test_assert>
 800872c:	2800      	cmp	r0, #0
 800872e:	d1c8      	bne.n	80086c2 <sem2_execute.7099+0x22>
 8008730:	6821      	ldr	r1, [r4, #0]
  test_assert(5, queue_isempty(&sem1.s_queue), "queue not empty");
 8008732:	2005      	movs	r0, #5
 8008734:	1b0a      	subs	r2, r1, r4
 8008736:	4253      	negs	r3, r2
 8008738:	eb53 0102 	adcs.w	r1, r3, r2
 800873c:	f7f9 f8a0 	bl	8001880 <_test_assert>
 8008740:	2800      	cmp	r0, #0
 8008742:	d1be      	bne.n	80086c2 <sem2_execute.7099+0x22>
  test_assert(6, sem1.s_cnt == 0, "counter not zero");
 8008744:	68a5      	ldr	r5, [r4, #8]
 8008746:	2006      	movs	r0, #6
 8008748:	f1d5 0101 	rsbs	r1, r5, #1
 800874c:	bf38      	it	cc
 800874e:	2100      	movcc	r1, #0
 8008750:	f7f9 f896 	bl	8001880 <_test_assert>
 8008754:	4605      	mov	r5, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d1b3      	bne.n	80086c2 <sem2_execute.7099+0x22>

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
 800875a:	f7ff f909 	bl	8007970 <test_wait_tick>
 800875e:	2620      	movs	r6, #32
 8008760:	f386 8811 	msr	BASEPRI, r6
 8008764:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008768:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800876a:	f385 8811 	msr	BASEPRI, r5
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 800876e:	2041      	movs	r0, #65	; 0x41
 8008770:	f7f9 f89e 	bl	80018b0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008774:	2164      	movs	r1, #100	; 0x64
 8008776:	4620      	mov	r0, r4
 8008778:	f7fd fb5a 	bl	8005e30 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 800877c:	f1b0 32ff 	subs.w	r2, r0, #4294967295
 8008780:	4251      	negs	r1, r2
 8008782:	4151      	adcs	r1, r2
 8008784:	2007      	movs	r0, #7
 8008786:	f7f9 f87b 	bl	8001880 <_test_assert>
 800878a:	2800      	cmp	r0, #0
 800878c:	d199      	bne.n	80086c2 <sem2_execute.7099+0x22>
 800878e:	6823      	ldr	r3, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008790:	2008      	movs	r0, #8
 8008792:	ebb3 0c04 	subs.w	ip, r3, r4
 8008796:	f1dc 0200 	rsbs	r2, ip, #0
 800879a:	eb52 010c 	adcs.w	r1, r2, ip
 800879e:	f7f9 f86f 	bl	8001880 <_test_assert>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d18d      	bne.n	80086c2 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80087a6:	68a1      	ldr	r1, [r4, #8]
 80087a8:	2009      	movs	r0, #9
 80087aa:	f1d1 0101 	rsbs	r1, r1, #1
 80087ae:	bf38      	it	cc
 80087b0:	2100      	movcc	r1, #0
 80087b2:	f7f9 f865 	bl	8001880 <_test_assert>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d183      	bne.n	80086c2 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 80087ba:	2042      	movs	r0, #66	; 0x42
 80087bc:	f7f9 f878 	bl	80018b0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 80087c0:	2164      	movs	r1, #100	; 0x64
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7fd fb34 	bl	8005e30 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 80087c8:	f1b0 3eff 	subs.w	lr, r0, #4294967295
 80087cc:	f1de 0000 	rsbs	r0, lr, #0
 80087d0:	eb50 010e 	adcs.w	r1, r0, lr
 80087d4:	2007      	movs	r0, #7
 80087d6:	f7f9 f853 	bl	8001880 <_test_assert>
 80087da:	2800      	cmp	r0, #0
 80087dc:	f47f af71 	bne.w	80086c2 <sem2_execute.7099+0x22>
 80087e0:	6825      	ldr	r5, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80087e2:	2008      	movs	r0, #8
 80087e4:	1b2b      	subs	r3, r5, r4
 80087e6:	425a      	negs	r2, r3
 80087e8:	eb52 0103 	adcs.w	r1, r2, r3
 80087ec:	4625      	mov	r5, r4
 80087ee:	f7f9 f847 	bl	8001880 <_test_assert>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f47f af65 	bne.w	80086c2 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80087f8:	68a1      	ldr	r1, [r4, #8]
 80087fa:	2009      	movs	r0, #9
 80087fc:	f1d1 0101 	rsbs	r1, r1, #1
 8008800:	bf38      	it	cc
 8008802:	2100      	movcc	r1, #0
 8008804:	f7f9 f83c 	bl	8001880 <_test_assert>
 8008808:	2800      	cmp	r0, #0
 800880a:	f47f af5a 	bne.w	80086c2 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 800880e:	2043      	movs	r0, #67	; 0x43
 8008810:	f7f9 f84e 	bl	80018b0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008814:	2164      	movs	r1, #100	; 0x64
 8008816:	4620      	mov	r0, r4
 8008818:	f7fd fb0a 	bl	8005e30 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 800881c:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 8008820:	4243      	negs	r3, r0
 8008822:	eb53 0100 	adcs.w	r1, r3, r0
 8008826:	2007      	movs	r0, #7
 8008828:	f7f9 f82a 	bl	8001880 <_test_assert>
 800882c:	2800      	cmp	r0, #0
 800882e:	f47f af48 	bne.w	80086c2 <sem2_execute.7099+0x22>
 8008832:	6822      	ldr	r2, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008834:	2008      	movs	r0, #8
 8008836:	1b13      	subs	r3, r2, r4
 8008838:	4259      	negs	r1, r3
 800883a:	4159      	adcs	r1, r3
 800883c:	f7f9 f820 	bl	8001880 <_test_assert>
 8008840:	2800      	cmp	r0, #0
 8008842:	f47f af3e 	bne.w	80086c2 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 8008846:	68a2      	ldr	r2, [r4, #8]
 8008848:	2009      	movs	r0, #9
 800884a:	f1d2 0101 	rsbs	r1, r2, #1
 800884e:	bf38      	it	cc
 8008850:	2100      	movcc	r1, #0
 8008852:	f7f9 f815 	bl	8001880 <_test_assert>
 8008856:	2800      	cmp	r0, #0
 8008858:	f47f af33 	bne.w	80086c2 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 800885c:	2044      	movs	r0, #68	; 0x44
 800885e:	f7f9 f827 	bl	80018b0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 8008862:	2164      	movs	r1, #100	; 0x64
 8008864:	4620      	mov	r0, r4
 8008866:	f7fd fae3 	bl	8005e30 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 800886a:	f1b0 3cff 	subs.w	ip, r0, #4294967295
 800886e:	f1dc 0000 	rsbs	r0, ip, #0
 8008872:	eb50 010c 	adcs.w	r1, r0, ip
 8008876:	2007      	movs	r0, #7
 8008878:	f7f9 f802 	bl	8001880 <_test_assert>
 800887c:	2800      	cmp	r0, #0
 800887e:	f47f af20 	bne.w	80086c2 <sem2_execute.7099+0x22>
 8008882:	6823      	ldr	r3, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 8008884:	2008      	movs	r0, #8
 8008886:	ebb3 0e04 	subs.w	lr, r3, r4
 800888a:	f1de 0100 	rsbs	r1, lr, #0
 800888e:	eb51 010e 	adcs.w	r1, r1, lr
 8008892:	f7f8 fff5 	bl	8001880 <_test_assert>
 8008896:	2800      	cmp	r0, #0
 8008898:	f47f af13 	bne.w	80086c2 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 800889c:	68a2      	ldr	r2, [r4, #8]
 800889e:	2009      	movs	r0, #9
 80088a0:	f1d2 0101 	rsbs	r1, r2, #1
 80088a4:	bf38      	it	cc
 80088a6:	2100      	movcc	r1, #0
 80088a8:	f7f8 ffea 	bl	8001880 <_test_assert>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f47f af08 	bne.w	80086c2 <sem2_execute.7099+0x22>
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
  for (i = 0; i < 5; i++) {
    test_emit_token('A' + i);
 80088b2:	2045      	movs	r0, #69	; 0x45
 80088b4:	f7f8 fffc 	bl	80018b0 <test_emit_token>
    msg = chSemWaitTimeout(&sem1, MS2ST(50));
 80088b8:	2164      	movs	r1, #100	; 0x64
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7fd fab8 	bl	8005e30 <chSemWaitTimeout>
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
 80088c0:	f1b0 30ff 	subs.w	r0, r0, #4294967295
 80088c4:	4243      	negs	r3, r0
 80088c6:	eb53 0100 	adcs.w	r1, r3, r0
 80088ca:	2007      	movs	r0, #7
 80088cc:	f7f8 ffd8 	bl	8001880 <_test_assert>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f47f aef6 	bne.w	80086c2 <sem2_execute.7099+0x22>
 80088d6:	6821      	ldr	r1, [r4, #0]
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
 80088d8:	2008      	movs	r0, #8
 80088da:	1b0a      	subs	r2, r1, r4
 80088dc:	4253      	negs	r3, r2
 80088de:	eb53 0102 	adcs.w	r1, r3, r2
 80088e2:	f7f8 ffcd 	bl	8001880 <_test_assert>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f47f aeeb 	bne.w	80086c2 <sem2_execute.7099+0x22>
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
 80088ec:	68a1      	ldr	r1, [r4, #8]
 80088ee:	2009      	movs	r0, #9
 80088f0:	f1d1 0101 	rsbs	r1, r1, #1
 80088f4:	bf38      	it	cc
 80088f6:	2100      	movcc	r1, #0
 80088f8:	f7f8 ffc2 	bl	8001880 <_test_assert>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	f47f aee0 	bne.w	80086c2 <sem2_execute.7099+0x22>
  }
  test_assert_sequence(10, "ABCDE");
 8008902:	200a      	movs	r0, #10
 8008904:	490e      	ldr	r1, [pc, #56]	; (8008940 <sem2_execute.7099+0x2a0>)
 8008906:	f7f8 ff73 	bl	80017f0 <_test_assert_sequence>
 800890a:	2800      	cmp	r0, #0
 800890c:	f47f aed9 	bne.w	80086c2 <sem2_execute.7099+0x22>
 8008910:	b2b6      	uxth	r6, r6

  /*
   * Testing timeout condition.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(5 * 50);
 8008912:	f506 73fa 	add.w	r3, r6, #500	; 0x1f4
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8008916:	f506 72fc 	add.w	r2, r6, #504	; 0x1f8
 800891a:	200b      	movs	r0, #11
 800891c:	b299      	uxth	r1, r3
 800891e:	b292      	uxth	r2, r2
}
 8008920:	b002      	add	sp, #8
 8008922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(7, msg == MSG_TIMEOUT, "wrong wake-up message");
    test_assert(8, queue_isempty(&sem1.s_queue), "queue not empty");
    test_assert(9, sem1.s_cnt == 0, "counter not zero");
  }
  test_assert_sequence(10, "ABCDE");
  test_assert_time_window(11, target_time, target_time + ALLOWED_DELAY);
 8008926:	f7f8 bf3b 	b.w	80017a0 <_test_assert_time_window>
 800892a:	bf00      	nop
 800892c:	20000c48 	.word	0x20000c48
 8008930:	20001eb8 	.word	0x20001eb8
 8008934:	08007cc1 	.word	0x08007cc1
 8008938:	20001848 	.word	0x20001848
 800893c:	20002008 	.word	0x20002008
 8008940:	0800a1e4 	.word	0x0800a1e4
 8008944:	f3af 8000 	nop.w
 8008948:	f3af 8000 	nop.w
 800894c:	f3af 8000 	nop.w

08008950 <bmk12_execute.8462>:
static void bmk12_setup(void) {

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
 8008950:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008952:	f7ff f80d 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008956:	f7fd fa7b 	bl	8005e50 <test_start_timer.constprop.19>
 800895a:	4d14      	ldr	r5, [pc, #80]	; (80089ac <bmk12_execute.8462+0x5c>)

  chMtxObjectInit(&mtx1);
}

static void bmk12_execute(void) {
  uint32_t n = 0;
 800895c:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chMtxLock(&mtx1);
 800895e:	4814      	ldr	r0, [pc, #80]	; (80089b0 <bmk12_execute.8462+0x60>)
 8008960:	f7f9 fc76 	bl	8002250 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008964:	4812      	ldr	r0, [pc, #72]	; (80089b0 <bmk12_execute.8462+0x60>)
 8008966:	f7f9 fa13 	bl	8001d90 <chMtxUnlock>
    chMtxLock(&mtx1);
 800896a:	4811      	ldr	r0, [pc, #68]	; (80089b0 <bmk12_execute.8462+0x60>)
 800896c:	f7f9 fc70 	bl	8002250 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008970:	480f      	ldr	r0, [pc, #60]	; (80089b0 <bmk12_execute.8462+0x60>)
 8008972:	f7f9 fa0d 	bl	8001d90 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008976:	480e      	ldr	r0, [pc, #56]	; (80089b0 <bmk12_execute.8462+0x60>)
 8008978:	f7f9 fc6a 	bl	8002250 <chMtxLock>
    chMtxUnlock(&mtx1);
 800897c:	480c      	ldr	r0, [pc, #48]	; (80089b0 <bmk12_execute.8462+0x60>)
 800897e:	f7f9 fa07 	bl	8001d90 <chMtxUnlock>
    chMtxLock(&mtx1);
 8008982:	480b      	ldr	r0, [pc, #44]	; (80089b0 <bmk12_execute.8462+0x60>)
 8008984:	f7f9 fc64 	bl	8002250 <chMtxLock>
    chMtxUnlock(&mtx1);
 8008988:	4809      	ldr	r0, [pc, #36]	; (80089b0 <bmk12_execute.8462+0x60>)
 800898a:	f7f9 fa01 	bl	8001d90 <chMtxUnlock>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 800898e:	782b      	ldrb	r3, [r5, #0]
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    chMtxLock(&mtx1);
    chMtxUnlock(&mtx1);
    n++;
 8008990:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0e3      	beq.n	800895e <bmk12_execute.8462+0xe>
  test_print("--- Score : ");
 8008996:	4807      	ldr	r0, [pc, #28]	; (80089b4 <bmk12_execute.8462+0x64>)
 8008998:	f7f8 ffd2 	bl	8001940 <test_print>
  test_printn(n * 4);
 800899c:	00a0      	lsls	r0, r4, #2
 800899e:	f7f8 ffdf 	bl	8001960 <test_printn>
  test_println(" lock+unlock/S");
 80089a2:	4805      	ldr	r0, [pc, #20]	; (80089b8 <bmk12_execute.8462+0x68>)
}
 80089a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" lock+unlock/S");
 80089a8:	f7f8 bfb2 	b.w	8001910 <test_println>
 80089ac:	20000dcc 	.word	0x20000dcc
 80089b0:	20001504 	.word	0x20001504
 80089b4:	0800a218 	.word	0x0800a218
 80089b8:	0800ab14 	.word	0x0800ab14
 80089bc:	f3af 8000 	nop.w

080089c0 <bmk6_execute.8479>:
 * terminate.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk6_execute(void) {
 80089c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <bmk6_execute.8479+0x4c>)
 80089c4:	b083      	sub	sp, #12
 80089c6:	6998      	ldr	r0, [r3, #24]

  uint32_t n = 0;
 80089c8:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 80089ca:	6885      	ldr	r5, [r0, #8]
 80089cc:	4f10      	ldr	r7, [pc, #64]	; (8008a10 <bmk6_execute.8479+0x50>)
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 80089ce:	4626      	mov	r6, r4

static void bmk6_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() + 1;
 80089d0:	3501      	adds	r5, #1
  test_wait_tick();
 80089d2:	f7fe ffcd 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 80089d6:	f7fd fa3b 	bl	8005e50 <test_start_timer.constprop.19>
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
 80089da:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80089de:	9600      	str	r6, [sp, #0]
 80089e0:	480c      	ldr	r0, [pc, #48]	; (8008a14 <bmk6_execute.8479+0x54>)
 80089e2:	462a      	mov	r2, r5
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <bmk6_execute.8479+0x58>)
 80089e6:	f7f9 fa1b 	bl	8001e20 <chThdCreateStatic>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80089ea:	7839      	ldrb	r1, [r7, #0]
  tprio_t prio = chThdGetPriorityX() + 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL);
    n++;
 80089ec:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 80089ee:	2900      	cmp	r1, #0
 80089f0:	d0f3      	beq.n	80089da <bmk6_execute.8479+0x1a>
  test_print("--- Score : ");
 80089f2:	480a      	ldr	r0, [pc, #40]	; (8008a1c <bmk6_execute.8479+0x5c>)
 80089f4:	f7f8 ffa4 	bl	8001940 <test_print>
  test_printn(n);
 80089f8:	4620      	mov	r0, r4
 80089fa:	f7f8 ffb1 	bl	8001960 <test_printn>
  test_println(" threads/S");
 80089fe:	4808      	ldr	r0, [pc, #32]	; (8008a20 <bmk6_execute.8479+0x60>)
}
 8008a00:	b003      	add	sp, #12
 8008a02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8008a06:	f7f8 bf83 	b.w	8001910 <test_println>
 8008a0a:	bf00      	nop
 8008a0c:	20001eb8 	.word	0x20001eb8
 8008a10:	20000dcc 	.word	0x20000dcc
 8008a14:	20001848 	.word	0x20001848
 8008a18:	08006cd1 	.word	0x08006cd1
 8008a1c:	0800a218 	.word	0x0800a218
 8008a20:	0800ab24 	.word	0x0800ab24
 8008a24:	f3af 8000 	nop.w
 8008a28:	f3af 8000 	nop.w
 8008a2c:	f3af 8000 	nop.w

08008a30 <bmk4_execute.8487>:
  } while (msg == MSG_OK);
  chSysUnlock();
  return 0;
}

static void bmk4_execute(void) {
 8008a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a34:	4b24      	ldr	r3, [pc, #144]	; (8008ac8 <bmk4_execute.8487+0x98>)
 8008a36:	b082      	sub	sp, #8
 8008a38:	6998      	ldr	r0, [r3, #24]
  thread_t *tp;
  uint32_t n;

  tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	6882      	ldr	r2, [r0, #8]
 8008a3e:	4b23      	ldr	r3, [pc, #140]	; (8008acc <bmk4_execute.8487+0x9c>)
 8008a40:	3201      	adds	r2, #1
 8008a42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008a46:	9500      	str	r5, [sp, #0]
 8008a48:	4821      	ldr	r0, [pc, #132]	; (8008ad0 <bmk4_execute.8487+0xa0>)
 8008a4a:	f7f9 f9e9 	bl	8001e20 <chThdCreateStatic>
 8008a4e:	4921      	ldr	r1, [pc, #132]	; (8008ad4 <bmk4_execute.8487+0xa4>)
 8008a50:	4604      	mov	r4, r0
 8008a52:	6008      	str	r0, [r1, #0]
                                      thread4, NULL);
  n = 0;
  test_wait_tick();
 8008a54:	f7fe ff8c 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008a58:	f7fd f9fa 	bl	8005e50 <test_start_timer.constprop.19>
 8008a5c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008ae0 <bmk4_execute.8487+0xb0>
 8008a60:	2720      	movs	r7, #32
  do {
    chSysLock();
    chSchWakeupS(tp, MSG_OK);
 8008a62:	462e      	mov	r6, r5
 8008a64:	f387 8811 	msr	BASEPRI, r7
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f7f9 f960 	bl	8001d30 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008a70:	4620      	mov	r0, r4
 8008a72:	2100      	movs	r1, #0
 8008a74:	f7f9 f95c 	bl	8001d30 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008a78:	4620      	mov	r0, r4
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	f7f9 f958 	bl	8001d30 <chSchWakeupS>
    chSchWakeupS(tp, MSG_OK);
 8008a80:	4620      	mov	r0, r4
 8008a82:	2100      	movs	r1, #0
 8008a84:	f7f9 f954 	bl	8001d30 <chSchWakeupS>
 8008a88:	f386 8811 	msr	BASEPRI, r6
    chSysUnlock();
    n += 4;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008a8c:	f898 3000 	ldrb.w	r3, [r8]
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSchWakeupS(tp, MSG_OK);
    chSysUnlock();
    n += 4;
 8008a90:	3504      	adds	r5, #4
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0e6      	beq.n	8008a64 <bmk4_execute.8487+0x34>
 8008a96:	2020      	movs	r0, #32
 8008a98:	f380 8811 	msr	BASEPRI, r0
  chSysLock();
  chSchWakeupS(tp, MSG_TIMEOUT);
 8008a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f7f9 f945 	bl	8001d30 <chSchWakeupS>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f382 8811 	msr	BASEPRI, r2
  chSysUnlock();

  test_wait_threads();
 8008aac:	f7f9 fcc8 	bl	8002440 <test_wait_threads>
  test_print("--- Score : ");
 8008ab0:	4809      	ldr	r0, [pc, #36]	; (8008ad8 <bmk4_execute.8487+0xa8>)
 8008ab2:	f7f8 ff45 	bl	8001940 <test_print>
  test_printn(n * 2);
 8008ab6:	0068      	lsls	r0, r5, #1
 8008ab8:	f7f8 ff52 	bl	8001960 <test_printn>
  test_println(" ctxswc/S");
 8008abc:	4807      	ldr	r0, [pc, #28]	; (8008adc <bmk4_execute.8487+0xac>)
}
 8008abe:	b002      	add	sp, #8
 8008ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chSysUnlock();

  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" ctxswc/S");
 8008ac4:	f7f8 bf24 	b.w	8001910 <test_println>
 8008ac8:	20001eb8 	.word	0x20001eb8
 8008acc:	08006e01 	.word	0x08006e01
 8008ad0:	20001848 	.word	0x20001848
 8008ad4:	20002008 	.word	0x20002008
 8008ad8:	0800a218 	.word	0x0800a218
 8008adc:	0800ab30 	.word	0x0800ab30
 8008ae0:	20000dcc 	.word	0x20000dcc
 8008ae4:	f3af 8000 	nop.w
 8008ae8:	f3af 8000 	nop.w
 8008aec:	f3af 8000 	nop.w

08008af0 <bmk11_execute.8466>:
static void bmk11_setup(void) {

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
 8008af0:	b538      	push	{r3, r4, r5, lr}
  uint32_t n = 0;

  test_wait_tick();
 8008af2:	f7fe ff3d 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008af6:	f7fd f9ab 	bl	8005e50 <test_start_timer.constprop.19>
 8008afa:	4d14      	ldr	r5, [pc, #80]	; (8008b4c <bmk11_execute.8466+0x5c>)

  chSemObjectInit(&sem1, 1);
}

static void bmk11_execute(void) {
  uint32_t n = 0;
 8008afc:	2400      	movs	r4, #0

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemWait(&sem1);
 8008afe:	4814      	ldr	r0, [pc, #80]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b00:	f7f9 fa06 	bl	8001f10 <chSemWait>
    chSemSignal(&sem1);
 8008b04:	4812      	ldr	r0, [pc, #72]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b06:	f7f9 f973 	bl	8001df0 <chSemSignal>
    chSemWait(&sem1);
 8008b0a:	4811      	ldr	r0, [pc, #68]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b0c:	f7f9 fa00 	bl	8001f10 <chSemWait>
    chSemSignal(&sem1);
 8008b10:	480f      	ldr	r0, [pc, #60]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b12:	f7f9 f96d 	bl	8001df0 <chSemSignal>
    chSemWait(&sem1);
 8008b16:	480e      	ldr	r0, [pc, #56]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b18:	f7f9 f9fa 	bl	8001f10 <chSemWait>
    chSemSignal(&sem1);
 8008b1c:	480c      	ldr	r0, [pc, #48]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b1e:	f7f9 f967 	bl	8001df0 <chSemSignal>
    chSemWait(&sem1);
 8008b22:	480b      	ldr	r0, [pc, #44]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b24:	f7f9 f9f4 	bl	8001f10 <chSemWait>
    chSemSignal(&sem1);
 8008b28:	4809      	ldr	r0, [pc, #36]	; (8008b50 <bmk11_execute.8466+0x60>)
 8008b2a:	f7f9 f961 	bl	8001df0 <chSemSignal>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008b2e:	782b      	ldrb	r3, [r5, #0]
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    chSemWait(&sem1);
    chSemSignal(&sem1);
    n++;
 8008b30:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0e3      	beq.n	8008afe <bmk11_execute.8466+0xe>
  test_print("--- Score : ");
 8008b36:	4807      	ldr	r0, [pc, #28]	; (8008b54 <bmk11_execute.8466+0x64>)
 8008b38:	f7f8 ff02 	bl	8001940 <test_print>
  test_printn(n * 4);
 8008b3c:	00a0      	lsls	r0, r4, #2
 8008b3e:	f7f8 ff0f 	bl	8001960 <test_printn>
  test_println(" wait+signal/S");
 8008b42:	4805      	ldr	r0, [pc, #20]	; (8008b58 <bmk11_execute.8466+0x68>)
}
 8008b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 4);
  test_println(" wait+signal/S");
 8008b48:	f7f8 bee2 	b.w	8001910 <test_println>
 8008b4c:	20000dcc 	.word	0x20000dcc
 8008b50:	200014f8 	.word	0x200014f8
 8008b54:	0800a218 	.word	0x0800a218
 8008b58:	0800ab3c 	.word	0x0800ab3c
 8008b5c:	f3af 8000 	nop.w

08008b60 <bmk10_execute.8472>:
 * a second of continuous operations.
 */

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;

  test_wait_tick();
 8008b62:	f7fe ff05 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008b66:	f7fd f973 	bl	8005e50 <test_start_timer.constprop.19>

static void tmo(void *param) {(void)param;}

static void bmk10_execute(void) {
  static virtual_timer_t vt1, vt2;
  uint32_t n = 0;
 8008b6a:	2400      	movs	r4, #0
 8008b6c:	4f14      	ldr	r7, [pc, #80]	; (8008bc0 <bmk10_execute.8472+0x60>)
 8008b6e:	2620      	movs	r6, #32

  test_wait_tick();
  test_start_timer(1000);
  do {
    chSysLock();
    chVTDoSetI(&vt1, 1, tmo, NULL);
 8008b70:	4625      	mov	r5, r4
 8008b72:	f386 8811 	msr	BASEPRI, r6
 8008b76:	2101      	movs	r1, #1
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4812      	ldr	r0, [pc, #72]	; (8008bc4 <bmk10_execute.8472+0x64>)
 8008b7c:	4a12      	ldr	r2, [pc, #72]	; (8008bc8 <bmk10_execute.8472+0x68>)
 8008b7e:	f7fc ff0f 	bl	80059a0 <chVTDoSetI>
    chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008b82:	f242 7110 	movw	r1, #10000	; 0x2710
 8008b86:	4a10      	ldr	r2, [pc, #64]	; (8008bc8 <bmk10_execute.8472+0x68>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4810      	ldr	r0, [pc, #64]	; (8008bcc <bmk10_execute.8472+0x6c>)
 8008b8c:	f7fc ff08 	bl	80059a0 <chVTDoSetI>
    chVTDoResetI(&vt1);
 8008b90:	480c      	ldr	r0, [pc, #48]	; (8008bc4 <bmk10_execute.8472+0x64>)
 8008b92:	f7fc fed5 	bl	8005940 <chVTDoResetI>
    chVTDoResetI(&vt2);
 8008b96:	480d      	ldr	r0, [pc, #52]	; (8008bcc <bmk10_execute.8472+0x6c>)
 8008b98:	f7fc fed2 	bl	8005940 <chVTDoResetI>
 8008b9c:	f385 8811 	msr	BASEPRI, r5
    chSysUnlock();
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008ba0:	783b      	ldrb	r3, [r7, #0]
    chVTDoSetI(&vt1, 1, tmo, NULL);
    chVTDoSetI(&vt2, 10000, tmo, NULL);
    chVTDoResetI(&vt1);
    chVTDoResetI(&vt2);
    chSysUnlock();
    n++;
 8008ba2:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0e4      	beq.n	8008b72 <bmk10_execute.8472+0x12>
  test_print("--- Score : ");
 8008ba8:	4809      	ldr	r0, [pc, #36]	; (8008bd0 <bmk10_execute.8472+0x70>)
 8008baa:	f7f8 fec9 	bl	8001940 <test_print>
  test_printn(n * 2);
 8008bae:	0060      	lsls	r0, r4, #1
 8008bb0:	f7f8 fed6 	bl	8001960 <test_printn>
  test_println(" timers/S");
 8008bb4:	4807      	ldr	r0, [pc, #28]	; (8008bd4 <bmk10_execute.8472+0x74>)
}
 8008bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n * 2);
  test_println(" timers/S");
 8008bba:	f7f8 bea9 	b.w	8001910 <test_println>
 8008bbe:	bf00      	nop
 8008bc0:	20000dcc 	.word	0x20000dcc
 8008bc4:	20001514 	.word	0x20001514
 8008bc8:	08006cc1 	.word	0x08006cc1
 8008bcc:	20001528 	.word	0x20001528
 8008bd0:	0800a218 	.word	0x0800a218
 8008bd4:	0800ab4c 	.word	0x0800ab4c
 8008bd8:	f3af 8000 	nop.w
 8008bdc:	f3af 8000 	nop.w

08008be0 <bmk8_execute.8481>:
#endif
  } while(!chThdShouldTerminateX());
  return 0;
}

static void bmk8_execute(void) {
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008be4:	f641 68b8 	movw	r8, #7864	; 0x1eb8
 8008be8:	b084      	sub	sp, #16
  uint32_t n;

  n = 0;
 8008bea:	ac04      	add	r4, sp, #16
 8008bec:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f844 3d04 	str.w	r3, [r4, #-4]!
  test_wait_tick();
 8008bf6:	f7fe febb 	bl	8007970 <test_wait_tick>
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008bfa:	f8d8 0018 	ldr.w	r0, [r8, #24]

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008bfe:	f641 0648 	movw	r6, #6216	; 0x1848
 8008c02:	6882      	ldr	r2, [r0, #8]
 8008c04:	f247 0741 	movw	r7, #28737	; 0x7041
 8008c08:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8008c0c:	f6c0 0700 	movt	r7, #2048	; 0x800
 8008c10:	3a01      	subs	r2, #1
 8008c12:	463b      	mov	r3, r7
 8008c14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c18:	9400      	str	r4, [sp, #0]
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7f9 f900 	bl	8001e20 <chThdCreateStatic>
 8008c20:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008c24:	f242 0508 	movw	r5, #8200	; 0x2008
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c28:	688b      	ldr	r3, [r1, #8]
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c2a:	f2c2 0500 	movt	r5, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c2e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c32:	1e5a      	subs	r2, r3, #1
  uint32_t n;

  n = 0;
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c34:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c36:	463b      	mov	r3, r7
 8008c38:	1870      	adds	r0, r6, r1
 8008c3a:	9400      	str	r4, [sp, #0]
 8008c3c:	f7f9 f8f0 	bl	8001e20 <chThdCreateStatic>
 8008c40:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008c44:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c46:	6890      	ldr	r0, [r2, #8]
 8008c48:	463b      	mov	r3, r7
 8008c4a:	1e42      	subs	r2, r0, #1
 8008c4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c50:	9400      	str	r4, [sp, #0]
 8008c52:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8008c56:	f7f9 f8e3 	bl	8001e20 <chThdCreateStatic>
 8008c5a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8008c5e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c60:	688b      	ldr	r3, [r1, #8]
 8008c62:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	9400      	str	r4, [sp, #0]
 8008c70:	f7f9 f8d6 	bl	8001e20 <chThdCreateStatic>
 8008c74:	f8d8 2018 	ldr.w	r2, [r8, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c78:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008c7c:	6892      	ldr	r2, [r2, #8]
 8008c7e:	463b      	mov	r3, r7
 8008c80:	3a01      	subs	r2, #1
  test_wait_tick();

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c82:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread8, (void *)&n);
 8008c84:	9400      	str	r4, [sp, #0]
 8008c86:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8008c8a:	f7f9 f8c9 	bl	8001e20 <chThdCreateStatic>
 8008c8e:	6128      	str	r0, [r5, #16]

  chThdSleepSeconds(1);
 8008c90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c94:	f7fe fe5c 	bl	8007950 <chThdSleep>
  test_terminate_threads();
 8008c98:	f7f8 fd42 	bl	8001720 <test_terminate_threads>
  test_wait_threads();
 8008c9c:	f7f9 fbd0 	bl	8002440 <test_wait_threads>

  test_print("--- Score : ");
 8008ca0:	f24a 2018 	movw	r0, #41496	; 0xa218
 8008ca4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008ca8:	f7f8 fe4a 	bl	8001940 <test_print>
  test_printn(n);
 8008cac:	9803      	ldr	r0, [sp, #12]
 8008cae:	f7f8 fe57 	bl	8001960 <test_printn>
  test_println(" ctxswc/S");
 8008cb2:	f64a 3030 	movw	r0, #43824	; 0xab30
 8008cb6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008cba:	f7f8 fe29 	bl	8001910 <test_println>
}
 8008cbe:	b004      	add	sp, #16
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	f3af 8000 	nop.w
 8008cc8:	f3af 8000 	nop.w
 8008ccc:	f3af 8000 	nop.w

08008cd0 <bmk7_execute.8483>:
static void bmk7_setup(void) {

  chSemObjectInit(&sem1, 0);
}

static void bmk7_execute(void) {
 8008cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008cd4:	4e3a      	ldr	r6, [pc, #232]	; (8008dc0 <bmk7_execute.8483+0xf0>)
 8008cd6:	b082      	sub	sp, #8
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008cd8:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008cda:	2400      	movs	r4, #0
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ce2:	4b38      	ldr	r3, [pc, #224]	; (8008dc4 <bmk7_execute.8483+0xf4>)
 8008ce4:	3205      	adds	r2, #5
 8008ce6:	9400      	str	r4, [sp, #0]
 8008ce8:	4837      	ldr	r0, [pc, #220]	; (8008dc8 <bmk7_execute.8483+0xf8>)
 8008cea:	f7f9 f899 	bl	8001e20 <chThdCreateStatic>
 8008cee:	69b1      	ldr	r1, [r6, #24]
 8008cf0:	4d36      	ldr	r5, [pc, #216]	; (8008dcc <bmk7_execute.8483+0xfc>)
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008cf2:	688f      	ldr	r7, [r1, #8]
 8008cf4:	4b33      	ldr	r3, [pc, #204]	; (8008dc4 <bmk7_execute.8483+0xf4>)
}

static void bmk7_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
 8008cf6:	6028      	str	r0, [r5, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
 8008cf8:	1d3a      	adds	r2, r7, #4
 8008cfa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008cfe:	9400      	str	r4, [sp, #0]
 8008d00:	4833      	ldr	r0, [pc, #204]	; (8008dd0 <bmk7_execute.8483+0x100>)
 8008d02:	f7f9 f88d 	bl	8001e20 <chThdCreateStatic>
 8008d06:	69b3      	ldr	r3, [r6, #24]
 8008d08:	6068      	str	r0, [r5, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
 8008d0a:	6898      	ldr	r0, [r3, #8]
 8008d0c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d10:	1cc2      	adds	r2, r0, #3
 8008d12:	4b2c      	ldr	r3, [pc, #176]	; (8008dc4 <bmk7_execute.8483+0xf4>)
 8008d14:	9400      	str	r4, [sp, #0]
 8008d16:	482f      	ldr	r0, [pc, #188]	; (8008dd4 <bmk7_execute.8483+0x104>)
 8008d18:	f7f9 f882 	bl	8001e20 <chThdCreateStatic>
 8008d1c:	69b2      	ldr	r2, [r6, #24]
 8008d1e:	60a8      	str	r0, [r5, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008d20:	6897      	ldr	r7, [r2, #8]
 8008d22:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d26:	1cba      	adds	r2, r7, #2
 8008d28:	4b26      	ldr	r3, [pc, #152]	; (8008dc4 <bmk7_execute.8483+0xf4>)
 8008d2a:	9400      	str	r4, [sp, #0]
 8008d2c:	482a      	ldr	r0, [pc, #168]	; (8008dd8 <bmk7_execute.8483+0x108>)
 8008d2e:	f7f9 f877 	bl	8001e20 <chThdCreateStatic>
 8008d32:	69b6      	ldr	r6, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8008d34:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008d38:	68b2      	ldr	r2, [r6, #8]
 8008d3a:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <bmk7_execute.8483+0xf4>)
 8008d3c:	3201      	adds	r2, #1
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread3, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, thread3, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread3, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, thread3, NULL);
 8008d3e:	60e8      	str	r0, [r5, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, thread3, NULL);
 8008d40:	9400      	str	r4, [sp, #0]
 8008d42:	4826      	ldr	r0, [pc, #152]	; (8008ddc <bmk7_execute.8483+0x10c>)
 8008d44:	f7f9 f86c 	bl	8001e20 <chThdCreateStatic>
 8008d48:	6128      	str	r0, [r5, #16]

  n = 0;
  test_wait_tick();
 8008d4a:	f7fe fe11 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008d4e:	f7fd f87f 	bl	8005e50 <test_start_timer.constprop.19>
 8008d52:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008df0 <bmk7_execute.8483+0x120>
 8008d56:	2720      	movs	r7, #32
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8008d58:	4626      	mov	r6, r4
 8008d5a:	f387 8811 	msr	BASEPRI, r7
 8008d5e:	4820      	ldr	r0, [pc, #128]	; (8008de0 <bmk7_execute.8483+0x110>)
 8008d60:	2100      	movs	r1, #0
 8008d62:	f7f9 fead 	bl	8002ac0 <chSemResetI>
 8008d66:	2500      	movs	r5, #0
  chSchRescheduleS();
 8008d68:	f7f8 ff12 	bl	8001b90 <chSchRescheduleS>
 8008d6c:	f386 8811 	msr	BASEPRI, r6
    chSemReset(&sem1, 0);
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d70:	f898 1000 	ldrb.w	r1, [r8]
  n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chSemReset(&sem1, 0);
    n++;
 8008d74:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008d76:	2900      	cmp	r1, #0
 8008d78:	d0ef      	beq.n	8008d5a <bmk7_execute.8483+0x8a>
  test_terminate_threads();
 8008d7a:	f7f8 fcd1 	bl	8001720 <test_terminate_threads>
 8008d7e:	2320      	movs	r3, #32
 8008d80:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8008d84:	4816      	ldr	r0, [pc, #88]	; (8008de0 <bmk7_execute.8483+0x110>)
 8008d86:	4629      	mov	r1, r5
 8008d88:	f7f9 fe9a 	bl	8002ac0 <chSemResetI>
  chSchRescheduleS();
 8008d8c:	f7f8 ff00 	bl	8001b90 <chSchRescheduleS>
 8008d90:	f385 8811 	msr	BASEPRI, r5
  chSemReset(&sem1, 0);
  test_wait_threads();
 8008d94:	f7f9 fb54 	bl	8002440 <test_wait_threads>

  test_print("--- Score : ");
 8008d98:	4812      	ldr	r0, [pc, #72]	; (8008de4 <bmk7_execute.8483+0x114>)
 8008d9a:	f7f8 fdd1 	bl	8001940 <test_print>
  test_printn(n);
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7f8 fdde 	bl	8001960 <test_printn>
  test_print(" reschedules/S, ");
 8008da4:	4810      	ldr	r0, [pc, #64]	; (8008de8 <bmk7_execute.8483+0x118>)
 8008da6:	f7f8 fdcb 	bl	8001940 <test_print>
  test_printn(n * 6);
 8008daa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008dae:	0040      	lsls	r0, r0, #1
 8008db0:	f7f8 fdd6 	bl	8001960 <test_printn>
  test_println(" ctxswc/S");
 8008db4:	480d      	ldr	r0, [pc, #52]	; (8008dec <bmk7_execute.8483+0x11c>)
}
 8008db6:	b002      	add	sp, #8
 8008db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  test_print("--- Score : ");
  test_printn(n);
  test_print(" reschedules/S, ");
  test_printn(n * 6);
  test_println(" ctxswc/S");
 8008dbc:	f7f8 bda8 	b.w	8001910 <test_println>
 8008dc0:	20001eb8 	.word	0x20001eb8
 8008dc4:	08007081 	.word	0x08007081
 8008dc8:	20001848 	.word	0x20001848
 8008dcc:	20002008 	.word	0x20002008
 8008dd0:	20001990 	.word	0x20001990
 8008dd4:	20001ad8 	.word	0x20001ad8
 8008dd8:	20001c20 	.word	0x20001c20
 8008ddc:	20001d68 	.word	0x20001d68
 8008de0:	200014f8 	.word	0x200014f8
 8008de4:	0800a218 	.word	0x0800a218
 8008de8:	0800ab58 	.word	0x0800ab58
 8008dec:	0800ab30 	.word	0x0800ab30
 8008df0:	20000dcc 	.word	0x20000dcc
 8008df4:	f3af 8000 	nop.w
 8008df8:	f3af 8000 	nop.w
 8008dfc:	f3af 8000 	nop.w

08008e00 <bmk5_execute.8485>:
 * in each iteration.<br>
 * The performance is calculated by measuring the number of iterations after
 * a second of continuous operations.
 */

static void bmk5_execute(void) {
 8008e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e02:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <bmk5_execute.8485+0x50>)
 8008e04:	b083      	sub	sp, #12
 8008e06:	6998      	ldr	r0, [r3, #24]

  uint32_t n = 0;
 8008e08:	2400      	movs	r4, #0
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8008e0a:	6885      	ldr	r5, [r0, #8]
 8008e0c:	4f11      	ldr	r7, [pc, #68]	; (8008e54 <bmk5_execute.8485+0x54>)
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8008e0e:	4626      	mov	r6, r4

static void bmk5_execute(void) {

  uint32_t n = 0;
  void *wap = wa[0];
  tprio_t prio = chThdGetPriorityX() - 1;
 8008e10:	3d01      	subs	r5, #1
  test_wait_tick();
 8008e12:	f7fe fdad 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008e16:	f7fd f81b 	bl	8005e50 <test_start_timer.constprop.19>
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
 8008e1a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008e1e:	462a      	mov	r2, r5
 8008e20:	4b0d      	ldr	r3, [pc, #52]	; (8008e58 <bmk5_execute.8485+0x58>)
 8008e22:	9600      	str	r6, [sp, #0]
 8008e24:	480d      	ldr	r0, [pc, #52]	; (8008e5c <bmk5_execute.8485+0x5c>)
 8008e26:	f7f8 fffb 	bl	8001e20 <chThdCreateStatic>
 8008e2a:	f7f9 fae9 	bl	8002400 <chThdWait>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e2e:	7839      	ldrb	r1, [r7, #0]
  tprio_t prio = chThdGetPriorityX() - 1;
  test_wait_tick();
  test_start_timer(1000);
  do {
    chThdWait(chThdCreateStatic(wap, WA_SIZE, prio, thread1, NULL));
    n++;
 8008e30:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e32:	2900      	cmp	r1, #0
 8008e34:	d0f1      	beq.n	8008e1a <bmk5_execute.8485+0x1a>
  test_print("--- Score : ");
 8008e36:	480a      	ldr	r0, [pc, #40]	; (8008e60 <bmk5_execute.8485+0x60>)
 8008e38:	f7f8 fd82 	bl	8001940 <test_print>
  test_printn(n);
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f7f8 fd8f 	bl	8001960 <test_printn>
  test_println(" threads/S");
 8008e42:	4808      	ldr	r0, [pc, #32]	; (8008e64 <bmk5_execute.8485+0x64>)
}
 8008e44:	b003      	add	sp, #12
 8008e46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
  test_print("--- Score : ");
  test_printn(n);
  test_println(" threads/S");
 8008e4a:	f7f8 bd61 	b.w	8001910 <test_println>
 8008e4e:	bf00      	nop
 8008e50:	20001eb8 	.word	0x20001eb8
 8008e54:	20000dcc 	.word	0x20000dcc
 8008e58:	08006cd1 	.word	0x08006cd1
 8008e5c:	20001848 	.word	0x20001848
 8008e60:	0800a218 	.word	0x0800a218
 8008e64:	0800ab24 	.word	0x0800ab24
 8008e68:	f3af 8000 	nop.w
 8008e6c:	f3af 8000 	nop.w

08008e70 <msg_loop_test.8489.4223>:
}

#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4605      	mov	r5, r0

  uint32_t n = 0;
  test_wait_tick();
 8008e74:	f7fe fd7c 	bl	8007970 <test_wait_tick>
  test_start_timer(1000);
 8008e78:	f7fc ffea 	bl	8005e50 <test_start_timer.constprop.19>
 8008e7c:	4e07      	ldr	r6, [pc, #28]	; (8008e9c <msg_loop_test.8489.4223+0x2c>)
#ifdef __GNUC__
__attribute__((noinline))
#endif
static unsigned int msg_loop_test(thread_t *tp) {

  uint32_t n = 0;
 8008e7e:	2400      	movs	r4, #0
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
 8008e80:	4628      	mov	r0, r5
 8008e82:	2101      	movs	r1, #1
 8008e84:	f7f9 f8c4 	bl	8002010 <chMsgSend>
    n++;
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e88:	7833      	ldrb	r3, [r6, #0]
  uint32_t n = 0;
  test_wait_tick();
  test_start_timer(1000);
  do {
    (void)chMsgSend(tp, 1);
    n++;
 8008e8a:	3401      	adds	r4, #1
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while (!test_timer_done);
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0f7      	beq.n	8008e80 <msg_loop_test.8489.4223+0x10>
  (void)chMsgSend(tp, 0);
 8008e90:	4628      	mov	r0, r5
 8008e92:	2100      	movs	r1, #0
 8008e94:	f7f9 f8bc 	bl	8002010 <chMsgSend>
  return n;
}
 8008e98:	4620      	mov	r0, r4
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	20000dcc 	.word	0x20000dcc

08008ea0 <bmk1_execute.8496>:
 * A message server thread is created with a lower priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk1_execute(void) {
 8008ea0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008ea2:	f641 63b8 	movw	r3, #7864	; 0x1eb8
 8008ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008eaa:	6998      	ldr	r0, [r3, #24]
 8008eac:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread2, NULL);
 8008eae:	6882      	ldr	r2, [r0, #8]
 8008eb0:	2400      	movs	r4, #0
 8008eb2:	f244 23e1 	movw	r3, #17121	; 0x42e1
 8008eb6:	f641 0048 	movw	r0, #6216	; 0x1848
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008ec0:	9400      	str	r4, [sp, #0]
 8008ec2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008ec6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008eca:	f7f8 ffa9 	bl	8001e20 <chThdCreateStatic>
 8008ece:	f242 0108 	movw	r1, #8200	; 0x2008
 8008ed2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008ed6:	6008      	str	r0, [r1, #0]
  n = msg_loop_test(threads[0]);
 8008ed8:	f7ff ffca 	bl	8008e70 <msg_loop_test.8489.4223>
 8008edc:	4604      	mov	r4, r0
  test_wait_threads();
 8008ede:	f7f9 faaf 	bl	8002440 <test_wait_threads>
  test_print("--- Score : ");
 8008ee2:	f24a 2018 	movw	r0, #41496	; 0xa218
 8008ee6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008eea:	f7f8 fd29 	bl	8001940 <test_print>
  test_printn(n);
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7f8 fd36 	bl	8001960 <test_printn>
  test_print(" msgs/S, ");
 8008ef4:	f64a 306c 	movw	r0, #43884	; 0xab6c
 8008ef8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008efc:	f7f8 fd20 	bl	8001940 <test_print>
  test_printn(n << 1);
 8008f00:	0060      	lsls	r0, r4, #1
 8008f02:	f7f8 fd2d 	bl	8001960 <test_printn>
  test_println(" ctxswc/S");
 8008f06:	f64a 3030 	movw	r0, #43824	; 0xab30
 8008f0a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8008f0e:	b002      	add	sp, #8
 8008f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8008f14:	f7f8 bcfc 	b.w	8001910 <test_println>
 8008f18:	f3af 8000 	nop.w
 8008f1c:	f3af 8000 	nop.w

08008f20 <bmk2_execute.8494>:
 * A message server thread is created with an higher priority than the client
 * thread, the messages throughput per second is measured and the result
 * printed in the output log.
 */

static void bmk2_execute(void) {
 8008f20:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008f22:	f641 63b8 	movw	r3, #7864	; 0x1eb8
 8008f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008f2a:	6998      	ldr	r0, [r3, #24]
 8008f2c:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008f2e:	6882      	ldr	r2, [r0, #8]
 8008f30:	2400      	movs	r4, #0
 8008f32:	f244 23e1 	movw	r3, #17121	; 0x42e1
 8008f36:	f641 0048 	movw	r0, #6216	; 0x1848
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008f40:	9400      	str	r4, [sp, #0]
 8008f42:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008f46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008f4a:	f7f8 ff69 	bl	8001e20 <chThdCreateStatic>
 8008f4e:	f242 0108 	movw	r1, #8200	; 0x2008
 8008f52:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008f56:	6008      	str	r0, [r1, #0]
  n = msg_loop_test(threads[0]);
 8008f58:	f7ff ff8a 	bl	8008e70 <msg_loop_test.8489.4223>
 8008f5c:	4604      	mov	r4, r0
  test_wait_threads();
 8008f5e:	f7f9 fa6f 	bl	8002440 <test_wait_threads>
  test_print("--- Score : ");
 8008f62:	f24a 2018 	movw	r0, #41496	; 0xa218
 8008f66:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008f6a:	f7f8 fce9 	bl	8001940 <test_print>
  test_printn(n);
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7f8 fcf6 	bl	8001960 <test_printn>
  test_print(" msgs/S, ");
 8008f74:	f64a 306c 	movw	r0, #43884	; 0xab6c
 8008f78:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008f7c:	f7f8 fce0 	bl	8001940 <test_print>
  test_printn(n << 1);
 8008f80:	0060      	lsls	r0, r4, #1
 8008f82:	f7f8 fced 	bl	8001960 <test_printn>
  test_println(" ctxswc/S");
 8008f86:	f64a 3030 	movw	r0, #43824	; 0xab30
 8008f8a:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8008f8e:	b002      	add	sp, #8
 8008f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 8008f94:	f7f8 bcbc 	b.w	8001910 <test_println>
 8008f98:	f3af 8000 	nop.w
 8008f9c:	f3af 8000 	nop.w

08008fa0 <bmk3_execute.8492>:
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8008fa4:	f641 66b8 	movw	r6, #7864	; 0x1eb8
 8008fa8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 8008fac:	69b3      	ldr	r3, [r6, #24]
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008fae:	f641 0548 	movw	r5, #6216	; 0x1848
 8008fb2:	689a      	ldr	r2, [r3, #8]
 * thread, four lower priority threads crowd the ready list, the messages
 * throughput per second is measured while the ready list and the result
 * printed in the output log.
 */

static void bmk3_execute(void) {
 8008fb4:	b082      	sub	sp, #8
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008fb6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8008fba:	f04f 0800 	mov.w	r8, #0
 8008fbe:	f244 23e1 	movw	r3, #17121	; 0x42e1
 8008fc2:	3201      	adds	r2, #1
 8008fc4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008fc8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008fcc:	f8cd 8000 	str.w	r8, [sp]
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7f8 ff25 	bl	8001e20 <chThdCreateStatic>
 8008fd6:	69b1      	ldr	r1, [r6, #24]
 8008fd8:	f242 0408 	movw	r4, #8200	; 0x2008
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8008fdc:	688b      	ldr	r3, [r1, #8]
 8008fde:	f646 47d1 	movw	r7, #27857	; 0x6cd1
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008fe2:	f2c2 0400 	movt	r4, #8192	; 0x2000
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8008fe6:	f6c0 0700 	movt	r7, #2048	; 0x800
 8008fea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 */

static void bmk3_execute(void) {
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
 8008fee:	6020      	str	r0, [r4, #0]
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
 8008ff0:	1e9a      	subs	r2, r3, #2
 8008ff2:	1868      	adds	r0, r5, r1
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	f8cd 8000 	str.w	r8, [sp]
 8008ffa:	f7f8 ff11 	bl	8001e20 <chThdCreateStatic>
 8008ffe:	69b2      	ldr	r2, [r6, #24]
 8009000:	6060      	str	r0, [r4, #4]
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
 8009002:	6890      	ldr	r0, [r2, #8]
 8009004:	463b      	mov	r3, r7
 8009006:	1ec2      	subs	r2, r0, #3
 8009008:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800900c:	f8cd 8000 	str.w	r8, [sp]
 8009010:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8009014:	f7f8 ff04 	bl	8001e20 <chThdCreateStatic>
 8009018:	69b1      	ldr	r1, [r6, #24]
 800901a:	60a0      	str	r0, [r4, #8]
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800901c:	688b      	ldr	r3, [r1, #8]
 800901e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8009022:	1f1a      	subs	r2, r3, #4
 8009024:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009028:	463b      	mov	r3, r7
 800902a:	f8cd 8000 	str.w	r8, [sp]
 800902e:	f7f8 fef7 	bl	8001e20 <chThdCreateStatic>
 8009032:	69b2      	ldr	r2, [r6, #24]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8009034:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009038:	6892      	ldr	r2, [r2, #8]
 800903a:	463b      	mov	r3, r7
 800903c:	3a05      	subs	r2, #5
  uint32_t n;

  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread2, NULL);
  threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, thread1, NULL);
  threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread1, NULL);
  threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, thread1, NULL);
 800903e:	60e0      	str	r0, [r4, #12]
  threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, thread1, NULL);
 8009040:	f8cd 8000 	str.w	r8, [sp]
 8009044:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8009048:	f7f8 feea 	bl	8001e20 <chThdCreateStatic>
 800904c:	6120      	str	r0, [r4, #16]
  n = msg_loop_test(threads[0]);
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	f7ff ff0e 	bl	8008e70 <msg_loop_test.8489.4223>
 8009054:	4604      	mov	r4, r0
  test_wait_threads();
 8009056:	f7f9 f9f3 	bl	8002440 <test_wait_threads>
  test_print("--- Score : ");
 800905a:	f24a 2018 	movw	r0, #41496	; 0xa218
 800905e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009062:	f7f8 fc6d 	bl	8001940 <test_print>
  test_printn(n);
 8009066:	4620      	mov	r0, r4
 8009068:	f7f8 fc7a 	bl	8001960 <test_printn>
  test_print(" msgs/S, ");
 800906c:	f64a 306c 	movw	r0, #43884	; 0xab6c
 8009070:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009074:	f7f8 fc64 	bl	8001940 <test_print>
  test_printn(n << 1);
 8009078:	0060      	lsls	r0, r4, #1
 800907a:	f7f8 fc71 	bl	8001960 <test_printn>
  test_println(" ctxswc/S");
 800907e:	f64a 3030 	movw	r0, #43824	; 0xab30
 8009082:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8009086:	b002      	add	sp, #8
 8009088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  test_wait_threads();
  test_print("--- Score : ");
  test_printn(n);
  test_print(" msgs/S, ");
  test_printn(n << 1);
  test_println(" ctxswc/S");
 800908c:	f7f8 bc40 	b.w	8001910 <test_println>

08009090 <evt2_execute.7717>:
  chThdSleepMilliseconds(50);
  chEvtBroadcast(&es2);
  return 0;
}

static void evt2_execute(void) {
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	2520      	movs	r5, #32
 8009096:	b08d      	sub	sp, #52	; 0x34
 8009098:	f385 8811 	msr	BASEPRI, r5
 */
eventmask_t chEvtAddEvents(eventmask_t events) {

  chSysLock();

  events = (currp->p_epending |= events);
 800909c:	4cb1      	ldr	r4, [pc, #708]	; (8009364 <evt2_execute.7717+0x2d4>)
 800909e:	2100      	movs	r1, #0
 80090a0:	69a3      	ldr	r3, [r4, #24]
 80090a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a4:	f042 0007 	orr.w	r0, r2, #7
 80090a8:	6358      	str	r0, [r3, #52]	; 0x34
 80090aa:	f381 8811 	msr	BASEPRI, r1

  /*
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
 80090ae:	f7fe f937 	bl	8007320 <chEvtWaitOne.constprop.38>
  test_assert(1, m == 1, "single event error");
 80090b2:	f1b0 0e01 	subs.w	lr, r0, #1
 80090b6:	f1de 0300 	rsbs	r3, lr, #0
 80090ba:	eb53 010e 	adcs.w	r1, r3, lr
 80090be:	2001      	movs	r0, #1
 80090c0:	f7f8 fbde 	bl	8001880 <_test_assert>
 80090c4:	b110      	cbz	r0, 80090cc <evt2_execute.7717+0x3c>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
}
 80090c6:	b00d      	add	sp, #52	; 0x34
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   * Test on chEvtWaitOne() without wait.
   */
  chEvtAddEvents(7);
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert(1, m == 1, "single event error");
  m = chEvtWaitOne(ALL_EVENTS);
 80090cc:	f7fe f928 	bl	8007320 <chEvtWaitOne.constprop.38>
  test_assert(2, m == 2, "single event error");
 80090d0:	1e82      	subs	r2, r0, #2
 80090d2:	4250      	negs	r0, r2
 80090d4:	eb50 0102 	adcs.w	r1, r0, r2
 80090d8:	2002      	movs	r0, #2
 80090da:	f7f8 fbd1 	bl	8001880 <_test_assert>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d1f1      	bne.n	80090c6 <evt2_execute.7717+0x36>
  m = chEvtWaitOne(ALL_EVENTS);
 80090e2:	f7fe f91d 	bl	8007320 <chEvtWaitOne.constprop.38>
  test_assert(3, m == 4, "single event error");
 80090e6:	1f03      	subs	r3, r0, #4
 80090e8:	4259      	negs	r1, r3
 80090ea:	4159      	adcs	r1, r3
 80090ec:	2003      	movs	r0, #3
 80090ee:	f7f8 fbc7 	bl	8001880 <_test_assert>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1e7      	bne.n	80090c6 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80090f6:	f7fe f8eb 	bl	80072d0 <chEvtGetAndClearEvents.constprop.42>
  test_assert(4, m == 0, "stuck event");
 80090fa:	f1d0 0101 	rsbs	r1, r0, #1
 80090fe:	bf38      	it	cc
 8009100:	2100      	movcc	r1, #0
 8009102:	2004      	movs	r0, #4
 8009104:	f7f8 fbbc 	bl	8001880 <_test_assert>
 8009108:	4606      	mov	r6, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	d1db      	bne.n	80090c6 <evt2_execute.7717+0x36>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
 800910e:	f7fe fc2f 	bl	8007970 <test_wait_tick>
 8009112:	f385 8811 	msr	BASEPRI, r5
 8009116:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800911a:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 800911e:	b2bf      	uxth	r7, r7
 8009120:	f386 8811 	msr	BASEPRI, r6
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8009124:	69a6      	ldr	r6, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8009126:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800912a:	68b2      	ldr	r2, [r6, #8]
 800912c:	4b8e      	ldr	r3, [pc, #568]	; (8009368 <evt2_execute.7717+0x2d8>)
 800912e:	3a01      	subs	r2, #1
 8009130:	9600      	str	r6, [sp, #0]
 8009132:	488e      	ldr	r0, [pc, #568]	; (800936c <evt2_execute.7717+0x2dc>)
 8009134:	f7f8 fe74 	bl	8001e20 <chThdCreateStatic>
 8009138:	4e8d      	ldr	r6, [pc, #564]	; (8009370 <evt2_execute.7717+0x2e0>)
 800913a:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 800913c:	f7fe f8f0 	bl	8007320 <chEvtWaitOne.constprop.38>

  /*
   * Test on chEvtWaitOne() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 8009140:	f107 0364 	add.w	r3, r7, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 8009144:	f107 026e 	add.w	r2, r7, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitOne(ALL_EVENTS);
 8009148:	4681      	mov	r9, r0
  test_assert_time_window(5, target_time, target_time + ALLOWED_DELAY);
 800914a:	b299      	uxth	r1, r3
 800914c:	2005      	movs	r0, #5
 800914e:	b292      	uxth	r2, r2
 8009150:	f7f8 fb26 	bl	80017a0 <_test_assert_time_window>
 8009154:	2800      	cmp	r0, #0
 8009156:	d1b6      	bne.n	80090c6 <evt2_execute.7717+0x36>
  test_assert(6, m == 1, "single event error");
 8009158:	2006      	movs	r0, #6
 800915a:	f1b9 0301 	subs.w	r3, r9, #1
 800915e:	4259      	negs	r1, r3
 8009160:	4159      	adcs	r1, r3
 8009162:	f7f8 fb8d 	bl	8001880 <_test_assert>
 8009166:	2800      	cmp	r0, #0
 8009168:	d1ad      	bne.n	80090c6 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800916a:	f7fe f8b1 	bl	80072d0 <chEvtGetAndClearEvents.constprop.42>
  test_assert(7, m == 0, "stuck event");
 800916e:	f1d0 0101 	rsbs	r1, r0, #1
 8009172:	bf38      	it	cc
 8009174:	2100      	movcc	r1, #0
 8009176:	2007      	movs	r0, #7
 8009178:	f7f8 fb82 	bl	8001880 <_test_assert>
 800917c:	4607      	mov	r7, r0
 800917e:	2800      	cmp	r0, #0
 8009180:	d1a1      	bne.n	80090c6 <evt2_execute.7717+0x36>
  test_wait_threads();
 8009182:	f7f9 f95d 	bl	8002440 <test_wait_threads>
 8009186:	f385 8811 	msr	BASEPRI, r5
 800918a:	69a0      	ldr	r0, [r4, #24]
 800918c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800918e:	f042 0305 	orr.w	r3, r2, #5
 8009192:	6343      	str	r3, [r0, #52]	; 0x34
 8009194:	f387 8811 	msr	BASEPRI, r7

  /*
   * Test on chEvtWaitAny() without wait.
   */
  chEvtAddEvents(5);
  m = chEvtWaitAny(ALL_EVENTS);
 8009198:	f7fe f8e2 	bl	8007360 <chEvtWaitAny.constprop.37>
  test_assert(8, m == 5, "unexpected pending bit");
 800919c:	f1b0 0c05 	subs.w	ip, r0, #5
 80091a0:	f1dc 0100 	rsbs	r1, ip, #0
 80091a4:	eb51 010c 	adcs.w	r1, r1, ip
 80091a8:	2008      	movs	r0, #8
 80091aa:	f7f8 fb69 	bl	8001880 <_test_assert>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d189      	bne.n	80090c6 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 80091b2:	f7fe f88d 	bl	80072d0 <chEvtGetAndClearEvents.constprop.42>
  test_assert(9, m == 0, "stuck event");
 80091b6:	f1d0 0101 	rsbs	r1, r0, #1
 80091ba:	bf38      	it	cc
 80091bc:	2100      	movcc	r1, #0
 80091be:	2009      	movs	r0, #9
 80091c0:	f7f8 fb5e 	bl	8001880 <_test_assert>
 80091c4:	4607      	mov	r7, r0
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f47f af7d 	bne.w	80090c6 <evt2_execute.7717+0x36>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
 80091cc:	f7fe fbd0 	bl	8007970 <test_wait_tick>
 80091d0:	f385 8811 	msr	BASEPRI, r5
 80091d4:	f8d8 5024 	ldr.w	r5, [r8, #36]	; 0x24
 80091d8:	b2ad      	uxth	r5, r5
 80091da:	f387 8811 	msr	BASEPRI, r7
 80091de:	69a7      	ldr	r7, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80091e0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80091e4:	68b8      	ldr	r0, [r7, #8]
 80091e6:	4b60      	ldr	r3, [pc, #384]	; (8009368 <evt2_execute.7717+0x2d8>)
 80091e8:	1e42      	subs	r2, r0, #1
 80091ea:	9700      	str	r7, [sp, #0]
 80091ec:	485f      	ldr	r0, [pc, #380]	; (800936c <evt2_execute.7717+0x2dc>)
 80091ee:	f7f8 fe17 	bl	8001e20 <chThdCreateStatic>
 80091f2:	6030      	str	r0, [r6, #0]
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 80091f4:	f7fe f8b4 	bl	8007360 <chEvtWaitAny.constprop.37>

  /*
   * Test on chEvtWaitAny() with wait.
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80091f8:	f105 0364 	add.w	r3, r5, #100	; 0x64
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 80091fc:	f105 026e 	add.w	r2, r5, #110	; 0x6e
   */
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
                                 thread1, chThdGetSelfX());
  m = chEvtWaitAny(ALL_EVENTS);
 8009200:	4607      	mov	r7, r0
  test_assert_time_window(10, target_time, target_time + ALLOWED_DELAY);
 8009202:	b299      	uxth	r1, r3
 8009204:	200a      	movs	r0, #10
 8009206:	b292      	uxth	r2, r2
 8009208:	f7f8 faca 	bl	80017a0 <_test_assert_time_window>
 800920c:	2800      	cmp	r0, #0
 800920e:	f47f af5a 	bne.w	80090c6 <evt2_execute.7717+0x36>
  test_assert(11, m == 1, "single event error");
 8009212:	200b      	movs	r0, #11
 8009214:	f1b7 0e01 	subs.w	lr, r7, #1
 8009218:	f1de 0100 	rsbs	r1, lr, #0
 800921c:	eb51 010e 	adcs.w	r1, r1, lr
 8009220:	f7f8 fb2e 	bl	8001880 <_test_assert>
 8009224:	2800      	cmp	r0, #0
 8009226:	f47f af4e 	bne.w	80090c6 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800922a:	f7fe f851 	bl	80072d0 <chEvtGetAndClearEvents.constprop.42>
  test_assert(12, m == 0, "stuck event");
 800922e:	f1d0 0101 	rsbs	r1, r0, #1
 8009232:	bf38      	it	cc
 8009234:	2100      	movcc	r1, #0
 8009236:	200c      	movs	r0, #12
 8009238:	f7f8 fb22 	bl	8001880 <_test_assert>
 800923c:	4607      	mov	r7, r0
 800923e:	2800      	cmp	r0, #0
 8009240:	f47f af41 	bne.w	80090c6 <evt2_execute.7717+0x36>
  test_wait_threads();
 8009244:	f7f9 f8fc 	bl	8002440 <test_wait_threads>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)(void *)esp;
 8009248:	4d4a      	ldr	r5, [pc, #296]	; (8009374 <evt2_execute.7717+0x2e4>)
 800924a:	4b4b      	ldr	r3, [pc, #300]	; (8009378 <evt2_execute.7717+0x2e8>)
 800924c:	602d      	str	r5, [r5, #0]
 800924e:	601b      	str	r3, [r3, #0]
 8009250:	f04f 0a20 	mov.w	sl, #32
 8009254:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8009258:	6828      	ldr	r0, [r5, #0]
 800925a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 800925e:	69a2      	ldr	r2, [r4, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8009260:	f849 0d28 	str.w	r0, [r9, #-40]!
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
 8009264:	2101      	movs	r1, #1
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 800926a:	9203      	str	r2, [sp, #12]
  elp->el_events   = events;
 800926c:	9104      	str	r1, [sp, #16]
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 800926e:	9006      	str	r0, [sp, #24]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 8009270:	f8c5 9000 	str.w	r9, [r5]
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8009274:	9705      	str	r7, [sp, #20]
 8009276:	f387 8811 	msr	BASEPRI, r7
 800927a:	f38a 8811 	msr	BASEPRI, sl
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  esp->es_next     = elp;
  elp->el_listener = currp;
 8009284:	69a2      	ldr	r2, [r4, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 8009286:	f848 1d14 	str.w	r1, [r8, #-20]!
  esp->es_next     = elp;
 800928a:	f8c3 8000 	str.w	r8, [r3]
  elp->el_listener = currp;
  elp->el_events   = events;
 800928e:	2304      	movs	r3, #4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 8009290:	9208      	str	r2, [sp, #32]
  elp->el_events   = events;
 8009292:	9309      	str	r3, [sp, #36]	; 0x24
  elp->el_flags    = 0;
  elp->el_wflags   = wflags;
 8009294:	900b      	str	r0, [sp, #44]	; 0x2c
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = 0;
 8009296:	970a      	str	r7, [sp, #40]	; 0x28
 8009298:	f387 8811 	msr	BASEPRI, r7
   */
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
 800929c:	f7fe fb68 	bl	8007970 <test_wait_tick>
 80092a0:	f38a 8811 	msr	BASEPRI, sl
 80092a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80092a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80092aa:	fa1f fb81 	uxth.w	fp, r1
 80092ae:	f387 8811 	msr	BASEPRI, r7
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->p_prio;
 80092b2:	69a7      	ldr	r7, [r4, #24]
  target_time = chVTGetSystemTime() + MS2ST(50);
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80092b4:	4b31      	ldr	r3, [pc, #196]	; (800937c <evt2_execute.7717+0x2ec>)
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	3a01      	subs	r2, #1
 80092c0:	4b2f      	ldr	r3, [pc, #188]	; (8009380 <evt2_execute.7717+0x2f0>)
 80092c2:	482a      	ldr	r0, [pc, #168]	; (800936c <evt2_execute.7717+0x2dc>)
 80092c4:	f7f8 fdac 	bl	8001e20 <chThdCreateStatic>
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
  chEvtRegisterMask(&es1, &el1, 1);
  chEvtRegisterMask(&es2, &el2, 4);
  test_wait_tick();
  target_time = chVTGetSystemTime() + MS2ST(50);
 80092c8:	f10b 0764 	add.w	r7, fp, #100	; 0x64
 80092cc:	b2bf      	uxth	r7, r7
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
  thread_t *ctp = currp;
 80092ce:	69a4      	ldr	r4, [r4, #24]
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80092d0:	6030      	str	r0, [r6, #0]
 80092d2:	f38a 8811 	msr	BASEPRI, sl

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 80092d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80092d8:	f002 0005 	and.w	r0, r2, #5
 80092dc:	2805      	cmp	r0, #5
 80092de:	d005      	beq.n	80092ec <evt2_execute.7717+0x25c>
    ctp->p_u.ewmask = events;
 80092e0:	2105      	movs	r1, #5
 80092e2:	6221      	str	r1, [r4, #32]
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80092e4:	200b      	movs	r0, #11
 80092e6:	f7f8 fddb 	bl	8001ea0 <chSchGoSleepS>
 80092ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }
  ctp->p_epending &= ~events;
 80092ec:	f022 0305 	bic.w	r3, r2, #5
 80092f0:	6363      	str	r3, [r4, #52]	; 0x34
 80092f2:	2000      	movs	r0, #0
 80092f4:	f380 8811 	msr	BASEPRI, r0
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
 80092f8:	f10b 026e 	add.w	r2, fp, #110	; 0x6e
 80092fc:	200d      	movs	r0, #13
 80092fe:	4639      	mov	r1, r7
 8009300:	b292      	uxth	r2, r2
 8009302:	f7f8 fa4d 	bl	80017a0 <_test_assert_time_window>
 8009306:	2800      	cmp	r0, #0
 8009308:	f47f aedd 	bne.w	80090c6 <evt2_execute.7717+0x36>
  m = chEvtGetAndClearEvents(ALL_EVENTS);
 800930c:	f7fd ffe0 	bl	80072d0 <chEvtGetAndClearEvents.constprop.42>
  test_assert(14, m == 0, "stuck event");
 8009310:	f1d0 0101 	rsbs	r1, r0, #1
 8009314:	bf38      	it	cc
 8009316:	2100      	movcc	r1, #0
 8009318:	200e      	movs	r0, #14
 800931a:	f7f8 fab1 	bl	8001880 <_test_assert>
 800931e:	2800      	cmp	r0, #0
 8009320:	f47f aed1 	bne.w	80090c6 <evt2_execute.7717+0x36>
  test_wait_threads();
  chEvtUnregister(&es1, &el1);
  chEvtUnregister(&es2, &el2);
 8009324:	4c14      	ldr	r4, [pc, #80]	; (8009378 <evt2_execute.7717+0x2e8>)
                                 thread2, "A");
  m = chEvtWaitAll(5);
  test_assert_time_window(13, target_time, target_time + ALLOWED_DELAY);
  m = chEvtGetAndClearEvents(ALL_EVENTS);
  test_assert(14, m == 0, "stuck event");
  test_wait_threads();
 8009326:	f7f9 f88b 	bl	8002440 <test_wait_threads>
  chEvtUnregister(&es1, &el1);
 800932a:	4812      	ldr	r0, [pc, #72]	; (8009374 <evt2_execute.7717+0x2e4>)
 800932c:	4649      	mov	r1, r9
 800932e:	f7f8 fb97 	bl	8001a60 <chEvtUnregister>
  chEvtUnregister(&es2, &el2);
 8009332:	4620      	mov	r0, r4
 8009334:	4641      	mov	r1, r8
 8009336:	f7f8 fb93 	bl	8001a60 <chEvtUnregister>
  test_assert(15, !chEvtIsListeningI(&es1), "stuck listener");
 800933a:	6829      	ldr	r1, [r5, #0]
 800933c:	200f      	movs	r0, #15
 800933e:	1b4b      	subs	r3, r1, r5
 8009340:	425a      	negs	r2, r3
 8009342:	eb52 0103 	adcs.w	r1, r2, r3
 8009346:	f7f8 fa9b 	bl	8001880 <_test_assert>
 800934a:	2800      	cmp	r0, #0
 800934c:	f47f aebb 	bne.w	80090c6 <evt2_execute.7717+0x36>
  test_assert(16, !chEvtIsListeningI(&es2), "stuck listener");
 8009350:	6821      	ldr	r1, [r4, #0]
 8009352:	2010      	movs	r0, #16
 8009354:	1b0b      	subs	r3, r1, r4
 8009356:	425a      	negs	r2, r3
 8009358:	eb52 0103 	adcs.w	r1, r2, r3
 800935c:	f7f8 fa90 	bl	8001880 <_test_assert>
 8009360:	e6b1      	b.n	80090c6 <evt2_execute.7717+0x36>
 8009362:	bf00      	nop
 8009364:	20001eb8 	.word	0x20001eb8
 8009368:	08007f91 	.word	0x08007f91
 800936c:	20001848 	.word	0x20001848
 8009370:	20002008 	.word	0x20002008
 8009374:	20000c58 	.word	0x20000c58
 8009378:	20000c7c 	.word	0x20000c7c
 800937c:	0800a1e0 	.word	0x0800a1e0
 8009380:	080034c1 	.word	0x080034c1
 8009384:	f3af 8000 	nop.w
 8009388:	f3af 8000 	nop.w
 800938c:	f3af 8000 	nop.w

08009390 <silabs_tune_down.4181>:
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8009390:	2900      	cmp	r1, #0
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009392:	b510      	push	{r4, lr}
 8009394:	4604      	mov	r4, r0
	if (argc > 0) {
 8009396:	dd04      	ble.n	80093a2 <silabs_tune_down.4181+0x12>
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 8009398:	4912      	ldr	r1, [pc, #72]	; (80093e4 <silabs_tune_down.4181+0x54>)
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}
 800939a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
}

void silabs_tune_down(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes down by 50hz, Usage: d\r\n");
 800939e:	f7fe bfb7 	b.w	8008310 <chprintf.11613>
		return;
	}
	Command=2;
 80093a2:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <silabs_tune_down.4181+0x58>)
 80093a4:	2202      	movs	r2, #2
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	2020      	movs	r0, #32
 80093aa:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80093ae:	480f      	ldr	r0, [pc, #60]	; (80093ec <silabs_tune_down.4181+0x5c>)
 80093b0:	6881      	ldr	r1, [r0, #8]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	dd13      	ble.n	80093de <silabs_tune_down.4181+0x4e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80093b6:	f7f8 fbeb 	bl	8001b90 <chSchRescheduleS>
 80093ba:	2200      	movs	r2, #0
 80093bc:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80093c0:	480b      	ldr	r0, [pc, #44]	; (80093f0 <silabs_tune_down.4181+0x60>)
 80093c2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80093c6:	f7fc fd33 	bl	8005e30 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 80093ca:	b100      	cbz	r0, 80093ce <silabs_tune_down.4181+0x3e>
 80093cc:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80093ce:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <silabs_tune_down.4181+0x64>)
 80093d0:	4909      	ldr	r1, [pc, #36]	; (80093f8 <silabs_tune_down.4181+0x68>)
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	4620      	mov	r0, r4
	}
}
 80093d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=2;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 80093da:	f7fe bf99 	b.w	8008310 <chprintf.11613>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 80093de:	f7f9 fb5f 	bl	8002aa0 <chSemSignalI>
 80093e2:	e7e8      	b.n	80093b6 <silabs_tune_down.4181+0x26>
 80093e4:	0800aba0 	.word	0x0800aba0
 80093e8:	200017a4 	.word	0x200017a4
 80093ec:	20001804 	.word	0x20001804
 80093f0:	20001834 	.word	0x20001834
 80093f4:	20000c54 	.word	0x20000c54
 80093f8:	0800abc0 	.word	0x0800abc0
 80093fc:	f3af 8000 	nop.w

08009400 <silabs_tune_up.4222>:
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
 8009400:	2900      	cmp	r1, #0
#define VCXO_FREQ 26000000UL
#define RSSI_THRESH -100

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009402:	b510      	push	{r4, lr}
 8009404:	4604      	mov	r4, r0
	if (argc > 0) {
 8009406:	dd04      	ble.n	8009412 <silabs_tune_up.4222+0x12>
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 8009408:	4912      	ldr	r1, [pc, #72]	; (8009454 <silabs_tune_up.4222+0x54>)
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
	}
}
 800940a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

static void spicb(SPIDriver *spip);

void silabs_tune_up(BaseSequentialStream *chp, int argc, char *argv[]) {
	if (argc > 0) {
		chprintf(chp, "Tunes up by 50hz, Usage: u\r\n");
 800940e:	f7fe bf7f 	b.w	8008310 <chprintf.11613>
		return;
	}
	Command=1;
 8009412:	4b11      	ldr	r3, [pc, #68]	; (8009458 <silabs_tune_up.4222+0x58>)
 8009414:	2201      	movs	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	2020      	movs	r0, #32
 800941a:	f380 8811 	msr	BASEPRI, r0
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800941e:	480f      	ldr	r0, [pc, #60]	; (800945c <silabs_tune_up.4222+0x5c>)
 8009420:	6881      	ldr	r1, [r0, #8]
 8009422:	2900      	cmp	r1, #0
 8009424:	dd13      	ble.n	800944e <silabs_tune_up.4222+0x4e>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009426:	f7f8 fbb3 	bl	8001b90 <chSchRescheduleS>
 800942a:	2200      	movs	r2, #0
 800942c:	f382 8811 	msr	BASEPRI, r2
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 8009430:	480b      	ldr	r0, [pc, #44]	; (8009460 <silabs_tune_up.4222+0x60>)
 8009432:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009436:	f7fc fcfb 	bl	8005e30 <chSemWaitTimeout>
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
 800943a:	b100      	cbz	r0, 800943e <silabs_tune_up.4222+0x3e>
 800943c:	bd10      	pop	{r4, pc}
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800943e:	4b09      	ldr	r3, [pc, #36]	; (8009464 <silabs_tune_up.4222+0x64>)
 8009440:	4909      	ldr	r1, [pc, #36]	; (8009468 <silabs_tune_up.4222+0x68>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	4620      	mov	r0, r4
	}
}
 8009446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	Command=1;
	chBSemSignal(&Silabs_busy);
	if(MSG_OK == chBSemWaitTimeout(&Silabs_callback, MS2ST(1000))) {
		chprintf(chp, "Frequency is: %u\r\n",Active_Frequency);
 800944a:	f7fe bf61 	b.w	8008310 <chprintf.11613>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 800944e:	f7f9 fb27 	bl	8002aa0 <chSemSignalI>
 8009452:	e7e8      	b.n	8009426 <silabs_tune_up.4222+0x26>
 8009454:	0800abd4 	.word	0x0800abd4
 8009458:	200017a4 	.word	0x200017a4
 800945c:	20001804 	.word	0x20001804
 8009460:	20001834 	.word	0x20001834
 8009464:	20000c54 	.word	0x20000c54
 8009468:	0800abc0 	.word	0x0800abc0
 800946c:	f3af 8000 	nop.w

08009470 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];
 8009472:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009476:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8009478:	4606      	mov	r6, r0
 800947a:	460d      	mov	r5, r1
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1];

  if (sdup == NULL)
 800947c:	b1b4      	cbz	r4, 80094ac <sduDataTransmitted+0x3c>
 800947e:	2720      	movs	r7, #32
 8009480:	f387 8811 	msr	BASEPRI, r7
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8009484:	2108      	movs	r1, #8
 8009486:	1d20      	adds	r0, r4, #4
 8009488:	f7f8 fe0a 	bl	80020a0 <chEvtBroadcastFlagsI>
 */
static inline size_t chOQGetFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(oqp) - chQSpaceI(oqp));
 800948c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800948e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009490:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009492:	1a8b      	subs	r3, r1, r2
    return;

  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
 8009494:	1a1b      	subs	r3, r3, r0
 8009496:	d119      	bne.n	80094cc <sduDataTransmitted+0x5c>
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 8009498:	1ca9      	adds	r1, r5, #2
 800949a:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800949e:	6842      	ldr	r2, [r0, #4]
 80094a0:	6953      	ldr	r3, [r2, #20]
 80094a2:	6859      	ldr	r1, [r3, #4]
 80094a4:	b919      	cbnz	r1, 80094ae <sduDataTransmitted+0x3e>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           !(usbp->epc[ep]->in_state->txsize &
             (usbp->epc[ep]->in_maxsize - 1))) {
 80094ae:	8a12      	ldrh	r2, [r2, #16]
 80094b0:	1e53      	subs	r3, r2, #1
    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0) &&
 80094b2:	400b      	ands	r3, r1
 80094b4:	d1f7      	bne.n	80094a6 <sduDataTransmitted+0x36>
 80094b6:	f383 8811 	msr	BASEPRI, r3
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80094ba:	6840      	ldr	r0, [r0, #4]
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);
 80094bc:	3430      	adds	r4, #48	; 0x30
 80094be:	6942      	ldr	r2, [r0, #20]

  isp->txqueued           = TRUE;
 80094c0:	2101      	movs	r1, #1
 80094c2:	7011      	strb	r1, [r2, #0]
  isp->mode.queue.txqueue = oqp;
 80094c4:	60d4      	str	r4, [r2, #12]
  isp->txsize             = n;
 80094c6:	6053      	str	r3, [r2, #4]
  isp->txcnt              = 0;
 80094c8:	6093      	str	r3, [r2, #8]
 80094ca:	e00c      	b.n	80094e6 <sduDataTransmitted+0x76>
 80094cc:	2200      	movs	r2, #0
 80094ce:	f382 8811 	msr	BASEPRI, r2
 *
 * @special
 */
void usbPrepareQueuedTransmit(USBDriver *usbp, usbep_t ep,
                              output_queue_t *oqp, size_t n) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 80094d2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80094d6:	68c1      	ldr	r1, [r0, #12]
  if ((n = oqGetFullI(&sdup->oqueue)) > 0) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, n);
 80094d8:	3430      	adds	r4, #48	; 0x30
 80094da:	6949      	ldr	r1, [r1, #20]

  isp->txqueued           = TRUE;
 80094dc:	2001      	movs	r0, #1
 80094de:	7008      	strb	r0, [r1, #0]
  isp->mode.queue.txqueue = oqp;
 80094e0:	60cc      	str	r4, [r1, #12]
  isp->txsize             = n;
 80094e2:	604b      	str	r3, [r1, #4]
  isp->txcnt              = 0;
 80094e4:	608a      	str	r2, [r1, #8]

  usb_lld_prepare_transmit(usbp, ep);
 80094e6:	4630      	mov	r0, r6
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7fb fe09 	bl	8005100 <usb_lld_prepare_transmit>
 80094ee:	f387 8811 	msr	BASEPRI, r7
    osalSysUnlockFromISR();

    usbPrepareQueuedTransmit(usbp, ep, &sdup->oqueue, 0);

    osalSysLockFromISR();
    usbStartTransmitI(usbp, ep);
 80094f2:	4630      	mov	r0, r6
 80094f4:	4629      	mov	r1, r5
 80094f6:	f7fe f85b 	bl	80075b0 <usbStartTransmitI>
 80094fa:	e7d4      	b.n	80094a6 <sduDataTransmitted+0x36>
 80094fc:	f3af 8000 	nop.w

08009500 <sduDataReceived>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];
 8009502:	f101 0311 	add.w	r3, r1, #17
 8009506:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 800950a:	460d      	mov	r5, r1
 800950c:	4606      	mov	r6, r0
  size_t n, maxsize;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1];

  if (sdup == NULL)
 800950e:	b1bc      	cbz	r4, 8009540 <sduDataReceived+0x40>
 8009510:	2720      	movs	r7, #32
 8009512:	f387 8811 	msr	BASEPRI, r7
 8009516:	2104      	movs	r1, #4
 8009518:	1860      	adds	r0, r4, r1
 800951a:	f7f8 fdc1 	bl	80020a0 <chEvtBroadcastFlagsI>
  osalSysLockFromISR();
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Writes to the input queue can only happen when there is enough space
     to hold at least one packet.*/
  maxsize = usbp->epc[ep]->out_maxsize;
 800951e:	f105 0c02 	add.w	ip, r5, #2
 8009522:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 8009526:	f8dc 1004 	ldr.w	r1, [ip, #4]
 */
static inline size_t chIQGetEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (size_t)(chQSizeI(iqp) - chQSpaceI(iqp));
 800952a:	69a3      	ldr	r3, [r4, #24]
 800952c:	69e0      	ldr	r0, [r4, #28]
 800952e:	6962      	ldr	r2, [r4, #20]
 8009530:	1ac0      	subs	r0, r0, r3
 8009532:	8a4b      	ldrh	r3, [r1, #18]
 8009534:	1a81      	subs	r1, r0, r2
  if ((n = iqGetEmptyI(&sdup->iqueue)) >= maxsize) {
 8009536:	428b      	cmp	r3, r1
 8009538:	d903      	bls.n	8009542 <sduDataReceived+0x42>
 800953a:	2000      	movs	r0, #0
 800953c:	f380 8811 	msr	BASEPRI, r0
 8009540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009542:	2000      	movs	r0, #0
 8009544:	f380 8811 	msr	BASEPRI, r0
    /* The endpoint cannot be busy, we are in the context of the callback,
       so a packet is in the buffer for sure.*/
    osalSysUnlockFromISR();

    n = (n / maxsize) * maxsize;
 8009548:	fbb1 f2f3 	udiv	r2, r1, r3
 800954c:	fb03 f302 	mul.w	r3, r3, r2
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8009550:	f8dc 1004 	ldr.w	r1, [ip, #4]

  osp->rxqueued           = TRUE;
 8009554:	2201      	movs	r2, #1
 *
 * @special
 */
void usbPrepareQueuedReceive(USBDriver *usbp, usbep_t ep,
                             input_queue_t *iqp, size_t n) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8009556:	6989      	ldr	r1, [r1, #24]
    usbPrepareQueuedReceive(usbp, ep, &sdup->iqueue, n);
 8009558:	340c      	adds	r4, #12

  osp->rxqueued           = TRUE;
 800955a:	700a      	strb	r2, [r1, #0]
  osp->mode.queue.rxqueue = iqp;
 800955c:	60cc      	str	r4, [r1, #12]
  osp->rxsize             = n;
 800955e:	604b      	str	r3, [r1, #4]
  osp->rxcnt              = 0;
 8009560:	6088      	str	r0, [r1, #8]

  usb_lld_prepare_receive(usbp, ep);
 8009562:	4630      	mov	r0, r6
 8009564:	4629      	mov	r1, r5
 8009566:	f7fe f863 	bl	8007630 <usb_lld_prepare_receive>
 800956a:	f387 8811 	msr	BASEPRI, r7

    osalSysLockFromISR();
    usbStartReceiveI(usbp, ep);
 800956e:	4630      	mov	r0, r6
 8009570:	4629      	mov	r1, r5
 8009572:	f7fe f83d 	bl	80075f0 <usbStartReceiveI>
 8009576:	e7e0      	b.n	800953a <sduDataReceived+0x3a>
 8009578:	f3af 8000 	nop.w
 800957c:	f3af 8000 	nop.w

08009580 <SI_Thread.11592>:

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 8009580:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  (void)arg;
  chRegSetThreadName("si4432");
 8009584:	4b94      	ldr	r3, [pc, #592]	; (80097d8 <SI_Thread.11592+0x258>)
 8009586:	4a95      	ldr	r2, [pc, #596]	; (80097dc <SI_Thread.11592+0x25c>)
 8009588:	6998      	ldr	r0, [r3, #24]

/*
 * Si446x thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThreadSI, 1024);
static __attribute__((noreturn)) THD_FUNCTION(SI_Thread, arg) {
 800958a:	b085      	sub	sp, #20

  (void)arg;
  chRegSetThreadName("si4432");
 800958c:	6182      	str	r2, [r0, #24]
 800958e:	2120      	movs	r1, #32
 8009590:	f381 8811 	msr	BASEPRI, r1
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8009594:	4c92      	ldr	r4, [pc, #584]	; (80097e0 <SI_Thread.11592+0x260>)
 8009596:	4e93      	ldr	r6, [pc, #588]	; (80097e4 <SI_Thread.11592+0x264>)
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8009598:	7825      	ldrb	r5, [r4, #0]
 800959a:	6066      	str	r6, [r4, #4]
 800959c:	2d01      	cmp	r5, #1
 800959e:	d11a      	bne.n	80095d6 <SI_Thread.11592+0x56>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 80095a0:	4991      	ldr	r1, [pc, #580]	; (80097e8 <SI_Thread.11592+0x268>)
 80095a2:	4622      	mov	r2, r4
 80095a4:	6a20      	ldr	r0, [r4, #32]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80095a6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 80095aa:	f7fd ff59 	bl	8007460 <dmaStreamAllocate.constprop.11>
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80095ae:	f2c4 0602 	movt	r6, #16386	; 0x4002
      b = dmaStreamAllocate(spip->dmarx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 80095b2:	498e      	ldr	r1, [pc, #568]	; (80097ec <SI_Thread.11592+0x26c>)
 80095b4:	4622      	mov	r2, r4
 80095b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095b8:	f7fd ff52 	bl	8007460 <dmaStreamAllocate.constprop.11>
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80095bc:	6a27      	ldr	r7, [r4, #32]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80095be:	69b5      	ldr	r5, [r6, #24]
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80095c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80095c2:	69e2      	ldr	r2, [r4, #28]
 80095c4:	6838      	ldr	r0, [r7, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80095c6:	6819      	ldr	r1, [r3, #0]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 80095c8:	f445 5780 	orr.w	r7, r5, #4096	; 0x1000
 80095cc:	61b7      	str	r7, [r6, #24]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80095ce:	320c      	adds	r2, #12
 80095d0:	6866      	ldr	r6, [r4, #4]
 80095d2:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80095d4:	608a      	str	r2, [r1, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80095d6:	8975      	ldrh	r5, [r6, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80095d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80095da:	f405 6300 	and.w	r3, r5, #2048	; 0x800
 80095de:	b29a      	uxth	r2, r3
 80095e0:	2a00      	cmp	r2, #0
 80095e2:	f000 80f1 	beq.w	80097c8 <SI_Thread.11592+0x248>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095e8:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095ec:	f427 6670 	bic.w	r6, r7, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80095f0:	f441 62a0 	orr.w	r2, r1, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80095f4:	f446 63a0 	orr.w	r3, r6, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095f8:	62a2      	str	r2, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80095fa:	62e3      	str	r3, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80095fc:	69e3      	ldr	r3, [r4, #28]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80095fe:	f445 7641 	orr.w	r6, r5, #772	; 0x304
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8009602:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8009604:	2500      	movs	r5, #0
 8009606:	801d      	strh	r5, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8009608:	801e      	strh	r6, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 800960a:	809a      	strh	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 800960c:	881f      	ldrh	r7, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 800960e:	2602      	movs	r6, #2
 8009610:	b2b8      	uxth	r0, r7
 8009612:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009616:	8019      	strh	r1, [r3, #0]
 8009618:	7026      	strb	r6, [r4, #0]
 800961a:	f385 8811 	msr	BASEPRI, r5
  /* Configuration goes here - setup the PLL carrier, TX modem settings and the Packet handler Tx functionality*/
	/*
	* Initializes the SPI driver 1.
	*/
	spiStart(&SPID1, &spicfg);
	si446x_initialise();
 800961e:	f7fa fae7 	bl	8003bf0 <si446x_initialise>
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8009622:	4c73      	ldr	r4, [pc, #460]	; (80097f0 <SI_Thread.11592+0x270>)
 8009624:	f44f 6780 	mov.w	r7, #1024	; 0x400
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8009628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800962c:	f241 71e8 	movw	r1, #6120	; 0x17e8
 8009630:	f2c2 0100 	movt	r1, #8192	; 0x2000
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
 8009634:	2301      	movs	r3, #1
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 8009636:	f2c4 0700 	movt	r7, #16384	; 0x4000
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 800963a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  gptObjectInit(&GPTD2);
#endif

#if STM32_GPT_USE_TIM3
  /* Driver initialization.*/
  GPTD3.tim = STM32_TIM3;
 800963e:	60e7      	str	r7, [r4, #12]
 8009640:	7023      	strb	r3, [r4, #0]
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
 8009642:	60ca      	str	r2, [r1, #12]
 8009644:	700b      	strb	r3, [r1, #0]
  gptp->config = NULL;
 8009646:	6065      	str	r5, [r4, #4]
 8009648:	604d      	str	r5, [r1, #4]
 800964a:	2720      	movs	r7, #32
 800964c:	f387 8811 	msr	BASEPRI, r7
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8009650:	4a68      	ldr	r2, [pc, #416]	; (80097f4 <SI_Thread.11592+0x274>)
  gpt_lld_start(gptp);
 8009652:	4869      	ldr	r0, [pc, #420]	; (80097f8 <SI_Thread.11592+0x278>)
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8009654:	604a      	str	r2, [r1, #4]
  gpt_lld_start(gptp);
 8009656:	f7fb fdbb 	bl	80051d0 <gpt_lld_start>
  gptp->state = GPT_READY;
 800965a:	f241 70e8 	movw	r0, #6120	; 0x17e8
 800965e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009662:	7006      	strb	r6, [r0, #0]
 8009664:	f385 8811 	msr	BASEPRI, r5
 8009668:	f387 8811 	msr	BASEPRI, r7
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 800966c:	4b63      	ldr	r3, [pc, #396]	; (80097fc <SI_Thread.11592+0x27c>)
  gpt_lld_start(gptp);
 800966e:	4620      	mov	r0, r4
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
 8009670:	6063      	str	r3, [r4, #4]
  gpt_lld_start(gptp);
 8009672:	f7fb fdad 	bl	80051d0 <gpt_lld_start>
  gptp->state = GPT_READY;
 8009676:	7026      	strb	r6, [r4, #0]
 8009678:	f385 8811 	msr	BASEPRI, r5
/* 
 * RF switch driver function, this function is blocking and is called by the shell handler. Pulses the output for 40ms.  
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
 800967c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8009680:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8009684:	2610      	movs	r6, #16
 8009686:	612e      	str	r6, [r5, #16]
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 8009688:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800968c:	4d5c      	ldr	r5, [pc, #368]	; (8009800 <SI_Thread.11592+0x280>)
 800968e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8009692:	f8df a184 	ldr.w	sl, [pc, #388]	; 8009818 <SI_Thread.11592+0x298>
 8009696:	4f5b      	ldr	r7, [pc, #364]	; (8009804 <SI_Thread.11592+0x284>)
 8009698:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800980c <SI_Thread.11592+0x28c>
 800969c:	f7fe fd60 	bl	8008160 <RF_switch.part.4.11638>
 80096a0:	f10d 0908 	add.w	r9, sp, #8
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 80096a4:	462e      	mov	r6, r5
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 80096a6:	9401      	str	r4, [sp, #4]
 * @api
 */
static inline msg_t chBSemWaitTimeout(binary_semaphore_t *bsp,
                                      systime_t time) {

  return chSemWaitTimeout(&bsp->bs_sem, time);
 80096a8:	4857      	ldr	r0, [pc, #348]	; (8009808 <SI_Thread.11592+0x288>)
 80096aa:	21c8      	movs	r1, #200	; 0xc8
 80096ac:	f7fc fbc0 	bl	8005e30 <chSemWaitTimeout>
	gptInit();
	gptStart(&GPTD4, &gpt4cfg);
	gptStart(&GPTD3, &gpt3cfg);
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
 80096b0:	4604      	mov	r4, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d1f8      	bne.n	80096a8 <SI_Thread.11592+0x128>
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
 80096b6:	7829      	ldrb	r1, [r5, #0]
 80096b8:	2901      	cmp	r1, #1
 80096ba:	d036      	beq.n	800972a <SI_Thread.11592+0x1aa>
			Active_Frequency+=50;
		else if(Command==2)
 80096bc:	7832      	ldrb	r2, [r6, #0]
 80096be:	2a02      	cmp	r2, #2
 80096c0:	d038      	beq.n	8009734 <SI_Thread.11592+0x1b4>
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
 80096c2:	7830      	ldrb	r0, [r6, #0]
 80096c4:	2803      	cmp	r0, #3
 80096c6:	d03a      	beq.n	800973e <SI_Thread.11592+0x1be>
 80096c8:	46a3      	mov	fp, r4
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
 80096ca:	782c      	ldrb	r4, [r5, #0]
 80096cc:	b114      	cbz	r4, 80096d4 <SI_Thread.11592+0x154>
 80096ce:	7830      	ldrb	r0, [r6, #0]
 80096d0:	2802      	cmp	r0, #2
 80096d2:	d90f      	bls.n	80096f4 <SI_Thread.11592+0x174>
			si446x_failure|=si446x_set_frequency(Active_Frequency);
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 80096d4:	f1bb 0f00 	cmp.w	fp, #0
 80096d8:	d116      	bne.n	8009708 <SI_Thread.11592+0x188>
 80096da:	2320      	movs	r3, #32
 80096dc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 80096e0:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80096e4:	2900      	cmp	r1, #0
 80096e6:	dd1c      	ble.n	8009722 <SI_Thread.11592+0x1a2>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 80096e8:	f7f8 fa52 	bl	8001b90 <chSchRescheduleS>
 80096ec:	2400      	movs	r4, #0
 80096ee:	f384 8811 	msr	BASEPRI, r4
 80096f2:	e7d9      	b.n	80096a8 <SI_Thread.11592+0x128>
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
			gptStartOneShot(&GPTD4, 900); // 0.9 seconds to send the packet
		}
		if(Command && Command<3) /*Load the frequency into the PLL*/
			si446x_failure|=si446x_set_frequency(Active_Frequency);
 80096f4:	6838      	ldr	r0, [r7, #0]
 80096f6:	f7fa f99b 	bl	8003a30 <si446x_set_frequency>
 80096fa:	ea40 020b 	orr.w	r2, r0, fp
 80096fe:	fa5f fb82 	uxtb.w	fp, r2
		if(si446x_failure) {	/*Try to recover if radio breaks*/
 8009702:	f1bb 0f00 	cmp.w	fp, #0
 8009706:	d0e8      	beq.n	80096da <SI_Thread.11592+0x15a>
			chThdSleepMilliseconds(400);/*Wait in case radio can finish what it was doing*/
 8009708:	f44f 7048 	mov.w	r0, #800	; 0x320
 800970c:	f7fe f920 	bl	8007950 <chThdSleep>
			si446x_initialise();
 8009710:	f7fa fa6e 	bl	8003bf0 <si446x_initialise>
 8009714:	2320      	movs	r3, #32
 8009716:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 800971a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800971e:	2900      	cmp	r1, #0
 8009720:	dce2      	bgt.n	80096e8 <SI_Thread.11592+0x168>
    chSemSignalI(&bsp->bs_sem);
 8009722:	483a      	ldr	r0, [pc, #232]	; (800980c <SI_Thread.11592+0x28c>)
 8009724:	f7f9 f9bc 	bl	8002aa0 <chSemSignalI>
 8009728:	e7de      	b.n	80096e8 <SI_Thread.11592+0x168>
	RF_switch(2);//Put switch in the Rx configuration
  while (TRUE) {//Main loop either retunes or sends strings, uses a volatile global to pass string pointers, special strings 'u' and 'd'. Callback via semaphore
	if(MSG_OK == chBSemWaitTimeout(&Silabs_busy, MS2ST(100))) {/*Wait for something to happen...*/
		/*Process the comms here - SPI transactions to either load packet and send or tune up/down*/
		if(Command==1)
			Active_Frequency+=50;
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	4683      	mov	fp, r0
 800972e:	3132      	adds	r1, #50	; 0x32
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	e7ca      	b.n	80096ca <SI_Thread.11592+0x14a>
		else if(Command==2)
			Active_Frequency-=50;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	4683      	mov	fp, r0
 8009738:	3b32      	subs	r3, #50	; 0x32
 800973a:	603b      	str	r3, [r7, #0]
 800973c:	e7c5      	b.n	80096ca <SI_Thread.11592+0x14a>
 */
void RF_switch(uint8_t state) {
	if(state==2)
		palSetPad(GPIOB, GPIOB_RFSWITCH_A);
	else if(state)
		palSetPad(GPIOA, GPIOA_RFSWITCH_B);
 800973e:	9901      	ldr	r1, [sp, #4]
 8009740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009744:	610b      	str	r3, [r1, #16]
 8009746:	f7fe fd0b 	bl	8008160 <RF_switch.part.4.11638>
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 800974a:	2366      	movs	r3, #102	; 0x66
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 800974c:	2206      	movs	r2, #6
 800974e:	4930      	ldr	r1, [pc, #192]	; (8009810 <SI_Thread.11592+0x290>)
 8009750:	4830      	ldr	r0, [pc, #192]	; (8009814 <SI_Thread.11592+0x294>)
			Active_Frequency+=50;
		else if(Command==2)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
 8009752:	f88a 3000 	strb.w	r3, [sl]
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
 8009756:	f000 fc0b 	bl	8009f70 <strncpy>
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 800975a:	482d      	ldr	r0, [pc, #180]	; (8009810 <SI_Thread.11592+0x290>)
 800975c:	f000 fbd8 	bl	8009f10 <strlen>
 8009760:	3001      	adds	r0, #1
 8009762:	4622      	mov	r2, r4
 8009764:	492c      	ldr	r1, [pc, #176]	; (8009818 <SI_Thread.11592+0x298>)
 8009766:	4b2d      	ldr	r3, [pc, #180]	; (800981c <SI_Thread.11592+0x29c>)
 8009768:	b2c0      	uxtb	r0, r0
 800976a:	f7fa f8a1 	bl	80038b0 <si446x_spi>
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 800976e:	f24a 12c0 	movw	r2, #41408	; 0xa1c0
 8009772:	f6c0 0200 	movt	r2, #2048	; 0x800
 8009776:	4b2a      	ldr	r3, [pc, #168]	; (8009820 <SI_Thread.11592+0x2a0>)
			Active_Frequency-=50;
		else if(Command==3) {/*Load the string into the packet handler*/
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
 8009778:	4683      	mov	fp, r0
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 800977a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800977e:	f8c9 0000 	str.w	r0, [r9]
 8009782:	f88d 100c 	strb.w	r1, [sp, #12]
 8009786:	f10d 0908 	add.w	r9, sp, #8
 800978a:	e899 0003 	ldmia.w	r9, {r0, r1}
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 800978e:	4622      	mov	r2, r4
			RF_switch(1);/*Turn the Agilent RF switch to relay the data*/
			tx_buffer[0]=0x66;/*The load to FIFO command*/
			strncpy(&(tx_buffer[1]),Command_string,6);/*Followed by the payload*/
			si446x_failure|=si446x_spi( strlen(Command_string)+1, tx_buffer, 0, rx_buffer);
			/*Now go to TX mode, with return to ready mode on completion, always use channel 0, use Packet handler settings for the data length*/
			memcpy(tx_buffer, (uint8_t [5]){0x31, 0x00, 0x30, 0x00, 0x00}, 5*sizeof(uint8_t));
 8009790:	f8ca 0000 	str.w	r0, [sl]
 8009794:	7019      	strb	r1, [r3, #0]
			si446x_failure|=si446x_spi( 5, tx_buffer, 0, rx_buffer);
 8009796:	2005      	movs	r0, #5
 8009798:	4b20      	ldr	r3, [pc, #128]	; (800981c <SI_Thread.11592+0x29c>)
 800979a:	491f      	ldr	r1, [pc, #124]	; (8009818 <SI_Thread.11592+0x298>)
 800979c:	f7fa f888 	bl	80038b0 <si446x_spi>
 80097a0:	ea40 010b 	orr.w	r1, r0, fp
 80097a4:	fa5f fb81 	uxtb.w	fp, r1
 80097a8:	2020      	movs	r0, #32
 80097aa:	f380 8811 	msr	BASEPRI, r0
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80097ae:	f241 70e8 	movw	r0, #6120	; 0x17e8
 80097b2:	2204      	movs	r2, #4
 80097b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  gpt_lld_start_timer(gptp, interval);
 80097b8:	f44f 7161 	mov.w	r1, #900	; 0x384
  osalDbgCheck(gptp != NULL);
  osalDbgCheck(gptp->config->callback != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_ONESHOT;
 80097bc:	7002      	strb	r2, [r0, #0]
  gpt_lld_start_timer(gptp, interval);
 80097be:	f7fd ffdf 	bl	8007780 <gpt_lld_start_timer>
 80097c2:	f384 8811 	msr	BASEPRI, r4
 80097c6:	e780      	b.n	80096ca <SI_Thread.11592+0x14a>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80097c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80097ca:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80097ce:	f427 6170 	bic.w	r1, r7, #3840	; 0xf00
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80097d2:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80097d4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80097d6:	e711      	b.n	80095fc <SI_Thread.11592+0x7c>
 80097d8:	20001eb8 	.word	0x20001eb8
 80097dc:	0800abf4 	.word	0x0800abf4
 80097e0:	200017a8 	.word	0x200017a8
 80097e4:	0800ab90 	.word	0x0800ab90
 80097e8:	08005461 	.word	0x08005461
 80097ec:	080042c1 	.word	0x080042c1
 80097f0:	200017d8 	.word	0x200017d8
 80097f4:	20000c5c 	.word	0x20000c5c
 80097f8:	200017e8 	.word	0x200017e8
 80097fc:	20000c6c 	.word	0x20000c6c
 8009800:	200017a4 	.word	0x200017a4
 8009804:	20000c54 	.word	0x20000c54
 8009808:	20001804 	.word	0x20001804
 800980c:	20001834 	.word	0x20001834
 8009810:	20001840 	.word	0x20001840
 8009814:	20001795 	.word	0x20001795
 8009818:	20001794 	.word	0x20001794
 800981c:	200017f8 	.word	0x200017f8
 8009820:	20001798 	.word	0x20001798
 8009824:	f3af 8000 	nop.w
 8009828:	f3af 8000 	nop.w
 800982c:	f3af 8000 	nop.w

08009830 <shell_thread.10585>:
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009834:	4b8d      	ldr	r3, [pc, #564]	; (8009a6c <shell_thread.10585+0x23c>)
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8009836:	6804      	ldr	r4, [r0, #0]
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009838:	6999      	ldr	r1, [r3, #24]
 800983a:	4a8d      	ldr	r2, [pc, #564]	; (8009a70 <shell_thread.10585+0x240>)
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800983c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 * @param[in] p         pointer to a @p BaseSequentialStream object
 * @return              Termination reason.
 * @retval MSG_OK       terminated by command.
 * @retval MSG_RESET    terminated by reset condition on the I/O channel.
 */
static msg_t shell_thread(void *p) {
 8009840:	b098      	sub	sp, #96	; 0x60
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
 8009842:	618a      	str	r2, [r1, #24]
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
 8009844:	4620      	mov	r0, r4
 8009846:	498b      	ldr	r1, [pc, #556]	; (8009a74 <shell_thread.10585+0x244>)
 8009848:	f7fe fcba 	bl	80081c0 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 800984c:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009a9c <shell_thread.10585+0x26c>
 8009850:	ae08      	add	r6, sp, #32
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
 8009852:	4620      	mov	r0, r4
 8009854:	4988      	ldr	r1, [pc, #544]	; (8009a78 <shell_thread.10585+0x248>)
 8009856:	f7fe fcb3 	bl	80081c0 <chprintf.10588>
    if (shellGetLine(chp, line, sizeof(line))) {
 800985a:	4635      	mov	r5, r6
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800985c:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *p = line;

  while (TRUE) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	2201      	movs	r2, #1
 8009864:	6843      	ldr	r3, [r0, #4]
 8009866:	f10d 0107 	add.w	r1, sp, #7
 800986a:	4620      	mov	r0, r4
 800986c:	4798      	blx	r3
 800986e:	b368      	cbz	r0, 80098cc <shell_thread.10585+0x9c>
      return TRUE;
    if (c == 4) {
 8009870:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009874:	2904      	cmp	r1, #4
 8009876:	d025      	beq.n	80098c4 <shell_thread.10585+0x94>
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
 8009878:	2908      	cmp	r1, #8
 800987a:	d010      	beq.n	800989e <shell_thread.10585+0x6e>
 800987c:	297f      	cmp	r1, #127	; 0x7f
 800987e:	d00e      	beq.n	800989e <shell_thread.10585+0x6e>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8009880:	290d      	cmp	r1, #13
 8009882:	d035      	beq.n	80098f0 <shell_thread.10585+0xc0>
      chprintf(chp, "\r\n");
      *p = 0;
      return FALSE;
    }
    if (c < 0x20)
 8009884:	291f      	cmp	r1, #31
 8009886:	d9eb      	bls.n	8009860 <shell_thread.10585+0x30>
      continue;
    if (p < line + size - 1) {
 8009888:	42bd      	cmp	r5, r7
 800988a:	d2e9      	bcs.n	8009860 <shell_thread.10585+0x30>
      chSequentialStreamPut(chp, c);
 800988c:	6822      	ldr	r2, [r4, #0]
 800988e:	4620      	mov	r0, r4
 8009890:	6893      	ldr	r3, [r2, #8]
 8009892:	4798      	blx	r3
      *p++ = (char)c;
 8009894:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8009898:	f805 1b01 	strb.w	r1, [r5], #1
 800989c:	e7e0      	b.n	8009860 <shell_thread.10585+0x30>
    if (c == 4) {
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 800989e:	42b5      	cmp	r5, r6
 80098a0:	d0de      	beq.n	8009860 <shell_thread.10585+0x30>
        chSequentialStreamPut(chp, c);
 80098a2:	6820      	ldr	r0, [r4, #0]
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
        p--;
 80098a4:	3d01      	subs	r5, #1
      chprintf(chp, "^D");
      return TRUE;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
 80098a6:	6882      	ldr	r2, [r0, #8]
 80098a8:	4620      	mov	r0, r4
 80098aa:	4790      	blx	r2
        chSequentialStreamPut(chp, 0x20);
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	2120      	movs	r1, #32
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	4620      	mov	r0, r4
 80098b4:	4790      	blx	r2
        chSequentialStreamPut(chp, c);
 80098b6:	6821      	ldr	r1, [r4, #0]
 80098b8:	4620      	mov	r0, r4
 80098ba:	688b      	ldr	r3, [r1, #8]
 80098bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80098c0:	4798      	blx	r3
 80098c2:	e7cd      	b.n	8009860 <shell_thread.10585+0x30>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return TRUE;
    if (c == 4) {
      chprintf(chp, "^D");
 80098c4:	4620      	mov	r0, r4
 80098c6:	496d      	ldr	r1, [pc, #436]	; (8009a7c <shell_thread.10585+0x24c>)
 80098c8:	f7fe fc7a 	bl	80081c0 <chprintf.10588>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\r\n");
  while (TRUE) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 80098cc:	4620      	mov	r0, r4
 80098ce:	496c      	ldr	r1, [pc, #432]	; (8009a80 <shell_thread.10585+0x250>)
 80098d0:	f7fe fc76 	bl	80081c0 <chprintf.10588>
 80098d4:	2020      	movs	r0, #32
 80098d6:	f380 8811 	msr	BASEPRI, r0
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, 0);
 80098da:	2100      	movs	r1, #0
 80098dc:	4869      	ldr	r0, [pc, #420]	; (8009a84 <shell_thread.10585+0x254>)
 80098de:	f7f8 fbdf 	bl	80020a0 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 80098e2:	2000      	movs	r0, #0
 80098e4:	f7f9 f924 	bl	8002b30 <chThdExitS>
    }
  }
  shellExit(MSG_OK);
  /* Never executed, silencing a warning.*/
  return 0;
}
 80098e8:	2000      	movs	r0, #0
 80098ea:	b018      	add	sp, #96	; 0x60
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 80098f0:	4965      	ldr	r1, [pc, #404]	; (8009a88 <shell_thread.10585+0x258>)
      *p = 0;
 80098f2:	2700      	movs	r7, #0
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7fe fc63 	bl	80081c0 <chprintf.10588>
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80098fa:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 80098fc:	702f      	strb	r7, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 80098fe:	4630      	mov	r0, r6
 8009900:	f7fd fdfe 	bl	8007500 <_strtok.10608.constprop.4>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009904:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8009906:	4605      	mov	r5, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009908:	4638      	mov	r0, r7
 800990a:	f7fd fdf9 	bl	8007500 <_strtok.10608.constprop.4>
 800990e:	4602      	mov	r2, r0
 8009910:	b338      	cbz	r0, 8009962 <shell_thread.10585+0x132>
 8009912:	4638      	mov	r0, r7
 8009914:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009916:	9203      	str	r2, [sp, #12]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009918:	f7fd fdf2 	bl	8007500 <_strtok.10608.constprop.4>
 800991c:	4603      	mov	r3, r0
 800991e:	2800      	cmp	r0, #0
 8009920:	f000 808e 	beq.w	8009a40 <shell_thread.10585+0x210>
 8009924:	4638      	mov	r0, r7
 8009926:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009928:	9304      	str	r3, [sp, #16]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800992a:	f7fd fde9 	bl	8007500 <_strtok.10608.constprop.4>
 800992e:	4602      	mov	r2, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	f000 808e 	beq.w	8009a52 <shell_thread.10585+0x222>
 8009936:	4638      	mov	r0, r7
 8009938:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800993a:	9205      	str	r2, [sp, #20]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800993c:	f7fd fde0 	bl	8007500 <_strtok.10608.constprop.4>
 8009940:	4603      	mov	r3, r0
 8009942:	2800      	cmp	r0, #0
 8009944:	d07f      	beq.n	8009a46 <shell_thread.10585+0x216>
 8009946:	4638      	mov	r0, r7
 8009948:	a902      	add	r1, sp, #8
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800994a:	9306      	str	r3, [sp, #24]
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800994c:	f7fd fdd8 	bl	8007500 <_strtok.10608.constprop.4>
 8009950:	2800      	cmp	r0, #0
 8009952:	d07b      	beq.n	8009a4c <shell_thread.10585+0x21c>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 8009954:	4620      	mov	r0, r4
 8009956:	494d      	ldr	r1, [pc, #308]	; (8009a8c <shell_thread.10585+0x25c>)
 8009958:	f7fe fc32 	bl	80081c0 <chprintf.10588>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	e777      	b.n	8009852 <shell_thread.10585+0x22>
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
 8009962:	4682      	mov	sl, r0
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8009964:	a818      	add	r0, sp, #96	; 0x60
 8009966:	eb00 018a 	add.w	r1, r0, sl, lsl #2
 800996a:	2200      	movs	r2, #0
 800996c:	f841 2c54 	str.w	r2, [r1, #-84]
    if (cmd != NULL) {
 8009970:	2d00      	cmp	r5, #0
 8009972:	f43f af6e 	beq.w	8009852 <shell_thread.10585+0x22>
      if (strcasecmp(cmd, "exit") == 0) {
 8009976:	4628      	mov	r0, r5
 8009978:	4945      	ldr	r1, [pc, #276]	; (8009a90 <shell_thread.10585+0x260>)
 800997a:	f000 faa1 	bl	8009ec0 <strcasecmp>
 800997e:	b940      	cbnz	r0, 8009992 <shell_thread.10585+0x162>
        if (n > 0) {
 8009980:	f1ba 0f00 	cmp.w	sl, #0
 8009984:	d0a6      	beq.n	80098d4 <shell_thread.10585+0xa4>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8009986:	4620      	mov	r0, r4
 8009988:	4942      	ldr	r1, [pc, #264]	; (8009a94 <shell_thread.10585+0x264>)
 800998a:	4a41      	ldr	r2, [pc, #260]	; (8009a90 <shell_thread.10585+0x260>)
 800998c:	f7fe fc18 	bl	80081c0 <chprintf.10588>
 8009990:	e75f      	b.n	8009852 <shell_thread.10585+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
 8009992:	4628      	mov	r0, r5
 8009994:	4940      	ldr	r1, [pc, #256]	; (8009a98 <shell_thread.10585+0x268>)
 8009996:	f000 fa93 	bl	8009ec0 <strcasecmp>
 800999a:	b940      	cbnz	r0, 80099ae <shell_thread.10585+0x17e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 800999c:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
 800999e:	f1ba 0f00 	cmp.w	sl, #0
 80099a2:	d019      	beq.n	80099d8 <shell_thread.10585+0x1a8>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80099a4:	493b      	ldr	r1, [pc, #236]	; (8009a94 <shell_thread.10585+0x264>)
 80099a6:	4a3c      	ldr	r2, [pc, #240]	; (8009a98 <shell_thread.10585+0x268>)
 80099a8:	f7fe fc0a 	bl	80081c0 <chprintf.10588>
 80099ac:	e751      	b.n	8009852 <shell_thread.10585+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80099ae:	f8d9 0000 	ldr.w	r0, [r9]
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d033      	beq.n	8009a1e <shell_thread.10585+0x1ee>
 80099b6:	4f39      	ldr	r7, [pc, #228]	; (8009a9c <shell_thread.10585+0x26c>)
 80099b8:	e003      	b.n	80099c2 <shell_thread.10585+0x192>
 80099ba:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80099be:	2800      	cmp	r0, #0
 80099c0:	d02d      	beq.n	8009a1e <shell_thread.10585+0x1ee>
    if (strcasecmp(scp->sc_name, name) == 0) {
 80099c2:	4629      	mov	r1, r5
 80099c4:	f000 fa7c 	bl	8009ec0 <strcasecmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d1f6      	bne.n	80099ba <shell_thread.10585+0x18a>
      scp->sc_function(chp, argc, argv);
 80099cc:	687d      	ldr	r5, [r7, #4]
 80099ce:	4620      	mov	r0, r4
 80099d0:	4651      	mov	r1, sl
 80099d2:	aa03      	add	r2, sp, #12
 80099d4:	47a8      	blx	r5
 80099d6:	e73c      	b.n	8009852 <shell_thread.10585+0x22>
      else if (strcasecmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 80099d8:	4931      	ldr	r1, [pc, #196]	; (8009aa0 <shell_thread.10585+0x270>)
 80099da:	f7fe fbf1 	bl	80081c0 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80099de:	f8d9 2000 	ldr.w	r2, [r9]
 80099e2:	b142      	cbz	r2, 80099f6 <shell_thread.10585+0x1c6>
 80099e4:	4f2d      	ldr	r7, [pc, #180]	; (8009a9c <shell_thread.10585+0x26c>)
    chprintf(chp, "%s ", scp->sc_name);
 80099e6:	4620      	mov	r0, r4
 80099e8:	492e      	ldr	r1, [pc, #184]	; (8009aa4 <shell_thread.10585+0x274>)
 80099ea:	f7fe fbe9 	bl	80081c0 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80099ee:	f857 2f08 	ldr.w	r2, [r7, #8]!
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	d1f7      	bne.n	80099e6 <shell_thread.10585+0x1b6>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 80099f6:	f1b8 0f00 	cmp.w	r8, #0
 80099fa:	d00b      	beq.n	8009a14 <shell_thread.10585+0x1e4>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80099fc:	f8d8 2000 	ldr.w	r2, [r8]
 8009a00:	b142      	cbz	r2, 8009a14 <shell_thread.10585+0x1e4>
 8009a02:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 8009a04:	4620      	mov	r0, r4
 8009a06:	4927      	ldr	r1, [pc, #156]	; (8009aa4 <shell_thread.10585+0x274>)
 8009a08:	f7fe fbda 	bl	80081c0 <chprintf.10588>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8009a0c:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	d1f7      	bne.n	8009a04 <shell_thread.10585+0x1d4>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 8009a14:	4620      	mov	r0, r4
 8009a16:	491c      	ldr	r1, [pc, #112]	; (8009a88 <shell_thread.10585+0x258>)
 8009a18:	f7fe fbd2 	bl	80081c0 <chprintf.10588>
 8009a1c:	e719      	b.n	8009852 <shell_thread.10585+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8009a1e:	f1b8 0f00 	cmp.w	r8, #0
 8009a22:	d019      	beq.n	8009a58 <shell_thread.10585+0x228>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 8009a24:	f8d8 0000 	ldr.w	r0, [r8]
 8009a28:	b1b0      	cbz	r0, 8009a58 <shell_thread.10585+0x228>
 8009a2a:	4647      	mov	r7, r8
 8009a2c:	e002      	b.n	8009a34 <shell_thread.10585+0x204>
 8009a2e:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009a32:	b188      	cbz	r0, 8009a58 <shell_thread.10585+0x228>
    if (strcasecmp(scp->sc_name, name) == 0) {
 8009a34:	4629      	mov	r1, r5
 8009a36:	f000 fa43 	bl	8009ec0 <strcasecmp>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d1f7      	bne.n	8009a2e <shell_thread.10585+0x1fe>
 8009a3e:	e7c5      	b.n	80099cc <shell_thread.10585+0x19c>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009a40:	f04f 0a01 	mov.w	sl, #1
 8009a44:	e78e      	b.n	8009964 <shell_thread.10585+0x134>
 8009a46:	f04f 0a03 	mov.w	sl, #3
 8009a4a:	e78b      	b.n	8009964 <shell_thread.10585+0x134>
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8009a4c:	f04f 0a04 	mov.w	sl, #4
 8009a50:	e788      	b.n	8009964 <shell_thread.10585+0x134>
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8009a52:	f04f 0a02 	mov.w	sl, #2
 8009a56:	e785      	b.n	8009964 <shell_thread.10585+0x134>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8009a58:	4620      	mov	r0, r4
 8009a5a:	4913      	ldr	r1, [pc, #76]	; (8009aa8 <shell_thread.10585+0x278>)
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	f7fe fbaf 	bl	80081c0 <chprintf.10588>
        chprintf(chp, " ?\r\n");
 8009a62:	4620      	mov	r0, r4
 8009a64:	4911      	ldr	r1, [pc, #68]	; (8009aac <shell_thread.10585+0x27c>)
 8009a66:	f7fe fbab 	bl	80081c0 <chprintf.10588>
 8009a6a:	e6f2      	b.n	8009852 <shell_thread.10585+0x22>
 8009a6c:	20001eb8 	.word	0x20001eb8
 8009a70:	0800b030 	.word	0x0800b030
 8009a74:	0800b038 	.word	0x0800b038
 8009a78:	0800b050 	.word	0x0800b050
 8009a7c:	0800b058 	.word	0x0800b058
 8009a80:	0800b0ac 	.word	0x0800b0ac
 8009a84:	20001eb0 	.word	0x20001eb0
 8009a88:	0800abbc 	.word	0x0800abbc
 8009a8c:	0800b05c 	.word	0x0800b05c
 8009a90:	0800b074 	.word	0x0800b074
 8009a94:	0800aa30 	.word	0x0800aa30
 8009a98:	0800b07c 	.word	0x0800b07c
 8009a9c:	20000c80 	.word	0x20000c80
 8009aa0:	0800b084 	.word	0x0800b084
 8009aa4:	0800b09c 	.word	0x0800b09c
 8009aa8:	0800b0a0 	.word	0x0800b0a0
 8009aac:	0800b0a4 	.word	0x0800b0a4

08009ab0 <sem4_execute.7089.4141>:

  chBSemSignal((binary_semaphore_t *)p);
  return 0;
}

static void sem4_execute(void) {
 8009ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab2:	b087      	sub	sp, #28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = tqp->p_prev = (thread_t *)tqp;
 8009ab4:	ad03      	add	r5, sp, #12
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= 0));

  queue_init(&sp->s_queue);
  sp->s_cnt = n;
 8009ab6:	2400      	movs	r4, #0
 8009ab8:	9504      	str	r5, [sp, #16]
 8009aba:	9503      	str	r5, [sp, #12]
 8009abc:	9405      	str	r4, [sp, #20]
 8009abe:	2620      	movs	r6, #32
 8009ac0:	f386 8811 	msr	BASEPRI, r6
 * @api
 */
void chSemReset(semaphore_t *sp, cnt_t n) {

  chSysLock();
  chSemResetI(sp, n);
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f7f8 fffa 	bl	8002ac0 <chSemResetI>
  chSchRescheduleS();
 8009acc:	f7f8 f860 	bl	8001b90 <chSchRescheduleS>
 8009ad0:	f384 8811 	msr	BASEPRI, r4
 8009ad4:	f386 8811 	msr	BASEPRI, r6
  binary_semaphore_t bsem;
  
  /* Creates a taken binary semaphore.*/
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8009ad8:	9905      	ldr	r1, [sp, #20]
 8009ada:	2001      	movs	r0, #1
 8009adc:	42a1      	cmp	r1, r4
 8009ade:	bfcc      	ite	gt
 8009ae0:	2100      	movgt	r1, #0
 8009ae2:	2101      	movle	r1, #1
 8009ae4:	f7f7 fecc 	bl	8001880 <_test_assert>
 8009ae8:	4607      	mov	r7, r0
 8009aea:	b118      	cbz	r0, 8009af4 <sem4_execute.7089.4141+0x44>
 8009aec:	f384 8811 	msr	BASEPRI, r4

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
}
 8009af0:	b007      	add	sp, #28
 8009af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009af4:	f380 8811 	msr	BASEPRI, r0
 8009af8:	4b3d      	ldr	r3, [pc, #244]	; (8009bf0 <sem4_execute.7089.4141+0x140>)
  chBSemObjectInit(&bsem, TRUE);
  chBSemReset(&bsem, TRUE);
  test_assert_lock(1, chBSemGetStateI(&bsem) == TRUE, "not taken");

  /* Starts a signaler thread at a lower priority.*/
  threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8009afa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009afe:	699a      	ldr	r2, [r3, #24]
 8009b00:	483c      	ldr	r0, [pc, #240]	; (8009bf4 <sem4_execute.7089.4141+0x144>)
 8009b02:	6892      	ldr	r2, [r2, #8]
 8009b04:	4b3c      	ldr	r3, [pc, #240]	; (8009bf8 <sem4_execute.7089.4141+0x148>)
 8009b06:	3a01      	subs	r2, #1
 8009b08:	9500      	str	r5, [sp, #0]
 8009b0a:	f7f8 f989 	bl	8001e20 <chThdCreateStatic>
 8009b0e:	493b      	ldr	r1, [pc, #236]	; (8009bfc <sem4_execute.7089.4141+0x14c>)
 8009b10:	6008      	str	r0, [r1, #0]
 *
 * @api
 */
static inline msg_t chBSemWait(binary_semaphore_t *bsp) {

  return chSemWait(&bsp->bs_sem);
 8009b12:	4628      	mov	r0, r5
 8009b14:	f7f8 f9fc 	bl	8001f10 <chSemWait>
 8009b18:	f386 8811 	msr	BASEPRI, r6
                                 
  /* Waits to be signaled.*/
  chBSemWait(&bsem);
  
  /* The binary semaphore is expected to be taken.*/
  test_assert_lock(2, chBSemGetStateI(&bsem) == TRUE, "not taken");
 8009b1c:	9905      	ldr	r1, [sp, #20]
 8009b1e:	2002      	movs	r0, #2
 8009b20:	2900      	cmp	r1, #0
 8009b22:	bfcc      	ite	gt
 8009b24:	2100      	movgt	r1, #0
 8009b26:	2101      	movle	r1, #1
 8009b28:	f7f7 feaa 	bl	8001880 <_test_assert>
 8009b2c:	b110      	cbz	r0, 8009b34 <sem4_execute.7089.4141+0x84>
 8009b2e:	f387 8811 	msr	BASEPRI, r7
 8009b32:	e7dd      	b.n	8009af0 <sem4_execute.7089.4141+0x40>
 8009b34:	f380 8811 	msr	BASEPRI, r0
 8009b38:	f386 8811 	msr	BASEPRI, r6
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009b3c:	9805      	ldr	r0, [sp, #20]
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	dd21      	ble.n	8009b86 <sem4_execute.7089.4141+0xd6>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009b42:	f7f8 f825 	bl	8001b90 <chSchRescheduleS>
 8009b46:	2400      	movs	r4, #0
 8009b48:	f384 8811 	msr	BASEPRI, r4
 8009b4c:	2720      	movs	r7, #32
 8009b4e:	f387 8811 	msr	BASEPRI, r7

  /* Releasing it, check both the binary semaphore state and the underlying
     counter semaphore state..*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "still taken");
 8009b52:	9905      	ldr	r1, [sp, #20]
 8009b54:	2003      	movs	r0, #3
 8009b56:	42a1      	cmp	r1, r4
 8009b58:	bfd4      	ite	le
 8009b5a:	2100      	movle	r1, #0
 8009b5c:	2101      	movgt	r1, #1
 8009b5e:	f7f7 fe8f 	bl	8001880 <_test_assert>
 8009b62:	4606      	mov	r6, r0
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1c1      	bne.n	8009aec <sem4_execute.7089.4141+0x3c>
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	f387 8811 	msr	BASEPRI, r7
  test_assert_lock(4, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	2004      	movs	r0, #4
 8009b74:	1e5a      	subs	r2, r3, #1
 8009b76:	4251      	negs	r1, r2
 8009b78:	4151      	adcs	r1, r2
 8009b7a:	f7f7 fe81 	bl	8001880 <_test_assert>
 8009b7e:	b130      	cbz	r0, 8009b8e <sem4_execute.7089.4141+0xde>
 8009b80:	f386 8811 	msr	BASEPRI, r6
 8009b84:	e7b4      	b.n	8009af0 <sem4_execute.7089.4141+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8009b86:	4628      	mov	r0, r5
 8009b88:	f7f8 ff8a 	bl	8002aa0 <chSemSignalI>
 8009b8c:	e7d9      	b.n	8009b42 <sem4_execute.7089.4141+0x92>
 8009b8e:	f380 8811 	msr	BASEPRI, r0
 8009b92:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
 8009b96:	9c05      	ldr	r4, [sp, #20]
 8009b98:	2c00      	cmp	r4, #0
 8009b9a:	dd21      	ble.n	8009be0 <sem4_execute.7089.4141+0x130>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8009b9c:	f7f7 fff8 	bl	8001b90 <chSchRescheduleS>
 8009ba0:	2400      	movs	r4, #0
 8009ba2:	f384 8811 	msr	BASEPRI, r4
 8009ba6:	2620      	movs	r6, #32
 8009ba8:	f386 8811 	msr	BASEPRI, r6

  /* Checking signaling overflow, the counter must not go beyond 1.*/
  chBSemSignal(&bsem);
  test_assert_lock(3, chBSemGetStateI(&bsem) == FALSE, "taken");
 8009bac:	9905      	ldr	r1, [sp, #20]
 8009bae:	2003      	movs	r0, #3
 8009bb0:	42a1      	cmp	r1, r4
 8009bb2:	bfd4      	ite	le
 8009bb4:	2100      	movle	r1, #0
 8009bb6:	2101      	movgt	r1, #1
 8009bb8:	f7f7 fe62 	bl	8001880 <_test_assert>
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d194      	bne.n	8009aec <sem4_execute.7089.4141+0x3c>
 8009bc2:	f380 8811 	msr	BASEPRI, r0
 8009bc6:	f386 8811 	msr	BASEPRI, r6
  test_assert_lock(5, chSemGetCounterI(&bsem.bs_sem) == 1, "unexpected counter");
 8009bca:	9b05      	ldr	r3, [sp, #20]
 8009bcc:	2005      	movs	r0, #5
 8009bce:	1e5a      	subs	r2, r3, #1
 8009bd0:	4251      	negs	r1, r2
 8009bd2:	4151      	adcs	r1, r2
 8009bd4:	f7f7 fe54 	bl	8001880 <_test_assert>
 8009bd8:	b130      	cbz	r0, 8009be8 <sem4_execute.7089.4141+0x138>
 8009bda:	f385 8811 	msr	BASEPRI, r5
 8009bde:	e787      	b.n	8009af0 <sem4_execute.7089.4141+0x40>
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->bs_sem.s_cnt < 1)
    chSemSignalI(&bsp->bs_sem);
 8009be0:	4628      	mov	r0, r5
 8009be2:	f7f8 ff5d 	bl	8002aa0 <chSemSignalI>
 8009be6:	e7d9      	b.n	8009b9c <sem4_execute.7089.4141+0xec>
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	e780      	b.n	8009af0 <sem4_execute.7089.4141+0x40>
 8009bee:	bf00      	nop
 8009bf0:	20001eb8 	.word	0x20001eb8
 8009bf4:	20001848 	.word	0x20001848
 8009bf8:	080034a1 	.word	0x080034a1
 8009bfc:	20002008 	.word	0x20002008

08009c00 <evt3_execute.7735.4183>:
static void evt3_setup(void) {

  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void evt3_execute(void) {
 8009c00:	b570      	push	{r4, r5, r6, lr}
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009c02:	4c58      	ldr	r4, [pc, #352]	; (8009d64 <evt3_execute.7735.4183+0x164>)
 8009c04:	2320      	movs	r3, #32
 8009c06:	69a2      	ldr	r2, [r4, #24]
 8009c08:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009c0c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009c0e:	b938      	cbnz	r0, 8009c20 <evt3_execute.7735.4183+0x20>
 8009c10:	f380 8811 	msr	BASEPRI, r0
 8009c14:	2101      	movs	r1, #1

  /*
   * Tests various timeout situations.
   */
  m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(1, m == 0, "spurious event");
 8009c16:	2001      	movs	r0, #1
 8009c18:	f7f7 fe32 	bl	8001880 <_test_assert>
 8009c1c:	b198      	cbz	r0, 8009c46 <evt3_execute.7735.4183+0x46>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  m ^= m & (m - 1);
 8009c20:	4241      	negs	r1, r0
 8009c22:	4001      	ands	r1, r0
  ctp->p_epending &= ~m;
 8009c24:	ea20 0001 	bic.w	r0, r0, r1
 8009c28:	6350      	str	r0, [r2, #52]	; 0x34
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f382 8811 	msr	BASEPRI, r2
 8009c30:	ebb1 0c02 	subs.w	ip, r1, r2
 8009c34:	f1dc 0300 	rsbs	r3, ip, #0
 8009c38:	eb53 010c 	adcs.w	r1, r3, ip
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	f7f7 fe1f 	bl	8001880 <_test_assert>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1eb      	bne.n	8009c1e <evt3_execute.7735.4183+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009c46:	69a1      	ldr	r1, [r4, #24]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009c4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d071      	beq.n	8009d38 <evt3_execute.7735.4183+0x138>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
  }
  ctp->p_epending &= ~m;
 8009c54:	6348      	str	r0, [r1, #52]	; 0x34
 8009c56:	f380 8811 	msr	BASEPRI, r0
 8009c5a:	4601      	mov	r1, r0
  m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(2, m == 0, "spurious event");
 8009c5c:	2002      	movs	r0, #2
 8009c5e:	f7f7 fe0f 	bl	8001880 <_test_assert>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d1db      	bne.n	8009c1e <evt3_execute.7735.4183+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009c66:	69a1      	ldr	r1, [r4, #24]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f382 8811 	msr	BASEPRI, r2

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8009c6e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	d065      	beq.n	8009d40 <evt3_execute.7735.4183+0x140>
 8009c74:	f380 8811 	msr	BASEPRI, r0
 8009c78:	2101      	movs	r1, #1
  m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
  test_assert(3, m == 0, "spurious event");
 8009c7a:	2003      	movs	r0, #3
 8009c7c:	f7f7 fe00 	bl	8001880 <_test_assert>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d1cc      	bne.n	8009c1e <evt3_execute.7735.4183+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009c84:	69a6      	ldr	r6, [r4, #24]
 8009c86:	2520      	movs	r5, #32
 8009c88:	f385 8811 	msr	BASEPRI, r5
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009c8c:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8009c8e:	b94d      	cbnz	r5, 8009ca4 <evt3_execute.7735.4183+0xa4>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009c90:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009c92:	f04f 31ff 	mov.w	r1, #4294967295
 8009c96:	6231      	str	r1, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009c98:	4601      	mov	r1, r0
 8009c9a:	f7fb ff11 	bl	8005ac0 <chSchGoSleepTimeoutS>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	db53      	blt.n	8009d4a <evt3_execute.7735.4183+0x14a>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8009ca2:	6b75      	ldr	r5, [r6, #52]	; 0x34
  }
  m ^= m & (m - 1);
 8009ca4:	4268      	negs	r0, r5
 8009ca6:	4028      	ands	r0, r5
  ctp->p_epending &= ~m;
 8009ca8:	ea25 0500 	bic.w	r5, r5, r0
 8009cac:	6375      	str	r5, [r6, #52]	; 0x34
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f382 8811 	msr	BASEPRI, r2
 8009cb4:	ebb0 0e02 	subs.w	lr, r0, r2
 8009cb8:	f1de 0300 	rsbs	r3, lr, #0
 8009cbc:	eb53 010e 	adcs.w	r1, r3, lr
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
 8009cc0:	2004      	movs	r0, #4
 8009cc2:	f7f7 fddd 	bl	8001880 <_test_assert>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1a9      	bne.n	8009c1e <evt3_execute.7735.4183+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009cca:	69a5      	ldr	r5, [r4, #24]
 8009ccc:	2620      	movs	r6, #32
 8009cce:	f386 8811 	msr	BASEPRI, r6
  eventmask_t m;

  chSysLock();

  if ((m = (ctp->p_epending & events)) == 0) {
 8009cd2:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8009cd4:	b94e      	cbnz	r6, 8009cea <evt3_execute.7735.4183+0xea>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009cd6:	200a      	movs	r0, #10
  if ((m = (ctp->p_epending & events)) == 0) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8009cdc:	6229      	str	r1, [r5, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8009cde:	4601      	mov	r1, r0
 8009ce0:	f7fb feee 	bl	8005ac0 <chSchGoSleepTimeoutS>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	db34      	blt.n	8009d52 <evt3_execute.7735.4183+0x152>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 8009ce8:	6b6e      	ldr	r6, [r5, #52]	; 0x34
  }
  ctp->p_epending &= ~m;
 8009cea:	2000      	movs	r0, #0
 8009cec:	6368      	str	r0, [r5, #52]	; 0x34
 8009cee:	f380 8811 	msr	BASEPRI, r0
 8009cf2:	1a32      	subs	r2, r6, r0
 8009cf4:	4253      	negs	r3, r2
 8009cf6:	eb53 0102 	adcs.w	r1, r3, r2
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
 8009cfa:	2005      	movs	r0, #5
 8009cfc:	f7f7 fdc0 	bl	8001880 <_test_assert>
 8009d00:	4605      	mov	r5, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d18b      	bne.n	8009c1e <evt3_execute.7735.4183+0x1e>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 8009d06:	69a4      	ldr	r4, [r4, #24]
 8009d08:	2120      	movs	r1, #32
 8009d0a:	f381 8811 	msr	BASEPRI, r1

  chSysLock();

  if ((ctp->p_epending & events) != events) {
 8009d0e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d008      	beq.n	8009d26 <evt3_execute.7735.4183+0x126>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8009d18:	200b      	movs	r0, #11
 8009d1a:	210a      	movs	r1, #10
  if ((ctp->p_epending & events) != events) {
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
 8009d1c:	6222      	str	r2, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, time) < MSG_OK) {
 8009d1e:	f7fb fecf 	bl	8005ac0 <chSchGoSleepTimeoutS>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	db19      	blt.n	8009d5a <evt3_execute.7735.4183+0x15a>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->p_epending &= ~events;
 8009d26:	2100      	movs	r1, #0
 8009d28:	6361      	str	r1, [r4, #52]	; 0x34
 8009d2a:	f381 8811 	msr	BASEPRI, r1
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8009d2e:	2006      	movs	r0, #6
}
 8009d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m = chEvtWaitOneTimeout(ALL_EVENTS, 10);
  test_assert(4, m == 0, "spurious event");
  m = chEvtWaitAnyTimeout(ALL_EVENTS, 10);
  test_assert(5, m == 0, "spurious event");
  m = chEvtWaitAllTimeout(ALL_EVENTS, 10);
  test_assert(6, m == 0, "spurious event");
 8009d34:	f7f7 bda4 	b.w	8001880 <_test_assert>
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	e78d      	b.n	8009c5c <evt3_execute.7735.4183+0x5c>
 8009d40:	6348      	str	r0, [r1, #52]	; 0x34
 8009d42:	f380 8811 	msr	BASEPRI, r0
 8009d46:	4601      	mov	r1, r0
 8009d48:	e797      	b.n	8009c7a <evt3_execute.7735.4183+0x7a>
 8009d4a:	f385 8811 	msr	BASEPRI, r5
 8009d4e:	2101      	movs	r1, #1
 8009d50:	e7b6      	b.n	8009cc0 <evt3_execute.7735.4183+0xc0>
 8009d52:	f386 8811 	msr	BASEPRI, r6
 8009d56:	2101      	movs	r1, #1
 8009d58:	e7cf      	b.n	8009cfa <evt3_execute.7735.4183+0xfa>
 8009d5a:	f385 8811 	msr	BASEPRI, r5
 8009d5e:	2101      	movs	r1, #1
 8009d60:	e7e5      	b.n	8009d2e <evt3_execute.7735.4183+0x12e>
 8009d62:	bf00      	nop
 8009d64:	20001eb8 	.word	0x20001eb8
 8009d68:	f3af 8000 	nop.w
 8009d6c:	f3af 8000 	nop.w

08009d70 <chThdExit>:
 8009d70:	2320      	movs	r3, #32
 8009d72:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 8009d76:	f7f8 bedb 	b.w	8002b30 <chThdExitS>
 8009d7a:	bf00      	nop
 8009d7c:	f3af 8000 	nop.w

08009d80 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8009d80:	f7f7 bee6 	b.w	8001b50 <chSchDoRescheduleAhead>
 8009d84:	f3af 8000 	nop.w
 8009d88:	f3af 8000 	nop.w
 8009d8c:	f3af 8000 	nop.w

08009d90 <memset>:
 8009d90:	b4f0      	push	{r4, r5, r6, r7}
 8009d92:	0784      	lsls	r4, r0, #30
 8009d94:	4603      	mov	r3, r0
 8009d96:	f000 808d 	beq.w	8009eb4 <memset+0x124>
 8009d9a:	1e54      	subs	r4, r2, #1
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	f000 8087 	beq.w	8009eb0 <memset+0x120>
 8009da2:	07e5      	lsls	r5, r4, #31
 8009da4:	b2ce      	uxtb	r6, r1
 8009da6:	d411      	bmi.n	8009dcc <memset+0x3c>
 8009da8:	461a      	mov	r2, r3
 8009daa:	f802 6b01 	strb.w	r6, [r2], #1
 8009dae:	4613      	mov	r3, r2
 8009db0:	4615      	mov	r5, r2
 8009db2:	0792      	lsls	r2, r2, #30
 8009db4:	d010      	beq.n	8009dd8 <memset+0x48>
 8009db6:	1e62      	subs	r2, r4, #1
 8009db8:	2c00      	cmp	r4, #0
 8009dba:	d079      	beq.n	8009eb0 <memset+0x120>
 8009dbc:	f803 6b01 	strb.w	r6, [r3], #1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	079a      	lsls	r2, r3, #30
 8009dc4:	461d      	mov	r5, r3
 8009dc6:	d007      	beq.n	8009dd8 <memset+0x48>
 8009dc8:	3c01      	subs	r4, #1
 8009dca:	e7ed      	b.n	8009da8 <memset+0x18>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f803 6b01 	strb.w	r6, [r3], #1
 8009dd2:	079a      	lsls	r2, r3, #30
 8009dd4:	461d      	mov	r5, r3
 8009dd6:	d1f7      	bne.n	8009dc8 <memset+0x38>
 8009dd8:	2c03      	cmp	r4, #3
 8009dda:	d952      	bls.n	8009e82 <memset+0xf2>
 8009ddc:	b2ce      	uxtb	r6, r1
 8009dde:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
 8009de2:	2c0f      	cmp	r4, #15
 8009de4:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
 8009de8:	d92d      	bls.n	8009e46 <memset+0xb6>
 8009dea:	f1a4 0210 	sub.w	r2, r4, #16
 8009dee:	4617      	mov	r7, r2
 8009df0:	2f0f      	cmp	r7, #15
 8009df2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	606b      	str	r3, [r5, #4]
 8009dfa:	60ab      	str	r3, [r5, #8]
 8009dfc:	60eb      	str	r3, [r5, #12]
 8009dfe:	f105 0210 	add.w	r2, r5, #16
 8009e02:	d916      	bls.n	8009e32 <memset+0xa2>
 8009e04:	b13e      	cbz	r6, 8009e16 <memset+0x86>
 8009e06:	3f10      	subs	r7, #16
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	6053      	str	r3, [r2, #4]
 8009e0c:	6093      	str	r3, [r2, #8]
 8009e0e:	60d3      	str	r3, [r2, #12]
 8009e10:	3210      	adds	r2, #16
 8009e12:	2f0f      	cmp	r7, #15
 8009e14:	d90d      	bls.n	8009e32 <memset+0xa2>
 8009e16:	3f20      	subs	r7, #32
 8009e18:	f102 0610 	add.w	r6, r2, #16
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	6053      	str	r3, [r2, #4]
 8009e20:	6093      	str	r3, [r2, #8]
 8009e22:	60d3      	str	r3, [r2, #12]
 8009e24:	6113      	str	r3, [r2, #16]
 8009e26:	6153      	str	r3, [r2, #20]
 8009e28:	6193      	str	r3, [r2, #24]
 8009e2a:	61d3      	str	r3, [r2, #28]
 8009e2c:	3220      	adds	r2, #32
 8009e2e:	2f0f      	cmp	r7, #15
 8009e30:	d8f1      	bhi.n	8009e16 <memset+0x86>
 8009e32:	f1a4 0210 	sub.w	r2, r4, #16
 8009e36:	f022 020f 	bic.w	r2, r2, #15
 8009e3a:	f004 040f 	and.w	r4, r4, #15
 8009e3e:	3210      	adds	r2, #16
 8009e40:	2c03      	cmp	r4, #3
 8009e42:	4415      	add	r5, r2
 8009e44:	d91d      	bls.n	8009e82 <memset+0xf2>
 8009e46:	1f27      	subs	r7, r4, #4
 8009e48:	463e      	mov	r6, r7
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	2e03      	cmp	r6, #3
 8009e4e:	f842 3b04 	str.w	r3, [r2], #4
 8009e52:	f3c7 0780 	ubfx	r7, r7, #2, #1
 8009e56:	d90d      	bls.n	8009e74 <memset+0xe4>
 8009e58:	b127      	cbz	r7, 8009e64 <memset+0xd4>
 8009e5a:	3e04      	subs	r6, #4
 8009e5c:	2e03      	cmp	r6, #3
 8009e5e:	f842 3b04 	str.w	r3, [r2], #4
 8009e62:	d907      	bls.n	8009e74 <memset+0xe4>
 8009e64:	4617      	mov	r7, r2
 8009e66:	f847 3b04 	str.w	r3, [r7], #4
 8009e6a:	3e08      	subs	r6, #8
 8009e6c:	6053      	str	r3, [r2, #4]
 8009e6e:	1d3a      	adds	r2, r7, #4
 8009e70:	2e03      	cmp	r6, #3
 8009e72:	d8f7      	bhi.n	8009e64 <memset+0xd4>
 8009e74:	1f23      	subs	r3, r4, #4
 8009e76:	f023 0203 	bic.w	r2, r3, #3
 8009e7a:	1d13      	adds	r3, r2, #4
 8009e7c:	f004 0403 	and.w	r4, r4, #3
 8009e80:	18ed      	adds	r5, r5, r3
 8009e82:	b1ac      	cbz	r4, 8009eb0 <memset+0x120>
 8009e84:	b2c9      	uxtb	r1, r1
 8009e86:	43ea      	mvns	r2, r5
 8009e88:	192c      	adds	r4, r5, r4
 8009e8a:	f805 1b01 	strb.w	r1, [r5], #1
 8009e8e:	18a3      	adds	r3, r4, r2
 8009e90:	42a5      	cmp	r5, r4
 8009e92:	f003 0201 	and.w	r2, r3, #1
 8009e96:	d00b      	beq.n	8009eb0 <memset+0x120>
 8009e98:	b11a      	cbz	r2, 8009ea2 <memset+0x112>
 8009e9a:	f805 1b01 	strb.w	r1, [r5], #1
 8009e9e:	42a5      	cmp	r5, r4
 8009ea0:	d006      	beq.n	8009eb0 <memset+0x120>
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea8:	7069      	strb	r1, [r5, #1]
 8009eaa:	1c5d      	adds	r5, r3, #1
 8009eac:	42a5      	cmp	r5, r4
 8009eae:	d1f8      	bne.n	8009ea2 <memset+0x112>
 8009eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8009eb2:	4770      	bx	lr
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	4614      	mov	r4, r2
 8009eb8:	e78e      	b.n	8009dd8 <memset+0x48>
 8009eba:	bf00      	nop
 8009ebc:	0000      	movs	r0, r0
	...

08009ec0 <strcasecmp>:
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <strcasecmp+0x40>)
 8009ec2:	b470      	push	{r4, r5, r6}
 8009ec4:	681d      	ldr	r5, [r3, #0]
 8009ec6:	f810 6b01 	ldrb.w	r6, [r0], #1
 8009eca:	19aa      	adds	r2, r5, r6
 8009ecc:	7854      	ldrb	r4, [r2, #1]
 8009ece:	4632      	mov	r2, r6
 8009ed0:	f004 0303 	and.w	r3, r4, #3
 8009ed4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	bf08      	it	eq
 8009edc:	f106 0220 	addeq.w	r2, r6, #32
 8009ee0:	192e      	adds	r6, r5, r4
 8009ee2:	7876      	ldrb	r6, [r6, #1]
 8009ee4:	4623      	mov	r3, r4
 8009ee6:	f006 0603 	and.w	r6, r6, #3
 8009eea:	2e01      	cmp	r6, #1
 8009eec:	bf08      	it	eq
 8009eee:	f104 0320 	addeq.w	r3, r4, #32
 8009ef2:	1ad2      	subs	r2, r2, r3
 8009ef4:	d101      	bne.n	8009efa <strcasecmp+0x3a>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e5      	bne.n	8009ec6 <strcasecmp+0x6>
 8009efa:	4610      	mov	r0, r2
 8009efc:	bc70      	pop	{r4, r5, r6}
 8009efe:	4770      	bx	lr
 8009f00:	20000d08 	.word	0x20000d08
	...

08009f10 <strlen>:
 8009f10:	f020 0103 	bic.w	r1, r0, #3
 8009f14:	f010 0003 	ands.w	r0, r0, #3
 8009f18:	f1c0 0000 	rsb	r0, r0, #0
 8009f1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8009f20:	f100 0c04 	add.w	ip, r0, #4
 8009f24:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009f28:	f06f 0200 	mvn.w	r2, #0
 8009f2c:	bf1c      	itt	ne
 8009f2e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8009f32:	4313      	orrne	r3, r2
 8009f34:	f04f 0c01 	mov.w	ip, #1
 8009f38:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8009f3c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8009f40:	eba3 020c 	sub.w	r2, r3, ip
 8009f44:	ea22 0203 	bic.w	r2, r2, r3
 8009f48:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8009f4c:	bf04      	itt	eq
 8009f4e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009f52:	3004      	addeq	r0, #4
 8009f54:	d0f4      	beq.n	8009f40 <strlen+0x30>
 8009f56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f5a:	bf1f      	itttt	ne
 8009f5c:	3001      	addne	r0, #1
 8009f5e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8009f62:	3001      	addne	r0, #1
 8009f64:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8009f68:	bf18      	it	ne
 8009f6a:	3001      	addne	r0, #1
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop

08009f70 <strncpy>:
 8009f70:	ea41 0300 	orr.w	r3, r1, r0
 8009f74:	079b      	lsls	r3, r3, #30
 8009f76:	b4f0      	push	{r4, r5, r6, r7}
 8009f78:	d174      	bne.n	800a064 <strncpy+0xf4>
 8009f7a:	2a03      	cmp	r2, #3
 8009f7c:	d972      	bls.n	800a064 <strncpy+0xf4>
 8009f7e:	460c      	mov	r4, r1
 8009f80:	f854 5b04 	ldr.w	r5, [r4], #4
 8009f84:	1f16      	subs	r6, r2, #4
 8009f86:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8009f8a:	ea27 0705 	bic.w	r7, r7, r5
 8009f8e:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8009f92:	4603      	mov	r3, r0
 8009f94:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8009f98:	d131      	bne.n	8009ffe <strncpy+0x8e>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2e03      	cmp	r6, #3
 8009f9e:	4632      	mov	r2, r6
 8009fa0:	f843 5b04 	str.w	r5, [r3], #4
 8009fa4:	d92a      	bls.n	8009ffc <strncpy+0x8c>
 8009fa6:	f1bc 0f00 	cmp.w	ip, #0
 8009faa:	d00a      	beq.n	8009fc2 <strncpy+0x52>
 8009fac:	4621      	mov	r1, r4
 8009fae:	f854 5b04 	ldr.w	r5, [r4], #4
 8009fb2:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8009fb6:	ea26 0605 	bic.w	r6, r6, r5
 8009fba:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8009fbe:	d018      	beq.n	8009ff2 <strncpy+0x82>
 8009fc0:	e01d      	b.n	8009ffe <strncpy+0x8e>
 8009fc2:	4626      	mov	r6, r4
 8009fc4:	f856 5b04 	ldr.w	r5, [r6], #4
 8009fc8:	4621      	mov	r1, r4
 8009fca:	f1a5 3701 	sub.w	r7, r5, #16843009	; 0x1010101
 8009fce:	ea27 0705 	bic.w	r7, r7, r5
 8009fd2:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8009fd6:	d112      	bne.n	8009ffe <strncpy+0x8e>
 8009fd8:	f843 5b04 	str.w	r5, [r3], #4
 8009fdc:	6865      	ldr	r5, [r4, #4]
 8009fde:	4631      	mov	r1, r6
 8009fe0:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8009fe4:	ea26 0605 	bic.w	r6, r6, r5
 8009fe8:	3a04      	subs	r2, #4
 8009fea:	1d0c      	adds	r4, r1, #4
 8009fec:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 8009ff0:	d105      	bne.n	8009ffe <strncpy+0x8e>
 8009ff2:	3a04      	subs	r2, #4
 8009ff4:	2a03      	cmp	r2, #3
 8009ff6:	f843 5b04 	str.w	r5, [r3], #4
 8009ffa:	d8e2      	bhi.n	8009fc2 <strncpy+0x52>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	b37a      	cbz	r2, 800a060 <strncpy+0xf0>
 800a000:	780d      	ldrb	r5, [r1, #0]
 800a002:	3a01      	subs	r2, #1
 800a004:	f803 5b01 	strb.w	r5, [r3], #1
 800a008:	b19d      	cbz	r5, 800a032 <strncpy+0xc2>
 800a00a:	f012 0f01 	tst.w	r2, #1
 800a00e:	461c      	mov	r4, r3
 800a010:	d12a      	bne.n	800a068 <strncpy+0xf8>
 800a012:	4623      	mov	r3, r4
 800a014:	b322      	cbz	r2, 800a060 <strncpy+0xf0>
 800a016:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a01a:	3a01      	subs	r2, #1
 800a01c:	f803 5b01 	strb.w	r5, [r3], #1
 800a020:	b13d      	cbz	r5, 800a032 <strncpy+0xc2>
 800a022:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a026:	3a01      	subs	r2, #1
 800a028:	7065      	strb	r5, [r4, #1]
 800a02a:	1c5c      	adds	r4, r3, #1
 800a02c:	4623      	mov	r3, r4
 800a02e:	2d00      	cmp	r5, #0
 800a030:	d1ef      	bne.n	800a012 <strncpy+0xa2>
 800a032:	b1aa      	cbz	r2, 800a060 <strncpy+0xf0>
 800a034:	2100      	movs	r1, #0
 800a036:	189c      	adds	r4, r3, r2
 800a038:	43da      	mvns	r2, r3
 800a03a:	f803 1b01 	strb.w	r1, [r3], #1
 800a03e:	18a2      	adds	r2, r4, r2
 800a040:	42a3      	cmp	r3, r4
 800a042:	f002 0201 	and.w	r2, r2, #1
 800a046:	d00b      	beq.n	800a060 <strncpy+0xf0>
 800a048:	b11a      	cbz	r2, 800a052 <strncpy+0xe2>
 800a04a:	f803 1b01 	strb.w	r1, [r3], #1
 800a04e:	42a3      	cmp	r3, r4
 800a050:	d006      	beq.n	800a060 <strncpy+0xf0>
 800a052:	461a      	mov	r2, r3
 800a054:	f802 1b01 	strb.w	r1, [r2], #1
 800a058:	7059      	strb	r1, [r3, #1]
 800a05a:	1c53      	adds	r3, r2, #1
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	d1f8      	bne.n	800a052 <strncpy+0xe2>
 800a060:	bcf0      	pop	{r4, r5, r6, r7}
 800a062:	4770      	bx	lr
 800a064:	4603      	mov	r3, r0
 800a066:	e7ca      	b.n	8009ffe <strncpy+0x8e>
 800a068:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a06c:	461c      	mov	r4, r3
 800a06e:	f804 5b01 	strb.w	r5, [r4], #1
 800a072:	3a01      	subs	r2, #1
 800a074:	4623      	mov	r3, r4
 800a076:	2d00      	cmp	r5, #0
 800a078:	d1cb      	bne.n	800a012 <strncpy+0xa2>
 800a07a:	e7da      	b.n	800a032 <strncpy+0xc2>
 800a07c:	0000      	movs	r0, r0
	...

0800a080 <strpbrk>:
 800a080:	b4f0      	push	{r4, r5, r6, r7}
 800a082:	7804      	ldrb	r4, [r0, #0]
 800a084:	2c00      	cmp	r4, #0
 800a086:	d01f      	beq.n	800a0c8 <strpbrk+0x48>
 800a088:	780e      	ldrb	r6, [r1, #0]
 800a08a:	4607      	mov	r7, r0
 800a08c:	b1a6      	cbz	r6, 800a0b8 <strpbrk+0x38>
 800a08e:	42a6      	cmp	r6, r4
 800a090:	d018      	beq.n	800a0c4 <strpbrk+0x44>
 800a092:	1c4b      	adds	r3, r1, #1
 800a094:	e001      	b.n	800a09a <strpbrk+0x1a>
 800a096:	4294      	cmp	r4, r2
 800a098:	d009      	beq.n	800a0ae <strpbrk+0x2e>
 800a09a:	461d      	mov	r5, r3
 800a09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	d1f8      	bne.n	800a096 <strpbrk+0x16>
 800a0a4:	787c      	ldrb	r4, [r7, #1]
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	2c00      	cmp	r4, #0
 800a0aa:	d1ee      	bne.n	800a08a <strpbrk+0xa>
 800a0ac:	782a      	ldrb	r2, [r5, #0]
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	bf08      	it	eq
 800a0b2:	2000      	moveq	r0, #0
 800a0b4:	bcf0      	pop	{r4, r5, r6, r7}
 800a0b6:	4770      	bx	lr
 800a0b8:	787c      	ldrb	r4, [r7, #1]
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	3001      	adds	r0, #1
 800a0be:	2c00      	cmp	r4, #0
 800a0c0:	d1e3      	bne.n	800a08a <strpbrk+0xa>
 800a0c2:	e7f3      	b.n	800a0ac <strpbrk+0x2c>
 800a0c4:	4632      	mov	r2, r6
 800a0c6:	e7f2      	b.n	800a0ae <strpbrk+0x2e>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	e7f3      	b.n	800a0b4 <strpbrk+0x34>
 800a0cc:	0000      	movs	r0, r0
	...

0800a0d0 <strspn>:
 800a0d0:	b4f0      	push	{r4, r5, r6, r7}
 800a0d2:	7804      	ldrb	r4, [r0, #0]
 800a0d4:	b1d4      	cbz	r4, 800a10c <strspn+0x3c>
 800a0d6:	780f      	ldrb	r7, [r1, #0]
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b19f      	cbz	r7, 800a104 <strspn+0x34>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	42bc      	cmp	r4, r7
 800a0e0:	bf18      	it	ne
 800a0e2:	460a      	movne	r2, r1
 800a0e4:	d102      	bne.n	800a0ec <strspn+0x1c>
 800a0e6:	e008      	b.n	800a0fa <strspn+0x2a>
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	d006      	beq.n	800a0fa <strspn+0x2a>
 800a0ec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1f9      	bne.n	800a0e8 <strspn+0x18>
 800a0f4:	1a28      	subs	r0, r5, r0
 800a0f6:	bcf0      	pop	{r4, r5, r6, r7}
 800a0f8:	4770      	bx	lr
 800a0fa:	786c      	ldrb	r4, [r5, #1]
 800a0fc:	3601      	adds	r6, #1
 800a0fe:	b11c      	cbz	r4, 800a108 <strspn+0x38>
 800a100:	4635      	mov	r5, r6
 800a102:	e7ec      	b.n	800a0de <strspn+0xe>
 800a104:	4638      	mov	r0, r7
 800a106:	e7f6      	b.n	800a0f6 <strspn+0x26>
 800a108:	1a30      	subs	r0, r6, r0
 800a10a:	e7f4      	b.n	800a0f6 <strspn+0x26>
 800a10c:	4620      	mov	r0, r4
 800a10e:	e7f2      	b.n	800a0f6 <strspn+0x26>
 800a110:	00000101 	.word	0x00000101
 800a114:	00020111 	.word	0x00020111
 800a118:	00001001 	.word	0x00001001
 800a11c:	00022011 	.word	0x00022011
 800a120:	00000002 	.word	0x00000002
 800a124:	0e031211 	.word	0x0e031211
 800a128:	00aa0006 	.word	0x00aa0006
 800a12c:	190b2011 	.word	0x190b2011
 800a130:	80030880 	.word	0x80030880
 800a134:	7410f000 	.word	0x7410f000
 800a138:	005500e8 	.word	0x005500e8
 800a13c:	240c2011 	.word	0x240c2011
 800a140:	03ab0c06 	.word	0x03ab0c06
 800a144:	00c20203 	.word	0x00c20203
 800a148:	01c03204 	.word	0x01c03204
 800a14c:	30032011 	.word	0x30032011
 800a150:	00c06403 	.word	0x00c06403
 800a154:	50022011 	.word	0x50022011
 800a158:	00000a84 	.word	0x00000a84
 800a15c:	54022011 	.word	0x54022011
 800a160:	0000070f 	.word	0x0000070f
 800a164:	5b052011 	.word	0x5b052011
 800a168:	78210440 	.word	0x78210440
 800a16c:	00000020 	.word	0x00000020
 800a170:	000c2111 	.word	0x000c2111
 800a174:	510fbaff 	.word	0x510fbaff
 800a178:	fcc9a9cf 	.word	0xfcc9a9cf
 800a17c:	010f1e1b 	.word	0x010f1e1b
 800a180:	0c0c2111 	.word	0x0c0c2111
 800a184:	ff15fdfc 	.word	0xff15fdfc
 800a188:	baff0f00 	.word	0xbaff0f00
 800a18c:	a9cf510f 	.word	0xa9cf510f
 800a190:	180c2111 	.word	0x180c2111
 800a194:	1e1bfcc9 	.word	0x1e1bfcc9
 800a198:	fdfc010f 	.word	0xfdfc010f
 800a19c:	0f00ff15 	.word	0x0f00ff15
 800a1a0:	06011211 	.word	0x06011211
 800a1a4:	00000000 	.word	0x00000000
 800a1a8:	00011211 	.word	0x00011211
 800a1ac:	00000085 	.word	0x00000085
 800a1b0:	01021111 	.word	0x01021111
 800a1b4:	000091d3 	.word	0x000091d3
	...
 800a1c0:	00300031 	.word	0x00300031
	...
 800a1d0:	656c6469 	.word	0x656c6469
 800a1d4:	00000000 	.word	0x00000000
 800a1d8:	00000043 	.word	0x00000043
 800a1dc:	00000042 	.word	0x00000042
 800a1e0:	00000041 	.word	0x00000041
 800a1e4:	44434241 	.word	0x44434241
 800a1e8:	00000045 	.word	0x00000045
 800a1ec:	00000000 	.word	0x00000000

0800a1f0 <ch_debug.5019>:
 800a1f0:	6e69616d 18001600 08440204 1814100c     main......D.....
 800a200:	1e1d1c00 00000000 00000000 00000000     ................
 800a210:	44434241 00000000 202d2d2d 726f6353     ABCD....--- Scor
 800a220:	203a2065 00000000 74796220 532f7365     e : .... bytes/S
 800a230:	00000000 67617355 74203a65 61657268     ....Usage: threa
 800a240:	0a0d7364 00000000 20202020 72646461     ds......    addr
 800a250:	20202020 63617473 7270206b 72206f69         stack prio r
 800a260:	20736665 20202020 74617473 000a0d65     efs     state...
 800a270:	6c383025 30252078 20786c38 756c3425     %08lx %08lx %4lu
 800a280:	6c342520 39252075 000a0d73 646e6553      %4lu %9s...Send
 800a290:	20612073 6b636170 202c7465 67617355     s a packet, Usag
 800a2a0:	73203a65 61703c20 74656b63 000a0d3e     e: s <packet>...
 800a2b0:	6361703c 3e74656b 73756d20 65622074     <packet> must be
 800a2c0:	61786520 796c7463 63203620 61726168      exactly 6 chara
 800a2d0:	72657463 000a0d73 44414552 00000059     cters...READY...
 800a2e0:	52525543 00544e45 54535457 00545241     CURRENT.WTSTART.
 800a2f0:	50535553 45444e45 00000044 55455551     SUSPENDED...QUEU
 800a300:	00004445 45535457 0000004d 544d5457     ED..WTSEM...WTMT
 800a310:	00000058 4f435457 0000444e 45454c53     X...WTCOND..SLEE
 800a320:	474e4950 00000000 58455457 00005449     PING....WTEXIT..
 800a330:	524f5457 00545645 4e415457 54564544     WTOREVT.WTANDEVT
 800a340:	00000000 4d444e53 00514753 4d444e53     ....SNDMSGQ.SNDM
 800a350:	00004753 534d5457 00000047 414e4946     SG..WTMSG...FINA
 800a360:	0000004c 00000000 00000000 00000000     L...............

0800a370 <vmt.9039.5018>:
 800a370:	08005d91 08005c61 08005cf1 08005bc1     .]..a\...\...[..
 800a380:	08005ce1 08005bb1 08005d81 08005c51     .\...[...]..Q\..

0800a390 <_stm32_dma_streams.5061>:
 800a390:	40020008 40020004 000b0000 4002001c     ...@...@.......@
 800a3a0:	40020004 000c0104 40020030 40020004     ...@....0..@...@
 800a3b0:	000d0208 40020044 40020004 000e030c     ....D..@...@....
 800a3c0:	40020058 40020004 000f0410 4002006c     X..@...@....l..@
 800a3d0:	40020004 00100514 40020080 40020004     ...@.......@...@
 800a3e0:	00110618 00000000 00000000 00000000     ................

0800a3f0 <states.8517.11143.4996>:
 800a3f0:	0800a2d8 0800a2e0 0800a2e8 0800a2f0     ................
 800a400:	0800a2fc 0800a304 0800a30c 0800a314     ................
 800a410:	0800a31c 0800a328 0800a330 0800a338     ....(...0...8...
 800a420:	0800a344 0800a34c 0800a354 0800a35c     D...L...T...\...

0800a430 <serusbcfg>:
 800a430:	20000d34 00020101 00000000 00000000     4.. ............

0800a440 <usbcfg>:
 800a440:	08003511 08006b11 08006c81 00000000     .5...k...l......

0800a450 <ep2config.11392.4654>:
 800a450:	00000003 00000000 08006c71 00000000     ........ql......
 800a460:	00000010 20001440 00000000 00000001     ....@.. ........
	...
 800a480:	20414d44 6c696166 00657275 6c756e28     DMA failure.(nul
 800a490:	0000296c 00000000 00000000 00000000     l)..............

0800a4a0 <pow10.10791.4519>:
 800a4a0:	0000000a 00000064 000003e8 00002710     ....d........'..
 800a4b0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 800a4c0:	3b9aca00 00000000 00000000 00000000     ...;............
 800a4d0:	00434241 00000000 00000000 00000000     ABC.............

0800a4e0 <CSWTCH.32.10428.10428.4366>:
 800a4e0:	02020200 02020202 02020202 02020202     ................
 800a4f0:	00000001 00000000 00000000 00000000     ................

0800a500 <halted_status.9576.4364>:
 800a500:	00000001 00000000 00000000 00000000     ................

0800a510 <ep0config.10422>:
 800a510:	00000000 08006681 080033d1 080078c1     .....f...3...x..
 800a520:	00400040 2000147c 2000147c 00000001     @.@.|.. |.. ....
 800a530:	20001474 00000000 00000000 00000000     t.. ............

0800a540 <zero_status.9575.4363>:
	...

0800a550 <active_status.9577.4365>:
	...

0800a560 <vcom_string3.11399.4734>:
 800a560:	00330308 00300030 00000000 00000000     ..3.0.0.........

0800a570 <CSWTCH.26.10421.10421.4745>:
 800a570:	00000400 00000600 00000000 00000000     ................

0800a580 <vcom_string1.11397.4732>:
 800a580:	004c0312 00610065 004c0066 00620061     ..L.e.a.f.L.a.b.
 800a590:	00000073 00000000 00000000 00000000     s...............

0800a5a0 <vcom_configuration_descriptor.11402.4737>:
 800a5a0:	00000043 0800a700 00000000 00000000     C...............

0800a5b0 <vcom_device_descriptor.11400.4735>:
 800a5b0:	00000012 0800a670 00000000 00000000     ....p...........
 800a5c0:	202d2d2d 74737953 203a6d65 00000000     --- System: ....
 800a5d0:	74796220 00007365 202d2d2d 65726854      bytes..--- Thre
 800a5e0:	203a6461 00000000 202d2d2d 656d6954     ad: ....--- Time
 800a5f0:	203a2072 00000000 202d2d2d 616d6553     r : ....--- Sema
 800a600:	203a6870 00000000 202d2d2d 6e657645     ph: ....--- Even
 800a610:	203a5374 00000000 202d2d2d 6e657645     tS: ....--- Even
 800a620:	203a4c74 00000000 202d2d2d 6574754d     tL: ....--- Mute
 800a630:	203a2078 00000000 202d2d2d 646e6f43     x : ....--- Cond
 800a640:	203a2e56 00000000 202d2d2d 75657551     V.: ....--- Queu
 800a650:	203a2065 00000000 202d2d2d 6c69614d     e : ....--- Mail
 800a660:	203a2e42 00000000 00004241 00000920     B.: ....AB.. ...

0800a670 <vcom_device_descriptor_data.11401.4736>:
 800a670:	01100112 40000002 00041eaf 02010200     .......@........
 800a680:	00000103 00000000 00000000 00000000     ................

0800a690 <vcom_string2.11398.4733>:
 800a690:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 800a6a0:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 800a6b0:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 800a6c0:	006f0050 00740072 00000000 00000000     P.o.r.t.........

0800a6d0 <vcom_string0.11396.4731>:
 800a6d0:	04090304 00000000 00000000 00000000     ................

0800a6e0 <vcom_strings.11395.4730>:
 800a6e0:	00000004 0800a6d0 00000012 0800a580     ................
 800a6f0:	00000038 0800a690 00000008 0800a560     8...........`...

0800a700 <vcom_configuration_descriptor_data.11403.4738>:
 800a700:	00430209 c0000102 00040932 02020100     ..C.....2.......
 800a710:	24050001 05011000 01000124 02022404     ...$....$....$..
 800a720:	00062405 82050701 ff000803 00010409     .$..............
 800a730:	00000a02 01050700 00004002 02810507     .........@......
 800a740:	00000040 00000000 00000000 00000000     @...............
 800a750:	202a2a2a 62696843 2f534f69 74205452     *** ChibiOS/RT t
 800a760:	20747365 74697573 00000065 002a2a2a     est suite...***.
 800a770:	202a2a2a 6e72654b 203a6c65 20202020     *** Kernel:     
 800a780:	00002020 202d2d2d 74736554 73614320       ..--- Test Cas
 800a790:	00002065 00000029 202d2d2d 75736552     e ..)...--- Resu
 800a7a0:	203a746c 4c494146 20455255 00002328     lt: FAILURE (#..
 800a7b0:	0000295d 202d2d2d 75736552 203a746c     ])..--- Result: 
 800a7c0:	43435553 00535345 4c494146 00455255     SUCCESS.FAILURE.
 800a7d0:	2e302e33 76656430 00000000 202a2a2a     3.0.0dev....*** 
 800a7e0:	706d6f43 64656c69 2020203a 00002020     Compiled:     ..
 800a7f0:	20626546 32203220 20353130 3332202d     Feb  2 2015 - 23
 800a800:	3a39303a 00003832 202a2a2a 706d6f43     :09:28..*** Comp
 800a810:	72656c69 2020203a 00002020 20434347     iler:     ..GCC 
 800a820:	2e372e34 30322034 39303331 28203331     4.7.4 20130913 (
 800a830:	656c6572 29657361 52415b20 6d652f4d     release) [ARM/em
 800a840:	64646562 342d6465 622d375f 636e6172     bedded-4_7-branc
 800a850:	65722068 69736976 32206e6f 30363230     h revision 20260
 800a860:	00005d31 202a2a2a 68637241 63657469     1]..*** Architec
 800a870:	65727574 0000203a 764d5241 004d2d37     ture: ..ARMv7-M.
 800a880:	202a2a2a 65726f43 72615620 746e6169     *** Core Variant
 800a890:	0000203a 74726f43 4d2d7865 00000033     : ..Cortex-M3...
 800a8a0:	202a2a2a 74726f50 666e4920 20203a6f     *** Port Info:  
 800a8b0:	00002020 61766441 6465636e 72656b20       ..Advanced ker
 800a8c0:	206c656e 65646f6d 00000000 202a2a2a     nel mode....*** 
 800a8d0:	74616c50 6d726f66 2020203a 00002020     Platform:     ..
 800a8e0:	334d5453 30314632 65502078 726f6672     STM32F10x Perfor
 800a8f0:	636e616d 694c2065 4d20656e 75696465     mance Line Mediu
 800a900:	6544206d 7469736e 00000079 202a2a2a     m Density...*** 
 800a910:	74736554 616f4220 203a6472 00002020     Test Board:   ..
 800a920:	55207854 6e696c70 6f62206b 00647261     Tx Uplink board.
 800a930:	00002820 00005b20 616e6946 6572206c      (.. [..Final re
 800a940:	746c7573 0000203a 6e696c62 0072656b     sult: ..blinker.
 800a950:	67617355 6d203a65 0a0d6d65 00000000     Usage: mem......
 800a960:	65726f63 65726620 656d2065 79726f6d     core free memory
 800a970:	25203a20 79622075 0d736574 0000000a      : %u bytes.....
 800a980:	70616568 61726620 6e656d67 20207374     heap fragments  
 800a990:	25203a20 000a0d75 70616568 65726620      : %u...heap fre
 800a9a0:	6f742065 206c6174 25203a20 79622075     e total  : %u by
 800a9b0:	0d736574 0000000a 67617355 74203a65     tes.....Usage: t
 800a9c0:	0d747365 0000000a 2074756f 6d20666f     est.....out of m
 800a9d0:	726f6d65 000a0d79 730a0a0d 70706f74     emory......stopp
 800a9e0:	0a0d6465 00000000 67617355 77203a65     ed......Usage: w
 800a9f0:	65746972 00000a0d 73746547 72617020     rite....Gets par
 800aa00:	44492074 7355202c 3a656761 0d207020     t ID, Usage: p .
 800aa10:	0000000a 0d583425 0000000a 00000000     ....%4X.........

0800aa20 <evhndl.7763.4350>:
 800aa20:	080018d1 080018e1 080018f1 00000000     ................
 800aa30:	67617355 25203a65 000a0d73 6f666e69     Usage: %s...info
 800aa40:	00000000 6e72654b 203a6c65 20202020     ....Kernel:     
 800aa50:	73252020 00000a0d 706d6f43 72656c69       %s....Compiler
 800aa60:	2020203a 73252020 00000a0d 68637241     :     %s....Arch
 800aa70:	63657469 65727574 7325203a 00000a0d     itecture: %s....
 800aa80:	65726f43 72615620 746e6169 7325203a     Core Variant: %s
 800aa90:	00000a0d 74726f50 666e4920 20203a6f     ....Port Info:  
 800aaa0:	73252020 00000a0d 74616c50 6d726f66       %s....Platform
 800aab0:	2020203a 73252020 00000a0d 72616f42     :     %s....Boar
 800aac0:	20203a64 20202020 73252020 00000a0d     d:        %s....
 800aad0:	6c697542 69742064 203a656d 73252020     Build time:   %s
 800aae0:	73257325 00000a0d 20626546 32203220     %s%s....Feb  2 2
 800aaf0:	00353130 00202d20 303a3332 35353a39     015. - .23:09:55
 800ab00:	00000000 74737973 00656d69 0d756c25     ....systime.%lu.
 800ab10:	0000000a 636f6c20 6e752b6b 6b636f6c     .... lock+unlock
 800ab20:	0000532f 72687420 73646165 0000532f     /S.. threads/S..
 800ab30:	78746320 2f637773 00000053 69617720      ctxswc/S... wai
 800ab40:	69732b74 6c616e67 0000532f 6d697420     t+signal/S.. tim
 800ab50:	2f737265 00000053 73657220 64656863     ers/S... resched
 800ab60:	73656c75 202c532f 00000000 67736d20     ules/S, .... msg
 800ab70:	2c532f73 00000020 00000000 00000000     s/S, ...........

0800ab80 <shell_cfg1.11100>:
 800ab80:	2000153c 0800ac20 00000000 00000000     <..  ...........

0800ab90 <spicfg.11720.4580>:
 800ab90:	08007801 40010800 000c0004 00000000     .x.....@........
 800aba0:	656e7554 6f642073 62206e77 30352079     Tunes down by 50
 800abb0:	202c7a68 67617355 64203a65 00000a0d     hz, Usage: d....
 800abc0:	71657246 636e6575 73692079 7525203a     Frequency is: %u
 800abd0:	00000a0d 656e7554 70752073 20796220     ....Tunes up by 
 800abe0:	7a683035 7355202c 3a656761 0a0d7520     50hz, Usage: u..
 800abf0:	00000000 34346973 00003233 006d656d     ....si4432..mem.
 800ac00:	65726874 00736461 74697277 00000065     threads.write...
 800ac10:	00000075 00000064 00000070 00000000     u...d...p.......

0800ac20 <commands.11101>:
 800ac20:	0800abfc 08008201 0800ac00 080030b1     .............0..
 800ac30:	0800b1a8 08008261 0800ac08 080082c1     ....a...........
 800ac40:	0800ac10 08009401 0800ac14 08009391     ................
 800ac50:	0800b464 08003131 0800ac18 08008331     d...11......1...
	...

0800ac70 <ep1config.11389>:
 800ac70:	00000002 00000000 08009471 08009501     ........q.......
 800ac80:	00400040 20001824 20001810 00000002     @.@.$.. ... ....
	...

0800aca0 <patternthd>:
 800aca0:	0800af10 0800aee0 0800b020 0800ad40     ........ ...@...
	...

0800acc0 <patternmsg>:
 800acc0:	0800aeb0 00000000 00000000 00000000     ................

0800acd0 <testevt3.4530>:
 800acd0:	0800b290 08007311 00000000 08009c01     .....s..........

0800ace0 <testbmk10.4572>:
 800ace0:	0800b4b8 00000000 00000000 08008b61     ............a...

0800acf0 <patterndyn>:
 800acf0:	0800ae30 0800aff0 0800aec0 00000000     0...............

0800ad00 <testbmk12.4574>:
 800ad00:	0800b500 080042a1 00000000 08008951     .....B......Q...

0800ad10 <testsem1.4471>:
 800ad10:	0800b11c 08005321 00000000 080056d1     ....!S.......V..

0800ad20 <patternevt>:
 800ad20:	0800afd0 0800ad30 0800acd0 00000000     ....0...........

0800ad30 <testevt2.4529>:
 800ad30:	0800b274 08007301 00000000 08009091     t....s..........

0800ad40 <testthd4.4499>:
 800ad40:	0800b10c 00000000 00000000 080085d1     ................

0800ad50 <patternpools>:
 800ad50:	0800adb0 00000000 00000000 00000000     ................

0800ad60 <testmtx6.4508>:
 800ad60:	0800b1dc 08004221 00000000 08005851     ....!B......QX..

0800ad70 <testbmk1.4559>:
 800ad70:	0800b39c 00000000 00000000 08008ea1     ................

0800ad80 <testbmk9.4571>:
 800ad80:	0800b494 00000000 00000000 08003001     .............0..

0800ad90 <testbmk6.4568>:
 800ad90:	0800b420 00000000 00000000 080089c1      ...............

0800ada0 <testmtx8.4510>:
 800ada0:	0800b20c 080041d1 00000000 08005621     .....A......!V..

0800adb0 <testpools1.4538>:
 800adb0:	0800b2cc 080053a1 00000000 08004311     .....S.......C..

0800adc0 <testbmk3.4565>:
 800adc0:	0800b3cc 00000000 00000000 08008fa1     ................

0800add0 <patterns.6764>:
 800add0:	0800aca0 0800af70 0800af90 0800acc0     ....p...........
 800ade0:	0800aef0 0800ad20 0800ae70 0800ad50     .... ...p...P...
 800adf0:	0800acf0 0800ae80 0800af20 00000000     ........ .......

0800ae00 <testbmk2.4564>:
 800ae00:	0800b3b4 00000000 00000000 08008f21     ............!...

0800ae10 <testsem2.4472>:
 800ae10:	0800b134 08005301 00000000 080086a1     4....S..........

0800ae20 <testbmk5.4567>:
 800ae20:	0800b400 00000000 00000000 08008e01     ................

0800ae30 <testdyn1.4544>:
 800ae30:	0800b2e8 08006ae1 00000000 080071b1     .....j.......q..

0800ae40 <testmbox1.4518>:
 800ae40:	0800b230 080052a1 00000000 08005ee1     0....R.......^..

0800ae50 <testbmk8.4570>:
 800ae50:	0800b468 00000000 00000000 08008be1     h...............

0800ae60 <testmtx7.4509>:
 800ae60:	0800b1f4 08004201 00000000 08006d01     .....B.......m..

0800ae70 <patternheap>:
 800ae70:	0800afe0 00000000 00000000 00000000     ................

0800ae80 <patternqueues>:
 800ae80:	0800aed0 0800b000 00000000 00000000     ................

0800ae90 <testmtx4.4506>:
 800ae90:	0800b1b0 08004261 00000000 08007cf1     ....aB.......|..

0800aea0 <testsem4.4460>:
 800aea0:	0800b168 00000000 00000000 08009ab1     h...............

0800aeb0 <testmsg1.4512>:
 800aeb0:	0800b220 00000000 00000000 08008351      ...........Q...

0800aec0 <testdyn3.4550>:
 800aec0:	0800b344 08007891 00000000 08007fc1     D....x..........

0800aed0 <testqueues1.4552>:
 800aed0:	0800b36c 08004161 00000000 08002d31     l...aA......1-..

0800aee0 <testthd2.4497>:
 800aee0:	0800b0d4 00000000 00000000 08002651     ............Q&..

0800aef0 <patternmbox>:
 800aef0:	0800ae40 00000000 00000000 00000000     @...............

0800af00 <testbmk7.4569>:
 800af00:	0800b440 08005361 00000000 08008cd1     @...aS..........

0800af10 <testthd1.4492>:
 800af10:	0800b0b8 00000000 00000000 08002571     ............q%..

0800af20 <patternbmk>:
 800af20:	0800ad70 0800ae00 0800adc0 0800af60     p...........`...
 800af30:	0800ae20 0800ad90 0800af00 0800ae50      ...........P...
 800af40:	0800ad80 0800ace0 0800b010 0800ad00     ................
 800af50:	0800afb0 00000000 00000000 00000000     ................

0800af60 <testbmk4.4566>:
 800af60:	0800b3e4 00000000 00000000 08008a31     ............1...

0800af70 <patternsem>:
 800af70:	0800ad10 0800ae10 0800afc0 0800aea0     ................
	...

0800af90 <patternmtx>:
 800af90:	0800b540 0800ae90 0800b550 0800ad60     @.......P...`...
 800afa0:	0800ae60 0800ada0 00000000 00000000     `...............

0800afb0 <testbmk13.4575>:
 800afb0:	0800b520 00000000 00000000 080070b1      ............p..

0800afc0 <testsem3.4473>:
 800afc0:	0800b148 080052e1 00000000 08005581     H....R.......U..

0800afd0 <testevt1.4524>:
 800afd0:	0800b250 080072f1 00000000 080084f1     P....r..........

0800afe0 <testheap1.4532>:
 800afe0:	0800b2a4 08007861 00000000 08002811     ....ax.......(..

0800aff0 <testdyn2.4549>:
 800aff0:	0800b314 08005381 00000000 08004511     .....S.......E..

0800b000 <testqueues2.4557>:
 800b000:	0800b384 08004191 00000000 08003611     .....A.......6..

0800b010 <testbmk11.4573>:
 800b010:	0800b4dc 08005341 00000000 08008af1     ....AS..........

0800b020 <testthd3.4498>:
 800b020:	0800b0f0 00000000 00000000 08001be1     ................
 800b030:	6c656873 0000006c 68430a0d 4f696269     shell.....ChibiO
 800b040:	54522f53 65685320 0a0d6c6c 00000000     S/RT Shell......
 800b050:	203e6863 00000000 0000445e 206f6f74     ch> ....^D..too 
 800b060:	796e616d 67726120 6e656d75 0a0d7374     many arguments..
 800b070:	00000000 74697865 00000000 706c6568     ....exit....help
 800b080:	00000000 6d6d6f43 73646e61 6568203a     ....Commands: he
 800b090:	6520706c 20746978 00000000 00207325     lp exit ....%s .
 800b0a0:	00007325 0a0d3f20 00000000 6f6c0a0d     %s.. ?........lo
 800b0b0:	74756f67 00000000 65726854 2c736461     gout....Threads,
 800b0c0:	716e6520 69756575 7420676e 20747365      enqueuing test 
 800b0d0:	00003123 65726854 2c736461 716e6520     #1..Threads, enq
 800b0e0:	69756575 7420676e 20747365 00003223     ueuing test #2..
 800b0f0:	65726854 2c736461 69727020 7469726f     Threads, priorit
 800b100:	68632079 65676e61 00000000 65726854     y change....Thre
 800b110:	2c736461 6c656420 00737961 616d6553     ads, delays.Sema
 800b120:	726f6870 202c7365 75716e65 6e697565     phores, enqueuin
 800b130:	00000067 616d6553 726f6870 202c7365     g...Semaphores, 
 800b140:	656d6974 0074756f 616d6553 726f6870     timeout.Semaphor
 800b150:	202c7365 6d6f7461 73206369 616e6769     es, atomic signa
 800b160:	61772d6c 00007469 616e6942 53207972     l-wait..Binary S
 800b170:	70616d65 65726f68 66202c73 74636e75     emaphores, funct
 800b180:	616e6f69 7974696c 00000000 6574754d     ionality....Mute
 800b190:	2c736578 69727020 7469726f 6e652079     xes, priority en
 800b1a0:	75657571 20676e69 74736574 00000000     queuing test....
 800b1b0:	6574754d 2c736578 69727020 7469726f     Mutexes, priorit
 800b1c0:	65722079 6e727574 00000000 6574754d     y return....Mute
 800b1d0:	2c736578 61747320 00737574 646e6f43     xes, status.Cond
 800b1e0:	2c726156 67697320 206c616e 74736574     Var, signal test
 800b1f0:	00000000 646e6f43 2c726156 6f726220     ....CondVar, bro
 800b200:	61636461 74207473 00747365 646e6f43     adcast test.Cond
 800b210:	2c726156 6f6f6220 74207473 00747365     Var, boost test.
 800b220:	7373654d 73656761 6f6c202c 0000706f     Messages, loop..
 800b230:	6c69614d 65786f62 71202c73 69756575     Mailboxes, queui
 800b240:	6120676e 7420646e 6f656d69 00737475     ng and timeouts.
 800b250:	6e657645 202c7374 69676572 61727473     Events, registra
 800b260:	6e6f6974 646e6120 73696420 63746170     tion and dispatc
 800b270:	00000068 6e657645 202c7374 74696177     h...Events, wait
 800b280:	646e6120 6f726220 61636461 00007473      and broadcast..
 800b290:	6e657645 202c7374 656d6974 7374756f     Events, timeouts
 800b2a0:	00000000 70616548 6c61202c 61636f6c     ....Heap, alloca
 800b2b0:	6e6f6974 646e6120 61726620 6e656d67     tion and fragmen
 800b2c0:	69746174 74206e6f 00747365 6f6d654d     tation test.Memo
 800b2d0:	50207972 736c6f6f 7571202c 2f657565     ry Pools, queue/
 800b2e0:	75716564 00657565 616e7944 2063696d     dequeue.Dynamic 
 800b2f0:	73495041 6874202c 64616572 72632073     APIs, threads cr
 800b300:	69746165 66206e6f 206d6f72 70616568     eation from heap
 800b310:	00000000 616e7944 2063696d 73495041     ....Dynamic APIs
 800b320:	6874202c 64616572 72632073 69746165     , threads creati
 800b330:	66206e6f 206d6f72 6f6d656d 70207972     on from memory p
 800b340:	006c6f6f 616e7944 2063696d 73495041     ool.Dynamic APIs
 800b350:	6572202c 74736967 61207972 7220646e     , registry and r
 800b360:	72656665 65636e65 00000073 75657551     eferences...Queu
 800b370:	202c7365 75706e69 75712074 73657565     es, input queues
 800b380:	00000000 75657551 202c7365 7074756f     ....Queues, outp
 800b390:	71207475 65756575 00000073 636e6542     ut queues...Benc
 800b3a0:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 800b3b0:	00003123 636e6542 72616d68 6d202c6b     #1..Benchmark, m
 800b3c0:	61737365 20736567 00003223 636e6542     essages #2..Benc
 800b3d0:	72616d68 6d202c6b 61737365 20736567     hmark, messages 
 800b3e0:	00003323 636e6542 72616d68 63202c6b     #3..Benchmark, c
 800b3f0:	65746e6f 73207478 63746977 00000068     ontext switch...
 800b400:	636e6542 72616d68 74202c6b 61657268     Benchmark, threa
 800b410:	202c7364 6c6c7566 63796320 0000656c     ds, full cycle..
 800b420:	636e6542 72616d68 74202c6b 61657268     Benchmark, threa
 800b430:	202c7364 61657263 6f206574 00796c6e     ds, create only.
 800b440:	636e6542 72616d68 6d202c6b 20737361     Benchmark, mass 
 800b450:	63736572 75646568 202c656c 68742035     reschedule, 5 th
 800b460:	64616572 00000073 636e6542 72616d68     reads...Benchmar
 800b470:	72202c6b 646e756f 626f7220 63206e69     k, round robin c
 800b480:	65746e6f 73207478 63746977 676e6968     ontext switching
 800b490:	00000000 636e6542 72616d68 49202c6b     ....Benchmark, I
 800b4a0:	51204f2f 65756575 68742073 67756f72     /O Queues throug
 800b4b0:	74757068 00000000 636e6542 72616d68     hput....Benchmar
 800b4c0:	76202c6b 75747269 74206c61 72656d69     k, virtual timer
 800b4d0:	65732073 65722f74 00746573 636e6542     s set/reset.Benc
 800b4e0:	72616d68 73202c6b 70616d65 65726f68     hmark, semaphore
 800b4f0:	61772073 732f7469 616e6769 0000006c     s wait/signal...
 800b500:	636e6542 72616d68 6d202c6b 78657475     Benchmark, mutex
 800b510:	6c207365 2f6b636f 6f6c6e75 00006b63     es lock/unlock..
 800b520:	636e6542 72616d68 52202c6b 66204d41     Benchmark, RAM f
 800b530:	70746f6f 746e6972 00000000 00000000     ootprint........

0800b540 <testmtx1.4501>:
 800b540:	0800b18c 08004281 00000000 08002491     .....B.......$..

0800b550 <testmtx5.4507>:
 800b550:	0800b1cc 08004241 00000000 08002be1     ....AB.......+..

0800b560 <_ctype_>:
 800b560:	20202000 20202020 28282020 20282828     .         ((((( 
 800b570:	20202020 20202020 20202020 20202020                     
 800b580:	10108820 10101010 10101010 10101010      ...............
 800b590:	04040410 04040404 10040404 10101010     ................
 800b5a0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800b5b0:	01010101 01010101 01010101 10101010     ................
 800b5c0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800b5d0:	02020202 02020202 02020202 10101010     ................
 800b5e0:	00000020 00000000 00000000 00000000      ...............
	...
