ARM GAS  /tmp/cc40Qodv.s 			page 1


   1              	# 1 "../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s"
   1              	/*
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    compilers/GCC/chcoreasm_v7m.s
  22              	 * @brief   ARMv7-M architecture port low level code.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#if !defined(FALSE) || defined(__DOXYGEN__)
  29              	#define FALSE   0
  30              	#endif
  31              	
  32              	#if !defined(TRUE) || defined(__DOXYGEN__)
  33              	#define TRUE    1
  34              	#endif
  35              	
  36              	#define _FROM_ASM_
  37              	#include "chconf.h"
   1              	/*
  38              	#include "chcore.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
ARM GAS  /tmp/cc40Qodv.s 			page 2


  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    ARMCMx/chcore.h
  22              	 * @brief   ARM Cortex-Mx port macros and structures.
  23              	 *
  24              	 * @addtogroup ARMCMx_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef _CHCORE_H_
  29              	#define _CHCORE_H_
  30              	
  31              	/*===========================================================================*/
  32              	/* Module constants.                                                         */
  33              	/*===========================================================================*/
  34              	
  35              	/**
  36              	 * @name    Architecture and Compiler
  37              	 * @{
  38              	 */
  39              	/**
  40              	 * @brief   Macro defining a generic ARM architecture.
  41              	 */
  42              	#define PORT_ARCHITECTURE_ARM
  43              	
  44              	/* The following code is not processed when the file is included from an
  45              	   asm module because those intrinsic macros are not necessarily defined
  46              	   by the assembler too.*/
  47              	#if !defined(_FROM_ASM_)
  48              	
  49              	/**
  50              	 * @brief   Compiler name and version.
  51              	 */
  52              	#if defined(__GNUC__) || defined(__DOXYGEN__)
  53              	#define PORT_COMPILER_NAME              "GCC " __VERSION__
  54              	
  55              	#elif defined(__ICCARM__)
  56              	#define PORT_COMPILER_NAME              "IAR"
  57              	
  58              	#elif defined(__CC_ARM)
  59              	#define PORT_COMPILER_NAME              "RVCT"
  60              	
  61              	#else
  62              	#error "unsupported compiler"
  63              	#endif
  64              	
  65              	#endif /* !defined(_FROM_ASM_) */
  66              	
  67              	/** @} */
  68              	
  69              	/**
  70              	 * @name    Cortex-M variants
  71              	 * @{
  72              	 */
  73              	#define CORTEX_M0                       0   /**< @brief Cortex-M0 variant.  */
ARM GAS  /tmp/cc40Qodv.s 			page 3


  74              	#define CORTEX_M0PLUS                   1   /**< @brief Cortex-M0+ variant. */
  75              	#define CORTEX_M1                       10  /**< @brief Cortex-M1 variant.  */
  76              	#define CORTEX_M3                       30  /**< @brief Cortex-M3 variant.  */
  77              	#define CORTEX_M4                       40  /**< @brief Cortex-M4 variant.  */
  78              	/** @} */
  79              	
  80              	/* Inclusion of the Cortex-Mx implementation specific parameters.*/
  81              	#include "cmparams.h"
   1              	/*
  82              	
  83              	/*===========================================================================*/
  84              	/* Module pre-compile time settings.                                         */
  85              	/*===========================================================================*/
  86              	
  87              	/**
  88              	 * @brief   Enables an alternative timer implementation.
  89              	 * @details Usually the port uses a timer interface defined in the file
  90              	 *          @p chcore_timer.h, if this option is enabled then the file
  91              	 *          @p chcore_timer_alt.h is included instead.
  92              	 */
  93              	#if !defined(PORT_USE_ALT_TIMER)
  94              	#define PORT_USE_ALT_TIMER              FALSE
  95              	#endif
  96              	
  97              	/*===========================================================================*/
  98              	/* Derived constants and error checks.                                       */
  99              	/*===========================================================================*/
 100              	
 101              	/* The following code is not processed when the file is included from an
 102              	   asm module.*/
 103              	#if !defined(_FROM_ASM_)
 104              	
 105              	/*
 106              	 * Inclusion of the appropriate CMSIS header for the selected device.
 107              	 */
 108              	#if CORTEX_MODEL == CORTEX_M0
 109              	#include "core_cm0.h"
 110              	#elif CORTEX_MODEL == CORTEX_M0PLUS
 111              	#include "core_cm0plus.h"
 112              	#elif CORTEX_MODEL == CORTEX_M3
 113              	#include "core_cm3.h"
 114              	#elif CORTEX_MODEL == CORTEX_M4
 115              	#include "core_cm4.h"
 116              	#else
 117              	#error "unknown or unsupported Cortex-M model"
 118              	#endif
 119              	
 120              	#endif /* !defined(_FROM_ASM_) */
 121              	
 122              	/*===========================================================================*/
 123              	/* Module data structures and types.                                         */
 124              	/*===========================================================================*/
 125              	
 126              	/* The following code is not processed when the file is included from an
 127              	   asm module.*/
 128              	#if !defined(_FROM_ASM_)
 129              	
ARM GAS  /tmp/cc40Qodv.s 			page 4


 130              	/**
 131              	 * @brief   Type of a generic ARM register.
 132              	 */
 133              	typedef void *regarm_t;
 134              	
 135              	/**
 136              	 * @brief   Type of stack and memory alignment enforcement.
 137              	 * @note    In this architecture the stack alignment is enforced to 64 bits,
 138              	 *          32 bits alignment is supported by hardware but deprecated by ARM,
 139              	 *          the implementation choice is to not offer the option.
 140              	 */
 141              	typedef uint64_t stkalign_t;
 142              	
 143              	/* The following declarations are there just for Doxygen documentation, the
 144              	   real declarations are inside the sub-headers being specific for the
 145              	   sub-architectures.*/
 146              	#if defined(__DOXYGEN__)
 147              	/**
 148              	 * @brief   Interrupt saved context.
 149              	 * @details This structure represents the stack frame saved during a
 150              	 *          preemption-capable interrupt handler.
 151              	 * @note    It is implemented to match the Cortex-Mx exception context.
 152              	 */
 153              	struct port_extctx {};
 154              	
 155              	/**
 156              	 * @brief   System saved context.
 157              	 * @details This structure represents the inner stack frame during a context
 158              	 *          switch.
 159              	 */
 160              	struct port_intctx {};
 161              	#endif /* defined(__DOXYGEN__) */
 162              	
 163              	/**
 164              	 * @brief   Platform dependent part of the @p thread_t structure.
 165              	 * @details In this port the structure just holds a pointer to the
 166              	 *          @p port_intctx structure representing the stack pointer
 167              	 *          at context switch time.
 168              	 */
 169              	struct context {
 170              	  struct port_intctx *r13;
 171              	};
 172              	
 173              	#endif /* !defined(_FROM_ASM_) */
 174              	
 175              	/*===========================================================================*/
 176              	/* Module macros.                                                            */
 177              	/*===========================================================================*/
 178              	
 179              	/**
 180              	 * @brief   Total priority levels.
 181              	 */
 182              	#define CORTEX_PRIORITY_LEVELS          (1 << CORTEX_PRIORITY_BITS)
 183              	
 184              	/**
 185              	 * @brief   Minimum priority level.
 186              	 * @details This minimum priority level is calculated from the number of
ARM GAS  /tmp/cc40Qodv.s 			page 5


 187              	 *          priority bits supported by the specific Cortex-Mx implementation.
 188              	 */
 189              	#define CORTEX_MINIMUM_PRIORITY         (CORTEX_PRIORITY_LEVELS - 1)
 190              	
 191              	/**
 192              	 * @brief   Maximum priority level.
 193              	 * @details The maximum allowed priority level is always zero.
 194              	 */
 195              	#define CORTEX_MAXIMUM_PRIORITY         0
 196              	
 197              	/**
 198              	 * @brief   Priority level verification macro.
 199              	 */
 200              	#define CORTEX_IS_VALID_PRIORITY(n)                                         \
 201              	  (((n) >= 0) && ((n) < CORTEX_PRIORITY_LEVELS))
 202              	
 203              	/**
 204              	 * @brief   Priority level verification macro.
 205              	 */
 206              	#define CORTEX_IS_VALID_KERNEL_PRIORITY(n)                                  \
 207              	  (((n) >= CORTEX_MAX_KERNEL_PRIORITY) && ((n) < CORTEX_PRIORITY_LEVELS))
 208              	
 209              	/**
 210              	 * @brief   Priority level to priority mask conversion macro.
 211              	 */
 212              	#define CORTEX_PRIO_MASK(n)                                                 \
 213              	  ((n) << (8 - CORTEX_PRIORITY_BITS))
 214              	
 215              	/*===========================================================================*/
 216              	/* External declarations.                                                    */
 217              	/*===========================================================================*/
 218              	
 219              	/*===========================================================================*/
 220              	/* Module inline functions.                                                  */
 221              	/*===========================================================================*/
 222              	
 223              	/* Includes the sub-architecture-specific part.*/
 224              	#if (CORTEX_MODEL == CORTEX_M0) || (CORTEX_MODEL == CORTEX_M0PLUS) ||       \
 225              	    (CORTEX_MODEL == CORTEX_M1)
 226              	#include "chcore_v6m.h"
 227              	#elif (CORTEX_MODEL == CORTEX_M3) || (CORTEX_MODEL == CORTEX_M4)
 228              	#include "chcore_v7m.h"
   1              	/*
 229              	#endif
  39              	
  40              	#if !defined(__DOXYGEN__)
  41              	
  42              	                .set    CONTEXT_OFFSET, 12
  43              	                .set    SCB_ICSR, 0xE000ED04
  44              	                .set    ICSR_PENDSVSET, 0x10000000
  45              	
  46              	                .syntax unified
  47              	                .cpu    cortex-m4
  48              	#if CORTEX_USE_FPU
  49              	                .fpu    fpv4-sp-d16
  50              	#else
  51              	                .fpu    softvfp
ARM GAS  /tmp/cc40Qodv.s 			page 6


  52              	#endif
  53              	
  54              	                .thumb
  55              	                .text
  56              	
  57              	/*--------------------------------------------------------------------------*
  58              	 * Performs a context switch between two threads.
  59              	 *--------------------------------------------------------------------------*/
  60              	                .thumb_func
  61              	                .globl  _port_switch
  62              	_port_switch:
  63 0000 2DE9F04F 	                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  64              	#if CORTEX_USE_FPU
  65              	                vpush   {s16-s31}
  66              	#endif
  67 0004 C1F80CD0 	                str     sp, [r1, #CONTEXT_OFFSET]
  68 0008 D0F80CD0 	                ldr     sp, [r0, #CONTEXT_OFFSET]
  69              	#if CORTEX_USE_FPU
  70              	                vpop    {s16-s31}
  71              	#endif
  72 000c BDE8F08F 	                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  73              	
  74              	/*--------------------------------------------------------------------------*
  75              	 * Start a thread by invoking its work function.
  76              	 *
  77              	 * Threads execution starts here, the code leaves the system critical zone
  78              	 * and then jumps into the thread function passed in register R4. The
  79              	 * register R5 contains the thread parameter. The function chThdExit() is
  80              	 * called on thread function return.
  81              	 *--------------------------------------------------------------------------*/
  82              	                .thumb_func
  83              	                .globl  _port_thread_start
  84              	_port_thread_start:
  85              	#if CH_DBG_SYSTEM_STATE_CHECK
  86              	                bl      _dbg_check_unlock
  87              	#endif
  88              	#if CH_DBG_STATISTICS
  89              	                bl      _stats_stop_measure_crit_thd
  90              	#endif
  91              	#if !CORTEX_SIMPLIFIED_PRIORITY
  92 0010 0023     	                movs    r3, #0
  93 0012 83F31188 	                msr     BASEPRI, r3
  94              	#else /* CORTEX_SIMPLIFIED_PRIORITY */
  95              	                cpsie   i
  96              	#endif /* CORTEX_SIMPLIFIED_PRIORITY */
  97 0016 2846     	                mov     r0, r5
  98 0018 A047     	                blx     r4
  99 001a FFF7FEFF 	                bl      chThdExit
 100              	
 101              	/*--------------------------------------------------------------------------*
 102              	 * Post-IRQ switch code.
 103              	 *
 104              	 * Exception handlers return here for context switching.
 105              	 *--------------------------------------------------------------------------*/
 106              	                .thumb_func
 107              	                .globl  _port_switch_from_isr
 108              	_port_switch_from_isr:
ARM GAS  /tmp/cc40Qodv.s 			page 7


 109              	#if CH_DBG_STATISTICS
 110              	                bl      _stats_start_measure_crit_thd
 111              	#endif
 112              	#if CH_DBG_SYSTEM_STATE_CHECK
 113              	                bl      _dbg_check_lock
 114              	#endif
 115 001e FFF7FEFF 	                bl      chSchDoReschedule
 116              	#if CH_DBG_SYSTEM_STATE_CHECK
 117              	                bl      _dbg_check_unlock
 118              	#endif
 119              	#if CH_DBG_STATISTICS
 120              	                bl      _stats_stop_measure_crit_thd
 121              	#endif
 122              	                .globl  _port_exit_from_isr
 123              	_port_exit_from_isr:
 124              	#if CORTEX_SIMPLIFIED_PRIORITY
 125              	                movw    r3, #:lower16:SCB_ICSR
 126              	                movt    r3, #:upper16:SCB_ICSR
 127              	                mov     r2, ICSR_PENDSVSET
 128              	                str     r2, [r3, #0]
 129              	                cpsie   i
 130              	#else /* !CORTEX_SIMPLIFIED_PRIORITY */
 131 0022 00DF     	                svc     #0
 132              	#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
 133 0024 FEE7     	.L1:            b       .L1
ARM GAS  /tmp/cc40Qodv.s 			page 8


DEFINED SYMBOLS
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:42     *ABS*:0000000c CONTEXT_OFFSET
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:43     *ABS*:e000ed04 SCB_ICSR
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:44     *ABS*:10000000 ICSR_PENDSVSET
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:62     .text:00000000 _port_switch
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:63     .text:00000000 $t
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:84     .text:00000010 _port_thread_start
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:108    .text:0000001e _port_switch_from_isr
../ChibiOS/os/rt/ports/ARMCMx/compilers/GCC/chcoreasm_v7m.s:123    .text:00000022 _port_exit_from_isr

UNDEFINED SYMBOLS
chThdExit
chSchDoReschedule
